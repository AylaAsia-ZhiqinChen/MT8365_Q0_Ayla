// clang-format off
// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_vts_test.sh
// Generated from: add.mod.py.
namespace add {
// Generated add test
#include "examples/add.example.cpp"
// Generated model constructor
#include "vts_models/add.model.cpp"
} // namespace add

TEST_F(NeuralnetworksHidlTest, add) {
  generated_tests::Execute(device,
                           add::createTestModel,
                           add::is_ignored,
                           add::get_examples());
}

TEST_F(ValidationTest, add) {
  const Model model = add::createTestModel();
  const std::vector<Request> requests = createRequests(add::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add::createTestModel_dynamic_output_shape,
                           add::is_ignored_dynamic_output_shape,
                           add::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_dynamic_output_shape) {
  const Model model = add::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: add_broadcast_quant8.mod.py.
namespace add_broadcast_quant8 {
// Generated add_broadcast_quant8 test
#include "examples/add_broadcast_quant8.example.cpp"
// Generated model constructor
#include "vts_models/add_broadcast_quant8.model.cpp"
} // namespace add_broadcast_quant8

TEST_F(NeuralnetworksHidlTest, add_broadcast_quant8) {
  generated_tests::Execute(device,
                           add_broadcast_quant8::createTestModel,
                           add_broadcast_quant8::is_ignored,
                           add_broadcast_quant8::get_examples());
}

TEST_F(ValidationTest, add_broadcast_quant8) {
  const Model model = add_broadcast_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(add_broadcast_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_broadcast_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add_broadcast_quant8::createTestModel_dynamic_output_shape,
                           add_broadcast_quant8::is_ignored_dynamic_output_shape,
                           add_broadcast_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_broadcast_quant8_dynamic_output_shape) {
  const Model model = add_broadcast_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add_broadcast_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: add_quant8.mod.py.
namespace add_quant8 {
// Generated add_quant8 test
#include "examples/add_quant8.example.cpp"
// Generated model constructor
#include "vts_models/add_quant8.model.cpp"
} // namespace add_quant8

TEST_F(NeuralnetworksHidlTest, add_quant8) {
  generated_tests::Execute(device,
                           add_quant8::createTestModel,
                           add_quant8::is_ignored,
                           add_quant8::get_examples());
}

TEST_F(ValidationTest, add_quant8) {
  const Model model = add_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(add_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add_quant8::createTestModel_dynamic_output_shape,
                           add_quant8::is_ignored_dynamic_output_shape,
                           add_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_quant8_dynamic_output_shape) {
  const Model model = add_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_1.mod.py.
namespace avg_pool_float_1 {
// Generated avg_pool_float_1 test
#include "examples/avg_pool_float_1.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_1.model.cpp"
} // namespace avg_pool_float_1

TEST_F(NeuralnetworksHidlTest, avg_pool_float_1) {
  generated_tests::Execute(device,
                           avg_pool_float_1::createTestModel,
                           avg_pool_float_1::is_ignored,
                           avg_pool_float_1::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_1) {
  const Model model = avg_pool_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_1::createTestModel_dynamic_output_shape,
                           avg_pool_float_1::is_ignored_dynamic_output_shape,
                           avg_pool_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_1_dynamic_output_shape) {
  const Model model = avg_pool_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_2.mod.py.
namespace avg_pool_float_2 {
// Generated avg_pool_float_2 test
#include "examples/avg_pool_float_2.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_2.model.cpp"
} // namespace avg_pool_float_2

TEST_F(NeuralnetworksHidlTest, avg_pool_float_2) {
  generated_tests::Execute(device,
                           avg_pool_float_2::createTestModel,
                           avg_pool_float_2::is_ignored,
                           avg_pool_float_2::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_2) {
  const Model model = avg_pool_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_2::createTestModel_dynamic_output_shape,
                           avg_pool_float_2::is_ignored_dynamic_output_shape,
                           avg_pool_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_2_dynamic_output_shape) {
  const Model model = avg_pool_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_3.mod.py.
namespace avg_pool_float_3 {
// Generated avg_pool_float_3 test
#include "examples/avg_pool_float_3.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_3.model.cpp"
} // namespace avg_pool_float_3

TEST_F(NeuralnetworksHidlTest, avg_pool_float_3) {
  generated_tests::Execute(device,
                           avg_pool_float_3::createTestModel,
                           avg_pool_float_3::is_ignored,
                           avg_pool_float_3::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_3) {
  const Model model = avg_pool_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_3::createTestModel_dynamic_output_shape,
                           avg_pool_float_3::is_ignored_dynamic_output_shape,
                           avg_pool_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_3_dynamic_output_shape) {
  const Model model = avg_pool_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_4.mod.py.
namespace avg_pool_float_4 {
// Generated avg_pool_float_4 test
#include "examples/avg_pool_float_4.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_4.model.cpp"
} // namespace avg_pool_float_4

TEST_F(NeuralnetworksHidlTest, avg_pool_float_4) {
  generated_tests::Execute(device,
                           avg_pool_float_4::createTestModel,
                           avg_pool_float_4::is_ignored,
                           avg_pool_float_4::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_4) {
  const Model model = avg_pool_float_4::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_4::createTestModel_dynamic_output_shape,
                           avg_pool_float_4::is_ignored_dynamic_output_shape,
                           avg_pool_float_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_4_dynamic_output_shape) {
  const Model model = avg_pool_float_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_5.mod.py.
namespace avg_pool_float_5 {
// Generated avg_pool_float_5 test
#include "examples/avg_pool_float_5.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_5.model.cpp"
} // namespace avg_pool_float_5

TEST_F(NeuralnetworksHidlTest, avg_pool_float_5) {
  generated_tests::Execute(device,
                           avg_pool_float_5::createTestModel,
                           avg_pool_float_5::is_ignored,
                           avg_pool_float_5::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_5) {
  const Model model = avg_pool_float_5::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_5::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_5_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_5::createTestModel_dynamic_output_shape,
                           avg_pool_float_5::is_ignored_dynamic_output_shape,
                           avg_pool_float_5::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_5_dynamic_output_shape) {
  const Model model = avg_pool_float_5::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_5::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_quant8_1.mod.py.
namespace avg_pool_quant8_1 {
// Generated avg_pool_quant8_1 test
#include "examples/avg_pool_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_quant8_1.model.cpp"
} // namespace avg_pool_quant8_1

TEST_F(NeuralnetworksHidlTest, avg_pool_quant8_1) {
  generated_tests::Execute(device,
                           avg_pool_quant8_1::createTestModel,
                           avg_pool_quant8_1::is_ignored,
                           avg_pool_quant8_1::get_examples());
}

TEST_F(ValidationTest, avg_pool_quant8_1) {
  const Model model = avg_pool_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_quant8_1::createTestModel_dynamic_output_shape,
                           avg_pool_quant8_1::is_ignored_dynamic_output_shape,
                           avg_pool_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_quant8_1_dynamic_output_shape) {
  const Model model = avg_pool_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_quant8_2.mod.py.
namespace avg_pool_quant8_2 {
// Generated avg_pool_quant8_2 test
#include "examples/avg_pool_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_quant8_2.model.cpp"
} // namespace avg_pool_quant8_2

TEST_F(NeuralnetworksHidlTest, avg_pool_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_quant8_2::createTestModel,
                           avg_pool_quant8_2::is_ignored,
                           avg_pool_quant8_2::get_examples());
}

TEST_F(ValidationTest, avg_pool_quant8_2) {
  const Model model = avg_pool_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_quant8_2::createTestModel_dynamic_output_shape,
                           avg_pool_quant8_2::is_ignored_dynamic_output_shape,
                           avg_pool_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_quant8_2_dynamic_output_shape) {
  const Model model = avg_pool_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_quant8_3.mod.py.
namespace avg_pool_quant8_3 {
// Generated avg_pool_quant8_3 test
#include "examples/avg_pool_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_quant8_3.model.cpp"
} // namespace avg_pool_quant8_3

TEST_F(NeuralnetworksHidlTest, avg_pool_quant8_3) {
  generated_tests::Execute(device,
                           avg_pool_quant8_3::createTestModel,
                           avg_pool_quant8_3::is_ignored,
                           avg_pool_quant8_3::get_examples());
}

TEST_F(ValidationTest, avg_pool_quant8_3) {
  const Model model = avg_pool_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_quant8_3::createTestModel_dynamic_output_shape,
                           avg_pool_quant8_3::is_ignored_dynamic_output_shape,
                           avg_pool_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_quant8_3_dynamic_output_shape) {
  const Model model = avg_pool_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_quant8_4.mod.py.
namespace avg_pool_quant8_4 {
// Generated avg_pool_quant8_4 test
#include "examples/avg_pool_quant8_4.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_quant8_4.model.cpp"
} // namespace avg_pool_quant8_4

TEST_F(NeuralnetworksHidlTest, avg_pool_quant8_4) {
  generated_tests::Execute(device,
                           avg_pool_quant8_4::createTestModel,
                           avg_pool_quant8_4::is_ignored,
                           avg_pool_quant8_4::get_examples());
}

TEST_F(ValidationTest, avg_pool_quant8_4) {
  const Model model = avg_pool_quant8_4::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_quant8_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_quant8_4::createTestModel_dynamic_output_shape,
                           avg_pool_quant8_4::is_ignored_dynamic_output_shape,
                           avg_pool_quant8_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_quant8_4_dynamic_output_shape) {
  const Model model = avg_pool_quant8_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_quant8_5.mod.py.
namespace avg_pool_quant8_5 {
// Generated avg_pool_quant8_5 test
#include "examples/avg_pool_quant8_5.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_quant8_5.model.cpp"
} // namespace avg_pool_quant8_5

TEST_F(NeuralnetworksHidlTest, avg_pool_quant8_5) {
  generated_tests::Execute(device,
                           avg_pool_quant8_5::createTestModel,
                           avg_pool_quant8_5::is_ignored,
                           avg_pool_quant8_5::get_examples());
}

TEST_F(ValidationTest, avg_pool_quant8_5) {
  const Model model = avg_pool_quant8_5::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_5::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_quant8_5_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_quant8_5::createTestModel_dynamic_output_shape,
                           avg_pool_quant8_5::is_ignored_dynamic_output_shape,
                           avg_pool_quant8_5::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_quant8_5_dynamic_output_shape) {
  const Model model = avg_pool_quant8_5::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_quant8_5::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_1.mod.py.
namespace concat_float_1 {
// Generated concat_float_1 test
#include "examples/concat_float_1.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_1.model.cpp"
} // namespace concat_float_1

TEST_F(NeuralnetworksHidlTest, concat_float_1) {
  generated_tests::Execute(device,
                           concat_float_1::createTestModel,
                           concat_float_1::is_ignored,
                           concat_float_1::get_examples());
}

TEST_F(ValidationTest, concat_float_1) {
  const Model model = concat_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_1::createTestModel_dynamic_output_shape,
                           concat_float_1::is_ignored_dynamic_output_shape,
                           concat_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_1_dynamic_output_shape) {
  const Model model = concat_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_2.mod.py.
namespace concat_float_2 {
// Generated concat_float_2 test
#include "examples/concat_float_2.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_2.model.cpp"
} // namespace concat_float_2

TEST_F(NeuralnetworksHidlTest, concat_float_2) {
  generated_tests::Execute(device,
                           concat_float_2::createTestModel,
                           concat_float_2::is_ignored,
                           concat_float_2::get_examples());
}

TEST_F(ValidationTest, concat_float_2) {
  const Model model = concat_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_2::createTestModel_dynamic_output_shape,
                           concat_float_2::is_ignored_dynamic_output_shape,
                           concat_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_2_dynamic_output_shape) {
  const Model model = concat_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_3.mod.py.
namespace concat_float_3 {
// Generated concat_float_3 test
#include "examples/concat_float_3.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_3.model.cpp"
} // namespace concat_float_3

TEST_F(NeuralnetworksHidlTest, concat_float_3) {
  generated_tests::Execute(device,
                           concat_float_3::createTestModel,
                           concat_float_3::is_ignored,
                           concat_float_3::get_examples());
}

TEST_F(ValidationTest, concat_float_3) {
  const Model model = concat_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_3::createTestModel_dynamic_output_shape,
                           concat_float_3::is_ignored_dynamic_output_shape,
                           concat_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_3_dynamic_output_shape) {
  const Model model = concat_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_quant8_1.mod.py.
namespace concat_quant8_1 {
// Generated concat_quant8_1 test
#include "examples/concat_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/concat_quant8_1.model.cpp"
} // namespace concat_quant8_1

TEST_F(NeuralnetworksHidlTest, concat_quant8_1) {
  generated_tests::Execute(device,
                           concat_quant8_1::createTestModel,
                           concat_quant8_1::is_ignored,
                           concat_quant8_1::get_examples());
}

TEST_F(ValidationTest, concat_quant8_1) {
  const Model model = concat_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(concat_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_quant8_1::createTestModel_dynamic_output_shape,
                           concat_quant8_1::is_ignored_dynamic_output_shape,
                           concat_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_quant8_1_dynamic_output_shape) {
  const Model model = concat_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_quant8_2.mod.py.
namespace concat_quant8_2 {
// Generated concat_quant8_2 test
#include "examples/concat_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/concat_quant8_2.model.cpp"
} // namespace concat_quant8_2

TEST_F(NeuralnetworksHidlTest, concat_quant8_2) {
  generated_tests::Execute(device,
                           concat_quant8_2::createTestModel,
                           concat_quant8_2::is_ignored,
                           concat_quant8_2::get_examples());
}

TEST_F(ValidationTest, concat_quant8_2) {
  const Model model = concat_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(concat_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_quant8_2::createTestModel_dynamic_output_shape,
                           concat_quant8_2::is_ignored_dynamic_output_shape,
                           concat_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_quant8_2_dynamic_output_shape) {
  const Model model = concat_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_quant8_3.mod.py.
namespace concat_quant8_3 {
// Generated concat_quant8_3 test
#include "examples/concat_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/concat_quant8_3.model.cpp"
} // namespace concat_quant8_3

TEST_F(NeuralnetworksHidlTest, concat_quant8_3) {
  generated_tests::Execute(device,
                           concat_quant8_3::createTestModel,
                           concat_quant8_3::is_ignored,
                           concat_quant8_3::get_examples());
}

TEST_F(ValidationTest, concat_quant8_3) {
  const Model model = concat_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(concat_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_quant8_3::createTestModel_dynamic_output_shape,
                           concat_quant8_3::is_ignored_dynamic_output_shape,
                           concat_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_quant8_3_dynamic_output_shape) {
  const Model model = concat_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_1_h3_w2_SAME.mod.py.
namespace conv_1_h3_w2_SAME {
// Generated conv_1_h3_w2_SAME test
#include "examples/conv_1_h3_w2_SAME.example.cpp"
// Generated model constructor
#include "vts_models/conv_1_h3_w2_SAME.model.cpp"
} // namespace conv_1_h3_w2_SAME

TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_SAME) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME::createTestModel,
                           conv_1_h3_w2_SAME::is_ignored,
                           conv_1_h3_w2_SAME::get_examples());
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME) {
  const Model model = conv_1_h3_w2_SAME::createTestModel();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_SAME_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME::createTestModel_dynamic_output_shape,
                           conv_1_h3_w2_SAME::is_ignored_dynamic_output_shape,
                           conv_1_h3_w2_SAME::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_dynamic_output_shape) {
  const Model model = conv_1_h3_w2_SAME::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_SAME_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME::createTestModel_2,
                           conv_1_h3_w2_SAME::is_ignored_2,
                           conv_1_h3_w2_SAME::get_examples_2());
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_2) {
  const Model model = conv_1_h3_w2_SAME::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_SAME_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME::createTestModel_dynamic_output_shape_2,
                           conv_1_h3_w2_SAME::is_ignored_dynamic_output_shape_2,
                           conv_1_h3_w2_SAME::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_dynamic_output_shape_2) {
  const Model model = conv_1_h3_w2_SAME::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_1_h3_w2_VALID.mod.py.
namespace conv_1_h3_w2_VALID {
// Generated conv_1_h3_w2_VALID test
#include "examples/conv_1_h3_w2_VALID.example.cpp"
// Generated model constructor
#include "vts_models/conv_1_h3_w2_VALID.model.cpp"
} // namespace conv_1_h3_w2_VALID

TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_VALID) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID::createTestModel,
                           conv_1_h3_w2_VALID::is_ignored,
                           conv_1_h3_w2_VALID::get_examples());
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID) {
  const Model model = conv_1_h3_w2_VALID::createTestModel();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_VALID_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID::createTestModel_dynamic_output_shape,
                           conv_1_h3_w2_VALID::is_ignored_dynamic_output_shape,
                           conv_1_h3_w2_VALID::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_dynamic_output_shape) {
  const Model model = conv_1_h3_w2_VALID::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_VALID_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID::createTestModel_2,
                           conv_1_h3_w2_VALID::is_ignored_2,
                           conv_1_h3_w2_VALID::get_examples_2());
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_2) {
  const Model model = conv_1_h3_w2_VALID::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_VALID_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID::createTestModel_dynamic_output_shape_2,
                           conv_1_h3_w2_VALID::is_ignored_dynamic_output_shape_2,
                           conv_1_h3_w2_VALID::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_dynamic_output_shape_2) {
  const Model model = conv_1_h3_w2_VALID::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_3_h3_w2_SAME.mod.py.
namespace conv_3_h3_w2_SAME {
// Generated conv_3_h3_w2_SAME test
#include "examples/conv_3_h3_w2_SAME.example.cpp"
// Generated model constructor
#include "vts_models/conv_3_h3_w2_SAME.model.cpp"
} // namespace conv_3_h3_w2_SAME

TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_SAME) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME::createTestModel,
                           conv_3_h3_w2_SAME::is_ignored,
                           conv_3_h3_w2_SAME::get_examples());
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME) {
  const Model model = conv_3_h3_w2_SAME::createTestModel();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_SAME_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME::createTestModel_dynamic_output_shape,
                           conv_3_h3_w2_SAME::is_ignored_dynamic_output_shape,
                           conv_3_h3_w2_SAME::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_dynamic_output_shape) {
  const Model model = conv_3_h3_w2_SAME::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_SAME_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME::createTestModel_2,
                           conv_3_h3_w2_SAME::is_ignored_2,
                           conv_3_h3_w2_SAME::get_examples_2());
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_2) {
  const Model model = conv_3_h3_w2_SAME::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_SAME_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME::createTestModel_dynamic_output_shape_2,
                           conv_3_h3_w2_SAME::is_ignored_dynamic_output_shape_2,
                           conv_3_h3_w2_SAME::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_dynamic_output_shape_2) {
  const Model model = conv_3_h3_w2_SAME::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_3_h3_w2_VALID.mod.py.
namespace conv_3_h3_w2_VALID {
// Generated conv_3_h3_w2_VALID test
#include "examples/conv_3_h3_w2_VALID.example.cpp"
// Generated model constructor
#include "vts_models/conv_3_h3_w2_VALID.model.cpp"
} // namespace conv_3_h3_w2_VALID

TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_VALID) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID::createTestModel,
                           conv_3_h3_w2_VALID::is_ignored,
                           conv_3_h3_w2_VALID::get_examples());
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID) {
  const Model model = conv_3_h3_w2_VALID::createTestModel();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_VALID_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID::createTestModel_dynamic_output_shape,
                           conv_3_h3_w2_VALID::is_ignored_dynamic_output_shape,
                           conv_3_h3_w2_VALID::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_dynamic_output_shape) {
  const Model model = conv_3_h3_w2_VALID::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_VALID_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID::createTestModel_2,
                           conv_3_h3_w2_VALID::is_ignored_2,
                           conv_3_h3_w2_VALID::get_examples_2());
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_2) {
  const Model model = conv_3_h3_w2_VALID::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_VALID_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID::createTestModel_dynamic_output_shape_2,
                           conv_3_h3_w2_VALID::is_ignored_dynamic_output_shape_2,
                           conv_3_h3_w2_VALID::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_dynamic_output_shape_2) {
  const Model model = conv_3_h3_w2_VALID::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float.mod.py.
namespace conv_float {
// Generated conv_float test
#include "examples/conv_float.example.cpp"
// Generated model constructor
#include "vts_models/conv_float.model.cpp"
} // namespace conv_float

TEST_F(NeuralnetworksHidlTest, conv_float) {
  generated_tests::Execute(device,
                           conv_float::createTestModel,
                           conv_float::is_ignored,
                           conv_float::get_examples());
}

TEST_F(ValidationTest, conv_float) {
  const Model model = conv_float::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float::createTestModel_dynamic_output_shape,
                           conv_float::is_ignored_dynamic_output_shape,
                           conv_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_dynamic_output_shape) {
  const Model model = conv_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_2.mod.py.
namespace conv_float_2 {
// Generated conv_float_2 test
#include "examples/conv_float_2.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_2.model.cpp"
} // namespace conv_float_2

TEST_F(NeuralnetworksHidlTest, conv_float_2) {
  generated_tests::Execute(device,
                           conv_float_2::createTestModel,
                           conv_float_2::is_ignored,
                           conv_float_2::get_examples());
}

TEST_F(ValidationTest, conv_float_2) {
  const Model model = conv_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_2::createTestModel_dynamic_output_shape,
                           conv_float_2::is_ignored_dynamic_output_shape,
                           conv_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_2_dynamic_output_shape) {
  const Model model = conv_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_channels.mod.py.
namespace conv_float_channels {
// Generated conv_float_channels test
#include "examples/conv_float_channels.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_channels.model.cpp"
} // namespace conv_float_channels

TEST_F(NeuralnetworksHidlTest, conv_float_channels) {
  generated_tests::Execute(device,
                           conv_float_channels::createTestModel,
                           conv_float_channels::is_ignored,
                           conv_float_channels::get_examples());
}

TEST_F(ValidationTest, conv_float_channels) {
  const Model model = conv_float_channels::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_channels::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_channels_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_channels::createTestModel_dynamic_output_shape,
                           conv_float_channels::is_ignored_dynamic_output_shape,
                           conv_float_channels::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_channels_dynamic_output_shape) {
  const Model model = conv_float_channels::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_channels::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_channels_weights_as_inputs.mod.py.
namespace conv_float_channels_weights_as_inputs {
// Generated conv_float_channels_weights_as_inputs test
#include "examples/conv_float_channels_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_channels_weights_as_inputs.model.cpp"
} // namespace conv_float_channels_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_float_channels_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_float_channels_weights_as_inputs::createTestModel,
                           conv_float_channels_weights_as_inputs::is_ignored,
                           conv_float_channels_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_float_channels_weights_as_inputs) {
  const Model model = conv_float_channels_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_channels_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_channels_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_channels_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_float_channels_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_float_channels_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_channels_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_float_channels_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_channels_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_large.mod.py.
namespace conv_float_large {
// Generated conv_float_large test
#include "examples/conv_float_large.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_large.model.cpp"
} // namespace conv_float_large

TEST_F(NeuralnetworksHidlTest, conv_float_large) {
  generated_tests::Execute(device,
                           conv_float_large::createTestModel,
                           conv_float_large::is_ignored,
                           conv_float_large::get_examples());
}

TEST_F(ValidationTest, conv_float_large) {
  const Model model = conv_float_large::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_large::createTestModel_dynamic_output_shape,
                           conv_float_large::is_ignored_dynamic_output_shape,
                           conv_float_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_large_dynamic_output_shape) {
  const Model model = conv_float_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_large_weights_as_inputs.mod.py.
namespace conv_float_large_weights_as_inputs {
// Generated conv_float_large_weights_as_inputs test
#include "examples/conv_float_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_large_weights_as_inputs.model.cpp"
} // namespace conv_float_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_float_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_float_large_weights_as_inputs::createTestModel,
                           conv_float_large_weights_as_inputs::is_ignored,
                           conv_float_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_float_large_weights_as_inputs) {
  const Model model = conv_float_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_float_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_float_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_float_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_weights_as_inputs.mod.py.
namespace conv_float_weights_as_inputs {
// Generated conv_float_weights_as_inputs test
#include "examples/conv_float_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_weights_as_inputs.model.cpp"
} // namespace conv_float_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_float_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_float_weights_as_inputs::createTestModel,
                           conv_float_weights_as_inputs::is_ignored,
                           conv_float_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_float_weights_as_inputs) {
  const Model model = conv_float_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_float_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_float_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_float_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8.mod.py.
namespace conv_quant8 {
// Generated conv_quant8 test
#include "examples/conv_quant8.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8.model.cpp"
} // namespace conv_quant8

TEST_F(NeuralnetworksHidlTest, conv_quant8) {
  generated_tests::Execute(device,
                           conv_quant8::createTestModel,
                           conv_quant8::is_ignored,
                           conv_quant8::get_examples());
}

TEST_F(ValidationTest, conv_quant8) {
  const Model model = conv_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8::createTestModel_dynamic_output_shape,
                           conv_quant8::is_ignored_dynamic_output_shape,
                           conv_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_dynamic_output_shape) {
  const Model model = conv_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_2.mod.py.
namespace conv_quant8_2 {
// Generated conv_quant8_2 test
#include "examples/conv_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_2.model.cpp"
} // namespace conv_quant8_2

TEST_F(NeuralnetworksHidlTest, conv_quant8_2) {
  generated_tests::Execute(device,
                           conv_quant8_2::createTestModel,
                           conv_quant8_2::is_ignored,
                           conv_quant8_2::get_examples());
}

TEST_F(ValidationTest, conv_quant8_2) {
  const Model model = conv_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_2::createTestModel_dynamic_output_shape,
                           conv_quant8_2::is_ignored_dynamic_output_shape,
                           conv_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_2_dynamic_output_shape) {
  const Model model = conv_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_channels.mod.py.
namespace conv_quant8_channels {
// Generated conv_quant8_channels test
#include "examples/conv_quant8_channels.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_channels.model.cpp"
} // namespace conv_quant8_channels

TEST_F(NeuralnetworksHidlTest, conv_quant8_channels) {
  generated_tests::Execute(device,
                           conv_quant8_channels::createTestModel,
                           conv_quant8_channels::is_ignored,
                           conv_quant8_channels::get_examples());
}

TEST_F(ValidationTest, conv_quant8_channels) {
  const Model model = conv_quant8_channels::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_channels::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_channels_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_channels::createTestModel_dynamic_output_shape,
                           conv_quant8_channels::is_ignored_dynamic_output_shape,
                           conv_quant8_channels::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_channels_dynamic_output_shape) {
  const Model model = conv_quant8_channels::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_channels::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_channels_weights_as_inputs.mod.py.
namespace conv_quant8_channels_weights_as_inputs {
// Generated conv_quant8_channels_weights_as_inputs test
#include "examples/conv_quant8_channels_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_channels_weights_as_inputs.model.cpp"
} // namespace conv_quant8_channels_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_quant8_channels_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_quant8_channels_weights_as_inputs::createTestModel,
                           conv_quant8_channels_weights_as_inputs::is_ignored,
                           conv_quant8_channels_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_quant8_channels_weights_as_inputs) {
  const Model model = conv_quant8_channels_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_channels_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_channels_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_channels_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_quant8_channels_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_quant8_channels_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_channels_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_quant8_channels_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_channels_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_large.mod.py.
namespace conv_quant8_large {
// Generated conv_quant8_large test
#include "examples/conv_quant8_large.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_large.model.cpp"
} // namespace conv_quant8_large

TEST_F(NeuralnetworksHidlTest, conv_quant8_large) {
  generated_tests::Execute(device,
                           conv_quant8_large::createTestModel,
                           conv_quant8_large::is_ignored,
                           conv_quant8_large::get_examples());
}

TEST_F(ValidationTest, conv_quant8_large) {
  const Model model = conv_quant8_large::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_large::createTestModel_dynamic_output_shape,
                           conv_quant8_large::is_ignored_dynamic_output_shape,
                           conv_quant8_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_large_dynamic_output_shape) {
  const Model model = conv_quant8_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_large_weights_as_inputs.mod.py.
namespace conv_quant8_large_weights_as_inputs {
// Generated conv_quant8_large_weights_as_inputs test
#include "examples/conv_quant8_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_large_weights_as_inputs.model.cpp"
} // namespace conv_quant8_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_quant8_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_quant8_large_weights_as_inputs::createTestModel,
                           conv_quant8_large_weights_as_inputs::is_ignored,
                           conv_quant8_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_quant8_large_weights_as_inputs) {
  const Model model = conv_quant8_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_quant8_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_overflow.mod.py.
namespace conv_quant8_overflow {
// Generated conv_quant8_overflow test
#include "examples/conv_quant8_overflow.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_overflow.model.cpp"
} // namespace conv_quant8_overflow

TEST_F(NeuralnetworksHidlTest, conv_quant8_overflow) {
  generated_tests::Execute(device,
                           conv_quant8_overflow::createTestModel,
                           conv_quant8_overflow::is_ignored,
                           conv_quant8_overflow::get_examples());
}

TEST_F(ValidationTest, conv_quant8_overflow) {
  const Model model = conv_quant8_overflow::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_overflow::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_overflow::createTestModel_dynamic_output_shape,
                           conv_quant8_overflow::is_ignored_dynamic_output_shape,
                           conv_quant8_overflow::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_overflow_dynamic_output_shape) {
  const Model model = conv_quant8_overflow::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_overflow::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_overflow_weights_as_inputs.mod.py.
namespace conv_quant8_overflow_weights_as_inputs {
// Generated conv_quant8_overflow_weights_as_inputs test
#include "examples/conv_quant8_overflow_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_overflow_weights_as_inputs.model.cpp"
} // namespace conv_quant8_overflow_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_quant8_overflow_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_quant8_overflow_weights_as_inputs::createTestModel,
                           conv_quant8_overflow_weights_as_inputs::is_ignored,
                           conv_quant8_overflow_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_quant8_overflow_weights_as_inputs) {
  const Model model = conv_quant8_overflow_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_overflow_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_overflow_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_overflow_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_quant8_overflow_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_quant8_overflow_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_overflow_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_quant8_overflow_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_overflow_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_quant8_weights_as_inputs.mod.py.
namespace conv_quant8_weights_as_inputs {
// Generated conv_quant8_weights_as_inputs test
#include "examples/conv_quant8_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/conv_quant8_weights_as_inputs.model.cpp"
} // namespace conv_quant8_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, conv_quant8_weights_as_inputs) {
  generated_tests::Execute(device,
                           conv_quant8_weights_as_inputs::createTestModel,
                           conv_quant8_weights_as_inputs::is_ignored,
                           conv_quant8_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, conv_quant8_weights_as_inputs) {
  const Model model = conv_quant8_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(conv_quant8_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_quant8_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_quant8_weights_as_inputs::createTestModel_dynamic_output_shape,
                           conv_quant8_weights_as_inputs::is_ignored_dynamic_output_shape,
                           conv_quant8_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_quant8_weights_as_inputs_dynamic_output_shape) {
  const Model model = conv_quant8_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_quant8_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_1.mod.py.
namespace depth_to_space_float_1 {
// Generated depth_to_space_float_1 test
#include "examples/depth_to_space_float_1.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_1.model.cpp"
} // namespace depth_to_space_float_1

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_1) {
  generated_tests::Execute(device,
                           depth_to_space_float_1::createTestModel,
                           depth_to_space_float_1::is_ignored,
                           depth_to_space_float_1::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_1) {
  const Model model = depth_to_space_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_1::createTestModel_dynamic_output_shape,
                           depth_to_space_float_1::is_ignored_dynamic_output_shape,
                           depth_to_space_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_1_dynamic_output_shape) {
  const Model model = depth_to_space_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_2.mod.py.
namespace depth_to_space_float_2 {
// Generated depth_to_space_float_2 test
#include "examples/depth_to_space_float_2.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_2.model.cpp"
} // namespace depth_to_space_float_2

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_2) {
  generated_tests::Execute(device,
                           depth_to_space_float_2::createTestModel,
                           depth_to_space_float_2::is_ignored,
                           depth_to_space_float_2::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_2) {
  const Model model = depth_to_space_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_2::createTestModel_dynamic_output_shape,
                           depth_to_space_float_2::is_ignored_dynamic_output_shape,
                           depth_to_space_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_2_dynamic_output_shape) {
  const Model model = depth_to_space_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_3.mod.py.
namespace depth_to_space_float_3 {
// Generated depth_to_space_float_3 test
#include "examples/depth_to_space_float_3.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_3.model.cpp"
} // namespace depth_to_space_float_3

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_3) {
  generated_tests::Execute(device,
                           depth_to_space_float_3::createTestModel,
                           depth_to_space_float_3::is_ignored,
                           depth_to_space_float_3::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_3) {
  const Model model = depth_to_space_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_3::createTestModel_dynamic_output_shape,
                           depth_to_space_float_3::is_ignored_dynamic_output_shape,
                           depth_to_space_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_3_dynamic_output_shape) {
  const Model model = depth_to_space_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_quant8_1.mod.py.
namespace depth_to_space_quant8_1 {
// Generated depth_to_space_quant8_1 test
#include "examples/depth_to_space_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_quant8_1.model.cpp"
} // namespace depth_to_space_quant8_1

TEST_F(NeuralnetworksHidlTest, depth_to_space_quant8_1) {
  generated_tests::Execute(device,
                           depth_to_space_quant8_1::createTestModel,
                           depth_to_space_quant8_1::is_ignored,
                           depth_to_space_quant8_1::get_examples());
}

TEST_F(ValidationTest, depth_to_space_quant8_1) {
  const Model model = depth_to_space_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_quant8_1::createTestModel_dynamic_output_shape,
                           depth_to_space_quant8_1::is_ignored_dynamic_output_shape,
                           depth_to_space_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_quant8_1_dynamic_output_shape) {
  const Model model = depth_to_space_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_quant8_2.mod.py.
namespace depth_to_space_quant8_2 {
// Generated depth_to_space_quant8_2 test
#include "examples/depth_to_space_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_quant8_2.model.cpp"
} // namespace depth_to_space_quant8_2

TEST_F(NeuralnetworksHidlTest, depth_to_space_quant8_2) {
  generated_tests::Execute(device,
                           depth_to_space_quant8_2::createTestModel,
                           depth_to_space_quant8_2::is_ignored,
                           depth_to_space_quant8_2::get_examples());
}

TEST_F(ValidationTest, depth_to_space_quant8_2) {
  const Model model = depth_to_space_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_quant8_2::createTestModel_dynamic_output_shape,
                           depth_to_space_quant8_2::is_ignored_dynamic_output_shape,
                           depth_to_space_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_quant8_2_dynamic_output_shape) {
  const Model model = depth_to_space_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv.mod.py.
namespace depthwise_conv {
// Generated depthwise_conv test
#include "examples/depthwise_conv.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv.model.cpp"
} // namespace depthwise_conv

TEST_F(NeuralnetworksHidlTest, depthwise_conv) {
  generated_tests::Execute(device,
                           depthwise_conv::createTestModel,
                           depthwise_conv::is_ignored,
                           depthwise_conv::get_examples());
}

TEST_F(ValidationTest, depthwise_conv) {
  const Model model = depthwise_conv::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv::createTestModel_dynamic_output_shape,
                           depthwise_conv::is_ignored_dynamic_output_shape,
                           depthwise_conv::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv_dynamic_output_shape) {
  const Model model = depthwise_conv::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv_2) {
  generated_tests::Execute(device,
                           depthwise_conv::createTestModel_2,
                           depthwise_conv::is_ignored_2,
                           depthwise_conv::get_examples_2());
}

TEST_F(ValidationTest, depthwise_conv_2) {
  const Model model = depthwise_conv::createTestModel_2();
  const std::vector<Request> requests = createRequests(depthwise_conv::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           depthwise_conv::createTestModel_dynamic_output_shape_2,
                           depthwise_conv::is_ignored_dynamic_output_shape_2,
                           depthwise_conv::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, depthwise_conv_dynamic_output_shape_2) {
  const Model model = depthwise_conv::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(depthwise_conv::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float.mod.py.
namespace depthwise_conv2d_float {
// Generated depthwise_conv2d_float test
#include "examples/depthwise_conv2d_float.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float.model.cpp"
} // namespace depthwise_conv2d_float

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float::createTestModel,
                           depthwise_conv2d_float::is_ignored,
                           depthwise_conv2d_float::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float) {
  const Model model = depthwise_conv2d_float::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_2.mod.py.
namespace depthwise_conv2d_float_2 {
// Generated depthwise_conv2d_float_2 test
#include "examples/depthwise_conv2d_float_2.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_2.model.cpp"
} // namespace depthwise_conv2d_float_2

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_2::createTestModel,
                           depthwise_conv2d_float_2::is_ignored,
                           depthwise_conv2d_float_2::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_2) {
  const Model model = depthwise_conv2d_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_2::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_2::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_2_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large.mod.py.
namespace depthwise_conv2d_float_large {
// Generated depthwise_conv2d_float_large test
#include "examples/depthwise_conv2d_float_large.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large.model.cpp"
} // namespace depthwise_conv2d_float_large

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large::createTestModel,
                           depthwise_conv2d_float_large::is_ignored,
                           depthwise_conv2d_float_large::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large) {
  const Model model = depthwise_conv2d_float_large::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_2.mod.py.
namespace depthwise_conv2d_float_large_2 {
// Generated depthwise_conv2d_float_large_2 test
#include "examples/depthwise_conv2d_float_large_2.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_2.model.cpp"
} // namespace depthwise_conv2d_float_large_2

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2::createTestModel,
                           depthwise_conv2d_float_large_2::is_ignored,
                           depthwise_conv2d_float_large_2::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2) {
  const Model model = depthwise_conv2d_float_large_2::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_2::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_2_weights_as_inputs.mod.py.
namespace depthwise_conv2d_float_large_2_weights_as_inputs {
// Generated depthwise_conv2d_float_large_2_weights_as_inputs test
#include "examples/depthwise_conv2d_float_large_2_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_2_weights_as_inputs.model.cpp"
} // namespace depthwise_conv2d_float_large_2_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_2_weights_as_inputs) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_weights_as_inputs::createTestModel,
                           depthwise_conv2d_float_large_2_weights_as_inputs::is_ignored,
                           depthwise_conv2d_float_large_2_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_weights_as_inputs) {
  const Model model = depthwise_conv2d_float_large_2_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_2_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_weights_as_inputs::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_weights_as_inputs::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_weights_as_inputs_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_2_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_weights_as_inputs.mod.py.
namespace depthwise_conv2d_float_large_weights_as_inputs {
// Generated depthwise_conv2d_float_large_weights_as_inputs test
#include "examples/depthwise_conv2d_float_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_weights_as_inputs.model.cpp"
} // namespace depthwise_conv2d_float_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_weights_as_inputs::createTestModel,
                           depthwise_conv2d_float_large_weights_as_inputs::is_ignored,
                           depthwise_conv2d_float_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_weights_as_inputs) {
  const Model model = depthwise_conv2d_float_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_weights_as_inputs.mod.py.
namespace depthwise_conv2d_float_weights_as_inputs {
// Generated depthwise_conv2d_float_weights_as_inputs test
#include "examples/depthwise_conv2d_float_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_weights_as_inputs.model.cpp"
} // namespace depthwise_conv2d_float_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_weights_as_inputs) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_weights_as_inputs::createTestModel,
                           depthwise_conv2d_float_weights_as_inputs::is_ignored,
                           depthwise_conv2d_float_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_weights_as_inputs) {
  const Model model = depthwise_conv2d_float_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_weights_as_inputs::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_weights_as_inputs::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_weights_as_inputs_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_quant8.mod.py.
namespace depthwise_conv2d_quant8 {
// Generated depthwise_conv2d_quant8 test
#include "examples/depthwise_conv2d_quant8.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_quant8.model.cpp"
} // namespace depthwise_conv2d_quant8

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8::createTestModel,
                           depthwise_conv2d_quant8::is_ignored,
                           depthwise_conv2d_quant8::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_quant8) {
  const Model model = depthwise_conv2d_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_quant8::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_dynamic_output_shape) {
  const Model model = depthwise_conv2d_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_quant8_2.mod.py.
namespace depthwise_conv2d_quant8_2 {
// Generated depthwise_conv2d_quant8_2 test
#include "examples/depthwise_conv2d_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_quant8_2.model.cpp"
} // namespace depthwise_conv2d_quant8_2

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_2::createTestModel,
                           depthwise_conv2d_quant8_2::is_ignored,
                           depthwise_conv2d_quant8_2::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_2) {
  const Model model = depthwise_conv2d_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_2::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_quant8_2::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_2_dynamic_output_shape) {
  const Model model = depthwise_conv2d_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_quant8_large.mod.py.
namespace depthwise_conv2d_quant8_large {
// Generated depthwise_conv2d_quant8_large test
#include "examples/depthwise_conv2d_quant8_large.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_quant8_large.model.cpp"
} // namespace depthwise_conv2d_quant8_large

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_quant8_large) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_large::createTestModel,
                           depthwise_conv2d_quant8_large::is_ignored,
                           depthwise_conv2d_quant8_large::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_large) {
  const Model model = depthwise_conv2d_quant8_large::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_quant8_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_large::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_quant8_large::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_quant8_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_large_dynamic_output_shape) {
  const Model model = depthwise_conv2d_quant8_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_quant8_large_weights_as_inputs.mod.py.
namespace depthwise_conv2d_quant8_large_weights_as_inputs {
// Generated depthwise_conv2d_quant8_large_weights_as_inputs test
#include "examples/depthwise_conv2d_quant8_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_quant8_large_weights_as_inputs.model.cpp"
} // namespace depthwise_conv2d_quant8_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_quant8_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_large_weights_as_inputs::createTestModel,
                           depthwise_conv2d_quant8_large_weights_as_inputs::is_ignored,
                           depthwise_conv2d_quant8_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_large_weights_as_inputs) {
  const Model model = depthwise_conv2d_quant8_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_quant8_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_quant8_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = depthwise_conv2d_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_quant8_weights_as_inputs.mod.py.
namespace depthwise_conv2d_quant8_weights_as_inputs {
// Generated depthwise_conv2d_quant8_weights_as_inputs test
#include "examples/depthwise_conv2d_quant8_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_quant8_weights_as_inputs.model.cpp"
} // namespace depthwise_conv2d_quant8_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_quant8_weights_as_inputs) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_weights_as_inputs::createTestModel,
                           depthwise_conv2d_quant8_weights_as_inputs::is_ignored,
                           depthwise_conv2d_quant8_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_weights_as_inputs) {
  const Model model = depthwise_conv2d_quant8_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_quant8_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_quant8_weights_as_inputs::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_quant8_weights_as_inputs::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_quant8_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_quant8_weights_as_inputs_dynamic_output_shape) {
  const Model model = depthwise_conv2d_quant8_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_quant8_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: dequantize.mod.py.
namespace dequantize {
// Generated dequantize test
#include "examples/dequantize.example.cpp"
// Generated model constructor
#include "vts_models/dequantize.model.cpp"
} // namespace dequantize

TEST_F(NeuralnetworksHidlTest, dequantize) {
  generated_tests::Execute(device,
                           dequantize::createTestModel,
                           dequantize::is_ignored,
                           dequantize::get_examples());
}

TEST_F(ValidationTest, dequantize) {
  const Model model = dequantize::createTestModel();
  const std::vector<Request> requests = createRequests(dequantize::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize::createTestModel_dynamic_output_shape,
                           dequantize::is_ignored_dynamic_output_shape,
                           dequantize::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_dynamic_output_shape) {
  const Model model = dequantize::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(dequantize::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: embedding_lookup.mod.py.
namespace embedding_lookup {
// Generated embedding_lookup test
#include "examples/embedding_lookup.example.cpp"
// Generated model constructor
#include "vts_models/embedding_lookup.model.cpp"
} // namespace embedding_lookup

TEST_F(NeuralnetworksHidlTest, embedding_lookup) {
  generated_tests::Execute(device,
                           embedding_lookup::createTestModel,
                           embedding_lookup::is_ignored,
                           embedding_lookup::get_examples());
}

TEST_F(ValidationTest, embedding_lookup) {
  const Model model = embedding_lookup::createTestModel();
  const std::vector<Request> requests = createRequests(embedding_lookup::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, embedding_lookup_dynamic_output_shape) {
  generated_tests::Execute(device,
                           embedding_lookup::createTestModel_dynamic_output_shape,
                           embedding_lookup::is_ignored_dynamic_output_shape,
                           embedding_lookup::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, embedding_lookup_dynamic_output_shape) {
  const Model model = embedding_lookup::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(embedding_lookup::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: floor.mod.py.
namespace floor {
// Generated floor test
#include "examples/floor.example.cpp"
// Generated model constructor
#include "vts_models/floor.model.cpp"
} // namespace floor

TEST_F(NeuralnetworksHidlTest, floor) {
  generated_tests::Execute(device,
                           floor::createTestModel,
                           floor::is_ignored,
                           floor::get_examples());
}

TEST_F(ValidationTest, floor) {
  const Model model = floor::createTestModel();
  const std::vector<Request> requests = createRequests(floor::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, floor_dynamic_output_shape) {
  generated_tests::Execute(device,
                           floor::createTestModel_dynamic_output_shape,
                           floor::is_ignored_dynamic_output_shape,
                           floor::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, floor_dynamic_output_shape) {
  const Model model = floor::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(floor::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float.mod.py.
namespace fully_connected_float {
// Generated fully_connected_float test
#include "examples/fully_connected_float.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float.model.cpp"
} // namespace fully_connected_float

TEST_F(NeuralnetworksHidlTest, fully_connected_float) {
  generated_tests::Execute(device,
                           fully_connected_float::createTestModel,
                           fully_connected_float::is_ignored,
                           fully_connected_float::get_examples());
}

TEST_F(ValidationTest, fully_connected_float) {
  const Model model = fully_connected_float::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float::createTestModel_dynamic_output_shape,
                           fully_connected_float::is_ignored_dynamic_output_shape,
                           fully_connected_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_dynamic_output_shape) {
  const Model model = fully_connected_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_2.mod.py.
namespace fully_connected_float_2 {
// Generated fully_connected_float_2 test
#include "examples/fully_connected_float_2.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_2.model.cpp"
} // namespace fully_connected_float_2

TEST_F(NeuralnetworksHidlTest, fully_connected_float_2) {
  generated_tests::Execute(device,
                           fully_connected_float_2::createTestModel,
                           fully_connected_float_2::is_ignored,
                           fully_connected_float_2::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_2) {
  const Model model = fully_connected_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_2::createTestModel_dynamic_output_shape,
                           fully_connected_float_2::is_ignored_dynamic_output_shape,
                           fully_connected_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_2_dynamic_output_shape) {
  const Model model = fully_connected_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_3.mod.py.
namespace fully_connected_float_3 {
// Generated fully_connected_float_3 test
#include "examples/fully_connected_float_3.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_3.model.cpp"
} // namespace fully_connected_float_3

TEST_F(NeuralnetworksHidlTest, fully_connected_float_3) {
  generated_tests::Execute(device,
                           fully_connected_float_3::createTestModel,
                           fully_connected_float_3::is_ignored,
                           fully_connected_float_3::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_3) {
  const Model model = fully_connected_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_3::createTestModel_dynamic_output_shape,
                           fully_connected_float_3::is_ignored_dynamic_output_shape,
                           fully_connected_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_3_dynamic_output_shape) {
  const Model model = fully_connected_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_large.mod.py.
namespace fully_connected_float_large {
// Generated fully_connected_float_large test
#include "examples/fully_connected_float_large.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_large.model.cpp"
} // namespace fully_connected_float_large

TEST_F(NeuralnetworksHidlTest, fully_connected_float_large) {
  generated_tests::Execute(device,
                           fully_connected_float_large::createTestModel,
                           fully_connected_float_large::is_ignored,
                           fully_connected_float_large::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_large) {
  const Model model = fully_connected_float_large::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_large::createTestModel_dynamic_output_shape,
                           fully_connected_float_large::is_ignored_dynamic_output_shape,
                           fully_connected_float_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_large_dynamic_output_shape) {
  const Model model = fully_connected_float_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_large_weights_as_inputs.mod.py.
namespace fully_connected_float_large_weights_as_inputs {
// Generated fully_connected_float_large_weights_as_inputs test
#include "examples/fully_connected_float_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_large_weights_as_inputs.model.cpp"
} // namespace fully_connected_float_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, fully_connected_float_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           fully_connected_float_large_weights_as_inputs::createTestModel,
                           fully_connected_float_large_weights_as_inputs::is_ignored,
                           fully_connected_float_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_large_weights_as_inputs) {
  const Model model = fully_connected_float_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           fully_connected_float_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           fully_connected_float_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = fully_connected_float_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_weights_as_inputs.mod.py.
namespace fully_connected_float_weights_as_inputs {
// Generated fully_connected_float_weights_as_inputs test
#include "examples/fully_connected_float_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_weights_as_inputs.model.cpp"
} // namespace fully_connected_float_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, fully_connected_float_weights_as_inputs) {
  generated_tests::Execute(device,
                           fully_connected_float_weights_as_inputs::createTestModel,
                           fully_connected_float_weights_as_inputs::is_ignored,
                           fully_connected_float_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_weights_as_inputs) {
  const Model model = fully_connected_float_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_weights_as_inputs::createTestModel_dynamic_output_shape,
                           fully_connected_float_weights_as_inputs::is_ignored_dynamic_output_shape,
                           fully_connected_float_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_weights_as_inputs_dynamic_output_shape) {
  const Model model = fully_connected_float_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_quant8.mod.py.
namespace fully_connected_quant8 {
// Generated fully_connected_quant8 test
#include "examples/fully_connected_quant8.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_quant8.model.cpp"
} // namespace fully_connected_quant8

TEST_F(NeuralnetworksHidlTest, fully_connected_quant8) {
  generated_tests::Execute(device,
                           fully_connected_quant8::createTestModel,
                           fully_connected_quant8::is_ignored,
                           fully_connected_quant8::get_examples());
}

TEST_F(ValidationTest, fully_connected_quant8) {
  const Model model = fully_connected_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_quant8::createTestModel_dynamic_output_shape,
                           fully_connected_quant8::is_ignored_dynamic_output_shape,
                           fully_connected_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_quant8_dynamic_output_shape) {
  const Model model = fully_connected_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_quant8_2.mod.py.
namespace fully_connected_quant8_2 {
// Generated fully_connected_quant8_2 test
#include "examples/fully_connected_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_quant8_2.model.cpp"
} // namespace fully_connected_quant8_2

TEST_F(NeuralnetworksHidlTest, fully_connected_quant8_2) {
  generated_tests::Execute(device,
                           fully_connected_quant8_2::createTestModel,
                           fully_connected_quant8_2::is_ignored,
                           fully_connected_quant8_2::get_examples());
}

TEST_F(ValidationTest, fully_connected_quant8_2) {
  const Model model = fully_connected_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_quant8_2::createTestModel_dynamic_output_shape,
                           fully_connected_quant8_2::is_ignored_dynamic_output_shape,
                           fully_connected_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_quant8_2_dynamic_output_shape) {
  const Model model = fully_connected_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_quant8_large.mod.py.
namespace fully_connected_quant8_large {
// Generated fully_connected_quant8_large test
#include "examples/fully_connected_quant8_large.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_quant8_large.model.cpp"
} // namespace fully_connected_quant8_large

TEST_F(NeuralnetworksHidlTest, fully_connected_quant8_large) {
  generated_tests::Execute(device,
                           fully_connected_quant8_large::createTestModel,
                           fully_connected_quant8_large::is_ignored,
                           fully_connected_quant8_large::get_examples());
}

TEST_F(ValidationTest, fully_connected_quant8_large) {
  const Model model = fully_connected_quant8_large::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_quant8_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_quant8_large::createTestModel_dynamic_output_shape,
                           fully_connected_quant8_large::is_ignored_dynamic_output_shape,
                           fully_connected_quant8_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_quant8_large_dynamic_output_shape) {
  const Model model = fully_connected_quant8_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_quant8_large_weights_as_inputs.mod.py.
namespace fully_connected_quant8_large_weights_as_inputs {
// Generated fully_connected_quant8_large_weights_as_inputs test
#include "examples/fully_connected_quant8_large_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_quant8_large_weights_as_inputs.model.cpp"
} // namespace fully_connected_quant8_large_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, fully_connected_quant8_large_weights_as_inputs) {
  generated_tests::Execute(device,
                           fully_connected_quant8_large_weights_as_inputs::createTestModel,
                           fully_connected_quant8_large_weights_as_inputs::is_ignored,
                           fully_connected_quant8_large_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, fully_connected_quant8_large_weights_as_inputs) {
  const Model model = fully_connected_quant8_large_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_large_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_quant8_large_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape,
                           fully_connected_quant8_large_weights_as_inputs::is_ignored_dynamic_output_shape,
                           fully_connected_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_quant8_large_weights_as_inputs_dynamic_output_shape) {
  const Model model = fully_connected_quant8_large_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_large_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_quant8_weights_as_inputs.mod.py.
namespace fully_connected_quant8_weights_as_inputs {
// Generated fully_connected_quant8_weights_as_inputs test
#include "examples/fully_connected_quant8_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_quant8_weights_as_inputs.model.cpp"
} // namespace fully_connected_quant8_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, fully_connected_quant8_weights_as_inputs) {
  generated_tests::Execute(device,
                           fully_connected_quant8_weights_as_inputs::createTestModel,
                           fully_connected_quant8_weights_as_inputs::is_ignored,
                           fully_connected_quant8_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, fully_connected_quant8_weights_as_inputs) {
  const Model model = fully_connected_quant8_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_quant8_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_quant8_weights_as_inputs::createTestModel_dynamic_output_shape,
                           fully_connected_quant8_weights_as_inputs::is_ignored_dynamic_output_shape,
                           fully_connected_quant8_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_quant8_weights_as_inputs_dynamic_output_shape) {
  const Model model = fully_connected_quant8_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_quant8_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: hashtable_lookup_float.mod.py.
namespace hashtable_lookup_float {
// Generated hashtable_lookup_float test
#include "examples/hashtable_lookup_float.example.cpp"
// Generated model constructor
#include "vts_models/hashtable_lookup_float.model.cpp"
} // namespace hashtable_lookup_float

TEST_F(NeuralnetworksHidlTest, hashtable_lookup_float) {
  generated_tests::Execute(device,
                           hashtable_lookup_float::createTestModel,
                           hashtable_lookup_float::is_ignored,
                           hashtable_lookup_float::get_examples());
}

TEST_F(ValidationTest, hashtable_lookup_float) {
  const Model model = hashtable_lookup_float::createTestModel();
  const std::vector<Request> requests = createRequests(hashtable_lookup_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, hashtable_lookup_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           hashtable_lookup_float::createTestModel_dynamic_output_shape,
                           hashtable_lookup_float::is_ignored_dynamic_output_shape,
                           hashtable_lookup_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, hashtable_lookup_float_dynamic_output_shape) {
  const Model model = hashtable_lookup_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(hashtable_lookup_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: hashtable_lookup_quant8.mod.py.
namespace hashtable_lookup_quant8 {
// Generated hashtable_lookup_quant8 test
#include "examples/hashtable_lookup_quant8.example.cpp"
// Generated model constructor
#include "vts_models/hashtable_lookup_quant8.model.cpp"
} // namespace hashtable_lookup_quant8

TEST_F(NeuralnetworksHidlTest, hashtable_lookup_quant8) {
  generated_tests::Execute(device,
                           hashtable_lookup_quant8::createTestModel,
                           hashtable_lookup_quant8::is_ignored,
                           hashtable_lookup_quant8::get_examples());
}

TEST_F(ValidationTest, hashtable_lookup_quant8) {
  const Model model = hashtable_lookup_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(hashtable_lookup_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, hashtable_lookup_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           hashtable_lookup_quant8::createTestModel_dynamic_output_shape,
                           hashtable_lookup_quant8::is_ignored_dynamic_output_shape,
                           hashtable_lookup_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, hashtable_lookup_quant8_dynamic_output_shape) {
  const Model model = hashtable_lookup_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(hashtable_lookup_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization.mod.py.
namespace l2_normalization {
// Generated l2_normalization test
#include "examples/l2_normalization.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization.model.cpp"
} // namespace l2_normalization

TEST_F(NeuralnetworksHidlTest, l2_normalization) {
  generated_tests::Execute(device,
                           l2_normalization::createTestModel,
                           l2_normalization::is_ignored,
                           l2_normalization::get_examples());
}

TEST_F(ValidationTest, l2_normalization) {
  const Model model = l2_normalization::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization::createTestModel_dynamic_output_shape,
                           l2_normalization::is_ignored_dynamic_output_shape,
                           l2_normalization::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_dynamic_output_shape) {
  const Model model = l2_normalization::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_2.mod.py.
namespace l2_normalization_2 {
// Generated l2_normalization_2 test
#include "examples/l2_normalization_2.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_2.model.cpp"
} // namespace l2_normalization_2

TEST_F(NeuralnetworksHidlTest, l2_normalization_2) {
  generated_tests::Execute(device,
                           l2_normalization_2::createTestModel,
                           l2_normalization_2::is_ignored,
                           l2_normalization_2::get_examples());
}

TEST_F(ValidationTest, l2_normalization_2) {
  const Model model = l2_normalization_2::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization_2::createTestModel_dynamic_output_shape,
                           l2_normalization_2::is_ignored_dynamic_output_shape,
                           l2_normalization_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_2_dynamic_output_shape) {
  const Model model = l2_normalization_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_large.mod.py.
namespace l2_normalization_large {
// Generated l2_normalization_large test
#include "examples/l2_normalization_large.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_large.model.cpp"
} // namespace l2_normalization_large

TEST_F(NeuralnetworksHidlTest, l2_normalization_large) {
  generated_tests::Execute(device,
                           l2_normalization_large::createTestModel,
                           l2_normalization_large::is_ignored,
                           l2_normalization_large::get_examples());
}

TEST_F(ValidationTest, l2_normalization_large) {
  const Model model = l2_normalization_large::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization_large::createTestModel_dynamic_output_shape,
                           l2_normalization_large::is_ignored_dynamic_output_shape,
                           l2_normalization_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_large_dynamic_output_shape) {
  const Model model = l2_normalization_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float.mod.py.
namespace l2_pool_float {
// Generated l2_pool_float test
#include "examples/l2_pool_float.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float.model.cpp"
} // namespace l2_pool_float

TEST_F(NeuralnetworksHidlTest, l2_pool_float) {
  generated_tests::Execute(device,
                           l2_pool_float::createTestModel,
                           l2_pool_float::is_ignored,
                           l2_pool_float::get_examples());
}

TEST_F(ValidationTest, l2_pool_float) {
  const Model model = l2_pool_float::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float::createTestModel_dynamic_output_shape,
                           l2_pool_float::is_ignored_dynamic_output_shape,
                           l2_pool_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_dynamic_output_shape) {
  const Model model = l2_pool_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float_2.mod.py.
namespace l2_pool_float_2 {
// Generated l2_pool_float_2 test
#include "examples/l2_pool_float_2.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float_2.model.cpp"
} // namespace l2_pool_float_2

TEST_F(NeuralnetworksHidlTest, l2_pool_float_2) {
  generated_tests::Execute(device,
                           l2_pool_float_2::createTestModel,
                           l2_pool_float_2::is_ignored,
                           l2_pool_float_2::get_examples());
}

TEST_F(ValidationTest, l2_pool_float_2) {
  const Model model = l2_pool_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float_2::createTestModel_dynamic_output_shape,
                           l2_pool_float_2::is_ignored_dynamic_output_shape,
                           l2_pool_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_2_dynamic_output_shape) {
  const Model model = l2_pool_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float_large.mod.py.
namespace l2_pool_float_large {
// Generated l2_pool_float_large test
#include "examples/l2_pool_float_large.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float_large.model.cpp"
} // namespace l2_pool_float_large

TEST_F(NeuralnetworksHidlTest, l2_pool_float_large) {
  generated_tests::Execute(device,
                           l2_pool_float_large::createTestModel,
                           l2_pool_float_large::is_ignored,
                           l2_pool_float_large::get_examples());
}

TEST_F(ValidationTest, l2_pool_float_large) {
  const Model model = l2_pool_float_large::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float_large::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_large_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float_large::createTestModel_dynamic_output_shape,
                           l2_pool_float_large::is_ignored_dynamic_output_shape,
                           l2_pool_float_large::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_large_dynamic_output_shape) {
  const Model model = l2_pool_float_large::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float_large::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_1.mod.py.
namespace local_response_norm_float_1 {
// Generated local_response_norm_float_1 test
#include "examples/local_response_norm_float_1.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_1.model.cpp"
} // namespace local_response_norm_float_1

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_1) {
  generated_tests::Execute(device,
                           local_response_norm_float_1::createTestModel,
                           local_response_norm_float_1::is_ignored,
                           local_response_norm_float_1::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_1) {
  const Model model = local_response_norm_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_1::createTestModel_dynamic_output_shape,
                           local_response_norm_float_1::is_ignored_dynamic_output_shape,
                           local_response_norm_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_1_dynamic_output_shape) {
  const Model model = local_response_norm_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_2.mod.py.
namespace local_response_norm_float_2 {
// Generated local_response_norm_float_2 test
#include "examples/local_response_norm_float_2.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_2.model.cpp"
} // namespace local_response_norm_float_2

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_2) {
  generated_tests::Execute(device,
                           local_response_norm_float_2::createTestModel,
                           local_response_norm_float_2::is_ignored,
                           local_response_norm_float_2::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_2) {
  const Model model = local_response_norm_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_2::createTestModel_dynamic_output_shape,
                           local_response_norm_float_2::is_ignored_dynamic_output_shape,
                           local_response_norm_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_2_dynamic_output_shape) {
  const Model model = local_response_norm_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_3.mod.py.
namespace local_response_norm_float_3 {
// Generated local_response_norm_float_3 test
#include "examples/local_response_norm_float_3.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_3.model.cpp"
} // namespace local_response_norm_float_3

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_3) {
  generated_tests::Execute(device,
                           local_response_norm_float_3::createTestModel,
                           local_response_norm_float_3::is_ignored,
                           local_response_norm_float_3::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_3) {
  const Model model = local_response_norm_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_3::createTestModel_dynamic_output_shape,
                           local_response_norm_float_3::is_ignored_dynamic_output_shape,
                           local_response_norm_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_3_dynamic_output_shape) {
  const Model model = local_response_norm_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_4.mod.py.
namespace local_response_norm_float_4 {
// Generated local_response_norm_float_4 test
#include "examples/local_response_norm_float_4.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_4.model.cpp"
} // namespace local_response_norm_float_4

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_4) {
  generated_tests::Execute(device,
                           local_response_norm_float_4::createTestModel,
                           local_response_norm_float_4::is_ignored,
                           local_response_norm_float_4::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_4) {
  const Model model = local_response_norm_float_4::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_4::createTestModel_dynamic_output_shape,
                           local_response_norm_float_4::is_ignored_dynamic_output_shape,
                           local_response_norm_float_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_4_dynamic_output_shape) {
  const Model model = local_response_norm_float_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_float_1.mod.py.
namespace logistic_float_1 {
// Generated logistic_float_1 test
#include "examples/logistic_float_1.example.cpp"
// Generated model constructor
#include "vts_models/logistic_float_1.model.cpp"
} // namespace logistic_float_1

TEST_F(NeuralnetworksHidlTest, logistic_float_1) {
  generated_tests::Execute(device,
                           logistic_float_1::createTestModel,
                           logistic_float_1::is_ignored,
                           logistic_float_1::get_examples());
}

TEST_F(ValidationTest, logistic_float_1) {
  const Model model = logistic_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_float_1::createTestModel_dynamic_output_shape,
                           logistic_float_1::is_ignored_dynamic_output_shape,
                           logistic_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_float_1_dynamic_output_shape) {
  const Model model = logistic_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_float_2.mod.py.
namespace logistic_float_2 {
// Generated logistic_float_2 test
#include "examples/logistic_float_2.example.cpp"
// Generated model constructor
#include "vts_models/logistic_float_2.model.cpp"
} // namespace logistic_float_2

TEST_F(NeuralnetworksHidlTest, logistic_float_2) {
  generated_tests::Execute(device,
                           logistic_float_2::createTestModel,
                           logistic_float_2::is_ignored,
                           logistic_float_2::get_examples());
}

TEST_F(ValidationTest, logistic_float_2) {
  const Model model = logistic_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_float_2::createTestModel_dynamic_output_shape,
                           logistic_float_2::is_ignored_dynamic_output_shape,
                           logistic_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_float_2_dynamic_output_shape) {
  const Model model = logistic_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_quant8_1.mod.py.
namespace logistic_quant8_1 {
// Generated logistic_quant8_1 test
#include "examples/logistic_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/logistic_quant8_1.model.cpp"
} // namespace logistic_quant8_1

TEST_F(NeuralnetworksHidlTest, logistic_quant8_1) {
  generated_tests::Execute(device,
                           logistic_quant8_1::createTestModel,
                           logistic_quant8_1::is_ignored,
                           logistic_quant8_1::get_examples());
}

TEST_F(ValidationTest, logistic_quant8_1) {
  const Model model = logistic_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_quant8_1::createTestModel_dynamic_output_shape,
                           logistic_quant8_1::is_ignored_dynamic_output_shape,
                           logistic_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_quant8_1_dynamic_output_shape) {
  const Model model = logistic_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_quant8_2.mod.py.
namespace logistic_quant8_2 {
// Generated logistic_quant8_2 test
#include "examples/logistic_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/logistic_quant8_2.model.cpp"
} // namespace logistic_quant8_2

TEST_F(NeuralnetworksHidlTest, logistic_quant8_2) {
  generated_tests::Execute(device,
                           logistic_quant8_2::createTestModel,
                           logistic_quant8_2::is_ignored,
                           logistic_quant8_2::get_examples());
}

TEST_F(ValidationTest, logistic_quant8_2) {
  const Model model = logistic_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_quant8_2::createTestModel_dynamic_output_shape,
                           logistic_quant8_2::is_ignored_dynamic_output_shape,
                           logistic_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_quant8_2_dynamic_output_shape) {
  const Model model = logistic_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection.mod.py.
namespace lsh_projection {
// Generated lsh_projection test
#include "examples/lsh_projection.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection.model.cpp"
} // namespace lsh_projection

TEST_F(NeuralnetworksHidlTest, lsh_projection) {
  generated_tests::Execute(device,
                           lsh_projection::createTestModel,
                           lsh_projection::is_ignored,
                           lsh_projection::get_examples());
}

TEST_F(ValidationTest, lsh_projection) {
  const Model model = lsh_projection::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection::createTestModel_dynamic_output_shape,
                           lsh_projection::is_ignored_dynamic_output_shape,
                           lsh_projection::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_dynamic_output_shape) {
  const Model model = lsh_projection::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_2.mod.py.
namespace lsh_projection_2 {
// Generated lsh_projection_2 test
#include "examples/lsh_projection_2.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_2.model.cpp"
} // namespace lsh_projection_2

TEST_F(NeuralnetworksHidlTest, lsh_projection_2) {
  generated_tests::Execute(device,
                           lsh_projection_2::createTestModel,
                           lsh_projection_2::is_ignored,
                           lsh_projection_2::get_examples());
}

TEST_F(ValidationTest, lsh_projection_2) {
  const Model model = lsh_projection_2::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_2::createTestModel_dynamic_output_shape,
                           lsh_projection_2::is_ignored_dynamic_output_shape,
                           lsh_projection_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_2_dynamic_output_shape) {
  const Model model = lsh_projection_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_weights_as_inputs.mod.py.
namespace lsh_projection_weights_as_inputs {
// Generated lsh_projection_weights_as_inputs test
#include "examples/lsh_projection_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_weights_as_inputs.model.cpp"
} // namespace lsh_projection_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, lsh_projection_weights_as_inputs) {
  generated_tests::Execute(device,
                           lsh_projection_weights_as_inputs::createTestModel,
                           lsh_projection_weights_as_inputs::is_ignored,
                           lsh_projection_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, lsh_projection_weights_as_inputs) {
  const Model model = lsh_projection_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_weights_as_inputs::createTestModel_dynamic_output_shape,
                           lsh_projection_weights_as_inputs::is_ignored_dynamic_output_shape,
                           lsh_projection_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_weights_as_inputs_dynamic_output_shape) {
  const Model model = lsh_projection_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm.mod.py.
namespace lstm {
// Generated lstm test
#include "examples/lstm.example.cpp"
// Generated model constructor
#include "vts_models/lstm.model.cpp"
} // namespace lstm

TEST_F(NeuralnetworksHidlTest, lstm) {
  generated_tests::Execute(device,
                           lstm::createTestModel,
                           lstm::is_ignored,
                           lstm::get_examples());
}

TEST_F(ValidationTest, lstm) {
  const Model model = lstm::createTestModel();
  const std::vector<Request> requests = createRequests(lstm::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm::createTestModel_dynamic_output_shape,
                           lstm::is_ignored_dynamic_output_shape,
                           lstm::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_dynamic_output_shape) {
  const Model model = lstm::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2.mod.py.
namespace lstm2 {
// Generated lstm2 test
#include "examples/lstm2.example.cpp"
// Generated model constructor
#include "vts_models/lstm2.model.cpp"
} // namespace lstm2

TEST_F(NeuralnetworksHidlTest, lstm2) {
  generated_tests::Execute(device,
                           lstm2::createTestModel,
                           lstm2::is_ignored,
                           lstm2::get_examples());
}

TEST_F(ValidationTest, lstm2) {
  const Model model = lstm2::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2::createTestModel_dynamic_output_shape,
                           lstm2::is_ignored_dynamic_output_shape,
                           lstm2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_dynamic_output_shape) {
  const Model model = lstm2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state.mod.py.
namespace lstm2_state {
// Generated lstm2_state test
#include "examples/lstm2_state.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state.model.cpp"
} // namespace lstm2_state

TEST_F(NeuralnetworksHidlTest, lstm2_state) {
  generated_tests::Execute(device,
                           lstm2_state::createTestModel,
                           lstm2_state::is_ignored,
                           lstm2_state::get_examples());
}

TEST_F(ValidationTest, lstm2_state) {
  const Model model = lstm2_state::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state::createTestModel_dynamic_output_shape,
                           lstm2_state::is_ignored_dynamic_output_shape,
                           lstm2_state::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state_dynamic_output_shape) {
  const Model model = lstm2_state::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state2.mod.py.
namespace lstm2_state2 {
// Generated lstm2_state2 test
#include "examples/lstm2_state2.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state2.model.cpp"
} // namespace lstm2_state2

TEST_F(NeuralnetworksHidlTest, lstm2_state2) {
  generated_tests::Execute(device,
                           lstm2_state2::createTestModel,
                           lstm2_state2::is_ignored,
                           lstm2_state2::get_examples());
}

TEST_F(ValidationTest, lstm2_state2) {
  const Model model = lstm2_state2::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state2::createTestModel_dynamic_output_shape,
                           lstm2_state2::is_ignored_dynamic_output_shape,
                           lstm2_state2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state2_dynamic_output_shape) {
  const Model model = lstm2_state2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3.mod.py.
namespace lstm3 {
// Generated lstm3 test
#include "examples/lstm3.example.cpp"
// Generated model constructor
#include "vts_models/lstm3.model.cpp"
} // namespace lstm3

TEST_F(NeuralnetworksHidlTest, lstm3) {
  generated_tests::Execute(device,
                           lstm3::createTestModel,
                           lstm3::is_ignored,
                           lstm3::get_examples());
}

TEST_F(ValidationTest, lstm3) {
  const Model model = lstm3::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3::createTestModel_dynamic_output_shape,
                           lstm3::is_ignored_dynamic_output_shape,
                           lstm3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_dynamic_output_shape) {
  const Model model = lstm3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state.mod.py.
namespace lstm3_state {
// Generated lstm3_state test
#include "examples/lstm3_state.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state.model.cpp"
} // namespace lstm3_state

TEST_F(NeuralnetworksHidlTest, lstm3_state) {
  generated_tests::Execute(device,
                           lstm3_state::createTestModel,
                           lstm3_state::is_ignored,
                           lstm3_state::get_examples());
}

TEST_F(ValidationTest, lstm3_state) {
  const Model model = lstm3_state::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state::createTestModel_dynamic_output_shape,
                           lstm3_state::is_ignored_dynamic_output_shape,
                           lstm3_state::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state_dynamic_output_shape) {
  const Model model = lstm3_state::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state2.mod.py.
namespace lstm3_state2 {
// Generated lstm3_state2 test
#include "examples/lstm3_state2.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state2.model.cpp"
} // namespace lstm3_state2

TEST_F(NeuralnetworksHidlTest, lstm3_state2) {
  generated_tests::Execute(device,
                           lstm3_state2::createTestModel,
                           lstm3_state2::is_ignored,
                           lstm3_state2::get_examples());
}

TEST_F(ValidationTest, lstm3_state2) {
  const Model model = lstm3_state2::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state2::createTestModel_dynamic_output_shape,
                           lstm3_state2::is_ignored_dynamic_output_shape,
                           lstm3_state2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state2_dynamic_output_shape) {
  const Model model = lstm3_state2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state3.mod.py.
namespace lstm3_state3 {
// Generated lstm3_state3 test
#include "examples/lstm3_state3.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state3.model.cpp"
} // namespace lstm3_state3

TEST_F(NeuralnetworksHidlTest, lstm3_state3) {
  generated_tests::Execute(device,
                           lstm3_state3::createTestModel,
                           lstm3_state3::is_ignored,
                           lstm3_state3::get_examples());
}

TEST_F(ValidationTest, lstm3_state3) {
  const Model model = lstm3_state3::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state3::createTestModel_dynamic_output_shape,
                           lstm3_state3::is_ignored_dynamic_output_shape,
                           lstm3_state3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state3_dynamic_output_shape) {
  const Model model = lstm3_state3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state.mod.py.
namespace lstm_state {
// Generated lstm_state test
#include "examples/lstm_state.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state.model.cpp"
} // namespace lstm_state

TEST_F(NeuralnetworksHidlTest, lstm_state) {
  generated_tests::Execute(device,
                           lstm_state::createTestModel,
                           lstm_state::is_ignored,
                           lstm_state::get_examples());
}

TEST_F(ValidationTest, lstm_state) {
  const Model model = lstm_state::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state::createTestModel_dynamic_output_shape,
                           lstm_state::is_ignored_dynamic_output_shape,
                           lstm_state::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state_dynamic_output_shape) {
  const Model model = lstm_state::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state2.mod.py.
namespace lstm_state2 {
// Generated lstm_state2 test
#include "examples/lstm_state2.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state2.model.cpp"
} // namespace lstm_state2

TEST_F(NeuralnetworksHidlTest, lstm_state2) {
  generated_tests::Execute(device,
                           lstm_state2::createTestModel,
                           lstm_state2::is_ignored,
                           lstm_state2::get_examples());
}

TEST_F(ValidationTest, lstm_state2) {
  const Model model = lstm_state2::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state2::createTestModel_dynamic_output_shape,
                           lstm_state2::is_ignored_dynamic_output_shape,
                           lstm_state2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state2_dynamic_output_shape) {
  const Model model = lstm_state2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_1.mod.py.
namespace max_pool_float_1 {
// Generated max_pool_float_1 test
#include "examples/max_pool_float_1.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_1.model.cpp"
} // namespace max_pool_float_1

TEST_F(NeuralnetworksHidlTest, max_pool_float_1) {
  generated_tests::Execute(device,
                           max_pool_float_1::createTestModel,
                           max_pool_float_1::is_ignored,
                           max_pool_float_1::get_examples());
}

TEST_F(ValidationTest, max_pool_float_1) {
  const Model model = max_pool_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_1::createTestModel_dynamic_output_shape,
                           max_pool_float_1::is_ignored_dynamic_output_shape,
                           max_pool_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_1_dynamic_output_shape) {
  const Model model = max_pool_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_2.mod.py.
namespace max_pool_float_2 {
// Generated max_pool_float_2 test
#include "examples/max_pool_float_2.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_2.model.cpp"
} // namespace max_pool_float_2

TEST_F(NeuralnetworksHidlTest, max_pool_float_2) {
  generated_tests::Execute(device,
                           max_pool_float_2::createTestModel,
                           max_pool_float_2::is_ignored,
                           max_pool_float_2::get_examples());
}

TEST_F(ValidationTest, max_pool_float_2) {
  const Model model = max_pool_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_2::createTestModel_dynamic_output_shape,
                           max_pool_float_2::is_ignored_dynamic_output_shape,
                           max_pool_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_2_dynamic_output_shape) {
  const Model model = max_pool_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_3.mod.py.
namespace max_pool_float_3 {
// Generated max_pool_float_3 test
#include "examples/max_pool_float_3.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_3.model.cpp"
} // namespace max_pool_float_3

TEST_F(NeuralnetworksHidlTest, max_pool_float_3) {
  generated_tests::Execute(device,
                           max_pool_float_3::createTestModel,
                           max_pool_float_3::is_ignored,
                           max_pool_float_3::get_examples());
}

TEST_F(ValidationTest, max_pool_float_3) {
  const Model model = max_pool_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_3::createTestModel_dynamic_output_shape,
                           max_pool_float_3::is_ignored_dynamic_output_shape,
                           max_pool_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_3_dynamic_output_shape) {
  const Model model = max_pool_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_4.mod.py.
namespace max_pool_float_4 {
// Generated max_pool_float_4 test
#include "examples/max_pool_float_4.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_4.model.cpp"
} // namespace max_pool_float_4

TEST_F(NeuralnetworksHidlTest, max_pool_float_4) {
  generated_tests::Execute(device,
                           max_pool_float_4::createTestModel,
                           max_pool_float_4::is_ignored,
                           max_pool_float_4::get_examples());
}

TEST_F(ValidationTest, max_pool_float_4) {
  const Model model = max_pool_float_4::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_4::createTestModel_dynamic_output_shape,
                           max_pool_float_4::is_ignored_dynamic_output_shape,
                           max_pool_float_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_4_dynamic_output_shape) {
  const Model model = max_pool_float_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_quant8_1.mod.py.
namespace max_pool_quant8_1 {
// Generated max_pool_quant8_1 test
#include "examples/max_pool_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_quant8_1.model.cpp"
} // namespace max_pool_quant8_1

TEST_F(NeuralnetworksHidlTest, max_pool_quant8_1) {
  generated_tests::Execute(device,
                           max_pool_quant8_1::createTestModel,
                           max_pool_quant8_1::is_ignored,
                           max_pool_quant8_1::get_examples());
}

TEST_F(ValidationTest, max_pool_quant8_1) {
  const Model model = max_pool_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_quant8_1::createTestModel_dynamic_output_shape,
                           max_pool_quant8_1::is_ignored_dynamic_output_shape,
                           max_pool_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_quant8_1_dynamic_output_shape) {
  const Model model = max_pool_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_quant8_2.mod.py.
namespace max_pool_quant8_2 {
// Generated max_pool_quant8_2 test
#include "examples/max_pool_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_quant8_2.model.cpp"
} // namespace max_pool_quant8_2

TEST_F(NeuralnetworksHidlTest, max_pool_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_quant8_2::createTestModel,
                           max_pool_quant8_2::is_ignored,
                           max_pool_quant8_2::get_examples());
}

TEST_F(ValidationTest, max_pool_quant8_2) {
  const Model model = max_pool_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_quant8_2::createTestModel_dynamic_output_shape,
                           max_pool_quant8_2::is_ignored_dynamic_output_shape,
                           max_pool_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_quant8_2_dynamic_output_shape) {
  const Model model = max_pool_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_quant8_3.mod.py.
namespace max_pool_quant8_3 {
// Generated max_pool_quant8_3 test
#include "examples/max_pool_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_quant8_3.model.cpp"
} // namespace max_pool_quant8_3

TEST_F(NeuralnetworksHidlTest, max_pool_quant8_3) {
  generated_tests::Execute(device,
                           max_pool_quant8_3::createTestModel,
                           max_pool_quant8_3::is_ignored,
                           max_pool_quant8_3::get_examples());
}

TEST_F(ValidationTest, max_pool_quant8_3) {
  const Model model = max_pool_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_quant8_3::createTestModel_dynamic_output_shape,
                           max_pool_quant8_3::is_ignored_dynamic_output_shape,
                           max_pool_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_quant8_3_dynamic_output_shape) {
  const Model model = max_pool_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_quant8_4.mod.py.
namespace max_pool_quant8_4 {
// Generated max_pool_quant8_4 test
#include "examples/max_pool_quant8_4.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_quant8_4.model.cpp"
} // namespace max_pool_quant8_4

TEST_F(NeuralnetworksHidlTest, max_pool_quant8_4) {
  generated_tests::Execute(device,
                           max_pool_quant8_4::createTestModel,
                           max_pool_quant8_4::is_ignored,
                           max_pool_quant8_4::get_examples());
}

TEST_F(ValidationTest, max_pool_quant8_4) {
  const Model model = max_pool_quant8_4::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_quant8_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_quant8_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_quant8_4::createTestModel_dynamic_output_shape,
                           max_pool_quant8_4::is_ignored_dynamic_output_shape,
                           max_pool_quant8_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_quant8_4_dynamic_output_shape) {
  const Model model = max_pool_quant8_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_quant8_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mobilenet_224_gender_basic_fixed.mod.py.
namespace mobilenet_224_gender_basic_fixed {
// Generated mobilenet_224_gender_basic_fixed test
#include "examples/mobilenet_224_gender_basic_fixed.example.cpp"
// Generated model constructor
#include "vts_models/mobilenet_224_gender_basic_fixed.model.cpp"
} // namespace mobilenet_224_gender_basic_fixed

TEST_F(NeuralnetworksHidlTest, mobilenet_224_gender_basic_fixed) {
  generated_tests::Execute(device,
                           mobilenet_224_gender_basic_fixed::createTestModel,
                           mobilenet_224_gender_basic_fixed::is_ignored,
                           mobilenet_224_gender_basic_fixed::get_examples());
}

TEST_F(ValidationTest, mobilenet_224_gender_basic_fixed) {
  const Model model = mobilenet_224_gender_basic_fixed::createTestModel();
  const std::vector<Request> requests = createRequests(mobilenet_224_gender_basic_fixed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mobilenet_224_gender_basic_fixed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mobilenet_224_gender_basic_fixed::createTestModel_dynamic_output_shape,
                           mobilenet_224_gender_basic_fixed::is_ignored_dynamic_output_shape,
                           mobilenet_224_gender_basic_fixed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mobilenet_224_gender_basic_fixed_dynamic_output_shape) {
  const Model model = mobilenet_224_gender_basic_fixed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mobilenet_224_gender_basic_fixed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mobilenet_quantized.mod.py.
namespace mobilenet_quantized {
// Generated mobilenet_quantized test
#include "examples/mobilenet_quantized.example.cpp"
// Generated model constructor
#include "vts_models/mobilenet_quantized.model.cpp"
} // namespace mobilenet_quantized

TEST_F(NeuralnetworksHidlTest, mobilenet_quantized) {
  generated_tests::Execute(device,
                           mobilenet_quantized::createTestModel,
                           mobilenet_quantized::is_ignored,
                           mobilenet_quantized::get_examples());
}

TEST_F(ValidationTest, mobilenet_quantized) {
  const Model model = mobilenet_quantized::createTestModel();
  const std::vector<Request> requests = createRequests(mobilenet_quantized::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mobilenet_quantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mobilenet_quantized::createTestModel_dynamic_output_shape,
                           mobilenet_quantized::is_ignored_dynamic_output_shape,
                           mobilenet_quantized::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mobilenet_quantized_dynamic_output_shape) {
  const Model model = mobilenet_quantized::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mobilenet_quantized::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul.mod.py.
namespace mul {
// Generated mul test
#include "examples/mul.example.cpp"
// Generated model constructor
#include "vts_models/mul.model.cpp"
} // namespace mul

TEST_F(NeuralnetworksHidlTest, mul) {
  generated_tests::Execute(device,
                           mul::createTestModel,
                           mul::is_ignored,
                           mul::get_examples());
}

TEST_F(ValidationTest, mul) {
  const Model model = mul::createTestModel();
  const std::vector<Request> requests = createRequests(mul::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul::createTestModel_dynamic_output_shape,
                           mul::is_ignored_dynamic_output_shape,
                           mul::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_dynamic_output_shape) {
  const Model model = mul::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_broadcast_quant8.mod.py.
namespace mul_broadcast_quant8 {
// Generated mul_broadcast_quant8 test
#include "examples/mul_broadcast_quant8.example.cpp"
// Generated model constructor
#include "vts_models/mul_broadcast_quant8.model.cpp"
} // namespace mul_broadcast_quant8

TEST_F(NeuralnetworksHidlTest, mul_broadcast_quant8) {
  generated_tests::Execute(device,
                           mul_broadcast_quant8::createTestModel,
                           mul_broadcast_quant8::is_ignored,
                           mul_broadcast_quant8::get_examples());
}

TEST_F(ValidationTest, mul_broadcast_quant8) {
  const Model model = mul_broadcast_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(mul_broadcast_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_broadcast_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_broadcast_quant8::createTestModel_dynamic_output_shape,
                           mul_broadcast_quant8::is_ignored_dynamic_output_shape,
                           mul_broadcast_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_broadcast_quant8_dynamic_output_shape) {
  const Model model = mul_broadcast_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_broadcast_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_quant8.mod.py.
namespace mul_quant8 {
// Generated mul_quant8 test
#include "examples/mul_quant8.example.cpp"
// Generated model constructor
#include "vts_models/mul_quant8.model.cpp"
} // namespace mul_quant8

TEST_F(NeuralnetworksHidlTest, mul_quant8) {
  generated_tests::Execute(device,
                           mul_quant8::createTestModel,
                           mul_quant8::is_ignored,
                           mul_quant8::get_examples());
}

TEST_F(ValidationTest, mul_quant8) {
  const Model model = mul_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(mul_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_quant8::createTestModel_dynamic_output_shape,
                           mul_quant8::is_ignored_dynamic_output_shape,
                           mul_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_quant8_dynamic_output_shape) {
  const Model model = mul_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_relu.mod.py.
namespace mul_relu {
// Generated mul_relu test
#include "examples/mul_relu.example.cpp"
// Generated model constructor
#include "vts_models/mul_relu.model.cpp"
} // namespace mul_relu

TEST_F(NeuralnetworksHidlTest, mul_relu) {
  generated_tests::Execute(device,
                           mul_relu::createTestModel,
                           mul_relu::is_ignored,
                           mul_relu::get_examples());
}

TEST_F(ValidationTest, mul_relu) {
  const Model model = mul_relu::createTestModel();
  const std::vector<Request> requests = createRequests(mul_relu::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_relu_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_relu::createTestModel_dynamic_output_shape,
                           mul_relu::is_ignored_dynamic_output_shape,
                           mul_relu::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_relu_dynamic_output_shape) {
  const Model model = mul_relu::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_relu::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_float_1.mod.py.
namespace relu1_float_1 {
// Generated relu1_float_1 test
#include "examples/relu1_float_1.example.cpp"
// Generated model constructor
#include "vts_models/relu1_float_1.model.cpp"
} // namespace relu1_float_1

TEST_F(NeuralnetworksHidlTest, relu1_float_1) {
  generated_tests::Execute(device,
                           relu1_float_1::createTestModel,
                           relu1_float_1::is_ignored,
                           relu1_float_1::get_examples());
}

TEST_F(ValidationTest, relu1_float_1) {
  const Model model = relu1_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_float_1::createTestModel_dynamic_output_shape,
                           relu1_float_1::is_ignored_dynamic_output_shape,
                           relu1_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_float_1_dynamic_output_shape) {
  const Model model = relu1_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_float_2.mod.py.
namespace relu1_float_2 {
// Generated relu1_float_2 test
#include "examples/relu1_float_2.example.cpp"
// Generated model constructor
#include "vts_models/relu1_float_2.model.cpp"
} // namespace relu1_float_2

TEST_F(NeuralnetworksHidlTest, relu1_float_2) {
  generated_tests::Execute(device,
                           relu1_float_2::createTestModel,
                           relu1_float_2::is_ignored,
                           relu1_float_2::get_examples());
}

TEST_F(ValidationTest, relu1_float_2) {
  const Model model = relu1_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_float_2::createTestModel_dynamic_output_shape,
                           relu1_float_2::is_ignored_dynamic_output_shape,
                           relu1_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_float_2_dynamic_output_shape) {
  const Model model = relu1_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_quant8_1.mod.py.
namespace relu1_quant8_1 {
// Generated relu1_quant8_1 test
#include "examples/relu1_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/relu1_quant8_1.model.cpp"
} // namespace relu1_quant8_1

TEST_F(NeuralnetworksHidlTest, relu1_quant8_1) {
  generated_tests::Execute(device,
                           relu1_quant8_1::createTestModel,
                           relu1_quant8_1::is_ignored,
                           relu1_quant8_1::get_examples());
}

TEST_F(ValidationTest, relu1_quant8_1) {
  const Model model = relu1_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_quant8_1::createTestModel_dynamic_output_shape,
                           relu1_quant8_1::is_ignored_dynamic_output_shape,
                           relu1_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_quant8_1_dynamic_output_shape) {
  const Model model = relu1_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu1_quant8_1_2) {
  generated_tests::Execute(device,
                           relu1_quant8_1::createTestModel_2,
                           relu1_quant8_1::is_ignored_2,
                           relu1_quant8_1::get_examples_2());
}

TEST_F(ValidationTest, relu1_quant8_1_2) {
  const Model model = relu1_quant8_1::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu1_quant8_1::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_quant8_1_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu1_quant8_1::createTestModel_dynamic_output_shape_2,
                           relu1_quant8_1::is_ignored_dynamic_output_shape_2,
                           relu1_quant8_1::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu1_quant8_1_dynamic_output_shape_2) {
  const Model model = relu1_quant8_1::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu1_quant8_1::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_quant8_2.mod.py.
namespace relu1_quant8_2 {
// Generated relu1_quant8_2 test
#include "examples/relu1_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/relu1_quant8_2.model.cpp"
} // namespace relu1_quant8_2

TEST_F(NeuralnetworksHidlTest, relu1_quant8_2) {
  generated_tests::Execute(device,
                           relu1_quant8_2::createTestModel,
                           relu1_quant8_2::is_ignored,
                           relu1_quant8_2::get_examples());
}

TEST_F(ValidationTest, relu1_quant8_2) {
  const Model model = relu1_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_quant8_2::createTestModel_dynamic_output_shape,
                           relu1_quant8_2::is_ignored_dynamic_output_shape,
                           relu1_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_quant8_2_dynamic_output_shape) {
  const Model model = relu1_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_float_1.mod.py.
namespace relu6_float_1 {
// Generated relu6_float_1 test
#include "examples/relu6_float_1.example.cpp"
// Generated model constructor
#include "vts_models/relu6_float_1.model.cpp"
} // namespace relu6_float_1

TEST_F(NeuralnetworksHidlTest, relu6_float_1) {
  generated_tests::Execute(device,
                           relu6_float_1::createTestModel,
                           relu6_float_1::is_ignored,
                           relu6_float_1::get_examples());
}

TEST_F(ValidationTest, relu6_float_1) {
  const Model model = relu6_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_float_1::createTestModel_dynamic_output_shape,
                           relu6_float_1::is_ignored_dynamic_output_shape,
                           relu6_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_float_1_dynamic_output_shape) {
  const Model model = relu6_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_float_2.mod.py.
namespace relu6_float_2 {
// Generated relu6_float_2 test
#include "examples/relu6_float_2.example.cpp"
// Generated model constructor
#include "vts_models/relu6_float_2.model.cpp"
} // namespace relu6_float_2

TEST_F(NeuralnetworksHidlTest, relu6_float_2) {
  generated_tests::Execute(device,
                           relu6_float_2::createTestModel,
                           relu6_float_2::is_ignored,
                           relu6_float_2::get_examples());
}

TEST_F(ValidationTest, relu6_float_2) {
  const Model model = relu6_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_float_2::createTestModel_dynamic_output_shape,
                           relu6_float_2::is_ignored_dynamic_output_shape,
                           relu6_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_float_2_dynamic_output_shape) {
  const Model model = relu6_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_quant8_1.mod.py.
namespace relu6_quant8_1 {
// Generated relu6_quant8_1 test
#include "examples/relu6_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/relu6_quant8_1.model.cpp"
} // namespace relu6_quant8_1

TEST_F(NeuralnetworksHidlTest, relu6_quant8_1) {
  generated_tests::Execute(device,
                           relu6_quant8_1::createTestModel,
                           relu6_quant8_1::is_ignored,
                           relu6_quant8_1::get_examples());
}

TEST_F(ValidationTest, relu6_quant8_1) {
  const Model model = relu6_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_quant8_1::createTestModel_dynamic_output_shape,
                           relu6_quant8_1::is_ignored_dynamic_output_shape,
                           relu6_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_quant8_1_dynamic_output_shape) {
  const Model model = relu6_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu6_quant8_1_2) {
  generated_tests::Execute(device,
                           relu6_quant8_1::createTestModel_2,
                           relu6_quant8_1::is_ignored_2,
                           relu6_quant8_1::get_examples_2());
}

TEST_F(ValidationTest, relu6_quant8_1_2) {
  const Model model = relu6_quant8_1::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu6_quant8_1::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_quant8_1_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu6_quant8_1::createTestModel_dynamic_output_shape_2,
                           relu6_quant8_1::is_ignored_dynamic_output_shape_2,
                           relu6_quant8_1::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu6_quant8_1_dynamic_output_shape_2) {
  const Model model = relu6_quant8_1::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu6_quant8_1::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_quant8_2.mod.py.
namespace relu6_quant8_2 {
// Generated relu6_quant8_2 test
#include "examples/relu6_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/relu6_quant8_2.model.cpp"
} // namespace relu6_quant8_2

TEST_F(NeuralnetworksHidlTest, relu6_quant8_2) {
  generated_tests::Execute(device,
                           relu6_quant8_2::createTestModel,
                           relu6_quant8_2::is_ignored,
                           relu6_quant8_2::get_examples());
}

TEST_F(ValidationTest, relu6_quant8_2) {
  const Model model = relu6_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_quant8_2::createTestModel_dynamic_output_shape,
                           relu6_quant8_2::is_ignored_dynamic_output_shape,
                           relu6_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_quant8_2_dynamic_output_shape) {
  const Model model = relu6_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_float_1.mod.py.
namespace relu_float_1 {
// Generated relu_float_1 test
#include "examples/relu_float_1.example.cpp"
// Generated model constructor
#include "vts_models/relu_float_1.model.cpp"
} // namespace relu_float_1

TEST_F(NeuralnetworksHidlTest, relu_float_1) {
  generated_tests::Execute(device,
                           relu_float_1::createTestModel,
                           relu_float_1::is_ignored,
                           relu_float_1::get_examples());
}

TEST_F(ValidationTest, relu_float_1) {
  const Model model = relu_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_float_1::createTestModel_dynamic_output_shape,
                           relu_float_1::is_ignored_dynamic_output_shape,
                           relu_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_float_1_dynamic_output_shape) {
  const Model model = relu_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_float_2.mod.py.
namespace relu_float_2 {
// Generated relu_float_2 test
#include "examples/relu_float_2.example.cpp"
// Generated model constructor
#include "vts_models/relu_float_2.model.cpp"
} // namespace relu_float_2

TEST_F(NeuralnetworksHidlTest, relu_float_2) {
  generated_tests::Execute(device,
                           relu_float_2::createTestModel,
                           relu_float_2::is_ignored,
                           relu_float_2::get_examples());
}

TEST_F(ValidationTest, relu_float_2) {
  const Model model = relu_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_float_2::createTestModel_dynamic_output_shape,
                           relu_float_2::is_ignored_dynamic_output_shape,
                           relu_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_float_2_dynamic_output_shape) {
  const Model model = relu_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_quant8_1.mod.py.
namespace relu_quant8_1 {
// Generated relu_quant8_1 test
#include "examples/relu_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/relu_quant8_1.model.cpp"
} // namespace relu_quant8_1

TEST_F(NeuralnetworksHidlTest, relu_quant8_1) {
  generated_tests::Execute(device,
                           relu_quant8_1::createTestModel,
                           relu_quant8_1::is_ignored,
                           relu_quant8_1::get_examples());
}

TEST_F(ValidationTest, relu_quant8_1) {
  const Model model = relu_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(relu_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_quant8_1::createTestModel_dynamic_output_shape,
                           relu_quant8_1::is_ignored_dynamic_output_shape,
                           relu_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_quant8_1_dynamic_output_shape) {
  const Model model = relu_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu_quant8_1_2) {
  generated_tests::Execute(device,
                           relu_quant8_1::createTestModel_2,
                           relu_quant8_1::is_ignored_2,
                           relu_quant8_1::get_examples_2());
}

TEST_F(ValidationTest, relu_quant8_1_2) {
  const Model model = relu_quant8_1::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu_quant8_1::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_quant8_1_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu_quant8_1::createTestModel_dynamic_output_shape_2,
                           relu_quant8_1::is_ignored_dynamic_output_shape_2,
                           relu_quant8_1::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu_quant8_1_dynamic_output_shape_2) {
  const Model model = relu_quant8_1::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu_quant8_1::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_quant8_2.mod.py.
namespace relu_quant8_2 {
// Generated relu_quant8_2 test
#include "examples/relu_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/relu_quant8_2.model.cpp"
} // namespace relu_quant8_2

TEST_F(NeuralnetworksHidlTest, relu_quant8_2) {
  generated_tests::Execute(device,
                           relu_quant8_2::createTestModel,
                           relu_quant8_2::is_ignored,
                           relu_quant8_2::get_examples());
}

TEST_F(ValidationTest, relu_quant8_2) {
  const Model model = relu_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_quant8_2::createTestModel_dynamic_output_shape,
                           relu_quant8_2::is_ignored_dynamic_output_shape,
                           relu_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_quant8_2_dynamic_output_shape) {
  const Model model = relu_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape.mod.py.
namespace reshape {
// Generated reshape test
#include "examples/reshape.example.cpp"
// Generated model constructor
#include "vts_models/reshape.model.cpp"
} // namespace reshape

TEST_F(NeuralnetworksHidlTest, reshape) {
  generated_tests::Execute(device,
                           reshape::createTestModel,
                           reshape::is_ignored,
                           reshape::get_examples());
}

TEST_F(ValidationTest, reshape) {
  const Model model = reshape::createTestModel();
  const std::vector<Request> requests = createRequests(reshape::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape::createTestModel_dynamic_output_shape,
                           reshape::is_ignored_dynamic_output_shape,
                           reshape::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_dynamic_output_shape) {
  const Model model = reshape::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_quant8.mod.py.
namespace reshape_quant8 {
// Generated reshape_quant8 test
#include "examples/reshape_quant8.example.cpp"
// Generated model constructor
#include "vts_models/reshape_quant8.model.cpp"
} // namespace reshape_quant8

TEST_F(NeuralnetworksHidlTest, reshape_quant8) {
  generated_tests::Execute(device,
                           reshape_quant8::createTestModel,
                           reshape_quant8::is_ignored,
                           reshape_quant8::get_examples());
}

TEST_F(ValidationTest, reshape_quant8) {
  const Model model = reshape_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_quant8::createTestModel_dynamic_output_shape,
                           reshape_quant8::is_ignored_dynamic_output_shape,
                           reshape_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_quant8_dynamic_output_shape) {
  const Model model = reshape_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_quant8_weights_as_inputs.mod.py.
namespace reshape_quant8_weights_as_inputs {
// Generated reshape_quant8_weights_as_inputs test
#include "examples/reshape_quant8_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/reshape_quant8_weights_as_inputs.model.cpp"
} // namespace reshape_quant8_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, reshape_quant8_weights_as_inputs) {
  generated_tests::Execute(device,
                           reshape_quant8_weights_as_inputs::createTestModel,
                           reshape_quant8_weights_as_inputs::is_ignored,
                           reshape_quant8_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, reshape_quant8_weights_as_inputs) {
  const Model model = reshape_quant8_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_quant8_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_quant8_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_quant8_weights_as_inputs::createTestModel_dynamic_output_shape,
                           reshape_quant8_weights_as_inputs::is_ignored_dynamic_output_shape,
                           reshape_quant8_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_quant8_weights_as_inputs_dynamic_output_shape) {
  const Model model = reshape_quant8_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_quant8_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_weights_as_inputs.mod.py.
namespace reshape_weights_as_inputs {
// Generated reshape_weights_as_inputs test
#include "examples/reshape_weights_as_inputs.example.cpp"
// Generated model constructor
#include "vts_models/reshape_weights_as_inputs.model.cpp"
} // namespace reshape_weights_as_inputs

TEST_F(NeuralnetworksHidlTest, reshape_weights_as_inputs) {
  generated_tests::Execute(device,
                           reshape_weights_as_inputs::createTestModel,
                           reshape_weights_as_inputs::is_ignored,
                           reshape_weights_as_inputs::get_examples());
}

TEST_F(ValidationTest, reshape_weights_as_inputs) {
  const Model model = reshape_weights_as_inputs::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_weights_as_inputs::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_weights_as_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_weights_as_inputs::createTestModel_dynamic_output_shape,
                           reshape_weights_as_inputs::is_ignored_dynamic_output_shape,
                           reshape_weights_as_inputs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_weights_as_inputs_dynamic_output_shape) {
  const Model model = reshape_weights_as_inputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_weights_as_inputs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_bilinear.mod.py.
namespace resize_bilinear {
// Generated resize_bilinear test
#include "examples/resize_bilinear.example.cpp"
// Generated model constructor
#include "vts_models/resize_bilinear.model.cpp"
} // namespace resize_bilinear

TEST_F(NeuralnetworksHidlTest, resize_bilinear) {
  generated_tests::Execute(device,
                           resize_bilinear::createTestModel,
                           resize_bilinear::is_ignored,
                           resize_bilinear::get_examples());
}

TEST_F(ValidationTest, resize_bilinear) {
  const Model model = resize_bilinear::createTestModel();
  const std::vector<Request> requests = createRequests(resize_bilinear::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_dynamic_output_shape) {
  generated_tests::Execute(device,
                           resize_bilinear::createTestModel_dynamic_output_shape,
                           resize_bilinear::is_ignored_dynamic_output_shape,
                           resize_bilinear::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, resize_bilinear_dynamic_output_shape) {
  const Model model = resize_bilinear::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(resize_bilinear::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_bilinear_2.mod.py.
namespace resize_bilinear_2 {
// Generated resize_bilinear_2 test
#include "examples/resize_bilinear_2.example.cpp"
// Generated model constructor
#include "vts_models/resize_bilinear_2.model.cpp"
} // namespace resize_bilinear_2

TEST_F(NeuralnetworksHidlTest, resize_bilinear_2) {
  generated_tests::Execute(device,
                           resize_bilinear_2::createTestModel,
                           resize_bilinear_2::is_ignored,
                           resize_bilinear_2::get_examples());
}

TEST_F(ValidationTest, resize_bilinear_2) {
  const Model model = resize_bilinear_2::createTestModel();
  const std::vector<Request> requests = createRequests(resize_bilinear_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           resize_bilinear_2::createTestModel_dynamic_output_shape,
                           resize_bilinear_2::is_ignored_dynamic_output_shape,
                           resize_bilinear_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, resize_bilinear_2_dynamic_output_shape) {
  const Model model = resize_bilinear_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(resize_bilinear_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: rnn.mod.py.
namespace rnn {
// Generated rnn test
#include "examples/rnn.example.cpp"
// Generated model constructor
#include "vts_models/rnn.model.cpp"
} // namespace rnn

TEST_F(NeuralnetworksHidlTest, rnn) {
  generated_tests::Execute(device,
                           rnn::createTestModel,
                           rnn::is_ignored,
                           rnn::get_examples());
}

TEST_F(ValidationTest, rnn) {
  const Model model = rnn::createTestModel();
  const std::vector<Request> requests = createRequests(rnn::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rnn_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rnn::createTestModel_dynamic_output_shape,
                           rnn::is_ignored_dynamic_output_shape,
                           rnn::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rnn_dynamic_output_shape) {
  const Model model = rnn::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rnn::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: rnn_state.mod.py.
namespace rnn_state {
// Generated rnn_state test
#include "examples/rnn_state.example.cpp"
// Generated model constructor
#include "vts_models/rnn_state.model.cpp"
} // namespace rnn_state

TEST_F(NeuralnetworksHidlTest, rnn_state) {
  generated_tests::Execute(device,
                           rnn_state::createTestModel,
                           rnn_state::is_ignored,
                           rnn_state::get_examples());
}

TEST_F(ValidationTest, rnn_state) {
  const Model model = rnn_state::createTestModel();
  const std::vector<Request> requests = createRequests(rnn_state::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rnn_state_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rnn_state::createTestModel_dynamic_output_shape,
                           rnn_state::is_ignored_dynamic_output_shape,
                           rnn_state::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rnn_state_dynamic_output_shape) {
  const Model model = rnn_state::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rnn_state::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_float_1.mod.py.
namespace softmax_float_1 {
// Generated softmax_float_1 test
#include "examples/softmax_float_1.example.cpp"
// Generated model constructor
#include "vts_models/softmax_float_1.model.cpp"
} // namespace softmax_float_1

TEST_F(NeuralnetworksHidlTest, softmax_float_1) {
  generated_tests::Execute(device,
                           softmax_float_1::createTestModel,
                           softmax_float_1::is_ignored,
                           softmax_float_1::get_examples());
}

TEST_F(ValidationTest, softmax_float_1) {
  const Model model = softmax_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_float_1::createTestModel_dynamic_output_shape,
                           softmax_float_1::is_ignored_dynamic_output_shape,
                           softmax_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_float_1_dynamic_output_shape) {
  const Model model = softmax_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_float_2.mod.py.
namespace softmax_float_2 {
// Generated softmax_float_2 test
#include "examples/softmax_float_2.example.cpp"
// Generated model constructor
#include "vts_models/softmax_float_2.model.cpp"
} // namespace softmax_float_2

TEST_F(NeuralnetworksHidlTest, softmax_float_2) {
  generated_tests::Execute(device,
                           softmax_float_2::createTestModel,
                           softmax_float_2::is_ignored,
                           softmax_float_2::get_examples());
}

TEST_F(ValidationTest, softmax_float_2) {
  const Model model = softmax_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_float_2::createTestModel_dynamic_output_shape,
                           softmax_float_2::is_ignored_dynamic_output_shape,
                           softmax_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_float_2_dynamic_output_shape) {
  const Model model = softmax_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_quant8_1.mod.py.
namespace softmax_quant8_1 {
// Generated softmax_quant8_1 test
#include "examples/softmax_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/softmax_quant8_1.model.cpp"
} // namespace softmax_quant8_1

TEST_F(NeuralnetworksHidlTest, softmax_quant8_1) {
  generated_tests::Execute(device,
                           softmax_quant8_1::createTestModel,
                           softmax_quant8_1::is_ignored,
                           softmax_quant8_1::get_examples());
}

TEST_F(ValidationTest, softmax_quant8_1) {
  const Model model = softmax_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_quant8_1::createTestModel_dynamic_output_shape,
                           softmax_quant8_1::is_ignored_dynamic_output_shape,
                           softmax_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_quant8_1_dynamic_output_shape) {
  const Model model = softmax_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_quant8_2.mod.py.
namespace softmax_quant8_2 {
// Generated softmax_quant8_2 test
#include "examples/softmax_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/softmax_quant8_2.model.cpp"
} // namespace softmax_quant8_2

TEST_F(NeuralnetworksHidlTest, softmax_quant8_2) {
  generated_tests::Execute(device,
                           softmax_quant8_2::createTestModel,
                           softmax_quant8_2::is_ignored,
                           softmax_quant8_2::get_examples());
}

TEST_F(ValidationTest, softmax_quant8_2) {
  const Model model = softmax_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_quant8_2::createTestModel_dynamic_output_shape,
                           softmax_quant8_2::is_ignored_dynamic_output_shape,
                           softmax_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_quant8_2_dynamic_output_shape) {
  const Model model = softmax_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_1.mod.py.
namespace space_to_depth_float_1 {
// Generated space_to_depth_float_1 test
#include "examples/space_to_depth_float_1.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_1.model.cpp"
} // namespace space_to_depth_float_1

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_1) {
  generated_tests::Execute(device,
                           space_to_depth_float_1::createTestModel,
                           space_to_depth_float_1::is_ignored,
                           space_to_depth_float_1::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_1) {
  const Model model = space_to_depth_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_1::createTestModel_dynamic_output_shape,
                           space_to_depth_float_1::is_ignored_dynamic_output_shape,
                           space_to_depth_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_1_dynamic_output_shape) {
  const Model model = space_to_depth_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_2.mod.py.
namespace space_to_depth_float_2 {
// Generated space_to_depth_float_2 test
#include "examples/space_to_depth_float_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_2.model.cpp"
} // namespace space_to_depth_float_2

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_2) {
  generated_tests::Execute(device,
                           space_to_depth_float_2::createTestModel,
                           space_to_depth_float_2::is_ignored,
                           space_to_depth_float_2::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_2) {
  const Model model = space_to_depth_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_2::createTestModel_dynamic_output_shape,
                           space_to_depth_float_2::is_ignored_dynamic_output_shape,
                           space_to_depth_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_2_dynamic_output_shape) {
  const Model model = space_to_depth_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_3.mod.py.
namespace space_to_depth_float_3 {
// Generated space_to_depth_float_3 test
#include "examples/space_to_depth_float_3.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_3.model.cpp"
} // namespace space_to_depth_float_3

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_3) {
  generated_tests::Execute(device,
                           space_to_depth_float_3::createTestModel,
                           space_to_depth_float_3::is_ignored,
                           space_to_depth_float_3::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_3) {
  const Model model = space_to_depth_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_3::createTestModel_dynamic_output_shape,
                           space_to_depth_float_3::is_ignored_dynamic_output_shape,
                           space_to_depth_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_3_dynamic_output_shape) {
  const Model model = space_to_depth_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_quant8_1.mod.py.
namespace space_to_depth_quant8_1 {
// Generated space_to_depth_quant8_1 test
#include "examples/space_to_depth_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_quant8_1.model.cpp"
} // namespace space_to_depth_quant8_1

TEST_F(NeuralnetworksHidlTest, space_to_depth_quant8_1) {
  generated_tests::Execute(device,
                           space_to_depth_quant8_1::createTestModel,
                           space_to_depth_quant8_1::is_ignored,
                           space_to_depth_quant8_1::get_examples());
}

TEST_F(ValidationTest, space_to_depth_quant8_1) {
  const Model model = space_to_depth_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_quant8_1::createTestModel_dynamic_output_shape,
                           space_to_depth_quant8_1::is_ignored_dynamic_output_shape,
                           space_to_depth_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_quant8_1_dynamic_output_shape) {
  const Model model = space_to_depth_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_quant8_2.mod.py.
namespace space_to_depth_quant8_2 {
// Generated space_to_depth_quant8_2 test
#include "examples/space_to_depth_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_quant8_2.model.cpp"
} // namespace space_to_depth_quant8_2

TEST_F(NeuralnetworksHidlTest, space_to_depth_quant8_2) {
  generated_tests::Execute(device,
                           space_to_depth_quant8_2::createTestModel,
                           space_to_depth_quant8_2::is_ignored,
                           space_to_depth_quant8_2::get_examples());
}

TEST_F(ValidationTest, space_to_depth_quant8_2) {
  const Model model = space_to_depth_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_quant8_2::createTestModel_dynamic_output_shape,
                           space_to_depth_quant8_2::is_ignored_dynamic_output_shape,
                           space_to_depth_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_quant8_2_dynamic_output_shape) {
  const Model model = space_to_depth_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf.mod.py.
namespace svdf {
// Generated svdf test
#include "examples/svdf.example.cpp"
// Generated model constructor
#include "vts_models/svdf.model.cpp"
} // namespace svdf

TEST_F(NeuralnetworksHidlTest, svdf) {
  generated_tests::Execute(device,
                           svdf::createTestModel,
                           svdf::is_ignored,
                           svdf::get_examples());
}

TEST_F(ValidationTest, svdf) {
  const Model model = svdf::createTestModel();
  const std::vector<Request> requests = createRequests(svdf::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf::createTestModel_dynamic_output_shape,
                           svdf::is_ignored_dynamic_output_shape,
                           svdf::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_dynamic_output_shape) {
  const Model model = svdf::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf2.mod.py.
namespace svdf2 {
// Generated svdf2 test
#include "examples/svdf2.example.cpp"
// Generated model constructor
#include "vts_models/svdf2.model.cpp"
} // namespace svdf2

TEST_F(NeuralnetworksHidlTest, svdf2) {
  generated_tests::Execute(device,
                           svdf2::createTestModel,
                           svdf2::is_ignored,
                           svdf2::get_examples());
}

TEST_F(ValidationTest, svdf2) {
  const Model model = svdf2::createTestModel();
  const std::vector<Request> requests = createRequests(svdf2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf2::createTestModel_dynamic_output_shape,
                           svdf2::is_ignored_dynamic_output_shape,
                           svdf2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf2_dynamic_output_shape) {
  const Model model = svdf2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_bias_present.mod.py.
namespace svdf_bias_present {
// Generated svdf_bias_present test
#include "examples/svdf_bias_present.example.cpp"
// Generated model constructor
#include "vts_models/svdf_bias_present.model.cpp"
} // namespace svdf_bias_present

TEST_F(NeuralnetworksHidlTest, svdf_bias_present) {
  generated_tests::Execute(device,
                           svdf_bias_present::createTestModel,
                           svdf_bias_present::is_ignored,
                           svdf_bias_present::get_examples());
}

TEST_F(ValidationTest, svdf_bias_present) {
  const Model model = svdf_bias_present::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_bias_present::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_bias_present_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_bias_present::createTestModel_dynamic_output_shape,
                           svdf_bias_present::is_ignored_dynamic_output_shape,
                           svdf_bias_present::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_bias_present_dynamic_output_shape) {
  const Model model = svdf_bias_present::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_bias_present::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_state.mod.py.
namespace svdf_state {
// Generated svdf_state test
#include "examples/svdf_state.example.cpp"
// Generated model constructor
#include "vts_models/svdf_state.model.cpp"
} // namespace svdf_state

TEST_F(NeuralnetworksHidlTest, svdf_state) {
  generated_tests::Execute(device,
                           svdf_state::createTestModel,
                           svdf_state::is_ignored,
                           svdf_state::get_examples());
}

TEST_F(ValidationTest, svdf_state) {
  const Model model = svdf_state::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_state::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_state_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_state::createTestModel_dynamic_output_shape,
                           svdf_state::is_ignored_dynamic_output_shape,
                           svdf_state::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_state_dynamic_output_shape) {
  const Model model = svdf_state::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_state::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: tanh.mod.py.
namespace tanh {
// Generated tanh test
#include "examples/tanh.example.cpp"
// Generated model constructor
#include "vts_models/tanh.model.cpp"
} // namespace tanh

TEST_F(NeuralnetworksHidlTest, tanh) {
  generated_tests::Execute(device,
                           tanh::createTestModel,
                           tanh::is_ignored,
                           tanh::get_examples());
}

TEST_F(ValidationTest, tanh) {
  const Model model = tanh::createTestModel();
  const std::vector<Request> requests = createRequests(tanh::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tanh::createTestModel_dynamic_output_shape,
                           tanh::is_ignored_dynamic_output_shape,
                           tanh::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tanh_dynamic_output_shape) {
  const Model model = tanh::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tanh::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
