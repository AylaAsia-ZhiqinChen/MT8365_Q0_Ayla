// clang-format off
// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_vts_test.sh
// Generated from: abs.mod.py.
namespace abs {
// Generated abs test
#include "examples/abs.example.cpp"
// Generated model constructor
#include "vts_models/abs.model.cpp"
} // namespace abs

TEST_F(NeuralnetworksHidlTest, abs) {
  generated_tests::Execute(device,
                           abs::createTestModel,
                           abs::is_ignored,
                           abs::get_examples());
}

TEST_F(ValidationTest, abs) {
  const Model model = abs::createTestModel();
  const std::vector<Request> requests = createRequests(abs::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, abs_relaxed) {
  generated_tests::Execute(device,
                           abs::createTestModel_relaxed,
                           abs::is_ignored_relaxed,
                           abs::get_examples_relaxed());
}

TEST_F(ValidationTest, abs_relaxed) {
  const Model model = abs::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(abs::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, abs_float16) {
  generated_tests::Execute(device,
                           abs::createTestModel_float16,
                           abs::is_ignored_float16,
                           abs::get_examples_float16());
}

TEST_F(ValidationTest, abs_float16) {
  const Model model = abs::createTestModel_float16();
  const std::vector<Request> requests = createRequests(abs::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, abs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           abs::createTestModel_dynamic_output_shape,
                           abs::is_ignored_dynamic_output_shape,
                           abs::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, abs_dynamic_output_shape) {
  const Model model = abs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(abs::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, abs_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           abs::createTestModel_dynamic_output_shape_relaxed,
                           abs::is_ignored_dynamic_output_shape_relaxed,
                           abs::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, abs_dynamic_output_shape_relaxed) {
  const Model model = abs::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(abs::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, abs_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           abs::createTestModel_dynamic_output_shape_float16,
                           abs::is_ignored_dynamic_output_shape_float16,
                           abs::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, abs_dynamic_output_shape_float16) {
  const Model model = abs::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(abs::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: add_v1_2.mod.py.
namespace add_v1_2 {
// Generated add_v1_2 test
#include "examples/add_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/add_v1_2.model.cpp"
} // namespace add_v1_2

TEST_F(NeuralnetworksHidlTest, add_v1_2) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel,
                           add_v1_2::is_ignored,
                           add_v1_2::get_examples());
}

TEST_F(ValidationTest, add_v1_2) {
  const Model model = add_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_dynamic_output_shape,
                           add_v1_2::is_ignored_dynamic_output_shape,
                           add_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_v1_2_dynamic_output_shape) {
  const Model model = add_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, add_v1_2_2) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_2,
                           add_v1_2::is_ignored_2,
                           add_v1_2::get_examples_2());
}

TEST_F(ValidationTest, add_v1_2_2) {
  const Model model = add_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_dynamic_output_shape_2,
                           add_v1_2::is_ignored_dynamic_output_shape_2,
                           add_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, add_v1_2_dynamic_output_shape_2) {
  const Model model = add_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, add_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized,
                           add_v1_2::is_ignored_zero_sized,
                           add_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, add_v1_2_zero_sized) {
  const Model model = add_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, add_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_relaxed,
                           add_v1_2::is_ignored_zero_sized_relaxed,
                           add_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, add_v1_2_zero_sized_relaxed) {
  const Model model = add_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, add_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_quant8,
                           add_v1_2::is_ignored_zero_sized_quant8,
                           add_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, add_v1_2_zero_sized_quant8) {
  const Model model = add_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, add_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_float16,
                           add_v1_2::is_ignored_zero_sized_float16,
                           add_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, add_v1_2_zero_sized_float16) {
  const Model model = add_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           add_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           add_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = add_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           add_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           add_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, add_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = add_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           add_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           add_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, add_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = add_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           add_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           add_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           add_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, add_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = add_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(add_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: argmax_1.mod.py.
namespace argmax_1 {
// Generated argmax_1 test
#include "examples/argmax_1.example.cpp"
// Generated model constructor
#include "vts_models/argmax_1.model.cpp"
} // namespace argmax_1

TEST_F(NeuralnetworksHidlTest, argmax_1) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel,
                           argmax_1::is_ignored,
                           argmax_1::get_examples());
}

TEST_F(ValidationTest, argmax_1) {
  const Model model = argmax_1::createTestModel();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_1_relaxed) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_relaxed,
                           argmax_1::is_ignored_relaxed,
                           argmax_1::get_examples_relaxed());
}

TEST_F(ValidationTest, argmax_1_relaxed) {
  const Model model = argmax_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_1_float16) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_float16,
                           argmax_1::is_ignored_float16,
                           argmax_1::get_examples_float16());
}

TEST_F(ValidationTest, argmax_1_float16) {
  const Model model = argmax_1::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_1_int32) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_int32,
                           argmax_1::is_ignored_int32,
                           argmax_1::get_examples_int32());
}

TEST_F(ValidationTest, argmax_1_int32) {
  const Model model = argmax_1::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_1_quant8) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_quant8,
                           argmax_1::is_ignored_quant8,
                           argmax_1::get_examples_quant8());
}

TEST_F(ValidationTest, argmax_1_quant8) {
  const Model model = argmax_1::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_dynamic_output_shape,
                           argmax_1::is_ignored_dynamic_output_shape,
                           argmax_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmax_1_dynamic_output_shape) {
  const Model model = argmax_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_dynamic_output_shape_relaxed,
                           argmax_1::is_ignored_dynamic_output_shape_relaxed,
                           argmax_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmax_1_dynamic_output_shape_relaxed) {
  const Model model = argmax_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_1_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_dynamic_output_shape_float16,
                           argmax_1::is_ignored_dynamic_output_shape_float16,
                           argmax_1::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmax_1_dynamic_output_shape_float16) {
  const Model model = argmax_1::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_1_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_dynamic_output_shape_int32,
                           argmax_1::is_ignored_dynamic_output_shape_int32,
                           argmax_1::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmax_1_dynamic_output_shape_int32) {
  const Model model = argmax_1::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_1_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmax_1::createTestModel_dynamic_output_shape_quant8,
                           argmax_1::is_ignored_dynamic_output_shape_quant8,
                           argmax_1::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmax_1_dynamic_output_shape_quant8) {
  const Model model = argmax_1::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmax_1::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: argmax_2.mod.py.
namespace argmax_2 {
// Generated argmax_2 test
#include "examples/argmax_2.example.cpp"
// Generated model constructor
#include "vts_models/argmax_2.model.cpp"
} // namespace argmax_2

TEST_F(NeuralnetworksHidlTest, argmax_2) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel,
                           argmax_2::is_ignored,
                           argmax_2::get_examples());
}

TEST_F(ValidationTest, argmax_2) {
  const Model model = argmax_2::createTestModel();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_2_relaxed) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_relaxed,
                           argmax_2::is_ignored_relaxed,
                           argmax_2::get_examples_relaxed());
}

TEST_F(ValidationTest, argmax_2_relaxed) {
  const Model model = argmax_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_2_float16) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_float16,
                           argmax_2::is_ignored_float16,
                           argmax_2::get_examples_float16());
}

TEST_F(ValidationTest, argmax_2_float16) {
  const Model model = argmax_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_2_int32) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_int32,
                           argmax_2::is_ignored_int32,
                           argmax_2::get_examples_int32());
}

TEST_F(ValidationTest, argmax_2_int32) {
  const Model model = argmax_2::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_2_quant8) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_quant8,
                           argmax_2::is_ignored_quant8,
                           argmax_2::get_examples_quant8());
}

TEST_F(ValidationTest, argmax_2_quant8) {
  const Model model = argmax_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_dynamic_output_shape,
                           argmax_2::is_ignored_dynamic_output_shape,
                           argmax_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmax_2_dynamic_output_shape) {
  const Model model = argmax_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_dynamic_output_shape_relaxed,
                           argmax_2::is_ignored_dynamic_output_shape_relaxed,
                           argmax_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmax_2_dynamic_output_shape_relaxed) {
  const Model model = argmax_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_dynamic_output_shape_float16,
                           argmax_2::is_ignored_dynamic_output_shape_float16,
                           argmax_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmax_2_dynamic_output_shape_float16) {
  const Model model = argmax_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_2_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_dynamic_output_shape_int32,
                           argmax_2::is_ignored_dynamic_output_shape_int32,
                           argmax_2::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmax_2_dynamic_output_shape_int32) {
  const Model model = argmax_2::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_2_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmax_2::createTestModel_dynamic_output_shape_quant8,
                           argmax_2::is_ignored_dynamic_output_shape_quant8,
                           argmax_2::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmax_2_dynamic_output_shape_quant8) {
  const Model model = argmax_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmax_2::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: argmax_3.mod.py.
namespace argmax_3 {
// Generated argmax_3 test
#include "examples/argmax_3.example.cpp"
// Generated model constructor
#include "vts_models/argmax_3.model.cpp"
} // namespace argmax_3

TEST_F(NeuralnetworksHidlTest, argmax_3) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel,
                           argmax_3::is_ignored,
                           argmax_3::get_examples());
}

TEST_F(ValidationTest, argmax_3) {
  const Model model = argmax_3::createTestModel();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_3_relaxed) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_relaxed,
                           argmax_3::is_ignored_relaxed,
                           argmax_3::get_examples_relaxed());
}

TEST_F(ValidationTest, argmax_3_relaxed) {
  const Model model = argmax_3::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_3_float16) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_float16,
                           argmax_3::is_ignored_float16,
                           argmax_3::get_examples_float16());
}

TEST_F(ValidationTest, argmax_3_float16) {
  const Model model = argmax_3::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_3_int32) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_int32,
                           argmax_3::is_ignored_int32,
                           argmax_3::get_examples_int32());
}

TEST_F(ValidationTest, argmax_3_int32) {
  const Model model = argmax_3::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmax_3_quant8) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_quant8,
                           argmax_3::is_ignored_quant8,
                           argmax_3::get_examples_quant8());
}

TEST_F(ValidationTest, argmax_3_quant8) {
  const Model model = argmax_3::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_dynamic_output_shape,
                           argmax_3::is_ignored_dynamic_output_shape,
                           argmax_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmax_3_dynamic_output_shape) {
  const Model model = argmax_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_3_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_dynamic_output_shape_relaxed,
                           argmax_3::is_ignored_dynamic_output_shape_relaxed,
                           argmax_3::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmax_3_dynamic_output_shape_relaxed) {
  const Model model = argmax_3::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_3_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_dynamic_output_shape_float16,
                           argmax_3::is_ignored_dynamic_output_shape_float16,
                           argmax_3::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmax_3_dynamic_output_shape_float16) {
  const Model model = argmax_3::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_3_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_dynamic_output_shape_int32,
                           argmax_3::is_ignored_dynamic_output_shape_int32,
                           argmax_3::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmax_3_dynamic_output_shape_int32) {
  const Model model = argmax_3::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmax_3_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmax_3::createTestModel_dynamic_output_shape_quant8,
                           argmax_3::is_ignored_dynamic_output_shape_quant8,
                           argmax_3::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmax_3_dynamic_output_shape_quant8) {
  const Model model = argmax_3::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmax_3::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: argmin_1.mod.py.
namespace argmin_1 {
// Generated argmin_1 test
#include "examples/argmin_1.example.cpp"
// Generated model constructor
#include "vts_models/argmin_1.model.cpp"
} // namespace argmin_1

TEST_F(NeuralnetworksHidlTest, argmin_1) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel,
                           argmin_1::is_ignored,
                           argmin_1::get_examples());
}

TEST_F(ValidationTest, argmin_1) {
  const Model model = argmin_1::createTestModel();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_1_relaxed) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_relaxed,
                           argmin_1::is_ignored_relaxed,
                           argmin_1::get_examples_relaxed());
}

TEST_F(ValidationTest, argmin_1_relaxed) {
  const Model model = argmin_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_1_float16) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_float16,
                           argmin_1::is_ignored_float16,
                           argmin_1::get_examples_float16());
}

TEST_F(ValidationTest, argmin_1_float16) {
  const Model model = argmin_1::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_1_int32) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_int32,
                           argmin_1::is_ignored_int32,
                           argmin_1::get_examples_int32());
}

TEST_F(ValidationTest, argmin_1_int32) {
  const Model model = argmin_1::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_1_quant8) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_quant8,
                           argmin_1::is_ignored_quant8,
                           argmin_1::get_examples_quant8());
}

TEST_F(ValidationTest, argmin_1_quant8) {
  const Model model = argmin_1::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_dynamic_output_shape,
                           argmin_1::is_ignored_dynamic_output_shape,
                           argmin_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmin_1_dynamic_output_shape) {
  const Model model = argmin_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_dynamic_output_shape_relaxed,
                           argmin_1::is_ignored_dynamic_output_shape_relaxed,
                           argmin_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmin_1_dynamic_output_shape_relaxed) {
  const Model model = argmin_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_1_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_dynamic_output_shape_float16,
                           argmin_1::is_ignored_dynamic_output_shape_float16,
                           argmin_1::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmin_1_dynamic_output_shape_float16) {
  const Model model = argmin_1::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_1_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_dynamic_output_shape_int32,
                           argmin_1::is_ignored_dynamic_output_shape_int32,
                           argmin_1::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmin_1_dynamic_output_shape_int32) {
  const Model model = argmin_1::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_1_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmin_1::createTestModel_dynamic_output_shape_quant8,
                           argmin_1::is_ignored_dynamic_output_shape_quant8,
                           argmin_1::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmin_1_dynamic_output_shape_quant8) {
  const Model model = argmin_1::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmin_1::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: argmin_2.mod.py.
namespace argmin_2 {
// Generated argmin_2 test
#include "examples/argmin_2.example.cpp"
// Generated model constructor
#include "vts_models/argmin_2.model.cpp"
} // namespace argmin_2

TEST_F(NeuralnetworksHidlTest, argmin_2) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel,
                           argmin_2::is_ignored,
                           argmin_2::get_examples());
}

TEST_F(ValidationTest, argmin_2) {
  const Model model = argmin_2::createTestModel();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_2_relaxed) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_relaxed,
                           argmin_2::is_ignored_relaxed,
                           argmin_2::get_examples_relaxed());
}

TEST_F(ValidationTest, argmin_2_relaxed) {
  const Model model = argmin_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_2_float16) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_float16,
                           argmin_2::is_ignored_float16,
                           argmin_2::get_examples_float16());
}

TEST_F(ValidationTest, argmin_2_float16) {
  const Model model = argmin_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_2_int32) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_int32,
                           argmin_2::is_ignored_int32,
                           argmin_2::get_examples_int32());
}

TEST_F(ValidationTest, argmin_2_int32) {
  const Model model = argmin_2::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_2_quant8) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_quant8,
                           argmin_2::is_ignored_quant8,
                           argmin_2::get_examples_quant8());
}

TEST_F(ValidationTest, argmin_2_quant8) {
  const Model model = argmin_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_dynamic_output_shape,
                           argmin_2::is_ignored_dynamic_output_shape,
                           argmin_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmin_2_dynamic_output_shape) {
  const Model model = argmin_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_dynamic_output_shape_relaxed,
                           argmin_2::is_ignored_dynamic_output_shape_relaxed,
                           argmin_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmin_2_dynamic_output_shape_relaxed) {
  const Model model = argmin_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_dynamic_output_shape_float16,
                           argmin_2::is_ignored_dynamic_output_shape_float16,
                           argmin_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmin_2_dynamic_output_shape_float16) {
  const Model model = argmin_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_2_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_dynamic_output_shape_int32,
                           argmin_2::is_ignored_dynamic_output_shape_int32,
                           argmin_2::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmin_2_dynamic_output_shape_int32) {
  const Model model = argmin_2::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_2_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmin_2::createTestModel_dynamic_output_shape_quant8,
                           argmin_2::is_ignored_dynamic_output_shape_quant8,
                           argmin_2::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmin_2_dynamic_output_shape_quant8) {
  const Model model = argmin_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmin_2::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: argmin_3.mod.py.
namespace argmin_3 {
// Generated argmin_3 test
#include "examples/argmin_3.example.cpp"
// Generated model constructor
#include "vts_models/argmin_3.model.cpp"
} // namespace argmin_3

TEST_F(NeuralnetworksHidlTest, argmin_3) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel,
                           argmin_3::is_ignored,
                           argmin_3::get_examples());
}

TEST_F(ValidationTest, argmin_3) {
  const Model model = argmin_3::createTestModel();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_3_relaxed) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_relaxed,
                           argmin_3::is_ignored_relaxed,
                           argmin_3::get_examples_relaxed());
}

TEST_F(ValidationTest, argmin_3_relaxed) {
  const Model model = argmin_3::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_3_float16) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_float16,
                           argmin_3::is_ignored_float16,
                           argmin_3::get_examples_float16());
}

TEST_F(ValidationTest, argmin_3_float16) {
  const Model model = argmin_3::createTestModel_float16();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_3_int32) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_int32,
                           argmin_3::is_ignored_int32,
                           argmin_3::get_examples_int32());
}

TEST_F(ValidationTest, argmin_3_int32) {
  const Model model = argmin_3::createTestModel_int32();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, argmin_3_quant8) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_quant8,
                           argmin_3::is_ignored_quant8,
                           argmin_3::get_examples_quant8());
}

TEST_F(ValidationTest, argmin_3_quant8) {
  const Model model = argmin_3::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_dynamic_output_shape,
                           argmin_3::is_ignored_dynamic_output_shape,
                           argmin_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, argmin_3_dynamic_output_shape) {
  const Model model = argmin_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_3_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_dynamic_output_shape_relaxed,
                           argmin_3::is_ignored_dynamic_output_shape_relaxed,
                           argmin_3::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, argmin_3_dynamic_output_shape_relaxed) {
  const Model model = argmin_3::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_3_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_dynamic_output_shape_float16,
                           argmin_3::is_ignored_dynamic_output_shape_float16,
                           argmin_3::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, argmin_3_dynamic_output_shape_float16) {
  const Model model = argmin_3::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_3_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_dynamic_output_shape_int32,
                           argmin_3::is_ignored_dynamic_output_shape_int32,
                           argmin_3::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, argmin_3_dynamic_output_shape_int32) {
  const Model model = argmin_3::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, argmin_3_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           argmin_3::createTestModel_dynamic_output_shape_quant8,
                           argmin_3::is_ignored_dynamic_output_shape_quant8,
                           argmin_3::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, argmin_3_dynamic_output_shape_quant8) {
  const Model model = argmin_3::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(argmin_3::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_v1_2.mod.py.
namespace avg_pool_v1_2 {
// Generated avg_pool_v1_2 test
#include "examples/avg_pool_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_v1_2.model.cpp"
} // namespace avg_pool_v1_2

TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc,
                           avg_pool_v1_2::is_ignored_nhwc,
                           avg_pool_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_relaxed,
                           avg_pool_v1_2::is_ignored_nhwc_relaxed,
                           avg_pool_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_float16,
                           avg_pool_v1_2::is_ignored_nhwc_float16,
                           avg_pool_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_float16) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_quant8,
                           avg_pool_v1_2::is_ignored_nhwc_quant8,
                           avg_pool_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw,
                           avg_pool_v1_2::is_ignored_nchw,
                           avg_pool_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw) {
  const Model model = avg_pool_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_relaxed,
                           avg_pool_v1_2::is_ignored_nchw_relaxed,
                           avg_pool_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_float16,
                           avg_pool_v1_2::is_ignored_nchw_float16,
                           avg_pool_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_float16) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_quant8,
                           avg_pool_v1_2::is_ignored_nchw_quant8,
                           avg_pool_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_2,
                           avg_pool_v1_2::is_ignored_nhwc_2,
                           avg_pool_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_2) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_relaxed_2,
                           avg_pool_v1_2::is_ignored_nhwc_relaxed_2,
                           avg_pool_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_float16_2,
                           avg_pool_v1_2::is_ignored_nhwc_float16_2,
                           avg_pool_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_quant8_2,
                           avg_pool_v1_2::is_ignored_nhwc_quant8_2,
                           avg_pool_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_2,
                           avg_pool_v1_2::is_ignored_nchw_2,
                           avg_pool_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_2) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_relaxed_2,
                           avg_pool_v1_2::is_ignored_nchw_relaxed_2,
                           avg_pool_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_float16_2,
                           avg_pool_v1_2::is_ignored_nchw_float16_2,
                           avg_pool_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_quant8_2,
                           avg_pool_v1_2::is_ignored_nchw_quant8_2,
                           avg_pool_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_3,
                           avg_pool_v1_2::is_ignored_nhwc_3,
                           avg_pool_v1_2::get_examples_nhwc_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_3) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_relaxed_3,
                           avg_pool_v1_2::is_ignored_nhwc_relaxed_3,
                           avg_pool_v1_2::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_relaxed_3) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_float16_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_float16_3,
                           avg_pool_v1_2::is_ignored_nhwc_float16_3,
                           avg_pool_v1_2::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_float16_3) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_quant8_3,
                           avg_pool_v1_2::is_ignored_nhwc_quant8_3,
                           avg_pool_v1_2::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_quant8_3) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_3,
                           avg_pool_v1_2::is_ignored_nchw_3,
                           avg_pool_v1_2::get_examples_nchw_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_3) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_relaxed_3,
                           avg_pool_v1_2::is_ignored_nchw_relaxed_3,
                           avg_pool_v1_2::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_relaxed_3) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_float16_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_float16_3,
                           avg_pool_v1_2::is_ignored_nchw_float16_3,
                           avg_pool_v1_2::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_float16_3) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_quant8_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_quant8_3,
                           avg_pool_v1_2::is_ignored_nchw_quant8_3,
                           avg_pool_v1_2::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_quant8_3) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_3) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_4,
                           avg_pool_v1_2::is_ignored_nhwc_4,
                           avg_pool_v1_2::get_examples_nhwc_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_4) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_relaxed_4,
                           avg_pool_v1_2::is_ignored_nhwc_relaxed_4,
                           avg_pool_v1_2::get_examples_nhwc_relaxed_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_relaxed_4) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_float16_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_float16_4,
                           avg_pool_v1_2::is_ignored_nhwc_float16_4,
                           avg_pool_v1_2::get_examples_nhwc_float16_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_float16_4) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_quant8_4,
                           avg_pool_v1_2::is_ignored_nhwc_quant8_4,
                           avg_pool_v1_2::get_examples_nhwc_quant8_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_quant8_4) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_4,
                           avg_pool_v1_2::is_ignored_nchw_4,
                           avg_pool_v1_2::get_examples_nchw_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_4) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_relaxed_4,
                           avg_pool_v1_2::is_ignored_nchw_relaxed_4,
                           avg_pool_v1_2::get_examples_nchw_relaxed_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_relaxed_4) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_float16_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_float16_4,
                           avg_pool_v1_2::is_ignored_nchw_float16_4,
                           avg_pool_v1_2::get_examples_nchw_float16_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_float16_4) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_quant8_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_quant8_4,
                           avg_pool_v1_2::is_ignored_nchw_quant8_4,
                           avg_pool_v1_2::get_examples_nchw_quant8_4());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_quant8_4) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_quant8_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_4) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_5,
                           avg_pool_v1_2::is_ignored_nhwc_5,
                           avg_pool_v1_2::get_examples_nhwc_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_5) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_relaxed_5,
                           avg_pool_v1_2::is_ignored_nhwc_relaxed_5,
                           avg_pool_v1_2::get_examples_nhwc_relaxed_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_relaxed_5) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_float16_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_float16_5,
                           avg_pool_v1_2::is_ignored_nhwc_float16_5,
                           avg_pool_v1_2::get_examples_nhwc_float16_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_float16_5) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nhwc_quant8_5,
                           avg_pool_v1_2::is_ignored_nhwc_quant8_5,
                           avg_pool_v1_2::get_examples_nhwc_quant8_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nhwc_quant8_5) {
  const Model model = avg_pool_v1_2::createTestModel_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nhwc_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_5,
                           avg_pool_v1_2::is_ignored_nchw_5,
                           avg_pool_v1_2::get_examples_nchw_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_5) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_relaxed_5,
                           avg_pool_v1_2::is_ignored_nchw_relaxed_5,
                           avg_pool_v1_2::get_examples_nchw_relaxed_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_relaxed_5) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_float16_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_float16_5,
                           avg_pool_v1_2::is_ignored_nchw_float16_5,
                           avg_pool_v1_2::get_examples_nchw_float16_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_float16_5) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_float16_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_nchw_quant8_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_nchw_quant8_5,
                           avg_pool_v1_2::is_ignored_nchw_quant8_5,
                           avg_pool_v1_2::get_examples_nchw_quant8_5());
}

TEST_F(ValidationTest, avg_pool_v1_2_nchw_quant8_5) {
  const Model model = avg_pool_v1_2::createTestModel_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_nchw_quant8_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_relaxed_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_float16_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nhwc_quant8_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_relaxed_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_float16_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_5,
                           avg_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_5,
                           avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_5(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_dynamic_output_shape_nchw_quant8_5) {
  const Model model = avg_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_quant8,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_quant8,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_float16,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_float16,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_float16) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw,
                           avg_pool_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_quant8,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_quant8,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_float16,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_float16,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_float16) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_2,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed_2,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_quant8_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_quant8_2,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nhwc_float16_2,
                           avg_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nhwc_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_2,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_relaxed_2,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_quant8_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_quant8_2,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, avg_pool_v1_2_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_nchw_float16_2,
                           avg_pool_v1_2::is_ignored_zero_sized_nchw_float16_2,
                           avg_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_nchw_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           avg_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, avg_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = avg_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(avg_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: axis_aligned_bbox_transform.mod.py.
namespace axis_aligned_bbox_transform {
// Generated axis_aligned_bbox_transform test
#include "examples/axis_aligned_bbox_transform.example.cpp"
// Generated model constructor
#include "vts_models/axis_aligned_bbox_transform.model.cpp"
} // namespace axis_aligned_bbox_transform

TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel,
                           axis_aligned_bbox_transform::is_ignored,
                           axis_aligned_bbox_transform::get_examples());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform) {
  const Model model = axis_aligned_bbox_transform::createTestModel();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_relaxed) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_relaxed,
                           axis_aligned_bbox_transform::is_ignored_relaxed,
                           axis_aligned_bbox_transform::get_examples_relaxed());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_relaxed) {
  const Model model = axis_aligned_bbox_transform::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_float16) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_float16,
                           axis_aligned_bbox_transform::is_ignored_float16,
                           axis_aligned_bbox_transform::get_examples_float16());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_float16) {
  const Model model = axis_aligned_bbox_transform::createTestModel_float16();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_quant8) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_quant8,
                           axis_aligned_bbox_transform::is_ignored_quant8,
                           axis_aligned_bbox_transform::get_examples_quant8());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_quant8) {
  const Model model = axis_aligned_bbox_transform::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_relaxed,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_relaxed,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_relaxed) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_float16,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_float16,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_float16) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_quant8,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_quant8,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_quant8) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_2,
                           axis_aligned_bbox_transform::is_ignored_2,
                           axis_aligned_bbox_transform::get_examples_2());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_relaxed_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_relaxed_2,
                           axis_aligned_bbox_transform::is_ignored_relaxed_2,
                           axis_aligned_bbox_transform::get_examples_relaxed_2());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_relaxed_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_float16_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_float16_2,
                           axis_aligned_bbox_transform::is_ignored_float16_2,
                           axis_aligned_bbox_transform::get_examples_float16_2());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_float16_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, axis_aligned_bbox_transform_quant8_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_quant8_2,
                           axis_aligned_bbox_transform::is_ignored_quant8_2,
                           axis_aligned_bbox_transform::get_examples_quant8_2());
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_quant8_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_2,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_2,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_relaxed_2,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_relaxed_2,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_relaxed_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_float16_2,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_float16_2,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_float16_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, axis_aligned_bbox_transform_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_quant8_2,
                           axis_aligned_bbox_transform::is_ignored_dynamic_output_shape_quant8_2,
                           axis_aligned_bbox_transform::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, axis_aligned_bbox_transform_dynamic_output_shape_quant8_2) {
  const Model model = axis_aligned_bbox_transform::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(axis_aligned_bbox_transform::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space_v1_2.mod.py.
namespace batch_to_space_v1_2 {
// Generated batch_to_space_v1_2 test
#include "examples/batch_to_space_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space_v1_2.model.cpp"
} // namespace batch_to_space_v1_2

TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc,
                           batch_to_space_v1_2::is_ignored_nhwc,
                           batch_to_space_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_relaxed,
                           batch_to_space_v1_2::is_ignored_nhwc_relaxed,
                           batch_to_space_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_relaxed) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_float16,
                           batch_to_space_v1_2::is_ignored_nhwc_float16,
                           batch_to_space_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_float16) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_quant8,
                           batch_to_space_v1_2::is_ignored_nhwc_quant8,
                           batch_to_space_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_quant8) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw,
                           batch_to_space_v1_2::is_ignored_nchw,
                           batch_to_space_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_relaxed,
                           batch_to_space_v1_2::is_ignored_nchw_relaxed,
                           batch_to_space_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_relaxed) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_float16,
                           batch_to_space_v1_2::is_ignored_nchw_float16,
                           batch_to_space_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_float16) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_quant8,
                           batch_to_space_v1_2::is_ignored_nchw_quant8,
                           batch_to_space_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_quant8) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_2,
                           batch_to_space_v1_2::is_ignored_nhwc_2,
                           batch_to_space_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_relaxed_2,
                           batch_to_space_v1_2::is_ignored_nhwc_relaxed_2,
                           batch_to_space_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_relaxed_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_float16_2,
                           batch_to_space_v1_2::is_ignored_nhwc_float16_2,
                           batch_to_space_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_float16_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nhwc_quant8_2,
                           batch_to_space_v1_2::is_ignored_nhwc_quant8_2,
                           batch_to_space_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nhwc_quant8_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_2,
                           batch_to_space_v1_2::is_ignored_nchw_2,
                           batch_to_space_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_relaxed_2,
                           batch_to_space_v1_2::is_ignored_nchw_relaxed_2,
                           batch_to_space_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_relaxed_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_float16_2,
                           batch_to_space_v1_2::is_ignored_nchw_float16_2,
                           batch_to_space_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_float16_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, batch_to_space_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_nchw_quant8_2,
                           batch_to_space_v1_2::is_ignored_nchw_quant8_2,
                           batch_to_space_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, batch_to_space_v1_2_nchw_quant8_2) {
  const Model model = batch_to_space_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           batch_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, batch_to_space_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = batch_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(batch_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: bbox_graph.mod.py.
namespace bbox_graph {
// Generated bbox_graph test
#include "examples/bbox_graph.example.cpp"
// Generated model constructor
#include "vts_models/bbox_graph.model.cpp"
} // namespace bbox_graph

TEST_F(NeuralnetworksHidlTest, bbox_graph_zero_sized) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized,
                           bbox_graph::is_ignored_zero_sized,
                           bbox_graph::get_examples_zero_sized());
}

TEST_F(ValidationTest, bbox_graph_zero_sized) {
  const Model model = bbox_graph::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bbox_graph_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_relaxed,
                           bbox_graph::is_ignored_zero_sized_relaxed,
                           bbox_graph::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, bbox_graph_zero_sized_relaxed) {
  const Model model = bbox_graph::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bbox_graph_zero_sized_float16) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_float16,
                           bbox_graph::is_ignored_zero_sized_float16,
                           bbox_graph::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, bbox_graph_zero_sized_float16) {
  const Model model = bbox_graph::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bbox_graph_zero_sized_quant8) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_quant8,
                           bbox_graph::is_ignored_zero_sized_quant8,
                           bbox_graph::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, bbox_graph_zero_sized_quant8) {
  const Model model = bbox_graph::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bbox_graph_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_dynamic_output_shape,
                           bbox_graph::is_ignored_zero_sized_dynamic_output_shape,
                           bbox_graph::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bbox_graph_zero_sized_dynamic_output_shape) {
  const Model model = bbox_graph::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bbox_graph_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           bbox_graph::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           bbox_graph::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bbox_graph_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = bbox_graph::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bbox_graph_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_dynamic_output_shape_float16,
                           bbox_graph::is_ignored_zero_sized_dynamic_output_shape_float16,
                           bbox_graph::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bbox_graph_zero_sized_dynamic_output_shape_float16) {
  const Model model = bbox_graph::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bbox_graph_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           bbox_graph::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           bbox_graph::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           bbox_graph::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, bbox_graph_zero_sized_dynamic_output_shape_quant8) {
  const Model model = bbox_graph::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(bbox_graph::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm.mod.py.
namespace bidirectional_sequence_lstm {
// Generated bidirectional_sequence_lstm test
#include "examples/bidirectional_sequence_lstm.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm.model.cpp"
} // namespace bidirectional_sequence_lstm

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm::createTestModel,
                           bidirectional_sequence_lstm::is_ignored,
                           bidirectional_sequence_lstm::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_blackbox) {
  const Model model = bidirectional_sequence_lstm::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_aux_input.mod.py.
namespace bidirectional_sequence_lstm_aux_input {
// Generated bidirectional_sequence_lstm_aux_input test
#include "examples/bidirectional_sequence_lstm_aux_input.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_aux_input.model.cpp"
} // namespace bidirectional_sequence_lstm_aux_input

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_aux_input_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_aux_input::createTestModel,
                           bidirectional_sequence_lstm_aux_input::is_ignored,
                           bidirectional_sequence_lstm_aux_input::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_aux_input_blackbox) {
  const Model model = bidirectional_sequence_lstm_aux_input::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_aux_input::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_aux_input_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_aux_input::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_aux_input::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_aux_input::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_aux_input_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_aux_input::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_aux_input::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_cifg_peephole.mod.py.
namespace bidirectional_sequence_lstm_cifg_peephole {
// Generated bidirectional_sequence_lstm_cifg_peephole test
#include "examples/bidirectional_sequence_lstm_cifg_peephole.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_cifg_peephole.model.cpp"
} // namespace bidirectional_sequence_lstm_cifg_peephole

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_cifg_peephole_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_cifg_peephole::createTestModel,
                           bidirectional_sequence_lstm_cifg_peephole::is_ignored,
                           bidirectional_sequence_lstm_cifg_peephole::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_cifg_peephole_blackbox) {
  const Model model = bidirectional_sequence_lstm_cifg_peephole::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_cifg_peephole::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_cifg_peephole_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_cifg_peephole::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_cifg_peephole::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_cifg_peephole::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_cifg_peephole_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_cifg_peephole::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_cifg_peephole::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_float16_batch_major.mod.py.
namespace bidirectional_sequence_lstm_float16_batch_major {
// Generated bidirectional_sequence_lstm_float16_batch_major test
#include "examples/bidirectional_sequence_lstm_float16_batch_major.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_float16_batch_major.model.cpp"
} // namespace bidirectional_sequence_lstm_float16_batch_major

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_float16_batch_major_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major::createTestModel,
                           bidirectional_sequence_lstm_float16_batch_major::is_ignored,
                           bidirectional_sequence_lstm_float16_batch_major::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_blackbox) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_float16_batch_major_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_float16_batch_major_aux_input.mod.py.
namespace bidirectional_sequence_lstm_float16_batch_major_aux_input {
// Generated bidirectional_sequence_lstm_float16_batch_major_aux_input test
#include "examples/bidirectional_sequence_lstm_float16_batch_major_aux_input.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_float16_batch_major_aux_input.model.cpp"
} // namespace bidirectional_sequence_lstm_float16_batch_major_aux_input

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_float16_batch_major_aux_input_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::createTestModel,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::is_ignored,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_aux_input_blackbox) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major_aux_input::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major_aux_input::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_float16_batch_major_aux_input_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major_aux_input::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_aux_input_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major_aux_input::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major_aux_input::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_float16_batch_major_merge_outputs.mod.py.
namespace bidirectional_sequence_lstm_float16_batch_major_merge_outputs {
// Generated bidirectional_sequence_lstm_float16_batch_major_merge_outputs test
#include "examples/bidirectional_sequence_lstm_float16_batch_major_merge_outputs.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_float16_batch_major_merge_outputs.model.cpp"
} // namespace bidirectional_sequence_lstm_float16_batch_major_merge_outputs

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_float16_batch_major_merge_outputs_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::createTestModel,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::is_ignored,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_merge_outputs_blackbox) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major_merge_outputs::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major_merge_outputs::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_float16_batch_major_merge_outputs_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_float16_batch_major_merge_outputs::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_float16_batch_major_merge_outputs_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_float16_batch_major_merge_outputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_float16_batch_major_merge_outputs::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_merge_outputs.mod.py.
namespace bidirectional_sequence_lstm_merge_outputs {
// Generated bidirectional_sequence_lstm_merge_outputs test
#include "examples/bidirectional_sequence_lstm_merge_outputs.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_merge_outputs.model.cpp"
} // namespace bidirectional_sequence_lstm_merge_outputs

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_merge_outputs_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_merge_outputs::createTestModel,
                           bidirectional_sequence_lstm_merge_outputs::is_ignored,
                           bidirectional_sequence_lstm_merge_outputs::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_merge_outputs_blackbox) {
  const Model model = bidirectional_sequence_lstm_merge_outputs::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_merge_outputs::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_merge_outputs_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_merge_outputs::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_merge_outputs::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_merge_outputs::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_merge_outputs_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_merge_outputs::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_merge_outputs::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_lstm_norm_fw_output.mod.py.
namespace bidirectional_sequence_lstm_norm_fw_output {
// Generated bidirectional_sequence_lstm_norm_fw_output test
#include "examples/bidirectional_sequence_lstm_norm_fw_output.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_lstm_norm_fw_output.model.cpp"
} // namespace bidirectional_sequence_lstm_norm_fw_output

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_lstm_norm_fw_output_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_norm_fw_output::createTestModel,
                           bidirectional_sequence_lstm_norm_fw_output::is_ignored,
                           bidirectional_sequence_lstm_norm_fw_output::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_norm_fw_output_blackbox) {
  const Model model = bidirectional_sequence_lstm_norm_fw_output::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_norm_fw_output::get_examples_blackbox());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_lstm_norm_fw_output_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_lstm_norm_fw_output::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_lstm_norm_fw_output::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_lstm_norm_fw_output::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_lstm_norm_fw_output_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_lstm_norm_fw_output::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_lstm_norm_fw_output::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: bidirectional_sequence_rnn.mod.py.
namespace bidirectional_sequence_rnn {
// Generated bidirectional_sequence_rnn test
#include "examples/bidirectional_sequence_rnn.example.cpp"
// Generated model constructor
#include "vts_models/bidirectional_sequence_rnn.model.cpp"
} // namespace bidirectional_sequence_rnn

TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel,
                           bidirectional_sequence_rnn::is_ignored,
                           bidirectional_sequence_rnn::get_examples_blackbox());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox) {
  const Model model = bidirectional_sequence_rnn::createTestModel();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed,
                           bidirectional_sequence_rnn::is_ignored_relaxed,
                           bidirectional_sequence_rnn::get_examples_blackbox_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16,
                           bidirectional_sequence_rnn::is_ignored_float16,
                           bidirectional_sequence_rnn::get_examples_blackbox_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape,
                           bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed,
                           bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16,
                           bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_2,
                           bidirectional_sequence_rnn::is_ignored_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major) {
  const Model model = bidirectional_sequence_rnn::createTestModel_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed_2,
                           bidirectional_sequence_rnn::is_ignored_relaxed_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16_2,
                           bidirectional_sequence_rnn::is_ignored_float16_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_2,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_2,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_2,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_2,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_3,
                           bidirectional_sequence_rnn::is_ignored_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs) {
  const Model model = bidirectional_sequence_rnn::createTestModel_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed_3,
                           bidirectional_sequence_rnn::is_ignored_relaxed_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16_3,
                           bidirectional_sequence_rnn::is_ignored_float16_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_3,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_3,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_3,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_3,
                           bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_time_major_merge_outputs_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_time_major_merge_outputs_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_reversed_inputs) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_4,
                           bidirectional_sequence_rnn::is_ignored_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs) {
  const Model model = bidirectional_sequence_rnn::createTestModel_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed_4,
                           bidirectional_sequence_rnn::is_ignored_relaxed_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16_4,
                           bidirectional_sequence_rnn::is_ignored_float16_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_4,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_4,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_4,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_4,
                           bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_reversed_inputs_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_reversed_inputs_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_aux_input) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_5,
                           bidirectional_sequence_rnn::is_ignored_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input) {
  const Model model = bidirectional_sequence_rnn::createTestModel_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_aux_input_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed_5,
                           bidirectional_sequence_rnn::is_ignored_relaxed_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_aux_input_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16_5,
                           bidirectional_sequence_rnn::is_ignored_float16_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_5,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_5,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_5,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_5,
                           bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_aux_input_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_5();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_aux_input_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_6,
                           bidirectional_sequence_rnn::is_ignored_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input) {
  const Model model = bidirectional_sequence_rnn::createTestModel_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_relaxed_6,
                           bidirectional_sequence_rnn::is_ignored_relaxed_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_relaxed());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_float16_6,
                           bidirectional_sequence_rnn::is_ignored_float16_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_float16());
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_float16_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_6,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_6,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape_relaxed) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_6,
                           bidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_6,
                           bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, bidirectional_sequence_rnn_blackbox_regular_and_aux_input_dynamic_output_shape_float16) {
  const Model model = bidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_6();
  const std::vector<Request> requests = createRequests(bidirectional_sequence_rnn::get_examples_blackbox_regular_and_aux_input_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: box_with_nms_limit_gaussian.mod.py.
namespace box_with_nms_limit_gaussian {
// Generated box_with_nms_limit_gaussian test
#include "examples/box_with_nms_limit_gaussian.example.cpp"
// Generated model constructor
#include "vts_models/box_with_nms_limit_gaussian.model.cpp"
} // namespace box_with_nms_limit_gaussian

TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel,
                           box_with_nms_limit_gaussian::is_ignored,
                           box_with_nms_limit_gaussian::get_examples());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian) {
  const Model model = box_with_nms_limit_gaussian::createTestModel();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_relaxed,
                           box_with_nms_limit_gaussian::is_ignored_relaxed,
                           box_with_nms_limit_gaussian::get_examples_relaxed());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_relaxed) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_float16,
                           box_with_nms_limit_gaussian::is_ignored_float16,
                           box_with_nms_limit_gaussian::get_examples_float16());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_float16) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_quant8,
                           box_with_nms_limit_gaussian::is_ignored_quant8,
                           box_with_nms_limit_gaussian::get_examples_quant8());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_quant8) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_relaxed,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_relaxed,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_relaxed) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_float16,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_float16,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_float16) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_quant8,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_quant8,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_quant8) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_2,
                           box_with_nms_limit_gaussian::is_ignored_2,
                           box_with_nms_limit_gaussian::get_examples_2());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_relaxed_2,
                           box_with_nms_limit_gaussian::is_ignored_relaxed_2,
                           box_with_nms_limit_gaussian::get_examples_relaxed_2());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_relaxed_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_float16_2,
                           box_with_nms_limit_gaussian::is_ignored_float16_2,
                           box_with_nms_limit_gaussian::get_examples_float16_2());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_float16_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_gaussian_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_quant8_2,
                           box_with_nms_limit_gaussian::is_ignored_quant8_2,
                           box_with_nms_limit_gaussian::get_examples_quant8_2());
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_quant8_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_2,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_2,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_relaxed_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_float16_2,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_float16_2,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_float16_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_gaussian_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_gaussian::is_ignored_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_gaussian_dynamic_output_shape_quant8_2) {
  const Model model = box_with_nms_limit_gaussian::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_gaussian::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: box_with_nms_limit_hard.mod.py.
namespace box_with_nms_limit_hard {
// Generated box_with_nms_limit_hard test
#include "examples/box_with_nms_limit_hard.example.cpp"
// Generated model constructor
#include "vts_models/box_with_nms_limit_hard.model.cpp"
} // namespace box_with_nms_limit_hard

TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel,
                           box_with_nms_limit_hard::is_ignored,
                           box_with_nms_limit_hard::get_examples());
}

TEST_F(ValidationTest, box_with_nms_limit_hard) {
  const Model model = box_with_nms_limit_hard::createTestModel();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_relaxed,
                           box_with_nms_limit_hard::is_ignored_relaxed,
                           box_with_nms_limit_hard::get_examples_relaxed());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_relaxed) {
  const Model model = box_with_nms_limit_hard::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_float16,
                           box_with_nms_limit_hard::is_ignored_float16,
                           box_with_nms_limit_hard::get_examples_float16());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_float16) {
  const Model model = box_with_nms_limit_hard::createTestModel_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_quant8,
                           box_with_nms_limit_hard::is_ignored_quant8,
                           box_with_nms_limit_hard::get_examples_quant8());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_quant8) {
  const Model model = box_with_nms_limit_hard::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_relaxed,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_relaxed,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_relaxed) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_float16,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_float16,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_float16) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_quant8,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_quant8,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_quant8) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_2,
                           box_with_nms_limit_hard::is_ignored_2,
                           box_with_nms_limit_hard::get_examples_2());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_relaxed_2,
                           box_with_nms_limit_hard::is_ignored_relaxed_2,
                           box_with_nms_limit_hard::get_examples_relaxed_2());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_relaxed_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_float16_2,
                           box_with_nms_limit_hard::is_ignored_float16_2,
                           box_with_nms_limit_hard::get_examples_float16_2());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_float16_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_hard_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_quant8_2,
                           box_with_nms_limit_hard::is_ignored_quant8_2,
                           box_with_nms_limit_hard::get_examples_quant8_2());
}

TEST_F(ValidationTest, box_with_nms_limit_hard_quant8_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_2,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_2,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_relaxed_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_float16_2,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_float16_2,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_float16_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_hard_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_hard::createTestModel_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_hard::is_ignored_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_hard::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_hard_dynamic_output_shape_quant8_2) {
  const Model model = box_with_nms_limit_hard::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_hard::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: box_with_nms_limit_linear.mod.py.
namespace box_with_nms_limit_linear {
// Generated box_with_nms_limit_linear test
#include "examples/box_with_nms_limit_linear.example.cpp"
// Generated model constructor
#include "vts_models/box_with_nms_limit_linear.model.cpp"
} // namespace box_with_nms_limit_linear

TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel,
                           box_with_nms_limit_linear::is_ignored,
                           box_with_nms_limit_linear::get_examples());
}

TEST_F(ValidationTest, box_with_nms_limit_linear) {
  const Model model = box_with_nms_limit_linear::createTestModel();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_relaxed,
                           box_with_nms_limit_linear::is_ignored_relaxed,
                           box_with_nms_limit_linear::get_examples_relaxed());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_relaxed) {
  const Model model = box_with_nms_limit_linear::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_float16,
                           box_with_nms_limit_linear::is_ignored_float16,
                           box_with_nms_limit_linear::get_examples_float16());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_float16) {
  const Model model = box_with_nms_limit_linear::createTestModel_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_quant8,
                           box_with_nms_limit_linear::is_ignored_quant8,
                           box_with_nms_limit_linear::get_examples_quant8());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_quant8) {
  const Model model = box_with_nms_limit_linear::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_relaxed,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_relaxed,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_relaxed) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_float16,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_float16,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_float16) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_quant8,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_quant8,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_quant8) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_2,
                           box_with_nms_limit_linear::is_ignored_2,
                           box_with_nms_limit_linear::get_examples_2());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_relaxed_2,
                           box_with_nms_limit_linear::is_ignored_relaxed_2,
                           box_with_nms_limit_linear::get_examples_relaxed_2());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_relaxed_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_float16_2,
                           box_with_nms_limit_linear::is_ignored_float16_2,
                           box_with_nms_limit_linear::get_examples_float16_2());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_float16_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, box_with_nms_limit_linear_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_quant8_2,
                           box_with_nms_limit_linear::is_ignored_quant8_2,
                           box_with_nms_limit_linear::get_examples_quant8_2());
}

TEST_F(ValidationTest, box_with_nms_limit_linear_quant8_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_2,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_2,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_relaxed_2,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_relaxed_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_float16_2,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_float16_2,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_float16_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, box_with_nms_limit_linear_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           box_with_nms_limit_linear::createTestModel_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_linear::is_ignored_dynamic_output_shape_quant8_2,
                           box_with_nms_limit_linear::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, box_with_nms_limit_linear_dynamic_output_shape_quant8_2) {
  const Model model = box_with_nms_limit_linear::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(box_with_nms_limit_linear::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: cast.mod.py.
namespace cast {
// Generated cast test
#include "examples/cast.example.cpp"
// Generated model constructor
#include "vts_models/cast.model.cpp"
} // namespace cast

TEST_F(NeuralnetworksHidlTest, cast_float16_to_float16) {
  generated_tests::Execute(device,
                           cast::createTestModel,
                           cast::is_ignored,
                           cast::get_examples_float16_to_float16());
}

TEST_F(ValidationTest, cast_float16_to_float16) {
  const Model model = cast::createTestModel();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape,
                           cast::is_ignored_dynamic_output_shape,
                           cast::get_examples_float16_to_float16_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float16_to_float16_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float16_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float16_to_float32) {
  generated_tests::Execute(device,
                           cast::createTestModel_2,
                           cast::is_ignored_2,
                           cast::get_examples_float16_to_float32());
}

TEST_F(ValidationTest, cast_float16_to_float32) {
  const Model model = cast::createTestModel_2();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float16_to_float32_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed,
                           cast::is_ignored_relaxed,
                           cast::get_examples_float16_to_float32_relaxed());
}

TEST_F(ValidationTest, cast_float16_to_float32_relaxed) {
  const Model model = cast::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float32_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_float32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_2,
                           cast::is_ignored_dynamic_output_shape_2,
                           cast::get_examples_float16_to_float32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float16_to_float32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_float32_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed,
                           cast::is_ignored_dynamic_output_shape_relaxed,
                           cast::get_examples_float16_to_float32_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float16_to_float32_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_float32_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float16_to_int32) {
  generated_tests::Execute(device,
                           cast::createTestModel_3,
                           cast::is_ignored_3,
                           cast::get_examples_float16_to_int32());
}

TEST_F(ValidationTest, cast_float16_to_int32) {
  const Model model = cast::createTestModel_3();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_int32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_3,
                           cast::is_ignored_dynamic_output_shape_3,
                           cast::get_examples_float16_to_int32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float16_to_int32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_int32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float16_to_quant8) {
  generated_tests::Execute(device,
                           cast::createTestModel_4,
                           cast::is_ignored_4,
                           cast::get_examples_float16_to_quant8());
}

TEST_F(ValidationTest, cast_float16_to_quant8) {
  const Model model = cast::createTestModel_4();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_4,
                           cast::is_ignored_dynamic_output_shape_4,
                           cast::get_examples_float16_to_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float16_to_quant8_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float32_to_float16) {
  generated_tests::Execute(device,
                           cast::createTestModel_5,
                           cast::is_ignored_5,
                           cast::get_examples_float32_to_float16());
}

TEST_F(ValidationTest, cast_float32_to_float16) {
  const Model model = cast::createTestModel_5();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float32_to_float16_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_2,
                           cast::is_ignored_relaxed_2,
                           cast::get_examples_float32_to_float16_relaxed());
}

TEST_F(ValidationTest, cast_float32_to_float16_relaxed) {
  const Model model = cast::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float16_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_5,
                           cast::is_ignored_dynamic_output_shape_5,
                           cast::get_examples_float32_to_float16_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float32_to_float16_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float16_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_float16_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_2,
                           cast::is_ignored_dynamic_output_shape_relaxed_2,
                           cast::get_examples_float32_to_float16_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float32_to_float16_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float16_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float32_to_float32) {
  generated_tests::Execute(device,
                           cast::createTestModel_6,
                           cast::is_ignored_6,
                           cast::get_examples_float32_to_float32());
}

TEST_F(ValidationTest, cast_float32_to_float32) {
  const Model model = cast::createTestModel_6();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float32_to_float32_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_3,
                           cast::is_ignored_relaxed_3,
                           cast::get_examples_float32_to_float32_relaxed());
}

TEST_F(ValidationTest, cast_float32_to_float32_relaxed) {
  const Model model = cast::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float32_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_float32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_6,
                           cast::is_ignored_dynamic_output_shape_6,
                           cast::get_examples_float32_to_float32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float32_to_float32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_float32_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_3,
                           cast::is_ignored_dynamic_output_shape_relaxed_3,
                           cast::get_examples_float32_to_float32_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float32_to_float32_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_float32_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float32_to_int32) {
  generated_tests::Execute(device,
                           cast::createTestModel_7,
                           cast::is_ignored_7,
                           cast::get_examples_float32_to_int32());
}

TEST_F(ValidationTest, cast_float32_to_int32) {
  const Model model = cast::createTestModel_7();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float32_to_int32_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_4,
                           cast::is_ignored_relaxed_4,
                           cast::get_examples_float32_to_int32_relaxed());
}

TEST_F(ValidationTest, cast_float32_to_int32_relaxed) {
  const Model model = cast::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_int32_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_int32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_7,
                           cast::is_ignored_dynamic_output_shape_7,
                           cast::get_examples_float32_to_int32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float32_to_int32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_int32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_int32_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_4,
                           cast::is_ignored_dynamic_output_shape_relaxed_4,
                           cast::get_examples_float32_to_int32_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float32_to_int32_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_int32_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float32_to_quant8) {
  generated_tests::Execute(device,
                           cast::createTestModel_8,
                           cast::is_ignored_8,
                           cast::get_examples_float32_to_quant8());
}

TEST_F(ValidationTest, cast_float32_to_quant8) {
  const Model model = cast::createTestModel_8();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float32_to_quant8_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_5,
                           cast::is_ignored_relaxed_5,
                           cast::get_examples_float32_to_quant8_relaxed());
}

TEST_F(ValidationTest, cast_float32_to_quant8_relaxed) {
  const Model model = cast::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_8,
                           cast::is_ignored_dynamic_output_shape_8,
                           cast::get_examples_float32_to_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float32_to_quant8_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_8();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_quant8_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_5,
                           cast::is_ignored_dynamic_output_shape_relaxed_5,
                           cast::get_examples_float32_to_quant8_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float32_to_quant8_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_int32_to_float16) {
  generated_tests::Execute(device,
                           cast::createTestModel_9,
                           cast::is_ignored_9,
                           cast::get_examples_int32_to_float16());
}

TEST_F(ValidationTest, cast_int32_to_float16) {
  const Model model = cast::createTestModel_9();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_9,
                           cast::is_ignored_dynamic_output_shape_9,
                           cast::get_examples_int32_to_float16_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_int32_to_float16_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_9();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float16_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_int32_to_float32) {
  generated_tests::Execute(device,
                           cast::createTestModel_10,
                           cast::is_ignored_10,
                           cast::get_examples_int32_to_float32());
}

TEST_F(ValidationTest, cast_int32_to_float32) {
  const Model model = cast::createTestModel_10();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_int32_to_float32_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_6,
                           cast::is_ignored_relaxed_6,
                           cast::get_examples_int32_to_float32_relaxed());
}

TEST_F(ValidationTest, cast_int32_to_float32_relaxed) {
  const Model model = cast::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float32_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_float32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_10,
                           cast::is_ignored_dynamic_output_shape_10,
                           cast::get_examples_int32_to_float32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_int32_to_float32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_10();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_float32_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_6,
                           cast::is_ignored_dynamic_output_shape_relaxed_6,
                           cast::get_examples_int32_to_float32_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_int32_to_float32_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_float32_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_int32_to_int32) {
  generated_tests::Execute(device,
                           cast::createTestModel_11,
                           cast::is_ignored_11,
                           cast::get_examples_int32_to_int32());
}

TEST_F(ValidationTest, cast_int32_to_int32) {
  const Model model = cast::createTestModel_11();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_int32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_11,
                           cast::is_ignored_dynamic_output_shape_11,
                           cast::get_examples_int32_to_int32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_int32_to_int32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_11();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_int32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_int32_to_quant8) {
  generated_tests::Execute(device,
                           cast::createTestModel_12,
                           cast::is_ignored_12,
                           cast::get_examples_int32_to_quant8());
}

TEST_F(ValidationTest, cast_int32_to_quant8) {
  const Model model = cast::createTestModel_12();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_12,
                           cast::is_ignored_dynamic_output_shape_12,
                           cast::get_examples_int32_to_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_int32_to_quant8_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_12();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_quant8_to_float16) {
  generated_tests::Execute(device,
                           cast::createTestModel_13,
                           cast::is_ignored_13,
                           cast::get_examples_quant8_to_float16());
}

TEST_F(ValidationTest, cast_quant8_to_float16) {
  const Model model = cast::createTestModel_13();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_quant8_to_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_13,
                           cast::is_ignored_dynamic_output_shape_13,
                           cast::get_examples_quant8_to_float16_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_quant8_to_float16_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_13();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float16_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_quant8_to_float32) {
  generated_tests::Execute(device,
                           cast::createTestModel_14,
                           cast::is_ignored_14,
                           cast::get_examples_quant8_to_float32());
}

TEST_F(ValidationTest, cast_quant8_to_float32) {
  const Model model = cast::createTestModel_14();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_quant8_to_float32_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_7,
                           cast::is_ignored_relaxed_7,
                           cast::get_examples_quant8_to_float32_relaxed());
}

TEST_F(ValidationTest, cast_quant8_to_float32_relaxed) {
  const Model model = cast::createTestModel_relaxed_7();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float32_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_quant8_to_float32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_14,
                           cast::is_ignored_dynamic_output_shape_14,
                           cast::get_examples_quant8_to_float32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_quant8_to_float32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_14();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_quant8_to_float32_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_7,
                           cast::is_ignored_dynamic_output_shape_relaxed_7,
                           cast::get_examples_quant8_to_float32_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_quant8_to_float32_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_7();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_float32_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_quant8_to_int32) {
  generated_tests::Execute(device,
                           cast::createTestModel_15,
                           cast::is_ignored_15,
                           cast::get_examples_quant8_to_int32());
}

TEST_F(ValidationTest, cast_quant8_to_int32) {
  const Model model = cast::createTestModel_15();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_quant8_to_int32_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_15,
                           cast::is_ignored_dynamic_output_shape_15,
                           cast::get_examples_quant8_to_int32_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_quant8_to_int32_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_15();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_int32_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_quant8_to_quant8) {
  generated_tests::Execute(device,
                           cast::createTestModel_16,
                           cast::is_ignored_16,
                           cast::get_examples_quant8_to_quant8());
}

TEST_F(ValidationTest, cast_quant8_to_quant8) {
  const Model model = cast::createTestModel_16();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_quant8_to_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_16,
                           cast::is_ignored_dynamic_output_shape_16,
                           cast::get_examples_quant8_to_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_quant8_to_quant8_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_16();
  const std::vector<Request> requests = createRequests(cast::get_examples_quant8_to_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float16_to_quant8_overflow) {
  generated_tests::Execute(device,
                           cast::createTestModel_17,
                           cast::is_ignored_17,
                           cast::get_examples_float16_to_quant8_overflow());
}

TEST_F(ValidationTest, cast_float16_to_quant8_overflow) {
  const Model model = cast::createTestModel_17();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_quant8_overflow());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float16_to_quant8_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_17,
                           cast::is_ignored_dynamic_output_shape_17,
                           cast::get_examples_float16_to_quant8_overflow_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float16_to_quant8_overflow_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_17();
  const std::vector<Request> requests = createRequests(cast::get_examples_float16_to_quant8_overflow_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_float32_to_quant8_overflow) {
  generated_tests::Execute(device,
                           cast::createTestModel_18,
                           cast::is_ignored_18,
                           cast::get_examples_float32_to_quant8_overflow());
}

TEST_F(ValidationTest, cast_float32_to_quant8_overflow) {
  const Model model = cast::createTestModel_18();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_overflow());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, cast_float32_to_quant8_overflow_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_relaxed_8,
                           cast::is_ignored_relaxed_8,
                           cast::get_examples_float32_to_quant8_overflow_relaxed());
}

TEST_F(ValidationTest, cast_float32_to_quant8_overflow_relaxed) {
  const Model model = cast::createTestModel_relaxed_8();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_overflow_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_quant8_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_18,
                           cast::is_ignored_dynamic_output_shape_18,
                           cast::get_examples_float32_to_quant8_overflow_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_float32_to_quant8_overflow_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_18();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_overflow_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_float32_to_quant8_overflow_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_relaxed_8,
                           cast::is_ignored_dynamic_output_shape_relaxed_8,
                           cast::get_examples_float32_to_quant8_overflow_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, cast_float32_to_quant8_overflow_dynamic_output_shape_relaxed) {
  const Model model = cast::createTestModel_dynamic_output_shape_relaxed_8();
  const std::vector<Request> requests = createRequests(cast::get_examples_float32_to_quant8_overflow_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, cast_int32_to_quant8_overflow) {
  generated_tests::Execute(device,
                           cast::createTestModel_19,
                           cast::is_ignored_19,
                           cast::get_examples_int32_to_quant8_overflow());
}

TEST_F(ValidationTest, cast_int32_to_quant8_overflow) {
  const Model model = cast::createTestModel_19();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_quant8_overflow());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, cast_int32_to_quant8_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           cast::createTestModel_dynamic_output_shape_19,
                           cast::is_ignored_dynamic_output_shape_19,
                           cast::get_examples_int32_to_quant8_overflow_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, cast_int32_to_quant8_overflow_dynamic_output_shape) {
  const Model model = cast::createTestModel_dynamic_output_shape_19();
  const std::vector<Request> requests = createRequests(cast::get_examples_int32_to_quant8_overflow_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: channel_shuffle.mod.py.
namespace channel_shuffle {
// Generated channel_shuffle test
#include "examples/channel_shuffle.example.cpp"
// Generated model constructor
#include "vts_models/channel_shuffle.model.cpp"
} // namespace channel_shuffle

TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis0,
                           channel_shuffle::is_ignored_dim4_axis0,
                           channel_shuffle::get_examples_dim4_axis0());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis0_neg,
                           channel_shuffle::is_ignored_dim4_axis0_neg,
                           channel_shuffle::get_examples_dim4_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis1,
                           channel_shuffle::is_ignored_dim4_axis1,
                           channel_shuffle::get_examples_dim4_axis1());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis1_neg,
                           channel_shuffle::is_ignored_dim4_axis1_neg,
                           channel_shuffle::get_examples_dim4_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis2,
                           channel_shuffle::is_ignored_dim4_axis2,
                           channel_shuffle::get_examples_dim4_axis2());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis2_neg,
                           channel_shuffle::is_ignored_dim4_axis2_neg,
                           channel_shuffle::get_examples_dim4_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis3,
                           channel_shuffle::is_ignored_dim4_axis3,
                           channel_shuffle::get_examples_dim4_axis3());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim4_axis3_neg,
                           channel_shuffle::is_ignored_dim4_axis3_neg,
                           channel_shuffle::get_examples_dim4_axis3_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis0,
                           channel_shuffle::is_ignored_dim3_axis0,
                           channel_shuffle::get_examples_dim3_axis0());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis0_neg,
                           channel_shuffle::is_ignored_dim3_axis0_neg,
                           channel_shuffle::get_examples_dim3_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis1,
                           channel_shuffle::is_ignored_dim3_axis1,
                           channel_shuffle::get_examples_dim3_axis1());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis1_neg,
                           channel_shuffle::is_ignored_dim3_axis1_neg,
                           channel_shuffle::get_examples_dim3_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis2,
                           channel_shuffle::is_ignored_dim3_axis2,
                           channel_shuffle::get_examples_dim3_axis2());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim3_axis2_neg,
                           channel_shuffle::is_ignored_dim3_axis2_neg,
                           channel_shuffle::get_examples_dim3_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim2_axis0,
                           channel_shuffle::is_ignored_dim2_axis0,
                           channel_shuffle::get_examples_dim2_axis0());
}

TEST_F(ValidationTest, channel_shuffle_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim2_axis0_neg,
                           channel_shuffle::is_ignored_dim2_axis0_neg,
                           channel_shuffle::get_examples_dim2_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim2_axis1,
                           channel_shuffle::is_ignored_dim2_axis1,
                           channel_shuffle::get_examples_dim2_axis1());
}

TEST_F(ValidationTest, channel_shuffle_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim2_axis1_neg,
                           channel_shuffle::is_ignored_dim2_axis1_neg,
                           channel_shuffle::get_examples_dim2_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim1_axis0,
                           channel_shuffle::is_ignored_dim1_axis0,
                           channel_shuffle::get_examples_dim1_axis0());
}

TEST_F(ValidationTest, channel_shuffle_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dim1_axis0_neg,
                           channel_shuffle::is_ignored_dim1_axis0_neg,
                           channel_shuffle::get_examples_dim1_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis0,
                           channel_shuffle::is_ignored_relaxed_dim4_axis0,
                           channel_shuffle::get_examples_relaxed_dim4_axis0());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis0_neg,
                           channel_shuffle::is_ignored_relaxed_dim4_axis0_neg,
                           channel_shuffle::get_examples_relaxed_dim4_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis1,
                           channel_shuffle::is_ignored_relaxed_dim4_axis1,
                           channel_shuffle::get_examples_relaxed_dim4_axis1());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis1_neg,
                           channel_shuffle::is_ignored_relaxed_dim4_axis1_neg,
                           channel_shuffle::get_examples_relaxed_dim4_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis2,
                           channel_shuffle::is_ignored_relaxed_dim4_axis2,
                           channel_shuffle::get_examples_relaxed_dim4_axis2());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis2_neg,
                           channel_shuffle::is_ignored_relaxed_dim4_axis2_neg,
                           channel_shuffle::get_examples_relaxed_dim4_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis3,
                           channel_shuffle::is_ignored_relaxed_dim4_axis3,
                           channel_shuffle::get_examples_relaxed_dim4_axis3());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim4_axis3_neg,
                           channel_shuffle::is_ignored_relaxed_dim4_axis3_neg,
                           channel_shuffle::get_examples_relaxed_dim4_axis3_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis0,
                           channel_shuffle::is_ignored_relaxed_dim3_axis0,
                           channel_shuffle::get_examples_relaxed_dim3_axis0());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis0_neg,
                           channel_shuffle::is_ignored_relaxed_dim3_axis0_neg,
                           channel_shuffle::get_examples_relaxed_dim3_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis1,
                           channel_shuffle::is_ignored_relaxed_dim3_axis1,
                           channel_shuffle::get_examples_relaxed_dim3_axis1());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis1_neg,
                           channel_shuffle::is_ignored_relaxed_dim3_axis1_neg,
                           channel_shuffle::get_examples_relaxed_dim3_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis2,
                           channel_shuffle::is_ignored_relaxed_dim3_axis2,
                           channel_shuffle::get_examples_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim3_axis2_neg,
                           channel_shuffle::is_ignored_relaxed_dim3_axis2_neg,
                           channel_shuffle::get_examples_relaxed_dim3_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim2_axis0,
                           channel_shuffle::is_ignored_relaxed_dim2_axis0,
                           channel_shuffle::get_examples_relaxed_dim2_axis0());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim2_axis0_neg,
                           channel_shuffle::is_ignored_relaxed_dim2_axis0_neg,
                           channel_shuffle::get_examples_relaxed_dim2_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim2_axis1,
                           channel_shuffle::is_ignored_relaxed_dim2_axis1,
                           channel_shuffle::get_examples_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim2_axis1_neg,
                           channel_shuffle::is_ignored_relaxed_dim2_axis1_neg,
                           channel_shuffle::get_examples_relaxed_dim2_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim1_axis0,
                           channel_shuffle::is_ignored_relaxed_dim1_axis0,
                           channel_shuffle::get_examples_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_relaxed_dim1_axis0_neg,
                           channel_shuffle::is_ignored_relaxed_dim1_axis0_neg,
                           channel_shuffle::get_examples_relaxed_dim1_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_relaxed_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis0,
                           channel_shuffle::is_ignored_quant8_dim4_axis0,
                           channel_shuffle::get_examples_quant8_dim4_axis0());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis0_neg,
                           channel_shuffle::is_ignored_quant8_dim4_axis0_neg,
                           channel_shuffle::get_examples_quant8_dim4_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis1,
                           channel_shuffle::is_ignored_quant8_dim4_axis1,
                           channel_shuffle::get_examples_quant8_dim4_axis1());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis1_neg,
                           channel_shuffle::is_ignored_quant8_dim4_axis1_neg,
                           channel_shuffle::get_examples_quant8_dim4_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis2,
                           channel_shuffle::is_ignored_quant8_dim4_axis2,
                           channel_shuffle::get_examples_quant8_dim4_axis2());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis2_neg,
                           channel_shuffle::is_ignored_quant8_dim4_axis2_neg,
                           channel_shuffle::get_examples_quant8_dim4_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis3,
                           channel_shuffle::is_ignored_quant8_dim4_axis3,
                           channel_shuffle::get_examples_quant8_dim4_axis3());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim4_axis3_neg,
                           channel_shuffle::is_ignored_quant8_dim4_axis3_neg,
                           channel_shuffle::get_examples_quant8_dim4_axis3_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis0,
                           channel_shuffle::is_ignored_quant8_dim3_axis0,
                           channel_shuffle::get_examples_quant8_dim3_axis0());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis0_neg,
                           channel_shuffle::is_ignored_quant8_dim3_axis0_neg,
                           channel_shuffle::get_examples_quant8_dim3_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis1,
                           channel_shuffle::is_ignored_quant8_dim3_axis1,
                           channel_shuffle::get_examples_quant8_dim3_axis1());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis1_neg,
                           channel_shuffle::is_ignored_quant8_dim3_axis1_neg,
                           channel_shuffle::get_examples_quant8_dim3_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis2,
                           channel_shuffle::is_ignored_quant8_dim3_axis2,
                           channel_shuffle::get_examples_quant8_dim3_axis2());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim3_axis2_neg,
                           channel_shuffle::is_ignored_quant8_dim3_axis2_neg,
                           channel_shuffle::get_examples_quant8_dim3_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim2_axis0,
                           channel_shuffle::is_ignored_quant8_dim2_axis0,
                           channel_shuffle::get_examples_quant8_dim2_axis0());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_quant8_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim2_axis0_neg,
                           channel_shuffle::is_ignored_quant8_dim2_axis0_neg,
                           channel_shuffle::get_examples_quant8_dim2_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim2_axis1,
                           channel_shuffle::is_ignored_quant8_dim2_axis1,
                           channel_shuffle::get_examples_quant8_dim2_axis1());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_quant8_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim2_axis1_neg,
                           channel_shuffle::is_ignored_quant8_dim2_axis1_neg,
                           channel_shuffle::get_examples_quant8_dim2_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim1_axis0,
                           channel_shuffle::is_ignored_quant8_dim1_axis0,
                           channel_shuffle::get_examples_quant8_dim1_axis0());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_quant8_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_quant8_dim1_axis0_neg,
                           channel_shuffle::is_ignored_quant8_dim1_axis0_neg,
                           channel_shuffle::get_examples_quant8_dim1_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_quant8_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_quant8_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_quant8_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis0,
                           channel_shuffle::is_ignored_float16_dim4_axis0,
                           channel_shuffle::get_examples_float16_dim4_axis0());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis0_neg,
                           channel_shuffle::is_ignored_float16_dim4_axis0_neg,
                           channel_shuffle::get_examples_float16_dim4_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis1,
                           channel_shuffle::is_ignored_float16_dim4_axis1,
                           channel_shuffle::get_examples_float16_dim4_axis1());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis1_neg,
                           channel_shuffle::is_ignored_float16_dim4_axis1_neg,
                           channel_shuffle::get_examples_float16_dim4_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis2,
                           channel_shuffle::is_ignored_float16_dim4_axis2,
                           channel_shuffle::get_examples_float16_dim4_axis2());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis2_neg,
                           channel_shuffle::is_ignored_float16_dim4_axis2_neg,
                           channel_shuffle::get_examples_float16_dim4_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis3,
                           channel_shuffle::is_ignored_float16_dim4_axis3,
                           channel_shuffle::get_examples_float16_dim4_axis3());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim4_axis3_neg,
                           channel_shuffle::is_ignored_float16_dim4_axis3_neg,
                           channel_shuffle::get_examples_float16_dim4_axis3_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis0,
                           channel_shuffle::is_ignored_float16_dim3_axis0,
                           channel_shuffle::get_examples_float16_dim3_axis0());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis0_neg,
                           channel_shuffle::is_ignored_float16_dim3_axis0_neg,
                           channel_shuffle::get_examples_float16_dim3_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis1,
                           channel_shuffle::is_ignored_float16_dim3_axis1,
                           channel_shuffle::get_examples_float16_dim3_axis1());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis1_neg,
                           channel_shuffle::is_ignored_float16_dim3_axis1_neg,
                           channel_shuffle::get_examples_float16_dim3_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis2,
                           channel_shuffle::is_ignored_float16_dim3_axis2,
                           channel_shuffle::get_examples_float16_dim3_axis2());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim3_axis2_neg,
                           channel_shuffle::is_ignored_float16_dim3_axis2_neg,
                           channel_shuffle::get_examples_float16_dim3_axis2_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim2_axis0,
                           channel_shuffle::is_ignored_float16_dim2_axis0,
                           channel_shuffle::get_examples_float16_dim2_axis0());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_float16_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim2_axis0_neg,
                           channel_shuffle::is_ignored_float16_dim2_axis0_neg,
                           channel_shuffle::get_examples_float16_dim2_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim2_axis1,
                           channel_shuffle::is_ignored_float16_dim2_axis1,
                           channel_shuffle::get_examples_float16_dim2_axis1());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_float16_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim2_axis1_neg,
                           channel_shuffle::is_ignored_float16_dim2_axis1_neg,
                           channel_shuffle::get_examples_float16_dim2_axis1_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim1_axis0,
                           channel_shuffle::is_ignored_float16_dim1_axis0,
                           channel_shuffle::get_examples_float16_dim1_axis0());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, channel_shuffle_float16_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_float16_dim1_axis0_neg,
                           channel_shuffle::is_ignored_float16_dim1_axis0_neg,
                           channel_shuffle::get_examples_float16_dim1_axis0_neg());
}

TEST_F(ValidationTest, channel_shuffle_float16_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_float16_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_float16_dim1_axis0_neg());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis3,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis3,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis3(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis3_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim4_axis3_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim3_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim2_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_dim2_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim2_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim2_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim2_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim1_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim1_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_dim1_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_dim1_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis3,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis3,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis3(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim2_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim2_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim1_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim1_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis3,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis3,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis3(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis3_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim4_axis3_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim3_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim2_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim2_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim2_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim2_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim1_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim1_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim1_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_quant8_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim1_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_quant8_dim1_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_quant8_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_quant8_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_quant8_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_quant8_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis3) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis3,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis3,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis3(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis3) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis3();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis3_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim4_axis3_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim4_axis3_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis2,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis2,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis2(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis2) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis2_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim3_axis2_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim3_axis2_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim2_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim2_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis1) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis1,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim2_axis1,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis1(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis1) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis1();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis1_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim2_axis1_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim2_axis1_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim1_axis0,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim1_axis0,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim1_axis0(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim1_axis0) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, channel_shuffle_dynamic_output_shape_float16_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           channel_shuffle::createTestModel_dynamic_output_shape_float16_dim1_axis0_neg,
                           channel_shuffle::is_ignored_dynamic_output_shape_float16_dim1_axis0_neg,
                           channel_shuffle::get_examples_dynamic_output_shape_float16_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, channel_shuffle_dynamic_output_shape_float16_dim1_axis0_neg) {
  const Model model = channel_shuffle::createTestModel_dynamic_output_shape_float16_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(channel_shuffle::get_examples_dynamic_output_shape_float16_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float16_1.mod.py.
namespace concat_float16_1 {
// Generated concat_float16_1 test
#include "examples/concat_float16_1.example.cpp"
// Generated model constructor
#include "vts_models/concat_float16_1.model.cpp"
} // namespace concat_float16_1

TEST_F(NeuralnetworksHidlTest, concat_float16_1) {
  generated_tests::Execute(device,
                           concat_float16_1::createTestModel,
                           concat_float16_1::is_ignored,
                           concat_float16_1::get_examples());
}

TEST_F(ValidationTest, concat_float16_1) {
  const Model model = concat_float16_1::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float16_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float16_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float16_1::createTestModel_dynamic_output_shape,
                           concat_float16_1::is_ignored_dynamic_output_shape,
                           concat_float16_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float16_1_dynamic_output_shape) {
  const Model model = concat_float16_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float16_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float16_2.mod.py.
namespace concat_float16_2 {
// Generated concat_float16_2 test
#include "examples/concat_float16_2.example.cpp"
// Generated model constructor
#include "vts_models/concat_float16_2.model.cpp"
} // namespace concat_float16_2

TEST_F(NeuralnetworksHidlTest, concat_float16_2) {
  generated_tests::Execute(device,
                           concat_float16_2::createTestModel,
                           concat_float16_2::is_ignored,
                           concat_float16_2::get_examples());
}

TEST_F(ValidationTest, concat_float16_2) {
  const Model model = concat_float16_2::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float16_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float16_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float16_2::createTestModel_dynamic_output_shape,
                           concat_float16_2::is_ignored_dynamic_output_shape,
                           concat_float16_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float16_2_dynamic_output_shape) {
  const Model model = concat_float16_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float16_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float16_3.mod.py.
namespace concat_float16_3 {
// Generated concat_float16_3 test
#include "examples/concat_float16_3.example.cpp"
// Generated model constructor
#include "vts_models/concat_float16_3.model.cpp"
} // namespace concat_float16_3

TEST_F(NeuralnetworksHidlTest, concat_float16_3) {
  generated_tests::Execute(device,
                           concat_float16_3::createTestModel,
                           concat_float16_3::is_ignored,
                           concat_float16_3::get_examples());
}

TEST_F(ValidationTest, concat_float16_3) {
  const Model model = concat_float16_3::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float16_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float16_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float16_3::createTestModel_dynamic_output_shape,
                           concat_float16_3::is_ignored_dynamic_output_shape,
                           concat_float16_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float16_3_dynamic_output_shape) {
  const Model model = concat_float16_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float16_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_mixed_quant.mod.py.
namespace concat_mixed_quant {
// Generated concat_mixed_quant test
#include "examples/concat_mixed_quant.example.cpp"
// Generated model constructor
#include "vts_models/concat_mixed_quant.model.cpp"
} // namespace concat_mixed_quant

TEST_F(NeuralnetworksHidlTest, concat_mixed_quant_quant8) {
  generated_tests::Execute(device,
                           concat_mixed_quant::createTestModel_quant8,
                           concat_mixed_quant::is_ignored_quant8,
                           concat_mixed_quant::get_examples_quant8());
}

TEST_F(ValidationTest, concat_mixed_quant_quant8) {
  const Model model = concat_mixed_quant::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(concat_mixed_quant::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_mixed_quant_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           concat_mixed_quant::createTestModel_dynamic_output_shape_quant8,
                           concat_mixed_quant::is_ignored_dynamic_output_shape_quant8,
                           concat_mixed_quant::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, concat_mixed_quant_dynamic_output_shape_quant8) {
  const Model model = concat_mixed_quant::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(concat_mixed_quant::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, concat_mixed_quant_quant8_2) {
  generated_tests::Execute(device,
                           concat_mixed_quant::createTestModel_quant8_2,
                           concat_mixed_quant::is_ignored_quant8_2,
                           concat_mixed_quant::get_examples_quant8_2());
}

TEST_F(ValidationTest, concat_mixed_quant_quant8_2) {
  const Model model = concat_mixed_quant::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(concat_mixed_quant::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_mixed_quant_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           concat_mixed_quant::createTestModel_dynamic_output_shape_quant8_2,
                           concat_mixed_quant::is_ignored_dynamic_output_shape_quant8_2,
                           concat_mixed_quant::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, concat_mixed_quant_dynamic_output_shape_quant8_2) {
  const Model model = concat_mixed_quant::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(concat_mixed_quant::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_zero_sized.mod.py.
namespace concat_zero_sized {
// Generated concat_zero_sized test
#include "examples/concat_zero_sized.example.cpp"
// Generated model constructor
#include "vts_models/concat_zero_sized.model.cpp"
} // namespace concat_zero_sized

TEST_F(NeuralnetworksHidlTest, concat_zero_sized) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel,
                           concat_zero_sized::is_ignored,
                           concat_zero_sized::get_examples());
}

TEST_F(ValidationTest, concat_zero_sized) {
  const Model model = concat_zero_sized::createTestModel();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_relaxed,
                           concat_zero_sized::is_ignored_relaxed,
                           concat_zero_sized::get_examples_relaxed());
}

TEST_F(ValidationTest, concat_zero_sized_relaxed) {
  const Model model = concat_zero_sized::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_quant8) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_quant8,
                           concat_zero_sized::is_ignored_quant8,
                           concat_zero_sized::get_examples_quant8());
}

TEST_F(ValidationTest, concat_zero_sized_quant8) {
  const Model model = concat_zero_sized::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_float16) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_float16,
                           concat_zero_sized::is_ignored_float16,
                           concat_zero_sized::get_examples_float16());
}

TEST_F(ValidationTest, concat_zero_sized_float16) {
  const Model model = concat_zero_sized::createTestModel_float16();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape,
                           concat_zero_sized::is_ignored_dynamic_output_shape,
                           concat_zero_sized::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_relaxed,
                           concat_zero_sized::is_ignored_dynamic_output_shape_relaxed,
                           concat_zero_sized::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_quant8,
                           concat_zero_sized::is_ignored_dynamic_output_shape_quant8,
                           concat_zero_sized::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_quant8) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_float16,
                           concat_zero_sized::is_ignored_dynamic_output_shape_float16,
                           concat_zero_sized::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_float16) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, concat_zero_sized_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_2,
                           concat_zero_sized::is_ignored_2,
                           concat_zero_sized::get_examples_2());
}

TEST_F(ValidationTest, concat_zero_sized_2) {
  const Model model = concat_zero_sized::createTestModel_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_relaxed_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_relaxed_2,
                           concat_zero_sized::is_ignored_relaxed_2,
                           concat_zero_sized::get_examples_relaxed_2());
}

TEST_F(ValidationTest, concat_zero_sized_relaxed_2) {
  const Model model = concat_zero_sized::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_quant8_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_quant8_2,
                           concat_zero_sized::is_ignored_quant8_2,
                           concat_zero_sized::get_examples_quant8_2());
}

TEST_F(ValidationTest, concat_zero_sized_quant8_2) {
  const Model model = concat_zero_sized::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, concat_zero_sized_float16_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_float16_2,
                           concat_zero_sized::is_ignored_float16_2,
                           concat_zero_sized::get_examples_float16_2());
}

TEST_F(ValidationTest, concat_zero_sized_float16_2) {
  const Model model = concat_zero_sized::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_2,
                           concat_zero_sized::is_ignored_dynamic_output_shape_2,
                           concat_zero_sized::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_2) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_relaxed_2,
                           concat_zero_sized::is_ignored_dynamic_output_shape_relaxed_2,
                           concat_zero_sized::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_relaxed_2) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_quant8_2,
                           concat_zero_sized::is_ignored_dynamic_output_shape_quant8_2,
                           concat_zero_sized::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_quant8_2) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_zero_sized_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           concat_zero_sized::createTestModel_dynamic_output_shape_float16_2,
                           concat_zero_sized::is_ignored_dynamic_output_shape_float16_2,
                           concat_zero_sized::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, concat_zero_sized_dynamic_output_shape_float16_2) {
  const Model model = concat_zero_sized::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(concat_zero_sized::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv2d_dilation.mod.py.
namespace conv2d_dilation {
// Generated conv2d_dilation test
#include "examples/conv2d_dilation.example.cpp"
// Generated model constructor
#include "vts_models/conv2d_dilation.model.cpp"
} // namespace conv2d_dilation

TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc,
                           conv2d_dilation::is_ignored_nhwc,
                           conv2d_dilation::get_examples_nhwc());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc) {
  const Model model = conv2d_dilation::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_relaxed,
                           conv2d_dilation::is_ignored_nhwc_relaxed,
                           conv2d_dilation::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_quant8,
                           conv2d_dilation::is_ignored_nhwc_quant8,
                           conv2d_dilation::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_quant8) {
  const Model model = conv2d_dilation::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_float16,
                           conv2d_dilation::is_ignored_nhwc_float16,
                           conv2d_dilation::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_float16) {
  const Model model = conv2d_dilation::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input,
                           conv2d_dilation::get_examples_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_float16,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_float16,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw,
                           conv2d_dilation::is_ignored_nchw,
                           conv2d_dilation::get_examples_nchw());
}

TEST_F(ValidationTest, conv2d_dilation_nchw) {
  const Model model = conv2d_dilation::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_relaxed,
                           conv2d_dilation::is_ignored_nchw_relaxed,
                           conv2d_dilation::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_quant8,
                           conv2d_dilation::is_ignored_nchw_quant8,
                           conv2d_dilation::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_quant8) {
  const Model model = conv2d_dilation::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_float16,
                           conv2d_dilation::is_ignored_nchw_float16,
                           conv2d_dilation::get_examples_nchw_float16());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_float16) {
  const Model model = conv2d_dilation::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input,
                           conv2d_dilation::is_ignored_nchw_weight_as_input,
                           conv2d_dilation::get_examples_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed,
                           conv2d_dilation::get_examples_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_quant8,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_quant8,
                           conv2d_dilation::get_examples_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_float16,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_float16,
                           conv2d_dilation::get_examples_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_2,
                           conv2d_dilation::is_ignored_nhwc_2,
                           conv2d_dilation::get_examples_nhwc_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_relaxed_2,
                           conv2d_dilation::is_ignored_nhwc_relaxed_2,
                           conv2d_dilation::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_quant8_2,
                           conv2d_dilation::is_ignored_nhwc_quant8_2,
                           conv2d_dilation::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_float16_2,
                           conv2d_dilation::is_ignored_nhwc_float16_2,
                           conv2d_dilation::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_2,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_2,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_2,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_2,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_2,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_2,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_2,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_2,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_2,
                           conv2d_dilation::is_ignored_nchw_2,
                           conv2d_dilation::get_examples_nchw_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_relaxed_2,
                           conv2d_dilation::is_ignored_nchw_relaxed_2,
                           conv2d_dilation::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_quant8_2,
                           conv2d_dilation::is_ignored_nchw_quant8_2,
                           conv2d_dilation::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_float16_2,
                           conv2d_dilation::is_ignored_nchw_float16_2,
                           conv2d_dilation::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_2,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_2,
                           conv2d_dilation::get_examples_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_2,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_2,
                           conv2d_dilation::get_examples_nchw_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_2,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_2,
                           conv2d_dilation::get_examples_nchw_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_float16_2,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_float16_2,
                           conv2d_dilation::get_examples_nchw_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_3,
                           conv2d_dilation::is_ignored_nhwc_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc) {
  const Model model = conv2d_dilation::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_relaxed_3,
                           conv2d_dilation::is_ignored_nhwc_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_quant8_3,
                           conv2d_dilation::is_ignored_nhwc_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_quant8) {
  const Model model = conv2d_dilation::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_float16_3,
                           conv2d_dilation::is_ignored_nhwc_float16_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_float16) {
  const Model model = conv2d_dilation::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_3,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_3,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_3,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_3,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_3,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_3,
                           conv2d_dilation::is_ignored_nchw_3,
                           conv2d_dilation::get_examples_valid_padding_nchw());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw) {
  const Model model = conv2d_dilation::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_relaxed_3,
                           conv2d_dilation::is_ignored_nchw_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_quant8_3,
                           conv2d_dilation::is_ignored_nchw_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_quant8) {
  const Model model = conv2d_dilation::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_float16_3,
                           conv2d_dilation::is_ignored_nchw_float16_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_float16());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_float16) {
  const Model model = conv2d_dilation::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_3,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_3,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_3,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_float16_3,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_float16_3,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_3,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_3,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_4,
                           conv2d_dilation::is_ignored_nhwc_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_relaxed_4,
                           conv2d_dilation::is_ignored_nhwc_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_quant8_4,
                           conv2d_dilation::is_ignored_nhwc_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_float16_4,
                           conv2d_dilation::is_ignored_nhwc_float16_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_4,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_4,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_4,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_4,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_4,
                           conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_4,
                           conv2d_dilation::is_ignored_nchw_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_relaxed_4,
                           conv2d_dilation::is_ignored_nchw_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_quant8_4,
                           conv2d_dilation::is_ignored_nchw_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_float16_4,
                           conv2d_dilation::is_ignored_nchw_float16_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_4,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_4,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_4,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_valid_padding_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_float16_4,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_float16_4,
                           conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_4,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_4,
                           conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_4();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_5,
                           conv2d_dilation::is_ignored_nhwc_5,
                           conv2d_dilation::get_examples_nhwc_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_relaxed_5,
                           conv2d_dilation::is_ignored_nhwc_relaxed_5,
                           conv2d_dilation::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_quant8_5,
                           conv2d_dilation::is_ignored_nhwc_quant8_5,
                           conv2d_dilation::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_float16_5,
                           conv2d_dilation::is_ignored_nhwc_float16_5,
                           conv2d_dilation::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_float16_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_5,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_5,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_5,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_5,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_5,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_5,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_quant8_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nhwc_weight_as_input_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_5,
                           conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_5,
                           conv2d_dilation::get_examples_nhwc_weight_as_input_float16_3());
}

TEST_F(ValidationTest, conv2d_dilation_nhwc_weight_as_input_float16_3) {
  const Model model = conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nhwc_weight_as_input_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_5,
                           conv2d_dilation::is_ignored_nchw_5,
                           conv2d_dilation::get_examples_nchw_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_relaxed_5,
                           conv2d_dilation::is_ignored_nchw_relaxed_5,
                           conv2d_dilation::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_quant8_5,
                           conv2d_dilation::is_ignored_nchw_quant8_5,
                           conv2d_dilation::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_float16_5,
                           conv2d_dilation::is_ignored_nchw_float16_5,
                           conv2d_dilation::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_float16_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_5,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_5,
                           conv2d_dilation::get_examples_nchw_weight_as_input_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_5,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_5,
                           conv2d_dilation::get_examples_nchw_weight_as_input_relaxed_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_5,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_5,
                           conv2d_dilation::get_examples_nchw_weight_as_input_quant8_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_dilation_nchw_weight_as_input_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_nchw_weight_as_input_float16_5,
                           conv2d_dilation::is_ignored_nchw_weight_as_input_float16_5,
                           conv2d_dilation::get_examples_nchw_weight_as_input_float16_3());
}

TEST_F(ValidationTest, conv2d_dilation_nchw_weight_as_input_float16_3) {
  const Model model = conv2d_dilation::createTestModel_nchw_weight_as_input_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_nchw_weight_as_input_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_float16_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_float16_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16_3) {
  generated_tests::Execute(device,
                           conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_5,
                           conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_5,
                           conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_3(), true);
}

TEST_F(ValidationTest, conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16_3) {
  const Model model = conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_5();
  const std::vector<Request> requests = createRequests(conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_3());
  validateEverything(model, requests);
}


#endif
// Generated from: conv2d_per_channel.mod.py.
namespace conv2d_per_channel {
// Generated conv2d_per_channel test
#include "examples/conv2d_per_channel.example.cpp"
// Generated model constructor
#include "vts_models/conv2d_per_channel.model.cpp"
} // namespace conv2d_per_channel

TEST_F(NeuralnetworksHidlTest, conv2d_per_channel) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel,
                           conv2d_per_channel::is_ignored,
                           conv2d_per_channel::get_examples());
}

TEST_F(ValidationTest, conv2d_per_channel) {
  const Model model = conv2d_per_channel::createTestModel();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_weight_as_input,
                           conv2d_per_channel::is_ignored_weight_as_input,
                           conv2d_per_channel::get_examples_weight_as_input());
}

TEST_F(ValidationTest, conv2d_per_channel_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_dynamic_output_shape,
                           conv2d_per_channel::is_ignored_dynamic_output_shape,
                           conv2d_per_channel::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_dynamic_output_shape) {
  const Model model = conv2d_per_channel::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_dynamic_output_shape_weight_as_input,
                           conv2d_per_channel::is_ignored_dynamic_output_shape_weight_as_input,
                           conv2d_per_channel::get_examples_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_dynamic_output_shape_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_layouts_nhwc) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_nhwc,
                           conv2d_per_channel::is_ignored_layouts_nhwc,
                           conv2d_per_channel::get_examples_layouts_nhwc());
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_nhwc) {
  const Model model = conv2d_per_channel::createTestModel_layouts_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_layouts_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_nhwc_weight_as_input,
                           conv2d_per_channel::is_ignored_layouts_nhwc_weight_as_input,
                           conv2d_per_channel::get_examples_layouts_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_nhwc_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_layouts_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_layouts_nchw) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_nchw,
                           conv2d_per_channel::is_ignored_layouts_nchw,
                           conv2d_per_channel::get_examples_layouts_nchw());
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_nchw) {
  const Model model = conv2d_per_channel::createTestModel_layouts_nchw();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_layouts_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_nchw_weight_as_input,
                           conv2d_per_channel::is_ignored_layouts_nchw_weight_as_input,
                           conv2d_per_channel::get_examples_layouts_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_nchw_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_layouts_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_nchw_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_layouts_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nhwc,
                           conv2d_per_channel::is_ignored_layouts_dynamic_output_shape_nhwc,
                           conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_dynamic_output_shape_nhwc) {
  const Model model = conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_layouts_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_per_channel::is_ignored_layouts_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_layouts_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nchw,
                           conv2d_per_channel::is_ignored_layouts_dynamic_output_shape_nchw,
                           conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_dynamic_output_shape_nchw) {
  const Model model = conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_layouts_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_per_channel::is_ignored_layouts_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_layouts_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_per_channel::createTestModel_layouts_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_layouts_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_zero_sized_nhwc,
                           conv2d_per_channel::is_ignored_zero_sized_nhwc,
                           conv2d_per_channel::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, conv2d_per_channel_zero_sized_nhwc) {
  const Model model = conv2d_per_channel::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_per_channel_zero_sized_nchw) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_zero_sized_nchw,
                           conv2d_per_channel::is_ignored_zero_sized_nchw,
                           conv2d_per_channel::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, conv2d_per_channel_zero_sized_nchw) {
  const Model model = conv2d_per_channel::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           conv2d_per_channel::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           conv2d_per_channel::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = conv2d_per_channel::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_per_channel_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_per_channel::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           conv2d_per_channel::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           conv2d_per_channel::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_per_channel_zero_sized_dynamic_output_shape_nchw) {
  const Model model = conv2d_per_channel::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_per_channel::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
// Generated from: conv2d_v1_2.mod.py.
namespace conv2d_v1_2 {
// Generated conv2d_v1_2 test
#include "examples/conv2d_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/conv2d_v1_2.model.cpp"
} // namespace conv2d_v1_2

TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc,
                           conv2d_v1_2::is_ignored_nhwc,
                           conv2d_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_nhwc_relaxed,
                           conv2d_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_quant8,
                           conv2d_v1_2::is_ignored_nhwc_quant8,
                           conv2d_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_nhwc_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_float16,
                           conv2d_v1_2::is_ignored_nhwc_float16,
                           conv2d_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw,
                           conv2d_v1_2::is_ignored_nchw,
                           conv2d_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw) {
  const Model model = conv2d_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_relaxed,
                           conv2d_v1_2::is_ignored_nchw_relaxed,
                           conv2d_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_quant8,
                           conv2d_v1_2::is_ignored_nchw_quant8,
                           conv2d_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_nchw_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_float16,
                           conv2d_v1_2::is_ignored_nchw_float16,
                           conv2d_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_2,
                           conv2d_v1_2::is_ignored_nhwc_2,
                           conv2d_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_relaxed_2,
                           conv2d_v1_2::is_ignored_nhwc_relaxed_2,
                           conv2d_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_quant8_2,
                           conv2d_v1_2::is_ignored_nhwc_quant8_2,
                           conv2d_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_channelQuant8_2,
                           conv2d_v1_2::is_ignored_nhwc_channelQuant8_2,
                           conv2d_v1_2::get_examples_nhwc_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_float16_2,
                           conv2d_v1_2::is_ignored_nhwc_float16_2,
                           conv2d_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_2,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_2,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed_2,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_relaxed_2,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8_2,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_quant8_2,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16_2,
                           conv2d_v1_2::is_ignored_nhwc_weight_as_input_float16_2,
                           conv2d_v1_2::get_examples_nhwc_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_2,
                           conv2d_v1_2::is_ignored_nchw_2,
                           conv2d_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_relaxed_2,
                           conv2d_v1_2::is_ignored_nchw_relaxed_2,
                           conv2d_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_quant8_2,
                           conv2d_v1_2::is_ignored_nchw_quant8_2,
                           conv2d_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_channelQuant8_2,
                           conv2d_v1_2::is_ignored_nchw_channelQuant8_2,
                           conv2d_v1_2::get_examples_nchw_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_float16_2,
                           conv2d_v1_2::is_ignored_nchw_float16_2,
                           conv2d_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_2,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_2,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed_2,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_relaxed_2,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8_2,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_quant8_2,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_nchw_weight_as_input_float16_2,
                           conv2d_v1_2::is_ignored_nchw_weight_as_input_float16_2,
                           conv2d_v1_2::get_examples_nchw_weight_as_input_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_channelQuant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_channelQuant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc,
                           conv2d_v1_2::is_ignored_channel_nhwc,
                           conv2d_v1_2::get_examples_channel_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_channel_nhwc_relaxed,
                           conv2d_v1_2::get_examples_channel_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_quant8,
                           conv2d_v1_2::is_ignored_channel_nhwc_quant8,
                           conv2d_v1_2::get_examples_channel_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_channel_nhwc_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_float16,
                           conv2d_v1_2::is_ignored_channel_nhwc_float16,
                           conv2d_v1_2::get_examples_channel_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_channel_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_channel_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_channel_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_channel_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_channel_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw,
                           conv2d_v1_2::is_ignored_channel_nchw,
                           conv2d_v1_2::get_examples_channel_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_relaxed,
                           conv2d_v1_2::is_ignored_channel_nchw_relaxed,
                           conv2d_v1_2::get_examples_channel_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_quant8,
                           conv2d_v1_2::is_ignored_channel_nchw_quant8,
                           conv2d_v1_2::get_examples_channel_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_channel_nchw_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_float16,
                           conv2d_v1_2::is_ignored_channel_nchw_float16,
                           conv2d_v1_2::get_examples_channel_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_channel_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_channel_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_channel_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_channel_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_channel_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_channel_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_channel_nchw_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_channel_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_channel_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_channel_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_channel_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_channel_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_channel_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc,
                           conv2d_v1_2::is_ignored_large_nhwc,
                           conv2d_v1_2::get_examples_large_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_large_nhwc_relaxed,
                           conv2d_v1_2::get_examples_large_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_quant8,
                           conv2d_v1_2::is_ignored_large_nhwc_quant8,
                           conv2d_v1_2::get_examples_large_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_large_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_large_nhwc_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_nhwc_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_nhwc_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_float16,
                           conv2d_v1_2::is_ignored_large_nhwc_float16,
                           conv2d_v1_2::get_examples_large_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw,
                           conv2d_v1_2::is_ignored_large_nchw,
                           conv2d_v1_2::get_examples_large_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_relaxed,
                           conv2d_v1_2::is_ignored_large_nchw_relaxed,
                           conv2d_v1_2::get_examples_large_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_quant8,
                           conv2d_v1_2::is_ignored_large_nchw_quant8,
                           conv2d_v1_2::get_examples_large_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_large_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_large_nchw_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_nchw_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_nchw_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_float16,
                           conv2d_v1_2::is_ignored_large_nchw_float16,
                           conv2d_v1_2::get_examples_large_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_large_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_large_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_large_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_float16,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_channelQuant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_quant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_float16,
                           conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nhwc,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nhwc_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nhwc_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nchw,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nchw) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nchw_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_SAME_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_nchw_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_SAME_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_SAME_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_SAME_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_SAME_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nhwc,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nhwc_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nhwc_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nchw,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nchw) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nchw_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_1_H3_W2_VALID_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_nchw_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_1_H3_W2_VALID_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_1_H3_W2_VALID_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_1_H3_W2_VALID_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_1_H3_W2_VALID_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nhwc,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nhwc_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nhwc_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nchw,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nchw) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nchw_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_SAME_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_nchw_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_SAME_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_SAME_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_SAME_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_SAME_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nhwc,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nhwc_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nhwc_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nchw,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nchw) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nchw_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_3_H3_W2_VALID_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_nchw_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_3_H3_W2_VALID_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_3_H3_W2_VALID_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_3_H3_W2_VALID_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_3_H3_W2_VALID_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_quant_output_multiplier_gt_1) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1());
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_quant_output_multiplier_gt_1_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_relaxed,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_relaxed,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_weight_as_input,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input());
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed,
                           conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed,
                           conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc,
                           conv2d_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_quant8,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_quant8,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_float16,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_float16,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw,
                           conv2d_v1_2::is_ignored_zero_sized_nchw,
                           conv2d_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           conv2d_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_quant8,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_quant8,
                           conv2d_v1_2::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_float16,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_float16,
                           conv2d_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_2,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_2,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_relaxed_2,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_relaxed_2,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_quant8_2,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_quant8_2,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nhwc_float16_2,
                           conv2d_v1_2::is_ignored_zero_sized_nhwc_float16_2,
                           conv2d_v1_2::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nhwc_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_2,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_2,
                           conv2d_v1_2::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_relaxed_2,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_relaxed_2,
                           conv2d_v1_2::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_quant8_2,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_quant8_2,
                           conv2d_v1_2::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, conv2d_v1_2_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_nchw_float16_2,
                           conv2d_v1_2::is_ignored_zero_sized_nchw_float16_2,
                           conv2d_v1_2::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_nchw_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           conv2d_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, conv2d_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = conv2d_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(conv2d_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_v1_2.mod.py.
namespace depth_to_space_v1_2 {
// Generated depth_to_space_v1_2 test
#include "examples/depth_to_space_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_v1_2.model.cpp"
} // namespace depth_to_space_v1_2

TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc,
                           depth_to_space_v1_2::is_ignored_nhwc,
                           depth_to_space_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_relaxed,
                           depth_to_space_v1_2::is_ignored_nhwc_relaxed,
                           depth_to_space_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_relaxed) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_float16,
                           depth_to_space_v1_2::is_ignored_nhwc_float16,
                           depth_to_space_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_float16) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_quant8,
                           depth_to_space_v1_2::is_ignored_nhwc_quant8,
                           depth_to_space_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_quant8) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw,
                           depth_to_space_v1_2::is_ignored_nchw,
                           depth_to_space_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_relaxed,
                           depth_to_space_v1_2::is_ignored_nchw_relaxed,
                           depth_to_space_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_relaxed) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_float16,
                           depth_to_space_v1_2::is_ignored_nchw_float16,
                           depth_to_space_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_float16) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_quant8,
                           depth_to_space_v1_2::is_ignored_nchw_quant8,
                           depth_to_space_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_quant8) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_2,
                           depth_to_space_v1_2::is_ignored_nhwc_2,
                           depth_to_space_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_relaxed_2,
                           depth_to_space_v1_2::is_ignored_nhwc_relaxed_2,
                           depth_to_space_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_relaxed_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_float16_2,
                           depth_to_space_v1_2::is_ignored_nhwc_float16_2,
                           depth_to_space_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_float16_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_quant8_2,
                           depth_to_space_v1_2::is_ignored_nhwc_quant8_2,
                           depth_to_space_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_quant8_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_2,
                           depth_to_space_v1_2::is_ignored_nchw_2,
                           depth_to_space_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_relaxed_2,
                           depth_to_space_v1_2::is_ignored_nchw_relaxed_2,
                           depth_to_space_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_relaxed_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_float16_2,
                           depth_to_space_v1_2::is_ignored_nchw_float16_2,
                           depth_to_space_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_float16_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_quant8_2,
                           depth_to_space_v1_2::is_ignored_nchw_quant8_2,
                           depth_to_space_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_quant8_2) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_3,
                           depth_to_space_v1_2::is_ignored_nhwc_3,
                           depth_to_space_v1_2::get_examples_nhwc_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_relaxed_3,
                           depth_to_space_v1_2::is_ignored_nhwc_relaxed_3,
                           depth_to_space_v1_2::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_relaxed_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_float16_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_float16_3,
                           depth_to_space_v1_2::is_ignored_nhwc_float16_3,
                           depth_to_space_v1_2::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_float16_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nhwc_quant8_3,
                           depth_to_space_v1_2::is_ignored_nhwc_quant8_3,
                           depth_to_space_v1_2::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nhwc_quant8_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_3,
                           depth_to_space_v1_2::is_ignored_nchw_3,
                           depth_to_space_v1_2::get_examples_nchw_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_relaxed_3,
                           depth_to_space_v1_2::is_ignored_nchw_relaxed_3,
                           depth_to_space_v1_2::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_relaxed_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_float16_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_float16_3,
                           depth_to_space_v1_2::is_ignored_nchw_float16_3,
                           depth_to_space_v1_2::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_float16_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depth_to_space_v1_2_nchw_quant8_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_nchw_quant8_3,
                           depth_to_space_v1_2::is_ignored_nchw_quant8_3,
                           depth_to_space_v1_2::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, depth_to_space_v1_2_nchw_quant8_3) {
  const Model model = depth_to_space_v1_2::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_float16_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_float16_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_float16_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           depth_to_space_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, depth_to_space_v1_2_dynamic_output_shape_nchw_quant8_3) {
  const Model model = depth_to_space_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(depth_to_space_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_dilation.mod.py.
namespace depthwise_conv2d_dilation {
// Generated depthwise_conv2d_dilation test
#include "examples/depthwise_conv2d_dilation.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_dilation.model.cpp"
} // namespace depthwise_conv2d_dilation

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc,
                           depthwise_conv2d_dilation::is_ignored_nhwc,
                           depthwise_conv2d_dilation::get_examples_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_relaxed,
                           depthwise_conv2d_dilation::is_ignored_nhwc_relaxed,
                           depthwise_conv2d_dilation::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_float16,
                           depthwise_conv2d_dilation::is_ignored_nhwc_float16,
                           depthwise_conv2d_dilation::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_quant8,
                           depthwise_conv2d_dilation::is_ignored_nhwc_quant8,
                           depthwise_conv2d_dilation::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input,
                           depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_float16,
                           depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw,
                           depthwise_conv2d_dilation::is_ignored_nchw,
                           depthwise_conv2d_dilation::get_examples_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_relaxed,
                           depthwise_conv2d_dilation::is_ignored_nchw_relaxed,
                           depthwise_conv2d_dilation::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_float16,
                           depthwise_conv2d_dilation::is_ignored_nchw_float16,
                           depthwise_conv2d_dilation::get_examples_nchw_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_quant8,
                           depthwise_conv2d_dilation::is_ignored_nchw_quant8,
                           depthwise_conv2d_dilation::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input,
                           depthwise_conv2d_dilation::get_examples_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_float16,
                           depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_quant8,
                           depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_2,
                           depthwise_conv2d_dilation::get_examples_nhwc_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_2,
                           depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_2,
                           depthwise_conv2d_dilation::get_examples_nchw_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_2,
                           depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_float16_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_float16_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_3,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_4,
                           depthwise_conv2d_dilation::is_ignored_nhwc_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_4,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_4,
                           depthwise_conv2d_dilation::is_ignored_nchw_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_4,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_4,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_4,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_4,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_4,
                           depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_valid_padding_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_valid_padding_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_5,
                           depthwise_conv2d_dilation::is_ignored_nhwc_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_float16_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_5,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::is_ignored_nhwc_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nhwc_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_5,
                           depthwise_conv2d_dilation::is_ignored_nchw_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_float16_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_5,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::is_ignored_nchw_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_nchw_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_5,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_5,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_5,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_5,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_3,
                           depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_dilation_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_dilation::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_dilation::get_examples_same_padding_stride_2_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_per_channel.mod.py.
namespace depthwise_conv2d_per_channel {
// Generated depthwise_conv2d_per_channel test
#include "examples/depthwise_conv2d_per_channel.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_per_channel.model.cpp"
} // namespace depthwise_conv2d_per_channel

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_same) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_same,
                           depthwise_conv2d_per_channel::is_ignored_same,
                           depthwise_conv2d_per_channel::get_examples_same());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_same) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_same();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_same());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_same_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_same_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_same_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_same_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_same_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_same_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_same_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_same_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_same_dynamic_output_shape,
                           depthwise_conv2d_per_channel::is_ignored_same_dynamic_output_shape,
                           depthwise_conv2d_per_channel::get_examples_same_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_same_dynamic_output_shape) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_same_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_same_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_same_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_same_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_same_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_same_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_same_dynamic_output_shape_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_same_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_same_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_different) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_different,
                           depthwise_conv2d_per_channel::is_ignored_different,
                           depthwise_conv2d_per_channel::get_examples_different());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_different) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_different();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_different());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_different_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_different_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_different_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_different_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_different_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_different_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_different_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_different_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_different_dynamic_output_shape,
                           depthwise_conv2d_per_channel::is_ignored_different_dynamic_output_shape,
                           depthwise_conv2d_per_channel::get_examples_different_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_different_dynamic_output_shape) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_different_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_different_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_different_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_different_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_different_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_different_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_different_dynamic_output_shape_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_different_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_different_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_layout_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_nhwc,
                           depthwise_conv2d_per_channel::is_ignored_layout_nhwc,
                           depthwise_conv2d_per_channel::get_examples_layout_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_nhwc) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_layout_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_nhwc_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_layout_nhwc_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_layout_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_layout_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_nchw,
                           depthwise_conv2d_per_channel::is_ignored_layout_nchw,
                           depthwise_conv2d_per_channel::get_examples_layout_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_nchw) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_per_channel_layout_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_nchw_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_layout_nchw_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_layout_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_nchw_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nhwc,
                           depthwise_conv2d_per_channel::is_ignored_layout_dynamic_output_shape_nhwc,
                           depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_layout_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nchw,
                           depthwise_conv2d_per_channel::is_ignored_layout_dynamic_output_shape_nchw,
                           depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_per_channel::is_ignored_layout_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_per_channel_layout_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_per_channel::createTestModel_layout_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_per_channel::get_examples_layout_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_v1_2.mod.py.
namespace depthwise_conv2d_v1_2 {
// Generated depthwise_conv2d_v1_2 test
#include "examples/depthwise_conv2d_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_v1_2.model.cpp"
} // namespace depthwise_conv2d_v1_2

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc,
                           depthwise_conv2d_v1_2::is_ignored_nhwc,
                           depthwise_conv2d_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_relaxed,
                           depthwise_conv2d_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_float16,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_float16,
                           depthwise_conv2d_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_quant8,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_quant8,
                           depthwise_conv2d_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw,
                           depthwise_conv2d_v1_2::is_ignored_nchw,
                           depthwise_conv2d_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_nchw_relaxed,
                           depthwise_conv2d_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_float16,
                           depthwise_conv2d_v1_2::is_ignored_nchw_float16,
                           depthwise_conv2d_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_quant8,
                           depthwise_conv2d_v1_2::is_ignored_nchw_quant8,
                           depthwise_conv2d_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_float16_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8_3());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_channelQuant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_nhwc_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_3());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nhwc_weight_as_input_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nhwc_weight_as_input_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nhwc_weight_as_input_channelQuant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_float16_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_nchw_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8_3());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_channelQuant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_nchw_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_3());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_nchw_weight_as_input_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_nchw_weight_as_input_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_nchw_weight_as_input_channelQuant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_3(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_channelQuant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_3(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_channelQuant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::is_ignored_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3,
                           depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_dynamic_output_shape_nchw_weight_as_input_channelQuant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_float16,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw,
                           depthwise_conv2d_v1_2::get_examples_large_nchw());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_float16,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_float16,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_float16,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_float16,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_quant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8_2());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_nchw_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nhwc_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_float16_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_float16_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_float16_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_quant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_quant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::is_ignored_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2,
                           depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_large_dynamic_output_shape_nchw_weight_as_input_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_relaxed,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input_relaxed());
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::is_ignored_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed,
                           depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_v1_2_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed) {
  const Model model = depthwise_conv2d_v1_2::createTestModel_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_v1_2::get_examples_quant_output_multiplier_gt_1_dynamic_output_shape_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: dequantize_v1_2.mod.py.
namespace dequantize_v1_2 {
// Generated dequantize_v1_2 test
#include "examples/dequantize_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/dequantize_v1_2.model.cpp"
} // namespace dequantize_v1_2

TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_1d_quant8_asymm) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel,
                           dequantize_v1_2::is_ignored,
                           dequantize_v1_2::get_examples_1d_quant8_asymm());
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm) {
  const Model model = dequantize_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_1d_quant8_asymm_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed,
                           dequantize_v1_2::is_ignored_relaxed,
                           dequantize_v1_2::get_examples_1d_quant8_asymm_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_1d_quant8_asymm_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16,
                           dequantize_v1_2::is_ignored_float16,
                           dequantize_v1_2::get_examples_1d_quant8_asymm_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape,
                           dequantize_v1_2::is_ignored_dynamic_output_shape,
                           dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed,
                           dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16,
                           dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_1d_quant8_asymm_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_1d_quant8_asymm_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_2d_quant8_asymm) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_2,
                           dequantize_v1_2::is_ignored_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm());
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm) {
  const Model model = dequantize_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_2d_quant8_asymm_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed_2,
                           dequantize_v1_2::is_ignored_relaxed_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_2d_quant8_asymm_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16_2,
                           dequantize_v1_2::is_ignored_float16_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_2,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_2,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16_2,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16_2,
                           dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_2d_quant8_asymm_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_2d_quant8_asymm_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_quant8_symm) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_3,
                           dequantize_v1_2::is_ignored_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm) {
  const Model model = dequantize_v1_2::createTestModel_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_quant8_symm_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed_3,
                           dequantize_v1_2::is_ignored_relaxed_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_quant8_symm_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16_3,
                           dequantize_v1_2::is_ignored_float16_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_3,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_3,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16_3,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16_3,
                           dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_quant8_symm_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_quant8_symm_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_4d_quant8_symm) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_4,
                           dequantize_v1_2::is_ignored_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm());
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm) {
  const Model model = dequantize_v1_2::createTestModel_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_4d_quant8_symm_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed_4,
                           dequantize_v1_2::is_ignored_relaxed_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_4d_quant8_symm_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16_4,
                           dequantize_v1_2::is_ignored_float16_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_4,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_4,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16_4,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16_4,
                           dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_4d_quant8_symm_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_4d_quant8_symm_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_first_dim) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_5,
                           dequantize_v1_2::is_ignored_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim) {
  const Model model = dequantize_v1_2::createTestModel_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_first_dim_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed_5,
                           dequantize_v1_2::is_ignored_relaxed_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_first_dim_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16_5,
                           dequantize_v1_2::is_ignored_float16_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_5,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_5,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16_5,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16_5,
                           dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_first_dim_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16_5();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_first_dim_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_second_dim) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_6,
                           dequantize_v1_2::is_ignored_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim) {
  const Model model = dequantize_v1_2::createTestModel_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_second_dim_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_relaxed_6,
                           dequantize_v1_2::is_ignored_relaxed_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_3d_per_channel_second_dim_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_float16_6,
                           dequantize_v1_2::is_ignored_float16_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim_float16) {
  const Model model = dequantize_v1_2::createTestModel_float16_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_6,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_6,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_relaxed_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_float16_6,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_float16_6,
                           dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_3d_per_channel_second_dim_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_float16_6();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_3d_per_channel_second_dim_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_7,
                           dequantize_v1_2::is_ignored_7,
                           dequantize_v1_2::get_examples());
}

TEST_F(ValidationTest, dequantize_v1_2) {
  const Model model = dequantize_v1_2::createTestModel_7();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_dynamic_output_shape_7,
                           dequantize_v1_2::is_ignored_dynamic_output_shape_7,
                           dequantize_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized,
                           dequantize_v1_2::is_ignored_zero_sized,
                           dequantize_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized_relaxed,
                           dequantize_v1_2::is_ignored_zero_sized_relaxed,
                           dequantize_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, dequantize_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized_float16,
                           dequantize_v1_2::is_ignored_zero_sized_float16,
                           dequantize_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized_float16) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           dequantize_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           dequantize_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           dequantize_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, dequantize_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = dequantize_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(dequantize_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: detection_postprocess.mod.py.
namespace detection_postprocess {
// Generated detection_postprocess test
#include "examples/detection_postprocess.example.cpp"
// Generated model constructor
#include "vts_models/detection_postprocess.model.cpp"
} // namespace detection_postprocess

TEST_F(NeuralnetworksHidlTest, detection_postprocess_regular) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular,
                           detection_postprocess::is_ignored_regular,
                           detection_postprocess::get_examples_regular());
}

TEST_F(ValidationTest, detection_postprocess_regular) {
  const Model model = detection_postprocess::createTestModel_regular();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_regular_relaxed) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular_relaxed,
                           detection_postprocess::is_ignored_regular_relaxed,
                           detection_postprocess::get_examples_regular_relaxed());
}

TEST_F(ValidationTest, detection_postprocess_regular_relaxed) {
  const Model model = detection_postprocess::createTestModel_regular_relaxed();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_regular_float16) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular_float16,
                           detection_postprocess::is_ignored_regular_float16,
                           detection_postprocess::get_examples_regular_float16());
}

TEST_F(ValidationTest, detection_postprocess_regular_float16) {
  const Model model = detection_postprocess::createTestModel_regular_float16();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_regular_dynamic_output_shape) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular_dynamic_output_shape,
                           detection_postprocess::is_ignored_regular_dynamic_output_shape,
                           detection_postprocess::get_examples_regular_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, detection_postprocess_regular_dynamic_output_shape) {
  const Model model = detection_postprocess::createTestModel_regular_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_regular_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular_dynamic_output_shape_relaxed,
                           detection_postprocess::is_ignored_regular_dynamic_output_shape_relaxed,
                           detection_postprocess::get_examples_regular_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, detection_postprocess_regular_dynamic_output_shape_relaxed) {
  const Model model = detection_postprocess::createTestModel_regular_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_regular_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_regular_dynamic_output_shape_float16,
                           detection_postprocess::is_ignored_regular_dynamic_output_shape_float16,
                           detection_postprocess::get_examples_regular_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, detection_postprocess_regular_dynamic_output_shape_float16) {
  const Model model = detection_postprocess::createTestModel_regular_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_regular_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, detection_postprocess) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel,
                           detection_postprocess::is_ignored,
                           detection_postprocess::get_examples());
}

TEST_F(ValidationTest, detection_postprocess) {
  const Model model = detection_postprocess::createTestModel();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_relaxed) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_relaxed,
                           detection_postprocess::is_ignored_relaxed,
                           detection_postprocess::get_examples_relaxed());
}

TEST_F(ValidationTest, detection_postprocess_relaxed) {
  const Model model = detection_postprocess::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_float16) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_float16,
                           detection_postprocess::is_ignored_float16,
                           detection_postprocess::get_examples_float16());
}

TEST_F(ValidationTest, detection_postprocess_float16) {
  const Model model = detection_postprocess::createTestModel_float16();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape,
                           detection_postprocess::is_ignored_dynamic_output_shape,
                           detection_postprocess::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_relaxed,
                           detection_postprocess::is_ignored_dynamic_output_shape_relaxed,
                           detection_postprocess::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_relaxed) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_float16,
                           detection_postprocess::is_ignored_dynamic_output_shape_float16,
                           detection_postprocess::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_float16) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, detection_postprocess_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_2,
                           detection_postprocess::is_ignored_2,
                           detection_postprocess::get_examples_2());
}

TEST_F(ValidationTest, detection_postprocess_2) {
  const Model model = detection_postprocess::createTestModel_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_relaxed_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_relaxed_2,
                           detection_postprocess::is_ignored_relaxed_2,
                           detection_postprocess::get_examples_relaxed_2());
}

TEST_F(ValidationTest, detection_postprocess_relaxed_2) {
  const Model model = detection_postprocess::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_float16_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_float16_2,
                           detection_postprocess::is_ignored_float16_2,
                           detection_postprocess::get_examples_float16_2());
}

TEST_F(ValidationTest, detection_postprocess_float16_2) {
  const Model model = detection_postprocess::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_2,
                           detection_postprocess::is_ignored_dynamic_output_shape_2,
                           detection_postprocess::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_2) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_relaxed_2,
                           detection_postprocess::is_ignored_dynamic_output_shape_relaxed_2,
                           detection_postprocess::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_relaxed_2) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_float16_2,
                           detection_postprocess::is_ignored_dynamic_output_shape_float16_2,
                           detection_postprocess::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_float16_2) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, detection_postprocess_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_3,
                           detection_postprocess::is_ignored_3,
                           detection_postprocess::get_examples_3());
}

TEST_F(ValidationTest, detection_postprocess_3) {
  const Model model = detection_postprocess::createTestModel_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_relaxed_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_relaxed_3,
                           detection_postprocess::is_ignored_relaxed_3,
                           detection_postprocess::get_examples_relaxed_3());
}

TEST_F(ValidationTest, detection_postprocess_relaxed_3) {
  const Model model = detection_postprocess::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, detection_postprocess_float16_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_float16_3,
                           detection_postprocess::is_ignored_float16_3,
                           detection_postprocess::get_examples_float16_3());
}

TEST_F(ValidationTest, detection_postprocess_float16_3) {
  const Model model = detection_postprocess::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_3,
                           detection_postprocess::is_ignored_dynamic_output_shape_3,
                           detection_postprocess::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_3) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_relaxed_3,
                           detection_postprocess::is_ignored_dynamic_output_shape_relaxed_3,
                           detection_postprocess::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_relaxed_3) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, detection_postprocess_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           detection_postprocess::createTestModel_dynamic_output_shape_float16_3,
                           detection_postprocess::is_ignored_dynamic_output_shape_float16_3,
                           detection_postprocess::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, detection_postprocess_dynamic_output_shape_float16_3) {
  const Model model = detection_postprocess::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(detection_postprocess::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
// Generated from: div_v1_2.mod.py.
namespace div_v1_2 {
// Generated div_v1_2 test
#include "examples/div_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/div_v1_2.model.cpp"
} // namespace div_v1_2

TEST_F(NeuralnetworksHidlTest, div_v1_2) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel,
                           div_v1_2::is_ignored,
                           div_v1_2::get_examples());
}

TEST_F(ValidationTest, div_v1_2) {
  const Model model = div_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_dynamic_output_shape,
                           div_v1_2::is_ignored_dynamic_output_shape,
                           div_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_v1_2_dynamic_output_shape) {
  const Model model = div_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, div_v1_2_2) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_2,
                           div_v1_2::is_ignored_2,
                           div_v1_2::get_examples_2());
}

TEST_F(ValidationTest, div_v1_2_2) {
  const Model model = div_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_dynamic_output_shape_2,
                           div_v1_2::is_ignored_dynamic_output_shape_2,
                           div_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, div_v1_2_dynamic_output_shape_2) {
  const Model model = div_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, div_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized,
                           div_v1_2::is_ignored_zero_sized,
                           div_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, div_v1_2_zero_sized) {
  const Model model = div_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, div_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized_relaxed,
                           div_v1_2::is_ignored_zero_sized_relaxed,
                           div_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, div_v1_2_zero_sized_relaxed) {
  const Model model = div_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, div_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized_float16,
                           div_v1_2::is_ignored_zero_sized_float16,
                           div_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, div_v1_2_zero_sized_float16) {
  const Model model = div_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           div_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           div_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = div_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           div_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           div_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, div_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = div_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           div_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           div_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           div_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, div_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = div_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(div_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: equal.mod.py.
namespace equal {
// Generated equal test
#include "examples/equal.example.cpp"
// Generated model constructor
#include "vts_models/equal.model.cpp"
} // namespace equal

TEST_F(NeuralnetworksHidlTest, equal_simple) {
  generated_tests::Execute(device,
                           equal::createTestModel,
                           equal::is_ignored,
                           equal::get_examples_simple());
}

TEST_F(ValidationTest, equal_simple) {
  const Model model = equal::createTestModel();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_simple_int32) {
  generated_tests::Execute(device,
                           equal::createTestModel_int32,
                           equal::is_ignored_int32,
                           equal::get_examples_simple_int32());
}

TEST_F(ValidationTest, equal_simple_int32) {
  const Model model = equal::createTestModel_int32();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_simple_float16) {
  generated_tests::Execute(device,
                           equal::createTestModel_float16,
                           equal::is_ignored_float16,
                           equal::get_examples_simple_float16());
}

TEST_F(ValidationTest, equal_simple_float16) {
  const Model model = equal::createTestModel_float16();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_simple_relaxed) {
  generated_tests::Execute(device,
                           equal::createTestModel_relaxed,
                           equal::is_ignored_relaxed,
                           equal::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, equal_simple_relaxed) {
  const Model model = equal::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape,
                           equal::is_ignored_dynamic_output_shape,
                           equal::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_simple_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_int32,
                           equal::is_ignored_dynamic_output_shape_int32,
                           equal::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, equal_simple_dynamic_output_shape_int32) {
  const Model model = equal::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_float16,
                           equal::is_ignored_dynamic_output_shape_float16,
                           equal::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, equal_simple_dynamic_output_shape_float16) {
  const Model model = equal::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_relaxed,
                           equal::is_ignored_dynamic_output_shape_relaxed,
                           equal::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, equal_simple_dynamic_output_shape_relaxed) {
  const Model model = equal::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(equal::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_broadcast) {
  generated_tests::Execute(device,
                           equal::createTestModel_2,
                           equal::is_ignored_2,
                           equal::get_examples_broadcast());
}

TEST_F(ValidationTest, equal_broadcast) {
  const Model model = equal::createTestModel_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_broadcast_int32) {
  generated_tests::Execute(device,
                           equal::createTestModel_int32_2,
                           equal::is_ignored_int32_2,
                           equal::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, equal_broadcast_int32) {
  const Model model = equal::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_broadcast_float16) {
  generated_tests::Execute(device,
                           equal::createTestModel_float16_2,
                           equal::is_ignored_float16_2,
                           equal::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, equal_broadcast_float16) {
  const Model model = equal::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, equal_broadcast_relaxed) {
  generated_tests::Execute(device,
                           equal::createTestModel_relaxed_2,
                           equal::is_ignored_relaxed_2,
                           equal::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, equal_broadcast_relaxed) {
  const Model model = equal::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_2,
                           equal::is_ignored_dynamic_output_shape_2,
                           equal::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_broadcast_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_int32_2,
                           equal::is_ignored_dynamic_output_shape_int32_2,
                           equal::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, equal_broadcast_dynamic_output_shape_int32) {
  const Model model = equal::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_float16_2,
                           equal::is_ignored_dynamic_output_shape_float16_2,
                           equal::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, equal_broadcast_dynamic_output_shape_float16) {
  const Model model = equal::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_relaxed_2,
                           equal::is_ignored_dynamic_output_shape_relaxed_2,
                           equal::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, equal_broadcast_dynamic_output_shape_relaxed) {
  const Model model = equal::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(equal::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_quantized_different_scale) {
  generated_tests::Execute(device,
                           equal::createTestModel_3,
                           equal::is_ignored_3,
                           equal::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, equal_quantized_different_scale) {
  const Model model = equal::createTestModel_3();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_3,
                           equal::is_ignored_dynamic_output_shape_3,
                           equal::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_quantized_different_scale_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           equal::createTestModel_4,
                           equal::is_ignored_4,
                           equal::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, equal_quantized_different_zero_point) {
  const Model model = equal::createTestModel_4();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_4,
                           equal::is_ignored_dynamic_output_shape_4,
                           equal::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           equal::createTestModel_5,
                           equal::is_ignored_5,
                           equal::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, equal_quantized_overflow_second_input_if_requantized) {
  const Model model = equal::createTestModel_5();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_5,
                           equal::is_ignored_dynamic_output_shape_5,
                           equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           equal::createTestModel_6,
                           equal::is_ignored_6,
                           equal::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, equal_quantized_overflow_first_input_if_requantized) {
  const Model model = equal::createTestModel_6();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_6,
                           equal::is_ignored_dynamic_output_shape_6,
                           equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, equal_boolean) {
  generated_tests::Execute(device,
                           equal::createTestModel_7,
                           equal::is_ignored_7,
                           equal::get_examples_boolean());
}

TEST_F(ValidationTest, equal_boolean) {
  const Model model = equal::createTestModel_7();
  const std::vector<Request> requests = createRequests(equal::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, equal_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           equal::createTestModel_dynamic_output_shape_7,
                           equal::is_ignored_dynamic_output_shape_7,
                           equal::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, equal_boolean_dynamic_output_shape) {
  const Model model = equal::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(equal::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: exp.mod.py.
namespace exp {
// Generated exp test
#include "examples/exp.example.cpp"
// Generated model constructor
#include "vts_models/exp.model.cpp"
} // namespace exp

TEST_F(NeuralnetworksHidlTest, exp) {
  generated_tests::Execute(device,
                           exp::createTestModel,
                           exp::is_ignored,
                           exp::get_examples());
}

TEST_F(ValidationTest, exp) {
  const Model model = exp::createTestModel();
  const std::vector<Request> requests = createRequests(exp::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, exp_relaxed) {
  generated_tests::Execute(device,
                           exp::createTestModel_relaxed,
                           exp::is_ignored_relaxed,
                           exp::get_examples_relaxed());
}

TEST_F(ValidationTest, exp_relaxed) {
  const Model model = exp::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(exp::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, exp_float16) {
  generated_tests::Execute(device,
                           exp::createTestModel_float16,
                           exp::is_ignored_float16,
                           exp::get_examples_float16());
}

TEST_F(ValidationTest, exp_float16) {
  const Model model = exp::createTestModel_float16();
  const std::vector<Request> requests = createRequests(exp::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, exp_dynamic_output_shape) {
  generated_tests::Execute(device,
                           exp::createTestModel_dynamic_output_shape,
                           exp::is_ignored_dynamic_output_shape,
                           exp::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, exp_dynamic_output_shape) {
  const Model model = exp::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(exp::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, exp_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           exp::createTestModel_dynamic_output_shape_relaxed,
                           exp::is_ignored_dynamic_output_shape_relaxed,
                           exp::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, exp_dynamic_output_shape_relaxed) {
  const Model model = exp::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(exp::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, exp_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           exp::createTestModel_dynamic_output_shape_float16,
                           exp::is_ignored_dynamic_output_shape_float16,
                           exp::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, exp_dynamic_output_shape_float16) {
  const Model model = exp::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(exp::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: expand_dims.mod.py.
namespace expand_dims {
// Generated expand_dims test
#include "examples/expand_dims.example.cpp"
// Generated model constructor
#include "vts_models/expand_dims.model.cpp"
} // namespace expand_dims

TEST_F(NeuralnetworksHidlTest, expand_dims) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel,
                           expand_dims::is_ignored,
                           expand_dims::get_examples());
}

TEST_F(ValidationTest, expand_dims) {
  const Model model = expand_dims::createTestModel();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed,
                           expand_dims::is_ignored_relaxed,
                           expand_dims::get_examples_relaxed());
}

TEST_F(ValidationTest, expand_dims_relaxed) {
  const Model model = expand_dims::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_quant8) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8,
                           expand_dims::is_ignored_quant8,
                           expand_dims::get_examples_quant8());
}

TEST_F(ValidationTest, expand_dims_quant8) {
  const Model model = expand_dims::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_int32) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32,
                           expand_dims::is_ignored_int32,
                           expand_dims::get_examples_int32());
}

TEST_F(ValidationTest, expand_dims_int32) {
  const Model model = expand_dims::createTestModel_int32();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_float16) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_float16,
                           expand_dims::is_ignored_float16,
                           expand_dims::get_examples_float16());
}

TEST_F(ValidationTest, expand_dims_float16) {
  const Model model = expand_dims::createTestModel_float16();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape,
                           expand_dims::is_ignored_dynamic_output_shape,
                           expand_dims::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_relaxed,
                           expand_dims::is_ignored_dynamic_output_shape_relaxed,
                           expand_dims::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_relaxed) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_quant8,
                           expand_dims::is_ignored_dynamic_output_shape_quant8,
                           expand_dims::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_quant8) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_int32,
                           expand_dims::is_ignored_dynamic_output_shape_int32,
                           expand_dims::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_int32) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_float16,
                           expand_dims::is_ignored_dynamic_output_shape_float16,
                           expand_dims::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_float16) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, expand_dims_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_2,
                           expand_dims::is_ignored_2,
                           expand_dims::get_examples_2());
}

TEST_F(ValidationTest, expand_dims_2) {
  const Model model = expand_dims::createTestModel_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_2,
                           expand_dims::is_ignored_relaxed_2,
                           expand_dims::get_examples_relaxed_2());
}

TEST_F(ValidationTest, expand_dims_relaxed_2) {
  const Model model = expand_dims::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_2,
                           expand_dims::is_ignored_quant8_2,
                           expand_dims::get_examples_quant8_2());
}

TEST_F(ValidationTest, expand_dims_quant8_2) {
  const Model model = expand_dims::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_int32_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_2,
                           expand_dims::is_ignored_int32_2,
                           expand_dims::get_examples_int32_2());
}

TEST_F(ValidationTest, expand_dims_int32_2) {
  const Model model = expand_dims::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_int32_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_float16_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_float16_2,
                           expand_dims::is_ignored_float16_2,
                           expand_dims::get_examples_float16_2());
}

TEST_F(ValidationTest, expand_dims_float16_2) {
  const Model model = expand_dims::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_2,
                           expand_dims::is_ignored_dynamic_output_shape_2,
                           expand_dims::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_2) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_relaxed_2,
                           expand_dims::is_ignored_dynamic_output_shape_relaxed_2,
                           expand_dims::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_relaxed_2) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_quant8_2,
                           expand_dims::is_ignored_dynamic_output_shape_quant8_2,
                           expand_dims::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_quant8_2) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_int32_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_int32_2,
                           expand_dims::is_ignored_dynamic_output_shape_int32_2,
                           expand_dims::get_examples_dynamic_output_shape_int32_2(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_int32_2) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_int32_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_float16_2,
                           expand_dims::is_ignored_dynamic_output_shape_float16_2,
                           expand_dims::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_float16_2) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, expand_dims_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_3,
                           expand_dims::is_ignored_3,
                           expand_dims::get_examples_3());
}

TEST_F(ValidationTest, expand_dims_3) {
  const Model model = expand_dims::createTestModel_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_3,
                           expand_dims::is_ignored_relaxed_3,
                           expand_dims::get_examples_relaxed_3());
}

TEST_F(ValidationTest, expand_dims_relaxed_3) {
  const Model model = expand_dims::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_3,
                           expand_dims::is_ignored_quant8_3,
                           expand_dims::get_examples_quant8_3());
}

TEST_F(ValidationTest, expand_dims_quant8_3) {
  const Model model = expand_dims::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_int32_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_3,
                           expand_dims::is_ignored_int32_3,
                           expand_dims::get_examples_int32_3());
}

TEST_F(ValidationTest, expand_dims_int32_3) {
  const Model model = expand_dims::createTestModel_int32_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_int32_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_float16_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_float16_3,
                           expand_dims::is_ignored_float16_3,
                           expand_dims::get_examples_float16_3());
}

TEST_F(ValidationTest, expand_dims_float16_3) {
  const Model model = expand_dims::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_3,
                           expand_dims::is_ignored_dynamic_output_shape_3,
                           expand_dims::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_3) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_relaxed_3,
                           expand_dims::is_ignored_dynamic_output_shape_relaxed_3,
                           expand_dims::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_relaxed_3) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_quant8_3,
                           expand_dims::is_ignored_dynamic_output_shape_quant8_3,
                           expand_dims::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_quant8_3) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_int32_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_int32_3,
                           expand_dims::is_ignored_dynamic_output_shape_int32_3,
                           expand_dims::get_examples_dynamic_output_shape_int32_3(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_int32_3) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_int32_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_int32_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_float16_3,
                           expand_dims::is_ignored_dynamic_output_shape_float16_3,
                           expand_dims::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_float16_3) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, expand_dims_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_4,
                           expand_dims::is_ignored_4,
                           expand_dims::get_examples_4());
}

TEST_F(ValidationTest, expand_dims_4) {
  const Model model = expand_dims::createTestModel_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_relaxed_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_relaxed_4,
                           expand_dims::is_ignored_relaxed_4,
                           expand_dims::get_examples_relaxed_4());
}

TEST_F(ValidationTest, expand_dims_relaxed_4) {
  const Model model = expand_dims::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_quant8_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_quant8_4,
                           expand_dims::is_ignored_quant8_4,
                           expand_dims::get_examples_quant8_4());
}

TEST_F(ValidationTest, expand_dims_quant8_4) {
  const Model model = expand_dims::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_int32_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_int32_4,
                           expand_dims::is_ignored_int32_4,
                           expand_dims::get_examples_int32_4());
}

TEST_F(ValidationTest, expand_dims_int32_4) {
  const Model model = expand_dims::createTestModel_int32_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_int32_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, expand_dims_float16_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_float16_4,
                           expand_dims::is_ignored_float16_4,
                           expand_dims::get_examples_float16_4());
}

TEST_F(ValidationTest, expand_dims_float16_4) {
  const Model model = expand_dims::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_4,
                           expand_dims::is_ignored_dynamic_output_shape_4,
                           expand_dims::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_4) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_relaxed_4,
                           expand_dims::is_ignored_dynamic_output_shape_relaxed_4,
                           expand_dims::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_relaxed_4) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_quant8_4,
                           expand_dims::is_ignored_dynamic_output_shape_quant8_4,
                           expand_dims::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_quant8_4) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_int32_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_int32_4,
                           expand_dims::is_ignored_dynamic_output_shape_int32_4,
                           expand_dims::get_examples_dynamic_output_shape_int32_4(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_int32_4) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_int32_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_int32_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, expand_dims_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           expand_dims::createTestModel_dynamic_output_shape_float16_4,
                           expand_dims::is_ignored_dynamic_output_shape_float16_4,
                           expand_dims::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, expand_dims_dynamic_output_shape_float16_4) {
  const Model model = expand_dims::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(expand_dims::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
// Generated from: floor_float16.mod.py.
namespace floor_float16 {
// Generated floor_float16 test
#include "examples/floor_float16.example.cpp"
// Generated model constructor
#include "vts_models/floor_float16.model.cpp"
} // namespace floor_float16

TEST_F(NeuralnetworksHidlTest, floor_float16) {
  generated_tests::Execute(device,
                           floor_float16::createTestModel,
                           floor_float16::is_ignored,
                           floor_float16::get_examples());
}

TEST_F(ValidationTest, floor_float16) {
  const Model model = floor_float16::createTestModel();
  const std::vector<Request> requests = createRequests(floor_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, floor_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           floor_float16::createTestModel_dynamic_output_shape,
                           floor_float16::is_ignored_dynamic_output_shape,
                           floor_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, floor_float16_dynamic_output_shape) {
  const Model model = floor_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(floor_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_v1_2.mod.py.
namespace fully_connected_v1_2 {
// Generated fully_connected_v1_2 test
#include "examples/fully_connected_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_v1_2.model.cpp"
} // namespace fully_connected_v1_2

TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel,
                           fully_connected_v1_2::is_ignored,
                           fully_connected_v1_2::get_examples());
}

TEST_F(ValidationTest, fully_connected_v1_2) {
  const Model model = fully_connected_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_relaxed,
                           fully_connected_v1_2::is_ignored_relaxed,
                           fully_connected_v1_2::get_examples_relaxed());
}

TEST_F(ValidationTest, fully_connected_v1_2_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_float16,
                           fully_connected_v1_2::is_ignored_float16,
                           fully_connected_v1_2::get_examples_float16());
}

TEST_F(ValidationTest, fully_connected_v1_2_float16) {
  const Model model = fully_connected_v1_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_quant8_mult_gt_1) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_quant8_mult_gt_1,
                           fully_connected_v1_2::is_ignored_quant8_mult_gt_1,
                           fully_connected_v1_2::get_examples_quant8_mult_gt_1());
}

TEST_F(ValidationTest, fully_connected_v1_2_quant8_mult_gt_1) {
  const Model model = fully_connected_v1_2::createTestModel_quant8_mult_gt_1();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_quant8_mult_gt_1());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_dynamic_output_shape,
                           fully_connected_v1_2::is_ignored_dynamic_output_shape,
                           fully_connected_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_dynamic_output_shape) {
  const Model model = fully_connected_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_dynamic_output_shape_relaxed,
                           fully_connected_v1_2::is_ignored_dynamic_output_shape_relaxed,
                           fully_connected_v1_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_dynamic_output_shape_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_dynamic_output_shape_float16,
                           fully_connected_v1_2::is_ignored_dynamic_output_shape_float16,
                           fully_connected_v1_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_dynamic_output_shape_float16) {
  const Model model = fully_connected_v1_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_dynamic_output_shape_quant8_mult_gt_1) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_dynamic_output_shape_quant8_mult_gt_1,
                           fully_connected_v1_2::is_ignored_dynamic_output_shape_quant8_mult_gt_1,
                           fully_connected_v1_2::get_examples_dynamic_output_shape_quant8_mult_gt_1(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_dynamic_output_shape_quant8_mult_gt_1) {
  const Model model = fully_connected_v1_2::createTestModel_dynamic_output_shape_quant8_mult_gt_1();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_dynamic_output_shape_quant8_mult_gt_1());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nhwc,
                           fully_connected_v1_2::is_ignored_zero_sized_nhwc,
                           fully_connected_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nhwc) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           fully_connected_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           fully_connected_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nhwc_quant8,
                           fully_connected_v1_2::is_ignored_zero_sized_nhwc_quant8,
                           fully_connected_v1_2::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nhwc_quant8) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nhwc_float16,
                           fully_connected_v1_2::is_ignored_zero_sized_nhwc_float16,
                           fully_connected_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nhwc_float16) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nchw,
                           fully_connected_v1_2::is_ignored_zero_sized_nchw,
                           fully_connected_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nchw) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           fully_connected_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           fully_connected_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nchw_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nchw_quant8,
                           fully_connected_v1_2::is_ignored_zero_sized_nchw_quant8,
                           fully_connected_v1_2::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nchw_quant8) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, fully_connected_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_nchw_float16,
                           fully_connected_v1_2::is_ignored_zero_sized_nchw_float16,
                           fully_connected_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_nchw_float16) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           fully_connected_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, fully_connected_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = fully_connected_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(fully_connected_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: gather.mod.py.
namespace gather {
// Generated gather test
#include "examples/gather.example.cpp"
// Generated model constructor
#include "vts_models/gather.model.cpp"
} // namespace gather

TEST_F(NeuralnetworksHidlTest, gather) {
  generated_tests::Execute(device,
                           gather::createTestModel,
                           gather::is_ignored,
                           gather::get_examples());
}

TEST_F(ValidationTest, gather) {
  const Model model = gather::createTestModel();
  const std::vector<Request> requests = createRequests(gather::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed,
                           gather::is_ignored_relaxed,
                           gather::get_examples_relaxed());
}

TEST_F(ValidationTest, gather_relaxed) {
  const Model model = gather::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8,
                           gather::is_ignored_quant8,
                           gather::get_examples_quant8());
}

TEST_F(ValidationTest, gather_quant8) {
  const Model model = gather::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32,
                           gather::is_ignored_int32,
                           gather::get_examples_int32());
}

TEST_F(ValidationTest, gather_int32) {
  const Model model = gather::createTestModel_int32();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16,
                           gather::is_ignored_float16,
                           gather::get_examples_float16());
}

TEST_F(ValidationTest, gather_float16) {
  const Model model = gather::createTestModel_float16();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape,
                           gather::is_ignored_dynamic_output_shape,
                           gather::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape) {
  const Model model = gather::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed,
                           gather::is_ignored_dynamic_output_shape_relaxed,
                           gather::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8,
                           gather::is_ignored_dynamic_output_shape_quant8,
                           gather::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32,
                           gather::is_ignored_dynamic_output_shape_int32,
                           gather::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16,
                           gather::is_ignored_dynamic_output_shape_float16,
                           gather::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_2,
                           gather::is_ignored_2,
                           gather::get_examples_2());
}

TEST_F(ValidationTest, gather_2) {
  const Model model = gather::createTestModel_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_2,
                           gather::is_ignored_relaxed_2,
                           gather::get_examples_relaxed_2());
}

TEST_F(ValidationTest, gather_relaxed_2) {
  const Model model = gather::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_2,
                           gather::is_ignored_quant8_2,
                           gather::get_examples_quant8_2());
}

TEST_F(ValidationTest, gather_quant8_2) {
  const Model model = gather::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_2,
                           gather::is_ignored_int32_2,
                           gather::get_examples_int32_2());
}

TEST_F(ValidationTest, gather_int32_2) {
  const Model model = gather::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_2,
                           gather::is_ignored_float16_2,
                           gather::get_examples_float16_2());
}

TEST_F(ValidationTest, gather_float16_2) {
  const Model model = gather::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_2,
                           gather::is_ignored_dynamic_output_shape_2,
                           gather::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_2) {
  const Model model = gather::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_2,
                           gather::is_ignored_dynamic_output_shape_relaxed_2,
                           gather::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_2) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_2,
                           gather::is_ignored_dynamic_output_shape_quant8_2,
                           gather::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_2) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_2,
                           gather::is_ignored_dynamic_output_shape_int32_2,
                           gather::get_examples_dynamic_output_shape_int32_2(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_2) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_2,
                           gather::is_ignored_dynamic_output_shape_float16_2,
                           gather::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_2) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_3,
                           gather::is_ignored_3,
                           gather::get_examples_3());
}

TEST_F(ValidationTest, gather_3) {
  const Model model = gather::createTestModel_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_3,
                           gather::is_ignored_relaxed_3,
                           gather::get_examples_relaxed_3());
}

TEST_F(ValidationTest, gather_relaxed_3) {
  const Model model = gather::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_3,
                           gather::is_ignored_quant8_3,
                           gather::get_examples_quant8_3());
}

TEST_F(ValidationTest, gather_quant8_3) {
  const Model model = gather::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_3,
                           gather::is_ignored_int32_3,
                           gather::get_examples_int32_3());
}

TEST_F(ValidationTest, gather_int32_3) {
  const Model model = gather::createTestModel_int32_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_3,
                           gather::is_ignored_float16_3,
                           gather::get_examples_float16_3());
}

TEST_F(ValidationTest, gather_float16_3) {
  const Model model = gather::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_3,
                           gather::is_ignored_dynamic_output_shape_3,
                           gather::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_3) {
  const Model model = gather::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_3,
                           gather::is_ignored_dynamic_output_shape_relaxed_3,
                           gather::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_3) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_3,
                           gather::is_ignored_dynamic_output_shape_quant8_3,
                           gather::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_3) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_3,
                           gather::is_ignored_dynamic_output_shape_int32_3,
                           gather::get_examples_dynamic_output_shape_int32_3(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_3) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_3,
                           gather::is_ignored_dynamic_output_shape_float16_3,
                           gather::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_3) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_4,
                           gather::is_ignored_4,
                           gather::get_examples_4());
}

TEST_F(ValidationTest, gather_4) {
  const Model model = gather::createTestModel_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_4,
                           gather::is_ignored_relaxed_4,
                           gather::get_examples_relaxed_4());
}

TEST_F(ValidationTest, gather_relaxed_4) {
  const Model model = gather::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_4,
                           gather::is_ignored_quant8_4,
                           gather::get_examples_quant8_4());
}

TEST_F(ValidationTest, gather_quant8_4) {
  const Model model = gather::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_4,
                           gather::is_ignored_int32_4,
                           gather::get_examples_int32_4());
}

TEST_F(ValidationTest, gather_int32_4) {
  const Model model = gather::createTestModel_int32_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_4,
                           gather::is_ignored_float16_4,
                           gather::get_examples_float16_4());
}

TEST_F(ValidationTest, gather_float16_4) {
  const Model model = gather::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_4,
                           gather::is_ignored_dynamic_output_shape_4,
                           gather::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_4) {
  const Model model = gather::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_4,
                           gather::is_ignored_dynamic_output_shape_relaxed_4,
                           gather::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_4) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_4,
                           gather::is_ignored_dynamic_output_shape_quant8_4,
                           gather::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_4) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_4,
                           gather::is_ignored_dynamic_output_shape_int32_4,
                           gather::get_examples_dynamic_output_shape_int32_4(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_4) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_4,
                           gather::is_ignored_dynamic_output_shape_float16_4,
                           gather::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_4) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_5,
                           gather::is_ignored_5,
                           gather::get_examples_5());
}

TEST_F(ValidationTest, gather_5) {
  const Model model = gather::createTestModel_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_5,
                           gather::is_ignored_relaxed_5,
                           gather::get_examples_relaxed_5());
}

TEST_F(ValidationTest, gather_relaxed_5) {
  const Model model = gather::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_5,
                           gather::is_ignored_quant8_5,
                           gather::get_examples_quant8_5());
}

TEST_F(ValidationTest, gather_quant8_5) {
  const Model model = gather::createTestModel_quant8_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_5,
                           gather::is_ignored_int32_5,
                           gather::get_examples_int32_5());
}

TEST_F(ValidationTest, gather_int32_5) {
  const Model model = gather::createTestModel_int32_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_5,
                           gather::is_ignored_float16_5,
                           gather::get_examples_float16_5());
}

TEST_F(ValidationTest, gather_float16_5) {
  const Model model = gather::createTestModel_float16_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_5,
                           gather::is_ignored_dynamic_output_shape_5,
                           gather::get_examples_dynamic_output_shape_5(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_5) {
  const Model model = gather::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_5,
                           gather::is_ignored_dynamic_output_shape_relaxed_5,
                           gather::get_examples_dynamic_output_shape_relaxed_5(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_5) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_5,
                           gather::is_ignored_dynamic_output_shape_quant8_5,
                           gather::get_examples_dynamic_output_shape_quant8_5(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_5) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_5,
                           gather::is_ignored_dynamic_output_shape_int32_5,
                           gather::get_examples_dynamic_output_shape_int32_5(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_5) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_5) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_5,
                           gather::is_ignored_dynamic_output_shape_float16_5,
                           gather::get_examples_dynamic_output_shape_float16_5(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_5) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_5();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_6,
                           gather::is_ignored_6,
                           gather::get_examples_6());
}

TEST_F(ValidationTest, gather_6) {
  const Model model = gather::createTestModel_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_6,
                           gather::is_ignored_relaxed_6,
                           gather::get_examples_relaxed_6());
}

TEST_F(ValidationTest, gather_relaxed_6) {
  const Model model = gather::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_6,
                           gather::is_ignored_quant8_6,
                           gather::get_examples_quant8_6());
}

TEST_F(ValidationTest, gather_quant8_6) {
  const Model model = gather::createTestModel_quant8_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_6,
                           gather::is_ignored_int32_6,
                           gather::get_examples_int32_6());
}

TEST_F(ValidationTest, gather_int32_6) {
  const Model model = gather::createTestModel_int32_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_6,
                           gather::is_ignored_float16_6,
                           gather::get_examples_float16_6());
}

TEST_F(ValidationTest, gather_float16_6) {
  const Model model = gather::createTestModel_float16_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_6,
                           gather::is_ignored_dynamic_output_shape_6,
                           gather::get_examples_dynamic_output_shape_6(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_6) {
  const Model model = gather::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_6,
                           gather::is_ignored_dynamic_output_shape_relaxed_6,
                           gather::get_examples_dynamic_output_shape_relaxed_6(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_6) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_6,
                           gather::is_ignored_dynamic_output_shape_quant8_6,
                           gather::get_examples_dynamic_output_shape_quant8_6(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_6) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_6,
                           gather::is_ignored_dynamic_output_shape_int32_6,
                           gather::get_examples_dynamic_output_shape_int32_6(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_6) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_6) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_6,
                           gather::is_ignored_dynamic_output_shape_float16_6,
                           gather::get_examples_dynamic_output_shape_float16_6(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_6) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_6();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_7,
                           gather::is_ignored_7,
                           gather::get_examples_7());
}

TEST_F(ValidationTest, gather_7) {
  const Model model = gather::createTestModel_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_7,
                           gather::is_ignored_relaxed_7,
                           gather::get_examples_relaxed_7());
}

TEST_F(ValidationTest, gather_relaxed_7) {
  const Model model = gather::createTestModel_relaxed_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_7,
                           gather::is_ignored_quant8_7,
                           gather::get_examples_quant8_7());
}

TEST_F(ValidationTest, gather_quant8_7) {
  const Model model = gather::createTestModel_quant8_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_7,
                           gather::is_ignored_int32_7,
                           gather::get_examples_int32_7());
}

TEST_F(ValidationTest, gather_int32_7) {
  const Model model = gather::createTestModel_int32_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_7,
                           gather::is_ignored_float16_7,
                           gather::get_examples_float16_7());
}

TEST_F(ValidationTest, gather_float16_7) {
  const Model model = gather::createTestModel_float16_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_7,
                           gather::is_ignored_dynamic_output_shape_7,
                           gather::get_examples_dynamic_output_shape_7(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_7) {
  const Model model = gather::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_7,
                           gather::is_ignored_dynamic_output_shape_relaxed_7,
                           gather::get_examples_dynamic_output_shape_relaxed_7(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_7) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_7,
                           gather::is_ignored_dynamic_output_shape_quant8_7,
                           gather::get_examples_dynamic_output_shape_quant8_7(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_7) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_7,
                           gather::is_ignored_dynamic_output_shape_int32_7,
                           gather::get_examples_dynamic_output_shape_int32_7(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_7) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_7) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_7,
                           gather::is_ignored_dynamic_output_shape_float16_7,
                           gather::get_examples_dynamic_output_shape_float16_7(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_7) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_7();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, gather_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_8,
                           gather::is_ignored_8,
                           gather::get_examples_8());
}

TEST_F(ValidationTest, gather_8) {
  const Model model = gather::createTestModel_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_relaxed_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_relaxed_8,
                           gather::is_ignored_relaxed_8,
                           gather::get_examples_relaxed_8());
}

TEST_F(ValidationTest, gather_relaxed_8) {
  const Model model = gather::createTestModel_relaxed_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_quant8_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_quant8_8,
                           gather::is_ignored_quant8_8,
                           gather::get_examples_quant8_8());
}

TEST_F(ValidationTest, gather_quant8_8) {
  const Model model = gather::createTestModel_quant8_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_quant8_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_int32_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_int32_8,
                           gather::is_ignored_int32_8,
                           gather::get_examples_int32_8());
}

TEST_F(ValidationTest, gather_int32_8) {
  const Model model = gather::createTestModel_int32_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_int32_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_float16_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_float16_8,
                           gather::is_ignored_float16_8,
                           gather::get_examples_float16_8());
}

TEST_F(ValidationTest, gather_float16_8) {
  const Model model = gather::createTestModel_float16_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_float16_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_8,
                           gather::is_ignored_dynamic_output_shape_8,
                           gather::get_examples_dynamic_output_shape_8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_8) {
  const Model model = gather::createTestModel_dynamic_output_shape_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_relaxed_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_relaxed_8,
                           gather::is_ignored_dynamic_output_shape_relaxed_8,
                           gather::get_examples_dynamic_output_shape_relaxed_8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_relaxed_8) {
  const Model model = gather::createTestModel_dynamic_output_shape_relaxed_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_quant8_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_quant8_8,
                           gather::is_ignored_dynamic_output_shape_quant8_8,
                           gather::get_examples_dynamic_output_shape_quant8_8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_quant8_8) {
  const Model model = gather::createTestModel_dynamic_output_shape_quant8_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_quant8_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_int32_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_int32_8,
                           gather::is_ignored_dynamic_output_shape_int32_8,
                           gather::get_examples_dynamic_output_shape_int32_8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_int32_8) {
  const Model model = gather::createTestModel_dynamic_output_shape_int32_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_int32_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_dynamic_output_shape_float16_8) {
  generated_tests::Execute(device,
                           gather::createTestModel_dynamic_output_shape_float16_8,
                           gather::is_ignored_dynamic_output_shape_float16_8,
                           gather::get_examples_dynamic_output_shape_float16_8(), true);
}

TEST_F(ValidationTest, gather_dynamic_output_shape_float16_8) {
  const Model model = gather::createTestModel_dynamic_output_shape_float16_8();
  const std::vector<Request> requests = createRequests(gather::get_examples_dynamic_output_shape_float16_8());
  validateEverything(model, requests);
}


#endif
// Generated from: gather_higher_rank.mod.py.
namespace gather_higher_rank {
// Generated gather_higher_rank test
#include "examples/gather_higher_rank.example.cpp"
// Generated model constructor
#include "vts_models/gather_higher_rank.model.cpp"
} // namespace gather_higher_rank

TEST_F(NeuralnetworksHidlTest, gather_higher_rank) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel,
                           gather_higher_rank::is_ignored,
                           gather_higher_rank::get_examples());
}

TEST_F(ValidationTest, gather_higher_rank) {
  const Model model = gather_higher_rank::createTestModel();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_higher_rank_relaxed) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_relaxed,
                           gather_higher_rank::is_ignored_relaxed,
                           gather_higher_rank::get_examples_relaxed());
}

TEST_F(ValidationTest, gather_higher_rank_relaxed) {
  const Model model = gather_higher_rank::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_higher_rank_quant8) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_quant8,
                           gather_higher_rank::is_ignored_quant8,
                           gather_higher_rank::get_examples_quant8());
}

TEST_F(ValidationTest, gather_higher_rank_quant8) {
  const Model model = gather_higher_rank::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, gather_higher_rank_int32) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_int32,
                           gather_higher_rank::is_ignored_int32,
                           gather_higher_rank::get_examples_int32());
}

TEST_F(ValidationTest, gather_higher_rank_int32) {
  const Model model = gather_higher_rank::createTestModel_int32();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_higher_rank_dynamic_output_shape) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_dynamic_output_shape,
                           gather_higher_rank::is_ignored_dynamic_output_shape,
                           gather_higher_rank::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, gather_higher_rank_dynamic_output_shape) {
  const Model model = gather_higher_rank::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_higher_rank_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_dynamic_output_shape_relaxed,
                           gather_higher_rank::is_ignored_dynamic_output_shape_relaxed,
                           gather_higher_rank::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, gather_higher_rank_dynamic_output_shape_relaxed) {
  const Model model = gather_higher_rank::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_higher_rank_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_dynamic_output_shape_quant8,
                           gather_higher_rank::is_ignored_dynamic_output_shape_quant8,
                           gather_higher_rank::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, gather_higher_rank_dynamic_output_shape_quant8) {
  const Model model = gather_higher_rank::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, gather_higher_rank_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           gather_higher_rank::createTestModel_dynamic_output_shape_int32,
                           gather_higher_rank::is_ignored_dynamic_output_shape_int32,
                           gather_higher_rank::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, gather_higher_rank_dynamic_output_shape_int32) {
  const Model model = gather_higher_rank::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(gather_higher_rank::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
// Generated from: generate_proposals.mod.py.
namespace generate_proposals {
// Generated generate_proposals test
#include "examples/generate_proposals.example.cpp"
// Generated model constructor
#include "vts_models/generate_proposals.model.cpp"
} // namespace generate_proposals

TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc,
                           generate_proposals::is_ignored_nhwc,
                           generate_proposals::get_examples_nhwc());
}

TEST_F(ValidationTest, generate_proposals_nhwc) {
  const Model model = generate_proposals::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_relaxed) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_relaxed,
                           generate_proposals::is_ignored_nhwc_relaxed,
                           generate_proposals::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, generate_proposals_nhwc_relaxed) {
  const Model model = generate_proposals::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_quant8) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_quant8,
                           generate_proposals::is_ignored_nhwc_quant8,
                           generate_proposals::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, generate_proposals_nhwc_quant8) {
  const Model model = generate_proposals::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_float16) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_float16,
                           generate_proposals::is_ignored_nhwc_float16,
                           generate_proposals::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, generate_proposals_nhwc_float16) {
  const Model model = generate_proposals::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw,
                           generate_proposals::is_ignored_nchw,
                           generate_proposals::get_examples_nchw());
}

TEST_F(ValidationTest, generate_proposals_nchw) {
  const Model model = generate_proposals::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_relaxed) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_relaxed,
                           generate_proposals::is_ignored_nchw_relaxed,
                           generate_proposals::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, generate_proposals_nchw_relaxed) {
  const Model model = generate_proposals::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_quant8) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_quant8,
                           generate_proposals::is_ignored_nchw_quant8,
                           generate_proposals::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, generate_proposals_nchw_quant8) {
  const Model model = generate_proposals::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_float16) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_float16,
                           generate_proposals::is_ignored_nchw_float16,
                           generate_proposals::get_examples_nchw_float16());
}

TEST_F(ValidationTest, generate_proposals_nchw_float16) {
  const Model model = generate_proposals::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_relaxed) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_quant8,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_quant8,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_quant8) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_float16,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_float16,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_float16) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw,
                           generate_proposals::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_relaxed,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_relaxed,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_relaxed) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_quant8,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_quant8,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_quant8) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_float16,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_float16,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_float16) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_2,
                           generate_proposals::is_ignored_nhwc_2,
                           generate_proposals::get_examples_nhwc_2());
}

TEST_F(ValidationTest, generate_proposals_nhwc_2) {
  const Model model = generate_proposals::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_relaxed_2,
                           generate_proposals::is_ignored_nhwc_relaxed_2,
                           generate_proposals::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, generate_proposals_nhwc_relaxed_2) {
  const Model model = generate_proposals::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_quant8_2,
                           generate_proposals::is_ignored_nhwc_quant8_2,
                           generate_proposals::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, generate_proposals_nhwc_quant8_2) {
  const Model model = generate_proposals::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nhwc_float16_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nhwc_float16_2,
                           generate_proposals::is_ignored_nhwc_float16_2,
                           generate_proposals::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, generate_proposals_nhwc_float16_2) {
  const Model model = generate_proposals::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_2,
                           generate_proposals::is_ignored_nchw_2,
                           generate_proposals::get_examples_nchw_2());
}

TEST_F(ValidationTest, generate_proposals_nchw_2) {
  const Model model = generate_proposals::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_relaxed_2,
                           generate_proposals::is_ignored_nchw_relaxed_2,
                           generate_proposals::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, generate_proposals_nchw_relaxed_2) {
  const Model model = generate_proposals::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_quant8_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_quant8_2,
                           generate_proposals::is_ignored_nchw_quant8_2,
                           generate_proposals::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, generate_proposals_nchw_quant8_2) {
  const Model model = generate_proposals::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, generate_proposals_nchw_float16_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_nchw_float16_2,
                           generate_proposals::is_ignored_nchw_float16_2,
                           generate_proposals::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, generate_proposals_nchw_float16_2) {
  const Model model = generate_proposals::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_2,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           generate_proposals::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nhwc_float16_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_2,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_quant8_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, generate_proposals_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           generate_proposals::createTestModel_dynamic_output_shape_nchw_float16_2,
                           generate_proposals::is_ignored_dynamic_output_shape_nchw_float16_2,
                           generate_proposals::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, generate_proposals_dynamic_output_shape_nchw_float16_2) {
  const Model model = generate_proposals::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(generate_proposals::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: greater.mod.py.
namespace greater {
// Generated greater test
#include "examples/greater.example.cpp"
// Generated model constructor
#include "vts_models/greater.model.cpp"
} // namespace greater

TEST_F(NeuralnetworksHidlTest, greater_simple) {
  generated_tests::Execute(device,
                           greater::createTestModel,
                           greater::is_ignored,
                           greater::get_examples_simple());
}

TEST_F(ValidationTest, greater_simple) {
  const Model model = greater::createTestModel();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_simple_int32) {
  generated_tests::Execute(device,
                           greater::createTestModel_int32,
                           greater::is_ignored_int32,
                           greater::get_examples_simple_int32());
}

TEST_F(ValidationTest, greater_simple_int32) {
  const Model model = greater::createTestModel_int32();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_simple_float16) {
  generated_tests::Execute(device,
                           greater::createTestModel_float16,
                           greater::is_ignored_float16,
                           greater::get_examples_simple_float16());
}

TEST_F(ValidationTest, greater_simple_float16) {
  const Model model = greater::createTestModel_float16();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_simple_relaxed) {
  generated_tests::Execute(device,
                           greater::createTestModel_relaxed,
                           greater::is_ignored_relaxed,
                           greater::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, greater_simple_relaxed) {
  const Model model = greater::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape,
                           greater::is_ignored_dynamic_output_shape,
                           greater::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_simple_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_int32,
                           greater::is_ignored_dynamic_output_shape_int32,
                           greater::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, greater_simple_dynamic_output_shape_int32) {
  const Model model = greater::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_float16,
                           greater::is_ignored_dynamic_output_shape_float16,
                           greater::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, greater_simple_dynamic_output_shape_float16) {
  const Model model = greater::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_relaxed,
                           greater::is_ignored_dynamic_output_shape_relaxed,
                           greater::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, greater_simple_dynamic_output_shape_relaxed) {
  const Model model = greater::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(greater::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_broadcast) {
  generated_tests::Execute(device,
                           greater::createTestModel_2,
                           greater::is_ignored_2,
                           greater::get_examples_broadcast());
}

TEST_F(ValidationTest, greater_broadcast) {
  const Model model = greater::createTestModel_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_broadcast_int32) {
  generated_tests::Execute(device,
                           greater::createTestModel_int32_2,
                           greater::is_ignored_int32_2,
                           greater::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, greater_broadcast_int32) {
  const Model model = greater::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_broadcast_float16) {
  generated_tests::Execute(device,
                           greater::createTestModel_float16_2,
                           greater::is_ignored_float16_2,
                           greater::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, greater_broadcast_float16) {
  const Model model = greater::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_broadcast_relaxed) {
  generated_tests::Execute(device,
                           greater::createTestModel_relaxed_2,
                           greater::is_ignored_relaxed_2,
                           greater::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, greater_broadcast_relaxed) {
  const Model model = greater::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_2,
                           greater::is_ignored_dynamic_output_shape_2,
                           greater::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_broadcast_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_int32_2,
                           greater::is_ignored_dynamic_output_shape_int32_2,
                           greater::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, greater_broadcast_dynamic_output_shape_int32) {
  const Model model = greater::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_float16_2,
                           greater::is_ignored_dynamic_output_shape_float16_2,
                           greater::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, greater_broadcast_dynamic_output_shape_float16) {
  const Model model = greater::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_relaxed_2,
                           greater::is_ignored_dynamic_output_shape_relaxed_2,
                           greater::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, greater_broadcast_dynamic_output_shape_relaxed) {
  const Model model = greater::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(greater::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_quantized_different_scale) {
  generated_tests::Execute(device,
                           greater::createTestModel_3,
                           greater::is_ignored_3,
                           greater::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, greater_quantized_different_scale) {
  const Model model = greater::createTestModel_3();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_3,
                           greater::is_ignored_dynamic_output_shape_3,
                           greater::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_quantized_different_scale_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           greater::createTestModel_4,
                           greater::is_ignored_4,
                           greater::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, greater_quantized_different_zero_point) {
  const Model model = greater::createTestModel_4();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_4,
                           greater::is_ignored_dynamic_output_shape_4,
                           greater::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           greater::createTestModel_5,
                           greater::is_ignored_5,
                           greater::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, greater_quantized_overflow_second_input_if_requantized) {
  const Model model = greater::createTestModel_5();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_5,
                           greater::is_ignored_dynamic_output_shape_5,
                           greater::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           greater::createTestModel_6,
                           greater::is_ignored_6,
                           greater::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, greater_quantized_overflow_first_input_if_requantized) {
  const Model model = greater::createTestModel_6();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_6,
                           greater::is_ignored_dynamic_output_shape_6,
                           greater::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(greater::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_boolean) {
  generated_tests::Execute(device,
                           greater::createTestModel_7,
                           greater::is_ignored_7,
                           greater::get_examples_boolean());
}

TEST_F(ValidationTest, greater_boolean) {
  const Model model = greater::createTestModel_7();
  const std::vector<Request> requests = createRequests(greater::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater::createTestModel_dynamic_output_shape_7,
                           greater::is_ignored_dynamic_output_shape_7,
                           greater::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_boolean_dynamic_output_shape) {
  const Model model = greater::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(greater::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: greater_equal.mod.py.
namespace greater_equal {
// Generated greater_equal test
#include "examples/greater_equal.example.cpp"
// Generated model constructor
#include "vts_models/greater_equal.model.cpp"
} // namespace greater_equal

TEST_F(NeuralnetworksHidlTest, greater_equal_simple) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel,
                           greater_equal::is_ignored,
                           greater_equal::get_examples_simple());
}

TEST_F(ValidationTest, greater_equal_simple) {
  const Model model = greater_equal::createTestModel();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_simple_int32) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_int32,
                           greater_equal::is_ignored_int32,
                           greater_equal::get_examples_simple_int32());
}

TEST_F(ValidationTest, greater_equal_simple_int32) {
  const Model model = greater_equal::createTestModel_int32();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_simple_float16) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_float16,
                           greater_equal::is_ignored_float16,
                           greater_equal::get_examples_simple_float16());
}

TEST_F(ValidationTest, greater_equal_simple_float16) {
  const Model model = greater_equal::createTestModel_float16();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_simple_relaxed) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_relaxed,
                           greater_equal::is_ignored_relaxed,
                           greater_equal::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, greater_equal_simple_relaxed) {
  const Model model = greater_equal::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape,
                           greater_equal::is_ignored_dynamic_output_shape,
                           greater_equal::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_simple_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_int32,
                           greater_equal::is_ignored_dynamic_output_shape_int32,
                           greater_equal::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, greater_equal_simple_dynamic_output_shape_int32) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_float16,
                           greater_equal::is_ignored_dynamic_output_shape_float16,
                           greater_equal::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, greater_equal_simple_dynamic_output_shape_float16) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_relaxed,
                           greater_equal::is_ignored_dynamic_output_shape_relaxed,
                           greater_equal::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, greater_equal_simple_dynamic_output_shape_relaxed) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_broadcast) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_2,
                           greater_equal::is_ignored_2,
                           greater_equal::get_examples_broadcast());
}

TEST_F(ValidationTest, greater_equal_broadcast) {
  const Model model = greater_equal::createTestModel_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_broadcast_int32) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_int32_2,
                           greater_equal::is_ignored_int32_2,
                           greater_equal::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, greater_equal_broadcast_int32) {
  const Model model = greater_equal::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_broadcast_float16) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_float16_2,
                           greater_equal::is_ignored_float16_2,
                           greater_equal::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, greater_equal_broadcast_float16) {
  const Model model = greater_equal::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, greater_equal_broadcast_relaxed) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_relaxed_2,
                           greater_equal::is_ignored_relaxed_2,
                           greater_equal::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, greater_equal_broadcast_relaxed) {
  const Model model = greater_equal::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_2,
                           greater_equal::is_ignored_dynamic_output_shape_2,
                           greater_equal::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_broadcast_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_int32_2,
                           greater_equal::is_ignored_dynamic_output_shape_int32_2,
                           greater_equal::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, greater_equal_broadcast_dynamic_output_shape_int32) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_float16_2,
                           greater_equal::is_ignored_dynamic_output_shape_float16_2,
                           greater_equal::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, greater_equal_broadcast_dynamic_output_shape_float16) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_relaxed_2,
                           greater_equal::is_ignored_dynamic_output_shape_relaxed_2,
                           greater_equal::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, greater_equal_broadcast_dynamic_output_shape_relaxed) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_quantized_different_scale) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_3,
                           greater_equal::is_ignored_3,
                           greater_equal::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, greater_equal_quantized_different_scale) {
  const Model model = greater_equal::createTestModel_3();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_3,
                           greater_equal::is_ignored_dynamic_output_shape_3,
                           greater_equal::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_quantized_different_scale_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_4,
                           greater_equal::is_ignored_4,
                           greater_equal::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, greater_equal_quantized_different_zero_point) {
  const Model model = greater_equal::createTestModel_4();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_4,
                           greater_equal::is_ignored_dynamic_output_shape_4,
                           greater_equal::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_5,
                           greater_equal::is_ignored_5,
                           greater_equal::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, greater_equal_quantized_overflow_second_input_if_requantized) {
  const Model model = greater_equal::createTestModel_5();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_5,
                           greater_equal::is_ignored_dynamic_output_shape_5,
                           greater_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_6,
                           greater_equal::is_ignored_6,
                           greater_equal::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, greater_equal_quantized_overflow_first_input_if_requantized) {
  const Model model = greater_equal::createTestModel_6();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_6,
                           greater_equal::is_ignored_dynamic_output_shape_6,
                           greater_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, greater_equal_boolean) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_7,
                           greater_equal::is_ignored_7,
                           greater_equal::get_examples_boolean());
}

TEST_F(ValidationTest, greater_equal_boolean) {
  const Model model = greater_equal::createTestModel_7();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, greater_equal_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           greater_equal::createTestModel_dynamic_output_shape_7,
                           greater_equal::is_ignored_dynamic_output_shape_7,
                           greater_equal::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, greater_equal_boolean_dynamic_output_shape) {
  const Model model = greater_equal::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(greater_equal::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: grouped_conv2d.mod.py.
namespace grouped_conv2d {
// Generated grouped_conv2d test
#include "examples/grouped_conv2d.example.cpp"
// Generated model constructor
#include "vts_models/grouped_conv2d.model.cpp"
} // namespace grouped_conv2d

TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none,
                           grouped_conv2d::is_ignored_nhwc_none,
                           grouped_conv2d::get_examples_nhwc_none());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_none_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_none_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_relaxed,
                           grouped_conv2d::is_ignored_nhwc_none_relaxed,
                           grouped_conv2d::get_examples_nhwc_none_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_none_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_none_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_quant8,
                           grouped_conv2d::is_ignored_nhwc_none_quant8,
                           grouped_conv2d::get_examples_nhwc_none_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_quant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_none_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_none_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_quant8_2,
                           grouped_conv2d::is_ignored_nhwc_none_quant8_2,
                           grouped_conv2d::get_examples_nhwc_none_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_none_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_none_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_channelQuant8,
                           grouped_conv2d::is_ignored_nhwc_none_channelQuant8,
                           grouped_conv2d::get_examples_nhwc_none_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_none_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_channelQuant8_2,
                           grouped_conv2d::is_ignored_nhwc_none_channelQuant8_2,
                           grouped_conv2d::get_examples_nhwc_none_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_float16,
                           grouped_conv2d::is_ignored_nhwc_none_float16,
                           grouped_conv2d::get_examples_nhwc_none_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_float16) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_none_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_none_float16_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_none_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_none_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_none_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu,
                           grouped_conv2d::is_ignored_nhwc_relu,
                           grouped_conv2d::get_examples_nhwc_relu());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_relaxed,
                           grouped_conv2d::is_ignored_nhwc_relu_relaxed,
                           grouped_conv2d::get_examples_nhwc_relu_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_quant8,
                           grouped_conv2d::is_ignored_nhwc_relu_quant8,
                           grouped_conv2d::get_examples_nhwc_relu_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_quant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_quant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu_quant8_2,
                           grouped_conv2d::get_examples_nhwc_relu_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_channelQuant8,
                           grouped_conv2d::is_ignored_nhwc_relu_channelQuant8,
                           grouped_conv2d::get_examples_nhwc_relu_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu_channelQuant8_2,
                           grouped_conv2d::get_examples_nhwc_relu_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_float16,
                           grouped_conv2d::is_ignored_nhwc_relu_float16,
                           grouped_conv2d::get_examples_nhwc_relu_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_float16) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu_float16_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1,
                           grouped_conv2d::is_ignored_nhwc_relu1,
                           grouped_conv2d::get_examples_nhwc_relu1());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu1_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu1_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_relaxed,
                           grouped_conv2d::is_ignored_nhwc_relu1_relaxed,
                           grouped_conv2d::get_examples_nhwc_relu1_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu1_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu1_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_quant8,
                           grouped_conv2d::is_ignored_nhwc_relu1_quant8,
                           grouped_conv2d::get_examples_nhwc_relu1_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_quant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu1_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_quant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu1_quant8_2,
                           grouped_conv2d::get_examples_nhwc_relu1_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8,
                           grouped_conv2d::is_ignored_nhwc_relu1_channelQuant8,
                           grouped_conv2d::get_examples_nhwc_relu1_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu1_channelQuant8_2,
                           grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_float16,
                           grouped_conv2d::is_ignored_nhwc_relu1_float16,
                           grouped_conv2d::get_examples_nhwc_relu1_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_float16) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu1_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu1_float16_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu1_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu1_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6,
                           grouped_conv2d::is_ignored_nhwc_relu6,
                           grouped_conv2d::get_examples_nhwc_relu6());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu6_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu6_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_relaxed,
                           grouped_conv2d::is_ignored_nhwc_relu6_relaxed,
                           grouped_conv2d::get_examples_nhwc_relu6_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu6_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu6_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_quant8,
                           grouped_conv2d::is_ignored_nhwc_relu6_quant8,
                           grouped_conv2d::get_examples_nhwc_relu6_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_quant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu6_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_quant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu6_quant8_2,
                           grouped_conv2d::get_examples_nhwc_relu6_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8,
                           grouped_conv2d::is_ignored_nhwc_relu6_channelQuant8,
                           grouped_conv2d::get_examples_nhwc_relu6_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_2,
                           grouped_conv2d::is_ignored_nhwc_relu6_channelQuant8_2,
                           grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nhwc_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_float16,
                           grouped_conv2d::is_ignored_nhwc_relu6_float16,
                           grouped_conv2d::get_examples_nhwc_relu6_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_float16) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nhwc_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nhwc_relu6_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nhwc_relu6_float16_weight_as_input,
                           grouped_conv2d::get_examples_nhwc_relu6_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nhwc_relu6_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nhwc_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nhwc_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none,
                           grouped_conv2d::is_ignored_nchw_none,
                           grouped_conv2d::get_examples_nchw_none());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none) {
  const Model model = grouped_conv2d::createTestModel_nchw_none();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_none_weight_as_input,
                           grouped_conv2d::get_examples_nchw_none_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_relaxed,
                           grouped_conv2d::is_ignored_nchw_none_relaxed,
                           grouped_conv2d::get_examples_nchw_none_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_none_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nchw_none_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_quant8,
                           grouped_conv2d::is_ignored_nchw_none_quant8,
                           grouped_conv2d::get_examples_nchw_none_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_quant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_none_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_none_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_quant8_2,
                           grouped_conv2d::is_ignored_nchw_none_quant8_2,
                           grouped_conv2d::get_examples_nchw_none_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_none_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_none_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_channelQuant8,
                           grouped_conv2d::is_ignored_nchw_none_channelQuant8,
                           grouped_conv2d::get_examples_nchw_none_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_none_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_channelQuant8_2,
                           grouped_conv2d::is_ignored_nchw_none_channelQuant8_2,
                           grouped_conv2d::get_examples_nchw_none_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_float16,
                           grouped_conv2d::is_ignored_nchw_none_float16,
                           grouped_conv2d::get_examples_nchw_none_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_float16) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_none_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_none_float16_weight_as_input,
                           grouped_conv2d::get_examples_nchw_none_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_none_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_none_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu,
                           grouped_conv2d::is_ignored_nchw_relu,
                           grouped_conv2d::get_examples_nchw_relu());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_relaxed,
                           grouped_conv2d::is_ignored_nchw_relu_relaxed,
                           grouped_conv2d::get_examples_nchw_relu_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_quant8,
                           grouped_conv2d::is_ignored_nchw_relu_quant8,
                           grouped_conv2d::get_examples_nchw_relu_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_quant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_quant8_2,
                           grouped_conv2d::is_ignored_nchw_relu_quant8_2,
                           grouped_conv2d::get_examples_nchw_relu_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_channelQuant8,
                           grouped_conv2d::is_ignored_nchw_relu_channelQuant8,
                           grouped_conv2d::get_examples_nchw_relu_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_channelQuant8_2,
                           grouped_conv2d::is_ignored_nchw_relu_channelQuant8_2,
                           grouped_conv2d::get_examples_nchw_relu_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_float16,
                           grouped_conv2d::is_ignored_nchw_relu_float16,
                           grouped_conv2d::get_examples_nchw_relu_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_float16) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu_float16_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1,
                           grouped_conv2d::is_ignored_nchw_relu1,
                           grouped_conv2d::get_examples_nchw_relu1());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu1_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu1_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_relaxed,
                           grouped_conv2d::is_ignored_nchw_relu1_relaxed,
                           grouped_conv2d::get_examples_nchw_relu1_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu1_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu1_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_quant8,
                           grouped_conv2d::is_ignored_nchw_relu1_quant8,
                           grouped_conv2d::get_examples_nchw_relu1_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_quant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu1_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu1_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_quant8_2,
                           grouped_conv2d::is_ignored_nchw_relu1_quant8_2,
                           grouped_conv2d::get_examples_nchw_relu1_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu1_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_channelQuant8,
                           grouped_conv2d::is_ignored_nchw_relu1_channelQuant8,
                           grouped_conv2d::get_examples_nchw_relu1_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_2,
                           grouped_conv2d::is_ignored_nchw_relu1_channelQuant8_2,
                           grouped_conv2d::get_examples_nchw_relu1_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_float16,
                           grouped_conv2d::is_ignored_nchw_relu1_float16,
                           grouped_conv2d::get_examples_nchw_relu1_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_float16) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu1_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu1_float16_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu1_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu1_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6,
                           grouped_conv2d::is_ignored_nchw_relu6,
                           grouped_conv2d::get_examples_nchw_relu6());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu6_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu6_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_relaxed,
                           grouped_conv2d::is_ignored_nchw_relu6_relaxed,
                           grouped_conv2d::get_examples_nchw_relu6_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_relaxed) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu6_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu6_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_quant8,
                           grouped_conv2d::is_ignored_nchw_relu6_quant8,
                           grouped_conv2d::get_examples_nchw_relu6_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_quant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu6_quant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu6_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_quant8_2,
                           grouped_conv2d::is_ignored_nchw_relu6_quant8_2,
                           grouped_conv2d::get_examples_nchw_relu6_quant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu6_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_channelQuant8,
                           grouped_conv2d::is_ignored_nchw_relu6_channelQuant8,
                           grouped_conv2d::get_examples_nchw_relu6_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_2,
                           grouped_conv2d::is_ignored_nchw_relu6_channelQuant8_2,
                           grouped_conv2d::get_examples_nchw_relu6_channelQuant8_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_nchw_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_float16,
                           grouped_conv2d::is_ignored_nchw_relu6_float16,
                           grouped_conv2d::get_examples_nchw_relu6_float16());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_float16) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_nchw_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_nchw_relu6_float16_weight_as_input,
                           grouped_conv2d::is_ignored_nchw_relu6_float16_weight_as_input,
                           grouped_conv2d::get_examples_nchw_relu6_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_nchw_relu6_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_nchw_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_nchw_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_none_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_none_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu1_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nhwc_relu6_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_none_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_none_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_none_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu1_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_relaxed,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_relaxed) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_float16,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_float16) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16_weight_as_input,
                           grouped_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_float16_weight_as_input,
                           grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_dynamic_output_shape_nchw_relu6_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc,
                           grouped_conv2d::is_ignored_large_nhwc,
                           grouped_conv2d::get_examples_large_nhwc());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_weight_as_input,
                           grouped_conv2d::is_ignored_large_nhwc_weight_as_input,
                           grouped_conv2d::get_examples_large_nhwc_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_relaxed,
                           grouped_conv2d::is_ignored_large_nhwc_relaxed,
                           grouped_conv2d::get_examples_large_nhwc_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_relaxed) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_large_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_large_nhwc_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_quant8,
                           grouped_conv2d::is_ignored_large_nhwc_quant8,
                           grouped_conv2d::get_examples_large_nhwc_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_quant8) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_nhwc_quant8_weight_as_input,
                           grouped_conv2d::get_examples_large_nhwc_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_channelQuant8,
                           grouped_conv2d::is_ignored_large_nhwc_channelQuant8,
                           grouped_conv2d::get_examples_large_nhwc_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_large_nhwc_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_float16,
                           grouped_conv2d::is_ignored_large_nhwc_float16,
                           grouped_conv2d::get_examples_large_nhwc_float16());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_float16) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nhwc_float16_weight_as_input,
                           grouped_conv2d::is_ignored_large_nhwc_float16_weight_as_input,
                           grouped_conv2d::get_examples_large_nhwc_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nhwc_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw,
                           grouped_conv2d::is_ignored_large_nchw,
                           grouped_conv2d::get_examples_large_nchw());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw) {
  const Model model = grouped_conv2d::createTestModel_large_nchw();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_weight_as_input,
                           grouped_conv2d::is_ignored_large_nchw_weight_as_input,
                           grouped_conv2d::get_examples_large_nchw_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_relaxed,
                           grouped_conv2d::is_ignored_large_nchw_relaxed,
                           grouped_conv2d::get_examples_large_nchw_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_relaxed) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_large_nchw_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_large_nchw_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_quant8,
                           grouped_conv2d::is_ignored_large_nchw_quant8,
                           grouped_conv2d::get_examples_large_nchw_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_quant8) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_nchw_quant8_weight_as_input,
                           grouped_conv2d::get_examples_large_nchw_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_channelQuant8,
                           grouped_conv2d::is_ignored_large_nchw_channelQuant8,
                           grouped_conv2d::get_examples_large_nchw_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_large_nchw_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_float16,
                           grouped_conv2d::is_ignored_large_nchw_float16,
                           grouped_conv2d::get_examples_large_nchw_float16());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_float16) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_large_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_nchw_float16_weight_as_input,
                           grouped_conv2d::is_ignored_large_nchw_float16_weight_as_input,
                           grouped_conv2d::get_examples_large_nchw_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_large_nchw_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_relaxed,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_relaxed,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_relaxed) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_quant8,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_quant8,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_quant8) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_float16,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_float16,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_float16) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_float16_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nhwc_float16_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nhwc_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_relaxed,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_relaxed,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_relaxed) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_quant8,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_quant8,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_quant8) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_quant8_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_channelQuant8,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_channelQuant8,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_float16,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_float16,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_float16) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_large_dynamic_output_shape_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_float16_weight_as_input,
                           grouped_conv2d::is_ignored_large_dynamic_output_shape_nchw_float16_weight_as_input,
                           grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_large_dynamic_output_shape_nchw_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_large_dynamic_output_shape_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_large_dynamic_output_shape_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc,
                           grouped_conv2d::is_ignored_channel_nhwc,
                           grouped_conv2d::get_examples_channel_nhwc());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nhwc_weight_as_input,
                           grouped_conv2d::get_examples_channel_nhwc_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_relaxed,
                           grouped_conv2d::is_ignored_channel_nhwc_relaxed,
                           grouped_conv2d::get_examples_channel_nhwc_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_relaxed) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_channel_nhwc_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_quant8,
                           grouped_conv2d::is_ignored_channel_nhwc_quant8,
                           grouped_conv2d::get_examples_channel_nhwc_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_quant8) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nhwc_quant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_nhwc_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_channelQuant8,
                           grouped_conv2d::is_ignored_channel_nhwc_channelQuant8,
                           grouped_conv2d::get_examples_channel_nhwc_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_nhwc_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_float16,
                           grouped_conv2d::is_ignored_channel_nhwc_float16,
                           grouped_conv2d::get_examples_channel_nhwc_float16());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_float16) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nhwc_float16_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nhwc_float16_weight_as_input,
                           grouped_conv2d::get_examples_channel_nhwc_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nhwc_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw,
                           grouped_conv2d::is_ignored_channel_nchw,
                           grouped_conv2d::get_examples_channel_nchw());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nchw_weight_as_input,
                           grouped_conv2d::get_examples_channel_nchw_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_relaxed,
                           grouped_conv2d::is_ignored_channel_nchw_relaxed,
                           grouped_conv2d::get_examples_channel_nchw_relaxed());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_relaxed) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nchw_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_channel_nchw_relaxed_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_quant8,
                           grouped_conv2d::is_ignored_channel_nchw_quant8,
                           grouped_conv2d::get_examples_channel_nchw_quant8());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_quant8) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nchw_quant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_nchw_quant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_channelQuant8,
                           grouped_conv2d::is_ignored_channel_nchw_channelQuant8,
                           grouped_conv2d::get_examples_channel_nchw_channelQuant8());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_nchw_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_float16,
                           grouped_conv2d::is_ignored_channel_nchw_float16,
                           grouped_conv2d::get_examples_channel_nchw_float16());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_float16) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, grouped_conv2d_channel_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_nchw_float16_weight_as_input,
                           grouped_conv2d::is_ignored_channel_nchw_float16_weight_as_input,
                           grouped_conv2d::get_examples_channel_nchw_float16_weight_as_input());
}

TEST_F(ValidationTest, grouped_conv2d_channel_nchw_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_relaxed,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_relaxed,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_relaxed) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_quant8,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_quant8,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_quant8) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_channelQuant8,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_float16,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_float16,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_float16) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_float16_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nhwc_float16_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nhwc_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_relaxed,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_relaxed,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_relaxed) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_quant8,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_quant8,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_quant8) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_quant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_quant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_quant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_channelQuant8,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_float16,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_float16,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_float16) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, grouped_conv2d_channel_dynamic_output_shape_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_float16_weight_as_input,
                           grouped_conv2d::is_ignored_channel_dynamic_output_shape_nchw_float16_weight_as_input,
                           grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, grouped_conv2d_channel_dynamic_output_shape_nchw_float16_weight_as_input) {
  const Model model = grouped_conv2d::createTestModel_channel_dynamic_output_shape_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(grouped_conv2d::get_examples_channel_dynamic_output_shape_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
// Generated from: heatmap_max_keypoint.mod.py.
namespace heatmap_max_keypoint {
// Generated heatmap_max_keypoint test
#include "examples/heatmap_max_keypoint.example.cpp"
// Generated model constructor
#include "vts_models/heatmap_max_keypoint.model.cpp"
} // namespace heatmap_max_keypoint

TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc,
                           heatmap_max_keypoint::is_ignored_nhwc,
                           heatmap_max_keypoint::get_examples_nhwc());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_relaxed) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_relaxed,
                           heatmap_max_keypoint::is_ignored_nhwc_relaxed,
                           heatmap_max_keypoint::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_relaxed) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_float16) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_float16,
                           heatmap_max_keypoint::is_ignored_nhwc_float16,
                           heatmap_max_keypoint::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_float16) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw,
                           heatmap_max_keypoint::is_ignored_nchw,
                           heatmap_max_keypoint::get_examples_nchw());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_relaxed) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_relaxed,
                           heatmap_max_keypoint::is_ignored_nchw_relaxed,
                           heatmap_max_keypoint::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_relaxed) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_float16) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_float16,
                           heatmap_max_keypoint::is_ignored_nchw_float16,
                           heatmap_max_keypoint::get_examples_nchw_float16());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_float16) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_relaxed) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_float16,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_float16,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_float16) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_relaxed,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_relaxed,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_relaxed) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_float16,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_float16,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_float16) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_2,
                           heatmap_max_keypoint::is_ignored_nhwc_2,
                           heatmap_max_keypoint::get_examples_nhwc_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_relaxed_2,
                           heatmap_max_keypoint::is_ignored_nhwc_relaxed_2,
                           heatmap_max_keypoint::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_relaxed_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_float16_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_float16_2,
                           heatmap_max_keypoint::is_ignored_nhwc_float16_2,
                           heatmap_max_keypoint::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_float16_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_quant8) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_quant8,
                           heatmap_max_keypoint::is_ignored_nhwc_quant8,
                           heatmap_max_keypoint::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_quant8) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_2,
                           heatmap_max_keypoint::is_ignored_nchw_2,
                           heatmap_max_keypoint::get_examples_nchw_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_relaxed_2,
                           heatmap_max_keypoint::is_ignored_nchw_relaxed_2,
                           heatmap_max_keypoint::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_relaxed_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_float16_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_float16_2,
                           heatmap_max_keypoint::is_ignored_nchw_float16_2,
                           heatmap_max_keypoint::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_float16_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_quant8) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_quant8,
                           heatmap_max_keypoint::is_ignored_nchw_quant8,
                           heatmap_max_keypoint::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_quant8) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_float16_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_quant8,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_quant8,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_quant8) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_float16_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_float16_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_float16_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_quant8,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_quant8,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_quant8) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nhwc_quant8_2,
                           heatmap_max_keypoint::is_ignored_nhwc_quant8_2,
                           heatmap_max_keypoint::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nhwc_quant8_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, heatmap_max_keypoint_nchw_quant8_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_nchw_quant8_2,
                           heatmap_max_keypoint::is_ignored_nchw_quant8_2,
                           heatmap_max_keypoint::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, heatmap_max_keypoint_nchw_quant8_2) {
  const Model model = heatmap_max_keypoint::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, heatmap_max_keypoint_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           heatmap_max_keypoint::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, heatmap_max_keypoint_dynamic_output_shape_nchw_quant8_2) {
  const Model model = heatmap_max_keypoint::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(heatmap_max_keypoint::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
// Generated from: instance_normalization.mod.py.
namespace instance_normalization {
// Generated instance_normalization test
#include "examples/instance_normalization.example.cpp"
// Generated model constructor
#include "vts_models/instance_normalization.model.cpp"
} // namespace instance_normalization

TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc,
                           instance_normalization::is_ignored_nhwc,
                           instance_normalization::get_examples_nhwc());
}

TEST_F(ValidationTest, instance_normalization_nhwc) {
  const Model model = instance_normalization::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc_relaxed) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc_relaxed,
                           instance_normalization::is_ignored_nhwc_relaxed,
                           instance_normalization::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, instance_normalization_nhwc_relaxed) {
  const Model model = instance_normalization::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc_float16) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc_float16,
                           instance_normalization::is_ignored_nhwc_float16,
                           instance_normalization::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, instance_normalization_nhwc_float16) {
  const Model model = instance_normalization::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw,
                           instance_normalization::is_ignored_nchw,
                           instance_normalization::get_examples_nchw());
}

TEST_F(ValidationTest, instance_normalization_nchw) {
  const Model model = instance_normalization::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw_relaxed) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw_relaxed,
                           instance_normalization::is_ignored_nchw_relaxed,
                           instance_normalization::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, instance_normalization_nchw_relaxed) {
  const Model model = instance_normalization::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw_float16) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw_float16,
                           instance_normalization::is_ignored_nchw_float16,
                           instance_normalization::get_examples_nchw_float16());
}

TEST_F(ValidationTest, instance_normalization_nchw_float16) {
  const Model model = instance_normalization::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc_relaxed) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc_float16,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc_float16,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc_float16) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw,
                           instance_normalization::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw_relaxed,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw_relaxed,
                           instance_normalization::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw_relaxed) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw_float16,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw_float16,
                           instance_normalization::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw_float16) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc_2,
                           instance_normalization::is_ignored_nhwc_2,
                           instance_normalization::get_examples_nhwc_2());
}

TEST_F(ValidationTest, instance_normalization_nhwc_2) {
  const Model model = instance_normalization::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc_relaxed_2,
                           instance_normalization::is_ignored_nhwc_relaxed_2,
                           instance_normalization::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, instance_normalization_nhwc_relaxed_2) {
  const Model model = instance_normalization::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nhwc_float16_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nhwc_float16_2,
                           instance_normalization::is_ignored_nhwc_float16_2,
                           instance_normalization::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, instance_normalization_nhwc_float16_2) {
  const Model model = instance_normalization::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw_2,
                           instance_normalization::is_ignored_nchw_2,
                           instance_normalization::get_examples_nchw_2());
}

TEST_F(ValidationTest, instance_normalization_nchw_2) {
  const Model model = instance_normalization::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw_relaxed_2,
                           instance_normalization::is_ignored_nchw_relaxed_2,
                           instance_normalization::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, instance_normalization_nchw_relaxed_2) {
  const Model model = instance_normalization::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, instance_normalization_nchw_float16_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_nchw_float16_2,
                           instance_normalization::is_ignored_nchw_float16_2,
                           instance_normalization::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, instance_normalization_nchw_float16_2) {
  const Model model = instance_normalization::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc_2,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           instance_normalization::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nhwc_float16_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw_2,
                           instance_normalization::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           instance_normalization::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, instance_normalization_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           instance_normalization::createTestModel_dynamic_output_shape_nchw_float16_2,
                           instance_normalization::is_ignored_dynamic_output_shape_nchw_float16_2,
                           instance_normalization::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, instance_normalization_dynamic_output_shape_nchw_float16_2) {
  const Model model = instance_normalization::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(instance_normalization::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_axis.mod.py.
namespace l2_normalization_axis {
// Generated l2_normalization_axis test
#include "examples/l2_normalization_axis.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_axis.model.cpp"
} // namespace l2_normalization_axis

TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0,
                           l2_normalization_axis::is_ignored_dim4_axis0,
                           l2_normalization_axis::get_examples_dim4_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis0_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_float16,
                           l2_normalization_axis::is_ignored_dim4_axis0_float16,
                           l2_normalization_axis::get_examples_dim4_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis0_quant8,
                           l2_normalization_axis::get_examples_dim4_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_neg,
                           l2_normalization_axis::is_ignored_dim4_axis0_neg,
                           l2_normalization_axis::get_examples_dim4_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dim4_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dim4_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dim4_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1,
                           l2_normalization_axis::is_ignored_dim4_axis1,
                           l2_normalization_axis::get_examples_dim4_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis1_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_float16,
                           l2_normalization_axis::is_ignored_dim4_axis1_float16,
                           l2_normalization_axis::get_examples_dim4_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis1_quant8,
                           l2_normalization_axis::get_examples_dim4_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_neg,
                           l2_normalization_axis::is_ignored_dim4_axis1_neg,
                           l2_normalization_axis::get_examples_dim4_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dim4_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dim4_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dim4_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2,
                           l2_normalization_axis::is_ignored_dim4_axis2,
                           l2_normalization_axis::get_examples_dim4_axis2());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis2_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_float16,
                           l2_normalization_axis::is_ignored_dim4_axis2_float16,
                           l2_normalization_axis::get_examples_dim4_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis2_quant8,
                           l2_normalization_axis::get_examples_dim4_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_neg,
                           l2_normalization_axis::is_ignored_dim4_axis2_neg,
                           l2_normalization_axis::get_examples_dim4_axis2_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis2_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dim4_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dim4_axis2_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dim4_axis2_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis2_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3,
                           l2_normalization_axis::is_ignored_dim4_axis3,
                           l2_normalization_axis::get_examples_dim4_axis3());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis3_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis3_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_float16,
                           l2_normalization_axis::is_ignored_dim4_axis3_float16,
                           l2_normalization_axis::get_examples_dim4_axis3_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis3_quant8,
                           l2_normalization_axis::get_examples_dim4_axis3_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_neg,
                           l2_normalization_axis::is_ignored_dim4_axis3_neg,
                           l2_normalization_axis::get_examples_dim4_axis3_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::get_examples_dim4_axis3_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_neg_float16,
                           l2_normalization_axis::is_ignored_dim4_axis3_neg_float16,
                           l2_normalization_axis::get_examples_dim4_axis3_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim4_axis3_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim4_axis3_neg_quant8,
                           l2_normalization_axis::is_ignored_dim4_axis3_neg_quant8,
                           l2_normalization_axis::get_examples_dim4_axis3_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim4_axis3_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim4_axis3_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim4_axis3_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0,
                           l2_normalization_axis::is_ignored_dim3_axis0,
                           l2_normalization_axis::get_examples_dim3_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis0_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_float16,
                           l2_normalization_axis::is_ignored_dim3_axis0_float16,
                           l2_normalization_axis::get_examples_dim3_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis0_quant8,
                           l2_normalization_axis::get_examples_dim3_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_neg,
                           l2_normalization_axis::is_ignored_dim3_axis0_neg,
                           l2_normalization_axis::get_examples_dim3_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dim3_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dim3_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dim3_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1,
                           l2_normalization_axis::is_ignored_dim3_axis1,
                           l2_normalization_axis::get_examples_dim3_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis1_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_float16,
                           l2_normalization_axis::is_ignored_dim3_axis1_float16,
                           l2_normalization_axis::get_examples_dim3_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis1_quant8,
                           l2_normalization_axis::get_examples_dim3_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_neg,
                           l2_normalization_axis::is_ignored_dim3_axis1_neg,
                           l2_normalization_axis::get_examples_dim3_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dim3_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dim3_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dim3_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2,
                           l2_normalization_axis::is_ignored_dim3_axis2,
                           l2_normalization_axis::get_examples_dim3_axis2());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis2_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_float16,
                           l2_normalization_axis::is_ignored_dim3_axis2_float16,
                           l2_normalization_axis::get_examples_dim3_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis2_quant8,
                           l2_normalization_axis::get_examples_dim3_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_neg,
                           l2_normalization_axis::is_ignored_dim3_axis2_neg,
                           l2_normalization_axis::get_examples_dim3_axis2_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dim3_axis2_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dim3_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dim3_axis2_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim3_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim3_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dim3_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dim3_axis2_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim3_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim3_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim3_axis2_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0,
                           l2_normalization_axis::is_ignored_dim2_axis0,
                           l2_normalization_axis::get_examples_dim2_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dim2_axis0_relaxed,
                           l2_normalization_axis::get_examples_dim2_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_float16,
                           l2_normalization_axis::is_ignored_dim2_axis0_float16,
                           l2_normalization_axis::get_examples_dim2_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_quant8,
                           l2_normalization_axis::is_ignored_dim2_axis0_quant8,
                           l2_normalization_axis::get_examples_dim2_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_neg,
                           l2_normalization_axis::is_ignored_dim2_axis0_neg,
                           l2_normalization_axis::get_examples_dim2_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dim2_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dim2_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dim2_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dim2_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dim2_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1,
                           l2_normalization_axis::is_ignored_dim2_axis1,
                           l2_normalization_axis::get_examples_dim2_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dim2_axis1_relaxed,
                           l2_normalization_axis::get_examples_dim2_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_float16,
                           l2_normalization_axis::is_ignored_dim2_axis1_float16,
                           l2_normalization_axis::get_examples_dim2_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_quant8,
                           l2_normalization_axis::is_ignored_dim2_axis1_quant8,
                           l2_normalization_axis::get_examples_dim2_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_neg,
                           l2_normalization_axis::is_ignored_dim2_axis1_neg,
                           l2_normalization_axis::get_examples_dim2_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dim2_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dim2_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dim2_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim2_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim2_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dim2_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dim2_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim2_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim2_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim2_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0,
                           l2_normalization_axis::is_ignored_dim1_axis0,
                           l2_normalization_axis::get_examples_dim1_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dim1_axis0_relaxed,
                           l2_normalization_axis::get_examples_dim1_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_float16,
                           l2_normalization_axis::is_ignored_dim1_axis0_float16,
                           l2_normalization_axis::get_examples_dim1_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_quant8,
                           l2_normalization_axis::is_ignored_dim1_axis0_quant8,
                           l2_normalization_axis::get_examples_dim1_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_neg,
                           l2_normalization_axis::is_ignored_dim1_axis0_neg,
                           l2_normalization_axis::get_examples_dim1_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dim1_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dim1_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dim1_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_dim1_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dim1_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dim1_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dim1_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_dim1_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dim1_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dim1_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_neg,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_neg,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_neg,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis2_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_neg,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim4_axis3_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim4_axis3_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim4_axis3_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim4_axis3_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim4_axis3_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_neg,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_neg,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_neg,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim3_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim3_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim3_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim3_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim3_axis2_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_float16,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_neg,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis0_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_float16,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_neg,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim2_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim2_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim2_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim2_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim2_axis1_neg_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_float16,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_neg,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_relaxed());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_neg_float16,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_float16());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_axis_relaxed_dim1_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_relaxed_dim1_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_quant8());
}

TEST_F(ValidationTest, l2_normalization_axis_relaxed_dim1_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_relaxed_dim1_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_relaxed_dim1_axis0_neg_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis2_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim4_axis3_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim4_axis3_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim4_axis3_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim4_axis3_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim3_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim3_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim3_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim3_axis2_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim2_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim2_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim2_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim2_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_dim1_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_dim1_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_dim1_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_dim1_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis2_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim4_axis3_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim3_axis2_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim2_axis1_neg_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_float16,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_neg_float16,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8,
                           l2_normalization_axis::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8,
                           l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8) {
  const Model model = l2_normalization_axis::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_axis::get_examples_dynamic_output_shape_relaxed_dim1_axis0_neg_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_v1_2.mod.py.
namespace l2_normalization_v1_2 {
// Generated l2_normalization_v1_2 test
#include "examples/l2_normalization_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_v1_2.model.cpp"
} // namespace l2_normalization_v1_2

TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim4_axis3,
                           l2_normalization_v1_2::is_ignored_dim4_axis3,
                           l2_normalization_v1_2::get_examples_dim4_axis3());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim4_axis3) {
  const Model model = l2_normalization_v1_2::createTestModel_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim4_axis3_relaxed,
                           l2_normalization_v1_2::is_ignored_dim4_axis3_relaxed,
                           l2_normalization_v1_2::get_examples_dim4_axis3_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim4_axis3_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim4_axis3_float16,
                           l2_normalization_v1_2::is_ignored_dim4_axis3_float16,
                           l2_normalization_v1_2::get_examples_dim4_axis3_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim4_axis3_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim4_axis3_quant8,
                           l2_normalization_v1_2::is_ignored_dim4_axis3_quant8,
                           l2_normalization_v1_2::get_examples_dim4_axis3_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim4_axis3_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim4_axis3_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim3_axis2,
                           l2_normalization_v1_2::is_ignored_dim3_axis2,
                           l2_normalization_v1_2::get_examples_dim3_axis2());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim3_axis2) {
  const Model model = l2_normalization_v1_2::createTestModel_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim3_axis2_relaxed,
                           l2_normalization_v1_2::is_ignored_dim3_axis2_relaxed,
                           l2_normalization_v1_2::get_examples_dim3_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim3_axis2_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim3_axis2_float16,
                           l2_normalization_v1_2::is_ignored_dim3_axis2_float16,
                           l2_normalization_v1_2::get_examples_dim3_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim3_axis2_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim3_axis2_quant8,
                           l2_normalization_v1_2::is_ignored_dim3_axis2_quant8,
                           l2_normalization_v1_2::get_examples_dim3_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim3_axis2_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim3_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim2_axis1,
                           l2_normalization_v1_2::is_ignored_dim2_axis1,
                           l2_normalization_v1_2::get_examples_dim2_axis1());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim2_axis1) {
  const Model model = l2_normalization_v1_2::createTestModel_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim2_axis1_relaxed,
                           l2_normalization_v1_2::is_ignored_dim2_axis1_relaxed,
                           l2_normalization_v1_2::get_examples_dim2_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim2_axis1_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim2_axis1_float16,
                           l2_normalization_v1_2::is_ignored_dim2_axis1_float16,
                           l2_normalization_v1_2::get_examples_dim2_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim2_axis1_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim2_axis1_quant8,
                           l2_normalization_v1_2::is_ignored_dim2_axis1_quant8,
                           l2_normalization_v1_2::get_examples_dim2_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim2_axis1_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim2_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim1_axis0,
                           l2_normalization_v1_2::is_ignored_dim1_axis0,
                           l2_normalization_v1_2::get_examples_dim1_axis0());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim1_axis0) {
  const Model model = l2_normalization_v1_2::createTestModel_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim1_axis0_relaxed,
                           l2_normalization_v1_2::is_ignored_dim1_axis0_relaxed,
                           l2_normalization_v1_2::get_examples_dim1_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim1_axis0_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim1_axis0_float16,
                           l2_normalization_v1_2::is_ignored_dim1_axis0_float16,
                           l2_normalization_v1_2::get_examples_dim1_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim1_axis0_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dim1_axis0_quant8,
                           l2_normalization_v1_2::is_ignored_dim1_axis0_quant8,
                           l2_normalization_v1_2::get_examples_dim1_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_dim1_axis0_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dim1_axis0_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3,
                           l2_normalization_v1_2::is_ignored_relaxed_dim4_axis3,
                           l2_normalization_v1_2::get_examples_relaxed_dim4_axis3());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim4_axis3) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_relaxed,
                           l2_normalization_v1_2::is_ignored_relaxed_dim4_axis3_relaxed,
                           l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim4_axis3_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_float16,
                           l2_normalization_v1_2::is_ignored_relaxed_dim4_axis3_float16,
                           l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim4_axis3_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_quant8,
                           l2_normalization_v1_2::is_ignored_relaxed_dim4_axis3_quant8,
                           l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim4_axis3_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim4_axis3_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2,
                           l2_normalization_v1_2::is_ignored_relaxed_dim3_axis2,
                           l2_normalization_v1_2::get_examples_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim3_axis2) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_relaxed,
                           l2_normalization_v1_2::is_ignored_relaxed_dim3_axis2_relaxed,
                           l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim3_axis2_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_float16,
                           l2_normalization_v1_2::is_ignored_relaxed_dim3_axis2_float16,
                           l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim3_axis2_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_quant8,
                           l2_normalization_v1_2::is_ignored_relaxed_dim3_axis2_quant8,
                           l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim3_axis2_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim3_axis2_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1,
                           l2_normalization_v1_2::is_ignored_relaxed_dim2_axis1,
                           l2_normalization_v1_2::get_examples_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim2_axis1) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_relaxed,
                           l2_normalization_v1_2::is_ignored_relaxed_dim2_axis1_relaxed,
                           l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim2_axis1_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_float16,
                           l2_normalization_v1_2::is_ignored_relaxed_dim2_axis1_float16,
                           l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim2_axis1_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_quant8,
                           l2_normalization_v1_2::is_ignored_relaxed_dim2_axis1_quant8,
                           l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim2_axis1_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim2_axis1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0,
                           l2_normalization_v1_2::is_ignored_relaxed_dim1_axis0,
                           l2_normalization_v1_2::get_examples_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim1_axis0) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_relaxed,
                           l2_normalization_v1_2::is_ignored_relaxed_dim1_axis0_relaxed,
                           l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_relaxed());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim1_axis0_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_float16,
                           l2_normalization_v1_2::is_ignored_relaxed_dim1_axis0_float16,
                           l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_float16());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim1_axis0_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_normalization_v1_2_relaxed_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_quant8,
                           l2_normalization_v1_2::is_ignored_relaxed_dim1_axis0_quant8,
                           l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_quant8());
}

TEST_F(ValidationTest, l2_normalization_v1_2_relaxed_dim1_axis0_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_relaxed_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_relaxed_dim1_axis0_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim4_axis3,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim4_axis3_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim4_axis3_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim4_axis3_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim4_axis3_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim4_axis3_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim3_axis2_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim2_axis1_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_dim1_axis0_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim4_axis3,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim4_axis3_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim4_axis3_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim4_axis3_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim4_axis3_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_relaxed,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_relaxed,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_relaxed(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_relaxed) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_relaxed();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_quant8) {
  generated_tests::Execute(device,
                           l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_quant8,
                           l2_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_quant8,
                           l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_quant8(), true);
}

TEST_F(ValidationTest, l2_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_quant8) {
  const Model model = l2_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_quant8();
  const std::vector<Request> requests = createRequests(l2_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_v1_2.mod.py.
namespace l2_pool_v1_2 {
// Generated l2_pool_v1_2 test
#include "examples/l2_pool_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_v1_2.model.cpp"
} // namespace l2_pool_v1_2

TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc,
                           l2_pool_v1_2::is_ignored_nhwc,
                           l2_pool_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_float16,
                           l2_pool_v1_2::is_ignored_nhwc_float16,
                           l2_pool_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_relaxed_float16,
                           l2_pool_v1_2::is_ignored_nhwc_relaxed_float16,
                           l2_pool_v1_2::get_examples_nhwc_relaxed_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_relaxed_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw,
                           l2_pool_v1_2::is_ignored_nchw,
                           l2_pool_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_float16,
                           l2_pool_v1_2::is_ignored_nchw_float16,
                           l2_pool_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_nchw_relaxed,
                           l2_pool_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_relaxed_float16,
                           l2_pool_v1_2::is_ignored_nchw_relaxed_float16,
                           l2_pool_v1_2::get_examples_nchw_relaxed_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_relaxed_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_float16,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_float16,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_float16,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_float16,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_2,
                           l2_pool_v1_2::is_ignored_nhwc_2,
                           l2_pool_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_2) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_float16_2,
                           l2_pool_v1_2::is_ignored_nhwc_float16_2,
                           l2_pool_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_relaxed_2,
                           l2_pool_v1_2::is_ignored_nhwc_relaxed_2,
                           l2_pool_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nhwc_relaxed_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nhwc_relaxed_float16_2,
                           l2_pool_v1_2::is_ignored_nhwc_relaxed_float16_2,
                           l2_pool_v1_2::get_examples_nhwc_relaxed_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nhwc_relaxed_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_nhwc_relaxed_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nhwc_relaxed_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_2,
                           l2_pool_v1_2::is_ignored_nchw_2,
                           l2_pool_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_2) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_float16_2,
                           l2_pool_v1_2::is_ignored_nchw_float16_2,
                           l2_pool_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_relaxed_2,
                           l2_pool_v1_2::is_ignored_nchw_relaxed_2,
                           l2_pool_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_nchw_relaxed_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_nchw_relaxed_float16_2,
                           l2_pool_v1_2::is_ignored_nchw_relaxed_float16_2,
                           l2_pool_v1_2::get_examples_nchw_relaxed_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_nchw_relaxed_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_nchw_relaxed_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_nchw_relaxed_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_float16_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_float16_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nhwc_relaxed_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_float16_2,
                           l2_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_float16_2,
                           l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_dynamic_output_shape_nchw_relaxed_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nhwc,
                           l2_pool_v1_2::is_ignored_large_nhwc,
                           l2_pool_v1_2::get_examples_large_nhwc());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_large_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nhwc_float16,
                           l2_pool_v1_2::is_ignored_large_nhwc_float16,
                           l2_pool_v1_2::get_examples_large_nhwc_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_large_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_large_nhwc_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_large_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nhwc_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nhwc_relaxed_float16,
                           l2_pool_v1_2::is_ignored_large_nhwc_relaxed_float16,
                           l2_pool_v1_2::get_examples_large_nhwc_relaxed_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nhwc_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_nhwc_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nhwc_relaxed_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nchw,
                           l2_pool_v1_2::is_ignored_large_nchw,
                           l2_pool_v1_2::get_examples_large_nchw());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_large_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nchw_float16,
                           l2_pool_v1_2::is_ignored_large_nchw_float16,
                           l2_pool_v1_2::get_examples_large_nchw_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_large_nchw_relaxed,
                           l2_pool_v1_2::get_examples_large_nchw_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_large_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_large_nchw_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_nchw_relaxed_float16,
                           l2_pool_v1_2::is_ignored_large_nchw_relaxed_float16,
                           l2_pool_v1_2::get_examples_large_nchw_relaxed_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_large_nchw_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_nchw_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_nchw_relaxed_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed_float16,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nhwc_relaxed_float16,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nhwc_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nhwc_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nhwc_relaxed_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nchw,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_relaxed_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed_float16,
                           l2_pool_v1_2::is_ignored_large_dynamic_output_shape_nchw_relaxed_float16,
                           l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_large_dynamic_output_shape_nchw_relaxed_float16) {
  const Model model = l2_pool_v1_2::createTestModel_large_dynamic_output_shape_nchw_relaxed_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_large_dynamic_output_shape_nchw_relaxed_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc_float16,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc_float16,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw,
                           l2_pool_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           l2_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw_float16,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw_float16,
                           l2_pool_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc_2,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed_2,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nhwc_float16_2,
                           l2_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nhwc_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw_2,
                           l2_pool_v1_2::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw_relaxed_2,
                           l2_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, l2_pool_v1_2_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_nchw_float16_2,
                           l2_pool_v1_2::is_ignored_zero_sized_nchw_float16_2,
                           l2_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_nchw_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           l2_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, l2_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = l2_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(l2_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: layer_norm_lstm.mod.py.
namespace layer_norm_lstm {
// Generated layer_norm_lstm test
#include "examples/layer_norm_lstm.example.cpp"
// Generated model constructor
#include "vts_models/layer_norm_lstm.model.cpp"
} // namespace layer_norm_lstm

TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel,
                           layer_norm_lstm::is_ignored,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm());
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm) {
  const Model model = layer_norm_lstm::createTestModel();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape,
                           layer_norm_lstm::is_ignored_dynamic_output_shape,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_2) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_2,
                           layer_norm_lstm::is_ignored_2,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_2());
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_2) {
  const Model model = layer_norm_lstm::createTestModel_2();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape_2,
                           layer_norm_lstm::is_ignored_dynamic_output_shape_2,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_3) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_3,
                           layer_norm_lstm::is_ignored_3,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_3());
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_3) {
  const Model model = layer_norm_lstm::createTestModel_3();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape_3,
                           layer_norm_lstm::is_ignored_dynamic_output_shape_3,
                           layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_NoCifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_4,
                           layer_norm_lstm::is_ignored_4,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm());
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm) {
  const Model model = layer_norm_lstm::createTestModel_4();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape_4,
                           layer_norm_lstm::is_ignored_dynamic_output_shape_4,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_2) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_5,
                           layer_norm_lstm::is_ignored_5,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_2());
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_2) {
  const Model model = layer_norm_lstm::createTestModel_5();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape_5,
                           layer_norm_lstm::is_ignored_dynamic_output_shape_5,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_3) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_6,
                           layer_norm_lstm::is_ignored_6,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_3());
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_3) {
  const Model model = layer_norm_lstm::createTestModel_6();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           layer_norm_lstm::createTestModel_dynamic_output_shape_6,
                           layer_norm_lstm::is_ignored_dynamic_output_shape_6,
                           layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, layer_norm_lstm_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3) {
  const Model model = layer_norm_lstm::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(layer_norm_lstm::get_examples_CifgPeepholeProjectionNoClippingLayerNormLstm_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
// Generated from: less.mod.py.
namespace less {
// Generated less test
#include "examples/less.example.cpp"
// Generated model constructor
#include "vts_models/less.model.cpp"
} // namespace less

TEST_F(NeuralnetworksHidlTest, less_simple) {
  generated_tests::Execute(device,
                           less::createTestModel,
                           less::is_ignored,
                           less::get_examples_simple());
}

TEST_F(ValidationTest, less_simple) {
  const Model model = less::createTestModel();
  const std::vector<Request> requests = createRequests(less::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_simple_int32) {
  generated_tests::Execute(device,
                           less::createTestModel_int32,
                           less::is_ignored_int32,
                           less::get_examples_simple_int32());
}

TEST_F(ValidationTest, less_simple_int32) {
  const Model model = less::createTestModel_int32();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_simple_float16) {
  generated_tests::Execute(device,
                           less::createTestModel_float16,
                           less::is_ignored_float16,
                           less::get_examples_simple_float16());
}

TEST_F(ValidationTest, less_simple_float16) {
  const Model model = less::createTestModel_float16();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_simple_relaxed) {
  generated_tests::Execute(device,
                           less::createTestModel_relaxed,
                           less::is_ignored_relaxed,
                           less::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, less_simple_relaxed) {
  const Model model = less::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape,
                           less::is_ignored_dynamic_output_shape,
                           less::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_simple_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_int32,
                           less::is_ignored_dynamic_output_shape_int32,
                           less::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, less_simple_dynamic_output_shape_int32) {
  const Model model = less::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_float16,
                           less::is_ignored_dynamic_output_shape_float16,
                           less::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, less_simple_dynamic_output_shape_float16) {
  const Model model = less::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_relaxed,
                           less::is_ignored_dynamic_output_shape_relaxed,
                           less::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, less_simple_dynamic_output_shape_relaxed) {
  const Model model = less::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(less::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_broadcast) {
  generated_tests::Execute(device,
                           less::createTestModel_2,
                           less::is_ignored_2,
                           less::get_examples_broadcast());
}

TEST_F(ValidationTest, less_broadcast) {
  const Model model = less::createTestModel_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_broadcast_int32) {
  generated_tests::Execute(device,
                           less::createTestModel_int32_2,
                           less::is_ignored_int32_2,
                           less::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, less_broadcast_int32) {
  const Model model = less::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_broadcast_float16) {
  generated_tests::Execute(device,
                           less::createTestModel_float16_2,
                           less::is_ignored_float16_2,
                           less::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, less_broadcast_float16) {
  const Model model = less::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_broadcast_relaxed) {
  generated_tests::Execute(device,
                           less::createTestModel_relaxed_2,
                           less::is_ignored_relaxed_2,
                           less::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, less_broadcast_relaxed) {
  const Model model = less::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_2,
                           less::is_ignored_dynamic_output_shape_2,
                           less::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_broadcast_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_int32_2,
                           less::is_ignored_dynamic_output_shape_int32_2,
                           less::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, less_broadcast_dynamic_output_shape_int32) {
  const Model model = less::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_float16_2,
                           less::is_ignored_dynamic_output_shape_float16_2,
                           less::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, less_broadcast_dynamic_output_shape_float16) {
  const Model model = less::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_relaxed_2,
                           less::is_ignored_dynamic_output_shape_relaxed_2,
                           less::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, less_broadcast_dynamic_output_shape_relaxed) {
  const Model model = less::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(less::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_quantized_different_scale) {
  generated_tests::Execute(device,
                           less::createTestModel_3,
                           less::is_ignored_3,
                           less::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, less_quantized_different_scale) {
  const Model model = less::createTestModel_3();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_3,
                           less::is_ignored_dynamic_output_shape_3,
                           less::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_quantized_different_scale_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           less::createTestModel_4,
                           less::is_ignored_4,
                           less::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, less_quantized_different_zero_point) {
  const Model model = less::createTestModel_4();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_4,
                           less::is_ignored_dynamic_output_shape_4,
                           less::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           less::createTestModel_5,
                           less::is_ignored_5,
                           less::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, less_quantized_overflow_second_input_if_requantized) {
  const Model model = less::createTestModel_5();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_5,
                           less::is_ignored_dynamic_output_shape_5,
                           less::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           less::createTestModel_6,
                           less::is_ignored_6,
                           less::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, less_quantized_overflow_first_input_if_requantized) {
  const Model model = less::createTestModel_6();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_6,
                           less::is_ignored_dynamic_output_shape_6,
                           less::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(less::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_boolean) {
  generated_tests::Execute(device,
                           less::createTestModel_7,
                           less::is_ignored_7,
                           less::get_examples_boolean());
}

TEST_F(ValidationTest, less_boolean) {
  const Model model = less::createTestModel_7();
  const std::vector<Request> requests = createRequests(less::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less::createTestModel_dynamic_output_shape_7,
                           less::is_ignored_dynamic_output_shape_7,
                           less::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_boolean_dynamic_output_shape) {
  const Model model = less::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(less::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: less_equal.mod.py.
namespace less_equal {
// Generated less_equal test
#include "examples/less_equal.example.cpp"
// Generated model constructor
#include "vts_models/less_equal.model.cpp"
} // namespace less_equal

TEST_F(NeuralnetworksHidlTest, less_equal_simple) {
  generated_tests::Execute(device,
                           less_equal::createTestModel,
                           less_equal::is_ignored,
                           less_equal::get_examples_simple());
}

TEST_F(ValidationTest, less_equal_simple) {
  const Model model = less_equal::createTestModel();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_simple_int32) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_int32,
                           less_equal::is_ignored_int32,
                           less_equal::get_examples_simple_int32());
}

TEST_F(ValidationTest, less_equal_simple_int32) {
  const Model model = less_equal::createTestModel_int32();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_simple_float16) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_float16,
                           less_equal::is_ignored_float16,
                           less_equal::get_examples_simple_float16());
}

TEST_F(ValidationTest, less_equal_simple_float16) {
  const Model model = less_equal::createTestModel_float16();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_simple_relaxed) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_relaxed,
                           less_equal::is_ignored_relaxed,
                           less_equal::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, less_equal_simple_relaxed) {
  const Model model = less_equal::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape,
                           less_equal::is_ignored_dynamic_output_shape,
                           less_equal::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_simple_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_int32,
                           less_equal::is_ignored_dynamic_output_shape_int32,
                           less_equal::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, less_equal_simple_dynamic_output_shape_int32) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_float16,
                           less_equal::is_ignored_dynamic_output_shape_float16,
                           less_equal::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, less_equal_simple_dynamic_output_shape_float16) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_relaxed,
                           less_equal::is_ignored_dynamic_output_shape_relaxed,
                           less_equal::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, less_equal_simple_dynamic_output_shape_relaxed) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_broadcast) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_2,
                           less_equal::is_ignored_2,
                           less_equal::get_examples_broadcast());
}

TEST_F(ValidationTest, less_equal_broadcast) {
  const Model model = less_equal::createTestModel_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_broadcast_int32) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_int32_2,
                           less_equal::is_ignored_int32_2,
                           less_equal::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, less_equal_broadcast_int32) {
  const Model model = less_equal::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_broadcast_float16) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_float16_2,
                           less_equal::is_ignored_float16_2,
                           less_equal::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, less_equal_broadcast_float16) {
  const Model model = less_equal::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, less_equal_broadcast_relaxed) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_relaxed_2,
                           less_equal::is_ignored_relaxed_2,
                           less_equal::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, less_equal_broadcast_relaxed) {
  const Model model = less_equal::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_2,
                           less_equal::is_ignored_dynamic_output_shape_2,
                           less_equal::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_broadcast_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_int32_2,
                           less_equal::is_ignored_dynamic_output_shape_int32_2,
                           less_equal::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, less_equal_broadcast_dynamic_output_shape_int32) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_float16_2,
                           less_equal::is_ignored_dynamic_output_shape_float16_2,
                           less_equal::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, less_equal_broadcast_dynamic_output_shape_float16) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_relaxed_2,
                           less_equal::is_ignored_dynamic_output_shape_relaxed_2,
                           less_equal::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, less_equal_broadcast_dynamic_output_shape_relaxed) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_quantized_different_scale) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_3,
                           less_equal::is_ignored_3,
                           less_equal::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, less_equal_quantized_different_scale) {
  const Model model = less_equal::createTestModel_3();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_3,
                           less_equal::is_ignored_dynamic_output_shape_3,
                           less_equal::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_quantized_different_scale_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_4,
                           less_equal::is_ignored_4,
                           less_equal::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, less_equal_quantized_different_zero_point) {
  const Model model = less_equal::createTestModel_4();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_4,
                           less_equal::is_ignored_dynamic_output_shape_4,
                           less_equal::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_5,
                           less_equal::is_ignored_5,
                           less_equal::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, less_equal_quantized_overflow_second_input_if_requantized) {
  const Model model = less_equal::createTestModel_5();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_5,
                           less_equal::is_ignored_dynamic_output_shape_5,
                           less_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_6,
                           less_equal::is_ignored_6,
                           less_equal::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, less_equal_quantized_overflow_first_input_if_requantized) {
  const Model model = less_equal::createTestModel_6();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_6,
                           less_equal::is_ignored_dynamic_output_shape_6,
                           less_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, less_equal_boolean) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_7,
                           less_equal::is_ignored_7,
                           less_equal::get_examples_boolean());
}

TEST_F(ValidationTest, less_equal_boolean) {
  const Model model = less_equal::createTestModel_7();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, less_equal_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           less_equal::createTestModel_dynamic_output_shape_7,
                           less_equal::is_ignored_dynamic_output_shape_7,
                           less_equal::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, less_equal_boolean_dynamic_output_shape) {
  const Model model = less_equal::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(less_equal::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_normalization_v1_2.mod.py.
namespace local_response_normalization_v1_2 {
// Generated local_response_normalization_v1_2 test
#include "examples/local_response_normalization_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/local_response_normalization_v1_2.model.cpp"
} // namespace local_response_normalization_v1_2

TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16_2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis2_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim4_axis3_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim4_axis3_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim4_axis3_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim3_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim3_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim3_axis2_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim2_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim2_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim2_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dim1_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dim1_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dim1_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim4_axis3_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim3_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim2_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16_3());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_relaxed_dim1_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3,
                           local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3) {
  const Model model = local_response_normalization_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_dim1_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_dim1_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_dim2_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_dim2_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_dim3_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_dim3_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dim3_axis2_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_relaxed_dim1_axis0_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_relaxed_dim2_axis1_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, local_response_normalization_v1_2_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_relaxed_dim3_axis2_float16());
}

TEST_F(ValidationTest, local_response_normalization_v1_2_relaxed_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim1_axis0_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim2_axis1_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim2_axis1_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim2_axis1_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim2_axis1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  generated_tests::Execute(device,
                           local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_float16,
                           local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16(), true);
}

TEST_F(ValidationTest, local_response_normalization_v1_2_dynamic_output_shape_relaxed_dim3_axis2_float16) {
  const Model model = local_response_normalization_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_float16();
  const std::vector<Request> requests = createRequests(local_response_normalization_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: log.mod.py.
namespace log {
// Generated log test
#include "examples/log.example.cpp"
// Generated model constructor
#include "vts_models/log.model.cpp"
} // namespace log

TEST_F(NeuralnetworksHidlTest, log) {
  generated_tests::Execute(device,
                           log::createTestModel,
                           log::is_ignored,
                           log::get_examples());
}

TEST_F(ValidationTest, log) {
  const Model model = log::createTestModel();
  const std::vector<Request> requests = createRequests(log::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_relaxed) {
  generated_tests::Execute(device,
                           log::createTestModel_relaxed,
                           log::is_ignored_relaxed,
                           log::get_examples_relaxed());
}

TEST_F(ValidationTest, log_relaxed) {
  const Model model = log::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(log::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_float16) {
  generated_tests::Execute(device,
                           log::createTestModel_float16,
                           log::is_ignored_float16,
                           log::get_examples_float16());
}

TEST_F(ValidationTest, log_float16) {
  const Model model = log::createTestModel_float16();
  const std::vector<Request> requests = createRequests(log::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_dynamic_output_shape) {
  generated_tests::Execute(device,
                           log::createTestModel_dynamic_output_shape,
                           log::is_ignored_dynamic_output_shape,
                           log::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, log_dynamic_output_shape) {
  const Model model = log::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(log::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           log::createTestModel_dynamic_output_shape_relaxed,
                           log::is_ignored_dynamic_output_shape_relaxed,
                           log::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, log_dynamic_output_shape_relaxed) {
  const Model model = log::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(log::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           log::createTestModel_dynamic_output_shape_float16,
                           log::is_ignored_dynamic_output_shape_float16,
                           log::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, log_dynamic_output_shape_float16) {
  const Model model = log::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(log::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: log_softmax.mod.py.
namespace log_softmax {
// Generated log_softmax test
#include "examples/log_softmax.example.cpp"
// Generated model constructor
#include "vts_models/log_softmax.model.cpp"
} // namespace log_softmax

TEST_F(NeuralnetworksHidlTest, log_softmax) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel,
                           log_softmax::is_ignored,
                           log_softmax::get_examples());
}

TEST_F(ValidationTest, log_softmax) {
  const Model model = log_softmax::createTestModel();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_relaxed) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_relaxed,
                           log_softmax::is_ignored_relaxed,
                           log_softmax::get_examples_relaxed());
}

TEST_F(ValidationTest, log_softmax_relaxed) {
  const Model model = log_softmax::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_float16) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_float16,
                           log_softmax::is_ignored_float16,
                           log_softmax::get_examples_float16());
}

TEST_F(ValidationTest, log_softmax_float16) {
  const Model model = log_softmax::createTestModel_float16();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape,
                           log_softmax::is_ignored_dynamic_output_shape,
                           log_softmax::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_relaxed,
                           log_softmax::is_ignored_dynamic_output_shape_relaxed,
                           log_softmax::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_relaxed) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_float16,
                           log_softmax::is_ignored_dynamic_output_shape_float16,
                           log_softmax::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_float16) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, log_softmax_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_2,
                           log_softmax::is_ignored_2,
                           log_softmax::get_examples_2());
}

TEST_F(ValidationTest, log_softmax_2) {
  const Model model = log_softmax::createTestModel_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_relaxed_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_relaxed_2,
                           log_softmax::is_ignored_relaxed_2,
                           log_softmax::get_examples_relaxed_2());
}

TEST_F(ValidationTest, log_softmax_relaxed_2) {
  const Model model = log_softmax::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_float16_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_float16_2,
                           log_softmax::is_ignored_float16_2,
                           log_softmax::get_examples_float16_2());
}

TEST_F(ValidationTest, log_softmax_float16_2) {
  const Model model = log_softmax::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_2,
                           log_softmax::is_ignored_dynamic_output_shape_2,
                           log_softmax::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_2) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_relaxed_2,
                           log_softmax::is_ignored_dynamic_output_shape_relaxed_2,
                           log_softmax::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_relaxed_2) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_float16_2,
                           log_softmax::is_ignored_dynamic_output_shape_float16_2,
                           log_softmax::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_float16_2) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, log_softmax_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_3,
                           log_softmax::is_ignored_3,
                           log_softmax::get_examples_3());
}

TEST_F(ValidationTest, log_softmax_3) {
  const Model model = log_softmax::createTestModel_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_relaxed_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_relaxed_3,
                           log_softmax::is_ignored_relaxed_3,
                           log_softmax::get_examples_relaxed_3());
}

TEST_F(ValidationTest, log_softmax_relaxed_3) {
  const Model model = log_softmax::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_float16_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_float16_3,
                           log_softmax::is_ignored_float16_3,
                           log_softmax::get_examples_float16_3());
}

TEST_F(ValidationTest, log_softmax_float16_3) {
  const Model model = log_softmax::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_3,
                           log_softmax::is_ignored_dynamic_output_shape_3,
                           log_softmax::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_3) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_relaxed_3,
                           log_softmax::is_ignored_dynamic_output_shape_relaxed_3,
                           log_softmax::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_relaxed_3) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_float16_3,
                           log_softmax::is_ignored_dynamic_output_shape_float16_3,
                           log_softmax::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_float16_3) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, log_softmax_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_4,
                           log_softmax::is_ignored_4,
                           log_softmax::get_examples_4());
}

TEST_F(ValidationTest, log_softmax_4) {
  const Model model = log_softmax::createTestModel_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_relaxed_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_relaxed_4,
                           log_softmax::is_ignored_relaxed_4,
                           log_softmax::get_examples_relaxed_4());
}

TEST_F(ValidationTest, log_softmax_relaxed_4) {
  const Model model = log_softmax::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, log_softmax_float16_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_float16_4,
                           log_softmax::is_ignored_float16_4,
                           log_softmax::get_examples_float16_4());
}

TEST_F(ValidationTest, log_softmax_float16_4) {
  const Model model = log_softmax::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_4,
                           log_softmax::is_ignored_dynamic_output_shape_4,
                           log_softmax::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_4) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_relaxed_4,
                           log_softmax::is_ignored_dynamic_output_shape_relaxed_4,
                           log_softmax::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_relaxed_4) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, log_softmax_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           log_softmax::createTestModel_dynamic_output_shape_float16_4,
                           log_softmax::is_ignored_dynamic_output_shape_float16_4,
                           log_softmax::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, log_softmax_dynamic_output_shape_float16_4) {
  const Model model = log_softmax::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(log_softmax::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
// Generated from: logical_and.mod.py.
namespace logical_and {
// Generated logical_and test
#include "examples/logical_and.example.cpp"
// Generated model constructor
#include "vts_models/logical_and.model.cpp"
} // namespace logical_and

TEST_F(NeuralnetworksHidlTest, logical_and_simple) {
  generated_tests::Execute(device,
                           logical_and::createTestModel,
                           logical_and::is_ignored,
                           logical_and::get_examples_simple());
}

TEST_F(ValidationTest, logical_and_simple) {
  const Model model = logical_and::createTestModel();
  const std::vector<Request> requests = createRequests(logical_and::get_examples_simple());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logical_and_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logical_and::createTestModel_dynamic_output_shape,
                           logical_and::is_ignored_dynamic_output_shape,
                           logical_and::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logical_and_simple_dynamic_output_shape) {
  const Model model = logical_and::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logical_and::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, logical_and_broadcast) {
  generated_tests::Execute(device,
                           logical_and::createTestModel_2,
                           logical_and::is_ignored_2,
                           logical_and::get_examples_broadcast());
}

TEST_F(ValidationTest, logical_and_broadcast) {
  const Model model = logical_and::createTestModel_2();
  const std::vector<Request> requests = createRequests(logical_and::get_examples_broadcast());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logical_and_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logical_and::createTestModel_dynamic_output_shape_2,
                           logical_and::is_ignored_dynamic_output_shape_2,
                           logical_and::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logical_and_broadcast_dynamic_output_shape) {
  const Model model = logical_and::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(logical_and::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logical_not.mod.py.
namespace logical_not {
// Generated logical_not test
#include "examples/logical_not.example.cpp"
// Generated model constructor
#include "vts_models/logical_not.model.cpp"
} // namespace logical_not

TEST_F(NeuralnetworksHidlTest, logical_not) {
  generated_tests::Execute(device,
                           logical_not::createTestModel,
                           logical_not::is_ignored,
                           logical_not::get_examples());
}

TEST_F(ValidationTest, logical_not) {
  const Model model = logical_not::createTestModel();
  const std::vector<Request> requests = createRequests(logical_not::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logical_not_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logical_not::createTestModel_dynamic_output_shape,
                           logical_not::is_ignored_dynamic_output_shape,
                           logical_not::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logical_not_dynamic_output_shape) {
  const Model model = logical_not::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logical_not::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logical_or.mod.py.
namespace logical_or {
// Generated logical_or test
#include "examples/logical_or.example.cpp"
// Generated model constructor
#include "vts_models/logical_or.model.cpp"
} // namespace logical_or

TEST_F(NeuralnetworksHidlTest, logical_or_simple) {
  generated_tests::Execute(device,
                           logical_or::createTestModel,
                           logical_or::is_ignored,
                           logical_or::get_examples_simple());
}

TEST_F(ValidationTest, logical_or_simple) {
  const Model model = logical_or::createTestModel();
  const std::vector<Request> requests = createRequests(logical_or::get_examples_simple());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logical_or_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logical_or::createTestModel_dynamic_output_shape,
                           logical_or::is_ignored_dynamic_output_shape,
                           logical_or::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logical_or_simple_dynamic_output_shape) {
  const Model model = logical_or::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logical_or::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, logical_or_broadcast) {
  generated_tests::Execute(device,
                           logical_or::createTestModel_2,
                           logical_or::is_ignored_2,
                           logical_or::get_examples_broadcast());
}

TEST_F(ValidationTest, logical_or_broadcast) {
  const Model model = logical_or::createTestModel_2();
  const std::vector<Request> requests = createRequests(logical_or::get_examples_broadcast());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logical_or_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logical_or::createTestModel_dynamic_output_shape_2,
                           logical_or::is_ignored_dynamic_output_shape_2,
                           logical_or::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logical_or_broadcast_dynamic_output_shape) {
  const Model model = logical_or::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(logical_or::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_v1_2.mod.py.
namespace logistic_v1_2 {
// Generated logistic_v1_2 test
#include "examples/logistic_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/logistic_v1_2.model.cpp"
} // namespace logistic_v1_2

TEST_F(NeuralnetworksHidlTest, logistic_v1_2) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel,
                           logistic_v1_2::is_ignored,
                           logistic_v1_2::get_examples());
}

TEST_F(ValidationTest, logistic_v1_2) {
  const Model model = logistic_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_dynamic_output_shape,
                           logistic_v1_2::is_ignored_dynamic_output_shape,
                           logistic_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_v1_2_dynamic_output_shape) {
  const Model model = logistic_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, logistic_v1_2_2) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_2,
                           logistic_v1_2::is_ignored_2,
                           logistic_v1_2::get_examples_2());
}

TEST_F(ValidationTest, logistic_v1_2_2) {
  const Model model = logistic_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_dynamic_output_shape_2,
                           logistic_v1_2::is_ignored_dynamic_output_shape_2,
                           logistic_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, logistic_v1_2_dynamic_output_shape_2) {
  const Model model = logistic_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, logistic_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized,
                           logistic_v1_2::is_ignored_zero_sized,
                           logistic_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized) {
  const Model model = logistic_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, logistic_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_relaxed,
                           logistic_v1_2::is_ignored_zero_sized_relaxed,
                           logistic_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_relaxed) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, logistic_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_quant8,
                           logistic_v1_2::is_ignored_zero_sized_quant8,
                           logistic_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_quant8) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, logistic_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_float16,
                           logistic_v1_2::is_ignored_zero_sized_float16,
                           logistic_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_float16) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           logistic_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           logistic_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           logistic_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           logistic_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           logistic_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, logistic_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = logistic_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(logistic_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_3_relaxed.mod.py.
namespace lsh_projection_3_relaxed {
// Generated lsh_projection_3_relaxed test
#include "examples/lsh_projection_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_3_relaxed.model.cpp"
} // namespace lsh_projection_3_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_3_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_3_relaxed::createTestModel,
                           lsh_projection_3_relaxed::is_ignored,
                           lsh_projection_3_relaxed::get_examples());
}

TEST_F(ValidationTest, lsh_projection_3_relaxed) {
  const Model model = lsh_projection_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_3_relaxed::createTestModel_dynamic_output_shape,
                           lsh_projection_3_relaxed::is_ignored_dynamic_output_shape,
                           lsh_projection_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_3_relaxed_dynamic_output_shape) {
  const Model model = lsh_projection_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_4_relaxed.mod.py.
namespace lsh_projection_4_relaxed {
// Generated lsh_projection_4_relaxed test
#include "examples/lsh_projection_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_4_relaxed.model.cpp"
} // namespace lsh_projection_4_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_4_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_4_relaxed::createTestModel,
                           lsh_projection_4_relaxed::is_ignored,
                           lsh_projection_4_relaxed::get_examples());
}

TEST_F(ValidationTest, lsh_projection_4_relaxed) {
  const Model model = lsh_projection_4_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_4_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_4_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_4_relaxed::createTestModel_dynamic_output_shape,
                           lsh_projection_4_relaxed::is_ignored_dynamic_output_shape,
                           lsh_projection_4_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_4_relaxed_dynamic_output_shape) {
  const Model model = lsh_projection_4_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_4_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_deprecated.mod.py.
namespace lsh_projection_deprecated {
// Generated lsh_projection_deprecated test
#include "examples/lsh_projection_deprecated.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_deprecated.model.cpp"
} // namespace lsh_projection_deprecated

TEST_F(NeuralnetworksHidlTest, lsh_projection_deprecated) {
  generated_tests::Execute(device,
                           lsh_projection_deprecated::createTestModel,
                           lsh_projection_deprecated::is_ignored,
                           lsh_projection_deprecated::get_examples());
}

TEST_F(ValidationTest, lsh_projection_deprecated) {
  const Model model = lsh_projection_deprecated::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_deprecated::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_deprecated_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_deprecated::createTestModel_dynamic_output_shape,
                           lsh_projection_deprecated::is_ignored_dynamic_output_shape,
                           lsh_projection_deprecated::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_deprecated_dynamic_output_shape) {
  const Model model = lsh_projection_deprecated::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_deprecated::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_float16.mod.py.
namespace lsh_projection_float16 {
// Generated lsh_projection_float16 test
#include "examples/lsh_projection_float16.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_float16.model.cpp"
} // namespace lsh_projection_float16

TEST_F(NeuralnetworksHidlTest, lsh_projection_float16) {
  generated_tests::Execute(device,
                           lsh_projection_float16::createTestModel,
                           lsh_projection_float16::is_ignored,
                           lsh_projection_float16::get_examples());
}

TEST_F(ValidationTest, lsh_projection_float16) {
  const Model model = lsh_projection_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_float16::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, lsh_projection_float16_float16) {
  generated_tests::Execute(device,
                           lsh_projection_float16::createTestModel_float16,
                           lsh_projection_float16::is_ignored_float16,
                           lsh_projection_float16::get_examples_float16());
}

TEST_F(ValidationTest, lsh_projection_float16_float16) {
  const Model model = lsh_projection_float16::createTestModel_float16();
  const std::vector<Request> requests = createRequests(lsh_projection_float16::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_float16::createTestModel_dynamic_output_shape,
                           lsh_projection_float16::is_ignored_dynamic_output_shape,
                           lsh_projection_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_float16_dynamic_output_shape) {
  const Model model = lsh_projection_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_float16_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           lsh_projection_float16::createTestModel_dynamic_output_shape_float16,
                           lsh_projection_float16::is_ignored_dynamic_output_shape_float16,
                           lsh_projection_float16::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, lsh_projection_float16_dynamic_output_shape_float16) {
  const Model model = lsh_projection_float16::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(lsh_projection_float16::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_float16.mod.py.
namespace lstm2_float16 {
// Generated lstm2_float16 test
#include "examples/lstm2_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_float16.model.cpp"
} // namespace lstm2_float16

TEST_F(NeuralnetworksHidlTest, lstm2_float16) {
  generated_tests::Execute(device,
                           lstm2_float16::createTestModel,
                           lstm2_float16::is_ignored,
                           lstm2_float16::get_examples());
}

TEST_F(ValidationTest, lstm2_float16) {
  const Model model = lstm2_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_float16::createTestModel_dynamic_output_shape,
                           lstm2_float16::is_ignored_dynamic_output_shape,
                           lstm2_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_float16_dynamic_output_shape) {
  const Model model = lstm2_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state2_float16.mod.py.
namespace lstm2_state2_float16 {
// Generated lstm2_state2_float16 test
#include "examples/lstm2_state2_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state2_float16.model.cpp"
} // namespace lstm2_state2_float16

TEST_F(NeuralnetworksHidlTest, lstm2_state2_float16) {
  generated_tests::Execute(device,
                           lstm2_state2_float16::createTestModel,
                           lstm2_state2_float16::is_ignored,
                           lstm2_state2_float16::get_examples());
}

TEST_F(ValidationTest, lstm2_state2_float16) {
  const Model model = lstm2_state2_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state2_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state2_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state2_float16::createTestModel_dynamic_output_shape,
                           lstm2_state2_float16::is_ignored_dynamic_output_shape,
                           lstm2_state2_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state2_float16_dynamic_output_shape) {
  const Model model = lstm2_state2_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state2_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state_float16.mod.py.
namespace lstm2_state_float16 {
// Generated lstm2_state_float16 test
#include "examples/lstm2_state_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state_float16.model.cpp"
} // namespace lstm2_state_float16

TEST_F(NeuralnetworksHidlTest, lstm2_state_float16) {
  generated_tests::Execute(device,
                           lstm2_state_float16::createTestModel,
                           lstm2_state_float16::is_ignored,
                           lstm2_state_float16::get_examples());
}

TEST_F(ValidationTest, lstm2_state_float16) {
  const Model model = lstm2_state_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state_float16::createTestModel_dynamic_output_shape,
                           lstm2_state_float16::is_ignored_dynamic_output_shape,
                           lstm2_state_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state_float16_dynamic_output_shape) {
  const Model model = lstm2_state_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_float16.mod.py.
namespace lstm3_float16 {
// Generated lstm3_float16 test
#include "examples/lstm3_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_float16.model.cpp"
} // namespace lstm3_float16

TEST_F(NeuralnetworksHidlTest, lstm3_float16) {
  generated_tests::Execute(device,
                           lstm3_float16::createTestModel,
                           lstm3_float16::is_ignored,
                           lstm3_float16::get_examples());
}

TEST_F(ValidationTest, lstm3_float16) {
  const Model model = lstm3_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_float16::createTestModel_dynamic_output_shape,
                           lstm3_float16::is_ignored_dynamic_output_shape,
                           lstm3_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_float16_dynamic_output_shape) {
  const Model model = lstm3_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state2_float16.mod.py.
namespace lstm3_state2_float16 {
// Generated lstm3_state2_float16 test
#include "examples/lstm3_state2_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state2_float16.model.cpp"
} // namespace lstm3_state2_float16

TEST_F(NeuralnetworksHidlTest, lstm3_state2_float16) {
  generated_tests::Execute(device,
                           lstm3_state2_float16::createTestModel,
                           lstm3_state2_float16::is_ignored,
                           lstm3_state2_float16::get_examples());
}

TEST_F(ValidationTest, lstm3_state2_float16) {
  const Model model = lstm3_state2_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state2_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state2_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state2_float16::createTestModel_dynamic_output_shape,
                           lstm3_state2_float16::is_ignored_dynamic_output_shape,
                           lstm3_state2_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state2_float16_dynamic_output_shape) {
  const Model model = lstm3_state2_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state2_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state3_float16.mod.py.
namespace lstm3_state3_float16 {
// Generated lstm3_state3_float16 test
#include "examples/lstm3_state3_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state3_float16.model.cpp"
} // namespace lstm3_state3_float16

TEST_F(NeuralnetworksHidlTest, lstm3_state3_float16) {
  generated_tests::Execute(device,
                           lstm3_state3_float16::createTestModel,
                           lstm3_state3_float16::is_ignored,
                           lstm3_state3_float16::get_examples());
}

TEST_F(ValidationTest, lstm3_state3_float16) {
  const Model model = lstm3_state3_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state3_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state3_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state3_float16::createTestModel_dynamic_output_shape,
                           lstm3_state3_float16::is_ignored_dynamic_output_shape,
                           lstm3_state3_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state3_float16_dynamic_output_shape) {
  const Model model = lstm3_state3_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state3_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state_float16.mod.py.
namespace lstm3_state_float16 {
// Generated lstm3_state_float16 test
#include "examples/lstm3_state_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state_float16.model.cpp"
} // namespace lstm3_state_float16

TEST_F(NeuralnetworksHidlTest, lstm3_state_float16) {
  generated_tests::Execute(device,
                           lstm3_state_float16::createTestModel,
                           lstm3_state_float16::is_ignored,
                           lstm3_state_float16::get_examples());
}

TEST_F(ValidationTest, lstm3_state_float16) {
  const Model model = lstm3_state_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state_float16::createTestModel_dynamic_output_shape,
                           lstm3_state_float16::is_ignored_dynamic_output_shape,
                           lstm3_state_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state_float16_dynamic_output_shape) {
  const Model model = lstm3_state_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_float16.mod.py.
namespace lstm_float16 {
// Generated lstm_float16 test
#include "examples/lstm_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm_float16.model.cpp"
} // namespace lstm_float16

TEST_F(NeuralnetworksHidlTest, lstm_float16) {
  generated_tests::Execute(device,
                           lstm_float16::createTestModel,
                           lstm_float16::is_ignored,
                           lstm_float16::get_examples());
}

TEST_F(ValidationTest, lstm_float16) {
  const Model model = lstm_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_float16::createTestModel_dynamic_output_shape,
                           lstm_float16::is_ignored_dynamic_output_shape,
                           lstm_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_float16_dynamic_output_shape) {
  const Model model = lstm_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state2_float16.mod.py.
namespace lstm_state2_float16 {
// Generated lstm_state2_float16 test
#include "examples/lstm_state2_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state2_float16.model.cpp"
} // namespace lstm_state2_float16

TEST_F(NeuralnetworksHidlTest, lstm_state2_float16) {
  generated_tests::Execute(device,
                           lstm_state2_float16::createTestModel,
                           lstm_state2_float16::is_ignored,
                           lstm_state2_float16::get_examples());
}

TEST_F(ValidationTest, lstm_state2_float16) {
  const Model model = lstm_state2_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state2_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state2_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state2_float16::createTestModel_dynamic_output_shape,
                           lstm_state2_float16::is_ignored_dynamic_output_shape,
                           lstm_state2_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state2_float16_dynamic_output_shape) {
  const Model model = lstm_state2_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state2_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state_float16.mod.py.
namespace lstm_state_float16 {
// Generated lstm_state_float16 test
#include "examples/lstm_state_float16.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state_float16.model.cpp"
} // namespace lstm_state_float16

TEST_F(NeuralnetworksHidlTest, lstm_state_float16) {
  generated_tests::Execute(device,
                           lstm_state_float16::createTestModel,
                           lstm_state_float16::is_ignored,
                           lstm_state_float16::get_examples());
}

TEST_F(ValidationTest, lstm_state_float16) {
  const Model model = lstm_state_float16::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state_float16::createTestModel_dynamic_output_shape,
                           lstm_state_float16::is_ignored_dynamic_output_shape,
                           lstm_state_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state_float16_dynamic_output_shape) {
  const Model model = lstm_state_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_v1_2.mod.py.
namespace max_pool_v1_2 {
// Generated max_pool_v1_2 test
#include "examples/max_pool_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_v1_2.model.cpp"
} // namespace max_pool_v1_2

TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc,
                           max_pool_v1_2::is_ignored_nhwc,
                           max_pool_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc) {
  const Model model = max_pool_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_relaxed,
                           max_pool_v1_2::is_ignored_nhwc_relaxed,
                           max_pool_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_quant8,
                           max_pool_v1_2::is_ignored_nhwc_quant8,
                           max_pool_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_quant8) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_float16,
                           max_pool_v1_2::is_ignored_nhwc_float16,
                           max_pool_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_float16) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw,
                           max_pool_v1_2::is_ignored_nchw,
                           max_pool_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw) {
  const Model model = max_pool_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_relaxed,
                           max_pool_v1_2::is_ignored_nchw_relaxed,
                           max_pool_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_quant8,
                           max_pool_v1_2::is_ignored_nchw_quant8,
                           max_pool_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_quant8) {
  const Model model = max_pool_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_float16,
                           max_pool_v1_2::is_ignored_nchw_float16,
                           max_pool_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_float16) {
  const Model model = max_pool_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_2,
                           max_pool_v1_2::is_ignored_nhwc_2,
                           max_pool_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_2) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_relaxed_2,
                           max_pool_v1_2::is_ignored_nhwc_relaxed_2,
                           max_pool_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_quant8_2,
                           max_pool_v1_2::is_ignored_nhwc_quant8_2,
                           max_pool_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_float16_2,
                           max_pool_v1_2::is_ignored_nhwc_float16_2,
                           max_pool_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_2,
                           max_pool_v1_2::is_ignored_nchw_2,
                           max_pool_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_2) {
  const Model model = max_pool_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_relaxed_2,
                           max_pool_v1_2::is_ignored_nchw_relaxed_2,
                           max_pool_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_quant8_2,
                           max_pool_v1_2::is_ignored_nchw_quant8_2,
                           max_pool_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_float16_2,
                           max_pool_v1_2::is_ignored_nchw_float16_2,
                           max_pool_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_3,
                           max_pool_v1_2::is_ignored_nhwc_3,
                           max_pool_v1_2::get_examples_nhwc_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_3) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_relaxed_3,
                           max_pool_v1_2::is_ignored_nhwc_relaxed_3,
                           max_pool_v1_2::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_relaxed_3) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_quant8_3,
                           max_pool_v1_2::is_ignored_nhwc_quant8_3,
                           max_pool_v1_2::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_quant8_3) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_float16_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_float16_3,
                           max_pool_v1_2::is_ignored_nhwc_float16_3,
                           max_pool_v1_2::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_float16_3) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_3,
                           max_pool_v1_2::is_ignored_nchw_3,
                           max_pool_v1_2::get_examples_nchw_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_3) {
  const Model model = max_pool_v1_2::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_relaxed_3,
                           max_pool_v1_2::is_ignored_nchw_relaxed_3,
                           max_pool_v1_2::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_relaxed_3) {
  const Model model = max_pool_v1_2::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_quant8_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_quant8_3,
                           max_pool_v1_2::is_ignored_nchw_quant8_3,
                           max_pool_v1_2::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_quant8_3) {
  const Model model = max_pool_v1_2::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_float16_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_float16_3,
                           max_pool_v1_2::is_ignored_nchw_float16_3,
                           max_pool_v1_2::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_float16_3) {
  const Model model = max_pool_v1_2::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_3,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_3) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_4,
                           max_pool_v1_2::is_ignored_nhwc_4,
                           max_pool_v1_2::get_examples_nhwc_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_4) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_relaxed_4,
                           max_pool_v1_2::is_ignored_nhwc_relaxed_4,
                           max_pool_v1_2::get_examples_nhwc_relaxed_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_relaxed_4) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_quant8_4,
                           max_pool_v1_2::is_ignored_nhwc_quant8_4,
                           max_pool_v1_2::get_examples_nhwc_quant8_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_quant8_4) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nhwc_float16_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nhwc_float16_4,
                           max_pool_v1_2::is_ignored_nhwc_float16_4,
                           max_pool_v1_2::get_examples_nhwc_float16_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nhwc_float16_4) {
  const Model model = max_pool_v1_2::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_4,
                           max_pool_v1_2::is_ignored_nchw_4,
                           max_pool_v1_2::get_examples_nchw_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_4) {
  const Model model = max_pool_v1_2::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_relaxed_4,
                           max_pool_v1_2::is_ignored_nchw_relaxed_4,
                           max_pool_v1_2::get_examples_nchw_relaxed_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_relaxed_4) {
  const Model model = max_pool_v1_2::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_quant8_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_quant8_4,
                           max_pool_v1_2::is_ignored_nchw_quant8_4,
                           max_pool_v1_2::get_examples_nchw_quant8_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_quant8_4) {
  const Model model = max_pool_v1_2::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_nchw_float16_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_nchw_float16_4,
                           max_pool_v1_2::is_ignored_nchw_float16_4,
                           max_pool_v1_2::get_examples_nchw_float16_4());
}

TEST_F(ValidationTest, max_pool_v1_2_nchw_float16_4) {
  const Model model = max_pool_v1_2::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_nchw_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nhwc_float16_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_quant8_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4,
                           max_pool_v1_2::is_ignored_dynamic_output_shape_nchw_float16_4,
                           max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_dynamic_output_shape_nchw_float16_4) {
  const Model model = max_pool_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc,
                           max_pool_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_quant8,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_quant8,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_quant8) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_float16,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_float16,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_float16) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw,
                           max_pool_v1_2::is_ignored_zero_sized_nchw,
                           max_pool_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           max_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_quant8,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_quant8,
                           max_pool_v1_2::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_quant8) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_float16,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_float16,
                           max_pool_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_float16) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_2,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_2,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_relaxed_2,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_quant8_2,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_quant8_2,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2,
                           max_pool_v1_2::is_ignored_zero_sized_nhwc_float16_2,
                           max_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nhwc_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_2,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_2,
                           max_pool_v1_2::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_relaxed_2,
                           max_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_quant8_2,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_quant8_2,
                           max_pool_v1_2::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, max_pool_v1_2_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_nchw_float16_2,
                           max_pool_v1_2::is_ignored_zero_sized_nchw_float16_2,
                           max_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_nchw_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           max_pool_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, max_pool_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = max_pool_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(max_pool_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: maximum.mod.py.
namespace maximum {
// Generated maximum test
#include "examples/maximum.example.cpp"
// Generated model constructor
#include "vts_models/maximum.model.cpp"
} // namespace maximum

TEST_F(NeuralnetworksHidlTest, maximum_simple) {
  generated_tests::Execute(device,
                           maximum::createTestModel,
                           maximum::is_ignored,
                           maximum::get_examples_simple());
}

TEST_F(ValidationTest, maximum_simple) {
  const Model model = maximum::createTestModel();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_simple_relaxed) {
  generated_tests::Execute(device,
                           maximum::createTestModel_relaxed,
                           maximum::is_ignored_relaxed,
                           maximum::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, maximum_simple_relaxed) {
  const Model model = maximum::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_simple_float16) {
  generated_tests::Execute(device,
                           maximum::createTestModel_float16,
                           maximum::is_ignored_float16,
                           maximum::get_examples_simple_float16());
}

TEST_F(ValidationTest, maximum_simple_float16) {
  const Model model = maximum::createTestModel_float16();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_simple_int32) {
  generated_tests::Execute(device,
                           maximum::createTestModel_int32,
                           maximum::is_ignored_int32,
                           maximum::get_examples_simple_int32());
}

TEST_F(ValidationTest, maximum_simple_int32) {
  const Model model = maximum::createTestModel_int32();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_simple_quant8) {
  generated_tests::Execute(device,
                           maximum::createTestModel_quant8,
                           maximum::is_ignored_quant8,
                           maximum::get_examples_simple_quant8());
}

TEST_F(ValidationTest, maximum_simple_quant8) {
  const Model model = maximum::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape,
                           maximum::is_ignored_dynamic_output_shape,
                           maximum::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, maximum_simple_dynamic_output_shape) {
  const Model model = maximum::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_relaxed,
                           maximum::is_ignored_dynamic_output_shape_relaxed,
                           maximum::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, maximum_simple_dynamic_output_shape_relaxed) {
  const Model model = maximum::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_float16,
                           maximum::is_ignored_dynamic_output_shape_float16,
                           maximum::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, maximum_simple_dynamic_output_shape_float16) {
  const Model model = maximum::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_int32,
                           maximum::is_ignored_dynamic_output_shape_int32,
                           maximum::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, maximum_simple_dynamic_output_shape_int32) {
  const Model model = maximum::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_simple_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_quant8,
                           maximum::is_ignored_dynamic_output_shape_quant8,
                           maximum::get_examples_simple_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, maximum_simple_dynamic_output_shape_quant8) {
  const Model model = maximum::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(maximum::get_examples_simple_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, maximum_broadcast) {
  generated_tests::Execute(device,
                           maximum::createTestModel_2,
                           maximum::is_ignored_2,
                           maximum::get_examples_broadcast());
}

TEST_F(ValidationTest, maximum_broadcast) {
  const Model model = maximum::createTestModel_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_broadcast_relaxed) {
  generated_tests::Execute(device,
                           maximum::createTestModel_relaxed_2,
                           maximum::is_ignored_relaxed_2,
                           maximum::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, maximum_broadcast_relaxed) {
  const Model model = maximum::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_broadcast_float16) {
  generated_tests::Execute(device,
                           maximum::createTestModel_float16_2,
                           maximum::is_ignored_float16_2,
                           maximum::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, maximum_broadcast_float16) {
  const Model model = maximum::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_broadcast_int32) {
  generated_tests::Execute(device,
                           maximum::createTestModel_int32_2,
                           maximum::is_ignored_int32_2,
                           maximum::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, maximum_broadcast_int32) {
  const Model model = maximum::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, maximum_broadcast_quant8) {
  generated_tests::Execute(device,
                           maximum::createTestModel_quant8_2,
                           maximum::is_ignored_quant8_2,
                           maximum::get_examples_broadcast_quant8());
}

TEST_F(ValidationTest, maximum_broadcast_quant8) {
  const Model model = maximum::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_2,
                           maximum::is_ignored_dynamic_output_shape_2,
                           maximum::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, maximum_broadcast_dynamic_output_shape) {
  const Model model = maximum::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_relaxed_2,
                           maximum::is_ignored_dynamic_output_shape_relaxed_2,
                           maximum::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, maximum_broadcast_dynamic_output_shape_relaxed) {
  const Model model = maximum::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_float16_2,
                           maximum::is_ignored_dynamic_output_shape_float16_2,
                           maximum::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, maximum_broadcast_dynamic_output_shape_float16) {
  const Model model = maximum::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_int32_2,
                           maximum::is_ignored_dynamic_output_shape_int32_2,
                           maximum::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, maximum_broadcast_dynamic_output_shape_int32) {
  const Model model = maximum::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_broadcast_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_quant8_2,
                           maximum::is_ignored_dynamic_output_shape_quant8_2,
                           maximum::get_examples_broadcast_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, maximum_broadcast_dynamic_output_shape_quant8) {
  const Model model = maximum::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(maximum::get_examples_broadcast_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, maximum_overflow) {
  generated_tests::Execute(device,
                           maximum::createTestModel_3,
                           maximum::is_ignored_3,
                           maximum::get_examples_overflow());
}

TEST_F(ValidationTest, maximum_overflow) {
  const Model model = maximum::createTestModel_3();
  const std::vector<Request> requests = createRequests(maximum::get_examples_overflow());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, maximum_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           maximum::createTestModel_dynamic_output_shape_3,
                           maximum::is_ignored_dynamic_output_shape_3,
                           maximum::get_examples_overflow_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, maximum_overflow_dynamic_output_shape) {
  const Model model = maximum::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(maximum::get_examples_overflow_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_float16.mod.py.
namespace mean_float16 {
// Generated mean_float16 test
#include "examples/mean_float16.example.cpp"
// Generated model constructor
#include "vts_models/mean_float16.model.cpp"
} // namespace mean_float16

TEST_F(NeuralnetworksHidlTest, mean_float16) {
  generated_tests::Execute(device,
                           mean_float16::createTestModel,
                           mean_float16::is_ignored,
                           mean_float16::get_examples());
}

TEST_F(ValidationTest, mean_float16) {
  const Model model = mean_float16::createTestModel();
  const std::vector<Request> requests = createRequests(mean_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_float16::createTestModel_dynamic_output_shape,
                           mean_float16::is_ignored_dynamic_output_shape,
                           mean_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_float16_dynamic_output_shape) {
  const Model model = mean_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: minimum.mod.py.
namespace minimum {
// Generated minimum test
#include "examples/minimum.example.cpp"
// Generated model constructor
#include "vts_models/minimum.model.cpp"
} // namespace minimum

TEST_F(NeuralnetworksHidlTest, minimum_simple) {
  generated_tests::Execute(device,
                           minimum::createTestModel,
                           minimum::is_ignored,
                           minimum::get_examples_simple());
}

TEST_F(ValidationTest, minimum_simple) {
  const Model model = minimum::createTestModel();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_simple_relaxed) {
  generated_tests::Execute(device,
                           minimum::createTestModel_relaxed,
                           minimum::is_ignored_relaxed,
                           minimum::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, minimum_simple_relaxed) {
  const Model model = minimum::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_simple_float16) {
  generated_tests::Execute(device,
                           minimum::createTestModel_float16,
                           minimum::is_ignored_float16,
                           minimum::get_examples_simple_float16());
}

TEST_F(ValidationTest, minimum_simple_float16) {
  const Model model = minimum::createTestModel_float16();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_simple_int32) {
  generated_tests::Execute(device,
                           minimum::createTestModel_int32,
                           minimum::is_ignored_int32,
                           minimum::get_examples_simple_int32());
}

TEST_F(ValidationTest, minimum_simple_int32) {
  const Model model = minimum::createTestModel_int32();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_simple_quant8) {
  generated_tests::Execute(device,
                           minimum::createTestModel_quant8,
                           minimum::is_ignored_quant8,
                           minimum::get_examples_simple_quant8());
}

TEST_F(ValidationTest, minimum_simple_quant8) {
  const Model model = minimum::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape,
                           minimum::is_ignored_dynamic_output_shape,
                           minimum::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, minimum_simple_dynamic_output_shape) {
  const Model model = minimum::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_relaxed,
                           minimum::is_ignored_dynamic_output_shape_relaxed,
                           minimum::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, minimum_simple_dynamic_output_shape_relaxed) {
  const Model model = minimum::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_float16,
                           minimum::is_ignored_dynamic_output_shape_float16,
                           minimum::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, minimum_simple_dynamic_output_shape_float16) {
  const Model model = minimum::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_int32,
                           minimum::is_ignored_dynamic_output_shape_int32,
                           minimum::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, minimum_simple_dynamic_output_shape_int32) {
  const Model model = minimum::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_simple_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_quant8,
                           minimum::is_ignored_dynamic_output_shape_quant8,
                           minimum::get_examples_simple_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, minimum_simple_dynamic_output_shape_quant8) {
  const Model model = minimum::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(minimum::get_examples_simple_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, minimum_broadcast) {
  generated_tests::Execute(device,
                           minimum::createTestModel_2,
                           minimum::is_ignored_2,
                           minimum::get_examples_broadcast());
}

TEST_F(ValidationTest, minimum_broadcast) {
  const Model model = minimum::createTestModel_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_broadcast_relaxed) {
  generated_tests::Execute(device,
                           minimum::createTestModel_relaxed_2,
                           minimum::is_ignored_relaxed_2,
                           minimum::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, minimum_broadcast_relaxed) {
  const Model model = minimum::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_broadcast_float16) {
  generated_tests::Execute(device,
                           minimum::createTestModel_float16_2,
                           minimum::is_ignored_float16_2,
                           minimum::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, minimum_broadcast_float16) {
  const Model model = minimum::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_broadcast_int32) {
  generated_tests::Execute(device,
                           minimum::createTestModel_int32_2,
                           minimum::is_ignored_int32_2,
                           minimum::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, minimum_broadcast_int32) {
  const Model model = minimum::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, minimum_broadcast_quant8) {
  generated_tests::Execute(device,
                           minimum::createTestModel_quant8_2,
                           minimum::is_ignored_quant8_2,
                           minimum::get_examples_broadcast_quant8());
}

TEST_F(ValidationTest, minimum_broadcast_quant8) {
  const Model model = minimum::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_2,
                           minimum::is_ignored_dynamic_output_shape_2,
                           minimum::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, minimum_broadcast_dynamic_output_shape) {
  const Model model = minimum::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_relaxed_2,
                           minimum::is_ignored_dynamic_output_shape_relaxed_2,
                           minimum::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, minimum_broadcast_dynamic_output_shape_relaxed) {
  const Model model = minimum::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_float16_2,
                           minimum::is_ignored_dynamic_output_shape_float16_2,
                           minimum::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, minimum_broadcast_dynamic_output_shape_float16) {
  const Model model = minimum::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_int32_2,
                           minimum::is_ignored_dynamic_output_shape_int32_2,
                           minimum::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, minimum_broadcast_dynamic_output_shape_int32) {
  const Model model = minimum::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_broadcast_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_quant8_2,
                           minimum::is_ignored_dynamic_output_shape_quant8_2,
                           minimum::get_examples_broadcast_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, minimum_broadcast_dynamic_output_shape_quant8) {
  const Model model = minimum::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(minimum::get_examples_broadcast_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, minimum_overflow) {
  generated_tests::Execute(device,
                           minimum::createTestModel_3,
                           minimum::is_ignored_3,
                           minimum::get_examples_overflow());
}

TEST_F(ValidationTest, minimum_overflow) {
  const Model model = minimum::createTestModel_3();
  const std::vector<Request> requests = createRequests(minimum::get_examples_overflow());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, minimum_overflow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           minimum::createTestModel_dynamic_output_shape_3,
                           minimum::is_ignored_dynamic_output_shape_3,
                           minimum::get_examples_overflow_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, minimum_overflow_dynamic_output_shape) {
  const Model model = minimum::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(minimum::get_examples_overflow_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_v1_2.mod.py.
namespace mul_v1_2 {
// Generated mul_v1_2 test
#include "examples/mul_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/mul_v1_2.model.cpp"
} // namespace mul_v1_2

TEST_F(NeuralnetworksHidlTest, mul_v1_2) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel,
                           mul_v1_2::is_ignored,
                           mul_v1_2::get_examples());
}

TEST_F(ValidationTest, mul_v1_2) {
  const Model model = mul_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_dynamic_output_shape,
                           mul_v1_2::is_ignored_dynamic_output_shape,
                           mul_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_v1_2_dynamic_output_shape) {
  const Model model = mul_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, mul_v1_2_2) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_2,
                           mul_v1_2::is_ignored_2,
                           mul_v1_2::get_examples_2());
}

TEST_F(ValidationTest, mul_v1_2_2) {
  const Model model = mul_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_dynamic_output_shape_2,
                           mul_v1_2::is_ignored_dynamic_output_shape_2,
                           mul_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, mul_v1_2_dynamic_output_shape_2) {
  const Model model = mul_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, mul_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized,
                           mul_v1_2::is_ignored_zero_sized,
                           mul_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, mul_v1_2_zero_sized) {
  const Model model = mul_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, mul_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_relaxed,
                           mul_v1_2::is_ignored_zero_sized_relaxed,
                           mul_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_relaxed) {
  const Model model = mul_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, mul_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_quant8,
                           mul_v1_2::is_ignored_zero_sized_quant8,
                           mul_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_quant8) {
  const Model model = mul_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, mul_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_float16,
                           mul_v1_2::is_ignored_zero_sized_float16,
                           mul_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_float16) {
  const Model model = mul_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           mul_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           mul_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = mul_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           mul_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           mul_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           mul_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           mul_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           mul_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           mul_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, mul_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = mul_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(mul_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: neg.mod.py.
namespace neg {
// Generated neg test
#include "examples/neg.example.cpp"
// Generated model constructor
#include "vts_models/neg.model.cpp"
} // namespace neg

TEST_F(NeuralnetworksHidlTest, neg) {
  generated_tests::Execute(device,
                           neg::createTestModel,
                           neg::is_ignored,
                           neg::get_examples());
}

TEST_F(ValidationTest, neg) {
  const Model model = neg::createTestModel();
  const std::vector<Request> requests = createRequests(neg::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, neg_relaxed) {
  generated_tests::Execute(device,
                           neg::createTestModel_relaxed,
                           neg::is_ignored_relaxed,
                           neg::get_examples_relaxed());
}

TEST_F(ValidationTest, neg_relaxed) {
  const Model model = neg::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(neg::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, neg_float16) {
  generated_tests::Execute(device,
                           neg::createTestModel_float16,
                           neg::is_ignored_float16,
                           neg::get_examples_float16());
}

TEST_F(ValidationTest, neg_float16) {
  const Model model = neg::createTestModel_float16();
  const std::vector<Request> requests = createRequests(neg::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, neg_int32) {
  generated_tests::Execute(device,
                           neg::createTestModel_int32,
                           neg::is_ignored_int32,
                           neg::get_examples_int32());
}

TEST_F(ValidationTest, neg_int32) {
  const Model model = neg::createTestModel_int32();
  const std::vector<Request> requests = createRequests(neg::get_examples_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, neg_dynamic_output_shape) {
  generated_tests::Execute(device,
                           neg::createTestModel_dynamic_output_shape,
                           neg::is_ignored_dynamic_output_shape,
                           neg::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, neg_dynamic_output_shape) {
  const Model model = neg::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(neg::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, neg_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           neg::createTestModel_dynamic_output_shape_relaxed,
                           neg::is_ignored_dynamic_output_shape_relaxed,
                           neg::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, neg_dynamic_output_shape_relaxed) {
  const Model model = neg::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(neg::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, neg_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           neg::createTestModel_dynamic_output_shape_float16,
                           neg::is_ignored_dynamic_output_shape_float16,
                           neg::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, neg_dynamic_output_shape_float16) {
  const Model model = neg::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(neg::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, neg_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           neg::createTestModel_dynamic_output_shape_int32,
                           neg::is_ignored_dynamic_output_shape_int32,
                           neg::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, neg_dynamic_output_shape_int32) {
  const Model model = neg::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(neg::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
// Generated from: not_equal.mod.py.
namespace not_equal {
// Generated not_equal test
#include "examples/not_equal.example.cpp"
// Generated model constructor
#include "vts_models/not_equal.model.cpp"
} // namespace not_equal

TEST_F(NeuralnetworksHidlTest, not_equal_simple) {
  generated_tests::Execute(device,
                           not_equal::createTestModel,
                           not_equal::is_ignored,
                           not_equal::get_examples_simple());
}

TEST_F(ValidationTest, not_equal_simple) {
  const Model model = not_equal::createTestModel();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_simple_int32) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_int32,
                           not_equal::is_ignored_int32,
                           not_equal::get_examples_simple_int32());
}

TEST_F(ValidationTest, not_equal_simple_int32) {
  const Model model = not_equal::createTestModel_int32();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_simple_float16) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_float16,
                           not_equal::is_ignored_float16,
                           not_equal::get_examples_simple_float16());
}

TEST_F(ValidationTest, not_equal_simple_float16) {
  const Model model = not_equal::createTestModel_float16();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_simple_relaxed) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_relaxed,
                           not_equal::is_ignored_relaxed,
                           not_equal::get_examples_simple_relaxed());
}

TEST_F(ValidationTest, not_equal_simple_relaxed) {
  const Model model = not_equal::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape,
                           not_equal::is_ignored_dynamic_output_shape,
                           not_equal::get_examples_simple_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_simple_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_simple_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_int32,
                           not_equal::is_ignored_dynamic_output_shape_int32,
                           not_equal::get_examples_simple_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, not_equal_simple_dynamic_output_shape_int32) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_simple_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_float16,
                           not_equal::is_ignored_dynamic_output_shape_float16,
                           not_equal::get_examples_simple_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, not_equal_simple_dynamic_output_shape_float16) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_simple_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_relaxed,
                           not_equal::is_ignored_dynamic_output_shape_relaxed,
                           not_equal::get_examples_simple_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, not_equal_simple_dynamic_output_shape_relaxed) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_simple_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_broadcast) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_2,
                           not_equal::is_ignored_2,
                           not_equal::get_examples_broadcast());
}

TEST_F(ValidationTest, not_equal_broadcast) {
  const Model model = not_equal::createTestModel_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_broadcast_int32) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_int32_2,
                           not_equal::is_ignored_int32_2,
                           not_equal::get_examples_broadcast_int32());
}

TEST_F(ValidationTest, not_equal_broadcast_int32) {
  const Model model = not_equal::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_broadcast_float16) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_float16_2,
                           not_equal::is_ignored_float16_2,
                           not_equal::get_examples_broadcast_float16());
}

TEST_F(ValidationTest, not_equal_broadcast_float16) {
  const Model model = not_equal::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, not_equal_broadcast_relaxed) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_relaxed_2,
                           not_equal::is_ignored_relaxed_2,
                           not_equal::get_examples_broadcast_relaxed());
}

TEST_F(ValidationTest, not_equal_broadcast_relaxed) {
  const Model model = not_equal::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_broadcast_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_2,
                           not_equal::is_ignored_dynamic_output_shape_2,
                           not_equal::get_examples_broadcast_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_broadcast_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_broadcast_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_int32_2,
                           not_equal::is_ignored_dynamic_output_shape_int32_2,
                           not_equal::get_examples_broadcast_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, not_equal_broadcast_dynamic_output_shape_int32) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_broadcast_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_float16_2,
                           not_equal::is_ignored_dynamic_output_shape_float16_2,
                           not_equal::get_examples_broadcast_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, not_equal_broadcast_dynamic_output_shape_float16) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_broadcast_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_relaxed_2,
                           not_equal::is_ignored_dynamic_output_shape_relaxed_2,
                           not_equal::get_examples_broadcast_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, not_equal_broadcast_dynamic_output_shape_relaxed) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_broadcast_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_quantized_different_scale) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_3,
                           not_equal::is_ignored_3,
                           not_equal::get_examples_quantized_different_scale());
}

TEST_F(ValidationTest, not_equal_quantized_different_scale) {
  const Model model = not_equal::createTestModel_3();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_different_scale());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_quantized_different_scale_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_3,
                           not_equal::is_ignored_dynamic_output_shape_3,
                           not_equal::get_examples_quantized_different_scale_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_quantized_different_scale_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_different_scale_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_quantized_different_zero_point) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_4,
                           not_equal::is_ignored_4,
                           not_equal::get_examples_quantized_different_zero_point());
}

TEST_F(ValidationTest, not_equal_quantized_different_zero_point) {
  const Model model = not_equal::createTestModel_4();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_different_zero_point());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_quantized_different_zero_point_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_4,
                           not_equal::is_ignored_dynamic_output_shape_4,
                           not_equal::get_examples_quantized_different_zero_point_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_quantized_different_zero_point_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_different_zero_point_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_quantized_overflow_second_input_if_requantized) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_5,
                           not_equal::is_ignored_5,
                           not_equal::get_examples_quantized_overflow_second_input_if_requantized());
}

TEST_F(ValidationTest, not_equal_quantized_overflow_second_input_if_requantized) {
  const Model model = not_equal::createTestModel_5();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_overflow_second_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_5,
                           not_equal::is_ignored_dynamic_output_shape_5,
                           not_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_quantized_overflow_second_input_if_requantized_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_overflow_second_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_quantized_overflow_first_input_if_requantized) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_6,
                           not_equal::is_ignored_6,
                           not_equal::get_examples_quantized_overflow_first_input_if_requantized());
}

TEST_F(ValidationTest, not_equal_quantized_overflow_first_input_if_requantized) {
  const Model model = not_equal::createTestModel_6();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_overflow_first_input_if_requantized());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_6,
                           not_equal::is_ignored_dynamic_output_shape_6,
                           not_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_quantized_overflow_first_input_if_requantized_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_quantized_overflow_first_input_if_requantized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, not_equal_boolean) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_7,
                           not_equal::is_ignored_7,
                           not_equal::get_examples_boolean());
}

TEST_F(ValidationTest, not_equal_boolean) {
  const Model model = not_equal::createTestModel_7();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_boolean());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, not_equal_boolean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           not_equal::createTestModel_dynamic_output_shape_7,
                           not_equal::is_ignored_dynamic_output_shape_7,
                           not_equal::get_examples_boolean_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, not_equal_boolean_dynamic_output_shape) {
  const Model model = not_equal::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(not_equal::get_examples_boolean_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_all_dims.mod.py.
namespace pad_all_dims {
// Generated pad_all_dims test
#include "examples/pad_all_dims.example.cpp"
// Generated model constructor
#include "vts_models/pad_all_dims.model.cpp"
} // namespace pad_all_dims

TEST_F(NeuralnetworksHidlTest, pad_all_dims) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel,
                           pad_all_dims::is_ignored,
                           pad_all_dims::get_examples());
}

TEST_F(ValidationTest, pad_all_dims) {
  const Model model = pad_all_dims::createTestModel();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_all_dims_float16) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_float16,
                           pad_all_dims::is_ignored_float16,
                           pad_all_dims::get_examples_float16());
}

TEST_F(ValidationTest, pad_all_dims_float16) {
  const Model model = pad_all_dims::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_all_dims_relaxed) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_relaxed,
                           pad_all_dims::is_ignored_relaxed,
                           pad_all_dims::get_examples_relaxed());
}

TEST_F(ValidationTest, pad_all_dims_relaxed) {
  const Model model = pad_all_dims::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_all_dims_quant8) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_quant8,
                           pad_all_dims::is_ignored_quant8,
                           pad_all_dims::get_examples_quant8());
}

TEST_F(ValidationTest, pad_all_dims_quant8) {
  const Model model = pad_all_dims::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_all_dims_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_dynamic_output_shape,
                           pad_all_dims::is_ignored_dynamic_output_shape,
                           pad_all_dims::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_all_dims_dynamic_output_shape) {
  const Model model = pad_all_dims::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_all_dims_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_dynamic_output_shape_float16,
                           pad_all_dims::is_ignored_dynamic_output_shape_float16,
                           pad_all_dims::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pad_all_dims_dynamic_output_shape_float16) {
  const Model model = pad_all_dims::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_all_dims_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_dynamic_output_shape_relaxed,
                           pad_all_dims::is_ignored_dynamic_output_shape_relaxed,
                           pad_all_dims::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, pad_all_dims_dynamic_output_shape_relaxed) {
  const Model model = pad_all_dims::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_all_dims_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           pad_all_dims::createTestModel_dynamic_output_shape_quant8,
                           pad_all_dims::is_ignored_dynamic_output_shape_quant8,
                           pad_all_dims::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, pad_all_dims_dynamic_output_shape_quant8) {
  const Model model = pad_all_dims::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(pad_all_dims::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_float16.mod.py.
namespace pad_float16 {
// Generated pad_float16 test
#include "examples/pad_float16.example.cpp"
// Generated model constructor
#include "vts_models/pad_float16.model.cpp"
} // namespace pad_float16

TEST_F(NeuralnetworksHidlTest, pad_float16) {
  generated_tests::Execute(device,
                           pad_float16::createTestModel,
                           pad_float16::is_ignored,
                           pad_float16::get_examples());
}

TEST_F(ValidationTest, pad_float16) {
  const Model model = pad_float16::createTestModel();
  const std::vector<Request> requests = createRequests(pad_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_float16::createTestModel_dynamic_output_shape,
                           pad_float16::is_ignored_dynamic_output_shape,
                           pad_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_float16_dynamic_output_shape) {
  const Model model = pad_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_low_rank.mod.py.
namespace pad_low_rank {
// Generated pad_low_rank test
#include "examples/pad_low_rank.example.cpp"
// Generated model constructor
#include "vts_models/pad_low_rank.model.cpp"
} // namespace pad_low_rank

TEST_F(NeuralnetworksHidlTest, pad_low_rank) {
  generated_tests::Execute(device,
                           pad_low_rank::createTestModel,
                           pad_low_rank::is_ignored,
                           pad_low_rank::get_examples());
}

TEST_F(ValidationTest, pad_low_rank) {
  const Model model = pad_low_rank::createTestModel();
  const std::vector<Request> requests = createRequests(pad_low_rank::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_low_rank_float16) {
  generated_tests::Execute(device,
                           pad_low_rank::createTestModel_float16,
                           pad_low_rank::is_ignored_float16,
                           pad_low_rank::get_examples_float16());
}

TEST_F(ValidationTest, pad_low_rank_float16) {
  const Model model = pad_low_rank::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pad_low_rank::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_low_rank_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_low_rank::createTestModel_dynamic_output_shape,
                           pad_low_rank::is_ignored_dynamic_output_shape,
                           pad_low_rank::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_low_rank_dynamic_output_shape) {
  const Model model = pad_low_rank::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_low_rank::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_low_rank_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pad_low_rank::createTestModel_dynamic_output_shape_float16,
                           pad_low_rank::is_ignored_dynamic_output_shape_float16,
                           pad_low_rank::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pad_low_rank_dynamic_output_shape_float16) {
  const Model model = pad_low_rank::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pad_low_rank::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_low_rank_quant8.mod.py.
namespace pad_low_rank_quant8 {
// Generated pad_low_rank_quant8 test
#include "examples/pad_low_rank_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_low_rank_quant8.model.cpp"
} // namespace pad_low_rank_quant8

TEST_F(NeuralnetworksHidlTest, pad_low_rank_quant8) {
  generated_tests::Execute(device,
                           pad_low_rank_quant8::createTestModel,
                           pad_low_rank_quant8::is_ignored,
                           pad_low_rank_quant8::get_examples());
}

TEST_F(ValidationTest, pad_low_rank_quant8) {
  const Model model = pad_low_rank_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(pad_low_rank_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_low_rank_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_low_rank_quant8::createTestModel_dynamic_output_shape,
                           pad_low_rank_quant8::is_ignored_dynamic_output_shape,
                           pad_low_rank_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_low_rank_quant8_dynamic_output_shape) {
  const Model model = pad_low_rank_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_low_rank_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_quant8.mod.py.
namespace pad_quant8 {
// Generated pad_quant8 test
#include "examples/pad_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_quant8.model.cpp"
} // namespace pad_quant8

TEST_F(NeuralnetworksHidlTest, pad_quant8) {
  generated_tests::Execute(device,
                           pad_quant8::createTestModel,
                           pad_quant8::is_ignored,
                           pad_quant8::get_examples());
}

TEST_F(ValidationTest, pad_quant8) {
  const Model model = pad_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(pad_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_quant8::createTestModel_dynamic_output_shape,
                           pad_quant8::is_ignored_dynamic_output_shape,
                           pad_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_quant8_dynamic_output_shape) {
  const Model model = pad_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_quant8_nonzero.mod.py.
namespace pad_quant8_nonzero {
// Generated pad_quant8_nonzero test
#include "examples/pad_quant8_nonzero.example.cpp"
// Generated model constructor
#include "vts_models/pad_quant8_nonzero.model.cpp"
} // namespace pad_quant8_nonzero

TEST_F(NeuralnetworksHidlTest, pad_quant8_nonzero) {
  generated_tests::Execute(device,
                           pad_quant8_nonzero::createTestModel,
                           pad_quant8_nonzero::is_ignored,
                           pad_quant8_nonzero::get_examples());
}

TEST_F(ValidationTest, pad_quant8_nonzero) {
  const Model model = pad_quant8_nonzero::createTestModel();
  const std::vector<Request> requests = createRequests(pad_quant8_nonzero::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_quant8_nonzero_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_quant8_nonzero::createTestModel_dynamic_output_shape,
                           pad_quant8_nonzero::is_ignored_dynamic_output_shape,
                           pad_quant8_nonzero::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_quant8_nonzero_dynamic_output_shape) {
  const Model model = pad_quant8_nonzero::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_quant8_nonzero::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_1_float.mod.py.
namespace pad_v2_1_float {
// Generated pad_v2_1_float test
#include "examples/pad_v2_1_float.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_1_float.model.cpp"
} // namespace pad_v2_1_float

TEST_F(NeuralnetworksHidlTest, pad_v2_1_float) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel,
                           pad_v2_1_float::is_ignored,
                           pad_v2_1_float::get_examples());
}

TEST_F(ValidationTest, pad_v2_1_float) {
  const Model model = pad_v2_1_float::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_v2_1_float_float16) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel_float16,
                           pad_v2_1_float::is_ignored_float16,
                           pad_v2_1_float::get_examples_float16());
}

TEST_F(ValidationTest, pad_v2_1_float_float16) {
  const Model model = pad_v2_1_float::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_v2_1_float_relaxed) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel_relaxed,
                           pad_v2_1_float::is_ignored_relaxed,
                           pad_v2_1_float::get_examples_relaxed());
}

TEST_F(ValidationTest, pad_v2_1_float_relaxed) {
  const Model model = pad_v2_1_float::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_1_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel_dynamic_output_shape,
                           pad_v2_1_float::is_ignored_dynamic_output_shape,
                           pad_v2_1_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_1_float_dynamic_output_shape) {
  const Model model = pad_v2_1_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_1_float_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel_dynamic_output_shape_float16,
                           pad_v2_1_float::is_ignored_dynamic_output_shape_float16,
                           pad_v2_1_float::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pad_v2_1_float_dynamic_output_shape_float16) {
  const Model model = pad_v2_1_float::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_1_float_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           pad_v2_1_float::createTestModel_dynamic_output_shape_relaxed,
                           pad_v2_1_float::is_ignored_dynamic_output_shape_relaxed,
                           pad_v2_1_float::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, pad_v2_1_float_dynamic_output_shape_relaxed) {
  const Model model = pad_v2_1_float::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(pad_v2_1_float::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_1_quant8.mod.py.
namespace pad_v2_1_quant8 {
// Generated pad_v2_1_quant8 test
#include "examples/pad_v2_1_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_1_quant8.model.cpp"
} // namespace pad_v2_1_quant8

TEST_F(NeuralnetworksHidlTest, pad_v2_1_quant8) {
  generated_tests::Execute(device,
                           pad_v2_1_quant8::createTestModel,
                           pad_v2_1_quant8::is_ignored,
                           pad_v2_1_quant8::get_examples());
}

TEST_F(ValidationTest, pad_v2_1_quant8) {
  const Model model = pad_v2_1_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_1_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_1_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_1_quant8::createTestModel_dynamic_output_shape,
                           pad_v2_1_quant8::is_ignored_dynamic_output_shape,
                           pad_v2_1_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_1_quant8_dynamic_output_shape) {
  const Model model = pad_v2_1_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_1_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_all_dims.mod.py.
namespace pad_v2_all_dims {
// Generated pad_v2_all_dims test
#include "examples/pad_v2_all_dims.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_all_dims.model.cpp"
} // namespace pad_v2_all_dims

TEST_F(NeuralnetworksHidlTest, pad_v2_all_dims) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel,
                           pad_v2_all_dims::is_ignored,
                           pad_v2_all_dims::get_examples());
}

TEST_F(ValidationTest, pad_v2_all_dims) {
  const Model model = pad_v2_all_dims::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_v2_all_dims_float16) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel_float16,
                           pad_v2_all_dims::is_ignored_float16,
                           pad_v2_all_dims::get_examples_float16());
}

TEST_F(ValidationTest, pad_v2_all_dims_float16) {
  const Model model = pad_v2_all_dims::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_v2_all_dims_relaxed) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel_relaxed,
                           pad_v2_all_dims::is_ignored_relaxed,
                           pad_v2_all_dims::get_examples_relaxed());
}

TEST_F(ValidationTest, pad_v2_all_dims_relaxed) {
  const Model model = pad_v2_all_dims::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_all_dims_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel_dynamic_output_shape,
                           pad_v2_all_dims::is_ignored_dynamic_output_shape,
                           pad_v2_all_dims::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_all_dims_dynamic_output_shape) {
  const Model model = pad_v2_all_dims::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_all_dims_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel_dynamic_output_shape_float16,
                           pad_v2_all_dims::is_ignored_dynamic_output_shape_float16,
                           pad_v2_all_dims::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pad_v2_all_dims_dynamic_output_shape_float16) {
  const Model model = pad_v2_all_dims::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_all_dims_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           pad_v2_all_dims::createTestModel_dynamic_output_shape_relaxed,
                           pad_v2_all_dims::is_ignored_dynamic_output_shape_relaxed,
                           pad_v2_all_dims::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, pad_v2_all_dims_dynamic_output_shape_relaxed) {
  const Model model = pad_v2_all_dims::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_all_dims_quant8.mod.py.
namespace pad_v2_all_dims_quant8 {
// Generated pad_v2_all_dims_quant8 test
#include "examples/pad_v2_all_dims_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_all_dims_quant8.model.cpp"
} // namespace pad_v2_all_dims_quant8

TEST_F(NeuralnetworksHidlTest, pad_v2_all_dims_quant8) {
  generated_tests::Execute(device,
                           pad_v2_all_dims_quant8::createTestModel,
                           pad_v2_all_dims_quant8::is_ignored,
                           pad_v2_all_dims_quant8::get_examples());
}

TEST_F(ValidationTest, pad_v2_all_dims_quant8) {
  const Model model = pad_v2_all_dims_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_all_dims_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_all_dims_quant8::createTestModel_dynamic_output_shape,
                           pad_v2_all_dims_quant8::is_ignored_dynamic_output_shape,
                           pad_v2_all_dims_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_all_dims_quant8_dynamic_output_shape) {
  const Model model = pad_v2_all_dims_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_all_dims_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_low_rank.mod.py.
namespace pad_v2_low_rank {
// Generated pad_v2_low_rank test
#include "examples/pad_v2_low_rank.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_low_rank.model.cpp"
} // namespace pad_v2_low_rank

TEST_F(NeuralnetworksHidlTest, pad_v2_low_rank) {
  generated_tests::Execute(device,
                           pad_v2_low_rank::createTestModel,
                           pad_v2_low_rank::is_ignored,
                           pad_v2_low_rank::get_examples());
}

TEST_F(ValidationTest, pad_v2_low_rank) {
  const Model model = pad_v2_low_rank::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pad_v2_low_rank_float16) {
  generated_tests::Execute(device,
                           pad_v2_low_rank::createTestModel_float16,
                           pad_v2_low_rank::is_ignored_float16,
                           pad_v2_low_rank::get_examples_float16());
}

TEST_F(ValidationTest, pad_v2_low_rank_float16) {
  const Model model = pad_v2_low_rank::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_low_rank_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_low_rank::createTestModel_dynamic_output_shape,
                           pad_v2_low_rank::is_ignored_dynamic_output_shape,
                           pad_v2_low_rank::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_low_rank_dynamic_output_shape) {
  const Model model = pad_v2_low_rank::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_low_rank_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pad_v2_low_rank::createTestModel_dynamic_output_shape_float16,
                           pad_v2_low_rank::is_ignored_dynamic_output_shape_float16,
                           pad_v2_low_rank::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pad_v2_low_rank_dynamic_output_shape_float16) {
  const Model model = pad_v2_low_rank::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_v2_low_rank_quant8.mod.py.
namespace pad_v2_low_rank_quant8 {
// Generated pad_v2_low_rank_quant8 test
#include "examples/pad_v2_low_rank_quant8.example.cpp"
// Generated model constructor
#include "vts_models/pad_v2_low_rank_quant8.model.cpp"
} // namespace pad_v2_low_rank_quant8

TEST_F(NeuralnetworksHidlTest, pad_v2_low_rank_quant8) {
  generated_tests::Execute(device,
                           pad_v2_low_rank_quant8::createTestModel,
                           pad_v2_low_rank_quant8::is_ignored,
                           pad_v2_low_rank_quant8::get_examples());
}

TEST_F(ValidationTest, pad_v2_low_rank_quant8) {
  const Model model = pad_v2_low_rank_quant8::createTestModel();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank_quant8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_v2_low_rank_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_v2_low_rank_quant8::createTestModel_dynamic_output_shape,
                           pad_v2_low_rank_quant8::is_ignored_dynamic_output_shape,
                           pad_v2_low_rank_quant8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_v2_low_rank_quant8_dynamic_output_shape) {
  const Model model = pad_v2_low_rank_quant8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_v2_low_rank_quant8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pow.mod.py.
namespace pow {
// Generated pow test
#include "examples/pow.example.cpp"
// Generated model constructor
#include "vts_models/pow.model.cpp"
} // namespace pow

TEST_F(NeuralnetworksHidlTest, pow) {
  generated_tests::Execute(device,
                           pow::createTestModel,
                           pow::is_ignored,
                           pow::get_examples());
}

TEST_F(ValidationTest, pow) {
  const Model model = pow::createTestModel();
  const std::vector<Request> requests = createRequests(pow::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_relaxed) {
  generated_tests::Execute(device,
                           pow::createTestModel_relaxed,
                           pow::is_ignored_relaxed,
                           pow::get_examples_relaxed());
}

TEST_F(ValidationTest, pow_relaxed) {
  const Model model = pow::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(pow::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_float16) {
  generated_tests::Execute(device,
                           pow::createTestModel_float16,
                           pow::is_ignored_float16,
                           pow::get_examples_float16());
}

TEST_F(ValidationTest, pow_float16) {
  const Model model = pow::createTestModel_float16();
  const std::vector<Request> requests = createRequests(pow::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape,
                           pow::is_ignored_dynamic_output_shape,
                           pow::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape) {
  const Model model = pow::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_relaxed,
                           pow::is_ignored_dynamic_output_shape_relaxed,
                           pow::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_relaxed) {
  const Model model = pow::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_float16,
                           pow::is_ignored_dynamic_output_shape_float16,
                           pow::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_float16) {
  const Model model = pow::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, pow_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_2,
                           pow::is_ignored_2,
                           pow::get_examples_2());
}

TEST_F(ValidationTest, pow_2) {
  const Model model = pow::createTestModel_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_relaxed_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_relaxed_2,
                           pow::is_ignored_relaxed_2,
                           pow::get_examples_relaxed_2());
}

TEST_F(ValidationTest, pow_relaxed_2) {
  const Model model = pow::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_float16_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_float16_2,
                           pow::is_ignored_float16_2,
                           pow::get_examples_float16_2());
}

TEST_F(ValidationTest, pow_float16_2) {
  const Model model = pow::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_2,
                           pow::is_ignored_dynamic_output_shape_2,
                           pow::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_2) {
  const Model model = pow::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_relaxed_2,
                           pow::is_ignored_dynamic_output_shape_relaxed_2,
                           pow::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_relaxed_2) {
  const Model model = pow::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_float16_2,
                           pow::is_ignored_dynamic_output_shape_float16_2,
                           pow::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_float16_2) {
  const Model model = pow::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, pow_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_3,
                           pow::is_ignored_3,
                           pow::get_examples_3());
}

TEST_F(ValidationTest, pow_3) {
  const Model model = pow::createTestModel_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_relaxed_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_relaxed_3,
                           pow::is_ignored_relaxed_3,
                           pow::get_examples_relaxed_3());
}

TEST_F(ValidationTest, pow_relaxed_3) {
  const Model model = pow::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, pow_float16_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_float16_3,
                           pow::is_ignored_float16_3,
                           pow::get_examples_float16_3());
}

TEST_F(ValidationTest, pow_float16_3) {
  const Model model = pow::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_3,
                           pow::is_ignored_dynamic_output_shape_3,
                           pow::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_3) {
  const Model model = pow::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_relaxed_3,
                           pow::is_ignored_dynamic_output_shape_relaxed_3,
                           pow::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_relaxed_3) {
  const Model model = pow::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pow_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           pow::createTestModel_dynamic_output_shape_float16_3,
                           pow::is_ignored_dynamic_output_shape_float16_3,
                           pow::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, pow_dynamic_output_shape_float16_3) {
  const Model model = pow::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(pow::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
// Generated from: prelu.mod.py.
namespace prelu {
// Generated prelu test
#include "examples/prelu.example.cpp"
// Generated model constructor
#include "vts_models/prelu.model.cpp"
} // namespace prelu

TEST_F(NeuralnetworksHidlTest, prelu) {
  generated_tests::Execute(device,
                           prelu::createTestModel,
                           prelu::is_ignored,
                           prelu::get_examples());
}

TEST_F(ValidationTest, prelu) {
  const Model model = prelu::createTestModel();
  const std::vector<Request> requests = createRequests(prelu::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_relaxed) {
  generated_tests::Execute(device,
                           prelu::createTestModel_relaxed,
                           prelu::is_ignored_relaxed,
                           prelu::get_examples_relaxed());
}

TEST_F(ValidationTest, prelu_relaxed) {
  const Model model = prelu::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(prelu::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_quant8) {
  generated_tests::Execute(device,
                           prelu::createTestModel_quant8,
                           prelu::is_ignored_quant8,
                           prelu::get_examples_quant8());
}

TEST_F(ValidationTest, prelu_quant8) {
  const Model model = prelu::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(prelu::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_quant8_2) {
  generated_tests::Execute(device,
                           prelu::createTestModel_quant8_2,
                           prelu::is_ignored_quant8_2,
                           prelu::get_examples_quant8_2());
}

TEST_F(ValidationTest, prelu_quant8_2) {
  const Model model = prelu::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(prelu::get_examples_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_quant8_3) {
  generated_tests::Execute(device,
                           prelu::createTestModel_quant8_3,
                           prelu::is_ignored_quant8_3,
                           prelu::get_examples_quant8_3());
}

TEST_F(ValidationTest, prelu_quant8_3) {
  const Model model = prelu::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(prelu::get_examples_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_quant8_4) {
  generated_tests::Execute(device,
                           prelu::createTestModel_quant8_4,
                           prelu::is_ignored_quant8_4,
                           prelu::get_examples_quant8_4());
}

TEST_F(ValidationTest, prelu_quant8_4) {
  const Model model = prelu::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(prelu::get_examples_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_float16) {
  generated_tests::Execute(device,
                           prelu::createTestModel_float16,
                           prelu::is_ignored_float16,
                           prelu::get_examples_float16());
}

TEST_F(ValidationTest, prelu_float16) {
  const Model model = prelu::createTestModel_float16();
  const std::vector<Request> requests = createRequests(prelu::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input,
                           prelu::is_ignored_weight_as_input,
                           prelu::get_examples_weight_as_input());
}

TEST_F(ValidationTest, prelu_weight_as_input) {
  const Model model = prelu::createTestModel_weight_as_input();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_relaxed,
                           prelu::is_ignored_weight_as_input_relaxed,
                           prelu::get_examples_weight_as_input_relaxed());
}

TEST_F(ValidationTest, prelu_weight_as_input_relaxed) {
  const Model model = prelu::createTestModel_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_quant8,
                           prelu::is_ignored_weight_as_input_quant8,
                           prelu::get_examples_weight_as_input_quant8());
}

TEST_F(ValidationTest, prelu_weight_as_input_quant8) {
  const Model model = prelu::createTestModel_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_quant8_2,
                           prelu::is_ignored_weight_as_input_quant8_2,
                           prelu::get_examples_weight_as_input_quant8_2());
}

TEST_F(ValidationTest, prelu_weight_as_input_quant8_2) {
  const Model model = prelu::createTestModel_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_quant8_3,
                           prelu::is_ignored_weight_as_input_quant8_3,
                           prelu::get_examples_weight_as_input_quant8_3());
}

TEST_F(ValidationTest, prelu_weight_as_input_quant8_3) {
  const Model model = prelu::createTestModel_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_quant8_4) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_quant8_4,
                           prelu::is_ignored_weight_as_input_quant8_4,
                           prelu::get_examples_weight_as_input_quant8_4());
}

TEST_F(ValidationTest, prelu_weight_as_input_quant8_4) {
  const Model model = prelu::createTestModel_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, prelu_weight_as_input_float16) {
  generated_tests::Execute(device,
                           prelu::createTestModel_weight_as_input_float16,
                           prelu::is_ignored_weight_as_input_float16,
                           prelu::get_examples_weight_as_input_float16());
}

TEST_F(ValidationTest, prelu_weight_as_input_float16) {
  const Model model = prelu::createTestModel_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(prelu::get_examples_weight_as_input_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape,
                           prelu::is_ignored_dynamic_output_shape,
                           prelu::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape) {
  const Model model = prelu::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_relaxed,
                           prelu::is_ignored_dynamic_output_shape_relaxed,
                           prelu::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_relaxed) {
  const Model model = prelu::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_quant8,
                           prelu::is_ignored_dynamic_output_shape_quant8,
                           prelu::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_quant8) {
  const Model model = prelu::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_quant8_2,
                           prelu::is_ignored_dynamic_output_shape_quant8_2,
                           prelu::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_quant8_2) {
  const Model model = prelu::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_quant8_3,
                           prelu::is_ignored_dynamic_output_shape_quant8_3,
                           prelu::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_quant8_3) {
  const Model model = prelu::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_quant8_4,
                           prelu::is_ignored_dynamic_output_shape_quant8_4,
                           prelu::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_quant8_4) {
  const Model model = prelu::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_float16,
                           prelu::is_ignored_dynamic_output_shape_float16,
                           prelu::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_float16) {
  const Model model = prelu::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input,
                           prelu::get_examples_dynamic_output_shape_weight_as_input(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_relaxed) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_relaxed,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_relaxed,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_relaxed(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_relaxed) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_relaxed();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_quant8) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_quant8,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_quant8(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_quant8) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_quant8_2) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_2,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_quant8_2,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_2(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_quant8_2) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_2();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_quant8_3) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_3,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_quant8_3,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_3(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_quant8_3) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_3();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_quant8_4) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_4,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_quant8_4,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_4(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_quant8_4) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_quant8_4();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, prelu_dynamic_output_shape_weight_as_input_float16) {
  generated_tests::Execute(device,
                           prelu::createTestModel_dynamic_output_shape_weight_as_input_float16,
                           prelu::is_ignored_dynamic_output_shape_weight_as_input_float16,
                           prelu::get_examples_dynamic_output_shape_weight_as_input_float16(), true);
}

TEST_F(ValidationTest, prelu_dynamic_output_shape_weight_as_input_float16) {
  const Model model = prelu::createTestModel_dynamic_output_shape_weight_as_input_float16();
  const std::vector<Request> requests = createRequests(prelu::get_examples_dynamic_output_shape_weight_as_input_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: quantize.mod.py.
namespace quantize {
// Generated quantize test
#include "examples/quantize.example.cpp"
// Generated model constructor
#include "vts_models/quantize.model.cpp"
} // namespace quantize

TEST_F(NeuralnetworksHidlTest, quantize_quant8) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8,
                           quantize::is_ignored_quant8,
                           quantize::get_examples_quant8());
}

TEST_F(ValidationTest, quantize_quant8) {
  const Model model = quantize::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8,
                           quantize::is_ignored_dynamic_output_shape_quant8,
                           quantize::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_2) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_2,
                           quantize::is_ignored_quant8_2,
                           quantize::get_examples_quant8_2());
}

TEST_F(ValidationTest, quantize_quant8_2) {
  const Model model = quantize::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_2,
                           quantize::is_ignored_dynamic_output_shape_quant8_2,
                           quantize::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_2) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_3) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_3,
                           quantize::is_ignored_quant8_3,
                           quantize::get_examples_quant8_3());
}

TEST_F(ValidationTest, quantize_quant8_3) {
  const Model model = quantize::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_3,
                           quantize::is_ignored_dynamic_output_shape_quant8_3,
                           quantize::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_3) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_4) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_4,
                           quantize::is_ignored_quant8_4,
                           quantize::get_examples_quant8_4());
}

TEST_F(ValidationTest, quantize_quant8_4) {
  const Model model = quantize::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_4,
                           quantize::is_ignored_dynamic_output_shape_quant8_4,
                           quantize::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_4) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_5) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_5,
                           quantize::is_ignored_quant8_5,
                           quantize::get_examples_quant8_5());
}

TEST_F(ValidationTest, quantize_quant8_5) {
  const Model model = quantize::createTestModel_quant8_5();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_5) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_5,
                           quantize::is_ignored_dynamic_output_shape_quant8_5,
                           quantize::get_examples_dynamic_output_shape_quant8_5(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_5) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_5();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_6) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_6,
                           quantize::is_ignored_quant8_6,
                           quantize::get_examples_quant8_6());
}

TEST_F(ValidationTest, quantize_quant8_6) {
  const Model model = quantize::createTestModel_quant8_6();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_6) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_6,
                           quantize::is_ignored_dynamic_output_shape_quant8_6,
                           quantize::get_examples_dynamic_output_shape_quant8_6(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_6) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_6();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_7) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_7,
                           quantize::is_ignored_quant8_7,
                           quantize::get_examples_quant8_7());
}

TEST_F(ValidationTest, quantize_quant8_7) {
  const Model model = quantize::createTestModel_quant8_7();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_7) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_7,
                           quantize::is_ignored_dynamic_output_shape_quant8_7,
                           quantize::get_examples_dynamic_output_shape_quant8_7(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_7) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_7();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_quant8_8) {
  generated_tests::Execute(device,
                           quantize::createTestModel_quant8_8,
                           quantize::is_ignored_quant8_8,
                           quantize::get_examples_quant8_8());
}

TEST_F(ValidationTest, quantize_quant8_8) {
  const Model model = quantize::createTestModel_quant8_8();
  const std::vector<Request> requests = createRequests(quantize::get_examples_quant8_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_dynamic_output_shape_quant8_8) {
  generated_tests::Execute(device,
                           quantize::createTestModel_dynamic_output_shape_quant8_8,
                           quantize::is_ignored_dynamic_output_shape_quant8_8,
                           quantize::get_examples_dynamic_output_shape_quant8_8(), true);
}

TEST_F(ValidationTest, quantize_dynamic_output_shape_quant8_8) {
  const Model model = quantize::createTestModel_dynamic_output_shape_quant8_8();
  const std::vector<Request> requests = createRequests(quantize::get_examples_dynamic_output_shape_quant8_8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantize_zero_sized) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized,
                           quantize::is_ignored_zero_sized,
                           quantize::get_examples_zero_sized());
}

TEST_F(ValidationTest, quantize_zero_sized) {
  const Model model = quantize::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, quantize_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized_relaxed,
                           quantize::is_ignored_zero_sized_relaxed,
                           quantize::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, quantize_zero_sized_relaxed) {
  const Model model = quantize::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, quantize_zero_sized_float16) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized_float16,
                           quantize::is_ignored_zero_sized_float16,
                           quantize::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, quantize_zero_sized_float16) {
  const Model model = quantize::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized_dynamic_output_shape,
                           quantize::is_ignored_zero_sized_dynamic_output_shape,
                           quantize::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, quantize_zero_sized_dynamic_output_shape) {
  const Model model = quantize::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           quantize::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           quantize::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, quantize_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = quantize::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantize_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           quantize::createTestModel_zero_sized_dynamic_output_shape_float16,
                           quantize::is_ignored_zero_sized_dynamic_output_shape_float16,
                           quantize::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, quantize_zero_sized_dynamic_output_shape_float16) {
  const Model model = quantize::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(quantize::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: quantized_lstm.mod.py.
namespace quantized_lstm {
// Generated quantized_lstm test
#include "examples/quantized_lstm.example.cpp"
// Generated model constructor
#include "vts_models/quantized_lstm.model.cpp"
} // namespace quantized_lstm

TEST_F(NeuralnetworksHidlTest, quantized_lstm) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel,
                           quantized_lstm::is_ignored,
                           quantized_lstm::get_examples());
}

TEST_F(ValidationTest, quantized_lstm) {
  const Model model = quantized_lstm::createTestModel();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, quantized_lstm_relaxed) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_relaxed,
                           quantized_lstm::is_ignored_relaxed,
                           quantized_lstm::get_examples_relaxed());
}

TEST_F(ValidationTest, quantized_lstm_relaxed) {
  const Model model = quantized_lstm::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantized_lstm_dynamic_output_shape) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_dynamic_output_shape,
                           quantized_lstm::is_ignored_dynamic_output_shape,
                           quantized_lstm::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, quantized_lstm_dynamic_output_shape) {
  const Model model = quantized_lstm::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantized_lstm_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_dynamic_output_shape_relaxed,
                           quantized_lstm::is_ignored_dynamic_output_shape_relaxed,
                           quantized_lstm::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, quantized_lstm_dynamic_output_shape_relaxed) {
  const Model model = quantized_lstm::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, quantized_lstm_constant_weights) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_2,
                           quantized_lstm::is_ignored_2,
                           quantized_lstm::get_examples_constant_weights());
}

TEST_F(ValidationTest, quantized_lstm_constant_weights) {
  const Model model = quantized_lstm::createTestModel_2();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_constant_weights());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, quantized_lstm_constant_weights_relaxed) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_relaxed_2,
                           quantized_lstm::is_ignored_relaxed_2,
                           quantized_lstm::get_examples_constant_weights_relaxed());
}

TEST_F(ValidationTest, quantized_lstm_constant_weights_relaxed) {
  const Model model = quantized_lstm::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_constant_weights_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantized_lstm_constant_weights_dynamic_output_shape) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_dynamic_output_shape_2,
                           quantized_lstm::is_ignored_dynamic_output_shape_2,
                           quantized_lstm::get_examples_constant_weights_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, quantized_lstm_constant_weights_dynamic_output_shape) {
  const Model model = quantized_lstm::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_constant_weights_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, quantized_lstm_constant_weights_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           quantized_lstm::createTestModel_dynamic_output_shape_relaxed_2,
                           quantized_lstm::is_ignored_dynamic_output_shape_relaxed_2,
                           quantized_lstm::get_examples_constant_weights_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, quantized_lstm_constant_weights_dynamic_output_shape_relaxed) {
  const Model model = quantized_lstm::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(quantized_lstm::get_examples_constant_weights_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: random_multinomial.mod.py.
namespace random_multinomial {
// Generated random_multinomial test
#include "examples/random_multinomial.example.cpp"
// Generated model constructor
#include "vts_models/random_multinomial.model.cpp"
} // namespace random_multinomial

TEST_F(NeuralnetworksHidlTest, random_multinomial) {
  generated_tests::Execute(device,
                           random_multinomial::createTestModel,
                           random_multinomial::is_ignored,
                           random_multinomial::get_examples());
}

TEST_F(ValidationTest, random_multinomial) {
  const Model model = random_multinomial::createTestModel();
  const std::vector<Request> requests = createRequests(random_multinomial::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, random_multinomial_dynamic_output_shape) {
  generated_tests::Execute(device,
                           random_multinomial::createTestModel_dynamic_output_shape,
                           random_multinomial::is_ignored_dynamic_output_shape,
                           random_multinomial::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, random_multinomial_dynamic_output_shape) {
  const Model model = random_multinomial::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(random_multinomial::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: random_multinomial_float16.mod.py.
namespace random_multinomial_float16 {
// Generated random_multinomial_float16 test
#include "examples/random_multinomial_float16.example.cpp"
// Generated model constructor
#include "vts_models/random_multinomial_float16.model.cpp"
} // namespace random_multinomial_float16

TEST_F(NeuralnetworksHidlTest, random_multinomial_float16) {
  generated_tests::Execute(device,
                           random_multinomial_float16::createTestModel,
                           random_multinomial_float16::is_ignored,
                           random_multinomial_float16::get_examples());
}

TEST_F(ValidationTest, random_multinomial_float16) {
  const Model model = random_multinomial_float16::createTestModel();
  const std::vector<Request> requests = createRequests(random_multinomial_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, random_multinomial_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           random_multinomial_float16::createTestModel_dynamic_output_shape,
                           random_multinomial_float16::is_ignored_dynamic_output_shape,
                           random_multinomial_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, random_multinomial_float16_dynamic_output_shape) {
  const Model model = random_multinomial_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(random_multinomial_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_all.mod.py.
namespace reduce_all {
// Generated reduce_all test
#include "examples/reduce_all.example.cpp"
// Generated model constructor
#include "vts_models/reduce_all.model.cpp"
} // namespace reduce_all

TEST_F(NeuralnetworksHidlTest, reduce_all) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel,
                           reduce_all::is_ignored,
                           reduce_all::get_examples());
}

TEST_F(ValidationTest, reduce_all) {
  const Model model = reduce_all::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_all_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel_dynamic_output_shape,
                           reduce_all::is_ignored_dynamic_output_shape,
                           reduce_all::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_all_dynamic_output_shape) {
  const Model model = reduce_all::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_all_2) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel_2,
                           reduce_all::is_ignored_2,
                           reduce_all::get_examples_2());
}

TEST_F(ValidationTest, reduce_all_2) {
  const Model model = reduce_all::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_all_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel_dynamic_output_shape_2,
                           reduce_all::is_ignored_dynamic_output_shape_2,
                           reduce_all::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_all_dynamic_output_shape_2) {
  const Model model = reduce_all::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_all_3) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel_3,
                           reduce_all::is_ignored_3,
                           reduce_all::get_examples_3());
}

TEST_F(ValidationTest, reduce_all_3) {
  const Model model = reduce_all::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_all_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_all::createTestModel_dynamic_output_shape_3,
                           reduce_all::is_ignored_dynamic_output_shape_3,
                           reduce_all::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_all_dynamic_output_shape_3) {
  const Model model = reduce_all::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_all::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_any.mod.py.
namespace reduce_any {
// Generated reduce_any test
#include "examples/reduce_any.example.cpp"
// Generated model constructor
#include "vts_models/reduce_any.model.cpp"
} // namespace reduce_any

TEST_F(NeuralnetworksHidlTest, reduce_any) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel,
                           reduce_any::is_ignored,
                           reduce_any::get_examples());
}

TEST_F(ValidationTest, reduce_any) {
  const Model model = reduce_any::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_any_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel_dynamic_output_shape,
                           reduce_any::is_ignored_dynamic_output_shape,
                           reduce_any::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_any_dynamic_output_shape) {
  const Model model = reduce_any::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_any_2) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel_2,
                           reduce_any::is_ignored_2,
                           reduce_any::get_examples_2());
}

TEST_F(ValidationTest, reduce_any_2) {
  const Model model = reduce_any::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_any_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel_dynamic_output_shape_2,
                           reduce_any::is_ignored_dynamic_output_shape_2,
                           reduce_any::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_any_dynamic_output_shape_2) {
  const Model model = reduce_any::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_any_3) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel_3,
                           reduce_any::is_ignored_3,
                           reduce_any::get_examples_3());
}

TEST_F(ValidationTest, reduce_any_3) {
  const Model model = reduce_any::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_any_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_any::createTestModel_dynamic_output_shape_3,
                           reduce_any::is_ignored_dynamic_output_shape_3,
                           reduce_any::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_any_dynamic_output_shape_3) {
  const Model model = reduce_any::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_any::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_max.mod.py.
namespace reduce_max {
// Generated reduce_max test
#include "examples/reduce_max.example.cpp"
// Generated model constructor
#include "vts_models/reduce_max.model.cpp"
} // namespace reduce_max

TEST_F(NeuralnetworksHidlTest, reduce_max) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel,
                           reduce_max::is_ignored,
                           reduce_max::get_examples());
}

TEST_F(ValidationTest, reduce_max) {
  const Model model = reduce_max::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_relaxed) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_relaxed,
                           reduce_max::is_ignored_relaxed,
                           reduce_max::get_examples_relaxed());
}

TEST_F(ValidationTest, reduce_max_relaxed) {
  const Model model = reduce_max::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_float16) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_float16,
                           reduce_max::is_ignored_float16,
                           reduce_max::get_examples_float16());
}

TEST_F(ValidationTest, reduce_max_float16) {
  const Model model = reduce_max::createTestModel_float16();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_quant8) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_quant8,
                           reduce_max::is_ignored_quant8,
                           reduce_max::get_examples_quant8());
}

TEST_F(ValidationTest, reduce_max_quant8) {
  const Model model = reduce_max::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape,
                           reduce_max::is_ignored_dynamic_output_shape,
                           reduce_max::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_relaxed,
                           reduce_max::is_ignored_dynamic_output_shape_relaxed,
                           reduce_max::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_relaxed) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_float16,
                           reduce_max::is_ignored_dynamic_output_shape_float16,
                           reduce_max::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_float16) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_quant8,
                           reduce_max::is_ignored_dynamic_output_shape_quant8,
                           reduce_max::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_quant8) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_max_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_2,
                           reduce_max::is_ignored_2,
                           reduce_max::get_examples_2());
}

TEST_F(ValidationTest, reduce_max_2) {
  const Model model = reduce_max::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_relaxed_2,
                           reduce_max::is_ignored_relaxed_2,
                           reduce_max::get_examples_relaxed_2());
}

TEST_F(ValidationTest, reduce_max_relaxed_2) {
  const Model model = reduce_max::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_float16_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_float16_2,
                           reduce_max::is_ignored_float16_2,
                           reduce_max::get_examples_float16_2());
}

TEST_F(ValidationTest, reduce_max_float16_2) {
  const Model model = reduce_max::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_quant8_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_quant8_2,
                           reduce_max::is_ignored_quant8_2,
                           reduce_max::get_examples_quant8_2());
}

TEST_F(ValidationTest, reduce_max_quant8_2) {
  const Model model = reduce_max::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_2,
                           reduce_max::is_ignored_dynamic_output_shape_2,
                           reduce_max::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_2) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_relaxed_2,
                           reduce_max::is_ignored_dynamic_output_shape_relaxed_2,
                           reduce_max::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_relaxed_2) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_float16_2,
                           reduce_max::is_ignored_dynamic_output_shape_float16_2,
                           reduce_max::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_float16_2) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_quant8_2,
                           reduce_max::is_ignored_dynamic_output_shape_quant8_2,
                           reduce_max::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_quant8_2) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_max_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_3,
                           reduce_max::is_ignored_3,
                           reduce_max::get_examples_3());
}

TEST_F(ValidationTest, reduce_max_3) {
  const Model model = reduce_max::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_relaxed_3,
                           reduce_max::is_ignored_relaxed_3,
                           reduce_max::get_examples_relaxed_3());
}

TEST_F(ValidationTest, reduce_max_relaxed_3) {
  const Model model = reduce_max::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_float16_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_float16_3,
                           reduce_max::is_ignored_float16_3,
                           reduce_max::get_examples_float16_3());
}

TEST_F(ValidationTest, reduce_max_float16_3) {
  const Model model = reduce_max::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_quant8_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_quant8_3,
                           reduce_max::is_ignored_quant8_3,
                           reduce_max::get_examples_quant8_3());
}

TEST_F(ValidationTest, reduce_max_quant8_3) {
  const Model model = reduce_max::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_3,
                           reduce_max::is_ignored_dynamic_output_shape_3,
                           reduce_max::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_3) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_relaxed_3,
                           reduce_max::is_ignored_dynamic_output_shape_relaxed_3,
                           reduce_max::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_relaxed_3) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_float16_3,
                           reduce_max::is_ignored_dynamic_output_shape_float16_3,
                           reduce_max::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_float16_3) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_quant8_3,
                           reduce_max::is_ignored_dynamic_output_shape_quant8_3,
                           reduce_max::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_quant8_3) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_max_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_4,
                           reduce_max::is_ignored_4,
                           reduce_max::get_examples_4());
}

TEST_F(ValidationTest, reduce_max_4) {
  const Model model = reduce_max::createTestModel_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_relaxed_4,
                           reduce_max::is_ignored_relaxed_4,
                           reduce_max::get_examples_relaxed_4());
}

TEST_F(ValidationTest, reduce_max_relaxed_4) {
  const Model model = reduce_max::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_float16_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_float16_4,
                           reduce_max::is_ignored_float16_4,
                           reduce_max::get_examples_float16_4());
}

TEST_F(ValidationTest, reduce_max_float16_4) {
  const Model model = reduce_max::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_max_quant8_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_quant8_4,
                           reduce_max::is_ignored_quant8_4,
                           reduce_max::get_examples_quant8_4());
}

TEST_F(ValidationTest, reduce_max_quant8_4) {
  const Model model = reduce_max::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_quant8_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_4,
                           reduce_max::is_ignored_dynamic_output_shape_4,
                           reduce_max::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_4) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_relaxed_4,
                           reduce_max::is_ignored_dynamic_output_shape_relaxed_4,
                           reduce_max::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_relaxed_4) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_float16_4,
                           reduce_max::is_ignored_dynamic_output_shape_float16_4,
                           reduce_max::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_float16_4) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_max_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           reduce_max::createTestModel_dynamic_output_shape_quant8_4,
                           reduce_max::is_ignored_dynamic_output_shape_quant8_4,
                           reduce_max::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, reduce_max_dynamic_output_shape_quant8_4) {
  const Model model = reduce_max::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(reduce_max::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_min.mod.py.
namespace reduce_min {
// Generated reduce_min test
#include "examples/reduce_min.example.cpp"
// Generated model constructor
#include "vts_models/reduce_min.model.cpp"
} // namespace reduce_min

TEST_F(NeuralnetworksHidlTest, reduce_min) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel,
                           reduce_min::is_ignored,
                           reduce_min::get_examples());
}

TEST_F(ValidationTest, reduce_min) {
  const Model model = reduce_min::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_relaxed) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_relaxed,
                           reduce_min::is_ignored_relaxed,
                           reduce_min::get_examples_relaxed());
}

TEST_F(ValidationTest, reduce_min_relaxed) {
  const Model model = reduce_min::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_float16) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_float16,
                           reduce_min::is_ignored_float16,
                           reduce_min::get_examples_float16());
}

TEST_F(ValidationTest, reduce_min_float16) {
  const Model model = reduce_min::createTestModel_float16();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_quant8) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_quant8,
                           reduce_min::is_ignored_quant8,
                           reduce_min::get_examples_quant8());
}

TEST_F(ValidationTest, reduce_min_quant8) {
  const Model model = reduce_min::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape,
                           reduce_min::is_ignored_dynamic_output_shape,
                           reduce_min::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_relaxed,
                           reduce_min::is_ignored_dynamic_output_shape_relaxed,
                           reduce_min::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_relaxed) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_float16,
                           reduce_min::is_ignored_dynamic_output_shape_float16,
                           reduce_min::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_float16) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_quant8,
                           reduce_min::is_ignored_dynamic_output_shape_quant8,
                           reduce_min::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_quant8) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_min_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_2,
                           reduce_min::is_ignored_2,
                           reduce_min::get_examples_2());
}

TEST_F(ValidationTest, reduce_min_2) {
  const Model model = reduce_min::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_relaxed_2,
                           reduce_min::is_ignored_relaxed_2,
                           reduce_min::get_examples_relaxed_2());
}

TEST_F(ValidationTest, reduce_min_relaxed_2) {
  const Model model = reduce_min::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_float16_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_float16_2,
                           reduce_min::is_ignored_float16_2,
                           reduce_min::get_examples_float16_2());
}

TEST_F(ValidationTest, reduce_min_float16_2) {
  const Model model = reduce_min::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_quant8_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_quant8_2,
                           reduce_min::is_ignored_quant8_2,
                           reduce_min::get_examples_quant8_2());
}

TEST_F(ValidationTest, reduce_min_quant8_2) {
  const Model model = reduce_min::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_2,
                           reduce_min::is_ignored_dynamic_output_shape_2,
                           reduce_min::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_2) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_relaxed_2,
                           reduce_min::is_ignored_dynamic_output_shape_relaxed_2,
                           reduce_min::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_relaxed_2) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_float16_2,
                           reduce_min::is_ignored_dynamic_output_shape_float16_2,
                           reduce_min::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_float16_2) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_quant8_2,
                           reduce_min::is_ignored_dynamic_output_shape_quant8_2,
                           reduce_min::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_quant8_2) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_min_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_3,
                           reduce_min::is_ignored_3,
                           reduce_min::get_examples_3());
}

TEST_F(ValidationTest, reduce_min_3) {
  const Model model = reduce_min::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_relaxed_3,
                           reduce_min::is_ignored_relaxed_3,
                           reduce_min::get_examples_relaxed_3());
}

TEST_F(ValidationTest, reduce_min_relaxed_3) {
  const Model model = reduce_min::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_float16_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_float16_3,
                           reduce_min::is_ignored_float16_3,
                           reduce_min::get_examples_float16_3());
}

TEST_F(ValidationTest, reduce_min_float16_3) {
  const Model model = reduce_min::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_quant8_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_quant8_3,
                           reduce_min::is_ignored_quant8_3,
                           reduce_min::get_examples_quant8_3());
}

TEST_F(ValidationTest, reduce_min_quant8_3) {
  const Model model = reduce_min::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_3,
                           reduce_min::is_ignored_dynamic_output_shape_3,
                           reduce_min::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_3) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_relaxed_3,
                           reduce_min::is_ignored_dynamic_output_shape_relaxed_3,
                           reduce_min::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_relaxed_3) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_float16_3,
                           reduce_min::is_ignored_dynamic_output_shape_float16_3,
                           reduce_min::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_float16_3) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_quant8_3) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_quant8_3,
                           reduce_min::is_ignored_dynamic_output_shape_quant8_3,
                           reduce_min::get_examples_dynamic_output_shape_quant8_3(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_quant8_3) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_quant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_min_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_4,
                           reduce_min::is_ignored_4,
                           reduce_min::get_examples_4());
}

TEST_F(ValidationTest, reduce_min_4) {
  const Model model = reduce_min::createTestModel_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_relaxed_4,
                           reduce_min::is_ignored_relaxed_4,
                           reduce_min::get_examples_relaxed_4());
}

TEST_F(ValidationTest, reduce_min_relaxed_4) {
  const Model model = reduce_min::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_float16_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_float16_4,
                           reduce_min::is_ignored_float16_4,
                           reduce_min::get_examples_float16_4());
}

TEST_F(ValidationTest, reduce_min_float16_4) {
  const Model model = reduce_min::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_min_quant8_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_quant8_4,
                           reduce_min::is_ignored_quant8_4,
                           reduce_min::get_examples_quant8_4());
}

TEST_F(ValidationTest, reduce_min_quant8_4) {
  const Model model = reduce_min::createTestModel_quant8_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_quant8_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_4,
                           reduce_min::is_ignored_dynamic_output_shape_4,
                           reduce_min::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_4) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_relaxed_4,
                           reduce_min::is_ignored_dynamic_output_shape_relaxed_4,
                           reduce_min::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_relaxed_4) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_float16_4,
                           reduce_min::is_ignored_dynamic_output_shape_float16_4,
                           reduce_min::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_float16_4) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_min_dynamic_output_shape_quant8_4) {
  generated_tests::Execute(device,
                           reduce_min::createTestModel_dynamic_output_shape_quant8_4,
                           reduce_min::is_ignored_dynamic_output_shape_quant8_4,
                           reduce_min::get_examples_dynamic_output_shape_quant8_4(), true);
}

TEST_F(ValidationTest, reduce_min_dynamic_output_shape_quant8_4) {
  const Model model = reduce_min::createTestModel_dynamic_output_shape_quant8_4();
  const std::vector<Request> requests = createRequests(reduce_min::get_examples_dynamic_output_shape_quant8_4());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_prod.mod.py.
namespace reduce_prod {
// Generated reduce_prod test
#include "examples/reduce_prod.example.cpp"
// Generated model constructor
#include "vts_models/reduce_prod.model.cpp"
} // namespace reduce_prod

TEST_F(NeuralnetworksHidlTest, reduce_prod) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel,
                           reduce_prod::is_ignored,
                           reduce_prod::get_examples());
}

TEST_F(ValidationTest, reduce_prod) {
  const Model model = reduce_prod::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_relaxed) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_relaxed,
                           reduce_prod::is_ignored_relaxed,
                           reduce_prod::get_examples_relaxed());
}

TEST_F(ValidationTest, reduce_prod_relaxed) {
  const Model model = reduce_prod::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_float16) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_float16,
                           reduce_prod::is_ignored_float16,
                           reduce_prod::get_examples_float16());
}

TEST_F(ValidationTest, reduce_prod_float16) {
  const Model model = reduce_prod::createTestModel_float16();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape,
                           reduce_prod::is_ignored_dynamic_output_shape,
                           reduce_prod::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_relaxed,
                           reduce_prod::is_ignored_dynamic_output_shape_relaxed,
                           reduce_prod::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_relaxed) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_float16,
                           reduce_prod::is_ignored_dynamic_output_shape_float16,
                           reduce_prod::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_float16) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_prod_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_2,
                           reduce_prod::is_ignored_2,
                           reduce_prod::get_examples_2());
}

TEST_F(ValidationTest, reduce_prod_2) {
  const Model model = reduce_prod::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_relaxed_2,
                           reduce_prod::is_ignored_relaxed_2,
                           reduce_prod::get_examples_relaxed_2());
}

TEST_F(ValidationTest, reduce_prod_relaxed_2) {
  const Model model = reduce_prod::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_float16_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_float16_2,
                           reduce_prod::is_ignored_float16_2,
                           reduce_prod::get_examples_float16_2());
}

TEST_F(ValidationTest, reduce_prod_float16_2) {
  const Model model = reduce_prod::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_2,
                           reduce_prod::is_ignored_dynamic_output_shape_2,
                           reduce_prod::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_2) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_relaxed_2,
                           reduce_prod::is_ignored_dynamic_output_shape_relaxed_2,
                           reduce_prod::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_relaxed_2) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_float16_2,
                           reduce_prod::is_ignored_dynamic_output_shape_float16_2,
                           reduce_prod::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_float16_2) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_prod_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_3,
                           reduce_prod::is_ignored_3,
                           reduce_prod::get_examples_3());
}

TEST_F(ValidationTest, reduce_prod_3) {
  const Model model = reduce_prod::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_relaxed_3,
                           reduce_prod::is_ignored_relaxed_3,
                           reduce_prod::get_examples_relaxed_3());
}

TEST_F(ValidationTest, reduce_prod_relaxed_3) {
  const Model model = reduce_prod::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_float16_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_float16_3,
                           reduce_prod::is_ignored_float16_3,
                           reduce_prod::get_examples_float16_3());
}

TEST_F(ValidationTest, reduce_prod_float16_3) {
  const Model model = reduce_prod::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_3,
                           reduce_prod::is_ignored_dynamic_output_shape_3,
                           reduce_prod::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_3) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_relaxed_3,
                           reduce_prod::is_ignored_dynamic_output_shape_relaxed_3,
                           reduce_prod::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_relaxed_3) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_float16_3,
                           reduce_prod::is_ignored_dynamic_output_shape_float16_3,
                           reduce_prod::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_float16_3) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_prod_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_4,
                           reduce_prod::is_ignored_4,
                           reduce_prod::get_examples_4());
}

TEST_F(ValidationTest, reduce_prod_4) {
  const Model model = reduce_prod::createTestModel_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_relaxed_4,
                           reduce_prod::is_ignored_relaxed_4,
                           reduce_prod::get_examples_relaxed_4());
}

TEST_F(ValidationTest, reduce_prod_relaxed_4) {
  const Model model = reduce_prod::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_prod_float16_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_float16_4,
                           reduce_prod::is_ignored_float16_4,
                           reduce_prod::get_examples_float16_4());
}

TEST_F(ValidationTest, reduce_prod_float16_4) {
  const Model model = reduce_prod::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_4,
                           reduce_prod::is_ignored_dynamic_output_shape_4,
                           reduce_prod::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_4) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_relaxed_4,
                           reduce_prod::is_ignored_dynamic_output_shape_relaxed_4,
                           reduce_prod::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_relaxed_4) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_prod_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           reduce_prod::createTestModel_dynamic_output_shape_float16_4,
                           reduce_prod::is_ignored_dynamic_output_shape_float16_4,
                           reduce_prod::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, reduce_prod_dynamic_output_shape_float16_4) {
  const Model model = reduce_prod::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(reduce_prod::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
// Generated from: reduce_sum.mod.py.
namespace reduce_sum {
// Generated reduce_sum test
#include "examples/reduce_sum.example.cpp"
// Generated model constructor
#include "vts_models/reduce_sum.model.cpp"
} // namespace reduce_sum

TEST_F(NeuralnetworksHidlTest, reduce_sum) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel,
                           reduce_sum::is_ignored,
                           reduce_sum::get_examples());
}

TEST_F(ValidationTest, reduce_sum) {
  const Model model = reduce_sum::createTestModel();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_relaxed) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_relaxed,
                           reduce_sum::is_ignored_relaxed,
                           reduce_sum::get_examples_relaxed());
}

TEST_F(ValidationTest, reduce_sum_relaxed) {
  const Model model = reduce_sum::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_float16) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_float16,
                           reduce_sum::is_ignored_float16,
                           reduce_sum::get_examples_float16());
}

TEST_F(ValidationTest, reduce_sum_float16) {
  const Model model = reduce_sum::createTestModel_float16();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape,
                           reduce_sum::is_ignored_dynamic_output_shape,
                           reduce_sum::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_relaxed,
                           reduce_sum::is_ignored_dynamic_output_shape_relaxed,
                           reduce_sum::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_relaxed) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_float16,
                           reduce_sum::is_ignored_dynamic_output_shape_float16,
                           reduce_sum::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_float16) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_sum_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_2,
                           reduce_sum::is_ignored_2,
                           reduce_sum::get_examples_2());
}

TEST_F(ValidationTest, reduce_sum_2) {
  const Model model = reduce_sum::createTestModel_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_relaxed_2,
                           reduce_sum::is_ignored_relaxed_2,
                           reduce_sum::get_examples_relaxed_2());
}

TEST_F(ValidationTest, reduce_sum_relaxed_2) {
  const Model model = reduce_sum::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_float16_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_float16_2,
                           reduce_sum::is_ignored_float16_2,
                           reduce_sum::get_examples_float16_2());
}

TEST_F(ValidationTest, reduce_sum_float16_2) {
  const Model model = reduce_sum::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_2,
                           reduce_sum::is_ignored_dynamic_output_shape_2,
                           reduce_sum::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_2) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_relaxed_2,
                           reduce_sum::is_ignored_dynamic_output_shape_relaxed_2,
                           reduce_sum::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_relaxed_2) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_float16_2,
                           reduce_sum::is_ignored_dynamic_output_shape_float16_2,
                           reduce_sum::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_float16_2) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_sum_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_3,
                           reduce_sum::is_ignored_3,
                           reduce_sum::get_examples_3());
}

TEST_F(ValidationTest, reduce_sum_3) {
  const Model model = reduce_sum::createTestModel_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_relaxed_3,
                           reduce_sum::is_ignored_relaxed_3,
                           reduce_sum::get_examples_relaxed_3());
}

TEST_F(ValidationTest, reduce_sum_relaxed_3) {
  const Model model = reduce_sum::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_float16_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_float16_3,
                           reduce_sum::is_ignored_float16_3,
                           reduce_sum::get_examples_float16_3());
}

TEST_F(ValidationTest, reduce_sum_float16_3) {
  const Model model = reduce_sum::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_3,
                           reduce_sum::is_ignored_dynamic_output_shape_3,
                           reduce_sum::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_3) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_relaxed_3,
                           reduce_sum::is_ignored_dynamic_output_shape_relaxed_3,
                           reduce_sum::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_relaxed_3) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_float16_3,
                           reduce_sum::is_ignored_dynamic_output_shape_float16_3,
                           reduce_sum::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_float16_3) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, reduce_sum_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_4,
                           reduce_sum::is_ignored_4,
                           reduce_sum::get_examples_4());
}

TEST_F(ValidationTest, reduce_sum_4) {
  const Model model = reduce_sum::createTestModel_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_relaxed_4,
                           reduce_sum::is_ignored_relaxed_4,
                           reduce_sum::get_examples_relaxed_4());
}

TEST_F(ValidationTest, reduce_sum_relaxed_4) {
  const Model model = reduce_sum::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, reduce_sum_float16_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_float16_4,
                           reduce_sum::is_ignored_float16_4,
                           reduce_sum::get_examples_float16_4());
}

TEST_F(ValidationTest, reduce_sum_float16_4) {
  const Model model = reduce_sum::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_4,
                           reduce_sum::is_ignored_dynamic_output_shape_4,
                           reduce_sum::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_4) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_relaxed_4,
                           reduce_sum::is_ignored_dynamic_output_shape_relaxed_4,
                           reduce_sum::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_relaxed_4) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reduce_sum_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           reduce_sum::createTestModel_dynamic_output_shape_float16_4,
                           reduce_sum::is_ignored_dynamic_output_shape_float16_4,
                           reduce_sum::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, reduce_sum_dynamic_output_shape_float16_4) {
  const Model model = reduce_sum::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(reduce_sum::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_v1_2.mod.py.
namespace relu1_v1_2 {
// Generated relu1_v1_2 test
#include "examples/relu1_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/relu1_v1_2.model.cpp"
} // namespace relu1_v1_2

TEST_F(NeuralnetworksHidlTest, relu1_v1_2) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel,
                           relu1_v1_2::is_ignored,
                           relu1_v1_2::get_examples());
}

TEST_F(ValidationTest, relu1_v1_2) {
  const Model model = relu1_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_dynamic_output_shape,
                           relu1_v1_2::is_ignored_dynamic_output_shape,
                           relu1_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_v1_2_dynamic_output_shape) {
  const Model model = relu1_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu1_v1_2_2) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_2,
                           relu1_v1_2::is_ignored_2,
                           relu1_v1_2::get_examples_2());
}

TEST_F(ValidationTest, relu1_v1_2_2) {
  const Model model = relu1_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_dynamic_output_shape_2,
                           relu1_v1_2::is_ignored_dynamic_output_shape_2,
                           relu1_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu1_v1_2_dynamic_output_shape_2) {
  const Model model = relu1_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu1_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized,
                           relu1_v1_2::is_ignored_zero_sized,
                           relu1_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized) {
  const Model model = relu1_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu1_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_relaxed,
                           relu1_v1_2::is_ignored_zero_sized_relaxed,
                           relu1_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_relaxed) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu1_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_quant8,
                           relu1_v1_2::is_ignored_zero_sized_quant8,
                           relu1_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_quant8) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu1_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_float16,
                           relu1_v1_2::is_ignored_zero_sized_float16,
                           relu1_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_float16) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           relu1_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           relu1_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           relu1_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           relu1_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           relu1_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, relu1_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = relu1_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(relu1_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_v1_2.mod.py.
namespace relu6_v1_2 {
// Generated relu6_v1_2 test
#include "examples/relu6_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/relu6_v1_2.model.cpp"
} // namespace relu6_v1_2

TEST_F(NeuralnetworksHidlTest, relu6_v1_2) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel,
                           relu6_v1_2::is_ignored,
                           relu6_v1_2::get_examples());
}

TEST_F(ValidationTest, relu6_v1_2) {
  const Model model = relu6_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_dynamic_output_shape,
                           relu6_v1_2::is_ignored_dynamic_output_shape,
                           relu6_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_v1_2_dynamic_output_shape) {
  const Model model = relu6_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu6_v1_2_2) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_2,
                           relu6_v1_2::is_ignored_2,
                           relu6_v1_2::get_examples_2());
}

TEST_F(ValidationTest, relu6_v1_2_2) {
  const Model model = relu6_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_dynamic_output_shape_2,
                           relu6_v1_2::is_ignored_dynamic_output_shape_2,
                           relu6_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu6_v1_2_dynamic_output_shape_2) {
  const Model model = relu6_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu6_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized,
                           relu6_v1_2::is_ignored_zero_sized,
                           relu6_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized) {
  const Model model = relu6_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu6_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_relaxed,
                           relu6_v1_2::is_ignored_zero_sized_relaxed,
                           relu6_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_relaxed) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu6_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_quant8,
                           relu6_v1_2::is_ignored_zero_sized_quant8,
                           relu6_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_quant8) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu6_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_float16,
                           relu6_v1_2::is_ignored_zero_sized_float16,
                           relu6_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_float16) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           relu6_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           relu6_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           relu6_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           relu6_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           relu6_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, relu6_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = relu6_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(relu6_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_v1_2.mod.py.
namespace relu_v1_2 {
// Generated relu_v1_2 test
#include "examples/relu_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/relu_v1_2.model.cpp"
} // namespace relu_v1_2

TEST_F(NeuralnetworksHidlTest, relu_v1_2) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel,
                           relu_v1_2::is_ignored,
                           relu_v1_2::get_examples());
}

TEST_F(ValidationTest, relu_v1_2) {
  const Model model = relu_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_dynamic_output_shape,
                           relu_v1_2::is_ignored_dynamic_output_shape,
                           relu_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_v1_2_dynamic_output_shape) {
  const Model model = relu_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu_v1_2_2) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_2,
                           relu_v1_2::is_ignored_2,
                           relu_v1_2::get_examples_2());
}

TEST_F(ValidationTest, relu_v1_2_2) {
  const Model model = relu_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_dynamic_output_shape_2,
                           relu_v1_2::is_ignored_dynamic_output_shape_2,
                           relu_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, relu_v1_2_dynamic_output_shape_2) {
  const Model model = relu_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, relu_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized,
                           relu_v1_2::is_ignored_zero_sized,
                           relu_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, relu_v1_2_zero_sized) {
  const Model model = relu_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_relaxed,
                           relu_v1_2::is_ignored_zero_sized_relaxed,
                           relu_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_relaxed) {
  const Model model = relu_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_quant8,
                           relu_v1_2::is_ignored_zero_sized_quant8,
                           relu_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_quant8) {
  const Model model = relu_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, relu_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_float16,
                           relu_v1_2::is_ignored_zero_sized_float16,
                           relu_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_float16) {
  const Model model = relu_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           relu_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           relu_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = relu_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           relu_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           relu_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           relu_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           relu_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           relu_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           relu_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, relu_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = relu_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(relu_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_float16.mod.py.
namespace reshape_float16 {
// Generated reshape_float16 test
#include "examples/reshape_float16.example.cpp"
// Generated model constructor
#include "vts_models/reshape_float16.model.cpp"
} // namespace reshape_float16

TEST_F(NeuralnetworksHidlTest, reshape_float16) {
  generated_tests::Execute(device,
                           reshape_float16::createTestModel,
                           reshape_float16::is_ignored,
                           reshape_float16::get_examples());
}

TEST_F(ValidationTest, reshape_float16) {
  const Model model = reshape_float16::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_float16::createTestModel_dynamic_output_shape,
                           reshape_float16::is_ignored_dynamic_output_shape,
                           reshape_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_float16_dynamic_output_shape) {
  const Model model = reshape_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_bilinear_v1_2.mod.py.
namespace resize_bilinear_v1_2 {
// Generated resize_bilinear_v1_2 test
#include "examples/resize_bilinear_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/resize_bilinear_v1_2.model.cpp"
} // namespace resize_bilinear_v1_2

TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc,
                           resize_bilinear_v1_2::get_examples_shape_nhwc());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw,
                           resize_bilinear_v1_2::is_ignored_shape_nchw,
                           resize_bilinear_v1_2::get_examples_shape_nchw());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_shape_nchw_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_float16,
                           resize_bilinear_v1_2::get_examples_shape_nchw_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_shape_nchw_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc,
                           resize_bilinear_v1_2::get_examples_scale_nhwc());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw,
                           resize_bilinear_v1_2::is_ignored_scale_nchw,
                           resize_bilinear_v1_2::get_examples_scale_nchw());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_scale_nchw_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_float16,
                           resize_bilinear_v1_2::get_examples_scale_nchw_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_scale_nchw_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_2,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_shape_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_2,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_2,
                           resize_bilinear_v1_2::get_examples_shape_nchw_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_shape_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_shape_nchw_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_shape_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_2,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_scale_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_scale_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_2,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_2,
                           resize_bilinear_v1_2::get_examples_scale_nchw_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_scale_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_scale_nchw_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_scale_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_scale_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_float16,
                           resize_bilinear_v1_2::is_ignored_shape_float16,
                           resize_bilinear_v1_2::get_examples_shape_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_shape_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_quant8,
                           resize_bilinear_v1_2::get_examples_shape_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_float16,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_float16,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_shape_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_quant8,
                           resize_bilinear_v1_2::is_ignored_shape_dynamic_output_shape_quant8,
                           resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_shape_dynamic_output_shape_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_shape_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_shape_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_float16,
                           resize_bilinear_v1_2::is_ignored_scale_float16,
                           resize_bilinear_v1_2::get_examples_scale_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_scale_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_quant8,
                           resize_bilinear_v1_2::get_examples_scale_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_float16,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_float16,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_scale_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_quant8,
                           resize_bilinear_v1_2::is_ignored_scale_dynamic_output_shape_quant8,
                           resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_scale_dynamic_output_shape_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_scale_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_scale_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_float16,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_bilinear_v1_2_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_bilinear_v1_2_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_bilinear_v1_2::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_bilinear_v1_2::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_nearest_neighbor.mod.py.
namespace resize_nearest_neighbor {
// Generated resize_nearest_neighbor test
#include "examples/resize_nearest_neighbor.example.cpp"
// Generated model constructor
#include "vts_models/resize_nearest_neighbor.model.cpp"
} // namespace resize_nearest_neighbor

TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc,
                           resize_nearest_neighbor::is_ignored_shape_nhwc,
                           resize_nearest_neighbor::get_examples_shape_nhwc());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw,
                           resize_nearest_neighbor::is_ignored_shape_nchw,
                           resize_nearest_neighbor::get_examples_shape_nchw());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc,
                           resize_nearest_neighbor::is_ignored_scale_nhwc,
                           resize_nearest_neighbor::get_examples_scale_nhwc());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw,
                           resize_nearest_neighbor::is_ignored_scale_nchw,
                           resize_nearest_neighbor::get_examples_scale_nchw());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_2,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_2,
                           resize_nearest_neighbor::get_examples_shape_nhwc_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_2,
                           resize_nearest_neighbor::is_ignored_shape_nchw_2,
                           resize_nearest_neighbor::get_examples_shape_nchw_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_2,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_2,
                           resize_nearest_neighbor::get_examples_scale_nhwc_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_2,
                           resize_nearest_neighbor::is_ignored_scale_nchw_2,
                           resize_nearest_neighbor::get_examples_scale_nchw_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_3,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_3,
                           resize_nearest_neighbor::get_examples_shape_nhwc_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_3,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_3,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_3,
                           resize_nearest_neighbor::is_ignored_shape_nchw_3,
                           resize_nearest_neighbor::get_examples_shape_nchw_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_3,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_3,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_3,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_3,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_3,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_3,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_3,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_3,
                           resize_nearest_neighbor::get_examples_scale_nhwc_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_3,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_3,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_3,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_3,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_3,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_3,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_3,
                           resize_nearest_neighbor::is_ignored_scale_nchw_3,
                           resize_nearest_neighbor::get_examples_scale_nchw_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_3,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_3,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_3,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_3,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_3,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_3,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_3());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_3,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_3,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_3) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_4,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_4,
                           resize_nearest_neighbor::get_examples_shape_nhwc_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_4,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_4,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_4,
                           resize_nearest_neighbor::is_ignored_shape_nchw_4,
                           resize_nearest_neighbor::get_examples_shape_nchw_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_4,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_4,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_4,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_4,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_4,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_4,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_4,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_4,
                           resize_nearest_neighbor::get_examples_scale_nhwc_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_4,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_4,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_4,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_4,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_4,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_4,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_4,
                           resize_nearest_neighbor::is_ignored_scale_nchw_4,
                           resize_nearest_neighbor::get_examples_scale_nchw_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_4,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_4,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_4,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_4,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_4,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_4,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_4());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_4,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_4,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_4) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_5,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_5,
                           resize_nearest_neighbor::get_examples_shape_nhwc_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_5,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_5,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_5,
                           resize_nearest_neighbor::is_ignored_shape_nchw_5,
                           resize_nearest_neighbor::get_examples_shape_nchw_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_5,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_5,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_5,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_5,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_5,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_5,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_5,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_5,
                           resize_nearest_neighbor::get_examples_scale_nhwc_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_5,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_5,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_5,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_5,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_5,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_5,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_5,
                           resize_nearest_neighbor::is_ignored_scale_nchw_5,
                           resize_nearest_neighbor::get_examples_scale_nchw_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_5,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_5,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_5,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_5,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_5,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_5,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_5());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_5,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_5,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_5(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_5) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_6,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_6,
                           resize_nearest_neighbor::get_examples_shape_nhwc_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_6,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_6,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_6,
                           resize_nearest_neighbor::is_ignored_shape_nchw_6,
                           resize_nearest_neighbor::get_examples_shape_nchw_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_6,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_6,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_6,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_6,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_6,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_6,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_6,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_6,
                           resize_nearest_neighbor::get_examples_scale_nhwc_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_6,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_6,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_6,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_6,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_6,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_6,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_6,
                           resize_nearest_neighbor::is_ignored_scale_nchw_6,
                           resize_nearest_neighbor::get_examples_scale_nchw_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_6,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_6,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_6,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_6,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_6,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_6,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_6());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_6) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_6,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_6,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_6(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_6) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_6();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_7,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_7,
                           resize_nearest_neighbor::get_examples_shape_nhwc_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_7,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_7,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_7,
                           resize_nearest_neighbor::is_ignored_shape_nchw_7,
                           resize_nearest_neighbor::get_examples_shape_nchw_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_7,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_7,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_7,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_7,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_7,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_7,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_7,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_7,
                           resize_nearest_neighbor::get_examples_scale_nhwc_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_7,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_7,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_7,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_7,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_7,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_7,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_7,
                           resize_nearest_neighbor::is_ignored_scale_nchw_7,
                           resize_nearest_neighbor::get_examples_scale_nchw_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_7,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_7,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_7,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_7,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_7,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_7,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_7());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_7) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_7,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_7,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_7(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_7) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_7();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_8,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_8,
                           resize_nearest_neighbor::get_examples_shape_nhwc_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::get_examples_shape_nhwc_quant8_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_quant8_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nhwc_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nhwc_float16_8,
                           resize_nearest_neighbor::is_ignored_shape_nhwc_float16_8,
                           resize_nearest_neighbor::get_examples_shape_nhwc_float16_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nhwc_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nhwc_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nhwc_float16_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_8,
                           resize_nearest_neighbor::is_ignored_shape_nchw_8,
                           resize_nearest_neighbor::get_examples_shape_nchw_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::is_ignored_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::get_examples_shape_nchw_relaxed_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_quant8_8,
                           resize_nearest_neighbor::is_ignored_shape_nchw_quant8_8,
                           resize_nearest_neighbor::get_examples_shape_nchw_quant8_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_quant8_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_shape_nchw_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_nchw_float16_8,
                           resize_nearest_neighbor::is_ignored_shape_nchw_float16_8,
                           resize_nearest_neighbor::get_examples_shape_nchw_float16_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_nchw_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_nchw_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_nchw_float16_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_quant8_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nhwc_float16_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nhwc_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nhwc_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nhwc_float16_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_quant8_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_quant8_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_8,
                           resize_nearest_neighbor::is_ignored_shape_dynamic_output_shape_nchw_float16_8,
                           resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_shape_dynamic_output_shape_nchw_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_shape_dynamic_output_shape_nchw_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_shape_dynamic_output_shape_nchw_float16_8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_8,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_8,
                           resize_nearest_neighbor::get_examples_scale_nhwc_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_8,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_relaxed_8,
                           resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_8,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_quant8_8,
                           resize_nearest_neighbor::get_examples_scale_nhwc_quant8_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_quant8_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nhwc_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nhwc_float16_8,
                           resize_nearest_neighbor::is_ignored_scale_nhwc_float16_8,
                           resize_nearest_neighbor::get_examples_scale_nhwc_float16_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nhwc_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nhwc_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nhwc_float16_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_8,
                           resize_nearest_neighbor::is_ignored_scale_nchw_8,
                           resize_nearest_neighbor::get_examples_scale_nchw_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_8,
                           resize_nearest_neighbor::is_ignored_scale_nchw_relaxed_8,
                           resize_nearest_neighbor::get_examples_scale_nchw_relaxed_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_quant8_8,
                           resize_nearest_neighbor::is_ignored_scale_nchw_quant8_8,
                           resize_nearest_neighbor::get_examples_scale_nchw_quant8_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_quant8_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_scale_nchw_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_nchw_float16_8,
                           resize_nearest_neighbor::is_ignored_scale_nchw_float16_8,
                           resize_nearest_neighbor::get_examples_scale_nchw_float16_8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_nchw_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_nchw_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_nchw_float16_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_relaxed_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_quant8_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_quant8_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nhwc_float16_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nhwc_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nhwc_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nhwc_float16_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_relaxed_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_relaxed_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_relaxed_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_quant8_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_quant8_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_quant8_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_quant8_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_8,
                           resize_nearest_neighbor::is_ignored_scale_dynamic_output_shape_nchw_float16_8,
                           resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_scale_dynamic_output_shape_nchw_float16_8) {
  const Model model = resize_nearest_neighbor::createTestModel_scale_dynamic_output_shape_nchw_float16_8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_scale_dynamic_output_shape_nchw_float16_8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_float16,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_quant8,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_float16,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_float16,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, resize_nearest_neighbor_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, resize_nearest_neighbor_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = resize_nearest_neighbor::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(resize_nearest_neighbor::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
// Generated from: rnn_float16.mod.py.
namespace rnn_float16 {
// Generated rnn_float16 test
#include "examples/rnn_float16.example.cpp"
// Generated model constructor
#include "vts_models/rnn_float16.model.cpp"
} // namespace rnn_float16

TEST_F(NeuralnetworksHidlTest, rnn_float16) {
  generated_tests::Execute(device,
                           rnn_float16::createTestModel,
                           rnn_float16::is_ignored,
                           rnn_float16::get_examples());
}

TEST_F(ValidationTest, rnn_float16) {
  const Model model = rnn_float16::createTestModel();
  const std::vector<Request> requests = createRequests(rnn_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rnn_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rnn_float16::createTestModel_dynamic_output_shape,
                           rnn_float16::is_ignored_dynamic_output_shape,
                           rnn_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rnn_float16_dynamic_output_shape) {
  const Model model = rnn_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rnn_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: roi_align.mod.py.
namespace roi_align {
// Generated roi_align test
#include "examples/roi_align.example.cpp"
// Generated model constructor
#include "vts_models/roi_align.model.cpp"
} // namespace roi_align

TEST_F(NeuralnetworksHidlTest, roi_align_nhwc) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc,
                           roi_align::is_ignored_nhwc,
                           roi_align::get_examples_nhwc());
}

TEST_F(ValidationTest, roi_align_nhwc) {
  const Model model = roi_align::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_relaxed,
                           roi_align::is_ignored_nhwc_relaxed,
                           roi_align::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, roi_align_nhwc_relaxed) {
  const Model model = roi_align::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_quant8,
                           roi_align::is_ignored_nhwc_quant8,
                           roi_align::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, roi_align_nhwc_quant8) {
  const Model model = roi_align::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_float16,
                           roi_align::is_ignored_nhwc_float16,
                           roi_align::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, roi_align_nhwc_float16) {
  const Model model = roi_align::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw,
                           roi_align::is_ignored_nchw,
                           roi_align::get_examples_nchw());
}

TEST_F(ValidationTest, roi_align_nchw) {
  const Model model = roi_align::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_relaxed,
                           roi_align::is_ignored_nchw_relaxed,
                           roi_align::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, roi_align_nchw_relaxed) {
  const Model model = roi_align::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_quant8,
                           roi_align::is_ignored_nchw_quant8,
                           roi_align::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, roi_align_nchw_quant8) {
  const Model model = roi_align::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_float16,
                           roi_align::is_ignored_nchw_float16,
                           roi_align::get_examples_nchw_float16());
}

TEST_F(ValidationTest, roi_align_nchw_float16) {
  const Model model = roi_align::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc,
                           roi_align::is_ignored_dynamic_output_shape_nhwc,
                           roi_align::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           roi_align::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_relaxed) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_quant8,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_quant8,
                           roi_align::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_quant8) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_float16,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_float16,
                           roi_align::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_float16) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw,
                           roi_align::is_ignored_dynamic_output_shape_nchw,
                           roi_align::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_relaxed,
                           roi_align::is_ignored_dynamic_output_shape_nchw_relaxed,
                           roi_align::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_relaxed) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_quant8,
                           roi_align::is_ignored_dynamic_output_shape_nchw_quant8,
                           roi_align::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_quant8) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_float16,
                           roi_align::is_ignored_dynamic_output_shape_nchw_float16,
                           roi_align::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_float16) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_2,
                           roi_align::is_ignored_nhwc_2,
                           roi_align::get_examples_nhwc_2());
}

TEST_F(ValidationTest, roi_align_nhwc_2) {
  const Model model = roi_align::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_relaxed_2,
                           roi_align::is_ignored_nhwc_relaxed_2,
                           roi_align::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, roi_align_nhwc_relaxed_2) {
  const Model model = roi_align::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_quant8_2,
                           roi_align::is_ignored_nhwc_quant8_2,
                           roi_align::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, roi_align_nhwc_quant8_2) {
  const Model model = roi_align::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_float16_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_float16_2,
                           roi_align::is_ignored_nhwc_float16_2,
                           roi_align::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, roi_align_nhwc_float16_2) {
  const Model model = roi_align::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_2,
                           roi_align::is_ignored_nchw_2,
                           roi_align::get_examples_nchw_2());
}

TEST_F(ValidationTest, roi_align_nchw_2) {
  const Model model = roi_align::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_relaxed_2,
                           roi_align::is_ignored_nchw_relaxed_2,
                           roi_align::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, roi_align_nchw_relaxed_2) {
  const Model model = roi_align::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_quant8_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_quant8_2,
                           roi_align::is_ignored_nchw_quant8_2,
                           roi_align::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, roi_align_nchw_quant8_2) {
  const Model model = roi_align::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_float16_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_float16_2,
                           roi_align::is_ignored_nchw_float16_2,
                           roi_align::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, roi_align_nchw_float16_2) {
  const Model model = roi_align::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_2,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_2,
                           roi_align::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           roi_align::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           roi_align::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_float16_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_2,
                           roi_align::is_ignored_dynamic_output_shape_nchw_2,
                           roi_align::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           roi_align::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           roi_align::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           roi_align::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           roi_align::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_quant8_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_float16_2,
                           roi_align::is_ignored_dynamic_output_shape_nchw_float16_2,
                           roi_align::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_float16_2) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_3,
                           roi_align::is_ignored_nhwc_3,
                           roi_align::get_examples_nhwc_3());
}

TEST_F(ValidationTest, roi_align_nhwc_3) {
  const Model model = roi_align::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_relaxed_3,
                           roi_align::is_ignored_nhwc_relaxed_3,
                           roi_align::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, roi_align_nhwc_relaxed_3) {
  const Model model = roi_align::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_quant8_3,
                           roi_align::is_ignored_nhwc_quant8_3,
                           roi_align::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, roi_align_nhwc_quant8_3) {
  const Model model = roi_align::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_float16_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_float16_3,
                           roi_align::is_ignored_nhwc_float16_3,
                           roi_align::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, roi_align_nhwc_float16_3) {
  const Model model = roi_align::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_3,
                           roi_align::is_ignored_nchw_3,
                           roi_align::get_examples_nchw_3());
}

TEST_F(ValidationTest, roi_align_nchw_3) {
  const Model model = roi_align::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_relaxed_3,
                           roi_align::is_ignored_nchw_relaxed_3,
                           roi_align::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, roi_align_nchw_relaxed_3) {
  const Model model = roi_align::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_quant8_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_quant8_3,
                           roi_align::is_ignored_nchw_quant8_3,
                           roi_align::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, roi_align_nchw_quant8_3) {
  const Model model = roi_align::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_float16_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_float16_3,
                           roi_align::is_ignored_nchw_float16_3,
                           roi_align::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, roi_align_nchw_float16_3) {
  const Model model = roi_align::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_3,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_3,
                           roi_align::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           roi_align::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           roi_align::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_float16_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_3,
                           roi_align::is_ignored_dynamic_output_shape_nchw_3,
                           roi_align::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           roi_align::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           roi_align::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           roi_align::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           roi_align::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_quant8_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_float16_3,
                           roi_align::is_ignored_dynamic_output_shape_nchw_float16_3,
                           roi_align::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_float16_3) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_4,
                           roi_align::is_ignored_nhwc_4,
                           roi_align::get_examples_nhwc_4());
}

TEST_F(ValidationTest, roi_align_nhwc_4) {
  const Model model = roi_align::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_relaxed_4,
                           roi_align::is_ignored_nhwc_relaxed_4,
                           roi_align::get_examples_nhwc_relaxed_4());
}

TEST_F(ValidationTest, roi_align_nhwc_relaxed_4) {
  const Model model = roi_align::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_quant8_4,
                           roi_align::is_ignored_nhwc_quant8_4,
                           roi_align::get_examples_nhwc_quant8_4());
}

TEST_F(ValidationTest, roi_align_nhwc_quant8_4) {
  const Model model = roi_align::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_float16_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_float16_4,
                           roi_align::is_ignored_nhwc_float16_4,
                           roi_align::get_examples_nhwc_float16_4());
}

TEST_F(ValidationTest, roi_align_nhwc_float16_4) {
  const Model model = roi_align::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_4,
                           roi_align::is_ignored_nchw_4,
                           roi_align::get_examples_nchw_4());
}

TEST_F(ValidationTest, roi_align_nchw_4) {
  const Model model = roi_align::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_relaxed_4,
                           roi_align::is_ignored_nchw_relaxed_4,
                           roi_align::get_examples_nchw_relaxed_4());
}

TEST_F(ValidationTest, roi_align_nchw_relaxed_4) {
  const Model model = roi_align::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_quant8_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_quant8_4,
                           roi_align::is_ignored_nchw_quant8_4,
                           roi_align::get_examples_nchw_quant8_4());
}

TEST_F(ValidationTest, roi_align_nchw_quant8_4) {
  const Model model = roi_align::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_float16_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_float16_4,
                           roi_align::is_ignored_nchw_float16_4,
                           roi_align::get_examples_nchw_float16_4());
}

TEST_F(ValidationTest, roi_align_nchw_float16_4) {
  const Model model = roi_align::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_4,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_4,
                           roi_align::get_examples_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           roi_align::get_examples_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           roi_align::get_examples_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_float16_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_4,
                           roi_align::is_ignored_dynamic_output_shape_nchw_4,
                           roi_align::get_examples_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           roi_align::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           roi_align::get_examples_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           roi_align::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           roi_align::get_examples_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_quant8_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_float16_4,
                           roi_align::is_ignored_dynamic_output_shape_nchw_float16_4,
                           roi_align::get_examples_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_float16_4) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nhwc,
                           roi_align::is_ignored_zero_sized_nhwc,
                           roi_align::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, roi_align_zero_sized_nhwc) {
  const Model model = roi_align::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nhwc_relaxed,
                           roi_align::is_ignored_zero_sized_nhwc_relaxed,
                           roi_align::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, roi_align_zero_sized_nhwc_relaxed) {
  const Model model = roi_align::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nhwc_quant8,
                           roi_align::is_ignored_zero_sized_nhwc_quant8,
                           roi_align::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, roi_align_zero_sized_nhwc_quant8) {
  const Model model = roi_align::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nhwc_float16,
                           roi_align::is_ignored_zero_sized_nhwc_float16,
                           roi_align::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, roi_align_zero_sized_nhwc_float16) {
  const Model model = roi_align::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nchw) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nchw,
                           roi_align::is_ignored_zero_sized_nchw,
                           roi_align::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, roi_align_zero_sized_nchw) {
  const Model model = roi_align::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nchw_relaxed,
                           roi_align::is_ignored_zero_sized_nchw_relaxed,
                           roi_align::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, roi_align_zero_sized_nchw_relaxed) {
  const Model model = roi_align::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nchw_quant8,
                           roi_align::is_ignored_zero_sized_nchw_quant8,
                           roi_align::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, roi_align_zero_sized_nchw_quant8) {
  const Model model = roi_align::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_nchw_float16,
                           roi_align::is_ignored_zero_sized_nchw_float16,
                           roi_align::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, roi_align_zero_sized_nchw_float16) {
  const Model model = roi_align::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nchw) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           roi_align::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, roi_align_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = roi_align::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_5,
                           roi_align::is_ignored_nhwc_5,
                           roi_align::get_examples_nhwc_5());
}

TEST_F(ValidationTest, roi_align_nhwc_5) {
  const Model model = roi_align::createTestModel_nhwc_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_relaxed_5,
                           roi_align::is_ignored_nhwc_relaxed_5,
                           roi_align::get_examples_nhwc_relaxed_5());
}

TEST_F(ValidationTest, roi_align_nhwc_relaxed_5) {
  const Model model = roi_align::createTestModel_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_quant8_5,
                           roi_align::is_ignored_nhwc_quant8_5,
                           roi_align::get_examples_nhwc_quant8_5());
}

TEST_F(ValidationTest, roi_align_nhwc_quant8_5) {
  const Model model = roi_align::createTestModel_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nhwc_float16_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nhwc_float16_5,
                           roi_align::is_ignored_nhwc_float16_5,
                           roi_align::get_examples_nhwc_float16_5());
}

TEST_F(ValidationTest, roi_align_nhwc_float16_5) {
  const Model model = roi_align::createTestModel_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nhwc_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_5,
                           roi_align::is_ignored_nchw_5,
                           roi_align::get_examples_nchw_5());
}

TEST_F(ValidationTest, roi_align_nchw_5) {
  const Model model = roi_align::createTestModel_nchw_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_relaxed_5,
                           roi_align::is_ignored_nchw_relaxed_5,
                           roi_align::get_examples_nchw_relaxed_5());
}

TEST_F(ValidationTest, roi_align_nchw_relaxed_5) {
  const Model model = roi_align::createTestModel_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_quant8_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_quant8_5,
                           roi_align::is_ignored_nchw_quant8_5,
                           roi_align::get_examples_nchw_quant8_5());
}

TEST_F(ValidationTest, roi_align_nchw_quant8_5) {
  const Model model = roi_align::createTestModel_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_align_nchw_float16_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_nchw_float16_5,
                           roi_align::is_ignored_nchw_float16_5,
                           roi_align::get_examples_nchw_float16_5());
}

TEST_F(ValidationTest, roi_align_nchw_float16_5) {
  const Model model = roi_align::createTestModel_nchw_float16_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_nchw_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_5,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_5,
                           roi_align::get_examples_dynamic_output_shape_nhwc_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_5,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_relaxed_5,
                           roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_relaxed_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_5,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_quant8_5,
                           roi_align::get_examples_dynamic_output_shape_nhwc_quant8_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_quant8_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nhwc_float16_5,
                           roi_align::is_ignored_dynamic_output_shape_nhwc_float16_5,
                           roi_align::get_examples_dynamic_output_shape_nhwc_float16_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nhwc_float16_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_5,
                           roi_align::is_ignored_dynamic_output_shape_nchw_5,
                           roi_align::get_examples_dynamic_output_shape_nchw_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_5,
                           roi_align::is_ignored_dynamic_output_shape_nchw_relaxed_5,
                           roi_align::get_examples_dynamic_output_shape_nchw_relaxed_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_relaxed_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_quant8_5,
                           roi_align::is_ignored_dynamic_output_shape_nchw_quant8_5,
                           roi_align::get_examples_dynamic_output_shape_nchw_quant8_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_quant8_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_align_dynamic_output_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           roi_align::createTestModel_dynamic_output_shape_nchw_float16_5,
                           roi_align::is_ignored_dynamic_output_shape_nchw_float16_5,
                           roi_align::get_examples_dynamic_output_shape_nchw_float16_5(), true);
}

TEST_F(ValidationTest, roi_align_dynamic_output_shape_nchw_float16_5) {
  const Model model = roi_align::createTestModel_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(roi_align::get_examples_dynamic_output_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#endif
// Generated from: roi_pooling.mod.py.
namespace roi_pooling {
// Generated roi_pooling test
#include "examples/roi_pooling.example.cpp"
// Generated model constructor
#include "vts_models/roi_pooling.model.cpp"
} // namespace roi_pooling

TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc,
                           roi_pooling::is_ignored_nhwc,
                           roi_pooling::get_examples_nhwc());
}

TEST_F(ValidationTest, roi_pooling_nhwc) {
  const Model model = roi_pooling::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_relaxed,
                           roi_pooling::is_ignored_nhwc_relaxed,
                           roi_pooling::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, roi_pooling_nhwc_relaxed) {
  const Model model = roi_pooling::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_quant8,
                           roi_pooling::is_ignored_nhwc_quant8,
                           roi_pooling::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, roi_pooling_nhwc_quant8) {
  const Model model = roi_pooling::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_float16,
                           roi_pooling::is_ignored_nhwc_float16,
                           roi_pooling::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, roi_pooling_nhwc_float16) {
  const Model model = roi_pooling::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw,
                           roi_pooling::is_ignored_nchw,
                           roi_pooling::get_examples_nchw());
}

TEST_F(ValidationTest, roi_pooling_nchw) {
  const Model model = roi_pooling::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_relaxed,
                           roi_pooling::is_ignored_nchw_relaxed,
                           roi_pooling::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, roi_pooling_nchw_relaxed) {
  const Model model = roi_pooling::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_quant8,
                           roi_pooling::is_ignored_nchw_quant8,
                           roi_pooling::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, roi_pooling_nchw_quant8) {
  const Model model = roi_pooling::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_float16) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_float16,
                           roi_pooling::is_ignored_nchw_float16,
                           roi_pooling::get_examples_nchw_float16());
}

TEST_F(ValidationTest, roi_pooling_nchw_float16) {
  const Model model = roi_pooling::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_relaxed) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_quant8,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_quant8) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_float16,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_float16) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw,
                           roi_pooling::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_relaxed,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_relaxed) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_quant8,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_quant8) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_float16,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_float16,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_float16) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_2,
                           roi_pooling::is_ignored_nhwc_2,
                           roi_pooling::get_examples_nhwc_2());
}

TEST_F(ValidationTest, roi_pooling_nhwc_2) {
  const Model model = roi_pooling::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_relaxed_2,
                           roi_pooling::is_ignored_nhwc_relaxed_2,
                           roi_pooling::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, roi_pooling_nhwc_relaxed_2) {
  const Model model = roi_pooling::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_quant8_2,
                           roi_pooling::is_ignored_nhwc_quant8_2,
                           roi_pooling::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, roi_pooling_nhwc_quant8_2) {
  const Model model = roi_pooling::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_float16_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_float16_2,
                           roi_pooling::is_ignored_nhwc_float16_2,
                           roi_pooling::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, roi_pooling_nhwc_float16_2) {
  const Model model = roi_pooling::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_2,
                           roi_pooling::is_ignored_nchw_2,
                           roi_pooling::get_examples_nchw_2());
}

TEST_F(ValidationTest, roi_pooling_nchw_2) {
  const Model model = roi_pooling::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_relaxed_2,
                           roi_pooling::is_ignored_nchw_relaxed_2,
                           roi_pooling::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, roi_pooling_nchw_relaxed_2) {
  const Model model = roi_pooling::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_quant8_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_quant8_2,
                           roi_pooling::is_ignored_nchw_quant8_2,
                           roi_pooling::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, roi_pooling_nchw_quant8_2) {
  const Model model = roi_pooling::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_float16_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_float16_2,
                           roi_pooling::is_ignored_nchw_float16_2,
                           roi_pooling::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, roi_pooling_nchw_float16_2) {
  const Model model = roi_pooling::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_2,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_float16_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_2,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_quant8_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_float16_2,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_float16_2,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_float16_2) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_3,
                           roi_pooling::is_ignored_nhwc_3,
                           roi_pooling::get_examples_nhwc_3());
}

TEST_F(ValidationTest, roi_pooling_nhwc_3) {
  const Model model = roi_pooling::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_relaxed_3,
                           roi_pooling::is_ignored_nhwc_relaxed_3,
                           roi_pooling::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, roi_pooling_nhwc_relaxed_3) {
  const Model model = roi_pooling::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_quant8_3,
                           roi_pooling::is_ignored_nhwc_quant8_3,
                           roi_pooling::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, roi_pooling_nhwc_quant8_3) {
  const Model model = roi_pooling::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nhwc_float16_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nhwc_float16_3,
                           roi_pooling::is_ignored_nhwc_float16_3,
                           roi_pooling::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, roi_pooling_nhwc_float16_3) {
  const Model model = roi_pooling::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_3,
                           roi_pooling::is_ignored_nchw_3,
                           roi_pooling::get_examples_nchw_3());
}

TEST_F(ValidationTest, roi_pooling_nchw_3) {
  const Model model = roi_pooling::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_relaxed_3,
                           roi_pooling::is_ignored_nchw_relaxed_3,
                           roi_pooling::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, roi_pooling_nchw_relaxed_3) {
  const Model model = roi_pooling::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_quant8_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_quant8_3,
                           roi_pooling::is_ignored_nchw_quant8_3,
                           roi_pooling::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, roi_pooling_nchw_quant8_3) {
  const Model model = roi_pooling::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, roi_pooling_nchw_float16_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_nchw_float16_3,
                           roi_pooling::is_ignored_nchw_float16_3,
                           roi_pooling::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, roi_pooling_nchw_float16_3) {
  const Model model = roi_pooling::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_3,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           roi_pooling::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nhwc_float16_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_3,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_quant8_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, roi_pooling_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           roi_pooling::createTestModel_dynamic_output_shape_nchw_float16_3,
                           roi_pooling::is_ignored_dynamic_output_shape_nchw_float16_3,
                           roi_pooling::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, roi_pooling_dynamic_output_shape_nchw_float16_3) {
  const Model model = roi_pooling::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(roi_pooling::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
// Generated from: rsqrt.mod.py.
namespace rsqrt {
// Generated rsqrt test
#include "examples/rsqrt.example.cpp"
// Generated model constructor
#include "vts_models/rsqrt.model.cpp"
} // namespace rsqrt

TEST_F(NeuralnetworksHidlTest, rsqrt) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel,
                           rsqrt::is_ignored,
                           rsqrt::get_examples());
}

TEST_F(ValidationTest, rsqrt) {
  const Model model = rsqrt::createTestModel();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, rsqrt_relaxed) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel_relaxed,
                           rsqrt::is_ignored_relaxed,
                           rsqrt::get_examples_relaxed());
}

TEST_F(ValidationTest, rsqrt_relaxed) {
  const Model model = rsqrt::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, rsqrt_float16) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel_float16,
                           rsqrt::is_ignored_float16,
                           rsqrt::get_examples_float16());
}

TEST_F(ValidationTest, rsqrt_float16) {
  const Model model = rsqrt::createTestModel_float16();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rsqrt_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel_dynamic_output_shape,
                           rsqrt::is_ignored_dynamic_output_shape,
                           rsqrt::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rsqrt_dynamic_output_shape) {
  const Model model = rsqrt::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rsqrt_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel_dynamic_output_shape_relaxed,
                           rsqrt::is_ignored_dynamic_output_shape_relaxed,
                           rsqrt::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, rsqrt_dynamic_output_shape_relaxed) {
  const Model model = rsqrt::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rsqrt_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           rsqrt::createTestModel_dynamic_output_shape_float16,
                           rsqrt::is_ignored_dynamic_output_shape_float16,
                           rsqrt::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, rsqrt_dynamic_output_shape_float16) {
  const Model model = rsqrt::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(rsqrt::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: select_v1_2.mod.py.
namespace select_v1_2 {
// Generated select_v1_2 test
#include "examples/select_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/select_v1_2.model.cpp"
} // namespace select_v1_2

TEST_F(NeuralnetworksHidlTest, select_v1_2_one_dim) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel,
                           select_v1_2::is_ignored,
                           select_v1_2::get_examples_one_dim());
}

TEST_F(ValidationTest, select_v1_2_one_dim) {
  const Model model = select_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_one_dim_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_int32,
                           select_v1_2::is_ignored_int32,
                           select_v1_2::get_examples_one_dim_int32());
}

TEST_F(ValidationTest, select_v1_2_one_dim_int32) {
  const Model model = select_v1_2::createTestModel_int32();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_one_dim_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_float16,
                           select_v1_2::is_ignored_float16,
                           select_v1_2::get_examples_one_dim_float16());
}

TEST_F(ValidationTest, select_v1_2_one_dim_float16) {
  const Model model = select_v1_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_one_dim_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_relaxed,
                           select_v1_2::is_ignored_relaxed,
                           select_v1_2::get_examples_one_dim_relaxed());
}

TEST_F(ValidationTest, select_v1_2_one_dim_relaxed) {
  const Model model = select_v1_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_one_dim_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_quant8,
                           select_v1_2::is_ignored_quant8,
                           select_v1_2::get_examples_one_dim_quant8());
}

TEST_F(ValidationTest, select_v1_2_one_dim_quant8) {
  const Model model = select_v1_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_one_dim_dynamic_output_shape) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape,
                           select_v1_2::is_ignored_dynamic_output_shape,
                           select_v1_2::get_examples_one_dim_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, select_v1_2_one_dim_dynamic_output_shape) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_one_dim_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_int32,
                           select_v1_2::is_ignored_dynamic_output_shape_int32,
                           select_v1_2::get_examples_one_dim_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, select_v1_2_one_dim_dynamic_output_shape_int32) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_one_dim_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_float16,
                           select_v1_2::is_ignored_dynamic_output_shape_float16,
                           select_v1_2::get_examples_one_dim_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, select_v1_2_one_dim_dynamic_output_shape_float16) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_one_dim_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_relaxed,
                           select_v1_2::is_ignored_dynamic_output_shape_relaxed,
                           select_v1_2::get_examples_one_dim_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, select_v1_2_one_dim_dynamic_output_shape_relaxed) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_one_dim_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_quant8,
                           select_v1_2::is_ignored_dynamic_output_shape_quant8,
                           select_v1_2::get_examples_one_dim_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, select_v1_2_one_dim_dynamic_output_shape_quant8) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_one_dim_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, select_v1_2_two_dim) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_2,
                           select_v1_2::is_ignored_2,
                           select_v1_2::get_examples_two_dim());
}

TEST_F(ValidationTest, select_v1_2_two_dim) {
  const Model model = select_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_two_dim_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_int32_2,
                           select_v1_2::is_ignored_int32_2,
                           select_v1_2::get_examples_two_dim_int32());
}

TEST_F(ValidationTest, select_v1_2_two_dim_int32) {
  const Model model = select_v1_2::createTestModel_int32_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_two_dim_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_float16_2,
                           select_v1_2::is_ignored_float16_2,
                           select_v1_2::get_examples_two_dim_float16());
}

TEST_F(ValidationTest, select_v1_2_two_dim_float16) {
  const Model model = select_v1_2::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_two_dim_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_relaxed_2,
                           select_v1_2::is_ignored_relaxed_2,
                           select_v1_2::get_examples_two_dim_relaxed());
}

TEST_F(ValidationTest, select_v1_2_two_dim_relaxed) {
  const Model model = select_v1_2::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_two_dim_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_quant8_2,
                           select_v1_2::is_ignored_quant8_2,
                           select_v1_2::get_examples_two_dim_quant8());
}

TEST_F(ValidationTest, select_v1_2_two_dim_quant8) {
  const Model model = select_v1_2::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_two_dim_dynamic_output_shape) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_2,
                           select_v1_2::is_ignored_dynamic_output_shape_2,
                           select_v1_2::get_examples_two_dim_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, select_v1_2_two_dim_dynamic_output_shape) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_two_dim_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_int32_2,
                           select_v1_2::is_ignored_dynamic_output_shape_int32_2,
                           select_v1_2::get_examples_two_dim_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, select_v1_2_two_dim_dynamic_output_shape_int32) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_int32_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_two_dim_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_float16_2,
                           select_v1_2::is_ignored_dynamic_output_shape_float16_2,
                           select_v1_2::get_examples_two_dim_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, select_v1_2_two_dim_dynamic_output_shape_float16) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_two_dim_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_relaxed_2,
                           select_v1_2::is_ignored_dynamic_output_shape_relaxed_2,
                           select_v1_2::get_examples_two_dim_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, select_v1_2_two_dim_dynamic_output_shape_relaxed) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_two_dim_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_quant8_2,
                           select_v1_2::is_ignored_dynamic_output_shape_quant8_2,
                           select_v1_2::get_examples_two_dim_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, select_v1_2_two_dim_dynamic_output_shape_quant8) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_two_dim_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, select_v1_2_five_dim) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_3,
                           select_v1_2::is_ignored_3,
                           select_v1_2::get_examples_five_dim());
}

TEST_F(ValidationTest, select_v1_2_five_dim) {
  const Model model = select_v1_2::createTestModel_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_five_dim_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_int32_3,
                           select_v1_2::is_ignored_int32_3,
                           select_v1_2::get_examples_five_dim_int32());
}

TEST_F(ValidationTest, select_v1_2_five_dim_int32) {
  const Model model = select_v1_2::createTestModel_int32_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_int32());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_five_dim_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_float16_3,
                           select_v1_2::is_ignored_float16_3,
                           select_v1_2::get_examples_five_dim_float16());
}

TEST_F(ValidationTest, select_v1_2_five_dim_float16) {
  const Model model = select_v1_2::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_five_dim_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_relaxed_3,
                           select_v1_2::is_ignored_relaxed_3,
                           select_v1_2::get_examples_five_dim_relaxed());
}

TEST_F(ValidationTest, select_v1_2_five_dim_relaxed) {
  const Model model = select_v1_2::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, select_v1_2_five_dim_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_quant8_3,
                           select_v1_2::is_ignored_quant8_3,
                           select_v1_2::get_examples_five_dim_quant8());
}

TEST_F(ValidationTest, select_v1_2_five_dim_quant8) {
  const Model model = select_v1_2::createTestModel_quant8_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_five_dim_dynamic_output_shape) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_3,
                           select_v1_2::is_ignored_dynamic_output_shape_3,
                           select_v1_2::get_examples_five_dim_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, select_v1_2_five_dim_dynamic_output_shape) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_five_dim_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_int32_3,
                           select_v1_2::is_ignored_dynamic_output_shape_int32_3,
                           select_v1_2::get_examples_five_dim_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, select_v1_2_five_dim_dynamic_output_shape_int32) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_int32_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_five_dim_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_float16_3,
                           select_v1_2::is_ignored_dynamic_output_shape_float16_3,
                           select_v1_2::get_examples_five_dim_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, select_v1_2_five_dim_dynamic_output_shape_float16) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_five_dim_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_relaxed_3,
                           select_v1_2::is_ignored_dynamic_output_shape_relaxed_3,
                           select_v1_2::get_examples_five_dim_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, select_v1_2_five_dim_dynamic_output_shape_relaxed) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, select_v1_2_five_dim_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           select_v1_2::createTestModel_dynamic_output_shape_quant8_3,
                           select_v1_2::is_ignored_dynamic_output_shape_quant8_3,
                           select_v1_2::get_examples_five_dim_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, select_v1_2_five_dim_dynamic_output_shape_quant8) {
  const Model model = select_v1_2::createTestModel_dynamic_output_shape_quant8_3();
  const std::vector<Request> requests = createRequests(select_v1_2::get_examples_five_dim_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: sin.mod.py.
namespace sin {
// Generated sin test
#include "examples/sin.example.cpp"
// Generated model constructor
#include "vts_models/sin.model.cpp"
} // namespace sin

TEST_F(NeuralnetworksHidlTest, sin) {
  generated_tests::Execute(device,
                           sin::createTestModel,
                           sin::is_ignored,
                           sin::get_examples());
}

TEST_F(ValidationTest, sin) {
  const Model model = sin::createTestModel();
  const std::vector<Request> requests = createRequests(sin::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sin_relaxed) {
  generated_tests::Execute(device,
                           sin::createTestModel_relaxed,
                           sin::is_ignored_relaxed,
                           sin::get_examples_relaxed());
}

TEST_F(ValidationTest, sin_relaxed) {
  const Model model = sin::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(sin::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sin_float16) {
  generated_tests::Execute(device,
                           sin::createTestModel_float16,
                           sin::is_ignored_float16,
                           sin::get_examples_float16());
}

TEST_F(ValidationTest, sin_float16) {
  const Model model = sin::createTestModel_float16();
  const std::vector<Request> requests = createRequests(sin::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sin_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sin::createTestModel_dynamic_output_shape,
                           sin::is_ignored_dynamic_output_shape,
                           sin::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sin_dynamic_output_shape) {
  const Model model = sin::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sin::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sin_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           sin::createTestModel_dynamic_output_shape_relaxed,
                           sin::is_ignored_dynamic_output_shape_relaxed,
                           sin::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, sin_dynamic_output_shape_relaxed) {
  const Model model = sin::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(sin::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sin_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           sin::createTestModel_dynamic_output_shape_float16,
                           sin::is_ignored_dynamic_output_shape_float16,
                           sin::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, sin_dynamic_output_shape_float16) {
  const Model model = sin::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(sin::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: slice.mod.py.
namespace slice {
// Generated slice test
#include "examples/slice.example.cpp"
// Generated model constructor
#include "vts_models/slice.model.cpp"
} // namespace slice

TEST_F(NeuralnetworksHidlTest, slice) {
  generated_tests::Execute(device,
                           slice::createTestModel,
                           slice::is_ignored,
                           slice::get_examples());
}

TEST_F(ValidationTest, slice) {
  const Model model = slice::createTestModel();
  const std::vector<Request> requests = createRequests(slice::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed,
                           slice::is_ignored_relaxed,
                           slice::get_examples_relaxed());
}

TEST_F(ValidationTest, slice_relaxed) {
  const Model model = slice::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16,
                           slice::is_ignored_float16,
                           slice::get_examples_float16());
}

TEST_F(ValidationTest, slice_float16) {
  const Model model = slice::createTestModel_float16();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape,
                           slice::is_ignored_dynamic_output_shape,
                           slice::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape) {
  const Model model = slice::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed,
                           slice::is_ignored_dynamic_output_shape_relaxed,
                           slice::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16,
                           slice::is_ignored_dynamic_output_shape_float16,
                           slice::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_2,
                           slice::is_ignored_2,
                           slice::get_examples_2());
}

TEST_F(ValidationTest, slice_2) {
  const Model model = slice::createTestModel_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_2,
                           slice::is_ignored_relaxed_2,
                           slice::get_examples_relaxed_2());
}

TEST_F(ValidationTest, slice_relaxed_2) {
  const Model model = slice::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_2,
                           slice::is_ignored_float16_2,
                           slice::get_examples_float16_2());
}

TEST_F(ValidationTest, slice_float16_2) {
  const Model model = slice::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_2,
                           slice::is_ignored_dynamic_output_shape_2,
                           slice::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_2) {
  const Model model = slice::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_2,
                           slice::is_ignored_dynamic_output_shape_relaxed_2,
                           slice::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_2) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_2,
                           slice::is_ignored_dynamic_output_shape_float16_2,
                           slice::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_2) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_3,
                           slice::is_ignored_3,
                           slice::get_examples_3());
}

TEST_F(ValidationTest, slice_3) {
  const Model model = slice::createTestModel_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_3,
                           slice::is_ignored_relaxed_3,
                           slice::get_examples_relaxed_3());
}

TEST_F(ValidationTest, slice_relaxed_3) {
  const Model model = slice::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_3,
                           slice::is_ignored_float16_3,
                           slice::get_examples_float16_3());
}

TEST_F(ValidationTest, slice_float16_3) {
  const Model model = slice::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_3,
                           slice::is_ignored_dynamic_output_shape_3,
                           slice::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_3) {
  const Model model = slice::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_3,
                           slice::is_ignored_dynamic_output_shape_relaxed_3,
                           slice::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_3) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_3,
                           slice::is_ignored_dynamic_output_shape_float16_3,
                           slice::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_3) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_4,
                           slice::is_ignored_4,
                           slice::get_examples_4());
}

TEST_F(ValidationTest, slice_4) {
  const Model model = slice::createTestModel_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_4,
                           slice::is_ignored_relaxed_4,
                           slice::get_examples_relaxed_4());
}

TEST_F(ValidationTest, slice_relaxed_4) {
  const Model model = slice::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_4,
                           slice::is_ignored_float16_4,
                           slice::get_examples_float16_4());
}

TEST_F(ValidationTest, slice_float16_4) {
  const Model model = slice::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_4,
                           slice::is_ignored_dynamic_output_shape_4,
                           slice::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_4) {
  const Model model = slice::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_4,
                           slice::is_ignored_dynamic_output_shape_relaxed_4,
                           slice::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_4) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_4,
                           slice::is_ignored_dynamic_output_shape_float16_4,
                           slice::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_4) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_5,
                           slice::is_ignored_5,
                           slice::get_examples_5());
}

TEST_F(ValidationTest, slice_5) {
  const Model model = slice::createTestModel_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_5,
                           slice::is_ignored_relaxed_5,
                           slice::get_examples_relaxed_5());
}

TEST_F(ValidationTest, slice_relaxed_5) {
  const Model model = slice::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_5,
                           slice::is_ignored_float16_5,
                           slice::get_examples_float16_5());
}

TEST_F(ValidationTest, slice_float16_5) {
  const Model model = slice::createTestModel_float16_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_5,
                           slice::is_ignored_dynamic_output_shape_5,
                           slice::get_examples_dynamic_output_shape_5(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_5) {
  const Model model = slice::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_5,
                           slice::is_ignored_dynamic_output_shape_relaxed_5,
                           slice::get_examples_dynamic_output_shape_relaxed_5(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_5) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_5) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_5,
                           slice::is_ignored_dynamic_output_shape_float16_5,
                           slice::get_examples_dynamic_output_shape_float16_5(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_5) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_5();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_6,
                           slice::is_ignored_6,
                           slice::get_examples_6());
}

TEST_F(ValidationTest, slice_6) {
  const Model model = slice::createTestModel_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_6,
                           slice::is_ignored_relaxed_6,
                           slice::get_examples_relaxed_6());
}

TEST_F(ValidationTest, slice_relaxed_6) {
  const Model model = slice::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_6,
                           slice::is_ignored_float16_6,
                           slice::get_examples_float16_6());
}

TEST_F(ValidationTest, slice_float16_6) {
  const Model model = slice::createTestModel_float16_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_6,
                           slice::is_ignored_dynamic_output_shape_6,
                           slice::get_examples_dynamic_output_shape_6(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_6) {
  const Model model = slice::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_6,
                           slice::is_ignored_dynamic_output_shape_relaxed_6,
                           slice::get_examples_dynamic_output_shape_relaxed_6(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_6) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_6) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_6,
                           slice::is_ignored_dynamic_output_shape_float16_6,
                           slice::get_examples_dynamic_output_shape_float16_6(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_6) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_6();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_7,
                           slice::is_ignored_7,
                           slice::get_examples_7());
}

TEST_F(ValidationTest, slice_7) {
  const Model model = slice::createTestModel_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_7,
                           slice::is_ignored_relaxed_7,
                           slice::get_examples_relaxed_7());
}

TEST_F(ValidationTest, slice_relaxed_7) {
  const Model model = slice::createTestModel_relaxed_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_7());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_7,
                           slice::is_ignored_float16_7,
                           slice::get_examples_float16_7());
}

TEST_F(ValidationTest, slice_float16_7) {
  const Model model = slice::createTestModel_float16_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_7,
                           slice::is_ignored_dynamic_output_shape_7,
                           slice::get_examples_dynamic_output_shape_7(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_7) {
  const Model model = slice::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_7,
                           slice::is_ignored_dynamic_output_shape_relaxed_7,
                           slice::get_examples_dynamic_output_shape_relaxed_7(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_7) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_7());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_7) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_7,
                           slice::is_ignored_dynamic_output_shape_float16_7,
                           slice::get_examples_dynamic_output_shape_float16_7(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_7) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_7();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_8,
                           slice::is_ignored_8,
                           slice::get_examples_8());
}

TEST_F(ValidationTest, slice_8) {
  const Model model = slice::createTestModel_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_relaxed_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_relaxed_8,
                           slice::is_ignored_relaxed_8,
                           slice::get_examples_relaxed_8());
}

TEST_F(ValidationTest, slice_relaxed_8) {
  const Model model = slice::createTestModel_relaxed_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_relaxed_8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_float16_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_float16_8,
                           slice::is_ignored_float16_8,
                           slice::get_examples_float16_8());
}

TEST_F(ValidationTest, slice_float16_8) {
  const Model model = slice::createTestModel_float16_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_float16_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_8,
                           slice::is_ignored_dynamic_output_shape_8,
                           slice::get_examples_dynamic_output_shape_8(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_8) {
  const Model model = slice::createTestModel_dynamic_output_shape_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_relaxed_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_relaxed_8,
                           slice::is_ignored_dynamic_output_shape_relaxed_8,
                           slice::get_examples_dynamic_output_shape_relaxed_8(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_relaxed_8) {
  const Model model = slice::createTestModel_dynamic_output_shape_relaxed_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_relaxed_8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_dynamic_output_shape_float16_8) {
  generated_tests::Execute(device,
                           slice::createTestModel_dynamic_output_shape_float16_8,
                           slice::is_ignored_dynamic_output_shape_float16_8,
                           slice::get_examples_dynamic_output_shape_float16_8(), true);
}

TEST_F(ValidationTest, slice_dynamic_output_shape_float16_8) {
  const Model model = slice::createTestModel_dynamic_output_shape_float16_8();
  const std::vector<Request> requests = createRequests(slice::get_examples_dynamic_output_shape_float16_8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, slice_zero_sized) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized,
                           slice::is_ignored_zero_sized,
                           slice::get_examples_zero_sized());
}

TEST_F(ValidationTest, slice_zero_sized) {
  const Model model = slice::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_relaxed,
                           slice::is_ignored_zero_sized_relaxed,
                           slice::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, slice_zero_sized_relaxed) {
  const Model model = slice::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_zero_sized_quant8) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_quant8,
                           slice::is_ignored_zero_sized_quant8,
                           slice::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, slice_zero_sized_quant8) {
  const Model model = slice::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, slice_zero_sized_float16) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_float16,
                           slice::is_ignored_zero_sized_float16,
                           slice::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, slice_zero_sized_float16) {
  const Model model = slice::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_dynamic_output_shape,
                           slice::is_ignored_zero_sized_dynamic_output_shape,
                           slice::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, slice_zero_sized_dynamic_output_shape) {
  const Model model = slice::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           slice::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           slice::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, slice_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = slice::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           slice::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           slice::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, slice_zero_sized_dynamic_output_shape_quant8) {
  const Model model = slice::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, slice_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           slice::createTestModel_zero_sized_dynamic_output_shape_float16,
                           slice::is_ignored_zero_sized_dynamic_output_shape_float16,
                           slice::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, slice_zero_sized_dynamic_output_shape_float16) {
  const Model model = slice::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(slice::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_v1_2.mod.py.
namespace softmax_v1_2 {
// Generated softmax_v1_2 test
#include "examples/softmax_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/softmax_v1_2.model.cpp"
} // namespace softmax_v1_2

TEST_F(NeuralnetworksHidlTest, softmax_v1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel,
                           softmax_v1_2::is_ignored,
                           softmax_v1_2::get_examples());
}

TEST_F(ValidationTest, softmax_v1_2) {
  const Model model = softmax_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dim1_axis0,
                           softmax_v1_2::is_ignored_dim1_axis0,
                           softmax_v1_2::get_examples_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dim3_axis2,
                           softmax_v1_2::is_ignored_dim3_axis2,
                           softmax_v1_2::get_examples_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed,
                           softmax_v1_2::is_ignored_relaxed,
                           softmax_v1_2::get_examples_relaxed());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed) {
  const Model model = softmax_v1_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed_dim1_axis0,
                           softmax_v1_2::is_ignored_relaxed_dim1_axis0,
                           softmax_v1_2::get_examples_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed_dim3_axis2,
                           softmax_v1_2::is_ignored_relaxed_dim3_axis2,
                           softmax_v1_2::get_examples_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16,
                           softmax_v1_2::is_ignored_float16,
                           softmax_v1_2::get_examples_float16());
}

TEST_F(ValidationTest, softmax_v1_2_float16) {
  const Model model = softmax_v1_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16_dim1_axis0,
                           softmax_v1_2::is_ignored_float16_dim1_axis0,
                           softmax_v1_2::get_examples_float16_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_float16_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16_dim3_axis2,
                           softmax_v1_2::is_ignored_float16_dim3_axis2,
                           softmax_v1_2::get_examples_float16_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_float16_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8,
                           softmax_v1_2::is_ignored_quant8,
                           softmax_v1_2::get_examples_quant8());
}

TEST_F(ValidationTest, softmax_v1_2_quant8) {
  const Model model = softmax_v1_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8_dim1_axis0,
                           softmax_v1_2::is_ignored_quant8_dim1_axis0,
                           softmax_v1_2::get_examples_quant8_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_quant8_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8_dim3_axis2,
                           softmax_v1_2::is_ignored_quant8_dim3_axis2,
                           softmax_v1_2::get_examples_quant8_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_quant8_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8_dim3_axis2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape,
                           softmax_v1_2::is_ignored_dynamic_output_shape,
                           softmax_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_dim1_axis0,
                           softmax_v1_2::is_ignored_dynamic_output_shape_dim1_axis0,
                           softmax_v1_2::get_examples_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_dim3_axis2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_dim3_axis2,
                           softmax_v1_2::get_examples_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim1_axis0,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16_dim1_axis0,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim3_axis2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16_dim3_axis2,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim1_axis0,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8_dim1_axis0,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim3_axis2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8_dim3_axis2,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim3_axis2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, softmax_v1_2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_2,
                           softmax_v1_2::is_ignored_2,
                           softmax_v1_2::get_examples_2());
}

TEST_F(ValidationTest, softmax_v1_2_2) {
  const Model model = softmax_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dim1_axis0_2,
                           softmax_v1_2::is_ignored_dim1_axis0_2,
                           softmax_v1_2::get_examples_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dim3_axis2_2,
                           softmax_v1_2::is_ignored_dim3_axis2_2,
                           softmax_v1_2::get_examples_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed_2,
                           softmax_v1_2::is_ignored_relaxed_2,
                           softmax_v1_2::get_examples_relaxed_2());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed_2) {
  const Model model = softmax_v1_2::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed_dim1_axis0_2,
                           softmax_v1_2::is_ignored_relaxed_dim1_axis0_2,
                           softmax_v1_2::get_examples_relaxed_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_relaxed_dim3_axis2_2,
                           softmax_v1_2::is_ignored_relaxed_dim3_axis2_2,
                           softmax_v1_2::get_examples_relaxed_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_relaxed_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16_2,
                           softmax_v1_2::is_ignored_float16_2,
                           softmax_v1_2::get_examples_float16_2());
}

TEST_F(ValidationTest, softmax_v1_2_float16_2) {
  const Model model = softmax_v1_2::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16_dim1_axis0_2,
                           softmax_v1_2::is_ignored_float16_dim1_axis0_2,
                           softmax_v1_2::get_examples_float16_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_float16_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_float16_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_float16_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_float16_dim3_axis2_2,
                           softmax_v1_2::is_ignored_float16_dim3_axis2_2,
                           softmax_v1_2::get_examples_float16_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_float16_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_float16_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_float16_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8_2,
                           softmax_v1_2::is_ignored_quant8_2,
                           softmax_v1_2::get_examples_quant8_2());
}

TEST_F(ValidationTest, softmax_v1_2_quant8_2) {
  const Model model = softmax_v1_2::createTestModel_quant8_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8_dim1_axis0_2,
                           softmax_v1_2::is_ignored_quant8_dim1_axis0_2,
                           softmax_v1_2::get_examples_quant8_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_quant8_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_quant8_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_quant8_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_quant8_dim3_axis2_2,
                           softmax_v1_2::is_ignored_quant8_dim3_axis2_2,
                           softmax_v1_2::get_examples_quant8_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_quant8_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_quant8_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_quant8_dim3_axis2_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_dim1_axis0_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_dim3_axis2_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed_dim1_axis0_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_relaxed_dim3_axis2_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_relaxed_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim1_axis0_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16_dim1_axis0_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_float16_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim3_axis2_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_float16_dim3_axis2_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_float16_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_float16_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_float16_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_float16_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim1_axis0_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8_dim1_axis0_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_dynamic_output_shape_quant8_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim3_axis2_2,
                           softmax_v1_2::is_ignored_dynamic_output_shape_quant8_dim3_axis2_2,
                           softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_dynamic_output_shape_quant8_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_dynamic_output_shape_quant8_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_dynamic_output_shape_quant8_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_dim4_axis0,
                           softmax_v1_2::get_examples_axis_dim4_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_dim4_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_dim4_axis1,
                           softmax_v1_2::get_examples_axis_dim4_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_dim4_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_dim4_axis2,
                           softmax_v1_2::get_examples_axis_dim4_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_dim4_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_dim4_axis3,
                           softmax_v1_2::get_examples_axis_dim4_axis3());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_dim4_axis3_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_dim3_axis0,
                           softmax_v1_2::get_examples_axis_dim3_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_dim3_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_dim3_axis1,
                           softmax_v1_2::get_examples_axis_dim3_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_dim3_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_dim3_axis2,
                           softmax_v1_2::get_examples_axis_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_dim3_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_dim2_axis0,
                           softmax_v1_2::get_examples_axis_dim2_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_dim2_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_dim2_axis1,
                           softmax_v1_2::get_examples_axis_dim2_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_dim2_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_dim1_axis0,
                           softmax_v1_2::get_examples_axis_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_dim1_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis0,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis1,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis3,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis3());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis0,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis1,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis0,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis1,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_relaxed_dim1_axis0,
                           softmax_v1_2::get_examples_axis_relaxed_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis0,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis1,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis3,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis3());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis3_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis0,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis1,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis0,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis1,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_float16_dim1_axis0,
                           softmax_v1_2::get_examples_axis_float16_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_float16_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_float16_dim1_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim1_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis0,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis1,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis3,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis3());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis3_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis3_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis0,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis1,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis2_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis2_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis0,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis0_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis1,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis1());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis1_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis1_neg());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_quant8_dim1_axis0,
                           softmax_v1_2::get_examples_axis_quant8_dim1_axis0());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim1_axis0());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_quant8_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_quant8_dim1_axis0_neg());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim1_axis0_neg());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis3,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim1_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis3,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis3_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis2_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis1,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis1_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_neg());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim1_axis0,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_neg) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_neg,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim1_axis0_neg,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_neg(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_neg) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_neg();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_neg());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_dim4_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_dim4_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_dim4_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_dim4_axis3_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_dim3_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_dim3_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_dim2_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_dim2_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_relaxed_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_relaxed_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_relaxed_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_relaxed_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_relaxed_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis3_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_float16_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_float16_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_float16_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_float16_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_float16_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_float16_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_float16_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_float16_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_float16_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis3_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis3_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim4_axis3_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis2_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis2_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim3_axis2_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis1_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis1_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim2_axis1_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_quant8_dim1_axis0_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim1_axis0_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_axis_quant8_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_quant8_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_quant8_dim1_axis0_neg_2());
}

TEST_F(ValidationTest, softmax_v1_2_axis_quant8_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_quant8_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_quant8_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_relaxed_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_float16_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_float16_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_float16_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_float16_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis3_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim4_axis3_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis2_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim3_axis2_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis1_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim2_axis1_neg_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim1_axis0_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2,
                           softmax_v1_2::is_ignored_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2,
                           softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2(), true);
}

TEST_F(ValidationTest, softmax_v1_2_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2) {
  const Model model = softmax_v1_2::createTestModel_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_axis_dynamic_output_shape_quant8_dim1_axis0_neg_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, softmax_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized,
                           softmax_v1_2::is_ignored_zero_sized,
                           softmax_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized) {
  const Model model = softmax_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_relaxed,
                           softmax_v1_2::is_ignored_zero_sized_relaxed,
                           softmax_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_relaxed) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_quant8,
                           softmax_v1_2::is_ignored_zero_sized_quant8,
                           softmax_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_quant8) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, softmax_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_float16,
                           softmax_v1_2::is_ignored_zero_sized_float16,
                           softmax_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_float16) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           softmax_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           softmax_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           softmax_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           softmax_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           softmax_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, softmax_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = softmax_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(softmax_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_quant8_nonzero.mod.py.
namespace space_to_batch_quant8_nonzero {
// Generated space_to_batch_quant8_nonzero test
#include "examples/space_to_batch_quant8_nonzero.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_quant8_nonzero.model.cpp"
} // namespace space_to_batch_quant8_nonzero

TEST_F(NeuralnetworksHidlTest, space_to_batch_quant8_nonzero) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_nonzero::createTestModel,
                           space_to_batch_quant8_nonzero::is_ignored,
                           space_to_batch_quant8_nonzero::get_examples());
}

TEST_F(ValidationTest, space_to_batch_quant8_nonzero) {
  const Model model = space_to_batch_quant8_nonzero::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_nonzero::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_quant8_nonzero_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_nonzero::createTestModel_dynamic_output_shape,
                           space_to_batch_quant8_nonzero::is_ignored_dynamic_output_shape,
                           space_to_batch_quant8_nonzero::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_quant8_nonzero_dynamic_output_shape) {
  const Model model = space_to_batch_quant8_nonzero::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_nonzero::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_v1_2.mod.py.
namespace space_to_batch_v1_2 {
// Generated space_to_batch_v1_2 test
#include "examples/space_to_batch_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_v1_2.model.cpp"
} // namespace space_to_batch_v1_2

TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc,
                           space_to_batch_v1_2::is_ignored_nhwc,
                           space_to_batch_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_relaxed,
                           space_to_batch_v1_2::is_ignored_nhwc_relaxed,
                           space_to_batch_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_relaxed) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_float16,
                           space_to_batch_v1_2::is_ignored_nhwc_float16,
                           space_to_batch_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_float16) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_quant8,
                           space_to_batch_v1_2::is_ignored_nhwc_quant8,
                           space_to_batch_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_quant8) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw,
                           space_to_batch_v1_2::is_ignored_nchw,
                           space_to_batch_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_relaxed,
                           space_to_batch_v1_2::is_ignored_nchw_relaxed,
                           space_to_batch_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_relaxed) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_float16,
                           space_to_batch_v1_2::is_ignored_nchw_float16,
                           space_to_batch_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_float16) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_quant8,
                           space_to_batch_v1_2::is_ignored_nchw_quant8,
                           space_to_batch_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_quant8) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_2,
                           space_to_batch_v1_2::is_ignored_nhwc_2,
                           space_to_batch_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_relaxed_2,
                           space_to_batch_v1_2::is_ignored_nhwc_relaxed_2,
                           space_to_batch_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_relaxed_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_float16_2,
                           space_to_batch_v1_2::is_ignored_nhwc_float16_2,
                           space_to_batch_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_float16_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_quant8_2,
                           space_to_batch_v1_2::is_ignored_nhwc_quant8_2,
                           space_to_batch_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_quant8_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_2,
                           space_to_batch_v1_2::is_ignored_nchw_2,
                           space_to_batch_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_relaxed_2,
                           space_to_batch_v1_2::is_ignored_nchw_relaxed_2,
                           space_to_batch_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_relaxed_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_float16_2,
                           space_to_batch_v1_2::is_ignored_nchw_float16_2,
                           space_to_batch_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_float16_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_quant8_2,
                           space_to_batch_v1_2::is_ignored_nchw_quant8_2,
                           space_to_batch_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_quant8_2) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_3,
                           space_to_batch_v1_2::is_ignored_nhwc_3,
                           space_to_batch_v1_2::get_examples_nhwc_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_relaxed_3,
                           space_to_batch_v1_2::is_ignored_nhwc_relaxed_3,
                           space_to_batch_v1_2::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_relaxed_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_float16_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_float16_3,
                           space_to_batch_v1_2::is_ignored_nhwc_float16_3,
                           space_to_batch_v1_2::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_float16_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_quant8_3,
                           space_to_batch_v1_2::is_ignored_nhwc_quant8_3,
                           space_to_batch_v1_2::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_quant8_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_3,
                           space_to_batch_v1_2::is_ignored_nchw_3,
                           space_to_batch_v1_2::get_examples_nchw_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_relaxed_3,
                           space_to_batch_v1_2::is_ignored_nchw_relaxed_3,
                           space_to_batch_v1_2::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_relaxed_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_float16_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_float16_3,
                           space_to_batch_v1_2::is_ignored_nchw_float16_3,
                           space_to_batch_v1_2::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_float16_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_quant8_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_quant8_3,
                           space_to_batch_v1_2::is_ignored_nchw_quant8_3,
                           space_to_batch_v1_2::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_quant8_3) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_float16_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_3) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_4,
                           space_to_batch_v1_2::is_ignored_nhwc_4,
                           space_to_batch_v1_2::get_examples_nhwc_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_relaxed_4,
                           space_to_batch_v1_2::is_ignored_nhwc_relaxed_4,
                           space_to_batch_v1_2::get_examples_nhwc_relaxed_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_relaxed_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_float16_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_float16_4,
                           space_to_batch_v1_2::is_ignored_nhwc_float16_4,
                           space_to_batch_v1_2::get_examples_nhwc_float16_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_float16_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nhwc_quant8_4,
                           space_to_batch_v1_2::is_ignored_nhwc_quant8_4,
                           space_to_batch_v1_2::get_examples_nhwc_quant8_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nhwc_quant8_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_4,
                           space_to_batch_v1_2::is_ignored_nchw_4,
                           space_to_batch_v1_2::get_examples_nchw_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_relaxed_4,
                           space_to_batch_v1_2::is_ignored_nchw_relaxed_4,
                           space_to_batch_v1_2::get_examples_nchw_relaxed_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_relaxed_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_float16_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_float16_4,
                           space_to_batch_v1_2::is_ignored_nchw_float16_4,
                           space_to_batch_v1_2::get_examples_nchw_float16_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_float16_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_batch_v1_2_nchw_quant8_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_nchw_quant8_4,
                           space_to_batch_v1_2::is_ignored_nchw_quant8_4,
                           space_to_batch_v1_2::get_examples_nchw_quant8_4());
}

TEST_F(ValidationTest, space_to_batch_v1_2_nchw_quant8_4) {
  const Model model = space_to_batch_v1_2::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_nchw_quant8_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_float16_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_float16_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_float16_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           space_to_batch_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, space_to_batch_v1_2_dynamic_output_shape_nchw_quant8_4) {
  const Model model = space_to_batch_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(space_to_batch_v1_2::get_examples_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_v1_2.mod.py.
namespace space_to_depth_v1_2 {
// Generated space_to_depth_v1_2 test
#include "examples/space_to_depth_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_v1_2.model.cpp"
} // namespace space_to_depth_v1_2

TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc,
                           space_to_depth_v1_2::is_ignored_nhwc,
                           space_to_depth_v1_2::get_examples_nhwc());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_relaxed,
                           space_to_depth_v1_2::is_ignored_nhwc_relaxed,
                           space_to_depth_v1_2::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_relaxed) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_float16) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_float16,
                           space_to_depth_v1_2::is_ignored_nhwc_float16,
                           space_to_depth_v1_2::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_float16) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_quant8) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_quant8,
                           space_to_depth_v1_2::is_ignored_nhwc_quant8,
                           space_to_depth_v1_2::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_quant8) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw,
                           space_to_depth_v1_2::is_ignored_nchw,
                           space_to_depth_v1_2::get_examples_nchw());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_relaxed,
                           space_to_depth_v1_2::is_ignored_nchw_relaxed,
                           space_to_depth_v1_2::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_relaxed) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_float16) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_float16,
                           space_to_depth_v1_2::is_ignored_nchw_float16,
                           space_to_depth_v1_2::get_examples_nchw_float16());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_float16) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_quant8) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_quant8,
                           space_to_depth_v1_2::is_ignored_nchw_quant8,
                           space_to_depth_v1_2::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_quant8) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_float16,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_float16,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_quant8,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_2,
                           space_to_depth_v1_2::is_ignored_nhwc_2,
                           space_to_depth_v1_2::get_examples_nhwc_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_relaxed_2,
                           space_to_depth_v1_2::is_ignored_nhwc_relaxed_2,
                           space_to_depth_v1_2::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_relaxed_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_float16_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_float16_2,
                           space_to_depth_v1_2::is_ignored_nhwc_float16_2,
                           space_to_depth_v1_2::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_float16_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_quant8_2,
                           space_to_depth_v1_2::is_ignored_nhwc_quant8_2,
                           space_to_depth_v1_2::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_quant8_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_2,
                           space_to_depth_v1_2::is_ignored_nchw_2,
                           space_to_depth_v1_2::get_examples_nchw_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_relaxed_2,
                           space_to_depth_v1_2::is_ignored_nchw_relaxed_2,
                           space_to_depth_v1_2::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_relaxed_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_float16_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_float16_2,
                           space_to_depth_v1_2::is_ignored_nchw_float16_2,
                           space_to_depth_v1_2::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_float16_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_quant8_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_quant8_2,
                           space_to_depth_v1_2::is_ignored_nchw_quant8_2,
                           space_to_depth_v1_2::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_quant8_2) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_float16_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8_2) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_3,
                           space_to_depth_v1_2::is_ignored_nhwc_3,
                           space_to_depth_v1_2::get_examples_nhwc_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_relaxed_3,
                           space_to_depth_v1_2::is_ignored_nhwc_relaxed_3,
                           space_to_depth_v1_2::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_relaxed_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_float16_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_float16_3,
                           space_to_depth_v1_2::is_ignored_nhwc_float16_3,
                           space_to_depth_v1_2::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_float16_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nhwc_quant8_3,
                           space_to_depth_v1_2::is_ignored_nhwc_quant8_3,
                           space_to_depth_v1_2::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nhwc_quant8_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_3,
                           space_to_depth_v1_2::is_ignored_nchw_3,
                           space_to_depth_v1_2::get_examples_nchw_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_relaxed_3,
                           space_to_depth_v1_2::is_ignored_nchw_relaxed_3,
                           space_to_depth_v1_2::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_relaxed_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_float16_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_float16_3,
                           space_to_depth_v1_2::is_ignored_nchw_float16_3,
                           space_to_depth_v1_2::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_float16_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, space_to_depth_v1_2_nchw_quant8_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_nchw_quant8_3,
                           space_to_depth_v1_2::is_ignored_nchw_quant8_3,
                           space_to_depth_v1_2::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, space_to_depth_v1_2_nchw_quant8_3) {
  const Model model = space_to_depth_v1_2::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_float16_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_float16_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_float16_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           space_to_depth_v1_2::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, space_to_depth_v1_2_dynamic_output_shape_nchw_quant8_3) {
  const Model model = space_to_depth_v1_2::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(space_to_depth_v1_2::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
// Generated from: split_float_1.mod.py.
namespace split_float_1 {
// Generated split_float_1 test
#include "examples/split_float_1.example.cpp"
// Generated model constructor
#include "vts_models/split_float_1.model.cpp"
} // namespace split_float_1

TEST_F(NeuralnetworksHidlTest, split_float_1) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel,
                           split_float_1::is_ignored,
                           split_float_1::get_examples());
}

TEST_F(ValidationTest, split_float_1) {
  const Model model = split_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_1_relaxed) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_relaxed,
                           split_float_1::is_ignored_relaxed,
                           split_float_1::get_examples_relaxed());
}

TEST_F(ValidationTest, split_float_1_relaxed) {
  const Model model = split_float_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_1_float16) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_float16,
                           split_float_1::is_ignored_float16,
                           split_float_1::get_examples_float16());
}

TEST_F(ValidationTest, split_float_1_float16) {
  const Model model = split_float_1::createTestModel_float16();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_dynamic_output_shape,
                           split_float_1::is_ignored_dynamic_output_shape,
                           split_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_float_1_dynamic_output_shape) {
  const Model model = split_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_dynamic_output_shape_relaxed,
                           split_float_1::is_ignored_dynamic_output_shape_relaxed,
                           split_float_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_float_1_dynamic_output_shape_relaxed) {
  const Model model = split_float_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_1_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           split_float_1::createTestModel_dynamic_output_shape_float16,
                           split_float_1::is_ignored_dynamic_output_shape_float16,
                           split_float_1::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, split_float_1_dynamic_output_shape_float16) {
  const Model model = split_float_1::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(split_float_1::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: split_float_2.mod.py.
namespace split_float_2 {
// Generated split_float_2 test
#include "examples/split_float_2.example.cpp"
// Generated model constructor
#include "vts_models/split_float_2.model.cpp"
} // namespace split_float_2

TEST_F(NeuralnetworksHidlTest, split_float_2) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel,
                           split_float_2::is_ignored,
                           split_float_2::get_examples());
}

TEST_F(ValidationTest, split_float_2) {
  const Model model = split_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_2_relaxed) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_relaxed,
                           split_float_2::is_ignored_relaxed,
                           split_float_2::get_examples_relaxed());
}

TEST_F(ValidationTest, split_float_2_relaxed) {
  const Model model = split_float_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_2_float16) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_float16,
                           split_float_2::is_ignored_float16,
                           split_float_2::get_examples_float16());
}

TEST_F(ValidationTest, split_float_2_float16) {
  const Model model = split_float_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_dynamic_output_shape,
                           split_float_2::is_ignored_dynamic_output_shape,
                           split_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_float_2_dynamic_output_shape) {
  const Model model = split_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_dynamic_output_shape_relaxed,
                           split_float_2::is_ignored_dynamic_output_shape_relaxed,
                           split_float_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_float_2_dynamic_output_shape_relaxed) {
  const Model model = split_float_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           split_float_2::createTestModel_dynamic_output_shape_float16,
                           split_float_2::is_ignored_dynamic_output_shape_float16,
                           split_float_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, split_float_2_dynamic_output_shape_float16) {
  const Model model = split_float_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(split_float_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: split_float_3.mod.py.
namespace split_float_3 {
// Generated split_float_3 test
#include "examples/split_float_3.example.cpp"
// Generated model constructor
#include "vts_models/split_float_3.model.cpp"
} // namespace split_float_3

TEST_F(NeuralnetworksHidlTest, split_float_3) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel,
                           split_float_3::is_ignored,
                           split_float_3::get_examples());
}

TEST_F(ValidationTest, split_float_3) {
  const Model model = split_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_3_relaxed) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_relaxed,
                           split_float_3::is_ignored_relaxed,
                           split_float_3::get_examples_relaxed());
}

TEST_F(ValidationTest, split_float_3_relaxed) {
  const Model model = split_float_3::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_3_float16) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_float16,
                           split_float_3::is_ignored_float16,
                           split_float_3::get_examples_float16());
}

TEST_F(ValidationTest, split_float_3_float16) {
  const Model model = split_float_3::createTestModel_float16();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_dynamic_output_shape,
                           split_float_3::is_ignored_dynamic_output_shape,
                           split_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_float_3_dynamic_output_shape) {
  const Model model = split_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_3_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_dynamic_output_shape_relaxed,
                           split_float_3::is_ignored_dynamic_output_shape_relaxed,
                           split_float_3::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_float_3_dynamic_output_shape_relaxed) {
  const Model model = split_float_3::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_3_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           split_float_3::createTestModel_dynamic_output_shape_float16,
                           split_float_3::is_ignored_dynamic_output_shape_float16,
                           split_float_3::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, split_float_3_dynamic_output_shape_float16) {
  const Model model = split_float_3::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(split_float_3::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: split_float_4.mod.py.
namespace split_float_4 {
// Generated split_float_4 test
#include "examples/split_float_4.example.cpp"
// Generated model constructor
#include "vts_models/split_float_4.model.cpp"
} // namespace split_float_4

TEST_F(NeuralnetworksHidlTest, split_float_4) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel,
                           split_float_4::is_ignored,
                           split_float_4::get_examples());
}

TEST_F(ValidationTest, split_float_4) {
  const Model model = split_float_4::createTestModel();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_4_relaxed) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_relaxed,
                           split_float_4::is_ignored_relaxed,
                           split_float_4::get_examples_relaxed());
}

TEST_F(ValidationTest, split_float_4_relaxed) {
  const Model model = split_float_4::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_4_float16) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_float16,
                           split_float_4::is_ignored_float16,
                           split_float_4::get_examples_float16());
}

TEST_F(ValidationTest, split_float_4_float16) {
  const Model model = split_float_4::createTestModel_float16();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_dynamic_output_shape,
                           split_float_4::is_ignored_dynamic_output_shape,
                           split_float_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_float_4_dynamic_output_shape) {
  const Model model = split_float_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_4_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_dynamic_output_shape_relaxed,
                           split_float_4::is_ignored_dynamic_output_shape_relaxed,
                           split_float_4::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_float_4_dynamic_output_shape_relaxed) {
  const Model model = split_float_4::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_4_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           split_float_4::createTestModel_dynamic_output_shape_float16,
                           split_float_4::is_ignored_dynamic_output_shape_float16,
                           split_float_4::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, split_float_4_dynamic_output_shape_float16) {
  const Model model = split_float_4::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(split_float_4::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: split_float_5.mod.py.
namespace split_float_5 {
// Generated split_float_5 test
#include "examples/split_float_5.example.cpp"
// Generated model constructor
#include "vts_models/split_float_5.model.cpp"
} // namespace split_float_5

TEST_F(NeuralnetworksHidlTest, split_float_5) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel,
                           split_float_5::is_ignored,
                           split_float_5::get_examples());
}

TEST_F(ValidationTest, split_float_5) {
  const Model model = split_float_5::createTestModel();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_5_relaxed) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_relaxed,
                           split_float_5::is_ignored_relaxed,
                           split_float_5::get_examples_relaxed());
}

TEST_F(ValidationTest, split_float_5_relaxed) {
  const Model model = split_float_5::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_float_5_float16) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_float16,
                           split_float_5::is_ignored_float16,
                           split_float_5::get_examples_float16());
}

TEST_F(ValidationTest, split_float_5_float16) {
  const Model model = split_float_5::createTestModel_float16();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_5_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_dynamic_output_shape,
                           split_float_5::is_ignored_dynamic_output_shape,
                           split_float_5::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_float_5_dynamic_output_shape) {
  const Model model = split_float_5::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_5_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_dynamic_output_shape_relaxed,
                           split_float_5::is_ignored_dynamic_output_shape_relaxed,
                           split_float_5::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_float_5_dynamic_output_shape_relaxed) {
  const Model model = split_float_5::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_float_5_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           split_float_5::createTestModel_dynamic_output_shape_float16,
                           split_float_5::is_ignored_dynamic_output_shape_float16,
                           split_float_5::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, split_float_5_dynamic_output_shape_float16) {
  const Model model = split_float_5::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(split_float_5::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: split_int32_1.mod.py.
namespace split_int32_1 {
// Generated split_int32_1 test
#include "examples/split_int32_1.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_1.model.cpp"
} // namespace split_int32_1

TEST_F(NeuralnetworksHidlTest, split_int32_1) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel,
                           split_int32_1::is_ignored,
                           split_int32_1::get_examples());
}

TEST_F(ValidationTest, split_int32_1) {
  const Model model = split_int32_1::createTestModel();
  const std::vector<Request> requests = createRequests(split_int32_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_int32_1_relaxed) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel_relaxed,
                           split_int32_1::is_ignored_relaxed,
                           split_int32_1::get_examples_relaxed());
}

TEST_F(ValidationTest, split_int32_1_relaxed) {
  const Model model = split_int32_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_1::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel_dynamic_output_shape,
                           split_int32_1::is_ignored_dynamic_output_shape,
                           split_int32_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_int32_1_dynamic_output_shape) {
  const Model model = split_int32_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_int32_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_int32_1::createTestModel_dynamic_output_shape_relaxed,
                           split_int32_1::is_ignored_dynamic_output_shape_relaxed,
                           split_int32_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_int32_1_dynamic_output_shape_relaxed) {
  const Model model = split_int32_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_int32_2.mod.py.
namespace split_int32_2 {
// Generated split_int32_2 test
#include "examples/split_int32_2.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_2.model.cpp"
} // namespace split_int32_2

TEST_F(NeuralnetworksHidlTest, split_int32_2) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel,
                           split_int32_2::is_ignored,
                           split_int32_2::get_examples());
}

TEST_F(ValidationTest, split_int32_2) {
  const Model model = split_int32_2::createTestModel();
  const std::vector<Request> requests = createRequests(split_int32_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_int32_2_relaxed) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel_relaxed,
                           split_int32_2::is_ignored_relaxed,
                           split_int32_2::get_examples_relaxed());
}

TEST_F(ValidationTest, split_int32_2_relaxed) {
  const Model model = split_int32_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_2::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel_dynamic_output_shape,
                           split_int32_2::is_ignored_dynamic_output_shape,
                           split_int32_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_int32_2_dynamic_output_shape) {
  const Model model = split_int32_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_int32_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_int32_2::createTestModel_dynamic_output_shape_relaxed,
                           split_int32_2::is_ignored_dynamic_output_shape_relaxed,
                           split_int32_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_int32_2_dynamic_output_shape_relaxed) {
  const Model model = split_int32_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_int32_3.mod.py.
namespace split_int32_3 {
// Generated split_int32_3 test
#include "examples/split_int32_3.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_3.model.cpp"
} // namespace split_int32_3

TEST_F(NeuralnetworksHidlTest, split_int32_3) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel,
                           split_int32_3::is_ignored,
                           split_int32_3::get_examples());
}

TEST_F(ValidationTest, split_int32_3) {
  const Model model = split_int32_3::createTestModel();
  const std::vector<Request> requests = createRequests(split_int32_3::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_int32_3_relaxed) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel_relaxed,
                           split_int32_3::is_ignored_relaxed,
                           split_int32_3::get_examples_relaxed());
}

TEST_F(ValidationTest, split_int32_3_relaxed) {
  const Model model = split_int32_3::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_3::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel_dynamic_output_shape,
                           split_int32_3::is_ignored_dynamic_output_shape,
                           split_int32_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_int32_3_dynamic_output_shape) {
  const Model model = split_int32_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_int32_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_3_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_int32_3::createTestModel_dynamic_output_shape_relaxed,
                           split_int32_3::is_ignored_dynamic_output_shape_relaxed,
                           split_int32_3::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_int32_3_dynamic_output_shape_relaxed) {
  const Model model = split_int32_3::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_3::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_int32_4.mod.py.
namespace split_int32_4 {
// Generated split_int32_4 test
#include "examples/split_int32_4.example.cpp"
// Generated model constructor
#include "vts_models/split_int32_4.model.cpp"
} // namespace split_int32_4

TEST_F(NeuralnetworksHidlTest, split_int32_4) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel,
                           split_int32_4::is_ignored,
                           split_int32_4::get_examples());
}

TEST_F(ValidationTest, split_int32_4) {
  const Model model = split_int32_4::createTestModel();
  const std::vector<Request> requests = createRequests(split_int32_4::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_int32_4_relaxed) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel_relaxed,
                           split_int32_4::is_ignored_relaxed,
                           split_int32_4::get_examples_relaxed());
}

TEST_F(ValidationTest, split_int32_4_relaxed) {
  const Model model = split_int32_4::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_4::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel_dynamic_output_shape,
                           split_int32_4::is_ignored_dynamic_output_shape,
                           split_int32_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_int32_4_dynamic_output_shape) {
  const Model model = split_int32_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_int32_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_int32_4_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_int32_4::createTestModel_dynamic_output_shape_relaxed,
                           split_int32_4::is_ignored_dynamic_output_shape_relaxed,
                           split_int32_4::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_int32_4_dynamic_output_shape_relaxed) {
  const Model model = split_int32_4::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_int32_4::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_quant8_1.mod.py.
namespace split_quant8_1 {
// Generated split_quant8_1 test
#include "examples/split_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_1.model.cpp"
} // namespace split_quant8_1

TEST_F(NeuralnetworksHidlTest, split_quant8_1) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel,
                           split_quant8_1::is_ignored,
                           split_quant8_1::get_examples());
}

TEST_F(ValidationTest, split_quant8_1) {
  const Model model = split_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(split_quant8_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_quant8_1_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel_relaxed,
                           split_quant8_1::is_ignored_relaxed,
                           split_quant8_1::get_examples_relaxed());
}

TEST_F(ValidationTest, split_quant8_1_relaxed) {
  const Model model = split_quant8_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_quant8_1::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel_dynamic_output_shape,
                           split_quant8_1::is_ignored_dynamic_output_shape,
                           split_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_quant8_1_dynamic_output_shape) {
  const Model model = split_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_1::createTestModel_dynamic_output_shape_relaxed,
                           split_quant8_1::is_ignored_dynamic_output_shape_relaxed,
                           split_quant8_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_quant8_1_dynamic_output_shape_relaxed) {
  const Model model = split_quant8_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_quant8_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_quant8_2.mod.py.
namespace split_quant8_2 {
// Generated split_quant8_2 test
#include "examples/split_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_2.model.cpp"
} // namespace split_quant8_2

TEST_F(NeuralnetworksHidlTest, split_quant8_2) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel,
                           split_quant8_2::is_ignored,
                           split_quant8_2::get_examples());
}

TEST_F(ValidationTest, split_quant8_2) {
  const Model model = split_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(split_quant8_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, split_quant8_2_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel_relaxed,
                           split_quant8_2::is_ignored_relaxed,
                           split_quant8_2::get_examples_relaxed());
}

TEST_F(ValidationTest, split_quant8_2_relaxed) {
  const Model model = split_quant8_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(split_quant8_2::get_examples_relaxed());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel_dynamic_output_shape,
                           split_quant8_2::is_ignored_dynamic_output_shape,
                           split_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_quant8_2_dynamic_output_shape) {
  const Model model = split_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           split_quant8_2::createTestModel_dynamic_output_shape_relaxed,
                           split_quant8_2::is_ignored_dynamic_output_shape_relaxed,
                           split_quant8_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, split_quant8_2_dynamic_output_shape_relaxed) {
  const Model model = split_quant8_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(split_quant8_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
// Generated from: split_quant8_3.mod.py.
namespace split_quant8_3 {
// Generated split_quant8_3 test
#include "examples/split_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_3.model.cpp"
} // namespace split_quant8_3

TEST_F(NeuralnetworksHidlTest, split_quant8_3) {
  generated_tests::Execute(device,
                           split_quant8_3::createTestModel,
                           split_quant8_3::is_ignored,
                           split_quant8_3::get_examples());
}

TEST_F(ValidationTest, split_quant8_3) {
  const Model model = split_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(split_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_quant8_3::createTestModel_dynamic_output_shape,
                           split_quant8_3::is_ignored_dynamic_output_shape,
                           split_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_quant8_3_dynamic_output_shape) {
  const Model model = split_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: split_quant8_4.mod.py.
namespace split_quant8_4 {
// Generated split_quant8_4 test
#include "examples/split_quant8_4.example.cpp"
// Generated model constructor
#include "vts_models/split_quant8_4.model.cpp"
} // namespace split_quant8_4

TEST_F(NeuralnetworksHidlTest, split_quant8_4) {
  generated_tests::Execute(device,
                           split_quant8_4::createTestModel,
                           split_quant8_4::is_ignored,
                           split_quant8_4::get_examples());
}

TEST_F(ValidationTest, split_quant8_4) {
  const Model model = split_quant8_4::createTestModel();
  const std::vector<Request> requests = createRequests(split_quant8_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, split_quant8_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           split_quant8_4::createTestModel_dynamic_output_shape,
                           split_quant8_4::is_ignored_dynamic_output_shape,
                           split_quant8_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, split_quant8_4_dynamic_output_shape) {
  const Model model = split_quant8_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(split_quant8_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sqrt.mod.py.
namespace sqrt {
// Generated sqrt test
#include "examples/sqrt.example.cpp"
// Generated model constructor
#include "vts_models/sqrt.model.cpp"
} // namespace sqrt

TEST_F(NeuralnetworksHidlTest, sqrt) {
  generated_tests::Execute(device,
                           sqrt::createTestModel,
                           sqrt::is_ignored,
                           sqrt::get_examples());
}

TEST_F(ValidationTest, sqrt) {
  const Model model = sqrt::createTestModel();
  const std::vector<Request> requests = createRequests(sqrt::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sqrt_relaxed) {
  generated_tests::Execute(device,
                           sqrt::createTestModel_relaxed,
                           sqrt::is_ignored_relaxed,
                           sqrt::get_examples_relaxed());
}

TEST_F(ValidationTest, sqrt_relaxed) {
  const Model model = sqrt::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(sqrt::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sqrt_float16) {
  generated_tests::Execute(device,
                           sqrt::createTestModel_float16,
                           sqrt::is_ignored_float16,
                           sqrt::get_examples_float16());
}

TEST_F(ValidationTest, sqrt_float16) {
  const Model model = sqrt::createTestModel_float16();
  const std::vector<Request> requests = createRequests(sqrt::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sqrt_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sqrt::createTestModel_dynamic_output_shape,
                           sqrt::is_ignored_dynamic_output_shape,
                           sqrt::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sqrt_dynamic_output_shape) {
  const Model model = sqrt::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sqrt::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sqrt_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           sqrt::createTestModel_dynamic_output_shape_relaxed,
                           sqrt::is_ignored_dynamic_output_shape_relaxed,
                           sqrt::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, sqrt_dynamic_output_shape_relaxed) {
  const Model model = sqrt::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(sqrt::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sqrt_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           sqrt::createTestModel_dynamic_output_shape_float16,
                           sqrt::is_ignored_dynamic_output_shape_float16,
                           sqrt::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, sqrt_dynamic_output_shape_float16) {
  const Model model = sqrt::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(sqrt::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze_float16.mod.py.
namespace squeeze_float16 {
// Generated squeeze_float16 test
#include "examples/squeeze_float16.example.cpp"
// Generated model constructor
#include "vts_models/squeeze_float16.model.cpp"
} // namespace squeeze_float16

TEST_F(NeuralnetworksHidlTest, squeeze_float16) {
  generated_tests::Execute(device,
                           squeeze_float16::createTestModel,
                           squeeze_float16::is_ignored,
                           squeeze_float16::get_examples());
}

TEST_F(ValidationTest, squeeze_float16) {
  const Model model = squeeze_float16::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze_float16::createTestModel_dynamic_output_shape,
                           squeeze_float16::is_ignored_dynamic_output_shape,
                           squeeze_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_float16_dynamic_output_shape) {
  const Model model = squeeze_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float16.mod.py.
namespace strided_slice_float16 {
// Generated strided_slice_float16 test
#include "examples/strided_slice_float16.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float16.model.cpp"
} // namespace strided_slice_float16

TEST_F(NeuralnetworksHidlTest, strided_slice_float16) {
  generated_tests::Execute(device,
                           strided_slice_float16::createTestModel,
                           strided_slice_float16::is_ignored,
                           strided_slice_float16::get_examples());
}

TEST_F(ValidationTest, strided_slice_float16) {
  const Model model = strided_slice_float16::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float16::createTestModel_dynamic_output_shape,
                           strided_slice_float16::is_ignored_dynamic_output_shape,
                           strided_slice_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float16_dynamic_output_shape) {
  const Model model = strided_slice_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_quantized_different_scales.mod.py.
namespace sub_quantized_different_scales {
// Generated sub_quantized_different_scales test
#include "examples/sub_quantized_different_scales.example.cpp"
// Generated model constructor
#include "vts_models/sub_quantized_different_scales.model.cpp"
} // namespace sub_quantized_different_scales

TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel,
                           sub_quantized_different_scales::is_ignored,
                           sub_quantized_different_scales::get_examples());
}

TEST_F(ValidationTest, sub_quantized_different_scales) {
  const Model model = sub_quantized_different_scales::createTestModel();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_2) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_2,
                           sub_quantized_different_scales::is_ignored_2,
                           sub_quantized_different_scales::get_examples_2());
}

TEST_F(ValidationTest, sub_quantized_different_scales_2) {
  const Model model = sub_quantized_different_scales::createTestModel_2();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_2,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_2,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_2) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_3) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_3,
                           sub_quantized_different_scales::is_ignored_3,
                           sub_quantized_different_scales::get_examples_3());
}

TEST_F(ValidationTest, sub_quantized_different_scales_3) {
  const Model model = sub_quantized_different_scales::createTestModel_3();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_3,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_3,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_3) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_4) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_4,
                           sub_quantized_different_scales::is_ignored_4,
                           sub_quantized_different_scales::get_examples_4());
}

TEST_F(ValidationTest, sub_quantized_different_scales_4) {
  const Model model = sub_quantized_different_scales::createTestModel_4();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_4,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_4,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_4) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_5) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_5,
                           sub_quantized_different_scales::is_ignored_5,
                           sub_quantized_different_scales::get_examples_5());
}

TEST_F(ValidationTest, sub_quantized_different_scales_5) {
  const Model model = sub_quantized_different_scales::createTestModel_5();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_5) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_5,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_5,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_5(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_5) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_6) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_6,
                           sub_quantized_different_scales::is_ignored_6,
                           sub_quantized_different_scales::get_examples_6());
}

TEST_F(ValidationTest, sub_quantized_different_scales_6) {
  const Model model = sub_quantized_different_scales::createTestModel_6();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_6) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_6,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_6,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_6(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_6) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_7) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_7,
                           sub_quantized_different_scales::is_ignored_7,
                           sub_quantized_different_scales::get_examples_7());
}

TEST_F(ValidationTest, sub_quantized_different_scales_7) {
  const Model model = sub_quantized_different_scales::createTestModel_7();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_7());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_7) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_7,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_7,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_7(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_7) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_7();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_7());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_8) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_8,
                           sub_quantized_different_scales::is_ignored_8,
                           sub_quantized_different_scales::get_examples_8());
}

TEST_F(ValidationTest, sub_quantized_different_scales_8) {
  const Model model = sub_quantized_different_scales::createTestModel_8();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_8) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_8,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_8,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_8(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_8) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_8();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_9) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_9,
                           sub_quantized_different_scales::is_ignored_9,
                           sub_quantized_different_scales::get_examples_9());
}

TEST_F(ValidationTest, sub_quantized_different_scales_9) {
  const Model model = sub_quantized_different_scales::createTestModel_9();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_9());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_9) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_9,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_9,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_9(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_9) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_9();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_9());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_10) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_10,
                           sub_quantized_different_scales::is_ignored_10,
                           sub_quantized_different_scales::get_examples_10());
}

TEST_F(ValidationTest, sub_quantized_different_scales_10) {
  const Model model = sub_quantized_different_scales::createTestModel_10();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_10());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_10) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_10,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_10,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_10(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_10) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_10();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_10());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_11) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_11,
                           sub_quantized_different_scales::is_ignored_11,
                           sub_quantized_different_scales::get_examples_11());
}

TEST_F(ValidationTest, sub_quantized_different_scales_11) {
  const Model model = sub_quantized_different_scales::createTestModel_11();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_11());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_11) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_11,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_11,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_11(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_11) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_11();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_11());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_12) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_12,
                           sub_quantized_different_scales::is_ignored_12,
                           sub_quantized_different_scales::get_examples_12());
}

TEST_F(ValidationTest, sub_quantized_different_scales_12) {
  const Model model = sub_quantized_different_scales::createTestModel_12();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_12());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_12) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_12,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_12,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_12(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_12) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_12();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_12());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_13) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_13,
                           sub_quantized_different_scales::is_ignored_13,
                           sub_quantized_different_scales::get_examples_13());
}

TEST_F(ValidationTest, sub_quantized_different_scales_13) {
  const Model model = sub_quantized_different_scales::createTestModel_13();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_13());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_13) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_13,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_13,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_13(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_13) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_13();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_13());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_14) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_14,
                           sub_quantized_different_scales::is_ignored_14,
                           sub_quantized_different_scales::get_examples_14());
}

TEST_F(ValidationTest, sub_quantized_different_scales_14) {
  const Model model = sub_quantized_different_scales::createTestModel_14();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_14());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_14) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_14,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_14,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_14(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_14) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_14();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_14());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_15) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_15,
                           sub_quantized_different_scales::is_ignored_15,
                           sub_quantized_different_scales::get_examples_15());
}

TEST_F(ValidationTest, sub_quantized_different_scales_15) {
  const Model model = sub_quantized_different_scales::createTestModel_15();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_15());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_15) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_15,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_15,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_15(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_15) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_15();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_15());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_16) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_16,
                           sub_quantized_different_scales::is_ignored_16,
                           sub_quantized_different_scales::get_examples_16());
}

TEST_F(ValidationTest, sub_quantized_different_scales_16) {
  const Model model = sub_quantized_different_scales::createTestModel_16();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_16) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_16,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_16,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_16(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_16) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_16();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_17) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_17,
                           sub_quantized_different_scales::is_ignored_17,
                           sub_quantized_different_scales::get_examples_17());
}

TEST_F(ValidationTest, sub_quantized_different_scales_17) {
  const Model model = sub_quantized_different_scales::createTestModel_17();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_17());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_17) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_17,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_17,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_17(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_17) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_17();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_17());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_18) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_18,
                           sub_quantized_different_scales::is_ignored_18,
                           sub_quantized_different_scales::get_examples_18());
}

TEST_F(ValidationTest, sub_quantized_different_scales_18) {
  const Model model = sub_quantized_different_scales::createTestModel_18();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_18());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_18) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_18,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_18,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_18(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_18) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_18();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_18());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_19) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_19,
                           sub_quantized_different_scales::is_ignored_19,
                           sub_quantized_different_scales::get_examples_19());
}

TEST_F(ValidationTest, sub_quantized_different_scales_19) {
  const Model model = sub_quantized_different_scales::createTestModel_19();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_19());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_19) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_19,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_19,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_19(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_19) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_19();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_19());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_20) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_20,
                           sub_quantized_different_scales::is_ignored_20,
                           sub_quantized_different_scales::get_examples_20());
}

TEST_F(ValidationTest, sub_quantized_different_scales_20) {
  const Model model = sub_quantized_different_scales::createTestModel_20();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_20());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_20) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_20,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_20,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_20(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_20) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_20();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_20());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_21) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_21,
                           sub_quantized_different_scales::is_ignored_21,
                           sub_quantized_different_scales::get_examples_21());
}

TEST_F(ValidationTest, sub_quantized_different_scales_21) {
  const Model model = sub_quantized_different_scales::createTestModel_21();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_21());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_21) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_21,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_21,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_21(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_21) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_21();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_21());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_22) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_22,
                           sub_quantized_different_scales::is_ignored_22,
                           sub_quantized_different_scales::get_examples_22());
}

TEST_F(ValidationTest, sub_quantized_different_scales_22) {
  const Model model = sub_quantized_different_scales::createTestModel_22();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_22());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_22) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_22,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_22,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_22(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_22) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_22();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_22());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_23) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_23,
                           sub_quantized_different_scales::is_ignored_23,
                           sub_quantized_different_scales::get_examples_23());
}

TEST_F(ValidationTest, sub_quantized_different_scales_23) {
  const Model model = sub_quantized_different_scales::createTestModel_23();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_23());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_23) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_23,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_23,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_23(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_23) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_23();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_23());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_24) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_24,
                           sub_quantized_different_scales::is_ignored_24,
                           sub_quantized_different_scales::get_examples_24());
}

TEST_F(ValidationTest, sub_quantized_different_scales_24) {
  const Model model = sub_quantized_different_scales::createTestModel_24();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_24());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_24) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_24,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_24,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_24(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_24) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_24();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_24());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_25) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_25,
                           sub_quantized_different_scales::is_ignored_25,
                           sub_quantized_different_scales::get_examples_25());
}

TEST_F(ValidationTest, sub_quantized_different_scales_25) {
  const Model model = sub_quantized_different_scales::createTestModel_25();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_25());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_25) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_25,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_25,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_25(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_25) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_25();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_25());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_26) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_26,
                           sub_quantized_different_scales::is_ignored_26,
                           sub_quantized_different_scales::get_examples_26());
}

TEST_F(ValidationTest, sub_quantized_different_scales_26) {
  const Model model = sub_quantized_different_scales::createTestModel_26();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_26());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_26) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_26,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_26,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_26(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_26) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_26();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_26());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_27) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_27,
                           sub_quantized_different_scales::is_ignored_27,
                           sub_quantized_different_scales::get_examples_27());
}

TEST_F(ValidationTest, sub_quantized_different_scales_27) {
  const Model model = sub_quantized_different_scales::createTestModel_27();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_27());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_27) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_27,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_27,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_27(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_27) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_27();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_27());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_28) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_28,
                           sub_quantized_different_scales::is_ignored_28,
                           sub_quantized_different_scales::get_examples_28());
}

TEST_F(ValidationTest, sub_quantized_different_scales_28) {
  const Model model = sub_quantized_different_scales::createTestModel_28();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_28());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_28) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_28,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_28,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_28(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_28) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_28();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_28());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_29) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_29,
                           sub_quantized_different_scales::is_ignored_29,
                           sub_quantized_different_scales::get_examples_29());
}

TEST_F(ValidationTest, sub_quantized_different_scales_29) {
  const Model model = sub_quantized_different_scales::createTestModel_29();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_29());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_29) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_29,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_29,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_29(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_29) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_29();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_29());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_30) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_30,
                           sub_quantized_different_scales::is_ignored_30,
                           sub_quantized_different_scales::get_examples_30());
}

TEST_F(ValidationTest, sub_quantized_different_scales_30) {
  const Model model = sub_quantized_different_scales::createTestModel_30();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_30());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_30) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_30,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_30,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_30(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_30) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_30();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_30());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_31) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_31,
                           sub_quantized_different_scales::is_ignored_31,
                           sub_quantized_different_scales::get_examples_31());
}

TEST_F(ValidationTest, sub_quantized_different_scales_31) {
  const Model model = sub_quantized_different_scales::createTestModel_31();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_31());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_31) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_31,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_31,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_31(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_31) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_31();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_31());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_32) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_32,
                           sub_quantized_different_scales::is_ignored_32,
                           sub_quantized_different_scales::get_examples_32());
}

TEST_F(ValidationTest, sub_quantized_different_scales_32) {
  const Model model = sub_quantized_different_scales::createTestModel_32();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_32) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_32,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_32,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_32(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_32) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_32();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_32());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_33) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_33,
                           sub_quantized_different_scales::is_ignored_33,
                           sub_quantized_different_scales::get_examples_33());
}

TEST_F(ValidationTest, sub_quantized_different_scales_33) {
  const Model model = sub_quantized_different_scales::createTestModel_33();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_33());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_33) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_33,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_33,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_33(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_33) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_33();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_33());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_34) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_34,
                           sub_quantized_different_scales::is_ignored_34,
                           sub_quantized_different_scales::get_examples_34());
}

TEST_F(ValidationTest, sub_quantized_different_scales_34) {
  const Model model = sub_quantized_different_scales::createTestModel_34();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_34());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_34) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_34,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_34,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_34(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_34) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_34();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_34());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_35) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_35,
                           sub_quantized_different_scales::is_ignored_35,
                           sub_quantized_different_scales::get_examples_35());
}

TEST_F(ValidationTest, sub_quantized_different_scales_35) {
  const Model model = sub_quantized_different_scales::createTestModel_35();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_35());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_35) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_35,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_35,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_35(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_35) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_35();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_35());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_36) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_36,
                           sub_quantized_different_scales::is_ignored_36,
                           sub_quantized_different_scales::get_examples_36());
}

TEST_F(ValidationTest, sub_quantized_different_scales_36) {
  const Model model = sub_quantized_different_scales::createTestModel_36();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_36());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_36) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_36,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_36,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_36(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_36) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_36();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_36());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_37) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_37,
                           sub_quantized_different_scales::is_ignored_37,
                           sub_quantized_different_scales::get_examples_37());
}

TEST_F(ValidationTest, sub_quantized_different_scales_37) {
  const Model model = sub_quantized_different_scales::createTestModel_37();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_37());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_37) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_37,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_37,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_37(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_37) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_37();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_37());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_38) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_38,
                           sub_quantized_different_scales::is_ignored_38,
                           sub_quantized_different_scales::get_examples_38());
}

TEST_F(ValidationTest, sub_quantized_different_scales_38) {
  const Model model = sub_quantized_different_scales::createTestModel_38();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_38());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_38) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_38,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_38,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_38(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_38) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_38();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_38());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_39) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_39,
                           sub_quantized_different_scales::is_ignored_39,
                           sub_quantized_different_scales::get_examples_39());
}

TEST_F(ValidationTest, sub_quantized_different_scales_39) {
  const Model model = sub_quantized_different_scales::createTestModel_39();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_39());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_39) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_39,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_39,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_39(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_39) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_39();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_39());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_40) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_40,
                           sub_quantized_different_scales::is_ignored_40,
                           sub_quantized_different_scales::get_examples_40());
}

TEST_F(ValidationTest, sub_quantized_different_scales_40) {
  const Model model = sub_quantized_different_scales::createTestModel_40();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_40());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_40) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_40,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_40,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_40(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_40) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_40();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_40());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_41) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_41,
                           sub_quantized_different_scales::is_ignored_41,
                           sub_quantized_different_scales::get_examples_41());
}

TEST_F(ValidationTest, sub_quantized_different_scales_41) {
  const Model model = sub_quantized_different_scales::createTestModel_41();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_41());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_41) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_41,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_41,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_41(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_41) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_41();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_41());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_42) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_42,
                           sub_quantized_different_scales::is_ignored_42,
                           sub_quantized_different_scales::get_examples_42());
}

TEST_F(ValidationTest, sub_quantized_different_scales_42) {
  const Model model = sub_quantized_different_scales::createTestModel_42();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_42());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_42) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_42,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_42,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_42(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_42) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_42();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_42());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_43) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_43,
                           sub_quantized_different_scales::is_ignored_43,
                           sub_quantized_different_scales::get_examples_43());
}

TEST_F(ValidationTest, sub_quantized_different_scales_43) {
  const Model model = sub_quantized_different_scales::createTestModel_43();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_43());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_43) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_43,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_43,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_43(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_43) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_43();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_43());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_44) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_44,
                           sub_quantized_different_scales::is_ignored_44,
                           sub_quantized_different_scales::get_examples_44());
}

TEST_F(ValidationTest, sub_quantized_different_scales_44) {
  const Model model = sub_quantized_different_scales::createTestModel_44();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_44());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_44) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_44,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_44,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_44(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_44) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_44();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_44());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_45) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_45,
                           sub_quantized_different_scales::is_ignored_45,
                           sub_quantized_different_scales::get_examples_45());
}

TEST_F(ValidationTest, sub_quantized_different_scales_45) {
  const Model model = sub_quantized_different_scales::createTestModel_45();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_45());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_45) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_45,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_45,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_45(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_45) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_45();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_45());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_46) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_46,
                           sub_quantized_different_scales::is_ignored_46,
                           sub_quantized_different_scales::get_examples_46());
}

TEST_F(ValidationTest, sub_quantized_different_scales_46) {
  const Model model = sub_quantized_different_scales::createTestModel_46();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_46());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_46) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_46,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_46,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_46(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_46) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_46();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_46());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_47) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_47,
                           sub_quantized_different_scales::is_ignored_47,
                           sub_quantized_different_scales::get_examples_47());
}

TEST_F(ValidationTest, sub_quantized_different_scales_47) {
  const Model model = sub_quantized_different_scales::createTestModel_47();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_47());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_47) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_47,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_47,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_47(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_47) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_47();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_47());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_48) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_48,
                           sub_quantized_different_scales::is_ignored_48,
                           sub_quantized_different_scales::get_examples_48());
}

TEST_F(ValidationTest, sub_quantized_different_scales_48) {
  const Model model = sub_quantized_different_scales::createTestModel_48();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_48());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_48) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_48,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_48,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_48(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_48) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_48();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_48());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_49) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_49,
                           sub_quantized_different_scales::is_ignored_49,
                           sub_quantized_different_scales::get_examples_49());
}

TEST_F(ValidationTest, sub_quantized_different_scales_49) {
  const Model model = sub_quantized_different_scales::createTestModel_49();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_49());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_49) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_49,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_49,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_49(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_49) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_49();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_49());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_50) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_50,
                           sub_quantized_different_scales::is_ignored_50,
                           sub_quantized_different_scales::get_examples_50());
}

TEST_F(ValidationTest, sub_quantized_different_scales_50) {
  const Model model = sub_quantized_different_scales::createTestModel_50();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_50());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_50) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_50,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_50,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_50(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_50) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_50();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_50());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_51) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_51,
                           sub_quantized_different_scales::is_ignored_51,
                           sub_quantized_different_scales::get_examples_51());
}

TEST_F(ValidationTest, sub_quantized_different_scales_51) {
  const Model model = sub_quantized_different_scales::createTestModel_51();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_51());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_51) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_51,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_51,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_51(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_51) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_51();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_51());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_52) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_52,
                           sub_quantized_different_scales::is_ignored_52,
                           sub_quantized_different_scales::get_examples_52());
}

TEST_F(ValidationTest, sub_quantized_different_scales_52) {
  const Model model = sub_quantized_different_scales::createTestModel_52();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_52());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_52) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_52,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_52,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_52(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_52) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_52();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_52());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_53) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_53,
                           sub_quantized_different_scales::is_ignored_53,
                           sub_quantized_different_scales::get_examples_53());
}

TEST_F(ValidationTest, sub_quantized_different_scales_53) {
  const Model model = sub_quantized_different_scales::createTestModel_53();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_53());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_53) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_53,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_53,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_53(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_53) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_53();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_53());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_54) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_54,
                           sub_quantized_different_scales::is_ignored_54,
                           sub_quantized_different_scales::get_examples_54());
}

TEST_F(ValidationTest, sub_quantized_different_scales_54) {
  const Model model = sub_quantized_different_scales::createTestModel_54();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_54());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_54) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_54,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_54,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_54(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_54) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_54();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_54());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_55) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_55,
                           sub_quantized_different_scales::is_ignored_55,
                           sub_quantized_different_scales::get_examples_55());
}

TEST_F(ValidationTest, sub_quantized_different_scales_55) {
  const Model model = sub_quantized_different_scales::createTestModel_55();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_55());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_55) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_55,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_55,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_55(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_55) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_55();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_55());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_56) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_56,
                           sub_quantized_different_scales::is_ignored_56,
                           sub_quantized_different_scales::get_examples_56());
}

TEST_F(ValidationTest, sub_quantized_different_scales_56) {
  const Model model = sub_quantized_different_scales::createTestModel_56();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_56());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_56) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_56,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_56,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_56(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_56) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_56();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_56());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_57) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_57,
                           sub_quantized_different_scales::is_ignored_57,
                           sub_quantized_different_scales::get_examples_57());
}

TEST_F(ValidationTest, sub_quantized_different_scales_57) {
  const Model model = sub_quantized_different_scales::createTestModel_57();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_57());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_57) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_57,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_57,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_57(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_57) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_57();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_57());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_58) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_58,
                           sub_quantized_different_scales::is_ignored_58,
                           sub_quantized_different_scales::get_examples_58());
}

TEST_F(ValidationTest, sub_quantized_different_scales_58) {
  const Model model = sub_quantized_different_scales::createTestModel_58();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_58());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_58) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_58,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_58,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_58(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_58) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_58();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_58());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_59) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_59,
                           sub_quantized_different_scales::is_ignored_59,
                           sub_quantized_different_scales::get_examples_59());
}

TEST_F(ValidationTest, sub_quantized_different_scales_59) {
  const Model model = sub_quantized_different_scales::createTestModel_59();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_59());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_59) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_59,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_59,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_59(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_59) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_59();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_59());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_60) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_60,
                           sub_quantized_different_scales::is_ignored_60,
                           sub_quantized_different_scales::get_examples_60());
}

TEST_F(ValidationTest, sub_quantized_different_scales_60) {
  const Model model = sub_quantized_different_scales::createTestModel_60();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_60());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_60) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_60,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_60,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_60(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_60) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_60();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_60());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_61) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_61,
                           sub_quantized_different_scales::is_ignored_61,
                           sub_quantized_different_scales::get_examples_61());
}

TEST_F(ValidationTest, sub_quantized_different_scales_61) {
  const Model model = sub_quantized_different_scales::createTestModel_61();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_61());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_61) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_61,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_61,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_61(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_61) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_61();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_61());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_62) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_62,
                           sub_quantized_different_scales::is_ignored_62,
                           sub_quantized_different_scales::get_examples_62());
}

TEST_F(ValidationTest, sub_quantized_different_scales_62) {
  const Model model = sub_quantized_different_scales::createTestModel_62();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_62());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_62) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_62,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_62,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_62(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_62) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_62();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_62());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_63) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_63,
                           sub_quantized_different_scales::is_ignored_63,
                           sub_quantized_different_scales::get_examples_63());
}

TEST_F(ValidationTest, sub_quantized_different_scales_63) {
  const Model model = sub_quantized_different_scales::createTestModel_63();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_63());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_63) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_63,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_63,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_63(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_63) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_63();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_63());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_quantized_different_scales_64) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_64,
                           sub_quantized_different_scales::is_ignored_64,
                           sub_quantized_different_scales::get_examples_64());
}

TEST_F(ValidationTest, sub_quantized_different_scales_64) {
  const Model model = sub_quantized_different_scales::createTestModel_64();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_64());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_quantized_different_scales_dynamic_output_shape_64) {
  generated_tests::Execute(device,
                           sub_quantized_different_scales::createTestModel_dynamic_output_shape_64,
                           sub_quantized_different_scales::is_ignored_dynamic_output_shape_64,
                           sub_quantized_different_scales::get_examples_dynamic_output_shape_64(), true);
}

TEST_F(ValidationTest, sub_quantized_different_scales_dynamic_output_shape_64) {
  const Model model = sub_quantized_different_scales::createTestModel_dynamic_output_shape_64();
  const std::vector<Request> requests = createRequests(sub_quantized_different_scales::get_examples_dynamic_output_shape_64());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_v1_2.mod.py.
namespace sub_v1_2 {
// Generated sub_v1_2 test
#include "examples/sub_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/sub_v1_2.model.cpp"
} // namespace sub_v1_2

TEST_F(NeuralnetworksHidlTest, sub_v1_2_none) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_none,
                           sub_v1_2::is_ignored_none,
                           sub_v1_2::get_examples_none());
}

TEST_F(ValidationTest, sub_v1_2_none) {
  const Model model = sub_v1_2::createTestModel_none();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_relu) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_relu,
                           sub_v1_2::is_ignored_relu,
                           sub_v1_2::get_examples_relu());
}

TEST_F(ValidationTest, sub_v1_2_relu) {
  const Model model = sub_v1_2::createTestModel_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_relu1,
                           sub_v1_2::is_ignored_relu1,
                           sub_v1_2::get_examples_relu1());
}

TEST_F(ValidationTest, sub_v1_2_relu1) {
  const Model model = sub_v1_2::createTestModel_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_relu6,
                           sub_v1_2::is_ignored_relu6,
                           sub_v1_2::get_examples_relu6());
}

TEST_F(ValidationTest, sub_v1_2_relu6) {
  const Model model = sub_v1_2::createTestModel_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_float16_none) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_float16_none,
                           sub_v1_2::is_ignored_float16_none,
                           sub_v1_2::get_examples_float16_none());
}

TEST_F(ValidationTest, sub_v1_2_float16_none) {
  const Model model = sub_v1_2::createTestModel_float16_none();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_float16_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_float16_relu) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_float16_relu,
                           sub_v1_2::is_ignored_float16_relu,
                           sub_v1_2::get_examples_float16_relu());
}

TEST_F(ValidationTest, sub_v1_2_float16_relu) {
  const Model model = sub_v1_2::createTestModel_float16_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_float16_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_float16_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_float16_relu1,
                           sub_v1_2::is_ignored_float16_relu1,
                           sub_v1_2::get_examples_float16_relu1());
}

TEST_F(ValidationTest, sub_v1_2_float16_relu1) {
  const Model model = sub_v1_2::createTestModel_float16_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_float16_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_float16_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_float16_relu6,
                           sub_v1_2::is_ignored_float16_relu6,
                           sub_v1_2::get_examples_float16_relu6());
}

TEST_F(ValidationTest, sub_v1_2_float16_relu6) {
  const Model model = sub_v1_2::createTestModel_float16_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_float16_relu6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_none) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_none,
                           sub_v1_2::is_ignored_dynamic_output_shape_none,
                           sub_v1_2::get_examples_dynamic_output_shape_none(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_none) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_none();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_relu) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_relu,
                           sub_v1_2::is_ignored_dynamic_output_shape_relu,
                           sub_v1_2::get_examples_dynamic_output_shape_relu(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_relu) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_relu1,
                           sub_v1_2::is_ignored_dynamic_output_shape_relu1,
                           sub_v1_2::get_examples_dynamic_output_shape_relu1(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_relu1) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_relu6,
                           sub_v1_2::is_ignored_dynamic_output_shape_relu6,
                           sub_v1_2::get_examples_dynamic_output_shape_relu6(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_relu6) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_float16_none) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_float16_none,
                           sub_v1_2::is_ignored_dynamic_output_shape_float16_none,
                           sub_v1_2::get_examples_dynamic_output_shape_float16_none(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_float16_none) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_float16_none();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_float16_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_float16_relu) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_float16_relu,
                           sub_v1_2::is_ignored_dynamic_output_shape_float16_relu,
                           sub_v1_2::get_examples_dynamic_output_shape_float16_relu(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_float16_relu) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_float16_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_float16_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_float16_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_float16_relu1,
                           sub_v1_2::is_ignored_dynamic_output_shape_float16_relu1,
                           sub_v1_2::get_examples_dynamic_output_shape_float16_relu1(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_float16_relu1) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_float16_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_float16_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_dynamic_output_shape_float16_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_dynamic_output_shape_float16_relu6,
                           sub_v1_2::is_ignored_dynamic_output_shape_float16_relu6,
                           sub_v1_2::get_examples_dynamic_output_shape_float16_relu6(), true);
}

TEST_F(ValidationTest, sub_v1_2_dynamic_output_shape_float16_relu6) {
  const Model model = sub_v1_2::createTestModel_dynamic_output_shape_float16_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_dynamic_output_shape_float16_relu6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_v1_2_quant8) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_quant8,
                           sub_v1_2::is_ignored_quant8,
                           sub_v1_2::get_examples_quant8());
}

TEST_F(ValidationTest, sub_v1_2_quant8) {
  const Model model = sub_v1_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_quant8_dynamic_output_shape,
                           sub_v1_2::is_ignored_quant8_dynamic_output_shape,
                           sub_v1_2::get_examples_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_v1_2_quant8_dynamic_output_shape) {
  const Model model = sub_v1_2::createTestModel_quant8_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized,
                           sub_v1_2::is_ignored_zero_sized,
                           sub_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, sub_v1_2_zero_sized) {
  const Model model = sub_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_relaxed,
                           sub_v1_2::is_ignored_zero_sized_relaxed,
                           sub_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_relaxed) {
  const Model model = sub_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_quant8,
                           sub_v1_2::is_ignored_zero_sized_quant8,
                           sub_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_quant8) {
  const Model model = sub_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_float16,
                           sub_v1_2::is_ignored_zero_sized_float16,
                           sub_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_float16) {
  const Model model = sub_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           sub_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           sub_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = sub_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           sub_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           sub_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           sub_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           sub_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           sub_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           sub_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, sub_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = sub_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(sub_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_v1_2_broadcast.mod.py.
namespace sub_v1_2_broadcast {
// Generated sub_v1_2_broadcast test
#include "examples/sub_v1_2_broadcast.example.cpp"
// Generated model constructor
#include "vts_models/sub_v1_2_broadcast.model.cpp"
} // namespace sub_v1_2_broadcast

TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_none) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_none,
                           sub_v1_2_broadcast::is_ignored_none,
                           sub_v1_2_broadcast::get_examples_none());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_none) {
  const Model model = sub_v1_2_broadcast::createTestModel_none();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_relu) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_relu,
                           sub_v1_2_broadcast::is_ignored_relu,
                           sub_v1_2_broadcast::get_examples_relu());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_relu) {
  const Model model = sub_v1_2_broadcast::createTestModel_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_relu1,
                           sub_v1_2_broadcast::is_ignored_relu1,
                           sub_v1_2_broadcast::get_examples_relu1());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_relu1) {
  const Model model = sub_v1_2_broadcast::createTestModel_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_relu6,
                           sub_v1_2_broadcast::is_ignored_relu6,
                           sub_v1_2_broadcast::get_examples_relu6());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_relu6) {
  const Model model = sub_v1_2_broadcast::createTestModel_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_float16_none) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_float16_none,
                           sub_v1_2_broadcast::is_ignored_float16_none,
                           sub_v1_2_broadcast::get_examples_float16_none());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_float16_none) {
  const Model model = sub_v1_2_broadcast::createTestModel_float16_none();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_float16_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_float16_relu) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_float16_relu,
                           sub_v1_2_broadcast::is_ignored_float16_relu,
                           sub_v1_2_broadcast::get_examples_float16_relu());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_float16_relu) {
  const Model model = sub_v1_2_broadcast::createTestModel_float16_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_float16_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_float16_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_float16_relu1,
                           sub_v1_2_broadcast::is_ignored_float16_relu1,
                           sub_v1_2_broadcast::get_examples_float16_relu1());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_float16_relu1) {
  const Model model = sub_v1_2_broadcast::createTestModel_float16_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_float16_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_float16_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_float16_relu6,
                           sub_v1_2_broadcast::is_ignored_float16_relu6,
                           sub_v1_2_broadcast::get_examples_float16_relu6());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_float16_relu6) {
  const Model model = sub_v1_2_broadcast::createTestModel_float16_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_float16_relu6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_none) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_none,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_none,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_none(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_none) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_none();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_relu) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_relu,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_relu) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu1,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_relu1,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu1(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_relu1) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu6,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_relu6,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu6(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_relu6) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_float16_none) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_none,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_float16_none,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_none(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_float16_none) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_none();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_float16_relu,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu1) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu1,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_float16_relu1,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu1(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu1) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu1();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu6) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu6,
                           sub_v1_2_broadcast::is_ignored_dynamic_output_shape_float16_relu6,
                           sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu6(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_dynamic_output_shape_float16_relu6) {
  const Model model = sub_v1_2_broadcast::createTestModel_dynamic_output_shape_float16_relu6();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_dynamic_output_shape_float16_relu6());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, sub_v1_2_broadcast_quant8) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_quant8,
                           sub_v1_2_broadcast::is_ignored_quant8,
                           sub_v1_2_broadcast::get_examples_quant8());
}

TEST_F(ValidationTest, sub_v1_2_broadcast_quant8) {
  const Model model = sub_v1_2_broadcast::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_v1_2_broadcast_quant8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_v1_2_broadcast::createTestModel_quant8_dynamic_output_shape,
                           sub_v1_2_broadcast::is_ignored_quant8_dynamic_output_shape,
                           sub_v1_2_broadcast::get_examples_quant8_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_v1_2_broadcast_quant8_dynamic_output_shape) {
  const Model model = sub_v1_2_broadcast::createTestModel_quant8_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_v1_2_broadcast::get_examples_quant8_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_bias_present_float16.mod.py.
namespace svdf_bias_present_float16 {
// Generated svdf_bias_present_float16 test
#include "examples/svdf_bias_present_float16.example.cpp"
// Generated model constructor
#include "vts_models/svdf_bias_present_float16.model.cpp"
} // namespace svdf_bias_present_float16

TEST_F(NeuralnetworksHidlTest, svdf_bias_present_float16) {
  generated_tests::Execute(device,
                           svdf_bias_present_float16::createTestModel,
                           svdf_bias_present_float16::is_ignored,
                           svdf_bias_present_float16::get_examples());
}

TEST_F(ValidationTest, svdf_bias_present_float16) {
  const Model model = svdf_bias_present_float16::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_bias_present_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_bias_present_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_bias_present_float16::createTestModel_dynamic_output_shape,
                           svdf_bias_present_float16::is_ignored_dynamic_output_shape,
                           svdf_bias_present_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_bias_present_float16_dynamic_output_shape) {
  const Model model = svdf_bias_present_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_bias_present_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_float16.mod.py.
namespace svdf_float16 {
// Generated svdf_float16 test
#include "examples/svdf_float16.example.cpp"
// Generated model constructor
#include "vts_models/svdf_float16.model.cpp"
} // namespace svdf_float16

TEST_F(NeuralnetworksHidlTest, svdf_float16) {
  generated_tests::Execute(device,
                           svdf_float16::createTestModel,
                           svdf_float16::is_ignored,
                           svdf_float16::get_examples());
}

TEST_F(ValidationTest, svdf_float16) {
  const Model model = svdf_float16::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_float16::createTestModel_dynamic_output_shape,
                           svdf_float16::is_ignored_dynamic_output_shape,
                           svdf_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_float16_dynamic_output_shape) {
  const Model model = svdf_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_state_float16.mod.py.
namespace svdf_state_float16 {
// Generated svdf_state_float16 test
#include "examples/svdf_state_float16.example.cpp"
// Generated model constructor
#include "vts_models/svdf_state_float16.model.cpp"
} // namespace svdf_state_float16

TEST_F(NeuralnetworksHidlTest, svdf_state_float16) {
  generated_tests::Execute(device,
                           svdf_state_float16::createTestModel,
                           svdf_state_float16::is_ignored,
                           svdf_state_float16::get_examples());
}

TEST_F(ValidationTest, svdf_state_float16) {
  const Model model = svdf_state_float16::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_state_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_state_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_state_float16::createTestModel_dynamic_output_shape,
                           svdf_state_float16::is_ignored_dynamic_output_shape,
                           svdf_state_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_state_float16_dynamic_output_shape) {
  const Model model = svdf_state_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_state_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: tanh_v1_2.mod.py.
namespace tanh_v1_2 {
// Generated tanh_v1_2 test
#include "examples/tanh_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/tanh_v1_2.model.cpp"
} // namespace tanh_v1_2

TEST_F(NeuralnetworksHidlTest, tanh_v1_2) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel,
                           tanh_v1_2::is_ignored,
                           tanh_v1_2::get_examples());
}

TEST_F(ValidationTest, tanh_v1_2) {
  const Model model = tanh_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_dynamic_output_shape,
                           tanh_v1_2::is_ignored_dynamic_output_shape,
                           tanh_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tanh_v1_2_dynamic_output_shape) {
  const Model model = tanh_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, tanh_v1_2_2) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_2,
                           tanh_v1_2::is_ignored_2,
                           tanh_v1_2::get_examples_2());
}

TEST_F(ValidationTest, tanh_v1_2_2) {
  const Model model = tanh_v1_2::createTestModel_2();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_dynamic_output_shape_2,
                           tanh_v1_2::is_ignored_dynamic_output_shape_2,
                           tanh_v1_2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, tanh_v1_2_dynamic_output_shape_2) {
  const Model model = tanh_v1_2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, tanh_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized,
                           tanh_v1_2::is_ignored_zero_sized,
                           tanh_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized) {
  const Model model = tanh_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tanh_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_relaxed,
                           tanh_v1_2::is_ignored_zero_sized_relaxed,
                           tanh_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_relaxed) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tanh_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_quant8,
                           tanh_v1_2::is_ignored_zero_sized_quant8,
                           tanh_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_quant8) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tanh_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_float16,
                           tanh_v1_2::is_ignored_zero_sized_float16,
                           tanh_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_float16) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           tanh_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           tanh_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           tanh_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           tanh_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           tanh_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, tanh_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = tanh_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(tanh_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: tile_1.mod.py.
namespace tile_1 {
// Generated tile_1 test
#include "examples/tile_1.example.cpp"
// Generated model constructor
#include "vts_models/tile_1.model.cpp"
} // namespace tile_1

TEST_F(NeuralnetworksHidlTest, tile_1) {
  generated_tests::Execute(device,
                           tile_1::createTestModel,
                           tile_1::is_ignored,
                           tile_1::get_examples());
}

TEST_F(ValidationTest, tile_1) {
  const Model model = tile_1::createTestModel();
  const std::vector<Request> requests = createRequests(tile_1::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_1_relaxed) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_relaxed,
                           tile_1::is_ignored_relaxed,
                           tile_1::get_examples_relaxed());
}

TEST_F(ValidationTest, tile_1_relaxed) {
  const Model model = tile_1::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_1_float16) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_float16,
                           tile_1::is_ignored_float16,
                           tile_1::get_examples_float16());
}

TEST_F(ValidationTest, tile_1_float16) {
  const Model model = tile_1::createTestModel_float16();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_1_quant8) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_quant8,
                           tile_1::is_ignored_quant8,
                           tile_1::get_examples_quant8());
}

TEST_F(ValidationTest, tile_1_quant8) {
  const Model model = tile_1::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_dynamic_output_shape,
                           tile_1::is_ignored_dynamic_output_shape,
                           tile_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tile_1_dynamic_output_shape) {
  const Model model = tile_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_1_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_dynamic_output_shape_relaxed,
                           tile_1::is_ignored_dynamic_output_shape_relaxed,
                           tile_1::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, tile_1_dynamic_output_shape_relaxed) {
  const Model model = tile_1::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_1_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_dynamic_output_shape_float16,
                           tile_1::is_ignored_dynamic_output_shape_float16,
                           tile_1::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, tile_1_dynamic_output_shape_float16) {
  const Model model = tile_1::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_1_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           tile_1::createTestModel_dynamic_output_shape_quant8,
                           tile_1::is_ignored_dynamic_output_shape_quant8,
                           tile_1::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, tile_1_dynamic_output_shape_quant8) {
  const Model model = tile_1::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(tile_1::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
// Generated from: tile_2.mod.py.
namespace tile_2 {
// Generated tile_2 test
#include "examples/tile_2.example.cpp"
// Generated model constructor
#include "vts_models/tile_2.model.cpp"
} // namespace tile_2

TEST_F(NeuralnetworksHidlTest, tile_2) {
  generated_tests::Execute(device,
                           tile_2::createTestModel,
                           tile_2::is_ignored,
                           tile_2::get_examples());
}

TEST_F(ValidationTest, tile_2) {
  const Model model = tile_2::createTestModel();
  const std::vector<Request> requests = createRequests(tile_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_2_relaxed) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_relaxed,
                           tile_2::is_ignored_relaxed,
                           tile_2::get_examples_relaxed());
}

TEST_F(ValidationTest, tile_2_relaxed) {
  const Model model = tile_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_2_float16) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_float16,
                           tile_2::is_ignored_float16,
                           tile_2::get_examples_float16());
}

TEST_F(ValidationTest, tile_2_float16) {
  const Model model = tile_2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_2_quant8) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_quant8,
                           tile_2::is_ignored_quant8,
                           tile_2::get_examples_quant8());
}

TEST_F(ValidationTest, tile_2_quant8) {
  const Model model = tile_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_2_int32) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_int32,
                           tile_2::is_ignored_int32,
                           tile_2::get_examples_int32());
}

TEST_F(ValidationTest, tile_2_int32) {
  const Model model = tile_2::createTestModel_int32();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_dynamic_output_shape,
                           tile_2::is_ignored_dynamic_output_shape,
                           tile_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tile_2_dynamic_output_shape) {
  const Model model = tile_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_dynamic_output_shape_relaxed,
                           tile_2::is_ignored_dynamic_output_shape_relaxed,
                           tile_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, tile_2_dynamic_output_shape_relaxed) {
  const Model model = tile_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_dynamic_output_shape_float16,
                           tile_2::is_ignored_dynamic_output_shape_float16,
                           tile_2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, tile_2_dynamic_output_shape_float16) {
  const Model model = tile_2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_2_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_dynamic_output_shape_quant8,
                           tile_2::is_ignored_dynamic_output_shape_quant8,
                           tile_2::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, tile_2_dynamic_output_shape_quant8) {
  const Model model = tile_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_2_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           tile_2::createTestModel_dynamic_output_shape_int32,
                           tile_2::is_ignored_dynamic_output_shape_int32,
                           tile_2::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, tile_2_dynamic_output_shape_int32) {
  const Model model = tile_2::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(tile_2::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
// Generated from: tile_3.mod.py.
namespace tile_3 {
// Generated tile_3 test
#include "examples/tile_3.example.cpp"
// Generated model constructor
#include "vts_models/tile_3.model.cpp"
} // namespace tile_3

TEST_F(NeuralnetworksHidlTest, tile_3) {
  generated_tests::Execute(device,
                           tile_3::createTestModel,
                           tile_3::is_ignored,
                           tile_3::get_examples());
}

TEST_F(ValidationTest, tile_3) {
  const Model model = tile_3::createTestModel();
  const std::vector<Request> requests = createRequests(tile_3::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_3_relaxed) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_relaxed,
                           tile_3::is_ignored_relaxed,
                           tile_3::get_examples_relaxed());
}

TEST_F(ValidationTest, tile_3_relaxed) {
  const Model model = tile_3::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_3_float16) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_float16,
                           tile_3::is_ignored_float16,
                           tile_3::get_examples_float16());
}

TEST_F(ValidationTest, tile_3_float16) {
  const Model model = tile_3::createTestModel_float16();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_3_quant8) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_quant8,
                           tile_3::is_ignored_quant8,
                           tile_3::get_examples_quant8());
}

TEST_F(ValidationTest, tile_3_quant8) {
  const Model model = tile_3::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, tile_3_int32) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_int32,
                           tile_3::is_ignored_int32,
                           tile_3::get_examples_int32());
}

TEST_F(ValidationTest, tile_3_int32) {
  const Model model = tile_3::createTestModel_int32();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_int32());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_dynamic_output_shape,
                           tile_3::is_ignored_dynamic_output_shape,
                           tile_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tile_3_dynamic_output_shape) {
  const Model model = tile_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_3_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_dynamic_output_shape_relaxed,
                           tile_3::is_ignored_dynamic_output_shape_relaxed,
                           tile_3::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, tile_3_dynamic_output_shape_relaxed) {
  const Model model = tile_3::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_3_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_dynamic_output_shape_float16,
                           tile_3::is_ignored_dynamic_output_shape_float16,
                           tile_3::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, tile_3_dynamic_output_shape_float16) {
  const Model model = tile_3::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_3_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_dynamic_output_shape_quant8,
                           tile_3::is_ignored_dynamic_output_shape_quant8,
                           tile_3::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, tile_3_dynamic_output_shape_quant8) {
  const Model model = tile_3::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tile_3_dynamic_output_shape_int32) {
  generated_tests::Execute(device,
                           tile_3::createTestModel_dynamic_output_shape_int32,
                           tile_3::is_ignored_dynamic_output_shape_int32,
                           tile_3::get_examples_dynamic_output_shape_int32(), true);
}

TEST_F(ValidationTest, tile_3_dynamic_output_shape_int32) {
  const Model model = tile_3::createTestModel_dynamic_output_shape_int32();
  const std::vector<Request> requests = createRequests(tile_3::get_examples_dynamic_output_shape_int32());
  validateEverything(model, requests);
}


#endif
// Generated from: topk_v2.mod.py.
namespace topk_v2 {
// Generated topk_v2 test
#include "examples/topk_v2.example.cpp"
// Generated model constructor
#include "vts_models/topk_v2.model.cpp"
} // namespace topk_v2

TEST_F(NeuralnetworksHidlTest, topk_v2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel,
                           topk_v2::is_ignored,
                           topk_v2::get_examples());
}

TEST_F(ValidationTest, topk_v2) {
  const Model model = topk_v2::createTestModel();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed,
                           topk_v2::is_ignored_relaxed,
                           topk_v2::get_examples_relaxed());
}

TEST_F(ValidationTest, topk_v2_relaxed) {
  const Model model = topk_v2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16,
                           topk_v2::is_ignored_float16,
                           topk_v2::get_examples_float16());
}

TEST_F(ValidationTest, topk_v2_float16) {
  const Model model = topk_v2::createTestModel_float16();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape,
                           topk_v2::is_ignored_dynamic_output_shape,
                           topk_v2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed,
                           topk_v2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16,
                           topk_v2::is_ignored_dynamic_output_shape_float16,
                           topk_v2::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, topk_v2_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_2,
                           topk_v2::is_ignored_2,
                           topk_v2::get_examples_2());
}

TEST_F(ValidationTest, topk_v2_2) {
  const Model model = topk_v2::createTestModel_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed_2,
                           topk_v2::is_ignored_relaxed_2,
                           topk_v2::get_examples_relaxed_2());
}

TEST_F(ValidationTest, topk_v2_relaxed_2) {
  const Model model = topk_v2::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16_2,
                           topk_v2::is_ignored_float16_2,
                           topk_v2::get_examples_float16_2());
}

TEST_F(ValidationTest, topk_v2_float16_2) {
  const Model model = topk_v2::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_2,
                           topk_v2::is_ignored_dynamic_output_shape_2,
                           topk_v2::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_2) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed_2,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed_2,
                           topk_v2::get_examples_dynamic_output_shape_relaxed_2(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed_2) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16_2) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16_2,
                           topk_v2::is_ignored_dynamic_output_shape_float16_2,
                           topk_v2::get_examples_dynamic_output_shape_float16_2(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16_2) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, topk_v2_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_3,
                           topk_v2::is_ignored_3,
                           topk_v2::get_examples_3());
}

TEST_F(ValidationTest, topk_v2_3) {
  const Model model = topk_v2::createTestModel_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed_3,
                           topk_v2::is_ignored_relaxed_3,
                           topk_v2::get_examples_relaxed_3());
}

TEST_F(ValidationTest, topk_v2_relaxed_3) {
  const Model model = topk_v2::createTestModel_relaxed_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16_3,
                           topk_v2::is_ignored_float16_3,
                           topk_v2::get_examples_float16_3());
}

TEST_F(ValidationTest, topk_v2_float16_3) {
  const Model model = topk_v2::createTestModel_float16_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_3,
                           topk_v2::is_ignored_dynamic_output_shape_3,
                           topk_v2::get_examples_dynamic_output_shape_3(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_3) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed_3,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed_3,
                           topk_v2::get_examples_dynamic_output_shape_relaxed_3(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed_3) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16_3) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16_3,
                           topk_v2::is_ignored_dynamic_output_shape_float16_3,
                           topk_v2::get_examples_dynamic_output_shape_float16_3(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16_3) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16_3();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, topk_v2_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_4,
                           topk_v2::is_ignored_4,
                           topk_v2::get_examples_4());
}

TEST_F(ValidationTest, topk_v2_4) {
  const Model model = topk_v2::createTestModel_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed_4,
                           topk_v2::is_ignored_relaxed_4,
                           topk_v2::get_examples_relaxed_4());
}

TEST_F(ValidationTest, topk_v2_relaxed_4) {
  const Model model = topk_v2::createTestModel_relaxed_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16_4,
                           topk_v2::is_ignored_float16_4,
                           topk_v2::get_examples_float16_4());
}

TEST_F(ValidationTest, topk_v2_float16_4) {
  const Model model = topk_v2::createTestModel_float16_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_4,
                           topk_v2::is_ignored_dynamic_output_shape_4,
                           topk_v2::get_examples_dynamic_output_shape_4(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_4) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed_4,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed_4,
                           topk_v2::get_examples_dynamic_output_shape_relaxed_4(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed_4) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16_4) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16_4,
                           topk_v2::is_ignored_dynamic_output_shape_float16_4,
                           topk_v2::get_examples_dynamic_output_shape_float16_4(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16_4) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16_4();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, topk_v2_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_5,
                           topk_v2::is_ignored_5,
                           topk_v2::get_examples_5());
}

TEST_F(ValidationTest, topk_v2_5) {
  const Model model = topk_v2::createTestModel_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed_5,
                           topk_v2::is_ignored_relaxed_5,
                           topk_v2::get_examples_relaxed_5());
}

TEST_F(ValidationTest, topk_v2_relaxed_5) {
  const Model model = topk_v2::createTestModel_relaxed_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16_5,
                           topk_v2::is_ignored_float16_5,
                           topk_v2::get_examples_float16_5());
}

TEST_F(ValidationTest, topk_v2_float16_5) {
  const Model model = topk_v2::createTestModel_float16_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_5,
                           topk_v2::is_ignored_dynamic_output_shape_5,
                           topk_v2::get_examples_dynamic_output_shape_5(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_5) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed_5,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed_5,
                           topk_v2::get_examples_dynamic_output_shape_relaxed_5(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed_5) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16_5) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16_5,
                           topk_v2::is_ignored_dynamic_output_shape_float16_5,
                           topk_v2::get_examples_dynamic_output_shape_float16_5(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16_5) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16_5();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16_5());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, topk_v2_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_6,
                           topk_v2::is_ignored_6,
                           topk_v2::get_examples_6());
}

TEST_F(ValidationTest, topk_v2_6) {
  const Model model = topk_v2::createTestModel_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_relaxed_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_relaxed_6,
                           topk_v2::is_ignored_relaxed_6,
                           topk_v2::get_examples_relaxed_6());
}

TEST_F(ValidationTest, topk_v2_relaxed_6) {
  const Model model = topk_v2::createTestModel_relaxed_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_relaxed_6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, topk_v2_float16_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_float16_6,
                           topk_v2::is_ignored_float16_6,
                           topk_v2::get_examples_float16_6());
}

TEST_F(ValidationTest, topk_v2_float16_6) {
  const Model model = topk_v2::createTestModel_float16_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_float16_6());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_6,
                           topk_v2::is_ignored_dynamic_output_shape_6,
                           topk_v2::get_examples_dynamic_output_shape_6(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_6) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_relaxed_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_relaxed_6,
                           topk_v2::is_ignored_dynamic_output_shape_relaxed_6,
                           topk_v2::get_examples_dynamic_output_shape_relaxed_6(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_relaxed_6) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_relaxed_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_relaxed_6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, topk_v2_dynamic_output_shape_float16_6) {
  generated_tests::Execute(device,
                           topk_v2::createTestModel_dynamic_output_shape_float16_6,
                           topk_v2::is_ignored_dynamic_output_shape_float16_6,
                           topk_v2::get_examples_dynamic_output_shape_float16_6(), true);
}

TEST_F(ValidationTest, topk_v2_dynamic_output_shape_float16_6) {
  const Model model = topk_v2::createTestModel_dynamic_output_shape_float16_6();
  const std::vector<Request> requests = createRequests(topk_v2::get_examples_dynamic_output_shape_float16_6());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_conv2d.mod.py.
namespace transpose_conv2d {
// Generated transpose_conv2d test
#include "examples/transpose_conv2d.example.cpp"
// Generated model constructor
#include "vts_models/transpose_conv2d.model.cpp"
} // namespace transpose_conv2d

TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none,
                           transpose_conv2d::is_ignored_nhwc_none,
                           transpose_conv2d::get_examples_nhwc_none());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_none_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_none_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_relaxed,
                           transpose_conv2d::is_ignored_nhwc_none_relaxed,
                           transpose_conv2d::get_examples_nhwc_none_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_none_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_none_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_quant8,
                           transpose_conv2d::is_ignored_nhwc_none_quant8,
                           transpose_conv2d::get_examples_nhwc_none_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_quant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_none_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_none_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_quant8_2,
                           transpose_conv2d::is_ignored_nhwc_none_quant8_2,
                           transpose_conv2d::get_examples_nhwc_none_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_none_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_none_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_channelQuant8,
                           transpose_conv2d::is_ignored_nhwc_none_channelQuant8,
                           transpose_conv2d::get_examples_nhwc_none_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_none_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_channelQuant8_2,
                           transpose_conv2d::is_ignored_nhwc_none_channelQuant8_2,
                           transpose_conv2d::get_examples_nhwc_none_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_float16,
                           transpose_conv2d::is_ignored_nhwc_none_float16,
                           transpose_conv2d::get_examples_nhwc_none_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_float16) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_none_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_none_float16_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_none_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_none_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_none_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu,
                           transpose_conv2d::is_ignored_nhwc_relu,
                           transpose_conv2d::get_examples_nhwc_relu());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_relaxed,
                           transpose_conv2d::is_ignored_nhwc_relu_relaxed,
                           transpose_conv2d::get_examples_nhwc_relu_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_quant8,
                           transpose_conv2d::is_ignored_nhwc_relu_quant8,
                           transpose_conv2d::get_examples_nhwc_relu_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_quant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_quant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu_quant8_2,
                           transpose_conv2d::get_examples_nhwc_relu_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_channelQuant8,
                           transpose_conv2d::is_ignored_nhwc_relu_channelQuant8,
                           transpose_conv2d::get_examples_nhwc_relu_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu_channelQuant8_2,
                           transpose_conv2d::get_examples_nhwc_relu_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_float16,
                           transpose_conv2d::is_ignored_nhwc_relu_float16,
                           transpose_conv2d::get_examples_nhwc_relu_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_float16) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu_float16_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1,
                           transpose_conv2d::is_ignored_nhwc_relu1,
                           transpose_conv2d::get_examples_nhwc_relu1());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu1_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu1_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_relaxed,
                           transpose_conv2d::is_ignored_nhwc_relu1_relaxed,
                           transpose_conv2d::get_examples_nhwc_relu1_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu1_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu1_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_quant8,
                           transpose_conv2d::is_ignored_nhwc_relu1_quant8,
                           transpose_conv2d::get_examples_nhwc_relu1_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_quant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu1_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_quant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu1_quant8_2,
                           transpose_conv2d::get_examples_nhwc_relu1_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8,
                           transpose_conv2d::is_ignored_nhwc_relu1_channelQuant8,
                           transpose_conv2d::get_examples_nhwc_relu1_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu1_channelQuant8_2,
                           transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_float16,
                           transpose_conv2d::is_ignored_nhwc_relu1_float16,
                           transpose_conv2d::get_examples_nhwc_relu1_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_float16) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu1_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu1_float16_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu1_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu1_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6,
                           transpose_conv2d::is_ignored_nhwc_relu6,
                           transpose_conv2d::get_examples_nhwc_relu6());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu6_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu6_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_relaxed,
                           transpose_conv2d::is_ignored_nhwc_relu6_relaxed,
                           transpose_conv2d::get_examples_nhwc_relu6_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu6_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu6_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_quant8,
                           transpose_conv2d::is_ignored_nhwc_relu6_quant8,
                           transpose_conv2d::get_examples_nhwc_relu6_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_quant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu6_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_quant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu6_quant8_2,
                           transpose_conv2d::get_examples_nhwc_relu6_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8,
                           transpose_conv2d::is_ignored_nhwc_relu6_channelQuant8,
                           transpose_conv2d::get_examples_nhwc_relu6_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_2,
                           transpose_conv2d::is_ignored_nhwc_relu6_channelQuant8_2,
                           transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_float16,
                           transpose_conv2d::is_ignored_nhwc_relu6_float16,
                           transpose_conv2d::get_examples_nhwc_relu6_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_float16) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relu6_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relu6_float16_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relu6_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relu6_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none,
                           transpose_conv2d::is_ignored_nchw_none,
                           transpose_conv2d::get_examples_nchw_none());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none) {
  const Model model = transpose_conv2d::createTestModel_nchw_none();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_none_weight_as_input,
                           transpose_conv2d::get_examples_nchw_none_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_relaxed,
                           transpose_conv2d::is_ignored_nchw_none_relaxed,
                           transpose_conv2d::get_examples_nchw_none_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_none_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nchw_none_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_quant8,
                           transpose_conv2d::is_ignored_nchw_none_quant8,
                           transpose_conv2d::get_examples_nchw_none_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_quant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_none_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_none_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_quant8_2,
                           transpose_conv2d::is_ignored_nchw_none_quant8_2,
                           transpose_conv2d::get_examples_nchw_none_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_none_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_none_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_channelQuant8,
                           transpose_conv2d::is_ignored_nchw_none_channelQuant8,
                           transpose_conv2d::get_examples_nchw_none_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_none_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_channelQuant8_2,
                           transpose_conv2d::is_ignored_nchw_none_channelQuant8_2,
                           transpose_conv2d::get_examples_nchw_none_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_float16,
                           transpose_conv2d::is_ignored_nchw_none_float16,
                           transpose_conv2d::get_examples_nchw_none_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_float16) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_none_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_none_float16_weight_as_input,
                           transpose_conv2d::get_examples_nchw_none_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_none_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_none_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu,
                           transpose_conv2d::is_ignored_nchw_relu,
                           transpose_conv2d::get_examples_nchw_relu());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_relaxed,
                           transpose_conv2d::is_ignored_nchw_relu_relaxed,
                           transpose_conv2d::get_examples_nchw_relu_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_quant8,
                           transpose_conv2d::is_ignored_nchw_relu_quant8,
                           transpose_conv2d::get_examples_nchw_relu_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_quant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_quant8_2,
                           transpose_conv2d::is_ignored_nchw_relu_quant8_2,
                           transpose_conv2d::get_examples_nchw_relu_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_channelQuant8,
                           transpose_conv2d::is_ignored_nchw_relu_channelQuant8,
                           transpose_conv2d::get_examples_nchw_relu_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_channelQuant8_2,
                           transpose_conv2d::is_ignored_nchw_relu_channelQuant8_2,
                           transpose_conv2d::get_examples_nchw_relu_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_float16,
                           transpose_conv2d::is_ignored_nchw_relu_float16,
                           transpose_conv2d::get_examples_nchw_relu_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_float16) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu_float16_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1,
                           transpose_conv2d::is_ignored_nchw_relu1,
                           transpose_conv2d::get_examples_nchw_relu1());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu1_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu1_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_relaxed,
                           transpose_conv2d::is_ignored_nchw_relu1_relaxed,
                           transpose_conv2d::get_examples_nchw_relu1_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu1_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu1_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_quant8,
                           transpose_conv2d::is_ignored_nchw_relu1_quant8,
                           transpose_conv2d::get_examples_nchw_relu1_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_quant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu1_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu1_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_quant8_2,
                           transpose_conv2d::is_ignored_nchw_relu1_quant8_2,
                           transpose_conv2d::get_examples_nchw_relu1_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu1_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_channelQuant8,
                           transpose_conv2d::is_ignored_nchw_relu1_channelQuant8,
                           transpose_conv2d::get_examples_nchw_relu1_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_2,
                           transpose_conv2d::is_ignored_nchw_relu1_channelQuant8_2,
                           transpose_conv2d::get_examples_nchw_relu1_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_float16,
                           transpose_conv2d::is_ignored_nchw_relu1_float16,
                           transpose_conv2d::get_examples_nchw_relu1_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_float16) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu1_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu1_float16_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu1_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu1_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6,
                           transpose_conv2d::is_ignored_nchw_relu6,
                           transpose_conv2d::get_examples_nchw_relu6());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu6_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu6_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_relaxed,
                           transpose_conv2d::is_ignored_nchw_relu6_relaxed,
                           transpose_conv2d::get_examples_nchw_relu6_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu6_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu6_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_quant8,
                           transpose_conv2d::is_ignored_nchw_relu6_quant8,
                           transpose_conv2d::get_examples_nchw_relu6_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_quant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu6_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu6_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_quant8_2,
                           transpose_conv2d::is_ignored_nchw_relu6_quant8_2,
                           transpose_conv2d::get_examples_nchw_relu6_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu6_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_channelQuant8,
                           transpose_conv2d::is_ignored_nchw_relu6_channelQuant8,
                           transpose_conv2d::get_examples_nchw_relu6_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_2,
                           transpose_conv2d::is_ignored_nchw_relu6_channelQuant8_2,
                           transpose_conv2d::get_examples_nchw_relu6_channelQuant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_float16,
                           transpose_conv2d::is_ignored_nchw_relu6_float16,
                           transpose_conv2d::get_examples_nchw_relu6_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_float16) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relu6_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relu6_float16_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relu6_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relu6_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_none_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_none_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_none_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu1_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu1_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relu6_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relu6_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_none_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_none_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_none_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_none_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_none_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu1_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu1_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu1_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu1_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_channelQuant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relu6_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relu6_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relu6_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relu6_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc,
                           transpose_conv2d::is_ignored_nhwc,
                           transpose_conv2d::get_examples_nhwc());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc) {
  const Model model = transpose_conv2d::createTestModel_nhwc();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed,
                           transpose_conv2d::is_ignored_nhwc_relaxed,
                           transpose_conv2d::get_examples_nhwc_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8,
                           transpose_conv2d::is_ignored_nhwc_quant8,
                           transpose_conv2d::get_examples_nhwc_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_channelQuant8,
                           transpose_conv2d::is_ignored_nhwc_channelQuant8,
                           transpose_conv2d::get_examples_nhwc_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16,
                           transpose_conv2d::is_ignored_nhwc_float16,
                           transpose_conv2d::get_examples_nhwc_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nhwc_float16_weight_as_input,
                           transpose_conv2d::get_examples_nhwc_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw,
                           transpose_conv2d::is_ignored_nchw,
                           transpose_conv2d::get_examples_nchw());
}

TEST_F(ValidationTest, transpose_conv2d_nchw) {
  const Model model = transpose_conv2d::createTestModel_nchw();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_weight_as_input,
                           transpose_conv2d::get_examples_nchw_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed,
                           transpose_conv2d::is_ignored_nchw_relaxed,
                           transpose_conv2d::get_examples_nchw_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_nchw_relaxed_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8,
                           transpose_conv2d::is_ignored_nchw_quant8,
                           transpose_conv2d::get_examples_nchw_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_quant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_quant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_channelQuant8,
                           transpose_conv2d::is_ignored_nchw_channelQuant8,
                           transpose_conv2d::get_examples_nchw_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_channelQuant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_nchw_channelQuant8_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16,
                           transpose_conv2d::is_ignored_nchw_float16,
                           transpose_conv2d::get_examples_nchw_float16());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_weight_as_input,
                           transpose_conv2d::is_ignored_nchw_float16_weight_as_input,
                           transpose_conv2d::get_examples_nchw_float16_weight_as_input());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_channelQuant8,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_channelQuant8,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_channelQuant8) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_channelQuant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_channelQuant8_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_channelQuant8_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_channelQuant8_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_channelQuant8_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_channelQuant8_weight_as_input());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_weight_as_input,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_2,
                           transpose_conv2d::is_ignored_nhwc_2,
                           transpose_conv2d::get_examples_nhwc_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_2,
                           transpose_conv2d::is_ignored_nhwc_relaxed_2,
                           transpose_conv2d::get_examples_nhwc_relaxed_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_relaxed_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_2,
                           transpose_conv2d::is_ignored_nhwc_quant8_2,
                           transpose_conv2d::get_examples_nhwc_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_2,
                           transpose_conv2d::is_ignored_nhwc_float16_2,
                           transpose_conv2d::get_examples_nhwc_float16_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_2,
                           transpose_conv2d::is_ignored_nhwc_float16_weight_as_input_2,
                           transpose_conv2d::get_examples_nhwc_float16_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_2,
                           transpose_conv2d::is_ignored_nchw_2,
                           transpose_conv2d::get_examples_nchw_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_2,
                           transpose_conv2d::is_ignored_nchw_relaxed_2,
                           transpose_conv2d::get_examples_nchw_relaxed_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_relaxed_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_2,
                           transpose_conv2d::is_ignored_nchw_quant8_2,
                           transpose_conv2d::get_examples_nchw_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_quant8_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_2,
                           transpose_conv2d::is_ignored_nchw_float16_2,
                           transpose_conv2d::get_examples_nchw_float16_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_weight_as_input_2,
                           transpose_conv2d::is_ignored_nchw_float16_weight_as_input_2,
                           transpose_conv2d::get_examples_nchw_float16_weight_as_input_2());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_weight_as_input_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_2,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_weight_as_input_2,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_2) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_3,
                           transpose_conv2d::is_ignored_nhwc_3,
                           transpose_conv2d::get_examples_nhwc_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_weight_as_input_3,
                           transpose_conv2d::is_ignored_nhwc_weight_as_input_3,
                           transpose_conv2d::get_examples_nhwc_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_3,
                           transpose_conv2d::is_ignored_nhwc_relaxed_3,
                           transpose_conv2d::get_examples_nhwc_relaxed_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_3,
                           transpose_conv2d::is_ignored_nhwc_relaxed_weight_as_input_3,
                           transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_3,
                           transpose_conv2d::is_ignored_nhwc_quant8_3,
                           transpose_conv2d::get_examples_nhwc_quant8_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_3,
                           transpose_conv2d::is_ignored_nhwc_quant8_weight_as_input_3,
                           transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_3,
                           transpose_conv2d::is_ignored_nhwc_float16_3,
                           transpose_conv2d::get_examples_nhwc_float16_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_3,
                           transpose_conv2d::is_ignored_nhwc_float16_weight_as_input_3,
                           transpose_conv2d::get_examples_nhwc_float16_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_3,
                           transpose_conv2d::is_ignored_nchw_3,
                           transpose_conv2d::get_examples_nchw_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_weight_as_input_3,
                           transpose_conv2d::is_ignored_nchw_weight_as_input_3,
                           transpose_conv2d::get_examples_nchw_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_3,
                           transpose_conv2d::is_ignored_nchw_relaxed_3,
                           transpose_conv2d::get_examples_nchw_relaxed_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_3,
                           transpose_conv2d::is_ignored_nchw_relaxed_weight_as_input_3,
                           transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_3,
                           transpose_conv2d::is_ignored_nchw_quant8_3,
                           transpose_conv2d::get_examples_nchw_quant8_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_3,
                           transpose_conv2d::is_ignored_nchw_quant8_weight_as_input_3,
                           transpose_conv2d::get_examples_nchw_quant8_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_weight_as_input_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_3,
                           transpose_conv2d::is_ignored_nchw_float16_3,
                           transpose_conv2d::get_examples_nchw_float16_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_3());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_weight_as_input_3,
                           transpose_conv2d::is_ignored_nchw_float16_weight_as_input_3,
                           transpose_conv2d::get_examples_nchw_float16_weight_as_input_3());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_weight_as_input_3());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_3());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_3) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_3,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_weight_as_input_3,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_3(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_3) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_3();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_3());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_4,
                           transpose_conv2d::is_ignored_nhwc_4,
                           transpose_conv2d::get_examples_nhwc_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_weight_as_input_4,
                           transpose_conv2d::is_ignored_nhwc_weight_as_input_4,
                           transpose_conv2d::get_examples_nhwc_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_4,
                           transpose_conv2d::is_ignored_nhwc_relaxed_4,
                           transpose_conv2d::get_examples_nhwc_relaxed_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_4,
                           transpose_conv2d::is_ignored_nhwc_relaxed_weight_as_input_4,
                           transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_4,
                           transpose_conv2d::is_ignored_nhwc_quant8_4,
                           transpose_conv2d::get_examples_nhwc_quant8_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_4,
                           transpose_conv2d::is_ignored_nhwc_quant8_weight_as_input_4,
                           transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_4,
                           transpose_conv2d::is_ignored_nhwc_float16_4,
                           transpose_conv2d::get_examples_nhwc_float16_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_4,
                           transpose_conv2d::is_ignored_nhwc_float16_weight_as_input_4,
                           transpose_conv2d::get_examples_nhwc_float16_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_4,
                           transpose_conv2d::is_ignored_nchw_4,
                           transpose_conv2d::get_examples_nchw_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_weight_as_input_4,
                           transpose_conv2d::is_ignored_nchw_weight_as_input_4,
                           transpose_conv2d::get_examples_nchw_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_4,
                           transpose_conv2d::is_ignored_nchw_relaxed_4,
                           transpose_conv2d::get_examples_nchw_relaxed_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_4,
                           transpose_conv2d::is_ignored_nchw_relaxed_weight_as_input_4,
                           transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_4,
                           transpose_conv2d::is_ignored_nchw_quant8_4,
                           transpose_conv2d::get_examples_nchw_quant8_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_4,
                           transpose_conv2d::is_ignored_nchw_quant8_weight_as_input_4,
                           transpose_conv2d::get_examples_nchw_quant8_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_weight_as_input_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_4,
                           transpose_conv2d::is_ignored_nchw_float16_4,
                           transpose_conv2d::get_examples_nchw_float16_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_4());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_weight_as_input_4,
                           transpose_conv2d::is_ignored_nchw_float16_weight_as_input_4,
                           transpose_conv2d::get_examples_nchw_float16_weight_as_input_4());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_weight_as_input_4());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_4());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_4) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_4,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_weight_as_input_4,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_4(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_4) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_4();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_4());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc,
                           transpose_conv2d::is_ignored_zero_sized_nhwc,
                           transpose_conv2d::get_examples_zero_sized_nhwc());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_relaxed,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_relaxed,
                           transpose_conv2d::get_examples_zero_sized_nhwc_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_relaxed) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_quant8,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_quant8,
                           transpose_conv2d::get_examples_zero_sized_nhwc_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_quant8) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_float16,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_float16,
                           transpose_conv2d::get_examples_zero_sized_nhwc_float16());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_float16) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_float16());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw,
                           transpose_conv2d::is_ignored_zero_sized_nchw,
                           transpose_conv2d::get_examples_zero_sized_nchw());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_relaxed,
                           transpose_conv2d::is_ignored_zero_sized_nchw_relaxed,
                           transpose_conv2d::get_examples_zero_sized_nchw_relaxed());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_relaxed) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_quant8,
                           transpose_conv2d::is_ignored_zero_sized_nchw_quant8,
                           transpose_conv2d::get_examples_zero_sized_nchw_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_quant8) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_float16,
                           transpose_conv2d::is_ignored_zero_sized_nchw_float16,
                           transpose_conv2d::get_examples_zero_sized_nchw_float16());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_float16) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_relaxed) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_quant8) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_float16) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_float16());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_relaxed) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_relaxed) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_quant8) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_float16) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_float16,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_float16,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_float16(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_float16) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_float16();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_2,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_2,
                           transpose_conv2d::get_examples_zero_sized_nhwc_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_relaxed_2,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_relaxed_2,
                           transpose_conv2d::get_examples_zero_sized_nhwc_relaxed_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_quant8_2,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_quant8_2,
                           transpose_conv2d::get_examples_zero_sized_nhwc_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nhwc_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nhwc_float16_2,
                           transpose_conv2d::is_ignored_zero_sized_nhwc_float16_2,
                           transpose_conv2d::get_examples_zero_sized_nhwc_float16_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nhwc_float16_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nhwc_float16_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_2,
                           transpose_conv2d::is_ignored_zero_sized_nchw_2,
                           transpose_conv2d::get_examples_zero_sized_nchw_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_relaxed_2,
                           transpose_conv2d::is_ignored_zero_sized_nchw_relaxed_2,
                           transpose_conv2d::get_examples_zero_sized_nchw_relaxed_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_relaxed_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_quant8_2,
                           transpose_conv2d::is_ignored_zero_sized_nchw_quant8_2,
                           transpose_conv2d::get_examples_zero_sized_nchw_quant8_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_quant8_2());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_zero_sized_nchw_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_nchw_float16_2,
                           transpose_conv2d::is_ignored_zero_sized_nchw_float16_2,
                           transpose_conv2d::get_examples_zero_sized_nchw_float16_2());
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_nchw_float16_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_nchw_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_nchw_float16_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_relaxed_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_quant8_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nhwc_float16_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nhwc_float16_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nhwc_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nhwc_float16_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_relaxed_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_relaxed_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_relaxed_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_relaxed_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_quant8_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_quant8_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_quant8_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_quant8_2());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_float16_2) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2,
                           transpose_conv2d::is_ignored_zero_sized_dynamic_output_shape_nchw_float16_2,
                           transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2(), true);
}

TEST_F(ValidationTest, transpose_conv2d_zero_sized_dynamic_output_shape_nchw_float16_2) {
  const Model model = transpose_conv2d::createTestModel_zero_sized_dynamic_output_shape_nchw_float16_2();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_zero_sized_dynamic_output_shape_nchw_float16_2());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_5,
                           transpose_conv2d::is_ignored_nhwc_5,
                           transpose_conv2d::get_examples_nhwc_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_weight_as_input_5,
                           transpose_conv2d::is_ignored_nhwc_weight_as_input_5,
                           transpose_conv2d::get_examples_nhwc_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_5,
                           transpose_conv2d::is_ignored_nhwc_relaxed_5,
                           transpose_conv2d::get_examples_nhwc_relaxed_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_relaxed_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_5,
                           transpose_conv2d::is_ignored_nhwc_relaxed_weight_as_input_5,
                           transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_relaxed_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_relaxed_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_relaxed_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_5,
                           transpose_conv2d::is_ignored_nhwc_quant8_5,
                           transpose_conv2d::get_examples_nhwc_quant8_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_quant8_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_5,
                           transpose_conv2d::is_ignored_nhwc_quant8_weight_as_input_5,
                           transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_quant8_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_quant8_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_quant8_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_5,
                           transpose_conv2d::is_ignored_nhwc_float16_5,
                           transpose_conv2d::get_examples_nhwc_float16_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nhwc_float16_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_5,
                           transpose_conv2d::is_ignored_nhwc_float16_weight_as_input_5,
                           transpose_conv2d::get_examples_nhwc_float16_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nhwc_float16_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nhwc_float16_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nhwc_float16_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_5,
                           transpose_conv2d::is_ignored_nchw_5,
                           transpose_conv2d::get_examples_nchw_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_weight_as_input_5,
                           transpose_conv2d::is_ignored_nchw_weight_as_input_5,
                           transpose_conv2d::get_examples_nchw_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_5,
                           transpose_conv2d::is_ignored_nchw_relaxed_5,
                           transpose_conv2d::get_examples_nchw_relaxed_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_relaxed_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_5,
                           transpose_conv2d::is_ignored_nchw_relaxed_weight_as_input_5,
                           transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_relaxed_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_relaxed_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_relaxed_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_5,
                           transpose_conv2d::is_ignored_nchw_quant8_5,
                           transpose_conv2d::get_examples_nchw_quant8_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_quant8_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_5,
                           transpose_conv2d::is_ignored_nchw_quant8_weight_as_input_5,
                           transpose_conv2d::get_examples_nchw_quant8_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_quant8_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_quant8_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_quant8_weight_as_input_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_5,
                           transpose_conv2d::is_ignored_nchw_float16_5,
                           transpose_conv2d::get_examples_nchw_float16_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_5());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_nchw_float16_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_nchw_float16_weight_as_input_5,
                           transpose_conv2d::is_ignored_nchw_float16_weight_as_input_5,
                           transpose_conv2d::get_examples_nchw_float16_weight_as_input_5());
}

TEST_F(ValidationTest, transpose_conv2d_nchw_float16_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_nchw_float16_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_nchw_float16_weight_as_input_5());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_relaxed_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_relaxed_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_relaxed_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_relaxed_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_quant8_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_quant8_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_quant8_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_quant8_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nhwc_float16_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nhwc_float16_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nhwc_float16_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nhwc_float16_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_relaxed_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_relaxed_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_relaxed_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_relaxed_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_quant8_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_quant8_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_quant8_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_quant8_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_5());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_5) {
  generated_tests::Execute(device,
                           transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_5,
                           transpose_conv2d::is_ignored_dynamic_output_shape_nchw_float16_weight_as_input_5,
                           transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_5(), true);
}

TEST_F(ValidationTest, transpose_conv2d_dynamic_output_shape_nchw_float16_weight_as_input_5) {
  const Model model = transpose_conv2d::createTestModel_dynamic_output_shape_nchw_float16_weight_as_input_5();
  const std::vector<Request> requests = createRequests(transpose_conv2d::get_examples_dynamic_output_shape_nchw_float16_weight_as_input_5());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_conv2d_large.mod.py.
namespace transpose_conv2d_large {
// Generated transpose_conv2d_large test
#include "examples/transpose_conv2d_large.example.cpp"
// Generated model constructor
#include "vts_models/transpose_conv2d_large.model.cpp"
} // namespace transpose_conv2d_large

TEST_F(NeuralnetworksHidlTest, transpose_conv2d_large_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d_large::createTestModel_quant8,
                           transpose_conv2d_large::is_ignored_quant8,
                           transpose_conv2d_large::get_examples_quant8());
}

TEST_F(ValidationTest, transpose_conv2d_large_quant8) {
  const Model model = transpose_conv2d_large::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d_large::get_examples_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_conv2d_large_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d_large::createTestModel_channelQuant8,
                           transpose_conv2d_large::is_ignored_channelQuant8,
                           transpose_conv2d_large::get_examples_channelQuant8());
}

TEST_F(ValidationTest, transpose_conv2d_large_channelQuant8) {
  const Model model = transpose_conv2d_large::createTestModel_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d_large::get_examples_channelQuant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_large_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           transpose_conv2d_large::createTestModel_dynamic_output_shape_quant8,
                           transpose_conv2d_large::is_ignored_dynamic_output_shape_quant8,
                           transpose_conv2d_large::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_large_dynamic_output_shape_quant8) {
  const Model model = transpose_conv2d_large::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d_large::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_conv2d_large_dynamic_output_shape_channelQuant8) {
  generated_tests::Execute(device,
                           transpose_conv2d_large::createTestModel_dynamic_output_shape_channelQuant8,
                           transpose_conv2d_large::is_ignored_dynamic_output_shape_channelQuant8,
                           transpose_conv2d_large::get_examples_dynamic_output_shape_channelQuant8(), true);
}

TEST_F(ValidationTest, transpose_conv2d_large_dynamic_output_shape_channelQuant8) {
  const Model model = transpose_conv2d_large::createTestModel_dynamic_output_shape_channelQuant8();
  const std::vector<Request> requests = createRequests(transpose_conv2d_large::get_examples_dynamic_output_shape_channelQuant8());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_float16.mod.py.
namespace transpose_float16 {
// Generated transpose_float16 test
#include "examples/transpose_float16.example.cpp"
// Generated model constructor
#include "vts_models/transpose_float16.model.cpp"
} // namespace transpose_float16

TEST_F(NeuralnetworksHidlTest, transpose_float16) {
  generated_tests::Execute(device,
                           transpose_float16::createTestModel,
                           transpose_float16::is_ignored,
                           transpose_float16::get_examples());
}

TEST_F(ValidationTest, transpose_float16) {
  const Model model = transpose_float16::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_float16::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_float16_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_float16::createTestModel_dynamic_output_shape,
                           transpose_float16::is_ignored_dynamic_output_shape,
                           transpose_float16::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_float16_dynamic_output_shape) {
  const Model model = transpose_float16::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_float16::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_v1_2.mod.py.
namespace transpose_v1_2 {
// Generated transpose_v1_2 test
#include "examples/transpose_v1_2.example.cpp"
// Generated model constructor
#include "vts_models/transpose_v1_2.model.cpp"
} // namespace transpose_v1_2

TEST_F(NeuralnetworksHidlTest, transpose_v1_2) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel,
                           transpose_v1_2::is_ignored,
                           transpose_v1_2::get_examples());
}

TEST_F(ValidationTest, transpose_v1_2) {
  const Model model = transpose_v1_2::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_v1_2_relaxed) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_relaxed,
                           transpose_v1_2::is_ignored_relaxed,
                           transpose_v1_2::get_examples_relaxed());
}

TEST_F(ValidationTest, transpose_v1_2_relaxed) {
  const Model model = transpose_v1_2::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_v1_2_quant8) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_quant8,
                           transpose_v1_2::is_ignored_quant8,
                           transpose_v1_2::get_examples_quant8());
}

TEST_F(ValidationTest, transpose_v1_2_quant8) {
  const Model model = transpose_v1_2::createTestModel_quant8();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_quant8());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_dynamic_output_shape,
                           transpose_v1_2::is_ignored_dynamic_output_shape,
                           transpose_v1_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_v1_2_dynamic_output_shape) {
  const Model model = transpose_v1_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_dynamic_output_shape_relaxed,
                           transpose_v1_2::is_ignored_dynamic_output_shape_relaxed,
                           transpose_v1_2::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, transpose_v1_2_dynamic_output_shape_relaxed) {
  const Model model = transpose_v1_2::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_dynamic_output_shape_quant8,
                           transpose_v1_2::is_ignored_dynamic_output_shape_quant8,
                           transpose_v1_2::get_examples_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, transpose_v1_2_dynamic_output_shape_quant8) {
  const Model model = transpose_v1_2::createTestModel_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, transpose_v1_2_zero_sized) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized,
                           transpose_v1_2::is_ignored_zero_sized,
                           transpose_v1_2::get_examples_zero_sized());
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized) {
  const Model model = transpose_v1_2::createTestModel_zero_sized();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_v1_2_zero_sized_relaxed) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_relaxed,
                           transpose_v1_2::is_ignored_zero_sized_relaxed,
                           transpose_v1_2::get_examples_zero_sized_relaxed());
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_relaxed) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_relaxed();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_v1_2_zero_sized_quant8) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_quant8,
                           transpose_v1_2::is_ignored_zero_sized_quant8,
                           transpose_v1_2::get_examples_zero_sized_quant8());
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_quant8) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_quant8();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_quant8());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, transpose_v1_2_zero_sized_float16) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_float16,
                           transpose_v1_2::is_ignored_zero_sized_float16,
                           transpose_v1_2::get_examples_zero_sized_float16());
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_float16) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_float16();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_zero_sized_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape,
                           transpose_v1_2::is_ignored_zero_sized_dynamic_output_shape,
                           transpose_v1_2::get_examples_zero_sized_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_dynamic_output_shape) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed,
                           transpose_v1_2::is_ignored_zero_sized_dynamic_output_shape_relaxed,
                           transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_dynamic_output_shape_relaxed) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_zero_sized_dynamic_output_shape_quant8) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8,
                           transpose_v1_2::is_ignored_zero_sized_dynamic_output_shape_quant8,
                           transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8(), true);
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_dynamic_output_shape_quant8) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_quant8();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_quant8());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_v1_2_zero_sized_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16,
                           transpose_v1_2::is_ignored_zero_sized_dynamic_output_shape_float16,
                           transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, transpose_v1_2_zero_sized_dynamic_output_shape_float16) {
  const Model model = transpose_v1_2::createTestModel_zero_sized_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(transpose_v1_2::get_examples_zero_sized_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_1step.mod.py.
namespace unidirectional_sequence_lstm_1step {
// Generated unidirectional_sequence_lstm_1step test
#include "examples/unidirectional_sequence_lstm_1step.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_1step.model.cpp"
} // namespace unidirectional_sequence_lstm_1step

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_1step) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_1step::createTestModel,
                           unidirectional_sequence_lstm_1step::is_ignored,
                           unidirectional_sequence_lstm_1step::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_1step) {
  const Model model = unidirectional_sequence_lstm_1step::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_1step::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_1step_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_1step::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_1step::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_1step::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_1step_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_1step::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_1step::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_batch_major_norm_peephole_projection.mod.py.
namespace unidirectional_sequence_lstm_batch_major_norm_peephole_projection {
// Generated unidirectional_sequence_lstm_batch_major_norm_peephole_projection test
#include "examples/unidirectional_sequence_lstm_batch_major_norm_peephole_projection.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_batch_major_norm_peephole_projection.model.cpp"
} // namespace unidirectional_sequence_lstm_batch_major_norm_peephole_projection

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_batch_major_norm_peephole_projection) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::createTestModel,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::is_ignored,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_batch_major_norm_peephole_projection) {
  const Model model = unidirectional_sequence_lstm_batch_major_norm_peephole_projection::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_batch_major_norm_peephole_projection::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_batch_major_norm_peephole_projection_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_batch_major_norm_peephole_projection::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_batch_major_norm_peephole_projection_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_batch_major_norm_peephole_projection::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_batch_major_norm_peephole_projection::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_batch_major_peephole_projection_bias.mod.py.
namespace unidirectional_sequence_lstm_batch_major_peephole_projection_bias {
// Generated unidirectional_sequence_lstm_batch_major_peephole_projection_bias test
#include "examples/unidirectional_sequence_lstm_batch_major_peephole_projection_bias.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_batch_major_peephole_projection_bias.model.cpp"
} // namespace unidirectional_sequence_lstm_batch_major_peephole_projection_bias

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_batch_major_peephole_projection_bias) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::createTestModel,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::is_ignored,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_batch_major_peephole_projection_bias) {
  const Model model = unidirectional_sequence_lstm_batch_major_peephole_projection_bias::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_batch_major_peephole_projection_bias::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_batch_major_peephole_projection_bias_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_batch_major_peephole_projection_bias::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_batch_major_peephole_projection_bias_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_batch_major_peephole_projection_bias::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_batch_major_peephole_projection_bias::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_cifg_peephole.mod.py.
namespace unidirectional_sequence_lstm_cifg_peephole {
// Generated unidirectional_sequence_lstm_cifg_peephole test
#include "examples/unidirectional_sequence_lstm_cifg_peephole.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_cifg_peephole.model.cpp"
} // namespace unidirectional_sequence_lstm_cifg_peephole

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_cifg_peephole) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_cifg_peephole::createTestModel,
                           unidirectional_sequence_lstm_cifg_peephole::is_ignored,
                           unidirectional_sequence_lstm_cifg_peephole::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_cifg_peephole) {
  const Model model = unidirectional_sequence_lstm_cifg_peephole::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_cifg_peephole::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_cifg_peephole_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_cifg_peephole::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_cifg_peephole::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_cifg_peephole::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_cifg_peephole_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_cifg_peephole::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_cifg_peephole::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_f16_batch_major.mod.py.
namespace unidirectional_sequence_lstm_f16_batch_major {
// Generated unidirectional_sequence_lstm_f16_batch_major test
#include "examples/unidirectional_sequence_lstm_f16_batch_major.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_f16_batch_major.model.cpp"
} // namespace unidirectional_sequence_lstm_f16_batch_major

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_f16_batch_major) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_f16_batch_major::createTestModel,
                           unidirectional_sequence_lstm_f16_batch_major::is_ignored,
                           unidirectional_sequence_lstm_f16_batch_major::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_f16_batch_major) {
  const Model model = unidirectional_sequence_lstm_f16_batch_major::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_f16_batch_major::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_f16_batch_major_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_f16_batch_major::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_f16_batch_major::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_f16_batch_major::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_f16_batch_major_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_f16_batch_major::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_f16_batch_major::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_f16_norm_peephole_projection.mod.py.
namespace unidirectional_sequence_lstm_f16_norm_peephole_projection {
// Generated unidirectional_sequence_lstm_f16_norm_peephole_projection test
#include "examples/unidirectional_sequence_lstm_f16_norm_peephole_projection.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_f16_norm_peephole_projection.model.cpp"
} // namespace unidirectional_sequence_lstm_f16_norm_peephole_projection

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_f16_norm_peephole_projection) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::createTestModel,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::is_ignored,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_f16_norm_peephole_projection) {
  const Model model = unidirectional_sequence_lstm_f16_norm_peephole_projection::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_f16_norm_peephole_projection::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_f16_norm_peephole_projection_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_f16_norm_peephole_projection::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_f16_norm_peephole_projection_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_f16_norm_peephole_projection::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_f16_norm_peephole_projection::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_layer_norm_cifg_peephole.mod.py.
namespace unidirectional_sequence_lstm_layer_norm_cifg_peephole {
// Generated unidirectional_sequence_lstm_layer_norm_cifg_peephole test
#include "examples/unidirectional_sequence_lstm_layer_norm_cifg_peephole.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_layer_norm_cifg_peephole.model.cpp"
} // namespace unidirectional_sequence_lstm_layer_norm_cifg_peephole

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_relaxed,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored_relaxed,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_relaxed());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_relaxed) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_float16,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored_float16,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_float16());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_float16) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_float16();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape_relaxed,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored_dynamic_output_shape_relaxed,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape_relaxed) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape_float16,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::is_ignored_dynamic_output_shape_float16,
                           unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_layer_norm_cifg_peephole_dynamic_output_shape_float16) {
  const Model model = unidirectional_sequence_lstm_layer_norm_cifg_peephole::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_layer_norm_cifg_peephole::get_examples_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_lstm_norm_peephole_projection.mod.py.
namespace unidirectional_sequence_lstm_norm_peephole_projection {
// Generated unidirectional_sequence_lstm_norm_peephole_projection test
#include "examples/unidirectional_sequence_lstm_norm_peephole_projection.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_lstm_norm_peephole_projection.model.cpp"
} // namespace unidirectional_sequence_lstm_norm_peephole_projection

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_lstm_norm_peephole_projection) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_norm_peephole_projection::createTestModel,
                           unidirectional_sequence_lstm_norm_peephole_projection::is_ignored,
                           unidirectional_sequence_lstm_norm_peephole_projection::get_examples());
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_norm_peephole_projection) {
  const Model model = unidirectional_sequence_lstm_norm_peephole_projection::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_norm_peephole_projection::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_lstm_norm_peephole_projection_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_lstm_norm_peephole_projection::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_lstm_norm_peephole_projection::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_lstm_norm_peephole_projection::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_lstm_norm_peephole_projection_dynamic_output_shape) {
  const Model model = unidirectional_sequence_lstm_norm_peephole_projection::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_lstm_norm_peephole_projection::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: unidirectional_sequence_rnn.mod.py.
namespace unidirectional_sequence_rnn {
// Generated unidirectional_sequence_rnn test
#include "examples/unidirectional_sequence_rnn.example.cpp"
// Generated model constructor
#include "vts_models/unidirectional_sequence_rnn.model.cpp"
} // namespace unidirectional_sequence_rnn

TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel,
                           unidirectional_sequence_rnn::is_ignored,
                           unidirectional_sequence_rnn::get_examples_blackbox());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox) {
  const Model model = unidirectional_sequence_rnn::createTestModel();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_relaxed,
                           unidirectional_sequence_rnn::is_ignored_relaxed,
                           unidirectional_sequence_rnn::get_examples_blackbox_relaxed());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_relaxed) {
  const Model model = unidirectional_sequence_rnn::createTestModel_relaxed();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_float16,
                           unidirectional_sequence_rnn::is_ignored_float16,
                           unidirectional_sequence_rnn::get_examples_blackbox_float16());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_float16) {
  const Model model = unidirectional_sequence_rnn::createTestModel_float16();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape,
                           unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed,
                           unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape_relaxed) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16,
                           unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_dynamic_output_shape_float16) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox_time_major) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_2,
                           unidirectional_sequence_rnn::is_ignored_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major) {
  const Model model = unidirectional_sequence_rnn::createTestModel_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox_time_major_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_relaxed_2,
                           unidirectional_sequence_rnn::is_ignored_relaxed_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major_relaxed());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major_relaxed) {
  const Model model = unidirectional_sequence_rnn::createTestModel_relaxed_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major_relaxed());
  validateEverything(model, requests);
}


TEST_F(NeuralnetworksHidlTest, unidirectional_sequence_rnn_blackbox_time_major_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_float16_2,
                           unidirectional_sequence_rnn::is_ignored_float16_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major_float16());
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major_float16) {
  const Model model = unidirectional_sequence_rnn::createTestModel_float16_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major_float16());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_2,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_relaxed) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_2,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape_relaxed_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_relaxed(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_relaxed) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_relaxed_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_relaxed());
  validateEverything(model, requests);
}


#endif
#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_float16) {
  generated_tests::Execute(device,
                           unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_2,
                           unidirectional_sequence_rnn::is_ignored_dynamic_output_shape_float16_2,
                           unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_float16(), true);
}

TEST_F(ValidationTest, unidirectional_sequence_rnn_blackbox_time_major_dynamic_output_shape_float16) {
  const Model model = unidirectional_sequence_rnn::createTestModel_dynamic_output_shape_float16_2();
  const std::vector<Request> requests = createRequests(unidirectional_sequence_rnn::get_examples_blackbox_time_major_dynamic_output_shape_float16());
  validateEverything(model, requests);
}


#endif
