// clang-format off
// DO NOT EDIT;
// Generated by ml/nn/runtime/test/specs/generate_vts_test.sh
// Generated from: add_relaxed.mod.py.
namespace add_relaxed {
// Generated add_relaxed test
#include "examples/add_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/add_relaxed.model.cpp"
} // namespace add_relaxed

TEST_F(NeuralnetworksHidlTest, add_relaxed) {
  generated_tests::Execute(device,
                           add_relaxed::createTestModel,
                           add_relaxed::is_ignored,
                           add_relaxed::get_examples());
}

TEST_F(ValidationTest, add_relaxed) {
  const Model model = add_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(add_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, add_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           add_relaxed::createTestModel_dynamic_output_shape,
                           add_relaxed::is_ignored_dynamic_output_shape,
                           add_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, add_relaxed_dynamic_output_shape) {
  const Model model = add_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(add_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_1_relaxed.mod.py.
namespace avg_pool_float_1_relaxed {
// Generated avg_pool_float_1_relaxed test
#include "examples/avg_pool_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_1_relaxed.model.cpp"
} // namespace avg_pool_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, avg_pool_float_1_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_float_1_relaxed::createTestModel,
                           avg_pool_float_1_relaxed::is_ignored,
                           avg_pool_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_1_relaxed) {
  const Model model = avg_pool_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_1_relaxed::createTestModel_dynamic_output_shape,
                           avg_pool_float_1_relaxed::is_ignored_dynamic_output_shape,
                           avg_pool_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_1_relaxed_dynamic_output_shape) {
  const Model model = avg_pool_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_2_relaxed.mod.py.
namespace avg_pool_float_2_relaxed {
// Generated avg_pool_float_2_relaxed test
#include "examples/avg_pool_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_2_relaxed.model.cpp"
} // namespace avg_pool_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, avg_pool_float_2_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_float_2_relaxed::createTestModel,
                           avg_pool_float_2_relaxed::is_ignored,
                           avg_pool_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_2_relaxed) {
  const Model model = avg_pool_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_2_relaxed::createTestModel_dynamic_output_shape,
                           avg_pool_float_2_relaxed::is_ignored_dynamic_output_shape,
                           avg_pool_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_2_relaxed_dynamic_output_shape) {
  const Model model = avg_pool_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_3_relaxed.mod.py.
namespace avg_pool_float_3_relaxed {
// Generated avg_pool_float_3_relaxed test
#include "examples/avg_pool_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_3_relaxed.model.cpp"
} // namespace avg_pool_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, avg_pool_float_3_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_float_3_relaxed::createTestModel,
                           avg_pool_float_3_relaxed::is_ignored,
                           avg_pool_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_3_relaxed) {
  const Model model = avg_pool_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_3_relaxed::createTestModel_dynamic_output_shape,
                           avg_pool_float_3_relaxed::is_ignored_dynamic_output_shape,
                           avg_pool_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_3_relaxed_dynamic_output_shape) {
  const Model model = avg_pool_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_4_relaxed.mod.py.
namespace avg_pool_float_4_relaxed {
// Generated avg_pool_float_4_relaxed test
#include "examples/avg_pool_float_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_4_relaxed.model.cpp"
} // namespace avg_pool_float_4_relaxed

TEST_F(NeuralnetworksHidlTest, avg_pool_float_4_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_float_4_relaxed::createTestModel,
                           avg_pool_float_4_relaxed::is_ignored,
                           avg_pool_float_4_relaxed::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_4_relaxed) {
  const Model model = avg_pool_float_4_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_4_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_4_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_4_relaxed::createTestModel_dynamic_output_shape,
                           avg_pool_float_4_relaxed::is_ignored_dynamic_output_shape,
                           avg_pool_float_4_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_4_relaxed_dynamic_output_shape) {
  const Model model = avg_pool_float_4_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_4_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: avg_pool_float_5_relaxed.mod.py.
namespace avg_pool_float_5_relaxed {
// Generated avg_pool_float_5_relaxed test
#include "examples/avg_pool_float_5_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/avg_pool_float_5_relaxed.model.cpp"
} // namespace avg_pool_float_5_relaxed

TEST_F(NeuralnetworksHidlTest, avg_pool_float_5_relaxed) {
  generated_tests::Execute(device,
                           avg_pool_float_5_relaxed::createTestModel,
                           avg_pool_float_5_relaxed::is_ignored,
                           avg_pool_float_5_relaxed::get_examples());
}

TEST_F(ValidationTest, avg_pool_float_5_relaxed) {
  const Model model = avg_pool_float_5_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(avg_pool_float_5_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, avg_pool_float_5_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           avg_pool_float_5_relaxed::createTestModel_dynamic_output_shape,
                           avg_pool_float_5_relaxed::is_ignored_dynamic_output_shape,
                           avg_pool_float_5_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, avg_pool_float_5_relaxed_dynamic_output_shape) {
  const Model model = avg_pool_float_5_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(avg_pool_float_5_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space.mod.py.
namespace batch_to_space {
// Generated batch_to_space test
#include "examples/batch_to_space.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space.model.cpp"
} // namespace batch_to_space

TEST_F(NeuralnetworksHidlTest, batch_to_space) {
  generated_tests::Execute(device,
                           batch_to_space::createTestModel,
                           batch_to_space::is_ignored,
                           batch_to_space::get_examples());
}

TEST_F(ValidationTest, batch_to_space) {
  const Model model = batch_to_space::createTestModel();
  const std::vector<Request> requests = createRequests(batch_to_space::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_dynamic_output_shape) {
  generated_tests::Execute(device,
                           batch_to_space::createTestModel_dynamic_output_shape,
                           batch_to_space::is_ignored_dynamic_output_shape,
                           batch_to_space::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, batch_to_space_dynamic_output_shape) {
  const Model model = batch_to_space::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(batch_to_space::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space_float_1.mod.py.
namespace batch_to_space_float_1 {
// Generated batch_to_space_float_1 test
#include "examples/batch_to_space_float_1.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space_float_1.model.cpp"
} // namespace batch_to_space_float_1

TEST_F(NeuralnetworksHidlTest, batch_to_space_float_1) {
  generated_tests::Execute(device,
                           batch_to_space_float_1::createTestModel,
                           batch_to_space_float_1::is_ignored,
                           batch_to_space_float_1::get_examples());
}

TEST_F(ValidationTest, batch_to_space_float_1) {
  const Model model = batch_to_space_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(batch_to_space_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           batch_to_space_float_1::createTestModel_dynamic_output_shape,
                           batch_to_space_float_1::is_ignored_dynamic_output_shape,
                           batch_to_space_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, batch_to_space_float_1_dynamic_output_shape) {
  const Model model = batch_to_space_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(batch_to_space_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space_float_1_relaxed.mod.py.
namespace batch_to_space_float_1_relaxed {
// Generated batch_to_space_float_1_relaxed test
#include "examples/batch_to_space_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space_float_1_relaxed.model.cpp"
} // namespace batch_to_space_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, batch_to_space_float_1_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_float_1_relaxed::createTestModel,
                           batch_to_space_float_1_relaxed::is_ignored,
                           batch_to_space_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, batch_to_space_float_1_relaxed) {
  const Model model = batch_to_space_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(batch_to_space_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           batch_to_space_float_1_relaxed::createTestModel_dynamic_output_shape,
                           batch_to_space_float_1_relaxed::is_ignored_dynamic_output_shape,
                           batch_to_space_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, batch_to_space_float_1_relaxed_dynamic_output_shape) {
  const Model model = batch_to_space_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(batch_to_space_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space_quant8_1.mod.py.
namespace batch_to_space_quant8_1 {
// Generated batch_to_space_quant8_1 test
#include "examples/batch_to_space_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space_quant8_1.model.cpp"
} // namespace batch_to_space_quant8_1

TEST_F(NeuralnetworksHidlTest, batch_to_space_quant8_1) {
  generated_tests::Execute(device,
                           batch_to_space_quant8_1::createTestModel,
                           batch_to_space_quant8_1::is_ignored,
                           batch_to_space_quant8_1::get_examples());
}

TEST_F(ValidationTest, batch_to_space_quant8_1) {
  const Model model = batch_to_space_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(batch_to_space_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           batch_to_space_quant8_1::createTestModel_dynamic_output_shape,
                           batch_to_space_quant8_1::is_ignored_dynamic_output_shape,
                           batch_to_space_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, batch_to_space_quant8_1_dynamic_output_shape) {
  const Model model = batch_to_space_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(batch_to_space_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: batch_to_space_relaxed.mod.py.
namespace batch_to_space_relaxed {
// Generated batch_to_space_relaxed test
#include "examples/batch_to_space_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/batch_to_space_relaxed.model.cpp"
} // namespace batch_to_space_relaxed

TEST_F(NeuralnetworksHidlTest, batch_to_space_relaxed) {
  generated_tests::Execute(device,
                           batch_to_space_relaxed::createTestModel,
                           batch_to_space_relaxed::is_ignored,
                           batch_to_space_relaxed::get_examples());
}

TEST_F(ValidationTest, batch_to_space_relaxed) {
  const Model model = batch_to_space_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(batch_to_space_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, batch_to_space_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           batch_to_space_relaxed::createTestModel_dynamic_output_shape,
                           batch_to_space_relaxed::is_ignored_dynamic_output_shape,
                           batch_to_space_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, batch_to_space_relaxed_dynamic_output_shape) {
  const Model model = batch_to_space_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(batch_to_space_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_1_relaxed.mod.py.
namespace concat_float_1_relaxed {
// Generated concat_float_1_relaxed test
#include "examples/concat_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_1_relaxed.model.cpp"
} // namespace concat_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, concat_float_1_relaxed) {
  generated_tests::Execute(device,
                           concat_float_1_relaxed::createTestModel,
                           concat_float_1_relaxed::is_ignored,
                           concat_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, concat_float_1_relaxed) {
  const Model model = concat_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_1_relaxed::createTestModel_dynamic_output_shape,
                           concat_float_1_relaxed::is_ignored_dynamic_output_shape,
                           concat_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_1_relaxed_dynamic_output_shape) {
  const Model model = concat_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_2_relaxed.mod.py.
namespace concat_float_2_relaxed {
// Generated concat_float_2_relaxed test
#include "examples/concat_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_2_relaxed.model.cpp"
} // namespace concat_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, concat_float_2_relaxed) {
  generated_tests::Execute(device,
                           concat_float_2_relaxed::createTestModel,
                           concat_float_2_relaxed::is_ignored,
                           concat_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, concat_float_2_relaxed) {
  const Model model = concat_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_2_relaxed::createTestModel_dynamic_output_shape,
                           concat_float_2_relaxed::is_ignored_dynamic_output_shape,
                           concat_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_2_relaxed_dynamic_output_shape) {
  const Model model = concat_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: concat_float_3_relaxed.mod.py.
namespace concat_float_3_relaxed {
// Generated concat_float_3_relaxed test
#include "examples/concat_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/concat_float_3_relaxed.model.cpp"
} // namespace concat_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, concat_float_3_relaxed) {
  generated_tests::Execute(device,
                           concat_float_3_relaxed::createTestModel,
                           concat_float_3_relaxed::is_ignored,
                           concat_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, concat_float_3_relaxed) {
  const Model model = concat_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(concat_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, concat_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           concat_float_3_relaxed::createTestModel_dynamic_output_shape,
                           concat_float_3_relaxed::is_ignored_dynamic_output_shape,
                           concat_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, concat_float_3_relaxed_dynamic_output_shape) {
  const Model model = concat_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(concat_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_1_h3_w2_SAME_relaxed.mod.py.
namespace conv_1_h3_w2_SAME_relaxed {
// Generated conv_1_h3_w2_SAME_relaxed test
#include "examples/conv_1_h3_w2_SAME_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_1_h3_w2_SAME_relaxed.model.cpp"
} // namespace conv_1_h3_w2_SAME_relaxed

TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_SAME_relaxed) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME_relaxed::createTestModel,
                           conv_1_h3_w2_SAME_relaxed::is_ignored,
                           conv_1_h3_w2_SAME_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_relaxed) {
  const Model model = conv_1_h3_w2_SAME_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_SAME_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape,
                           conv_1_h3_w2_SAME_relaxed::is_ignored_dynamic_output_shape,
                           conv_1_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_relaxed_dynamic_output_shape) {
  const Model model = conv_1_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_SAME_relaxed_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME_relaxed::createTestModel_2,
                           conv_1_h3_w2_SAME_relaxed::is_ignored_2,
                           conv_1_h3_w2_SAME_relaxed::get_examples_2());
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_relaxed_2) {
  const Model model = conv_1_h3_w2_SAME_relaxed::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME_relaxed::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_SAME_relaxed_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape_2,
                           conv_1_h3_w2_SAME_relaxed::is_ignored_dynamic_output_shape_2,
                           conv_1_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_SAME_relaxed_dynamic_output_shape_2) {
  const Model model = conv_1_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_1_h3_w2_VALID_relaxed.mod.py.
namespace conv_1_h3_w2_VALID_relaxed {
// Generated conv_1_h3_w2_VALID_relaxed test
#include "examples/conv_1_h3_w2_VALID_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_1_h3_w2_VALID_relaxed.model.cpp"
} // namespace conv_1_h3_w2_VALID_relaxed

TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_VALID_relaxed) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID_relaxed::createTestModel,
                           conv_1_h3_w2_VALID_relaxed::is_ignored,
                           conv_1_h3_w2_VALID_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_relaxed) {
  const Model model = conv_1_h3_w2_VALID_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_VALID_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape,
                           conv_1_h3_w2_VALID_relaxed::is_ignored_dynamic_output_shape,
                           conv_1_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_relaxed_dynamic_output_shape) {
  const Model model = conv_1_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_1_h3_w2_VALID_relaxed_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID_relaxed::createTestModel_2,
                           conv_1_h3_w2_VALID_relaxed::is_ignored_2,
                           conv_1_h3_w2_VALID_relaxed::get_examples_2());
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_relaxed_2) {
  const Model model = conv_1_h3_w2_VALID_relaxed::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID_relaxed::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_1_h3_w2_VALID_relaxed_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_1_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape_2,
                           conv_1_h3_w2_VALID_relaxed::is_ignored_dynamic_output_shape_2,
                           conv_1_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_1_h3_w2_VALID_relaxed_dynamic_output_shape_2) {
  const Model model = conv_1_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_1_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_3_h3_w2_SAME_relaxed.mod.py.
namespace conv_3_h3_w2_SAME_relaxed {
// Generated conv_3_h3_w2_SAME_relaxed test
#include "examples/conv_3_h3_w2_SAME_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_3_h3_w2_SAME_relaxed.model.cpp"
} // namespace conv_3_h3_w2_SAME_relaxed

TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_SAME_relaxed) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME_relaxed::createTestModel,
                           conv_3_h3_w2_SAME_relaxed::is_ignored,
                           conv_3_h3_w2_SAME_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_relaxed) {
  const Model model = conv_3_h3_w2_SAME_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_SAME_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape,
                           conv_3_h3_w2_SAME_relaxed::is_ignored_dynamic_output_shape,
                           conv_3_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_relaxed_dynamic_output_shape) {
  const Model model = conv_3_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_SAME_relaxed_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME_relaxed::createTestModel_2,
                           conv_3_h3_w2_SAME_relaxed::is_ignored_2,
                           conv_3_h3_w2_SAME_relaxed::get_examples_2());
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_relaxed_2) {
  const Model model = conv_3_h3_w2_SAME_relaxed::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME_relaxed::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_SAME_relaxed_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape_2,
                           conv_3_h3_w2_SAME_relaxed::is_ignored_dynamic_output_shape_2,
                           conv_3_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_SAME_relaxed_dynamic_output_shape_2) {
  const Model model = conv_3_h3_w2_SAME_relaxed::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_SAME_relaxed::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_3_h3_w2_VALID_relaxed.mod.py.
namespace conv_3_h3_w2_VALID_relaxed {
// Generated conv_3_h3_w2_VALID_relaxed test
#include "examples/conv_3_h3_w2_VALID_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_3_h3_w2_VALID_relaxed.model.cpp"
} // namespace conv_3_h3_w2_VALID_relaxed

TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_VALID_relaxed) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID_relaxed::createTestModel,
                           conv_3_h3_w2_VALID_relaxed::is_ignored,
                           conv_3_h3_w2_VALID_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_relaxed) {
  const Model model = conv_3_h3_w2_VALID_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_VALID_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape,
                           conv_3_h3_w2_VALID_relaxed::is_ignored_dynamic_output_shape,
                           conv_3_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_relaxed_dynamic_output_shape) {
  const Model model = conv_3_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, conv_3_h3_w2_VALID_relaxed_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID_relaxed::createTestModel_2,
                           conv_3_h3_w2_VALID_relaxed::is_ignored_2,
                           conv_3_h3_w2_VALID_relaxed::get_examples_2());
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_relaxed_2) {
  const Model model = conv_3_h3_w2_VALID_relaxed::createTestModel_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID_relaxed::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_3_h3_w2_VALID_relaxed_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           conv_3_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape_2,
                           conv_3_h3_w2_VALID_relaxed::is_ignored_dynamic_output_shape_2,
                           conv_3_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, conv_3_h3_w2_VALID_relaxed_dynamic_output_shape_2) {
  const Model model = conv_3_h3_w2_VALID_relaxed::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(conv_3_h3_w2_VALID_relaxed::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_2_relaxed.mod.py.
namespace conv_float_2_relaxed {
// Generated conv_float_2_relaxed test
#include "examples/conv_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_2_relaxed.model.cpp"
} // namespace conv_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_2_relaxed) {
  generated_tests::Execute(device,
                           conv_float_2_relaxed::createTestModel,
                           conv_float_2_relaxed::is_ignored,
                           conv_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_2_relaxed) {
  const Model model = conv_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_2_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_2_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_2_relaxed_dynamic_output_shape) {
  const Model model = conv_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_channels_relaxed.mod.py.
namespace conv_float_channels_relaxed {
// Generated conv_float_channels_relaxed test
#include "examples/conv_float_channels_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_channels_relaxed.model.cpp"
} // namespace conv_float_channels_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_channels_relaxed) {
  generated_tests::Execute(device,
                           conv_float_channels_relaxed::createTestModel,
                           conv_float_channels_relaxed::is_ignored,
                           conv_float_channels_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_channels_relaxed) {
  const Model model = conv_float_channels_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_channels_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_channels_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_channels_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_channels_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_channels_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_channels_relaxed_dynamic_output_shape) {
  const Model model = conv_float_channels_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_channels_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_channels_weights_as_inputs_relaxed.mod.py.
namespace conv_float_channels_weights_as_inputs_relaxed {
// Generated conv_float_channels_weights_as_inputs_relaxed test
#include "examples/conv_float_channels_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_channels_weights_as_inputs_relaxed.model.cpp"
} // namespace conv_float_channels_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_channels_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           conv_float_channels_weights_as_inputs_relaxed::createTestModel,
                           conv_float_channels_weights_as_inputs_relaxed::is_ignored,
                           conv_float_channels_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_channels_weights_as_inputs_relaxed) {
  const Model model = conv_float_channels_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_channels_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_channels_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_channels_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_channels_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_channels_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_channels_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = conv_float_channels_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_channels_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_large_relaxed.mod.py.
namespace conv_float_large_relaxed {
// Generated conv_float_large_relaxed test
#include "examples/conv_float_large_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_large_relaxed.model.cpp"
} // namespace conv_float_large_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_large_relaxed) {
  generated_tests::Execute(device,
                           conv_float_large_relaxed::createTestModel,
                           conv_float_large_relaxed::is_ignored,
                           conv_float_large_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_large_relaxed) {
  const Model model = conv_float_large_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_large_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_large_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_large_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_large_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_large_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_large_relaxed_dynamic_output_shape) {
  const Model model = conv_float_large_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_large_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_large_weights_as_inputs_relaxed.mod.py.
namespace conv_float_large_weights_as_inputs_relaxed {
// Generated conv_float_large_weights_as_inputs_relaxed test
#include "examples/conv_float_large_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_large_weights_as_inputs_relaxed.model.cpp"
} // namespace conv_float_large_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_large_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           conv_float_large_weights_as_inputs_relaxed::createTestModel,
                           conv_float_large_weights_as_inputs_relaxed::is_ignored,
                           conv_float_large_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_large_weights_as_inputs_relaxed) {
  const Model model = conv_float_large_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_large_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_large_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = conv_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_relaxed.mod.py.
namespace conv_float_relaxed {
// Generated conv_float_relaxed test
#include "examples/conv_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_relaxed.model.cpp"
} // namespace conv_float_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_relaxed) {
  generated_tests::Execute(device,
                           conv_float_relaxed::createTestModel,
                           conv_float_relaxed::is_ignored,
                           conv_float_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_relaxed) {
  const Model model = conv_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_relaxed_dynamic_output_shape) {
  const Model model = conv_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: conv_float_weights_as_inputs_relaxed.mod.py.
namespace conv_float_weights_as_inputs_relaxed {
// Generated conv_float_weights_as_inputs_relaxed test
#include "examples/conv_float_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/conv_float_weights_as_inputs_relaxed.model.cpp"
} // namespace conv_float_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, conv_float_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           conv_float_weights_as_inputs_relaxed::createTestModel,
                           conv_float_weights_as_inputs_relaxed::is_ignored,
                           conv_float_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, conv_float_weights_as_inputs_relaxed) {
  const Model model = conv_float_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(conv_float_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, conv_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           conv_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           conv_float_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           conv_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, conv_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = conv_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(conv_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_1_relaxed.mod.py.
namespace depth_to_space_float_1_relaxed {
// Generated depth_to_space_float_1_relaxed test
#include "examples/depth_to_space_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_1_relaxed.model.cpp"
} // namespace depth_to_space_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_1_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_float_1_relaxed::createTestModel,
                           depth_to_space_float_1_relaxed::is_ignored,
                           depth_to_space_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_1_relaxed) {
  const Model model = depth_to_space_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_1_relaxed::createTestModel_dynamic_output_shape,
                           depth_to_space_float_1_relaxed::is_ignored_dynamic_output_shape,
                           depth_to_space_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_1_relaxed_dynamic_output_shape) {
  const Model model = depth_to_space_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_2_relaxed.mod.py.
namespace depth_to_space_float_2_relaxed {
// Generated depth_to_space_float_2_relaxed test
#include "examples/depth_to_space_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_2_relaxed.model.cpp"
} // namespace depth_to_space_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_2_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_float_2_relaxed::createTestModel,
                           depth_to_space_float_2_relaxed::is_ignored,
                           depth_to_space_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_2_relaxed) {
  const Model model = depth_to_space_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_2_relaxed::createTestModel_dynamic_output_shape,
                           depth_to_space_float_2_relaxed::is_ignored_dynamic_output_shape,
                           depth_to_space_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_2_relaxed_dynamic_output_shape) {
  const Model model = depth_to_space_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depth_to_space_float_3_relaxed.mod.py.
namespace depth_to_space_float_3_relaxed {
// Generated depth_to_space_float_3_relaxed test
#include "examples/depth_to_space_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depth_to_space_float_3_relaxed.model.cpp"
} // namespace depth_to_space_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, depth_to_space_float_3_relaxed) {
  generated_tests::Execute(device,
                           depth_to_space_float_3_relaxed::createTestModel,
                           depth_to_space_float_3_relaxed::is_ignored,
                           depth_to_space_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, depth_to_space_float_3_relaxed) {
  const Model model = depth_to_space_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depth_to_space_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depth_to_space_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depth_to_space_float_3_relaxed::createTestModel_dynamic_output_shape,
                           depth_to_space_float_3_relaxed::is_ignored_dynamic_output_shape,
                           depth_to_space_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depth_to_space_float_3_relaxed_dynamic_output_shape) {
  const Model model = depth_to_space_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depth_to_space_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_2_relaxed.mod.py.
namespace depthwise_conv2d_float_2_relaxed {
// Generated depthwise_conv2d_float_2_relaxed test
#include "examples/depthwise_conv2d_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_2_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_2_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_2_relaxed::createTestModel,
                           depthwise_conv2d_float_2_relaxed::is_ignored,
                           depthwise_conv2d_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_2_relaxed) {
  const Model model = depthwise_conv2d_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_2_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_2_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_2_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_2_relaxed.mod.py.
namespace depthwise_conv2d_float_large_2_relaxed {
// Generated depthwise_conv2d_float_large_2_relaxed test
#include "examples/depthwise_conv2d_float_large_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_2_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_large_2_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_2_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_relaxed::createTestModel,
                           depthwise_conv2d_float_large_2_relaxed::is_ignored,
                           depthwise_conv2d_float_large_2_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_relaxed) {
  const Model model = depthwise_conv2d_float_large_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_2_weights_as_inputs_relaxed.mod.py.
namespace depthwise_conv2d_float_large_2_weights_as_inputs_relaxed {
// Generated depthwise_conv2d_float_large_2_weights_as_inputs_relaxed test
#include "examples/depthwise_conv2d_float_large_2_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_2_weights_as_inputs_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_large_2_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_2_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::createTestModel,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::is_ignored,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_weights_as_inputs_relaxed) {
  const Model model = depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_2_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_2_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_2_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_relaxed.mod.py.
namespace depthwise_conv2d_float_large_relaxed {
// Generated depthwise_conv2d_float_large_relaxed test
#include "examples/depthwise_conv2d_float_large_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_large_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_relaxed::createTestModel,
                           depthwise_conv2d_float_large_relaxed::is_ignored,
                           depthwise_conv2d_float_large_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_relaxed) {
  const Model model = depthwise_conv2d_float_large_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_large_weights_as_inputs_relaxed.mod.py.
namespace depthwise_conv2d_float_large_weights_as_inputs_relaxed {
// Generated depthwise_conv2d_float_large_weights_as_inputs_relaxed test
#include "examples/depthwise_conv2d_float_large_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_large_weights_as_inputs_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_large_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_large_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::createTestModel,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::is_ignored,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_weights_as_inputs_relaxed) {
  const Model model = depthwise_conv2d_float_large_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_relaxed.mod.py.
namespace depthwise_conv2d_float_relaxed {
// Generated depthwise_conv2d_float_relaxed test
#include "examples/depthwise_conv2d_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_relaxed::createTestModel,
                           depthwise_conv2d_float_relaxed::is_ignored,
                           depthwise_conv2d_float_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_relaxed) {
  const Model model = depthwise_conv2d_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv2d_float_weights_as_inputs_relaxed.mod.py.
namespace depthwise_conv2d_float_weights_as_inputs_relaxed {
// Generated depthwise_conv2d_float_weights_as_inputs_relaxed test
#include "examples/depthwise_conv2d_float_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv2d_float_weights_as_inputs_relaxed.model.cpp"
} // namespace depthwise_conv2d_float_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv2d_float_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::createTestModel,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::is_ignored,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv2d_float_weights_as_inputs_relaxed) {
  const Model model = depthwise_conv2d_float_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv2d_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv2d_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv2d_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv2d_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv2d_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: depthwise_conv_relaxed.mod.py.
namespace depthwise_conv_relaxed {
// Generated depthwise_conv_relaxed test
#include "examples/depthwise_conv_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/depthwise_conv_relaxed.model.cpp"
} // namespace depthwise_conv_relaxed

TEST_F(NeuralnetworksHidlTest, depthwise_conv_relaxed) {
  generated_tests::Execute(device,
                           depthwise_conv_relaxed::createTestModel,
                           depthwise_conv_relaxed::is_ignored,
                           depthwise_conv_relaxed::get_examples());
}

TEST_F(ValidationTest, depthwise_conv_relaxed) {
  const Model model = depthwise_conv_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(depthwise_conv_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           depthwise_conv_relaxed::createTestModel_dynamic_output_shape,
                           depthwise_conv_relaxed::is_ignored_dynamic_output_shape,
                           depthwise_conv_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, depthwise_conv_relaxed_dynamic_output_shape) {
  const Model model = depthwise_conv_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(depthwise_conv_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
TEST_F(NeuralnetworksHidlTest, depthwise_conv_relaxed_2) {
  generated_tests::Execute(device,
                           depthwise_conv_relaxed::createTestModel_2,
                           depthwise_conv_relaxed::is_ignored_2,
                           depthwise_conv_relaxed::get_examples_2());
}

TEST_F(ValidationTest, depthwise_conv_relaxed_2) {
  const Model model = depthwise_conv_relaxed::createTestModel_2();
  const std::vector<Request> requests = createRequests(depthwise_conv_relaxed::get_examples_2());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, depthwise_conv_relaxed_dynamic_output_shape_2) {
  generated_tests::Execute(device,
                           depthwise_conv_relaxed::createTestModel_dynamic_output_shape_2,
                           depthwise_conv_relaxed::is_ignored_dynamic_output_shape_2,
                           depthwise_conv_relaxed::get_examples_dynamic_output_shape_2(), true);
}

TEST_F(ValidationTest, depthwise_conv_relaxed_dynamic_output_shape_2) {
  const Model model = depthwise_conv_relaxed::createTestModel_dynamic_output_shape_2();
  const std::vector<Request> requests = createRequests(depthwise_conv_relaxed::get_examples_dynamic_output_shape_2());
  validateEverything(model, requests);
}


#endif
// Generated from: dequantize_relaxed.mod.py.
namespace dequantize_relaxed {
// Generated dequantize_relaxed test
#include "examples/dequantize_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/dequantize_relaxed.model.cpp"
} // namespace dequantize_relaxed

TEST_F(NeuralnetworksHidlTest, dequantize_relaxed) {
  generated_tests::Execute(device,
                           dequantize_relaxed::createTestModel,
                           dequantize_relaxed::is_ignored,
                           dequantize_relaxed::get_examples());
}

TEST_F(ValidationTest, dequantize_relaxed) {
  const Model model = dequantize_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(dequantize_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, dequantize_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           dequantize_relaxed::createTestModel_dynamic_output_shape,
                           dequantize_relaxed::is_ignored_dynamic_output_shape,
                           dequantize_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, dequantize_relaxed_dynamic_output_shape) {
  const Model model = dequantize_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(dequantize_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: div.mod.py.
namespace div {
// Generated div test
#include "examples/div.example.cpp"
// Generated model constructor
#include "vts_models/div.model.cpp"
} // namespace div

TEST_F(NeuralnetworksHidlTest, div) {
  generated_tests::Execute(device,
                           div::createTestModel,
                           div::is_ignored,
                           div::get_examples());
}

TEST_F(ValidationTest, div) {
  const Model model = div::createTestModel();
  const std::vector<Request> requests = createRequests(div::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div::createTestModel_dynamic_output_shape,
                           div::is_ignored_dynamic_output_shape,
                           div::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_dynamic_output_shape) {
  const Model model = div::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: div_broadcast_float.mod.py.
namespace div_broadcast_float {
// Generated div_broadcast_float test
#include "examples/div_broadcast_float.example.cpp"
// Generated model constructor
#include "vts_models/div_broadcast_float.model.cpp"
} // namespace div_broadcast_float

TEST_F(NeuralnetworksHidlTest, div_broadcast_float) {
  generated_tests::Execute(device,
                           div_broadcast_float::createTestModel,
                           div_broadcast_float::is_ignored,
                           div_broadcast_float::get_examples());
}

TEST_F(ValidationTest, div_broadcast_float) {
  const Model model = div_broadcast_float::createTestModel();
  const std::vector<Request> requests = createRequests(div_broadcast_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_broadcast_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div_broadcast_float::createTestModel_dynamic_output_shape,
                           div_broadcast_float::is_ignored_dynamic_output_shape,
                           div_broadcast_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_broadcast_float_dynamic_output_shape) {
  const Model model = div_broadcast_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div_broadcast_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: div_broadcast_float_relaxed.mod.py.
namespace div_broadcast_float_relaxed {
// Generated div_broadcast_float_relaxed test
#include "examples/div_broadcast_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/div_broadcast_float_relaxed.model.cpp"
} // namespace div_broadcast_float_relaxed

TEST_F(NeuralnetworksHidlTest, div_broadcast_float_relaxed) {
  generated_tests::Execute(device,
                           div_broadcast_float_relaxed::createTestModel,
                           div_broadcast_float_relaxed::is_ignored,
                           div_broadcast_float_relaxed::get_examples());
}

TEST_F(ValidationTest, div_broadcast_float_relaxed) {
  const Model model = div_broadcast_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(div_broadcast_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_broadcast_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div_broadcast_float_relaxed::createTestModel_dynamic_output_shape,
                           div_broadcast_float_relaxed::is_ignored_dynamic_output_shape,
                           div_broadcast_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_broadcast_float_relaxed_dynamic_output_shape) {
  const Model model = div_broadcast_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div_broadcast_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: div_relaxed.mod.py.
namespace div_relaxed {
// Generated div_relaxed test
#include "examples/div_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/div_relaxed.model.cpp"
} // namespace div_relaxed

TEST_F(NeuralnetworksHidlTest, div_relaxed) {
  generated_tests::Execute(device,
                           div_relaxed::createTestModel,
                           div_relaxed::is_ignored,
                           div_relaxed::get_examples());
}

TEST_F(ValidationTest, div_relaxed) {
  const Model model = div_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(div_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, div_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           div_relaxed::createTestModel_dynamic_output_shape,
                           div_relaxed::is_ignored_dynamic_output_shape,
                           div_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, div_relaxed_dynamic_output_shape) {
  const Model model = div_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(div_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: embedding_lookup_relaxed.mod.py.
namespace embedding_lookup_relaxed {
// Generated embedding_lookup_relaxed test
#include "examples/embedding_lookup_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/embedding_lookup_relaxed.model.cpp"
} // namespace embedding_lookup_relaxed

TEST_F(NeuralnetworksHidlTest, embedding_lookup_relaxed) {
  generated_tests::Execute(device,
                           embedding_lookup_relaxed::createTestModel,
                           embedding_lookup_relaxed::is_ignored,
                           embedding_lookup_relaxed::get_examples());
}

TEST_F(ValidationTest, embedding_lookup_relaxed) {
  const Model model = embedding_lookup_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(embedding_lookup_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, embedding_lookup_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           embedding_lookup_relaxed::createTestModel_dynamic_output_shape,
                           embedding_lookup_relaxed::is_ignored_dynamic_output_shape,
                           embedding_lookup_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, embedding_lookup_relaxed_dynamic_output_shape) {
  const Model model = embedding_lookup_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(embedding_lookup_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: floor_relaxed.mod.py.
namespace floor_relaxed {
// Generated floor_relaxed test
#include "examples/floor_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/floor_relaxed.model.cpp"
} // namespace floor_relaxed

TEST_F(NeuralnetworksHidlTest, floor_relaxed) {
  generated_tests::Execute(device,
                           floor_relaxed::createTestModel,
                           floor_relaxed::is_ignored,
                           floor_relaxed::get_examples());
}

TEST_F(ValidationTest, floor_relaxed) {
  const Model model = floor_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(floor_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, floor_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           floor_relaxed::createTestModel_dynamic_output_shape,
                           floor_relaxed::is_ignored_dynamic_output_shape,
                           floor_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, floor_relaxed_dynamic_output_shape) {
  const Model model = floor_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(floor_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_2_relaxed.mod.py.
namespace fully_connected_float_2_relaxed {
// Generated fully_connected_float_2_relaxed test
#include "examples/fully_connected_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_2_relaxed.model.cpp"
} // namespace fully_connected_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_2_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_2_relaxed::createTestModel,
                           fully_connected_float_2_relaxed::is_ignored,
                           fully_connected_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_2_relaxed) {
  const Model model = fully_connected_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_2_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_2_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_2_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_4d_simple.mod.py.
namespace fully_connected_float_4d_simple {
// Generated fully_connected_float_4d_simple test
#include "examples/fully_connected_float_4d_simple.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_4d_simple.model.cpp"
} // namespace fully_connected_float_4d_simple

TEST_F(NeuralnetworksHidlTest, fully_connected_float_4d_simple) {
  generated_tests::Execute(device,
                           fully_connected_float_4d_simple::createTestModel,
                           fully_connected_float_4d_simple::is_ignored,
                           fully_connected_float_4d_simple::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_4d_simple) {
  const Model model = fully_connected_float_4d_simple::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_4d_simple::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_4d_simple_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_4d_simple::createTestModel_dynamic_output_shape,
                           fully_connected_float_4d_simple::is_ignored_dynamic_output_shape,
                           fully_connected_float_4d_simple::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_4d_simple_dynamic_output_shape) {
  const Model model = fully_connected_float_4d_simple::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_4d_simple::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_4d_simple_relaxed.mod.py.
namespace fully_connected_float_4d_simple_relaxed {
// Generated fully_connected_float_4d_simple_relaxed test
#include "examples/fully_connected_float_4d_simple_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_4d_simple_relaxed.model.cpp"
} // namespace fully_connected_float_4d_simple_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_4d_simple_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_4d_simple_relaxed::createTestModel,
                           fully_connected_float_4d_simple_relaxed::is_ignored,
                           fully_connected_float_4d_simple_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_4d_simple_relaxed) {
  const Model model = fully_connected_float_4d_simple_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_4d_simple_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_4d_simple_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_4d_simple_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_4d_simple_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_4d_simple_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_4d_simple_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_4d_simple_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_4d_simple_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_large_relaxed.mod.py.
namespace fully_connected_float_large_relaxed {
// Generated fully_connected_float_large_relaxed test
#include "examples/fully_connected_float_large_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_large_relaxed.model.cpp"
} // namespace fully_connected_float_large_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_large_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_large_relaxed::createTestModel,
                           fully_connected_float_large_relaxed::is_ignored,
                           fully_connected_float_large_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_large_relaxed) {
  const Model model = fully_connected_float_large_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_large_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_large_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_large_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_large_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_large_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_large_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_large_weights_as_inputs_relaxed.mod.py.
namespace fully_connected_float_large_weights_as_inputs_relaxed {
// Generated fully_connected_float_large_weights_as_inputs_relaxed test
#include "examples/fully_connected_float_large_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_large_weights_as_inputs_relaxed.model.cpp"
} // namespace fully_connected_float_large_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_large_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_large_weights_as_inputs_relaxed::createTestModel,
                           fully_connected_float_large_weights_as_inputs_relaxed::is_ignored,
                           fully_connected_float_large_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_large_weights_as_inputs_relaxed) {
  const Model model = fully_connected_float_large_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_large_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_large_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_large_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_large_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_relaxed.mod.py.
namespace fully_connected_float_relaxed {
// Generated fully_connected_float_relaxed test
#include "examples/fully_connected_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_relaxed.model.cpp"
} // namespace fully_connected_float_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_relaxed::createTestModel,
                           fully_connected_float_relaxed::is_ignored,
                           fully_connected_float_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_relaxed) {
  const Model model = fully_connected_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: fully_connected_float_weights_as_inputs_relaxed.mod.py.
namespace fully_connected_float_weights_as_inputs_relaxed {
// Generated fully_connected_float_weights_as_inputs_relaxed test
#include "examples/fully_connected_float_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/fully_connected_float_weights_as_inputs_relaxed.model.cpp"
} // namespace fully_connected_float_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, fully_connected_float_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           fully_connected_float_weights_as_inputs_relaxed::createTestModel,
                           fully_connected_float_weights_as_inputs_relaxed::is_ignored,
                           fully_connected_float_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, fully_connected_float_weights_as_inputs_relaxed) {
  const Model model = fully_connected_float_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(fully_connected_float_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, fully_connected_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           fully_connected_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           fully_connected_float_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           fully_connected_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, fully_connected_float_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = fully_connected_float_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(fully_connected_float_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: hashtable_lookup_float_relaxed.mod.py.
namespace hashtable_lookup_float_relaxed {
// Generated hashtable_lookup_float_relaxed test
#include "examples/hashtable_lookup_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/hashtable_lookup_float_relaxed.model.cpp"
} // namespace hashtable_lookup_float_relaxed

TEST_F(NeuralnetworksHidlTest, hashtable_lookup_float_relaxed) {
  generated_tests::Execute(device,
                           hashtable_lookup_float_relaxed::createTestModel,
                           hashtable_lookup_float_relaxed::is_ignored,
                           hashtable_lookup_float_relaxed::get_examples());
}

TEST_F(ValidationTest, hashtable_lookup_float_relaxed) {
  const Model model = hashtable_lookup_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(hashtable_lookup_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, hashtable_lookup_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           hashtable_lookup_float_relaxed::createTestModel_dynamic_output_shape,
                           hashtable_lookup_float_relaxed::is_ignored_dynamic_output_shape,
                           hashtable_lookup_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, hashtable_lookup_float_relaxed_dynamic_output_shape) {
  const Model model = hashtable_lookup_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(hashtable_lookup_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_2_relaxed.mod.py.
namespace l2_normalization_2_relaxed {
// Generated l2_normalization_2_relaxed test
#include "examples/l2_normalization_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_2_relaxed.model.cpp"
} // namespace l2_normalization_2_relaxed

TEST_F(NeuralnetworksHidlTest, l2_normalization_2_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_2_relaxed::createTestModel,
                           l2_normalization_2_relaxed::is_ignored,
                           l2_normalization_2_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_normalization_2_relaxed) {
  const Model model = l2_normalization_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization_2_relaxed::createTestModel_dynamic_output_shape,
                           l2_normalization_2_relaxed::is_ignored_dynamic_output_shape,
                           l2_normalization_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_2_relaxed_dynamic_output_shape) {
  const Model model = l2_normalization_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_large_relaxed.mod.py.
namespace l2_normalization_large_relaxed {
// Generated l2_normalization_large_relaxed test
#include "examples/l2_normalization_large_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_large_relaxed.model.cpp"
} // namespace l2_normalization_large_relaxed

TEST_F(NeuralnetworksHidlTest, l2_normalization_large_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_large_relaxed::createTestModel,
                           l2_normalization_large_relaxed::is_ignored,
                           l2_normalization_large_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_normalization_large_relaxed) {
  const Model model = l2_normalization_large_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization_large_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_large_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization_large_relaxed::createTestModel_dynamic_output_shape,
                           l2_normalization_large_relaxed::is_ignored_dynamic_output_shape,
                           l2_normalization_large_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_large_relaxed_dynamic_output_shape) {
  const Model model = l2_normalization_large_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization_large_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_normalization_relaxed.mod.py.
namespace l2_normalization_relaxed {
// Generated l2_normalization_relaxed test
#include "examples/l2_normalization_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_normalization_relaxed.model.cpp"
} // namespace l2_normalization_relaxed

TEST_F(NeuralnetworksHidlTest, l2_normalization_relaxed) {
  generated_tests::Execute(device,
                           l2_normalization_relaxed::createTestModel,
                           l2_normalization_relaxed::is_ignored,
                           l2_normalization_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_normalization_relaxed) {
  const Model model = l2_normalization_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_normalization_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_normalization_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_normalization_relaxed::createTestModel_dynamic_output_shape,
                           l2_normalization_relaxed::is_ignored_dynamic_output_shape,
                           l2_normalization_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_normalization_relaxed_dynamic_output_shape) {
  const Model model = l2_normalization_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_normalization_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float_2_relaxed.mod.py.
namespace l2_pool_float_2_relaxed {
// Generated l2_pool_float_2_relaxed test
#include "examples/l2_pool_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float_2_relaxed.model.cpp"
} // namespace l2_pool_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, l2_pool_float_2_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_float_2_relaxed::createTestModel,
                           l2_pool_float_2_relaxed::is_ignored,
                           l2_pool_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_pool_float_2_relaxed) {
  const Model model = l2_pool_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float_2_relaxed::createTestModel_dynamic_output_shape,
                           l2_pool_float_2_relaxed::is_ignored_dynamic_output_shape,
                           l2_pool_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_2_relaxed_dynamic_output_shape) {
  const Model model = l2_pool_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float_large_relaxed.mod.py.
namespace l2_pool_float_large_relaxed {
// Generated l2_pool_float_large_relaxed test
#include "examples/l2_pool_float_large_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float_large_relaxed.model.cpp"
} // namespace l2_pool_float_large_relaxed

TEST_F(NeuralnetworksHidlTest, l2_pool_float_large_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_float_large_relaxed::createTestModel,
                           l2_pool_float_large_relaxed::is_ignored,
                           l2_pool_float_large_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_pool_float_large_relaxed) {
  const Model model = l2_pool_float_large_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float_large_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_large_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float_large_relaxed::createTestModel_dynamic_output_shape,
                           l2_pool_float_large_relaxed::is_ignored_dynamic_output_shape,
                           l2_pool_float_large_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_large_relaxed_dynamic_output_shape) {
  const Model model = l2_pool_float_large_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float_large_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: l2_pool_float_relaxed.mod.py.
namespace l2_pool_float_relaxed {
// Generated l2_pool_float_relaxed test
#include "examples/l2_pool_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/l2_pool_float_relaxed.model.cpp"
} // namespace l2_pool_float_relaxed

TEST_F(NeuralnetworksHidlTest, l2_pool_float_relaxed) {
  generated_tests::Execute(device,
                           l2_pool_float_relaxed::createTestModel,
                           l2_pool_float_relaxed::is_ignored,
                           l2_pool_float_relaxed::get_examples());
}

TEST_F(ValidationTest, l2_pool_float_relaxed) {
  const Model model = l2_pool_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(l2_pool_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, l2_pool_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           l2_pool_float_relaxed::createTestModel_dynamic_output_shape,
                           l2_pool_float_relaxed::is_ignored_dynamic_output_shape,
                           l2_pool_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, l2_pool_float_relaxed_dynamic_output_shape) {
  const Model model = l2_pool_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(l2_pool_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_1_relaxed.mod.py.
namespace local_response_norm_float_1_relaxed {
// Generated local_response_norm_float_1_relaxed test
#include "examples/local_response_norm_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_1_relaxed.model.cpp"
} // namespace local_response_norm_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_1_relaxed) {
  generated_tests::Execute(device,
                           local_response_norm_float_1_relaxed::createTestModel,
                           local_response_norm_float_1_relaxed::is_ignored,
                           local_response_norm_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_1_relaxed) {
  const Model model = local_response_norm_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_1_relaxed::createTestModel_dynamic_output_shape,
                           local_response_norm_float_1_relaxed::is_ignored_dynamic_output_shape,
                           local_response_norm_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_1_relaxed_dynamic_output_shape) {
  const Model model = local_response_norm_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_2_relaxed.mod.py.
namespace local_response_norm_float_2_relaxed {
// Generated local_response_norm_float_2_relaxed test
#include "examples/local_response_norm_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_2_relaxed.model.cpp"
} // namespace local_response_norm_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_2_relaxed) {
  generated_tests::Execute(device,
                           local_response_norm_float_2_relaxed::createTestModel,
                           local_response_norm_float_2_relaxed::is_ignored,
                           local_response_norm_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_2_relaxed) {
  const Model model = local_response_norm_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_2_relaxed::createTestModel_dynamic_output_shape,
                           local_response_norm_float_2_relaxed::is_ignored_dynamic_output_shape,
                           local_response_norm_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_2_relaxed_dynamic_output_shape) {
  const Model model = local_response_norm_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_3_relaxed.mod.py.
namespace local_response_norm_float_3_relaxed {
// Generated local_response_norm_float_3_relaxed test
#include "examples/local_response_norm_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_3_relaxed.model.cpp"
} // namespace local_response_norm_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_3_relaxed) {
  generated_tests::Execute(device,
                           local_response_norm_float_3_relaxed::createTestModel,
                           local_response_norm_float_3_relaxed::is_ignored,
                           local_response_norm_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_3_relaxed) {
  const Model model = local_response_norm_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_3_relaxed::createTestModel_dynamic_output_shape,
                           local_response_norm_float_3_relaxed::is_ignored_dynamic_output_shape,
                           local_response_norm_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_3_relaxed_dynamic_output_shape) {
  const Model model = local_response_norm_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: local_response_norm_float_4_relaxed.mod.py.
namespace local_response_norm_float_4_relaxed {
// Generated local_response_norm_float_4_relaxed test
#include "examples/local_response_norm_float_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/local_response_norm_float_4_relaxed.model.cpp"
} // namespace local_response_norm_float_4_relaxed

TEST_F(NeuralnetworksHidlTest, local_response_norm_float_4_relaxed) {
  generated_tests::Execute(device,
                           local_response_norm_float_4_relaxed::createTestModel,
                           local_response_norm_float_4_relaxed::is_ignored,
                           local_response_norm_float_4_relaxed::get_examples());
}

TEST_F(ValidationTest, local_response_norm_float_4_relaxed) {
  const Model model = local_response_norm_float_4_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(local_response_norm_float_4_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, local_response_norm_float_4_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           local_response_norm_float_4_relaxed::createTestModel_dynamic_output_shape,
                           local_response_norm_float_4_relaxed::is_ignored_dynamic_output_shape,
                           local_response_norm_float_4_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, local_response_norm_float_4_relaxed_dynamic_output_shape) {
  const Model model = local_response_norm_float_4_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(local_response_norm_float_4_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_float_1_relaxed.mod.py.
namespace logistic_float_1_relaxed {
// Generated logistic_float_1_relaxed test
#include "examples/logistic_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/logistic_float_1_relaxed.model.cpp"
} // namespace logistic_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, logistic_float_1_relaxed) {
  generated_tests::Execute(device,
                           logistic_float_1_relaxed::createTestModel,
                           logistic_float_1_relaxed::is_ignored,
                           logistic_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, logistic_float_1_relaxed) {
  const Model model = logistic_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_float_1_relaxed::createTestModel_dynamic_output_shape,
                           logistic_float_1_relaxed::is_ignored_dynamic_output_shape,
                           logistic_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_float_1_relaxed_dynamic_output_shape) {
  const Model model = logistic_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: logistic_float_2_relaxed.mod.py.
namespace logistic_float_2_relaxed {
// Generated logistic_float_2_relaxed test
#include "examples/logistic_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/logistic_float_2_relaxed.model.cpp"
} // namespace logistic_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, logistic_float_2_relaxed) {
  generated_tests::Execute(device,
                           logistic_float_2_relaxed::createTestModel,
                           logistic_float_2_relaxed::is_ignored,
                           logistic_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, logistic_float_2_relaxed) {
  const Model model = logistic_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(logistic_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, logistic_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           logistic_float_2_relaxed::createTestModel_dynamic_output_shape,
                           logistic_float_2_relaxed::is_ignored_dynamic_output_shape,
                           logistic_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, logistic_float_2_relaxed_dynamic_output_shape) {
  const Model model = logistic_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(logistic_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_2_relaxed.mod.py.
namespace lsh_projection_2_relaxed {
// Generated lsh_projection_2_relaxed test
#include "examples/lsh_projection_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_2_relaxed.model.cpp"
} // namespace lsh_projection_2_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_2_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_2_relaxed::createTestModel,
                           lsh_projection_2_relaxed::is_ignored,
                           lsh_projection_2_relaxed::get_examples());
}

TEST_F(ValidationTest, lsh_projection_2_relaxed) {
  const Model model = lsh_projection_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_2_relaxed::createTestModel_dynamic_output_shape,
                           lsh_projection_2_relaxed::is_ignored_dynamic_output_shape,
                           lsh_projection_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_2_relaxed_dynamic_output_shape) {
  const Model model = lsh_projection_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_relaxed.mod.py.
namespace lsh_projection_relaxed {
// Generated lsh_projection_relaxed test
#include "examples/lsh_projection_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_relaxed.model.cpp"
} // namespace lsh_projection_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_relaxed::createTestModel,
                           lsh_projection_relaxed::is_ignored,
                           lsh_projection_relaxed::get_examples());
}

TEST_F(ValidationTest, lsh_projection_relaxed) {
  const Model model = lsh_projection_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_relaxed::createTestModel_dynamic_output_shape,
                           lsh_projection_relaxed::is_ignored_dynamic_output_shape,
                           lsh_projection_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_relaxed_dynamic_output_shape) {
  const Model model = lsh_projection_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lsh_projection_weights_as_inputs_relaxed.mod.py.
namespace lsh_projection_weights_as_inputs_relaxed {
// Generated lsh_projection_weights_as_inputs_relaxed test
#include "examples/lsh_projection_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lsh_projection_weights_as_inputs_relaxed.model.cpp"
} // namespace lsh_projection_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, lsh_projection_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           lsh_projection_weights_as_inputs_relaxed::createTestModel,
                           lsh_projection_weights_as_inputs_relaxed::is_ignored,
                           lsh_projection_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, lsh_projection_weights_as_inputs_relaxed) {
  const Model model = lsh_projection_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lsh_projection_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lsh_projection_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lsh_projection_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           lsh_projection_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           lsh_projection_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lsh_projection_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = lsh_projection_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lsh_projection_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_relaxed.mod.py.
namespace lstm2_relaxed {
// Generated lstm2_relaxed test
#include "examples/lstm2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_relaxed.model.cpp"
} // namespace lstm2_relaxed

TEST_F(NeuralnetworksHidlTest, lstm2_relaxed) {
  generated_tests::Execute(device,
                           lstm2_relaxed::createTestModel,
                           lstm2_relaxed::is_ignored,
                           lstm2_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm2_relaxed) {
  const Model model = lstm2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_relaxed::createTestModel_dynamic_output_shape,
                           lstm2_relaxed::is_ignored_dynamic_output_shape,
                           lstm2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_relaxed_dynamic_output_shape) {
  const Model model = lstm2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state2_relaxed.mod.py.
namespace lstm2_state2_relaxed {
// Generated lstm2_state2_relaxed test
#include "examples/lstm2_state2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state2_relaxed.model.cpp"
} // namespace lstm2_state2_relaxed

TEST_F(NeuralnetworksHidlTest, lstm2_state2_relaxed) {
  generated_tests::Execute(device,
                           lstm2_state2_relaxed::createTestModel,
                           lstm2_state2_relaxed::is_ignored,
                           lstm2_state2_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm2_state2_relaxed) {
  const Model model = lstm2_state2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state2_relaxed::createTestModel_dynamic_output_shape,
                           lstm2_state2_relaxed::is_ignored_dynamic_output_shape,
                           lstm2_state2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state2_relaxed_dynamic_output_shape) {
  const Model model = lstm2_state2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm2_state_relaxed.mod.py.
namespace lstm2_state_relaxed {
// Generated lstm2_state_relaxed test
#include "examples/lstm2_state_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm2_state_relaxed.model.cpp"
} // namespace lstm2_state_relaxed

TEST_F(NeuralnetworksHidlTest, lstm2_state_relaxed) {
  generated_tests::Execute(device,
                           lstm2_state_relaxed::createTestModel,
                           lstm2_state_relaxed::is_ignored,
                           lstm2_state_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm2_state_relaxed) {
  const Model model = lstm2_state_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm2_state_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm2_state_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm2_state_relaxed::createTestModel_dynamic_output_shape,
                           lstm2_state_relaxed::is_ignored_dynamic_output_shape,
                           lstm2_state_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm2_state_relaxed_dynamic_output_shape) {
  const Model model = lstm2_state_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm2_state_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_relaxed.mod.py.
namespace lstm3_relaxed {
// Generated lstm3_relaxed test
#include "examples/lstm3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_relaxed.model.cpp"
} // namespace lstm3_relaxed

TEST_F(NeuralnetworksHidlTest, lstm3_relaxed) {
  generated_tests::Execute(device,
                           lstm3_relaxed::createTestModel,
                           lstm3_relaxed::is_ignored,
                           lstm3_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm3_relaxed) {
  const Model model = lstm3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_relaxed::createTestModel_dynamic_output_shape,
                           lstm3_relaxed::is_ignored_dynamic_output_shape,
                           lstm3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_relaxed_dynamic_output_shape) {
  const Model model = lstm3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state2_relaxed.mod.py.
namespace lstm3_state2_relaxed {
// Generated lstm3_state2_relaxed test
#include "examples/lstm3_state2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state2_relaxed.model.cpp"
} // namespace lstm3_state2_relaxed

TEST_F(NeuralnetworksHidlTest, lstm3_state2_relaxed) {
  generated_tests::Execute(device,
                           lstm3_state2_relaxed::createTestModel,
                           lstm3_state2_relaxed::is_ignored,
                           lstm3_state2_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm3_state2_relaxed) {
  const Model model = lstm3_state2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state2_relaxed::createTestModel_dynamic_output_shape,
                           lstm3_state2_relaxed::is_ignored_dynamic_output_shape,
                           lstm3_state2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state2_relaxed_dynamic_output_shape) {
  const Model model = lstm3_state2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state3_relaxed.mod.py.
namespace lstm3_state3_relaxed {
// Generated lstm3_state3_relaxed test
#include "examples/lstm3_state3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state3_relaxed.model.cpp"
} // namespace lstm3_state3_relaxed

TEST_F(NeuralnetworksHidlTest, lstm3_state3_relaxed) {
  generated_tests::Execute(device,
                           lstm3_state3_relaxed::createTestModel,
                           lstm3_state3_relaxed::is_ignored,
                           lstm3_state3_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm3_state3_relaxed) {
  const Model model = lstm3_state3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state3_relaxed::createTestModel_dynamic_output_shape,
                           lstm3_state3_relaxed::is_ignored_dynamic_output_shape,
                           lstm3_state3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state3_relaxed_dynamic_output_shape) {
  const Model model = lstm3_state3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm3_state_relaxed.mod.py.
namespace lstm3_state_relaxed {
// Generated lstm3_state_relaxed test
#include "examples/lstm3_state_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm3_state_relaxed.model.cpp"
} // namespace lstm3_state_relaxed

TEST_F(NeuralnetworksHidlTest, lstm3_state_relaxed) {
  generated_tests::Execute(device,
                           lstm3_state_relaxed::createTestModel,
                           lstm3_state_relaxed::is_ignored,
                           lstm3_state_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm3_state_relaxed) {
  const Model model = lstm3_state_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm3_state_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm3_state_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm3_state_relaxed::createTestModel_dynamic_output_shape,
                           lstm3_state_relaxed::is_ignored_dynamic_output_shape,
                           lstm3_state_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm3_state_relaxed_dynamic_output_shape) {
  const Model model = lstm3_state_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm3_state_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_relaxed.mod.py.
namespace lstm_relaxed {
// Generated lstm_relaxed test
#include "examples/lstm_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm_relaxed.model.cpp"
} // namespace lstm_relaxed

TEST_F(NeuralnetworksHidlTest, lstm_relaxed) {
  generated_tests::Execute(device,
                           lstm_relaxed::createTestModel,
                           lstm_relaxed::is_ignored,
                           lstm_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm_relaxed) {
  const Model model = lstm_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_relaxed::createTestModel_dynamic_output_shape,
                           lstm_relaxed::is_ignored_dynamic_output_shape,
                           lstm_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_relaxed_dynamic_output_shape) {
  const Model model = lstm_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state2_relaxed.mod.py.
namespace lstm_state2_relaxed {
// Generated lstm_state2_relaxed test
#include "examples/lstm_state2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state2_relaxed.model.cpp"
} // namespace lstm_state2_relaxed

TEST_F(NeuralnetworksHidlTest, lstm_state2_relaxed) {
  generated_tests::Execute(device,
                           lstm_state2_relaxed::createTestModel,
                           lstm_state2_relaxed::is_ignored,
                           lstm_state2_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm_state2_relaxed) {
  const Model model = lstm_state2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state2_relaxed::createTestModel_dynamic_output_shape,
                           lstm_state2_relaxed::is_ignored_dynamic_output_shape,
                           lstm_state2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state2_relaxed_dynamic_output_shape) {
  const Model model = lstm_state2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: lstm_state_relaxed.mod.py.
namespace lstm_state_relaxed {
// Generated lstm_state_relaxed test
#include "examples/lstm_state_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/lstm_state_relaxed.model.cpp"
} // namespace lstm_state_relaxed

TEST_F(NeuralnetworksHidlTest, lstm_state_relaxed) {
  generated_tests::Execute(device,
                           lstm_state_relaxed::createTestModel,
                           lstm_state_relaxed::is_ignored,
                           lstm_state_relaxed::get_examples());
}

TEST_F(ValidationTest, lstm_state_relaxed) {
  const Model model = lstm_state_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(lstm_state_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, lstm_state_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           lstm_state_relaxed::createTestModel_dynamic_output_shape,
                           lstm_state_relaxed::is_ignored_dynamic_output_shape,
                           lstm_state_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, lstm_state_relaxed_dynamic_output_shape) {
  const Model model = lstm_state_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(lstm_state_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_1_relaxed.mod.py.
namespace max_pool_float_1_relaxed {
// Generated max_pool_float_1_relaxed test
#include "examples/max_pool_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_1_relaxed.model.cpp"
} // namespace max_pool_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, max_pool_float_1_relaxed) {
  generated_tests::Execute(device,
                           max_pool_float_1_relaxed::createTestModel,
                           max_pool_float_1_relaxed::is_ignored,
                           max_pool_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, max_pool_float_1_relaxed) {
  const Model model = max_pool_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_1_relaxed::createTestModel_dynamic_output_shape,
                           max_pool_float_1_relaxed::is_ignored_dynamic_output_shape,
                           max_pool_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_1_relaxed_dynamic_output_shape) {
  const Model model = max_pool_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_2_relaxed.mod.py.
namespace max_pool_float_2_relaxed {
// Generated max_pool_float_2_relaxed test
#include "examples/max_pool_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_2_relaxed.model.cpp"
} // namespace max_pool_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, max_pool_float_2_relaxed) {
  generated_tests::Execute(device,
                           max_pool_float_2_relaxed::createTestModel,
                           max_pool_float_2_relaxed::is_ignored,
                           max_pool_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, max_pool_float_2_relaxed) {
  const Model model = max_pool_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_2_relaxed::createTestModel_dynamic_output_shape,
                           max_pool_float_2_relaxed::is_ignored_dynamic_output_shape,
                           max_pool_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_2_relaxed_dynamic_output_shape) {
  const Model model = max_pool_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_3_relaxed.mod.py.
namespace max_pool_float_3_relaxed {
// Generated max_pool_float_3_relaxed test
#include "examples/max_pool_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_3_relaxed.model.cpp"
} // namespace max_pool_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, max_pool_float_3_relaxed) {
  generated_tests::Execute(device,
                           max_pool_float_3_relaxed::createTestModel,
                           max_pool_float_3_relaxed::is_ignored,
                           max_pool_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, max_pool_float_3_relaxed) {
  const Model model = max_pool_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_3_relaxed::createTestModel_dynamic_output_shape,
                           max_pool_float_3_relaxed::is_ignored_dynamic_output_shape,
                           max_pool_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_3_relaxed_dynamic_output_shape) {
  const Model model = max_pool_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: max_pool_float_4_relaxed.mod.py.
namespace max_pool_float_4_relaxed {
// Generated max_pool_float_4_relaxed test
#include "examples/max_pool_float_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/max_pool_float_4_relaxed.model.cpp"
} // namespace max_pool_float_4_relaxed

TEST_F(NeuralnetworksHidlTest, max_pool_float_4_relaxed) {
  generated_tests::Execute(device,
                           max_pool_float_4_relaxed::createTestModel,
                           max_pool_float_4_relaxed::is_ignored,
                           max_pool_float_4_relaxed::get_examples());
}

TEST_F(ValidationTest, max_pool_float_4_relaxed) {
  const Model model = max_pool_float_4_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(max_pool_float_4_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, max_pool_float_4_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           max_pool_float_4_relaxed::createTestModel_dynamic_output_shape,
                           max_pool_float_4_relaxed::is_ignored_dynamic_output_shape,
                           max_pool_float_4_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, max_pool_float_4_relaxed_dynamic_output_shape) {
  const Model model = max_pool_float_4_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(max_pool_float_4_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean.mod.py.
namespace mean {
// Generated mean test
#include "examples/mean.example.cpp"
// Generated model constructor
#include "vts_models/mean.model.cpp"
} // namespace mean

TEST_F(NeuralnetworksHidlTest, mean) {
  generated_tests::Execute(device,
                           mean::createTestModel,
                           mean::is_ignored,
                           mean::get_examples());
}

TEST_F(ValidationTest, mean) {
  const Model model = mean::createTestModel();
  const std::vector<Request> requests = createRequests(mean::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean::createTestModel_dynamic_output_shape,
                           mean::is_ignored_dynamic_output_shape,
                           mean::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_dynamic_output_shape) {
  const Model model = mean::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_float_1.mod.py.
namespace mean_float_1 {
// Generated mean_float_1 test
#include "examples/mean_float_1.example.cpp"
// Generated model constructor
#include "vts_models/mean_float_1.model.cpp"
} // namespace mean_float_1

TEST_F(NeuralnetworksHidlTest, mean_float_1) {
  generated_tests::Execute(device,
                           mean_float_1::createTestModel,
                           mean_float_1::is_ignored,
                           mean_float_1::get_examples());
}

TEST_F(ValidationTest, mean_float_1) {
  const Model model = mean_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(mean_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_float_1::createTestModel_dynamic_output_shape,
                           mean_float_1::is_ignored_dynamic_output_shape,
                           mean_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_float_1_dynamic_output_shape) {
  const Model model = mean_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_float_1_relaxed.mod.py.
namespace mean_float_1_relaxed {
// Generated mean_float_1_relaxed test
#include "examples/mean_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mean_float_1_relaxed.model.cpp"
} // namespace mean_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, mean_float_1_relaxed) {
  generated_tests::Execute(device,
                           mean_float_1_relaxed::createTestModel,
                           mean_float_1_relaxed::is_ignored,
                           mean_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, mean_float_1_relaxed) {
  const Model model = mean_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mean_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_float_1_relaxed::createTestModel_dynamic_output_shape,
                           mean_float_1_relaxed::is_ignored_dynamic_output_shape,
                           mean_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_float_1_relaxed_dynamic_output_shape) {
  const Model model = mean_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_float_2.mod.py.
namespace mean_float_2 {
// Generated mean_float_2 test
#include "examples/mean_float_2.example.cpp"
// Generated model constructor
#include "vts_models/mean_float_2.model.cpp"
} // namespace mean_float_2

TEST_F(NeuralnetworksHidlTest, mean_float_2) {
  generated_tests::Execute(device,
                           mean_float_2::createTestModel,
                           mean_float_2::is_ignored,
                           mean_float_2::get_examples());
}

TEST_F(ValidationTest, mean_float_2) {
  const Model model = mean_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(mean_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_float_2::createTestModel_dynamic_output_shape,
                           mean_float_2::is_ignored_dynamic_output_shape,
                           mean_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_float_2_dynamic_output_shape) {
  const Model model = mean_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_float_2_relaxed.mod.py.
namespace mean_float_2_relaxed {
// Generated mean_float_2_relaxed test
#include "examples/mean_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mean_float_2_relaxed.model.cpp"
} // namespace mean_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, mean_float_2_relaxed) {
  generated_tests::Execute(device,
                           mean_float_2_relaxed::createTestModel,
                           mean_float_2_relaxed::is_ignored,
                           mean_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, mean_float_2_relaxed) {
  const Model model = mean_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mean_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_float_2_relaxed::createTestModel_dynamic_output_shape,
                           mean_float_2_relaxed::is_ignored_dynamic_output_shape,
                           mean_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_float_2_relaxed_dynamic_output_shape) {
  const Model model = mean_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_quant8_1.mod.py.
namespace mean_quant8_1 {
// Generated mean_quant8_1 test
#include "examples/mean_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/mean_quant8_1.model.cpp"
} // namespace mean_quant8_1

TEST_F(NeuralnetworksHidlTest, mean_quant8_1) {
  generated_tests::Execute(device,
                           mean_quant8_1::createTestModel,
                           mean_quant8_1::is_ignored,
                           mean_quant8_1::get_examples());
}

TEST_F(ValidationTest, mean_quant8_1) {
  const Model model = mean_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(mean_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_quant8_1::createTestModel_dynamic_output_shape,
                           mean_quant8_1::is_ignored_dynamic_output_shape,
                           mean_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_quant8_1_dynamic_output_shape) {
  const Model model = mean_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_quant8_2.mod.py.
namespace mean_quant8_2 {
// Generated mean_quant8_2 test
#include "examples/mean_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/mean_quant8_2.model.cpp"
} // namespace mean_quant8_2

TEST_F(NeuralnetworksHidlTest, mean_quant8_2) {
  generated_tests::Execute(device,
                           mean_quant8_2::createTestModel,
                           mean_quant8_2::is_ignored,
                           mean_quant8_2::get_examples());
}

TEST_F(ValidationTest, mean_quant8_2) {
  const Model model = mean_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(mean_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_quant8_2::createTestModel_dynamic_output_shape,
                           mean_quant8_2::is_ignored_dynamic_output_shape,
                           mean_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_quant8_2_dynamic_output_shape) {
  const Model model = mean_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mean_relaxed.mod.py.
namespace mean_relaxed {
// Generated mean_relaxed test
#include "examples/mean_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mean_relaxed.model.cpp"
} // namespace mean_relaxed

TEST_F(NeuralnetworksHidlTest, mean_relaxed) {
  generated_tests::Execute(device,
                           mean_relaxed::createTestModel,
                           mean_relaxed::is_ignored,
                           mean_relaxed::get_examples());
}

TEST_F(ValidationTest, mean_relaxed) {
  const Model model = mean_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mean_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mean_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mean_relaxed::createTestModel_dynamic_output_shape,
                           mean_relaxed::is_ignored_dynamic_output_shape,
                           mean_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mean_relaxed_dynamic_output_shape) {
  const Model model = mean_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mean_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mobilenet_224_gender_basic_fixed_relaxed.mod.py.
namespace mobilenet_224_gender_basic_fixed_relaxed {
// Generated mobilenet_224_gender_basic_fixed_relaxed test
#include "examples/mobilenet_224_gender_basic_fixed_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mobilenet_224_gender_basic_fixed_relaxed.model.cpp"
} // namespace mobilenet_224_gender_basic_fixed_relaxed

TEST_F(NeuralnetworksHidlTest, mobilenet_224_gender_basic_fixed_relaxed) {
  generated_tests::Execute(device,
                           mobilenet_224_gender_basic_fixed_relaxed::createTestModel,
                           mobilenet_224_gender_basic_fixed_relaxed::is_ignored,
                           mobilenet_224_gender_basic_fixed_relaxed::get_examples());
}

TEST_F(ValidationTest, mobilenet_224_gender_basic_fixed_relaxed) {
  const Model model = mobilenet_224_gender_basic_fixed_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mobilenet_224_gender_basic_fixed_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mobilenet_224_gender_basic_fixed_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mobilenet_224_gender_basic_fixed_relaxed::createTestModel_dynamic_output_shape,
                           mobilenet_224_gender_basic_fixed_relaxed::is_ignored_dynamic_output_shape,
                           mobilenet_224_gender_basic_fixed_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mobilenet_224_gender_basic_fixed_relaxed_dynamic_output_shape) {
  const Model model = mobilenet_224_gender_basic_fixed_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mobilenet_224_gender_basic_fixed_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_relaxed.mod.py.
namespace mul_relaxed {
// Generated mul_relaxed test
#include "examples/mul_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mul_relaxed.model.cpp"
} // namespace mul_relaxed

TEST_F(NeuralnetworksHidlTest, mul_relaxed) {
  generated_tests::Execute(device,
                           mul_relaxed::createTestModel,
                           mul_relaxed::is_ignored,
                           mul_relaxed::get_examples());
}

TEST_F(ValidationTest, mul_relaxed) {
  const Model model = mul_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mul_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_relaxed::createTestModel_dynamic_output_shape,
                           mul_relaxed::is_ignored_dynamic_output_shape,
                           mul_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_relaxed_dynamic_output_shape) {
  const Model model = mul_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: mul_relu_relaxed.mod.py.
namespace mul_relu_relaxed {
// Generated mul_relu_relaxed test
#include "examples/mul_relu_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/mul_relu_relaxed.model.cpp"
} // namespace mul_relu_relaxed

TEST_F(NeuralnetworksHidlTest, mul_relu_relaxed) {
  generated_tests::Execute(device,
                           mul_relu_relaxed::createTestModel,
                           mul_relu_relaxed::is_ignored,
                           mul_relu_relaxed::get_examples());
}

TEST_F(ValidationTest, mul_relu_relaxed) {
  const Model model = mul_relu_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(mul_relu_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, mul_relu_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           mul_relu_relaxed::createTestModel_dynamic_output_shape,
                           mul_relu_relaxed::is_ignored_dynamic_output_shape,
                           mul_relu_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, mul_relu_relaxed_dynamic_output_shape) {
  const Model model = mul_relu_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(mul_relu_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad.mod.py.
namespace pad {
// Generated pad test
#include "examples/pad.example.cpp"
// Generated model constructor
#include "vts_models/pad.model.cpp"
} // namespace pad

TEST_F(NeuralnetworksHidlTest, pad) {
  generated_tests::Execute(device,
                           pad::createTestModel,
                           pad::is_ignored,
                           pad::get_examples());
}

TEST_F(ValidationTest, pad) {
  const Model model = pad::createTestModel();
  const std::vector<Request> requests = createRequests(pad::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad::createTestModel_dynamic_output_shape,
                           pad::is_ignored_dynamic_output_shape,
                           pad::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_dynamic_output_shape) {
  const Model model = pad::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_float_1.mod.py.
namespace pad_float_1 {
// Generated pad_float_1 test
#include "examples/pad_float_1.example.cpp"
// Generated model constructor
#include "vts_models/pad_float_1.model.cpp"
} // namespace pad_float_1

TEST_F(NeuralnetworksHidlTest, pad_float_1) {
  generated_tests::Execute(device,
                           pad_float_1::createTestModel,
                           pad_float_1::is_ignored,
                           pad_float_1::get_examples());
}

TEST_F(ValidationTest, pad_float_1) {
  const Model model = pad_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(pad_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_float_1::createTestModel_dynamic_output_shape,
                           pad_float_1::is_ignored_dynamic_output_shape,
                           pad_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_float_1_dynamic_output_shape) {
  const Model model = pad_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_float_1_relaxed.mod.py.
namespace pad_float_1_relaxed {
// Generated pad_float_1_relaxed test
#include "examples/pad_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/pad_float_1_relaxed.model.cpp"
} // namespace pad_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, pad_float_1_relaxed) {
  generated_tests::Execute(device,
                           pad_float_1_relaxed::createTestModel,
                           pad_float_1_relaxed::is_ignored,
                           pad_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, pad_float_1_relaxed) {
  const Model model = pad_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(pad_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_float_1_relaxed::createTestModel_dynamic_output_shape,
                           pad_float_1_relaxed::is_ignored_dynamic_output_shape,
                           pad_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_float_1_relaxed_dynamic_output_shape) {
  const Model model = pad_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: pad_relaxed.mod.py.
namespace pad_relaxed {
// Generated pad_relaxed test
#include "examples/pad_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/pad_relaxed.model.cpp"
} // namespace pad_relaxed

TEST_F(NeuralnetworksHidlTest, pad_relaxed) {
  generated_tests::Execute(device,
                           pad_relaxed::createTestModel,
                           pad_relaxed::is_ignored,
                           pad_relaxed::get_examples());
}

TEST_F(ValidationTest, pad_relaxed) {
  const Model model = pad_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(pad_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, pad_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           pad_relaxed::createTestModel_dynamic_output_shape,
                           pad_relaxed::is_ignored_dynamic_output_shape,
                           pad_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, pad_relaxed_dynamic_output_shape) {
  const Model model = pad_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(pad_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_float_1_relaxed.mod.py.
namespace relu1_float_1_relaxed {
// Generated relu1_float_1_relaxed test
#include "examples/relu1_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu1_float_1_relaxed.model.cpp"
} // namespace relu1_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, relu1_float_1_relaxed) {
  generated_tests::Execute(device,
                           relu1_float_1_relaxed::createTestModel,
                           relu1_float_1_relaxed::is_ignored,
                           relu1_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, relu1_float_1_relaxed) {
  const Model model = relu1_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_float_1_relaxed::createTestModel_dynamic_output_shape,
                           relu1_float_1_relaxed::is_ignored_dynamic_output_shape,
                           relu1_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_float_1_relaxed_dynamic_output_shape) {
  const Model model = relu1_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu1_float_2_relaxed.mod.py.
namespace relu1_float_2_relaxed {
// Generated relu1_float_2_relaxed test
#include "examples/relu1_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu1_float_2_relaxed.model.cpp"
} // namespace relu1_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, relu1_float_2_relaxed) {
  generated_tests::Execute(device,
                           relu1_float_2_relaxed::createTestModel,
                           relu1_float_2_relaxed::is_ignored,
                           relu1_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, relu1_float_2_relaxed) {
  const Model model = relu1_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu1_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu1_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu1_float_2_relaxed::createTestModel_dynamic_output_shape,
                           relu1_float_2_relaxed::is_ignored_dynamic_output_shape,
                           relu1_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu1_float_2_relaxed_dynamic_output_shape) {
  const Model model = relu1_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu1_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_float_1_relaxed.mod.py.
namespace relu6_float_1_relaxed {
// Generated relu6_float_1_relaxed test
#include "examples/relu6_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu6_float_1_relaxed.model.cpp"
} // namespace relu6_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, relu6_float_1_relaxed) {
  generated_tests::Execute(device,
                           relu6_float_1_relaxed::createTestModel,
                           relu6_float_1_relaxed::is_ignored,
                           relu6_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, relu6_float_1_relaxed) {
  const Model model = relu6_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_float_1_relaxed::createTestModel_dynamic_output_shape,
                           relu6_float_1_relaxed::is_ignored_dynamic_output_shape,
                           relu6_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_float_1_relaxed_dynamic_output_shape) {
  const Model model = relu6_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu6_float_2_relaxed.mod.py.
namespace relu6_float_2_relaxed {
// Generated relu6_float_2_relaxed test
#include "examples/relu6_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu6_float_2_relaxed.model.cpp"
} // namespace relu6_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, relu6_float_2_relaxed) {
  generated_tests::Execute(device,
                           relu6_float_2_relaxed::createTestModel,
                           relu6_float_2_relaxed::is_ignored,
                           relu6_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, relu6_float_2_relaxed) {
  const Model model = relu6_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu6_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu6_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu6_float_2_relaxed::createTestModel_dynamic_output_shape,
                           relu6_float_2_relaxed::is_ignored_dynamic_output_shape,
                           relu6_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu6_float_2_relaxed_dynamic_output_shape) {
  const Model model = relu6_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu6_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_float_1_relaxed.mod.py.
namespace relu_float_1_relaxed {
// Generated relu_float_1_relaxed test
#include "examples/relu_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu_float_1_relaxed.model.cpp"
} // namespace relu_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, relu_float_1_relaxed) {
  generated_tests::Execute(device,
                           relu_float_1_relaxed::createTestModel,
                           relu_float_1_relaxed::is_ignored,
                           relu_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, relu_float_1_relaxed) {
  const Model model = relu_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_float_1_relaxed::createTestModel_dynamic_output_shape,
                           relu_float_1_relaxed::is_ignored_dynamic_output_shape,
                           relu_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_float_1_relaxed_dynamic_output_shape) {
  const Model model = relu_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: relu_float_2_relaxed.mod.py.
namespace relu_float_2_relaxed {
// Generated relu_float_2_relaxed test
#include "examples/relu_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/relu_float_2_relaxed.model.cpp"
} // namespace relu_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, relu_float_2_relaxed) {
  generated_tests::Execute(device,
                           relu_float_2_relaxed::createTestModel,
                           relu_float_2_relaxed::is_ignored,
                           relu_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, relu_float_2_relaxed) {
  const Model model = relu_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(relu_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, relu_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           relu_float_2_relaxed::createTestModel_dynamic_output_shape,
                           relu_float_2_relaxed::is_ignored_dynamic_output_shape,
                           relu_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, relu_float_2_relaxed_dynamic_output_shape) {
  const Model model = relu_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(relu_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_relaxed.mod.py.
namespace reshape_relaxed {
// Generated reshape_relaxed test
#include "examples/reshape_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/reshape_relaxed.model.cpp"
} // namespace reshape_relaxed

TEST_F(NeuralnetworksHidlTest, reshape_relaxed) {
  generated_tests::Execute(device,
                           reshape_relaxed::createTestModel,
                           reshape_relaxed::is_ignored,
                           reshape_relaxed::get_examples());
}

TEST_F(ValidationTest, reshape_relaxed) {
  const Model model = reshape_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_relaxed::createTestModel_dynamic_output_shape,
                           reshape_relaxed::is_ignored_dynamic_output_shape,
                           reshape_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_relaxed_dynamic_output_shape) {
  const Model model = reshape_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: reshape_weights_as_inputs_relaxed.mod.py.
namespace reshape_weights_as_inputs_relaxed {
// Generated reshape_weights_as_inputs_relaxed test
#include "examples/reshape_weights_as_inputs_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/reshape_weights_as_inputs_relaxed.model.cpp"
} // namespace reshape_weights_as_inputs_relaxed

TEST_F(NeuralnetworksHidlTest, reshape_weights_as_inputs_relaxed) {
  generated_tests::Execute(device,
                           reshape_weights_as_inputs_relaxed::createTestModel,
                           reshape_weights_as_inputs_relaxed::is_ignored,
                           reshape_weights_as_inputs_relaxed::get_examples());
}

TEST_F(ValidationTest, reshape_weights_as_inputs_relaxed) {
  const Model model = reshape_weights_as_inputs_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(reshape_weights_as_inputs_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, reshape_weights_as_inputs_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           reshape_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape,
                           reshape_weights_as_inputs_relaxed::is_ignored_dynamic_output_shape,
                           reshape_weights_as_inputs_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, reshape_weights_as_inputs_relaxed_dynamic_output_shape) {
  const Model model = reshape_weights_as_inputs_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(reshape_weights_as_inputs_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_bilinear_2_relaxed.mod.py.
namespace resize_bilinear_2_relaxed {
// Generated resize_bilinear_2_relaxed test
#include "examples/resize_bilinear_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/resize_bilinear_2_relaxed.model.cpp"
} // namespace resize_bilinear_2_relaxed

TEST_F(NeuralnetworksHidlTest, resize_bilinear_2_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_2_relaxed::createTestModel,
                           resize_bilinear_2_relaxed::is_ignored,
                           resize_bilinear_2_relaxed::get_examples());
}

TEST_F(ValidationTest, resize_bilinear_2_relaxed) {
  const Model model = resize_bilinear_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(resize_bilinear_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           resize_bilinear_2_relaxed::createTestModel_dynamic_output_shape,
                           resize_bilinear_2_relaxed::is_ignored_dynamic_output_shape,
                           resize_bilinear_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, resize_bilinear_2_relaxed_dynamic_output_shape) {
  const Model model = resize_bilinear_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(resize_bilinear_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: resize_bilinear_relaxed.mod.py.
namespace resize_bilinear_relaxed {
// Generated resize_bilinear_relaxed test
#include "examples/resize_bilinear_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/resize_bilinear_relaxed.model.cpp"
} // namespace resize_bilinear_relaxed

TEST_F(NeuralnetworksHidlTest, resize_bilinear_relaxed) {
  generated_tests::Execute(device,
                           resize_bilinear_relaxed::createTestModel,
                           resize_bilinear_relaxed::is_ignored,
                           resize_bilinear_relaxed::get_examples());
}

TEST_F(ValidationTest, resize_bilinear_relaxed) {
  const Model model = resize_bilinear_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(resize_bilinear_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, resize_bilinear_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           resize_bilinear_relaxed::createTestModel_dynamic_output_shape,
                           resize_bilinear_relaxed::is_ignored_dynamic_output_shape,
                           resize_bilinear_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, resize_bilinear_relaxed_dynamic_output_shape) {
  const Model model = resize_bilinear_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(resize_bilinear_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: rnn_relaxed.mod.py.
namespace rnn_relaxed {
// Generated rnn_relaxed test
#include "examples/rnn_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/rnn_relaxed.model.cpp"
} // namespace rnn_relaxed

TEST_F(NeuralnetworksHidlTest, rnn_relaxed) {
  generated_tests::Execute(device,
                           rnn_relaxed::createTestModel,
                           rnn_relaxed::is_ignored,
                           rnn_relaxed::get_examples());
}

TEST_F(ValidationTest, rnn_relaxed) {
  const Model model = rnn_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(rnn_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rnn_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rnn_relaxed::createTestModel_dynamic_output_shape,
                           rnn_relaxed::is_ignored_dynamic_output_shape,
                           rnn_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rnn_relaxed_dynamic_output_shape) {
  const Model model = rnn_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rnn_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: rnn_state_relaxed.mod.py.
namespace rnn_state_relaxed {
// Generated rnn_state_relaxed test
#include "examples/rnn_state_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/rnn_state_relaxed.model.cpp"
} // namespace rnn_state_relaxed

TEST_F(NeuralnetworksHidlTest, rnn_state_relaxed) {
  generated_tests::Execute(device,
                           rnn_state_relaxed::createTestModel,
                           rnn_state_relaxed::is_ignored,
                           rnn_state_relaxed::get_examples());
}

TEST_F(ValidationTest, rnn_state_relaxed) {
  const Model model = rnn_state_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(rnn_state_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, rnn_state_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           rnn_state_relaxed::createTestModel_dynamic_output_shape,
                           rnn_state_relaxed::is_ignored_dynamic_output_shape,
                           rnn_state_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, rnn_state_relaxed_dynamic_output_shape) {
  const Model model = rnn_state_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(rnn_state_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_float_1_relaxed.mod.py.
namespace softmax_float_1_relaxed {
// Generated softmax_float_1_relaxed test
#include "examples/softmax_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/softmax_float_1_relaxed.model.cpp"
} // namespace softmax_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, softmax_float_1_relaxed) {
  generated_tests::Execute(device,
                           softmax_float_1_relaxed::createTestModel,
                           softmax_float_1_relaxed::is_ignored,
                           softmax_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, softmax_float_1_relaxed) {
  const Model model = softmax_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_float_1_relaxed::createTestModel_dynamic_output_shape,
                           softmax_float_1_relaxed::is_ignored_dynamic_output_shape,
                           softmax_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_float_1_relaxed_dynamic_output_shape) {
  const Model model = softmax_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: softmax_float_2_relaxed.mod.py.
namespace softmax_float_2_relaxed {
// Generated softmax_float_2_relaxed test
#include "examples/softmax_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/softmax_float_2_relaxed.model.cpp"
} // namespace softmax_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, softmax_float_2_relaxed) {
  generated_tests::Execute(device,
                           softmax_float_2_relaxed::createTestModel,
                           softmax_float_2_relaxed::is_ignored,
                           softmax_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, softmax_float_2_relaxed) {
  const Model model = softmax_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(softmax_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, softmax_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           softmax_float_2_relaxed::createTestModel_dynamic_output_shape,
                           softmax_float_2_relaxed::is_ignored_dynamic_output_shape,
                           softmax_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, softmax_float_2_relaxed_dynamic_output_shape) {
  const Model model = softmax_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(softmax_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch.mod.py.
namespace space_to_batch {
// Generated space_to_batch test
#include "examples/space_to_batch.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch.model.cpp"
} // namespace space_to_batch

TEST_F(NeuralnetworksHidlTest, space_to_batch) {
  generated_tests::Execute(device,
                           space_to_batch::createTestModel,
                           space_to_batch::is_ignored,
                           space_to_batch::get_examples());
}

TEST_F(ValidationTest, space_to_batch) {
  const Model model = space_to_batch::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch::createTestModel_dynamic_output_shape,
                           space_to_batch::is_ignored_dynamic_output_shape,
                           space_to_batch::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_dynamic_output_shape) {
  const Model model = space_to_batch::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_1.mod.py.
namespace space_to_batch_float_1 {
// Generated space_to_batch_float_1 test
#include "examples/space_to_batch_float_1.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_1.model.cpp"
} // namespace space_to_batch_float_1

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_1) {
  generated_tests::Execute(device,
                           space_to_batch_float_1::createTestModel,
                           space_to_batch_float_1::is_ignored,
                           space_to_batch_float_1::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_1) {
  const Model model = space_to_batch_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_1::createTestModel_dynamic_output_shape,
                           space_to_batch_float_1::is_ignored_dynamic_output_shape,
                           space_to_batch_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_1_dynamic_output_shape) {
  const Model model = space_to_batch_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_1_relaxed.mod.py.
namespace space_to_batch_float_1_relaxed {
// Generated space_to_batch_float_1_relaxed test
#include "examples/space_to_batch_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_1_relaxed.model.cpp"
} // namespace space_to_batch_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_1_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_float_1_relaxed::createTestModel,
                           space_to_batch_float_1_relaxed::is_ignored,
                           space_to_batch_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_1_relaxed) {
  const Model model = space_to_batch_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_1_relaxed::createTestModel_dynamic_output_shape,
                           space_to_batch_float_1_relaxed::is_ignored_dynamic_output_shape,
                           space_to_batch_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_1_relaxed_dynamic_output_shape) {
  const Model model = space_to_batch_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_2.mod.py.
namespace space_to_batch_float_2 {
// Generated space_to_batch_float_2 test
#include "examples/space_to_batch_float_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_2.model.cpp"
} // namespace space_to_batch_float_2

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_2) {
  generated_tests::Execute(device,
                           space_to_batch_float_2::createTestModel,
                           space_to_batch_float_2::is_ignored,
                           space_to_batch_float_2::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_2) {
  const Model model = space_to_batch_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_2::createTestModel_dynamic_output_shape,
                           space_to_batch_float_2::is_ignored_dynamic_output_shape,
                           space_to_batch_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_2_dynamic_output_shape) {
  const Model model = space_to_batch_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_2_relaxed.mod.py.
namespace space_to_batch_float_2_relaxed {
// Generated space_to_batch_float_2_relaxed test
#include "examples/space_to_batch_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_2_relaxed.model.cpp"
} // namespace space_to_batch_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_2_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_float_2_relaxed::createTestModel,
                           space_to_batch_float_2_relaxed::is_ignored,
                           space_to_batch_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_2_relaxed) {
  const Model model = space_to_batch_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_2_relaxed::createTestModel_dynamic_output_shape,
                           space_to_batch_float_2_relaxed::is_ignored_dynamic_output_shape,
                           space_to_batch_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_2_relaxed_dynamic_output_shape) {
  const Model model = space_to_batch_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_3.mod.py.
namespace space_to_batch_float_3 {
// Generated space_to_batch_float_3 test
#include "examples/space_to_batch_float_3.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_3.model.cpp"
} // namespace space_to_batch_float_3

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_3) {
  generated_tests::Execute(device,
                           space_to_batch_float_3::createTestModel,
                           space_to_batch_float_3::is_ignored,
                           space_to_batch_float_3::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_3) {
  const Model model = space_to_batch_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_3::createTestModel_dynamic_output_shape,
                           space_to_batch_float_3::is_ignored_dynamic_output_shape,
                           space_to_batch_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_3_dynamic_output_shape) {
  const Model model = space_to_batch_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_float_3_relaxed.mod.py.
namespace space_to_batch_float_3_relaxed {
// Generated space_to_batch_float_3_relaxed test
#include "examples/space_to_batch_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_float_3_relaxed.model.cpp"
} // namespace space_to_batch_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_batch_float_3_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_float_3_relaxed::createTestModel,
                           space_to_batch_float_3_relaxed::is_ignored,
                           space_to_batch_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_batch_float_3_relaxed) {
  const Model model = space_to_batch_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_float_3_relaxed::createTestModel_dynamic_output_shape,
                           space_to_batch_float_3_relaxed::is_ignored_dynamic_output_shape,
                           space_to_batch_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_float_3_relaxed_dynamic_output_shape) {
  const Model model = space_to_batch_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_quant8_1.mod.py.
namespace space_to_batch_quant8_1 {
// Generated space_to_batch_quant8_1 test
#include "examples/space_to_batch_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_quant8_1.model.cpp"
} // namespace space_to_batch_quant8_1

TEST_F(NeuralnetworksHidlTest, space_to_batch_quant8_1) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_1::createTestModel,
                           space_to_batch_quant8_1::is_ignored,
                           space_to_batch_quant8_1::get_examples());
}

TEST_F(ValidationTest, space_to_batch_quant8_1) {
  const Model model = space_to_batch_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_1::createTestModel_dynamic_output_shape,
                           space_to_batch_quant8_1::is_ignored_dynamic_output_shape,
                           space_to_batch_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_quant8_1_dynamic_output_shape) {
  const Model model = space_to_batch_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_quant8_2.mod.py.
namespace space_to_batch_quant8_2 {
// Generated space_to_batch_quant8_2 test
#include "examples/space_to_batch_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_quant8_2.model.cpp"
} // namespace space_to_batch_quant8_2

TEST_F(NeuralnetworksHidlTest, space_to_batch_quant8_2) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_2::createTestModel,
                           space_to_batch_quant8_2::is_ignored,
                           space_to_batch_quant8_2::get_examples());
}

TEST_F(ValidationTest, space_to_batch_quant8_2) {
  const Model model = space_to_batch_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_2::createTestModel_dynamic_output_shape,
                           space_to_batch_quant8_2::is_ignored_dynamic_output_shape,
                           space_to_batch_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_quant8_2_dynamic_output_shape) {
  const Model model = space_to_batch_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_quant8_3.mod.py.
namespace space_to_batch_quant8_3 {
// Generated space_to_batch_quant8_3 test
#include "examples/space_to_batch_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_quant8_3.model.cpp"
} // namespace space_to_batch_quant8_3

TEST_F(NeuralnetworksHidlTest, space_to_batch_quant8_3) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_3::createTestModel,
                           space_to_batch_quant8_3::is_ignored,
                           space_to_batch_quant8_3::get_examples());
}

TEST_F(ValidationTest, space_to_batch_quant8_3) {
  const Model model = space_to_batch_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_quant8_3::createTestModel_dynamic_output_shape,
                           space_to_batch_quant8_3::is_ignored_dynamic_output_shape,
                           space_to_batch_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_quant8_3_dynamic_output_shape) {
  const Model model = space_to_batch_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_batch_relaxed.mod.py.
namespace space_to_batch_relaxed {
// Generated space_to_batch_relaxed test
#include "examples/space_to_batch_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_batch_relaxed.model.cpp"
} // namespace space_to_batch_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_batch_relaxed) {
  generated_tests::Execute(device,
                           space_to_batch_relaxed::createTestModel,
                           space_to_batch_relaxed::is_ignored,
                           space_to_batch_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_batch_relaxed) {
  const Model model = space_to_batch_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_batch_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_batch_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_batch_relaxed::createTestModel_dynamic_output_shape,
                           space_to_batch_relaxed::is_ignored_dynamic_output_shape,
                           space_to_batch_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_batch_relaxed_dynamic_output_shape) {
  const Model model = space_to_batch_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_batch_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_1_relaxed.mod.py.
namespace space_to_depth_float_1_relaxed {
// Generated space_to_depth_float_1_relaxed test
#include "examples/space_to_depth_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_1_relaxed.model.cpp"
} // namespace space_to_depth_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_1_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_float_1_relaxed::createTestModel,
                           space_to_depth_float_1_relaxed::is_ignored,
                           space_to_depth_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_1_relaxed) {
  const Model model = space_to_depth_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_1_relaxed::createTestModel_dynamic_output_shape,
                           space_to_depth_float_1_relaxed::is_ignored_dynamic_output_shape,
                           space_to_depth_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_1_relaxed_dynamic_output_shape) {
  const Model model = space_to_depth_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_2_relaxed.mod.py.
namespace space_to_depth_float_2_relaxed {
// Generated space_to_depth_float_2_relaxed test
#include "examples/space_to_depth_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_2_relaxed.model.cpp"
} // namespace space_to_depth_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_2_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_float_2_relaxed::createTestModel,
                           space_to_depth_float_2_relaxed::is_ignored,
                           space_to_depth_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_2_relaxed) {
  const Model model = space_to_depth_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_2_relaxed::createTestModel_dynamic_output_shape,
                           space_to_depth_float_2_relaxed::is_ignored_dynamic_output_shape,
                           space_to_depth_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_2_relaxed_dynamic_output_shape) {
  const Model model = space_to_depth_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: space_to_depth_float_3_relaxed.mod.py.
namespace space_to_depth_float_3_relaxed {
// Generated space_to_depth_float_3_relaxed test
#include "examples/space_to_depth_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/space_to_depth_float_3_relaxed.model.cpp"
} // namespace space_to_depth_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, space_to_depth_float_3_relaxed) {
  generated_tests::Execute(device,
                           space_to_depth_float_3_relaxed::createTestModel,
                           space_to_depth_float_3_relaxed::is_ignored,
                           space_to_depth_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, space_to_depth_float_3_relaxed) {
  const Model model = space_to_depth_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(space_to_depth_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, space_to_depth_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           space_to_depth_float_3_relaxed::createTestModel_dynamic_output_shape,
                           space_to_depth_float_3_relaxed::is_ignored_dynamic_output_shape,
                           space_to_depth_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, space_to_depth_float_3_relaxed_dynamic_output_shape) {
  const Model model = space_to_depth_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(space_to_depth_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze.mod.py.
namespace squeeze {
// Generated squeeze test
#include "examples/squeeze.example.cpp"
// Generated model constructor
#include "vts_models/squeeze.model.cpp"
} // namespace squeeze

TEST_F(NeuralnetworksHidlTest, squeeze) {
  generated_tests::Execute(device,
                           squeeze::createTestModel,
                           squeeze::is_ignored,
                           squeeze::get_examples());
}

TEST_F(ValidationTest, squeeze) {
  const Model model = squeeze::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze::createTestModel_dynamic_output_shape,
                           squeeze::is_ignored_dynamic_output_shape,
                           squeeze::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_dynamic_output_shape) {
  const Model model = squeeze::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze_float_1.mod.py.
namespace squeeze_float_1 {
// Generated squeeze_float_1 test
#include "examples/squeeze_float_1.example.cpp"
// Generated model constructor
#include "vts_models/squeeze_float_1.model.cpp"
} // namespace squeeze_float_1

TEST_F(NeuralnetworksHidlTest, squeeze_float_1) {
  generated_tests::Execute(device,
                           squeeze_float_1::createTestModel,
                           squeeze_float_1::is_ignored,
                           squeeze_float_1::get_examples());
}

TEST_F(ValidationTest, squeeze_float_1) {
  const Model model = squeeze_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze_float_1::createTestModel_dynamic_output_shape,
                           squeeze_float_1::is_ignored_dynamic_output_shape,
                           squeeze_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_float_1_dynamic_output_shape) {
  const Model model = squeeze_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze_float_1_relaxed.mod.py.
namespace squeeze_float_1_relaxed {
// Generated squeeze_float_1_relaxed test
#include "examples/squeeze_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/squeeze_float_1_relaxed.model.cpp"
} // namespace squeeze_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, squeeze_float_1_relaxed) {
  generated_tests::Execute(device,
                           squeeze_float_1_relaxed::createTestModel,
                           squeeze_float_1_relaxed::is_ignored,
                           squeeze_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, squeeze_float_1_relaxed) {
  const Model model = squeeze_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze_float_1_relaxed::createTestModel_dynamic_output_shape,
                           squeeze_float_1_relaxed::is_ignored_dynamic_output_shape,
                           squeeze_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_float_1_relaxed_dynamic_output_shape) {
  const Model model = squeeze_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze_quant8_1.mod.py.
namespace squeeze_quant8_1 {
// Generated squeeze_quant8_1 test
#include "examples/squeeze_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/squeeze_quant8_1.model.cpp"
} // namespace squeeze_quant8_1

TEST_F(NeuralnetworksHidlTest, squeeze_quant8_1) {
  generated_tests::Execute(device,
                           squeeze_quant8_1::createTestModel,
                           squeeze_quant8_1::is_ignored,
                           squeeze_quant8_1::get_examples());
}

TEST_F(ValidationTest, squeeze_quant8_1) {
  const Model model = squeeze_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze_quant8_1::createTestModel_dynamic_output_shape,
                           squeeze_quant8_1::is_ignored_dynamic_output_shape,
                           squeeze_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_quant8_1_dynamic_output_shape) {
  const Model model = squeeze_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: squeeze_relaxed.mod.py.
namespace squeeze_relaxed {
// Generated squeeze_relaxed test
#include "examples/squeeze_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/squeeze_relaxed.model.cpp"
} // namespace squeeze_relaxed

TEST_F(NeuralnetworksHidlTest, squeeze_relaxed) {
  generated_tests::Execute(device,
                           squeeze_relaxed::createTestModel,
                           squeeze_relaxed::is_ignored,
                           squeeze_relaxed::get_examples());
}

TEST_F(ValidationTest, squeeze_relaxed) {
  const Model model = squeeze_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(squeeze_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, squeeze_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           squeeze_relaxed::createTestModel_dynamic_output_shape,
                           squeeze_relaxed::is_ignored_dynamic_output_shape,
                           squeeze_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, squeeze_relaxed_dynamic_output_shape) {
  const Model model = squeeze_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(squeeze_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice.mod.py.
namespace strided_slice {
// Generated strided_slice test
#include "examples/strided_slice.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice.model.cpp"
} // namespace strided_slice

TEST_F(NeuralnetworksHidlTest, strided_slice) {
  generated_tests::Execute(device,
                           strided_slice::createTestModel,
                           strided_slice::is_ignored,
                           strided_slice::get_examples());
}

TEST_F(ValidationTest, strided_slice) {
  const Model model = strided_slice::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice::createTestModel_dynamic_output_shape,
                           strided_slice::is_ignored_dynamic_output_shape,
                           strided_slice::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_dynamic_output_shape) {
  const Model model = strided_slice::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_1.mod.py.
namespace strided_slice_float_1 {
// Generated strided_slice_float_1 test
#include "examples/strided_slice_float_1.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_1.model.cpp"
} // namespace strided_slice_float_1

TEST_F(NeuralnetworksHidlTest, strided_slice_float_1) {
  generated_tests::Execute(device,
                           strided_slice_float_1::createTestModel,
                           strided_slice_float_1::is_ignored,
                           strided_slice_float_1::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_1) {
  const Model model = strided_slice_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_1::createTestModel_dynamic_output_shape,
                           strided_slice_float_1::is_ignored_dynamic_output_shape,
                           strided_slice_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_1_dynamic_output_shape) {
  const Model model = strided_slice_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_10.mod.py.
namespace strided_slice_float_10 {
// Generated strided_slice_float_10 test
#include "examples/strided_slice_float_10.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_10.model.cpp"
} // namespace strided_slice_float_10

TEST_F(NeuralnetworksHidlTest, strided_slice_float_10) {
  generated_tests::Execute(device,
                           strided_slice_float_10::createTestModel,
                           strided_slice_float_10::is_ignored,
                           strided_slice_float_10::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_10) {
  const Model model = strided_slice_float_10::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_10::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_10_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_10::createTestModel_dynamic_output_shape,
                           strided_slice_float_10::is_ignored_dynamic_output_shape,
                           strided_slice_float_10::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_10_dynamic_output_shape) {
  const Model model = strided_slice_float_10::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_10::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_10_relaxed.mod.py.
namespace strided_slice_float_10_relaxed {
// Generated strided_slice_float_10_relaxed test
#include "examples/strided_slice_float_10_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_10_relaxed.model.cpp"
} // namespace strided_slice_float_10_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_10_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_10_relaxed::createTestModel,
                           strided_slice_float_10_relaxed::is_ignored,
                           strided_slice_float_10_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_10_relaxed) {
  const Model model = strided_slice_float_10_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_10_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_10_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_10_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_10_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_10_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_10_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_10_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_10_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_11.mod.py.
namespace strided_slice_float_11 {
// Generated strided_slice_float_11 test
#include "examples/strided_slice_float_11.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_11.model.cpp"
} // namespace strided_slice_float_11

TEST_F(NeuralnetworksHidlTest, strided_slice_float_11) {
  generated_tests::Execute(device,
                           strided_slice_float_11::createTestModel,
                           strided_slice_float_11::is_ignored,
                           strided_slice_float_11::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_11) {
  const Model model = strided_slice_float_11::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_11::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_11_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_11::createTestModel_dynamic_output_shape,
                           strided_slice_float_11::is_ignored_dynamic_output_shape,
                           strided_slice_float_11::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_11_dynamic_output_shape) {
  const Model model = strided_slice_float_11::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_11::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_11_relaxed.mod.py.
namespace strided_slice_float_11_relaxed {
// Generated strided_slice_float_11_relaxed test
#include "examples/strided_slice_float_11_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_11_relaxed.model.cpp"
} // namespace strided_slice_float_11_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_11_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_11_relaxed::createTestModel,
                           strided_slice_float_11_relaxed::is_ignored,
                           strided_slice_float_11_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_11_relaxed) {
  const Model model = strided_slice_float_11_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_11_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_11_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_11_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_11_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_11_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_11_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_11_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_11_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_1_relaxed.mod.py.
namespace strided_slice_float_1_relaxed {
// Generated strided_slice_float_1_relaxed test
#include "examples/strided_slice_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_1_relaxed.model.cpp"
} // namespace strided_slice_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_1_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_1_relaxed::createTestModel,
                           strided_slice_float_1_relaxed::is_ignored,
                           strided_slice_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_1_relaxed) {
  const Model model = strided_slice_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_1_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_1_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_1_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_2.mod.py.
namespace strided_slice_float_2 {
// Generated strided_slice_float_2 test
#include "examples/strided_slice_float_2.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_2.model.cpp"
} // namespace strided_slice_float_2

TEST_F(NeuralnetworksHidlTest, strided_slice_float_2) {
  generated_tests::Execute(device,
                           strided_slice_float_2::createTestModel,
                           strided_slice_float_2::is_ignored,
                           strided_slice_float_2::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_2) {
  const Model model = strided_slice_float_2::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_2::createTestModel_dynamic_output_shape,
                           strided_slice_float_2::is_ignored_dynamic_output_shape,
                           strided_slice_float_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_2_dynamic_output_shape) {
  const Model model = strided_slice_float_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_2_relaxed.mod.py.
namespace strided_slice_float_2_relaxed {
// Generated strided_slice_float_2_relaxed test
#include "examples/strided_slice_float_2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_2_relaxed.model.cpp"
} // namespace strided_slice_float_2_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_2_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_2_relaxed::createTestModel,
                           strided_slice_float_2_relaxed::is_ignored,
                           strided_slice_float_2_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_2_relaxed) {
  const Model model = strided_slice_float_2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_2_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_2_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_2_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_3.mod.py.
namespace strided_slice_float_3 {
// Generated strided_slice_float_3 test
#include "examples/strided_slice_float_3.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_3.model.cpp"
} // namespace strided_slice_float_3

TEST_F(NeuralnetworksHidlTest, strided_slice_float_3) {
  generated_tests::Execute(device,
                           strided_slice_float_3::createTestModel,
                           strided_slice_float_3::is_ignored,
                           strided_slice_float_3::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_3) {
  const Model model = strided_slice_float_3::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_3::createTestModel_dynamic_output_shape,
                           strided_slice_float_3::is_ignored_dynamic_output_shape,
                           strided_slice_float_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_3_dynamic_output_shape) {
  const Model model = strided_slice_float_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_3_relaxed.mod.py.
namespace strided_slice_float_3_relaxed {
// Generated strided_slice_float_3_relaxed test
#include "examples/strided_slice_float_3_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_3_relaxed.model.cpp"
} // namespace strided_slice_float_3_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_3_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_3_relaxed::createTestModel,
                           strided_slice_float_3_relaxed::is_ignored,
                           strided_slice_float_3_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_3_relaxed) {
  const Model model = strided_slice_float_3_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_3_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_3_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_3_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_3_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_3_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_3_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_3_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_3_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_4.mod.py.
namespace strided_slice_float_4 {
// Generated strided_slice_float_4 test
#include "examples/strided_slice_float_4.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_4.model.cpp"
} // namespace strided_slice_float_4

TEST_F(NeuralnetworksHidlTest, strided_slice_float_4) {
  generated_tests::Execute(device,
                           strided_slice_float_4::createTestModel,
                           strided_slice_float_4::is_ignored,
                           strided_slice_float_4::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_4) {
  const Model model = strided_slice_float_4::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_4::createTestModel_dynamic_output_shape,
                           strided_slice_float_4::is_ignored_dynamic_output_shape,
                           strided_slice_float_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_4_dynamic_output_shape) {
  const Model model = strided_slice_float_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_4_relaxed.mod.py.
namespace strided_slice_float_4_relaxed {
// Generated strided_slice_float_4_relaxed test
#include "examples/strided_slice_float_4_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_4_relaxed.model.cpp"
} // namespace strided_slice_float_4_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_4_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_4_relaxed::createTestModel,
                           strided_slice_float_4_relaxed::is_ignored,
                           strided_slice_float_4_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_4_relaxed) {
  const Model model = strided_slice_float_4_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_4_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_4_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_4_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_4_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_4_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_4_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_4_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_4_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_5.mod.py.
namespace strided_slice_float_5 {
// Generated strided_slice_float_5 test
#include "examples/strided_slice_float_5.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_5.model.cpp"
} // namespace strided_slice_float_5

TEST_F(NeuralnetworksHidlTest, strided_slice_float_5) {
  generated_tests::Execute(device,
                           strided_slice_float_5::createTestModel,
                           strided_slice_float_5::is_ignored,
                           strided_slice_float_5::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_5) {
  const Model model = strided_slice_float_5::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_5::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_5_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_5::createTestModel_dynamic_output_shape,
                           strided_slice_float_5::is_ignored_dynamic_output_shape,
                           strided_slice_float_5::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_5_dynamic_output_shape) {
  const Model model = strided_slice_float_5::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_5::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_5_relaxed.mod.py.
namespace strided_slice_float_5_relaxed {
// Generated strided_slice_float_5_relaxed test
#include "examples/strided_slice_float_5_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_5_relaxed.model.cpp"
} // namespace strided_slice_float_5_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_5_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_5_relaxed::createTestModel,
                           strided_slice_float_5_relaxed::is_ignored,
                           strided_slice_float_5_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_5_relaxed) {
  const Model model = strided_slice_float_5_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_5_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_5_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_5_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_5_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_5_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_5_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_5_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_5_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_6.mod.py.
namespace strided_slice_float_6 {
// Generated strided_slice_float_6 test
#include "examples/strided_slice_float_6.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_6.model.cpp"
} // namespace strided_slice_float_6

TEST_F(NeuralnetworksHidlTest, strided_slice_float_6) {
  generated_tests::Execute(device,
                           strided_slice_float_6::createTestModel,
                           strided_slice_float_6::is_ignored,
                           strided_slice_float_6::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_6) {
  const Model model = strided_slice_float_6::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_6::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_6_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_6::createTestModel_dynamic_output_shape,
                           strided_slice_float_6::is_ignored_dynamic_output_shape,
                           strided_slice_float_6::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_6_dynamic_output_shape) {
  const Model model = strided_slice_float_6::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_6::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_6_relaxed.mod.py.
namespace strided_slice_float_6_relaxed {
// Generated strided_slice_float_6_relaxed test
#include "examples/strided_slice_float_6_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_6_relaxed.model.cpp"
} // namespace strided_slice_float_6_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_6_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_6_relaxed::createTestModel,
                           strided_slice_float_6_relaxed::is_ignored,
                           strided_slice_float_6_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_6_relaxed) {
  const Model model = strided_slice_float_6_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_6_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_6_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_6_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_6_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_6_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_6_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_6_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_6_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_7.mod.py.
namespace strided_slice_float_7 {
// Generated strided_slice_float_7 test
#include "examples/strided_slice_float_7.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_7.model.cpp"
} // namespace strided_slice_float_7

TEST_F(NeuralnetworksHidlTest, strided_slice_float_7) {
  generated_tests::Execute(device,
                           strided_slice_float_7::createTestModel,
                           strided_slice_float_7::is_ignored,
                           strided_slice_float_7::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_7) {
  const Model model = strided_slice_float_7::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_7::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_7_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_7::createTestModel_dynamic_output_shape,
                           strided_slice_float_7::is_ignored_dynamic_output_shape,
                           strided_slice_float_7::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_7_dynamic_output_shape) {
  const Model model = strided_slice_float_7::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_7::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_7_relaxed.mod.py.
namespace strided_slice_float_7_relaxed {
// Generated strided_slice_float_7_relaxed test
#include "examples/strided_slice_float_7_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_7_relaxed.model.cpp"
} // namespace strided_slice_float_7_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_7_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_7_relaxed::createTestModel,
                           strided_slice_float_7_relaxed::is_ignored,
                           strided_slice_float_7_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_7_relaxed) {
  const Model model = strided_slice_float_7_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_7_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_7_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_7_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_7_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_7_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_7_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_7_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_7_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_8.mod.py.
namespace strided_slice_float_8 {
// Generated strided_slice_float_8 test
#include "examples/strided_slice_float_8.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_8.model.cpp"
} // namespace strided_slice_float_8

TEST_F(NeuralnetworksHidlTest, strided_slice_float_8) {
  generated_tests::Execute(device,
                           strided_slice_float_8::createTestModel,
                           strided_slice_float_8::is_ignored,
                           strided_slice_float_8::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_8) {
  const Model model = strided_slice_float_8::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_8::createTestModel_dynamic_output_shape,
                           strided_slice_float_8::is_ignored_dynamic_output_shape,
                           strided_slice_float_8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_8_dynamic_output_shape) {
  const Model model = strided_slice_float_8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_8_relaxed.mod.py.
namespace strided_slice_float_8_relaxed {
// Generated strided_slice_float_8_relaxed test
#include "examples/strided_slice_float_8_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_8_relaxed.model.cpp"
} // namespace strided_slice_float_8_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_8_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_8_relaxed::createTestModel,
                           strided_slice_float_8_relaxed::is_ignored,
                           strided_slice_float_8_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_8_relaxed) {
  const Model model = strided_slice_float_8_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_8_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_8_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_8_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_8_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_8_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_8_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_8_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_8_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_9.mod.py.
namespace strided_slice_float_9 {
// Generated strided_slice_float_9 test
#include "examples/strided_slice_float_9.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_9.model.cpp"
} // namespace strided_slice_float_9

TEST_F(NeuralnetworksHidlTest, strided_slice_float_9) {
  generated_tests::Execute(device,
                           strided_slice_float_9::createTestModel,
                           strided_slice_float_9::is_ignored,
                           strided_slice_float_9::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_9) {
  const Model model = strided_slice_float_9::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_9::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_9_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_9::createTestModel_dynamic_output_shape,
                           strided_slice_float_9::is_ignored_dynamic_output_shape,
                           strided_slice_float_9::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_9_dynamic_output_shape) {
  const Model model = strided_slice_float_9::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_9::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_float_9_relaxed.mod.py.
namespace strided_slice_float_9_relaxed {
// Generated strided_slice_float_9_relaxed test
#include "examples/strided_slice_float_9_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_float_9_relaxed.model.cpp"
} // namespace strided_slice_float_9_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_float_9_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_float_9_relaxed::createTestModel,
                           strided_slice_float_9_relaxed::is_ignored,
                           strided_slice_float_9_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_float_9_relaxed) {
  const Model model = strided_slice_float_9_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_float_9_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_float_9_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_float_9_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_float_9_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_float_9_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_float_9_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_float_9_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_float_9_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_qaunt8_10.mod.py.
namespace strided_slice_qaunt8_10 {
// Generated strided_slice_qaunt8_10 test
#include "examples/strided_slice_qaunt8_10.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_qaunt8_10.model.cpp"
} // namespace strided_slice_qaunt8_10

TEST_F(NeuralnetworksHidlTest, strided_slice_qaunt8_10) {
  generated_tests::Execute(device,
                           strided_slice_qaunt8_10::createTestModel,
                           strided_slice_qaunt8_10::is_ignored,
                           strided_slice_qaunt8_10::get_examples());
}

TEST_F(ValidationTest, strided_slice_qaunt8_10) {
  const Model model = strided_slice_qaunt8_10::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_qaunt8_10::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_qaunt8_10_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_qaunt8_10::createTestModel_dynamic_output_shape,
                           strided_slice_qaunt8_10::is_ignored_dynamic_output_shape,
                           strided_slice_qaunt8_10::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_qaunt8_10_dynamic_output_shape) {
  const Model model = strided_slice_qaunt8_10::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_qaunt8_10::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_qaunt8_11.mod.py.
namespace strided_slice_qaunt8_11 {
// Generated strided_slice_qaunt8_11 test
#include "examples/strided_slice_qaunt8_11.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_qaunt8_11.model.cpp"
} // namespace strided_slice_qaunt8_11

TEST_F(NeuralnetworksHidlTest, strided_slice_qaunt8_11) {
  generated_tests::Execute(device,
                           strided_slice_qaunt8_11::createTestModel,
                           strided_slice_qaunt8_11::is_ignored,
                           strided_slice_qaunt8_11::get_examples());
}

TEST_F(ValidationTest, strided_slice_qaunt8_11) {
  const Model model = strided_slice_qaunt8_11::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_qaunt8_11::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_qaunt8_11_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_qaunt8_11::createTestModel_dynamic_output_shape,
                           strided_slice_qaunt8_11::is_ignored_dynamic_output_shape,
                           strided_slice_qaunt8_11::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_qaunt8_11_dynamic_output_shape) {
  const Model model = strided_slice_qaunt8_11::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_qaunt8_11::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_1.mod.py.
namespace strided_slice_quant8_1 {
// Generated strided_slice_quant8_1 test
#include "examples/strided_slice_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_1.model.cpp"
} // namespace strided_slice_quant8_1

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_1) {
  generated_tests::Execute(device,
                           strided_slice_quant8_1::createTestModel,
                           strided_slice_quant8_1::is_ignored,
                           strided_slice_quant8_1::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_1) {
  const Model model = strided_slice_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_1::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_1::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_1_dynamic_output_shape) {
  const Model model = strided_slice_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_2.mod.py.
namespace strided_slice_quant8_2 {
// Generated strided_slice_quant8_2 test
#include "examples/strided_slice_quant8_2.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_2.model.cpp"
} // namespace strided_slice_quant8_2

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_2) {
  generated_tests::Execute(device,
                           strided_slice_quant8_2::createTestModel,
                           strided_slice_quant8_2::is_ignored,
                           strided_slice_quant8_2::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_2) {
  const Model model = strided_slice_quant8_2::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_2::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_2_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_2::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_2::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_2::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_2_dynamic_output_shape) {
  const Model model = strided_slice_quant8_2::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_2::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_3.mod.py.
namespace strided_slice_quant8_3 {
// Generated strided_slice_quant8_3 test
#include "examples/strided_slice_quant8_3.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_3.model.cpp"
} // namespace strided_slice_quant8_3

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_3) {
  generated_tests::Execute(device,
                           strided_slice_quant8_3::createTestModel,
                           strided_slice_quant8_3::is_ignored,
                           strided_slice_quant8_3::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_3) {
  const Model model = strided_slice_quant8_3::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_3::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_3_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_3::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_3::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_3::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_3_dynamic_output_shape) {
  const Model model = strided_slice_quant8_3::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_3::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_4.mod.py.
namespace strided_slice_quant8_4 {
// Generated strided_slice_quant8_4 test
#include "examples/strided_slice_quant8_4.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_4.model.cpp"
} // namespace strided_slice_quant8_4

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_4) {
  generated_tests::Execute(device,
                           strided_slice_quant8_4::createTestModel,
                           strided_slice_quant8_4::is_ignored,
                           strided_slice_quant8_4::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_4) {
  const Model model = strided_slice_quant8_4::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_4::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_4_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_4::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_4::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_4::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_4_dynamic_output_shape) {
  const Model model = strided_slice_quant8_4::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_4::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_5.mod.py.
namespace strided_slice_quant8_5 {
// Generated strided_slice_quant8_5 test
#include "examples/strided_slice_quant8_5.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_5.model.cpp"
} // namespace strided_slice_quant8_5

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_5) {
  generated_tests::Execute(device,
                           strided_slice_quant8_5::createTestModel,
                           strided_slice_quant8_5::is_ignored,
                           strided_slice_quant8_5::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_5) {
  const Model model = strided_slice_quant8_5::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_5::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_5_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_5::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_5::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_5::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_5_dynamic_output_shape) {
  const Model model = strided_slice_quant8_5::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_5::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_6.mod.py.
namespace strided_slice_quant8_6 {
// Generated strided_slice_quant8_6 test
#include "examples/strided_slice_quant8_6.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_6.model.cpp"
} // namespace strided_slice_quant8_6

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_6) {
  generated_tests::Execute(device,
                           strided_slice_quant8_6::createTestModel,
                           strided_slice_quant8_6::is_ignored,
                           strided_slice_quant8_6::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_6) {
  const Model model = strided_slice_quant8_6::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_6::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_6_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_6::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_6::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_6::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_6_dynamic_output_shape) {
  const Model model = strided_slice_quant8_6::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_6::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_7.mod.py.
namespace strided_slice_quant8_7 {
// Generated strided_slice_quant8_7 test
#include "examples/strided_slice_quant8_7.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_7.model.cpp"
} // namespace strided_slice_quant8_7

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_7) {
  generated_tests::Execute(device,
                           strided_slice_quant8_7::createTestModel,
                           strided_slice_quant8_7::is_ignored,
                           strided_slice_quant8_7::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_7) {
  const Model model = strided_slice_quant8_7::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_7::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_7_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_7::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_7::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_7::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_7_dynamic_output_shape) {
  const Model model = strided_slice_quant8_7::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_7::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_8.mod.py.
namespace strided_slice_quant8_8 {
// Generated strided_slice_quant8_8 test
#include "examples/strided_slice_quant8_8.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_8.model.cpp"
} // namespace strided_slice_quant8_8

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_8) {
  generated_tests::Execute(device,
                           strided_slice_quant8_8::createTestModel,
                           strided_slice_quant8_8::is_ignored,
                           strided_slice_quant8_8::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_8) {
  const Model model = strided_slice_quant8_8::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_8::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_8_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_8::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_8::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_8::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_8_dynamic_output_shape) {
  const Model model = strided_slice_quant8_8::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_8::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_quant8_9.mod.py.
namespace strided_slice_quant8_9 {
// Generated strided_slice_quant8_9 test
#include "examples/strided_slice_quant8_9.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_quant8_9.model.cpp"
} // namespace strided_slice_quant8_9

TEST_F(NeuralnetworksHidlTest, strided_slice_quant8_9) {
  generated_tests::Execute(device,
                           strided_slice_quant8_9::createTestModel,
                           strided_slice_quant8_9::is_ignored,
                           strided_slice_quant8_9::get_examples());
}

TEST_F(ValidationTest, strided_slice_quant8_9) {
  const Model model = strided_slice_quant8_9::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_9::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_quant8_9_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_quant8_9::createTestModel_dynamic_output_shape,
                           strided_slice_quant8_9::is_ignored_dynamic_output_shape,
                           strided_slice_quant8_9::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_quant8_9_dynamic_output_shape) {
  const Model model = strided_slice_quant8_9::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_quant8_9::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: strided_slice_relaxed.mod.py.
namespace strided_slice_relaxed {
// Generated strided_slice_relaxed test
#include "examples/strided_slice_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/strided_slice_relaxed.model.cpp"
} // namespace strided_slice_relaxed

TEST_F(NeuralnetworksHidlTest, strided_slice_relaxed) {
  generated_tests::Execute(device,
                           strided_slice_relaxed::createTestModel,
                           strided_slice_relaxed::is_ignored,
                           strided_slice_relaxed::get_examples());
}

TEST_F(ValidationTest, strided_slice_relaxed) {
  const Model model = strided_slice_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(strided_slice_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, strided_slice_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           strided_slice_relaxed::createTestModel_dynamic_output_shape,
                           strided_slice_relaxed::is_ignored_dynamic_output_shape,
                           strided_slice_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, strided_slice_relaxed_dynamic_output_shape) {
  const Model model = strided_slice_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(strided_slice_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sub.mod.py.
namespace sub {
// Generated sub test
#include "examples/sub.example.cpp"
// Generated model constructor
#include "vts_models/sub.model.cpp"
} // namespace sub

TEST_F(NeuralnetworksHidlTest, sub) {
  generated_tests::Execute(device,
                           sub::createTestModel,
                           sub::is_ignored,
                           sub::get_examples());
}

TEST_F(ValidationTest, sub) {
  const Model model = sub::createTestModel();
  const std::vector<Request> requests = createRequests(sub::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub::createTestModel_dynamic_output_shape,
                           sub::is_ignored_dynamic_output_shape,
                           sub::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_dynamic_output_shape) {
  const Model model = sub::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_broadcast_float.mod.py.
namespace sub_broadcast_float {
// Generated sub_broadcast_float test
#include "examples/sub_broadcast_float.example.cpp"
// Generated model constructor
#include "vts_models/sub_broadcast_float.model.cpp"
} // namespace sub_broadcast_float

TEST_F(NeuralnetworksHidlTest, sub_broadcast_float) {
  generated_tests::Execute(device,
                           sub_broadcast_float::createTestModel,
                           sub_broadcast_float::is_ignored,
                           sub_broadcast_float::get_examples());
}

TEST_F(ValidationTest, sub_broadcast_float) {
  const Model model = sub_broadcast_float::createTestModel();
  const std::vector<Request> requests = createRequests(sub_broadcast_float::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_broadcast_float_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_broadcast_float::createTestModel_dynamic_output_shape,
                           sub_broadcast_float::is_ignored_dynamic_output_shape,
                           sub_broadcast_float::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_broadcast_float_dynamic_output_shape) {
  const Model model = sub_broadcast_float::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_broadcast_float::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_broadcast_float_relaxed.mod.py.
namespace sub_broadcast_float_relaxed {
// Generated sub_broadcast_float_relaxed test
#include "examples/sub_broadcast_float_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/sub_broadcast_float_relaxed.model.cpp"
} // namespace sub_broadcast_float_relaxed

TEST_F(NeuralnetworksHidlTest, sub_broadcast_float_relaxed) {
  generated_tests::Execute(device,
                           sub_broadcast_float_relaxed::createTestModel,
                           sub_broadcast_float_relaxed::is_ignored,
                           sub_broadcast_float_relaxed::get_examples());
}

TEST_F(ValidationTest, sub_broadcast_float_relaxed) {
  const Model model = sub_broadcast_float_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(sub_broadcast_float_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_broadcast_float_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_broadcast_float_relaxed::createTestModel_dynamic_output_shape,
                           sub_broadcast_float_relaxed::is_ignored_dynamic_output_shape,
                           sub_broadcast_float_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_broadcast_float_relaxed_dynamic_output_shape) {
  const Model model = sub_broadcast_float_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_broadcast_float_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: sub_relaxed.mod.py.
namespace sub_relaxed {
// Generated sub_relaxed test
#include "examples/sub_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/sub_relaxed.model.cpp"
} // namespace sub_relaxed

TEST_F(NeuralnetworksHidlTest, sub_relaxed) {
  generated_tests::Execute(device,
                           sub_relaxed::createTestModel,
                           sub_relaxed::is_ignored,
                           sub_relaxed::get_examples());
}

TEST_F(ValidationTest, sub_relaxed) {
  const Model model = sub_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(sub_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, sub_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           sub_relaxed::createTestModel_dynamic_output_shape,
                           sub_relaxed::is_ignored_dynamic_output_shape,
                           sub_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, sub_relaxed_dynamic_output_shape) {
  const Model model = sub_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(sub_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf2_relaxed.mod.py.
namespace svdf2_relaxed {
// Generated svdf2_relaxed test
#include "examples/svdf2_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/svdf2_relaxed.model.cpp"
} // namespace svdf2_relaxed

TEST_F(NeuralnetworksHidlTest, svdf2_relaxed) {
  generated_tests::Execute(device,
                           svdf2_relaxed::createTestModel,
                           svdf2_relaxed::is_ignored,
                           svdf2_relaxed::get_examples());
}

TEST_F(ValidationTest, svdf2_relaxed) {
  const Model model = svdf2_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(svdf2_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf2_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf2_relaxed::createTestModel_dynamic_output_shape,
                           svdf2_relaxed::is_ignored_dynamic_output_shape,
                           svdf2_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf2_relaxed_dynamic_output_shape) {
  const Model model = svdf2_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf2_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_bias_present_relaxed.mod.py.
namespace svdf_bias_present_relaxed {
// Generated svdf_bias_present_relaxed test
#include "examples/svdf_bias_present_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/svdf_bias_present_relaxed.model.cpp"
} // namespace svdf_bias_present_relaxed

TEST_F(NeuralnetworksHidlTest, svdf_bias_present_relaxed) {
  generated_tests::Execute(device,
                           svdf_bias_present_relaxed::createTestModel,
                           svdf_bias_present_relaxed::is_ignored,
                           svdf_bias_present_relaxed::get_examples());
}

TEST_F(ValidationTest, svdf_bias_present_relaxed) {
  const Model model = svdf_bias_present_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_bias_present_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_bias_present_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_bias_present_relaxed::createTestModel_dynamic_output_shape,
                           svdf_bias_present_relaxed::is_ignored_dynamic_output_shape,
                           svdf_bias_present_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_bias_present_relaxed_dynamic_output_shape) {
  const Model model = svdf_bias_present_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_bias_present_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_relaxed.mod.py.
namespace svdf_relaxed {
// Generated svdf_relaxed test
#include "examples/svdf_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/svdf_relaxed.model.cpp"
} // namespace svdf_relaxed

TEST_F(NeuralnetworksHidlTest, svdf_relaxed) {
  generated_tests::Execute(device,
                           svdf_relaxed::createTestModel,
                           svdf_relaxed::is_ignored,
                           svdf_relaxed::get_examples());
}

TEST_F(ValidationTest, svdf_relaxed) {
  const Model model = svdf_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_relaxed::createTestModel_dynamic_output_shape,
                           svdf_relaxed::is_ignored_dynamic_output_shape,
                           svdf_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_relaxed_dynamic_output_shape) {
  const Model model = svdf_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: svdf_state_relaxed.mod.py.
namespace svdf_state_relaxed {
// Generated svdf_state_relaxed test
#include "examples/svdf_state_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/svdf_state_relaxed.model.cpp"
} // namespace svdf_state_relaxed

TEST_F(NeuralnetworksHidlTest, svdf_state_relaxed) {
  generated_tests::Execute(device,
                           svdf_state_relaxed::createTestModel,
                           svdf_state_relaxed::is_ignored,
                           svdf_state_relaxed::get_examples());
}

TEST_F(ValidationTest, svdf_state_relaxed) {
  const Model model = svdf_state_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(svdf_state_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, svdf_state_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           svdf_state_relaxed::createTestModel_dynamic_output_shape,
                           svdf_state_relaxed::is_ignored_dynamic_output_shape,
                           svdf_state_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, svdf_state_relaxed_dynamic_output_shape) {
  const Model model = svdf_state_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(svdf_state_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: tanh_relaxed.mod.py.
namespace tanh_relaxed {
// Generated tanh_relaxed test
#include "examples/tanh_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/tanh_relaxed.model.cpp"
} // namespace tanh_relaxed

TEST_F(NeuralnetworksHidlTest, tanh_relaxed) {
  generated_tests::Execute(device,
                           tanh_relaxed::createTestModel,
                           tanh_relaxed::is_ignored,
                           tanh_relaxed::get_examples());
}

TEST_F(ValidationTest, tanh_relaxed) {
  const Model model = tanh_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(tanh_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, tanh_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           tanh_relaxed::createTestModel_dynamic_output_shape,
                           tanh_relaxed::is_ignored_dynamic_output_shape,
                           tanh_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, tanh_relaxed_dynamic_output_shape) {
  const Model model = tanh_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(tanh_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose.mod.py.
namespace transpose {
// Generated transpose test
#include "examples/transpose.example.cpp"
// Generated model constructor
#include "vts_models/transpose.model.cpp"
} // namespace transpose

TEST_F(NeuralnetworksHidlTest, transpose) {
  generated_tests::Execute(device,
                           transpose::createTestModel,
                           transpose::is_ignored,
                           transpose::get_examples());
}

TEST_F(ValidationTest, transpose) {
  const Model model = transpose::createTestModel();
  const std::vector<Request> requests = createRequests(transpose::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose::createTestModel_dynamic_output_shape,
                           transpose::is_ignored_dynamic_output_shape,
                           transpose::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_dynamic_output_shape) {
  const Model model = transpose::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_float_1.mod.py.
namespace transpose_float_1 {
// Generated transpose_float_1 test
#include "examples/transpose_float_1.example.cpp"
// Generated model constructor
#include "vts_models/transpose_float_1.model.cpp"
} // namespace transpose_float_1

TEST_F(NeuralnetworksHidlTest, transpose_float_1) {
  generated_tests::Execute(device,
                           transpose_float_1::createTestModel,
                           transpose_float_1::is_ignored,
                           transpose_float_1::get_examples());
}

TEST_F(ValidationTest, transpose_float_1) {
  const Model model = transpose_float_1::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_float_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_float_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_float_1::createTestModel_dynamic_output_shape,
                           transpose_float_1::is_ignored_dynamic_output_shape,
                           transpose_float_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_float_1_dynamic_output_shape) {
  const Model model = transpose_float_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_float_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_float_1_relaxed.mod.py.
namespace transpose_float_1_relaxed {
// Generated transpose_float_1_relaxed test
#include "examples/transpose_float_1_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/transpose_float_1_relaxed.model.cpp"
} // namespace transpose_float_1_relaxed

TEST_F(NeuralnetworksHidlTest, transpose_float_1_relaxed) {
  generated_tests::Execute(device,
                           transpose_float_1_relaxed::createTestModel,
                           transpose_float_1_relaxed::is_ignored,
                           transpose_float_1_relaxed::get_examples());
}

TEST_F(ValidationTest, transpose_float_1_relaxed) {
  const Model model = transpose_float_1_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_float_1_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_float_1_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_float_1_relaxed::createTestModel_dynamic_output_shape,
                           transpose_float_1_relaxed::is_ignored_dynamic_output_shape,
                           transpose_float_1_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_float_1_relaxed_dynamic_output_shape) {
  const Model model = transpose_float_1_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_float_1_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_quant8_1.mod.py.
namespace transpose_quant8_1 {
// Generated transpose_quant8_1 test
#include "examples/transpose_quant8_1.example.cpp"
// Generated model constructor
#include "vts_models/transpose_quant8_1.model.cpp"
} // namespace transpose_quant8_1

TEST_F(NeuralnetworksHidlTest, transpose_quant8_1) {
  generated_tests::Execute(device,
                           transpose_quant8_1::createTestModel,
                           transpose_quant8_1::is_ignored,
                           transpose_quant8_1::get_examples());
}

TEST_F(ValidationTest, transpose_quant8_1) {
  const Model model = transpose_quant8_1::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_quant8_1::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_quant8_1_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_quant8_1::createTestModel_dynamic_output_shape,
                           transpose_quant8_1::is_ignored_dynamic_output_shape,
                           transpose_quant8_1::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_quant8_1_dynamic_output_shape) {
  const Model model = transpose_quant8_1::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_quant8_1::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
// Generated from: transpose_relaxed.mod.py.
namespace transpose_relaxed {
// Generated transpose_relaxed test
#include "examples/transpose_relaxed.example.cpp"
// Generated model constructor
#include "vts_models/transpose_relaxed.model.cpp"
} // namespace transpose_relaxed

TEST_F(NeuralnetworksHidlTest, transpose_relaxed) {
  generated_tests::Execute(device,
                           transpose_relaxed::createTestModel,
                           transpose_relaxed::is_ignored,
                           transpose_relaxed::get_examples());
}

TEST_F(ValidationTest, transpose_relaxed) {
  const Model model = transpose_relaxed::createTestModel();
  const std::vector<Request> requests = createRequests(transpose_relaxed::get_examples());
  validateEverything(model, requests);
}


#ifdef NN_TEST_DYNAMIC_OUTPUT_SHAPE
TEST_F(DynamicOutputShapeTest, transpose_relaxed_dynamic_output_shape) {
  generated_tests::Execute(device,
                           transpose_relaxed::createTestModel_dynamic_output_shape,
                           transpose_relaxed::is_ignored_dynamic_output_shape,
                           transpose_relaxed::get_examples_dynamic_output_shape(), true);
}

TEST_F(ValidationTest, transpose_relaxed_dynamic_output_shape) {
  const Model model = transpose_relaxed::createTestModel_dynamic_output_shape();
  const std::vector<Request> requests = createRequests(transpose_relaxed::get_examples_dynamic_output_shape());
  validateEverything(model, requests);
}


#endif
