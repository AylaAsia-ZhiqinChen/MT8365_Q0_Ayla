// cstddef standard header
#ifndef _CSTDDEF_
#define _CSTDDEF_

 #if _IS_GHS
#include <stddef.h>

namespace std {
 #if defined(__NAMESPACES) && !defined(__EMBEDDED_CXX_HEADERS)
using _CSTD ptrdiff_t; using _CSTD size_t;
 #endif /* defined(__NAMESPACES), etc. */

typedef double max_align_t;	// most aligned type
}	// namespace std

 #else /* _IS_GHS */
#include <yvals.h>

#ifdef _STD_USING
 #undef _STD_USING
  #include <stddef.h>
 #define _STD_USING

#else /* _STD_USING */
 #include <stddef.h>
#endif /* _STD_USING */

#ifndef _STDDEF
 #if TENSILICA || 1
struct _max_align_t { char _data; } __attribute__((aligned(1 << _MEMBND)));
typedef struct _max_align_t max_align_t;
 #else
typedef double max_align_t;
 #endif /* TENSILICA */
#endif /* _STDDEF */

 #ifdef _GLOBAL_USING
_STD_BEGIN
using _CSTD ptrdiff_t; using _CSTD size_t;
using _CSTD max_align_t;
_STD_END
 #endif /* _GLOBAL_USING */

 #endif /* _IS_GHS */
#endif /* _CSTDDEF_ */

/*
 * Copyright (c) by P.J. Plauger. All rights reserved.
 * Consult your license regarding permissions and restrictions.
V6.50:1611 */
