// Customer ID=13943; Build=0x75f5e; Copyright (c) 2014-2017 Cadence Design Systems, Inc.  ALL RIGHTS RESERVED.
// These coded instructions, statements, and computer programs are the
// copyrighted works and confidential proprietary information of
// Cadence Design Systems, Inc.  They may be adapted and modified by bona fide
// purchasers for internal use, but neither the original nor any adapted
// or modified version may be disclosed or distributed to third parties
// in any manner, medium, or form, in whole or in part, without the prior
// written consent of Cadence Design Systems, Inc.


// Purpose:
//
// Script to check the lock_addr once per xtsc_driver_wait_event to see if the
// shared memory work area is potentially available and drive a core interrupt if
// it is.
//
// Additional functionality when using TurboXim in a single-core process:
// To avoid hogging a host CPU core when there is nothing to do, if the SystemC
// time change since the previous xtsc_driver_wait_event is exactly equal to the
// TurboXim quantum, then do an OS-level yield by calling xtsc_host_sleep for 0
// milliseconds.
//
// Note: The interrupt value is set by the xtsc.write() calls in the script.

#include "$(XTSC_SCRIPT_FILE_PATH)/common.h"

#lua_beg
  coreNN    = string.gsub(xtsc.cmd("xtsc whoami"), "_BInterruptXX", "")
  lock_addr = $(SHMEM_LOCK_BASE)
  turbo     = (xtsc.cmd(coreNN .. " is_fast_functional_mode") == "1")
  single    = (xtsc.cmd("xtsc xtsc_user_state_get single_core_process") == "1")
  interval  = tonumber(xtsc.cmd("xtsc xtsc_get_relaxed_simulation_interval"))
  factor    = tonumber(xtsc.cmd("xtsc xtsc_get_system_clock_factor"))
  quantum   = interval * factor
  asserted  = false
  before    = 0
  prev      = "0x00 0x00 0x00 0x00"
  xtsc.write("now 0")
  while true do
    next = xtsc.cmd("shmem_lock peek " .. lock_addr .. " 4")
    if (next ~= prev) then
      if (next == "0x00 0x00 0x00 0x00") then
        xtsc.write("now 1")
        asserted = true
      else
        xtsc.write("now 0")
        asserted = false
      end
      prev = next
    end
    xtsc.cmd("sc wait xtsc_driver_wait_event")
    if (turbo and single and not asserted) then
      now = tonumber(xtsc.cmd("sc sc_time_stamp"))
      change = now - before
      if (change == quantum) then
        xtsc.cmd("xtsc xtsc_host_sleep 0")
      end
      before = now
    end
  end
#lua_end

