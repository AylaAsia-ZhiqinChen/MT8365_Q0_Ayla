// numeric standard header
#ifndef _NUMERIC_
#define _NUMERIC_
#include <xutility>

 #if _HAS_TRADITIONAL_STL
 #include <functional>
 #endif /* _HAS_TRADITIONAL_STL */

_STD_BEGIN

		// TEMPLATE FUNCTION accumulate
export
template<class _InIt,
	class _Ty>
	_Ty accumulate(_InIt _First, _InIt _Last, _Ty _Val);

		// TEMPLATE FUNCTION accumulate WITH BINOP
export
template<class _InIt,
	class _Ty,
	class _Fn2>
	_Ty accumulate(_InIt _First, _InIt _Last, _Ty _Val, _Fn2 _Func);

		// TEMPLATE FUNCTION inner_product
export
template<class _InIt1,
	class _InIt2,
	class _Ty>
	_Ty inner_product(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Ty _Val);

		// TEMPLATE FUNCTION inner_product WITH BINOPS
export
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _Fn21,
	class _Fn22>
	_Ty inner_product(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2, _Ty _Val,
		_Fn21 _Func1, _Fn22 _Func2);

		// TEMPLATE FUNCTION partial_sum
export
template<class _InIt,
	class _OutIt,
	class _Ty>
	_OutIt _Partial_sum(_InIt _First, _InIt _Last, _OutIt _Dest, _Ty *);

template<class _InIt,
	class _OutIt> inline
	_OutIt partial_sum(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	// compute partial sums into _Dest
	return (_First == _Last ? _Dest
		: _Partial_sum(_First, _Last, _Dest, _Val_type(_First)));
	}

		// TEMPLATE FUNCTION partial_sum WITH BINOP
export
template<class _InIt,
	class _OutIt,
	class _Fn2,
	class _Ty>
	_OutIt _Partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func, _Ty *);

template<class _InIt,
	class _OutIt,
	class _Fn2> inline
	_OutIt partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func)
	{	// compute partial sums into _Dest, using _Func
	return (_First == _Last ? _Dest
		: _Partial_sum(_First, _Last, _Dest, _Func, _Val_type(_First)));
	}

		// TEMPLATE FUNCTION adjacent_difference
export
template<class _InIt,
	class _OutIt,
	class _Ty>
	_OutIt _Adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Ty *);

template<class _InIt,
	class _OutIt> inline
	_OutIt adjacent_difference(_InIt _First, _InIt _Last, _OutIt _Dest)
	{	// compute adjacent differences into _Dest
	return (_First == _Last ? _Dest
		: _Adjacent_difference(_First, _Last, _Dest, _Val_type(_First)));
	}

		// TEMPLATE FUNCTION adjacent_difference WITH BINOP
export
template<class _InIt,
	class _OutIt,
	class _Fn2,
	class _Ty>
	_OutIt _Adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func, _Ty *);

template<class _InIt,
	class _OutIt,
	class _Fn2> inline
	_OutIt adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func)
	{	// compute adjacent differences into _Dest, using _Func
	return (_First == _Last ? _Dest : _Adjacent_difference(_First, _Last,
		_Dest, _Func, _Val_type(_First)));
	}

 #if _HAS_TRADITIONAL_STL
export
template<class _FwdIt,
	class _Ty>
	void iota(_FwdIt _First, _FwdIt _Last, _Ty _Val);
 #endif /* _HAS_TRADITIONAL_STL */

_STD_END
#endif /* _NUMERIC_ */

/*
 * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
 */

/*
 * This file is derived from software bearing the following
 * restrictions:
 *
 * Copyright (c) 1994
 * Hewlett-Packard Company
 *
 * Permission to use, copy, modify, distribute and sell this
 * software and its documentation for any purpose is hereby
 * granted without fee, provided that the above copyright notice
 * appear in all copies and that both that copyright notice and
 * this permission notice appear in supporting documentation.
 * Hewlett-Packard Company makes no representations about the
 * suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
V5.01:1611 */
