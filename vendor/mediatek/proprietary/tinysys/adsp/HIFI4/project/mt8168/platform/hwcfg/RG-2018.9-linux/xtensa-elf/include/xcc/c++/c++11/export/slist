// slist standard header
#ifndef _SLIST_
#define _SLIST_
#include <functional>
#include <memory>
#include <stdexcept>

_STD_BEGIN

		// TEMPLATE CLASS _Slist_nod
template<class _Ty,
	class _Alloc>
	class _Slist_nod
		: public _Container_base
	{	// base class for _Slist_ptr to hold allocator _Alnod
protected:
	struct _Node;
	friend struct _Node;
	typedef _Node *_Nodeptr;	// _Node allocator must have ordinary pointers

	struct _Node
		{	// slist node
		_Nodeptr _Next;	// successor node
		_Ty _Myval;	// the stored value
		};

	_Slist_nod(_Alloc _Al)
		: _Alnod(_Al)
		{	// construct allocator from _Al
		}

	typename _Alloc::template rebind<_Node>::other
		_Alnod;	// allocator object for nodes
	};

		// TEMPLATE CLASS _Slist_ptr
template<class _Ty,
	class _Alloc>
	class _Slist_ptr
		: public _Slist_nod<_Ty, _Alloc>
	{	// base class for _Slist_val to hold allocator _Alptr
protected:
	typedef _Slist_nod<_Ty, _Alloc> _Mybase;
	typedef typename _Mybase::_Node _Node;
	typedef typename _Mybase::_Nodeptr _Nodeptr;

	_Slist_ptr(_Alloc _Al)
		: _Slist_nod<_Ty, _Alloc>(_Al), _Alptr(_Al)
		{	// construct base, and allocator from _Al
		}

	typename _Alloc::template rebind<_Nodeptr>::other
		_Alptr;	// allocator object for pointers to nodes
	};

		// TEMPLATE CLASS _Slist_val
template<class _Ty,
	class _Alloc>
	class _Slist_val
		: public _Slist_ptr<_Ty, _Alloc>
	{	// base class for slist to hold allocator _Alval
public:
	typedef typename _Alloc::template rebind<_Ty>::other _Alty;

	_Slist_val(_Alloc _Al = _Alloc())
		: _Slist_ptr<_Ty, _Alloc>(_Al), _Alval(_Al)
		{	// construct base, and allocator from _Al
		}

	_Alty _Alval;	// allocator object for values stored in nodes
	};

		// TEMPLATE CLASS slist
export
template<class _Ty,
	class _Ax = allocator<_Ty> >
	class slist
		: public _Slist_val<_Ty, _Ax>
	{	// singly linked list
public:
	typedef slist<_Ty, _Ax> _Myt;
	typedef _Slist_val<_Ty, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _Alloc;

protected:
	typedef typename _Mybase::_Node _Node;
	typedef typename _Mybase::_Nodeptr _Nodeptr;

	typedef typename _Alloc::template rebind<_Nodeptr>::other
		_Nodeptr_alloc;
	typedef typename _Nodeptr_alloc::reference _Nodepref;


	typedef typename _Alloc::reference _Vref;

	static _Nodepref _Nextnode(_Nodeptr _Pnode)
		{	// return reference to successor pointer in node
		return ((_Nodepref)(*_Pnode)._Next);
		}

	static _Vref _Myval(_Nodeptr _Pnode)
		{	// return reference to value in node
		return ((_Vref)(*_Pnode)._Myval);
		}

public:
	typedef _Alloc allocator_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type _Dift;
	typedef _Dift difference_type;
	typedef typename _Alloc::pointer _Tptr;
	typedef typename _Alloc::const_pointer _Ctptr;
	typedef _Tptr pointer;
	typedef _Ctptr const_pointer;
	typedef typename _Alloc::reference _Reft;
	typedef _Reft reference;
	typedef typename _Alloc::const_reference const_reference;
	typedef typename _Alloc::value_type value_type;

		// CLASS const_iterator
	class const_iterator;
	friend class const_iterator;

	class const_iterator
		: public _STD iterator<forward_iterator_tag, _Ty, _Dift,
			_Ctptr, const_reference>
		{	// iterator for nonmutable slist
	public:
		typedef forward_iterator_tag iterator_category;
		typedef _Ty value_type;
		typedef _Dift difference_type;
		typedef _Ctptr pointer;
		typedef const_reference reference;

		const_iterator()
			: _Pptr(0)
			{	// construct with null node pointer
			}

 #if _HAS_ITERATOR_DEBUGGING
 #define _SLIST_CONST_ITERATOR(ppnode)	const_iterator(ppnode, this)

		const_iterator(_Nodeptr *_Ppnode, const _Myt *_Plist)
			: _Pptr(_Ppnode)
			{	// construct with node pointer to pointer _Ppnode
			this->_Adopt(_Plist);
			}

 #else /* _HAS_ITERATOR_DEBUGGING */
 #define _SLIST_CONST_ITERATOR(ppnode)	const_iterator(ppnode)

		const_iterator(_Nodeptr *_Ppnode)
			: _Pptr(_Ppnode)
			{	// construct with node pointer to pointer _Ppnode
			}
 #endif /* _HAS_ITERATOR_DEBUGGING */

		const_reference operator*() const
			{	// return designated value

 #if _HAS_ITERATOR_DEBUGGING
			if (this->_Mycont == 0 || _Pptr == 0 || *_Pptr == 0)
				_DEBUG_ERROR("slist iterator not dereferencable");
 #endif /* _HAS_ITERATOR_DEBUGGING */

			return (_Myval(*_Pptr));
			}

		_Ctptr operator->() const
			{	// return pointer to class object
			return (&**this);
			}

		const_iterator& operator++()
			{	// preincrement

 #if _HAS_ITERATOR_DEBUGGING
			if (this->_Mycont == 0 || _Pptr == 0 || *_Pptr == 0)
				_DEBUG_ERROR("slist iterator not incrementable");
			_Pptr = &_Nextnode(*_Pptr);

 #else /* _HAS_ITERATOR_DEBUGGING */
			if (_Pptr != 0 && *_Pptr != 0)
				_Pptr = &_Nextnode(*_Pptr);
 #endif /* _HAS_ITERATOR_DEBUGGING */

			return (*this);
			}

		const_iterator operator++(int)
			{	// postincrement
			const_iterator _Tmp = *this;
			++*this;
			return (_Tmp);
			}

		bool operator==(const const_iterator& _Right) const
			{	// test for iterator equality

 #if _HAS_ITERATOR_DEBUGGING
			if (this->_Mycont == 0 || this->_Mycont != _Right._Mycont)
				_DEBUG_ERROR("slist iterators incompatible");
 #endif /* _HAS_ITERATOR_DEBUGGING */

			return (_Pptr == _Right._Pptr);
			}

		bool operator!=(const const_iterator& _Right) const
			{	// test for iterator inequality
			return (!(*this == _Right));
			}

		_Nodeptr *_Pptr;	// pointer to pointer to node
		};

		// CLASS iterator
	class iterator;
	friend class iterator;

	class iterator
		: public const_iterator
		{	// iterator for mutable slist
	public:
		typedef forward_iterator_tag iterator_category;
		typedef _Ty value_type;
		typedef _Dift difference_type;
		typedef _Tptr pointer;
		typedef _Reft reference;

		iterator()
			{	// construct with null node
			}

 #if _HAS_ITERATOR_DEBUGGING
 #define _SLIST_ITERATOR(ppnode)	iterator(ppnode, this)

		iterator(_Nodeptr *_Ppnode, const _Myt *_Plist)
			: const_iterator(_Ppnode, _Plist)
			{	// construct with node pointer to pointer _Ppnode
			}

 #else /* _HAS_ITERATOR_DEBUGGING */
 #define _SLIST_ITERATOR(ppnode)	iterator(ppnode)

		iterator(_Nodeptr *_Ppnode)
			: const_iterator(_Ppnode)
			{	// construct with node pointer to pointer _Ppnode
			}
 #endif /* _HAS_ITERATOR_DEBUGGING */

		reference operator*() const
			{	// return designated value
			return ((reference)**(const_iterator *)this);
			}

		_Tptr operator->() const
			{	// return pointer to class object
			return (&**this);
			}

		iterator& operator++()
			{	// preincrement
			++(*(const_iterator *)this);
			return (*this);
			}

		iterator operator++(int)
			{	// postincrement
			iterator _Tmp = *this;
			++*this;
			return (_Tmp);
			}
		};

	slist()
		: _Mybase()
		{_Init();	// construct empty slist
		}

	explicit slist(const _Alloc& _Al)
		: _Mybase(_Al)
		{_Init();	// construct empty slist, allocator
		}

	explicit slist(size_type _Count)
		: _Mybase()
		{	// construct list from _Count * _Ty()
		_Init();
		insert(begin(), _Count, _Ty());
		}

	slist(size_type _Count, const _Ty& _Val)
		: _Mybase()
		{	// construct list from _Count * _Val
		_Init();
		insert(begin(), _Count, _Val);
		}

	slist(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	// construct list, allocator from _Count * _Val
		_Init();
		insert(begin(), _Count, _Val);
		}

	slist(const _Myt& _Right)
		: _Mybase(_Right._Alval)
		{	// construct list by copying _Right
		_Init();
		insert(begin(), _Right.begin(), _Right.end());
		}

	template<class _Iter>
		slist(_Iter _First, _Iter _Last)
		: _Mybase()
		{	// construct list from [_First, _Last)
		_Init();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		slist(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	// construct list, allocator from [_First, _Last)
		_Init();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Construct(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	// construct list from _Count * _Val
		insert(begin(), (size_type)_Count, (_Ty)_Val);
		}

	template<class _Iter>
		void _Construct(_Iter _First, _Iter _Last, input_iterator_tag)
		{	// construct list from [_First, _Last), input iterators
		insert(begin(), _First, _Last);
		}

	~slist()
		{	// destroy the object
		clear();
		}

	_Myt& operator=(const _Myt& _Right)
		{	// assign _Right
		if (this != &_Right)
			assign(_Right.begin(), _Right.end());
		return (*this);
		}

	iterator begin()
		{	// return iterator for beginning of mutable sequence
		return (_SLIST_ITERATOR(&_Myhead));
		}

	const_iterator begin() const
		{	// return iterator for beginning of nonmutable sequence
		return (_SLIST_CONST_ITERATOR((_Nodeptr *)&_Myhead));
		}

	iterator end()
		{	// return iterator for end of mutable sequence
		return (_SLIST_ITERATOR(_Myhead == 0
			? &_Myhead : &_Nextnode(_Gettail())));
		}

	const_iterator end() const
		{	// return iterator for end of nonmutable sequence
		return (_SLIST_CONST_ITERATOR(_Myhead == 0
			? (_Nodeptr *)&_Myhead : &_Nextnode(_Gettail())));
		}

	void resize(size_type _Newsize)
		{	// determine new length, padding with _Ty() elements as needed
		resize(_Newsize, _Ty());
		}

	void resize(size_type _Newsize, _Ty _Val);

	size_type size() const
		{	// return length of sequence
		return (_Mysize);
		}

	size_type max_size() const
		{	// return maximum possible length of sequence
		return (this->_Alval.max_size());
		}

	bool empty() const
		{	// test if sequence is empty
		return (_Mysize == 0);
		}

	allocator_type get_allocator() const
		{	// return allocator object for values
		return (this->_Alval);
		}

	reference front()
		{	// return first element of mutable sequence
		return (_Myval(_Myhead));
		}

	const_reference front() const
		{	// return first element of nonmutable sequence
		return (_Myval(_Myhead));
		}

	reference back()
		{	// return last element of mutable sequence
		return (_Myval(_Gettail()));
		}

	const_reference back() const
		{	// return last element of nonmutable sequence
		return (_Myval(_Gettail()));
		}

	void push_front(const _Ty& _Val)
		{	// insert element at beginning
		_Insertp(&_Myhead, _Val);
		}

	void pop_front()
		{	// erase element at beginning
		_Erasep(&_Myhead);
		}

	void push_back(const _Ty& _Val)
		{	// insert element at end
		_Insertp(_Myhead == 0 ? &_Myhead : &_Nextnode(_Gettail()), _Val);
		}

	void pop_back()
		{	// erase element at end
		_Erasep(_Getptail());
		}

	template<class _Iter>
		void assign(_Iter _First, _Iter _Last)
		{	// assign [_First, _Last)
		_Assign(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Assign(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	// assign _Count * _Val
		assign((size_type)_Count, (_Ty)_Val);
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
		{	// assign [_First, _Last), input iterators
		clear();
		insert(begin(), _First, _Last);
		}

	void assign(size_type _Count, const _Ty& _Val)
		{	// assign _Count * _Val
		_Ty _Tmp = _Val;	// in case _Val is in sequence
		clear();
		insert(begin(), _Count, _Tmp);
		}

	iterator insert(iterator _Where, const _Ty& _Val)
		{	// insert _Val at _Where
		_Nodeptr *_Pptr = _Getpptr(_Where);
		_Insertp(_Pptr, _Val);
		return (_SLIST_ITERATOR(_Pptr));
		}

	void insert(iterator _Where,
		size_type _Count, const _Ty& _Val);

	template<class _Iter>
		void insert(iterator _Where, _Iter _First, _Iter _Last)
		{	// insert [_First, _Last) at _Where
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Insert(iterator _Where, _Iter _Count, _Iter _Val,
			_Int_iterator_tag)
		{	// insert _Count * _Val at _Where
		insert(_Where, (size_type)_Count, (_Ty)_Val);
		}

	template<class _Iter>
		void _Insert(iterator _Where,
			_Iter _First, _Iter _Last, input_iterator_tag);

	template<class _Iter>
		void _Insert(iterator _Where,
			_Iter _First, _Iter _Last, forward_iterator_tag);

	iterator erase(iterator _Where)
		{	// erase element at _Where
		_Nodeptr *_Pptr = _Getpptr(_Where);
		_Erasep(_Pptr);
		return (_SLIST_ITERATOR(_Pptr));
		}

	iterator erase(iterator _First, iterator _Last);


	void clear();

	void swap(_Myt& _Right)
		{	// exchange contents with _Right
		if (this == &_Right)
			;	// same object, do nothing
		else if (this->_Alval == _Right._Alval)
			{	// same allocator, swap control information

 #if _HAS_ITERATOR_DEBUGGING
			this->_Swap_all(_Right);
 #endif /* _HAS_ITERATOR_DEBUGGING */

			_STD swap(_Myhead, _Right._Myhead);
			_STD swap(_Mytail, _Right._Mytail);
			_STD swap(_Mysize, _Right._Mysize);
			}
		else
			{	// different allocator, do multiple assigns
			_Myt _Ts = *this;

			*this = _Right;
			_Right = _Ts;
			}
		}

	void splice(iterator _Where, _Myt& _Right)
		{	// splice all of _Right at _Where
		if (this != &_Right && !_Right.empty())
			{	// worth splicing, do it
			_Splice(_Where, _Right, _Right.begin(), _Right.end(),
				_Right._Mysize);
			}
		}

	void splice(iterator _Where, _Myt& _Right, iterator _First)
		{	// splice _Right [_First, _First + 1) at _Where

 #if _HAS_ITERATOR_DEBUGGING
		if (_First == _Right.end())
			_DEBUG_ERROR("slist splice iterator outside range");
		else

 #else /* _HAS_ITERATOR_DEBUGGING */
		if (_First != _Right.end())
 #endif /* _HAS_ITERATOR_DEBUGGING */

			{	// element exists, try splice
			iterator _Last = _First;
			++_Last;
			if (this != &_Right
				|| (_Where != _First && _Where != _Last))
				_Splice(_Where, _Right, _First, _Last, 1);
			}
		}

	void splice(iterator _Where,
		_Myt& _Right, iterator _First, iterator _Last);

	void remove(const _Ty& _Val_arg);

	template<class _Pr1>
		void remove_if(_Pr1 _Pred);

	void unique();

	template<class _Pr2>
		void unique(_Pr2 _Pred);

	void merge(_Myt& _Right);

	template<class _Pr3>
		void merge(_Myt& _Right, _Pr3 _Pred);

	void sort();

	template<class _Pr3>
		void sort(_Pr3 _Pred);

	void reverse();

	iterator previous(const_iterator _Where);

	const_iterator previous(const_iterator _Where) const;

protected:
	_Nodeptr _Buynode(_Nodeptr _Narg = 0)
		{	// allocate a node and set links
		_Nodeptr _Pnode = this->_Alnod.allocate(1);
		this->_Alptr.construct(&_Nextnode(_Pnode), _Narg);
		return (_Pnode);
		}

	void _Freenode(_Nodeptr _Pnode)
		{	// delete a node
		this->_Alptr.destroy(&_Nextnode(_Pnode));
		this->_Alnod.deallocate(_Pnode, 1);
		}

	void _Erasep(_Nodeptr *_Ppnode);

	_Nodeptr *_Getpptr(iterator _Where) const
		{	// get node pointer from _Where

 #if _HAS_ITERATOR_DEBUGGING
		if (_Where._Mycont != this)
			_DEBUG_ERROR("slist iterator outside range");
 #endif /* _HAS_ITERATOR_DEBUGGING */

		return(_Where._Pptr);
		}

	void _Insertp(_Nodeptr *_Ppnode,
		const _Ty& _Val);

	_Nodeptr *_Getptail() const;

	_Nodeptr _Gettail() const
		{	// return pointer to tail
		if (_Mytail == 0 && _Myhead != 0)
			*(_Nodeptr *)&_Mytail = *_Getptail();	// _Mytail is mutable
		return ((_Nodeptr)_Mytail);
		}

	void _Splice(iterator _Where,
		_Myt& _Right, iterator _First, iterator _Last,
		size_type _Count, bool _Keep = false);

	void _Incsize(size_type _Count)
		{	// alter element count, with checking
		if (max_size() - _Mysize < _Count)
			_THROW(length_error, "slist<T> too long");
		_Mysize += _Count;
		}

 #if _HAS_ITERATOR_DEBUGGING
	void _Orphan_ptr(_Myt& _Cont, _Nodeptr _Ptr) const
		{	// orphan iterators with specified node pointer values
		_Lockit _Lock(_LOCK_DEBUG);
		const_iterator **_Pnext = (const_iterator **)&_Cont._Myfirstiter;
		while (*_Pnext != 0)
			if (*(*_Pnext)->_Pptr != _Ptr)
				_Pnext = (const_iterator **)&(*_Pnext)->_Mynextiter;
			else
				{	// orphan the iterator
				(*_Pnext)->_Mycont = 0;
				*_Pnext = (const_iterator *)(*_Pnext)->_Mynextiter;
				}
		}
 #endif /* _HAS_ITERATOR_DEBUGGING */

	_Nodeptr _Myhead;	// pointer to head node, null if empty slist
	_Nodeptr _Mytail;	// mutable pointer to tail node, null if unknown
	size_type _Mysize;	// number of elements

 #if _HAS_TRADITIONAL_STL
	_Nodeptr _Prehead;	// pointer to pointer to head node

	void _Init()
		{	// initialize storage
		_Prehead = (_Nodeptr)&_Myhead;	// KLUDGE, fails for fancy allocators
		_Myhead = 0;
		_Mytail = 0;
		_Mysize = 0;
		}

public:
	iterator before_begin()
		{	// return iterator whose successor is begin()
		return (iterator(&_Prehead));
		}

	const_iterator before_begin() const
		{	// return const_iterator whose successor is begin()
		return (const_iterator((_Nodeptr *)&_Prehead));
		}

	iterator insert(iterator _Where)
		{	// insert _Ty() at _Where
		return (insert(_Where, _Ty()));
		}

	iterator insert_after(iterator _Where)
		{	// insert _Ty() after _Where
		return (insert(++_Where, _Ty()));
		}

	iterator insert_after(iterator _Where, const _Ty& _Val)
		{	// insert _Val after _Where
		return (insert(++_Where, _Val));
		}

	void insert_after(iterator _Where, size_type _Count, const _Ty& _Val)
		{	// insert _Count * _Val after _Where
		insert(++_Where, _Count, _Val);
		}

	template<class _Iter>
		void insert_after(iterator _Where, _Iter _First, _Iter _Last)
		{	// insert [_First, _Last) after _Where
		insert(++_Where, _First, _Last);
		}

	iterator erase_after(iterator _Where)
		{	// erase element after _Where
		return (erase(++_Where));
		}

	iterator erase_after(iterator _First, iterator _Last)
		{	// erase [++_First, _Last)
		return (erase(++_First, _Last));
		}

	void splice_after(iterator _Where, _Myt& _Right)
		{	// splice all of _Right after _Where
		splice(++_Where, _Right);
		}

	void splice_after(iterator _Where, _Myt& _Right, iterator _First)
		{	// splice *this [_First+1, _First+2) after _Where
		splice(++_Where, *this, ++_First);
		}

	void splice_after(iterator _Where, _Myt& _Right,
		iterator _First, iterator _Last)
		{	// splice *this [_First+1, _Last+1) after _Where
		splice(++_Where, *this, ++_First, ++_Last);
		}

 #else /* _HAS_TRADITIONAL_STL */
	void _Init()
		{	// initialize storage
		_Myhead = 0;
		_Mytail = 0;
		_Mysize = 0;
		}
 #endif /* _HAS_TRADITIONAL_STL */

	};

		// slist TEMPLATE OPERATORS
template<class _Ty,
	class _Alloc> inline
	void swap(slist<_Ty, _Alloc>& _Left, slist<_Ty, _Alloc>& _Right)
	{	// swap _Left and _Right slists
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator==(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test for slist equality
	return (_Left.size() == _Right.size()
		&& equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator!=(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test for slist inequality
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test if _Left < _Right for slists
	return (lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test if _Left > _Right for slists
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<=(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test if _Left <= _Right for slists
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>=(const slist<_Ty, _Alloc>& _Left,
		const slist<_Ty, _Alloc>& _Right)
	{	// test if _Left >= _Right for slists
	return (!(_Left < _Right));
	}

 #if _HAS_TRADITIONAL_STL
 #define __slist__	slist
 #endif /* _HAS_TRADITIONAL_STL */

_STD_END
#endif /* _SLIST_ */

/*
 * Copyright (c) 1992-2009 by P.J. Plauger.  ALL RIGHTS RESERVED.
 * Consult your license regarding permissions and restrictions.
V5.01:1611 */
