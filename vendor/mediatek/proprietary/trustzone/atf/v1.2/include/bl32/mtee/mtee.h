/*
 * Copyright (c) 2013-2014, ARM Limited and Contributors. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of ARM nor the names of its contributors may be used
 * to endorse or promote products derived from this software without specific
 * prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __MTEE_H__
#define __MTEE_H__

/*
 * SMC function IDs that MTEE uses to signal various forms of completions
 * to the secure payload dispatcher.
 */
#define MTEE_ENTRY_DONE		0xf2000000
#define MTEE_ON_DONE		0xf2000001
#define MTEE_OFF_DONE		0xf2000002
#define MTEE_SUSPEND_DONE	0xf2000003
#define MTEE_RESUME_DONE	0xf2000004
#define MTEE_PREEMPTED		0xf2000005

/*
 * Function identifiers to handle FIQs through the synchronous handling model.
 * If the MTEE was previously interrupted then control has to be returned to
 * the MTEED after handling the interrupt else execution can remain in the MTEE.
 */
#define MTEE_HANDLED_S_EL1_FIQ		0xf2000006
#define MTEE_EL3_FIQ			0xf2000007
#define MTEE_HANDLE_FIQ_AND_RETURN	0xf2000009


/*
 * Identifiers for various MTEE services. Corresponding function IDs (whether
 * fast or standard) are generated by macros defined below
 */
#define MTEE_SERVICE            0x8
#define MTEE_EARLY_SERVICE      0x9

/*
 * Generate function IDs for MTEE services to be used in SMC calls, by
 * appropriately setting bit 31 to differentiate standard and fast SMC calls
 */
#define MTEE_STD_FID(fid)	((fid) | 0x72000000 | (0 << 31))
#define MTEE_FAST_FID(fid)	((fid) | 0x72000000 | (1 << 31))
#define MTEE32_STD_FID(fid)	((fid) | 0x32000000 | (0 << 31))
#define MTEE32_FAST_FID(fid)	((fid) | 0x32000000 | (1 << 31))

/*
 * Identify a MTEE service from function ID filtering the last 16 bits from the
 * SMC function ID
 */
#define MTEE_BARE_FID(fid)	((fid) & 0xffff)

/*
 * Total number of function IDs implemented for services offered to NS clients.
 * The function IDs are defined above
 */
#define MTEE_NUM_FID		0x2

/* MTEE implementation version numbers */
#define MTEE_VERSION_MAJOR	0x0 /* Major version */
#define MTEE_VERSION_MINOR	0x1 /* Minor version */

/*
 * Standard Trusted OS Function IDs that fall under Trusted OS call range
 * according to SMC calling convention
 */
#define TOS_CALL_COUNT		0xbf00ff00 /* Number of calls implemented */
#define TOS_UID			0xbf00ff01 /* Implementation UID */
/*				0xbf00ff02 is reserved */
#define TOS_CALL_VERSION	0xbf00ff03 /* Trusted OS Call Version */

/* Definitions to help the assembler access the SMC/ERET args structure */
#define MTEE_ARGS_SIZE		0x40
#define MTEE_ARG0		0x0
#define MTEE_ARG1		0x8
#define MTEE_ARG2		0x10
#define MTEE_ARG3		0x18
#define MTEE_ARG4		0x20
#define MTEE_ARG5		0x28
#define MTEE_ARG6		0x30
#define MTEE_ARG7		0x38
#define MTEE_ARGS_END		0x40

#ifndef __ASSEMBLY__

#include <cassert.h>
#include <platform_def.h> /* For CACHE_WRITEBACK_GRANULE */
#include <spinlock.h>
#include <stdint.h>

typedef uint32_t mtee_vector_isn_t;

typedef struct mtee_vectors {
	mtee_vector_isn_t std_smc_entry;
	mtee_vector_isn_t fast_smc_entry;
	mtee_vector_isn_t cpu_on_entry;
	mtee_vector_isn_t cpu_off_entry;
	mtee_vector_isn_t cpu_resume_entry;
	mtee_vector_isn_t cpu_suspend_entry;
	mtee_vector_isn_t fiq_entry;
	mtee_vector_isn_t early_smc_entry;
} mtee_vectors_t;

typedef struct mtee_args {
	uint64_t _regs[MTEE_ARGS_END >> 3];
} __aligned(CACHE_WRITEBACK_GRANULE) mtee_args_t;

/* Macros to access members of the above structure using their offsets */
#define read_sp_arg(args, offset)	((args)->_regs[offset >> 3])
#define write_sp_arg(args, offset, val) (((args)->_regs[offset >> 3])	\
					 = val)

/*
 * Ensure that the assembler's view of the size of the mtee_args is the
 * same as the compilers
 */
CASSERT(MTEE_ARGS_SIZE == sizeof(mtee_args_t), assert_sp_args_size_mismatch);

void mtee_get_magic(uint64_t args[4]);

mtee_args_t *mtee_cpu_resume_main(uint64_t arg0,
				uint64_t arg1,
				uint64_t arg2,
				uint64_t arg3,
				uint64_t arg4,
				uint64_t arg5,
				uint64_t arg6,
				uint64_t arg7);
mtee_args_t *mtee_cpu_suspend_main(uint64_t arg0,
				 uint64_t arg1,
				 uint64_t arg2,
				 uint64_t arg3,
				 uint64_t arg4,
				 uint64_t arg5,
				 uint64_t arg6,
				 uint64_t arg7);
mtee_args_t *mtee_cpu_on_main(void);
mtee_args_t *mtee_cpu_off_main(uint64_t arg0,
			     uint64_t arg1,
			     uint64_t arg2,
			     uint64_t arg3,
			     uint64_t arg4,
			     uint64_t arg5,
			     uint64_t arg6,
			     uint64_t arg7);

/* Generic Timer functions */
void mtee_generic_timer_start(void);
void mtee_generic_timer_handler(void);
void mtee_generic_timer_stop(void);
void mtee_generic_timer_save(void);
void mtee_generic_timer_restore(void);

/* FIQ management functions */
void mtee_update_sync_fiq_stats(uint32_t type, uint64_t elr_el3);

/* Vector table of jumps */
extern mtee_vectors_t *mtee_vectors;

#endif /* __ASSEMBLY__ */

#endif /* __BL2_H__ */
