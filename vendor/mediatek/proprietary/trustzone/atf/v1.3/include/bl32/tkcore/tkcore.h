#ifndef __TKCORE_H__
#define __TKCORE_H__
#include <mtk_plat_common.h>

#define TKCORE_ENTRY_DONE	0xf2000000
#define TKCORE_ON_DONE		0xf2000001
#define TKCORE_OFF_DONE		0xf2000002
#define TKCORE_SUSPEND_DONE	0xf2000003
#define TKCORE_RESUME_DONE	0xf2000004
#define TKCORE_PREEMPTED		0xf2000005

#define TKCORE_HANDLED_S_EL1_FIQ	0xf2000006
#define TKCORE_EL3_FIQ		0xf2000007

/* SMC function ID that TKCORE uses to request service from secure monitor */
#define TKCORE_GET_ARGS		0xf2001000

/*
 * Identifiers for various TKCORE services. Corresponding function IDs (whether
 * fast or standard) are generated by macros defined below
 */
#define TKCORE_ADD		0x2000
#define TKCORE_SUB		0x2001
#define TKCORE_MUL		0x2002
#define TKCORE_DIV		0x2003
#define TKCORE_HANDLE_FIQ_AND_RETURN	0x2004

#define TKCORE_STD_FID(fid)	((fid) | 0x72000000 | (0 << 31))
#define TKCORE_FAST_FID(fid)	((fid) | 0x72000000 | (1 << 31))

/* SMC function ID to request a previously preempted std smc */
#define TKCORE_FID_RESUME	TKCORE_STD_FID(0x3000)

/*
 * Identify a TKCORE service from function ID
 * filtering the last 16 bits from the
 * SMC function ID
 */
#define TKCORE_BARE_FID(fid)	((fid) & 0xffff)

/*
 * Total number of function IDs implemented for services offered to NS clients.
 * The function IDs are defined above
 */
#define TKCORE_NUM_FID		0x4

/* TKCORE implementation version numbers */
#define TKCORE_VERSION_MAJOR	0x0 /* Major version */
#define TKCORE_VERSION_MINOR	0x1 /* Minor version */

/*
 * Standard Trusted OS Function IDs that fall under Trusted OS call range
 * according to SMC calling convention
 */
#define TOS_CALL_COUNT		0xbf00ff00 /* Number of calls implemented */
#define TOS_UID			0xbf00ff01 /* Implementation UID */
/*				0xbf00ff02 is reserved */
#define TOS_CALL_VERSION	0xbf00ff03 /* Trusted OS Call Version */

/* Definitions to help the assembler access the SMC/ERET args structure */
#define TKCORE_ARGS_SIZE		0x40
#define TKCORE_ARG0		0x0
#define TKCORE_ARG1		0x8
#define TKCORE_ARG2		0x10
#define TKCORE_ARG3		0x18
#define TKCORE_ARG4		0x20
#define TKCORE_ARG5		0x28
#define TKCORE_ARG6		0x30
#define TKCORE_ARG7		0x38
#define TKCORE_ARGS_END		0x40

#define SERVICE_SUCCESS	((uint32_t) 0)
#define SERVICE_ERROR	((uint32_t) -1)

#define SERVICE_TEST		(0x0)
#define SERVICE_WDT_DUMP	(0x1)
#define SERVICE_TRNG		(0x2)

#ifndef __ASSEMBLY__

#include <cassert.h>
#include <platform_def.h> /* For CACHE_WRITEBACK_GRANULE */
#include <spinlock.h>
#include <stdint.h>

struct tkcore_vectors {
	uint32_t std_smc_entry;
	uint32_t fast_smc_entry;
	uint32_t cpu_on_entry;
	uint32_t cpu_off_entry;
	uint32_t cpu_resume_entry;
	uint32_t cpu_suspend_entry;
	uint32_t fiq_entry;
};

struct work_statistics {
	uint32_t fiq_count;		/* Number of FIQs on this cpu */
	uint32_t irq_count;		/* Number of IRQs on this cpu */
	uint32_t sync_fiq_count;	/* Number of sync. fiqs on this cpu */
	uint32_t sync_fiq_ret_count;	/* Number of fiq returns on this cpu */
	uint32_t smc_count;		/* Number of returns on this cpu */
	uint32_t eret_count;		/* Number of entries on this cpu */
	uint32_t cpu_on_count;		/* Number of cpu on requests */
	uint32_t cpu_off_count;		/* Number of cpu off requests */
	uint32_t cpu_suspend_count;	/* Number of cpu suspend requests */
	uint32_t cpu_resume_count;	/* Number of cpu resume requests */
} __aligned(CACHE_WRITEBACK_GRANULE);

struct tkcore_args {
	uint64_t _regs[TKCORE_ARGS_END >> 3];
} __aligned(CACHE_WRITEBACK_GRANULE);

/* Macros to access members of the above structure using their offsets */
#define read_sp_arg(args, offset)	((args)->_regs[offset >> 3])
#define write_sp_arg(args, offset, val) (((args)->_regs[offset >> 3])	\
					 = val)

/*
 * Ensure that the assembler's view of the size of the tkcore_args is the
 * same as the compilers
 */
CASSERT(sizeof(struct tkcore_args) == TKCORE_ARGS_SIZE,
	assert_sp_args_size_mismatch);

void tkcore_get_magic(uint64_t args[4]);

struct tkcore_args *tkcore_cpu_resume_main(uint64_t arg0,
				uint64_t arg1,
				uint64_t arg2,
				uint64_t arg3,
				uint64_t arg4,
				uint64_t arg5,
				uint64_t arg6,
				uint64_t arg7);
struct tkcore_args *tkcore_cpu_suspend_main(uint64_t arg0,
				 uint64_t arg1,
				 uint64_t arg2,
				 uint64_t arg3,
				 uint64_t arg4,
				 uint64_t arg5,
				 uint64_t arg6,
				 uint64_t arg7);
struct tkcore_args *tkcore_cpu_on_main(void);
struct tkcore_args *tkcore_cpu_off_main(uint64_t arg0,
			     uint64_t arg1,
			     uint64_t arg2,
			     uint64_t arg3,
			     uint64_t arg4,
			     uint64_t arg5,
			     uint64_t arg6,
			     uint64_t arg7);

/* Generic Timer functions */
void tkcore_generic_timer_start(void);
void tkcore_generic_timer_handler(void);
void tkcore_generic_timer_stop(void);
void tkcore_generic_timer_save(void);
void tkcore_generic_timer_restore(void);

/* FIQ management functions */
void tkcore_update_sync_fiq_stats(uint32_t type, uint64_t elr_el3);

/* Data structure to keep track of TKCORE statistics */
extern spinlock_t console_lock;
extern struct work_statistics tkcore_stats[PLATFORM_CORE_COUNT];

/* Vector table of jumps */
extern struct tkcore_vectors tkcore_vector_table;

uint32_t plat_tkcore_secure_service_request(
				uint64_t service_id,
				uint64_t *x2,
				uint64_t *x3);

#endif /* __ASSEMBLY__ */

#endif
