/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/

#ifndef __SENINF_DRV_CSI_INFO_H__
#define __SENINF_DRV_CSI_INFO_H__

#include "camera_custom_imgsensor_cfg.h"

using namespace NSCamCustomSensor;

typedef enum {
    SENINF_MUX1 = 0x0,
    SENINF_MUX2 = 0x1,
    SENINF_MUX3 = 0x2,
    SENINF_MUX4 = 0x3,
    SENINF_MUX5 = 0x4,
    SENINF_MUX6 = 0x5,
    SENINF_MUX_NUM,
    SENINF_MUX_ERROR = 0xF,
} SENINF_MUX_ENUM;

typedef enum {
    SENINF_1 = 0x0,
    SENINF_2 = 0x1,
    SENINF_3 = 0x2,
    SENINF_4 = 0x3,
    SENINF_5 = 0x4,
    SENINF_NUM,
    SENINF_ENUM_ERROR = 0xF,
} SENINF_ENUM;

typedef enum{
    SENINF_CAM_MUX0 = 0x0,
    SENINF_CAM_MUX1 = 0x1,
    SENINF_CAM_MUX2 = 0x2,
    SENINF_CAM_MUX3 = 0x3,
    SENINF_CAM_MUX4 = 0x4,
    SENINF_CAM_MUX5 = 0x5,
    SENINF_CAM_MUX6 = 0x6,
    SENINF_CAM_MUX7 = 0x7,
    SENINF_CAM_MUX8 = 0x8,
    SENINF_CAM_MUX9 = 0x9,
    SENINF_CAM_MUX10 = 0xA,
    SENINF_CAM_MUX_NUM,
    SENINF_CAM_MUX_ERR = 0xff
}SENINF_CAM_MUX_ENUM;

typedef enum { //0:CSI2(2.5G), 3: parallel, 8:NCSI2(1.5G)
    CSI2            = 0x0, /* 2.5G support */
    TEST_MODEL      = 0x1,
    CCIR656         = 0x2,
    PARALLEL_SENSOR = 0x3,
    SERIAL_SENSOR   = 0x4,
    HD_TV           = 0x5,
    EXT_CSI2_OUT1   = 0x6,
    EXT_CSI2_OUT2   = 0x7,
    MIPI_SENSOR     = 0x8,/* 1.5G support */
    VIRTUAL_CHANNEL_1 	= 0x9,
    VIRTUAL_CHANNEL_2 	= 0xA,
    VIRTUAL_CHANNEL_3 	= 0xB,
    VIRTUAL_CHANNEL_4 	= 0xC,
    VIRTUAL_CHANNEL_5 	= 0xD,
    VIRTUAL_CHANNEL_6 	= 0xE,
} SENINF_SOURCE_ENUM;

typedef struct {
    CUSTOM_CFG_CSI_PORT port;
    SENINF_ENUM         seninf;
    SENINF_SOURCE_ENUM  srcType;
} SENINF_CSI_INFO;

SENINF_CSI_INFO* seninf_drv_csi_info_get(CUSTOM_CFG_CSI_PORT mipiPort);

#endif

