// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.nlpservice;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from Mnld to NlpUtils <br>
 */
public class Mnld2NlpUtilsInterface {
    public final static int PROTOCOL_TYPE = 302;
    public final static int MAX_BUFF_SIZE = 12;
    public final static int REQ_NLP_LOCATION = 0;
    public final static int CANCEL_NLP_LOCATION = 1;

    public static class Mnld2NlpUtilsInterfaceSender {
        public boolean reqNlpLocation(UdpClient client, int source) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQ_NLP_LOCATION);
                buff.putInt(source);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean cancelNlpLocation(UdpClient client, int source) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(CANCEL_NLP_LOCATION);
                buff.putInt(source);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class Mnld2NlpUtilsInterfaceReceiver implements ProtocolHandler {

        public abstract void reqNlpLocation(int source);

        public abstract void cancelNlpLocation(int source);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case REQ_NLP_LOCATION: {
                int source = (int) buff.getInt();
                reqNlpLocation(source);
                break;
            }
            case CANCEL_NLP_LOCATION: {
                int source = (int) buff.getInt();
                cancelNlpLocation(source);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
