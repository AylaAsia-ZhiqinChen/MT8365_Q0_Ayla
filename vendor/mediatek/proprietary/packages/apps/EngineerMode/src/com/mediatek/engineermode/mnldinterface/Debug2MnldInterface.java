// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.engineermode.mnldinterface;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from Debug to Mnld <br>
 */
public class Debug2MnldInterface {
    public final static int PROTOCOL_TYPE = 305;
    public final static int MAX_BUFF_SIZE = 23;
    public final static int DEBUG_REQ_MNLD_MSG = 0;
    public final static int DEBUG_MNLD_NE_MSG = 1;
    public final static int DEBUG_MNLD_RADIO_MSG = 2;

    public static class Debug2MnldInterfaceSender {
        public boolean debugReqMnldMsg(UdpClient client, DebugReqStatusCategory status) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(DEBUG_REQ_MNLD_MSG);
                buff.putCodable(status);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean debugMnldNeMsg(UdpClient client, boolean enabled) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(DEBUG_MNLD_NE_MSG);
                buff.putBool(enabled);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean debugMnldRadioMsg(UdpClient client, String value) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(DEBUG_MNLD_RADIO_MSG);
                SocketUtils.assertSize(value, 10, 0);
                buff.putString(value);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class Debug2MnldInterfaceReceiver implements ProtocolHandler {

        public abstract void debugReqMnldMsg(DebugReqStatusCategory status);

        public abstract void debugMnldNeMsg(boolean enabled);

        public abstract void debugMnldRadioMsg(String value);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case DEBUG_REQ_MNLD_MSG: {
                DebugReqStatusCategory status = (DebugReqStatusCategory) buff.getCodable(DebugReqStatusCategory._instance);
                debugReqMnldMsg(status);
                break;
            }
            case DEBUG_MNLD_NE_MSG: {
                boolean enabled = (boolean) buff.getBool();
                debugMnldNeMsg(enabled);
                break;
            }
            case DEBUG_MNLD_RADIO_MSG: {
                String value = (String) buff.getString();
                debugMnldRadioMsg(value);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
