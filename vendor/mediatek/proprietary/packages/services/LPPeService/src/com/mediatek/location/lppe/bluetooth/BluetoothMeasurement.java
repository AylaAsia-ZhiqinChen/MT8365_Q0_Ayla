// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.bluetooth;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class BluetoothMeasurement implements Codable {

    public final static BluetoothMeasurement _instance = new BluetoothMeasurement();

    /**
     * This field defines the MAC address of the SRN for BT and BT LE as per <br>
     * [IEEE 802.15.1] <br>
     */
    public byte[] mac = new byte[] {};    // maxSize 6
    /**
     * This field specifies the category of the SRN being measured <br>
     */
    public BluetotthCategory category = BluetotthCategory.unknown;
    /**
     * This field provides the Received Signal Strength Indicator. The interpretation <br>
     * and the scale are SRN-type specific <br>
     */
    public boolean rssiValid = false;
    public short rssi = (short) 0;
    /**
     * This field provides the measured round trip delay between the target and SRN, <br>
     * and optionally the accuracy expressed as the standard deviation of the delay <br>
     */
    public boolean rtdValid = false;
    public BluetoothRTD rtd = new BluetoothRTD();

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof BluetoothMeasurement)) {
            return false;
        }

        BluetoothMeasurement _tmp = (BluetoothMeasurement) _obj;
        if(!Arrays.equals(_tmp.mac, mac))
            return false;
        if (!_tmp.category.equals(category))
            return false;
        if (_tmp.rssiValid != rssiValid)
            return false;
        if (_tmp.rssi != rssi)
            return false;
        if (_tmp.rtdValid != rtdValid)
            return false;
        if (!_tmp.rtd.equals(rtd))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("BluetoothMeasurement ");
        _o.append("mac=[" + Arrays.toString(mac) + "] ");
        _o.append("category=[" + category + "] ");
        _o.append("rssiValid=[" + rssiValid + "] ");
        _o.append("rssi=[" + rssi + "] ");
        _o.append("rtdValid=[" + rtdValid + "] ");
        _o.append("rtd=[" + rtd + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        SocketUtils.assertSize(mac, 6, 0);
        _buff.putArrayByte(mac);
        _buff.putCodable(category);
        _buff.putBool(rssiValid);
        _buff.putShort(rssi);
        _buff.putBool(rtdValid);
        _buff.putCodable(rtd);
    }

    @Override
    public BluetoothMeasurement decode(BaseBuffer _buff) {
        BluetoothMeasurement _out = new BluetoothMeasurement();
        _out.mac = _buff.getArrayByte();
        _out.category = (BluetotthCategory) _buff.getCodable(BluetotthCategory._instance);
        _out.rssiValid = _buff.getBool();
        _out.rssi = _buff.getShort();
        _out.rtdValid = _buff.getBool();
        _out.rtd = (BluetoothRTD) _buff.getCodable(BluetoothRTD._instance);
        return _out;
    }

    @Override
    public BluetoothMeasurement[] getArray(Codable[] data) {
        BluetoothMeasurement[] _out = new BluetoothMeasurement[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (BluetoothMeasurement) data[_i];
        }
        return _out;
    }

}
