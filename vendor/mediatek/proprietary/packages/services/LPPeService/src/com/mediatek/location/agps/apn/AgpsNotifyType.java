// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.agps.apn;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public enum AgpsNotifyType implements Codable {
    AGPS_NOTIFY_TYPE_NONE,
    AGPS_NOTIFY_TYPE_NOTIFY_ONLY,
    AGPS_NOTIFY_TYPE_NOTIFY_ALLOW_NO_ANSWER,
    AGPS_NOTIFY_TYPE_NOTIFY_DENY_NO_ANSWER,
    AGPS_NOTIFY_TYPE_PRIVACY,
;

    public final static AgpsNotifyType _instance = AgpsNotifyType.AGPS_NOTIFY_TYPE_NONE;

    @Override
    public void encode(BaseBuffer buff) {
        switch (this) {
        case AGPS_NOTIFY_TYPE_NONE:
            buff.putInt(0);
            break;
        case AGPS_NOTIFY_TYPE_NOTIFY_ONLY:
            buff.putInt(1);
            break;
        case AGPS_NOTIFY_TYPE_NOTIFY_ALLOW_NO_ANSWER:
            buff.putInt(2);
            break;
        case AGPS_NOTIFY_TYPE_NOTIFY_DENY_NO_ANSWER:
            buff.putInt(3);
            break;
        case AGPS_NOTIFY_TYPE_PRIVACY:
            buff.putInt(4);
            break;
        default:
            break;
        }
    }

    @Override
    public AgpsNotifyType decode(BaseBuffer buff) {
        int _type = buff.getInt();
        switch (_type) {
        case 0:
            return AGPS_NOTIFY_TYPE_NONE;
        case 1:
            return AGPS_NOTIFY_TYPE_NOTIFY_ONLY;
        case 2:
            return AGPS_NOTIFY_TYPE_NOTIFY_ALLOW_NO_ANSWER;
        case 3:
            return AGPS_NOTIFY_TYPE_NOTIFY_DENY_NO_ANSWER;
        case 4:
            return AGPS_NOTIFY_TYPE_PRIVACY;
        }
        return null;
    }

    @Override
    public AgpsNotifyType[] getArray(Codable[] data) {
        AgpsNotifyType[] _out = new AgpsNotifyType[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (AgpsNotifyType) data[_i];
        }
        return _out;
    }

}
