// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanMeasurements implements Codable {

    public final static WlanMeasurements _instance = new WlanMeasurements();

    /**
     * Measurements for a non-serving WLAN AP (in addition to a serving WLAN AP) <br>
     */
    public boolean nonServing = false;
    /**
     * SSID of the WLAN <br>
     */
    public boolean apSSID = false;
    /**
     * AP S/N received at the target <br>
     */
    public boolean apSN = false;
    /**
     * AP Device type <br>
     */
    public boolean apDevType = false;
    /**
     * AP PHY type <br>
     */
    public boolean apPhyType = false;
    /**
     * AP signal strength at the target <br>
     */
    public boolean apRSSI = false;
    /**
     * AP channel/frequency of Tx/Rx <br>
     */
    public boolean apChanFreq = false;
    /**
     * Round Trip Delay between target and AP <br>
     */
    public boolean apRTD = false;
    /**
     * AP Location as reported by AP <br>
     */
    public boolean apRepLoc = false;
    /**
     * AP transmit power <br>
     */
    public boolean apTP = false;
    /**
     * AP antenna gain <br>
     */
    public boolean apAG = false;
    /**
     * Target transmit power <br>
     */
    public boolean ueTP = false;
    /**
     * Target antenna gain <br>
     */
    public boolean ueAG = false;
    /**
     * UE S/N received at the AP <br>
     */
    public boolean ueSN = false;
    /**
     * Target signal strength at the AP <br>
     */
    public boolean ueRSSI = false;
    /**
     * operating class <br>
     */
    public boolean oc = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanMeasurements)) {
            return false;
        }

        WlanMeasurements _tmp = (WlanMeasurements) _obj;
        if (_tmp.nonServing != nonServing)
            return false;
        if (_tmp.apSSID != apSSID)
            return false;
        if (_tmp.apSN != apSN)
            return false;
        if (_tmp.apDevType != apDevType)
            return false;
        if (_tmp.apPhyType != apPhyType)
            return false;
        if (_tmp.apRSSI != apRSSI)
            return false;
        if (_tmp.apChanFreq != apChanFreq)
            return false;
        if (_tmp.apRTD != apRTD)
            return false;
        if (_tmp.apRepLoc != apRepLoc)
            return false;
        if (_tmp.apTP != apTP)
            return false;
        if (_tmp.apAG != apAG)
            return false;
        if (_tmp.ueTP != ueTP)
            return false;
        if (_tmp.ueAG != ueAG)
            return false;
        if (_tmp.ueSN != ueSN)
            return false;
        if (_tmp.ueRSSI != ueRSSI)
            return false;
        if (_tmp.oc != oc)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanMeasurements ");
        _o.append("nonServing=[" + nonServing + "] ");
        _o.append("apSSID=[" + apSSID + "] ");
        _o.append("apSN=[" + apSN + "] ");
        _o.append("apDevType=[" + apDevType + "] ");
        _o.append("apPhyType=[" + apPhyType + "] ");
        _o.append("apRSSI=[" + apRSSI + "] ");
        _o.append("apChanFreq=[" + apChanFreq + "] ");
        _o.append("apRTD=[" + apRTD + "] ");
        _o.append("apRepLoc=[" + apRepLoc + "] ");
        _o.append("apTP=[" + apTP + "] ");
        _o.append("apAG=[" + apAG + "] ");
        _o.append("ueTP=[" + ueTP + "] ");
        _o.append("ueAG=[" + ueAG + "] ");
        _o.append("ueSN=[" + ueSN + "] ");
        _o.append("ueRSSI=[" + ueRSSI + "] ");
        _o.append("oc=[" + oc + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(nonServing);
        _buff.putBool(apSSID);
        _buff.putBool(apSN);
        _buff.putBool(apDevType);
        _buff.putBool(apPhyType);
        _buff.putBool(apRSSI);
        _buff.putBool(apChanFreq);
        _buff.putBool(apRTD);
        _buff.putBool(apRepLoc);
        _buff.putBool(apTP);
        _buff.putBool(apAG);
        _buff.putBool(ueTP);
        _buff.putBool(ueAG);
        _buff.putBool(ueSN);
        _buff.putBool(ueRSSI);
        _buff.putBool(oc);
    }

    @Override
    public WlanMeasurements decode(BaseBuffer _buff) {
        WlanMeasurements _out = new WlanMeasurements();
        _out.nonServing = _buff.getBool();
        _out.apSSID = _buff.getBool();
        _out.apSN = _buff.getBool();
        _out.apDevType = _buff.getBool();
        _out.apPhyType = _buff.getBool();
        _out.apRSSI = _buff.getBool();
        _out.apChanFreq = _buff.getBool();
        _out.apRTD = _buff.getBool();
        _out.apRepLoc = _buff.getBool();
        _out.apTP = _buff.getBool();
        _out.apAG = _buff.getBool();
        _out.ueTP = _buff.getBool();
        _out.ueAG = _buff.getBool();
        _out.ueSN = _buff.getBool();
        _out.ueRSSI = _buff.getBool();
        _out.oc = _buff.getBool();
        return _out;
    }

    @Override
    public WlanMeasurements[] getArray(Codable[] data) {
        WlanMeasurements[] _out = new WlanMeasurements[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanMeasurements) data[_i];
        }
        return _out;
    }

}
