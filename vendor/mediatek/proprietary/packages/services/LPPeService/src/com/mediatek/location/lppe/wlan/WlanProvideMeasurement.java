// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanProvideMeasurement implements Codable {

    public final static WlanProvideMeasurement _instance = new WlanProvideMeasurement();

    /**
     * This parameter provides measurements for one or more WLAN APs at <br>
     * the current time and/or for historic times <br>
     */
    public WlanApMeasurement[] meas = new WlanApMeasurement[] {};    // maxSize 64

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanProvideMeasurement)) {
            return false;
        }

        WlanProvideMeasurement _tmp = (WlanProvideMeasurement) _obj;
        if(!Arrays.equals(_tmp.meas, meas))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanProvideMeasurement ");
        _o.append("meas=[" + Arrays.toString(meas) + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        SocketUtils.assertSize(meas, 64, 0);
        _buff.putArrayCodable(meas);
    }

    @Override
    public WlanProvideMeasurement decode(BaseBuffer _buff) {
        WlanProvideMeasurement _out = new WlanProvideMeasurement();
        _out.meas = WlanApMeasurement._instance.getArray(_buff.getArrayCodable(WlanApMeasurement._instance));
        return _out;
    }

    @Override
    public WlanProvideMeasurement[] getArray(Codable[] data) {
        WlanProvideMeasurement[] _out = new WlanProvideMeasurement[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanProvideMeasurement) data[_i];
        }
        return _out;
    }

}
