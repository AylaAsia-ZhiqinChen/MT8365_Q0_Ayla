// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.ipaddr;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class IpAddressCapabilities implements Codable {

    public final static IpAddressCapabilities _instance = new IpAddressCapabilities();

    /**
     * support to report Internet Protocol version 4 <br>
     */
    public boolean ipv4 = false;
    /**
     * support to report Internet Protocol version 6 <br>
     */
    public boolean ipv6 = false;
    /**
     * support to report Network Address Translation <br>
     */
    public boolean nat = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof IpAddressCapabilities)) {
            return false;
        }

        IpAddressCapabilities _tmp = (IpAddressCapabilities) _obj;
        if (_tmp.ipv4 != ipv4)
            return false;
        if (_tmp.ipv6 != ipv6)
            return false;
        if (_tmp.nat != nat)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("IpAddressCapabilities ");
        _o.append("ipv4=[" + ipv4 + "] ");
        _o.append("ipv6=[" + ipv6 + "] ");
        _o.append("nat=[" + nat + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(ipv4);
        _buff.putBool(ipv6);
        _buff.putBool(nat);
    }

    @Override
    public IpAddressCapabilities decode(BaseBuffer _buff) {
        IpAddressCapabilities _out = new IpAddressCapabilities();
        _out.ipv4 = _buff.getBool();
        _out.ipv6 = _buff.getBool();
        _out.nat = _buff.getBool();
        return _out;
    }

    @Override
    public IpAddressCapabilities[] getArray(Codable[] data) {
        IpAddressCapabilities[] _out = new IpAddressCapabilities[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (IpAddressCapabilities) data[_i];
        }
        return _out;
    }

}
