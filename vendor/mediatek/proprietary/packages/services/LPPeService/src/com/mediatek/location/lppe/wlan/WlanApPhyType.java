// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public enum WlanApPhyType implements Codable {
    unknown,
    any,
    /**
     * frequency-hopping spread-spectrum (FHSS) PHY type <br>
     */
    fhss,
    /**
     * direct sequence spread spectrum (DSSS) PHY type <br>
     */
    dsss,
    /**
     * infrared (IR) baseband PHY type <br>
     */
    irbaseband,
    /**
     * orthogonal frequency division multiplexing (OFDM) PHY type <br>
     */
    ofdm,
    /**
     * high-rate DSSS (HRDSSS) PHY type <br>
     */
    hrdsss,
    /**
     * extended rate PHY type (ERP) <br>
     */
    erp,
    /**
     * HT = 802.11n PHY type <br>
     */
    ht,
    /**
     * IHV = PHY type that is developed by an independent hardware <br>
     */
    ihv,
    end,
;

    public final static WlanApPhyType _instance = WlanApPhyType.unknown;

    @Override
    public void encode(BaseBuffer buff) {
        switch (this) {
        case unknown:
            buff.putInt(0);
            break;
        case any:
            buff.putInt(1);
            break;
        case fhss:
            buff.putInt(2);
            break;
        case dsss:
            buff.putInt(3);
            break;
        case irbaseband:
            buff.putInt(4);
            break;
        case ofdm:
            buff.putInt(5);
            break;
        case hrdsss:
            buff.putInt(6);
            break;
        case erp:
            buff.putInt(7);
            break;
        case ht:
            buff.putInt(8);
            break;
        case ihv:
            buff.putInt(9);
            break;
        case end:
            buff.putInt(2147483647);
            break;
        default:
            break;
        }
    }

    @Override
    public WlanApPhyType decode(BaseBuffer buff) {
        int _type = buff.getInt();
        switch (_type) {
        case 0:
            return unknown;
        case 1:
            return any;
        case 2:
            return fhss;
        case 3:
            return dsss;
        case 4:
            return irbaseband;
        case 5:
            return ofdm;
        case 6:
            return hrdsss;
        case 7:
            return erp;
        case 8:
            return ht;
        case 9:
            return ihv;
        case 2147483647:
            return end;
        }
        return null;
    }

    @Override
    public WlanApPhyType[] getArray(Codable[] data) {
        WlanApPhyType[] _out = new WlanApPhyType[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApPhyType) data[_i];
        }
        return _out;
    }

}
