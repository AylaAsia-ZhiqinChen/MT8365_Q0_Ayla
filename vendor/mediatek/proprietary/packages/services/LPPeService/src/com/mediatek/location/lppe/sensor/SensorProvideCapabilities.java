// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.sensor;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class SensorProvideCapabilities implements Codable {

    public final static SensorProvideCapabilities _instance = new SensorProvideCapabilities();

    /**
     * Whether target supports motion state measurements <br>
     */
    public boolean motionStateSupport = false;
    /**
     * Whether target supports secondary motion state measurements <br>
     */
    public boolean secondarySupport = false;
    /**
     * Whether target supports atmosphericc pressure assistance data <br>
     */
    public boolean atmosphericPressureADSupport = false;
    /**
     * Whether target supports atmospheric pressure measurements <br>
     */
    public boolean atmosphericPressureSupport = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof SensorProvideCapabilities)) {
            return false;
        }

        SensorProvideCapabilities _tmp = (SensorProvideCapabilities) _obj;
        if (_tmp.motionStateSupport != motionStateSupport)
            return false;
        if (_tmp.secondarySupport != secondarySupport)
            return false;
        if (_tmp.atmosphericPressureADSupport != atmosphericPressureADSupport)
            return false;
        if (_tmp.atmosphericPressureSupport != atmosphericPressureSupport)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("SensorProvideCapabilities ");
        _o.append("motionStateSupport=[" + motionStateSupport + "] ");
        _o.append("secondarySupport=[" + secondarySupport + "] ");
        _o.append("atmosphericPressureADSupport=[" + atmosphericPressureADSupport + "] ");
        _o.append("atmosphericPressureSupport=[" + atmosphericPressureSupport + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(motionStateSupport);
        _buff.putBool(secondarySupport);
        _buff.putBool(atmosphericPressureADSupport);
        _buff.putBool(atmosphericPressureSupport);
    }

    @Override
    public SensorProvideCapabilities decode(BaseBuffer _buff) {
        SensorProvideCapabilities _out = new SensorProvideCapabilities();
        _out.motionStateSupport = _buff.getBool();
        _out.secondarySupport = _buff.getBool();
        _out.atmosphericPressureADSupport = _buff.getBool();
        _out.atmosphericPressureSupport = _buff.getBool();
        return _out;
    }

    @Override
    public SensorProvideCapabilities[] getArray(Codable[] data) {
        SensorProvideCapabilities[] _out = new SensorProvideCapabilities[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (SensorProvideCapabilities) data[_i];
        }
        return _out;
    }

}
