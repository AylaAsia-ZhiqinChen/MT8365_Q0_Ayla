// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.agps.apn;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public enum AgpsNiEncodingType implements Codable {
    AGPS_NI_ENCODING_TYPE_NONE,
    AGPS_NI_ENCODING_TYPE_GSM7,
    AGPS_NI_ENCODING_TYPE_UTF8,
    AGPS_NI_ENCODING_TYPE_UCS2,
    AGPS_NI_ENCODING_TYPE_ASCII,
;

    public final static AgpsNiEncodingType _instance = AgpsNiEncodingType.AGPS_NI_ENCODING_TYPE_NONE;

    @Override
    public void encode(BaseBuffer buff) {
        switch (this) {
        case AGPS_NI_ENCODING_TYPE_NONE:
            buff.putInt(0);
            break;
        case AGPS_NI_ENCODING_TYPE_GSM7:
            buff.putInt(1);
            break;
        case AGPS_NI_ENCODING_TYPE_UTF8:
            buff.putInt(2);
            break;
        case AGPS_NI_ENCODING_TYPE_UCS2:
            buff.putInt(3);
            break;
        case AGPS_NI_ENCODING_TYPE_ASCII:
            buff.putInt(4);
            break;
        default:
            break;
        }
    }

    @Override
    public AgpsNiEncodingType decode(BaseBuffer buff) {
        int _type = buff.getInt();
        switch (_type) {
        case 0:
            return AGPS_NI_ENCODING_TYPE_NONE;
        case 1:
            return AGPS_NI_ENCODING_TYPE_GSM7;
        case 2:
            return AGPS_NI_ENCODING_TYPE_UTF8;
        case 3:
            return AGPS_NI_ENCODING_TYPE_UCS2;
        case 4:
            return AGPS_NI_ENCODING_TYPE_ASCII;
        }
        return null;
    }

    @Override
    public AgpsNiEncodingType[] getArray(Codable[] data) {
        AgpsNiEncodingType[] _out = new AgpsNiEncodingType[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (AgpsNiEncodingType) data[_i];
        }
        return _out;
    }

}
