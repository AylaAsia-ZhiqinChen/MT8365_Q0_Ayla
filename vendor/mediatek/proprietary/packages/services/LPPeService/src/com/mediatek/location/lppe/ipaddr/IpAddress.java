// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.ipaddr;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class IpAddress implements Codable {

    public final static IpAddress _instance = new IpAddress();

    public boolean ipv4Valid = false;
    public byte[] ipv4 = new byte[] {};    // maxSize 4
    public boolean ipv6Valid = false;
    public byte[] ipv6 = new byte[] {};    // maxSize 16
    public Bearer bearer = Bearer.unknown;
    public boolean natValid = false;
    public boolean nat = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof IpAddress)) {
            return false;
        }

        IpAddress _tmp = (IpAddress) _obj;
        if (_tmp.ipv4Valid != ipv4Valid)
            return false;
        if(!Arrays.equals(_tmp.ipv4, ipv4))
            return false;
        if (_tmp.ipv6Valid != ipv6Valid)
            return false;
        if(!Arrays.equals(_tmp.ipv6, ipv6))
            return false;
        if (!_tmp.bearer.equals(bearer))
            return false;
        if (_tmp.natValid != natValid)
            return false;
        if (_tmp.nat != nat)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("IpAddress ");
        _o.append("ipv4Valid=[" + ipv4Valid + "] ");
        _o.append("ipv4=[" + Arrays.toString(ipv4) + "] ");
        _o.append("ipv6Valid=[" + ipv6Valid + "] ");
        _o.append("ipv6=[" + Arrays.toString(ipv6) + "] ");
        _o.append("bearer=[" + bearer + "] ");
        _o.append("natValid=[" + natValid + "] ");
        _o.append("nat=[" + nat + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(ipv4Valid);
        SocketUtils.assertSize(ipv4, 4, 0);
        _buff.putArrayByte(ipv4);
        _buff.putBool(ipv6Valid);
        SocketUtils.assertSize(ipv6, 16, 0);
        _buff.putArrayByte(ipv6);
        _buff.putCodable(bearer);
        _buff.putBool(natValid);
        _buff.putBool(nat);
    }

    @Override
    public IpAddress decode(BaseBuffer _buff) {
        IpAddress _out = new IpAddress();
        _out.ipv4Valid = _buff.getBool();
        _out.ipv4 = _buff.getArrayByte();
        _out.ipv6Valid = _buff.getBool();
        _out.ipv6 = _buff.getArrayByte();
        _out.bearer = (Bearer) _buff.getCodable(Bearer._instance);
        _out.natValid = _buff.getBool();
        _out.nat = _buff.getBool();
        return _out;
    }

    @Override
    public IpAddress[] getArray(Codable[] data) {
        IpAddress[] _out = new IpAddress[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (IpAddress) data[_i];
        }
        return _out;
    }

}
