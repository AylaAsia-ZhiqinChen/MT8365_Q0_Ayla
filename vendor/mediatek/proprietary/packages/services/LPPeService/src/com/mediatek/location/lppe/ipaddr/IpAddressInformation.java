// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.ipaddr;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class IpAddressInformation implements Codable {

    public final static IpAddressInformation _instance = new IpAddressInformation();

    public IpAddress[] list = new IpAddress[] {};    // maxSize 5

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof IpAddressInformation)) {
            return false;
        }

        IpAddressInformation _tmp = (IpAddressInformation) _obj;
        if(!Arrays.equals(_tmp.list, list))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("IpAddressInformation ");
        _o.append("list=[" + Arrays.toString(list) + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        SocketUtils.assertSize(list, 5, 0);
        _buff.putArrayCodable(list);
    }

    @Override
    public IpAddressInformation decode(BaseBuffer _buff) {
        IpAddressInformation _out = new IpAddressInformation();
        _out.list = IpAddress._instance.getArray(_buff.getArrayCodable(IpAddress._instance));
        return _out;
    }

    @Override
    public IpAddressInformation[] getArray(Codable[] data) {
        IpAddressInformation[] _out = new IpAddressInformation[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (IpAddressInformation) data[_i];
        }
        return _out;
    }

}
