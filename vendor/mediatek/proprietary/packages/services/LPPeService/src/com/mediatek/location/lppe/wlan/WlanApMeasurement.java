// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanApMeasurement implements Codable {

    public final static WlanApMeasurement _instance = new WlanApMeasurement();

    /**
     * apRSSI = 0x1 <br>
     * apChanFreq = 0x2 <br>
     * apRtd = 0x4 <br>
     * apSSID = 0x8 <br>
     */
    public int valid = 0;
    /**
     * This parameter indicates whether a set of WLAN AP measurements were <br>
     * obtained for a serving WLAN AP (TRUE) or a non-serving WLAN AP (FALSE) <br>
     */
    public boolean servingFlag = false;
    /**
     * This field provides the 48 bit MAC address of the reported WLAN AP <br>
     */
    public byte[] apMACAddress = new byte[] {};    // maxSize 6
    /**
     * This field provides the AP signal strength of a beacon frame, probe <br>
     * response frame or measurement pilot frame measured at the target in dBm <br>
     * on the channel indicated by apChannelFrequency field <br>
     * -127..128 <br>
     */
    public float apRSSI = 0;
    /**
     * This field provides the AP channel number identification of the reported WLAN AP <br>
     * 0..256 <br>
     */
    public short apChanFreq = (short) 0;
    /**
     * This field provides the measured round trip delay between the target and WLAN <br>
     * AP and optionally the accuracy expressed as the standard deviation of the delay <br>
     */
    public WlanRTD apRtd = new WlanRTD();
    /**
     * This field provides the SSID of the wireless network served by the AP <br>
     */
    public byte[] apSSID = new byte[] {};    // maxSize 32

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanApMeasurement)) {
            return false;
        }

        WlanApMeasurement _tmp = (WlanApMeasurement) _obj;
        if (_tmp.valid != valid)
            return false;
        if (_tmp.servingFlag != servingFlag)
            return false;
        if(!Arrays.equals(_tmp.apMACAddress, apMACAddress))
            return false;
        if (_tmp.apRSSI != apRSSI)
            return false;
        if (_tmp.apChanFreq != apChanFreq)
            return false;
        if (!_tmp.apRtd.equals(apRtd))
            return false;
        if(!Arrays.equals(_tmp.apSSID, apSSID))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanApMeasurement ");
        _o.append("valid=[" + valid + "] ");
        _o.append("servingFlag=[" + servingFlag + "] ");
        _o.append("apMACAddress=[" + Arrays.toString(apMACAddress) + "] ");
        _o.append("apRSSI=[" + apRSSI + "] ");
        _o.append("apChanFreq=[" + apChanFreq + "] ");
        _o.append("apRtd=[" + apRtd + "] ");
        _o.append("apSSID=[" + Arrays.toString(apSSID) + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putInt(valid);
        _buff.putBool(servingFlag);
        SocketUtils.assertSize(apMACAddress, 6, 0);
        _buff.putArrayByte(apMACAddress);
        _buff.putFloat(apRSSI);
        _buff.putShort(apChanFreq);
        _buff.putCodable(apRtd);
        SocketUtils.assertSize(apSSID, 32, 0);
        _buff.putArrayByte(apSSID);
    }

    @Override
    public WlanApMeasurement decode(BaseBuffer _buff) {
        WlanApMeasurement _out = new WlanApMeasurement();
        _out.valid = _buff.getInt();
        _out.servingFlag = _buff.getBool();
        _out.apMACAddress = _buff.getArrayByte();
        _out.apRSSI = _buff.getFloat();
        _out.apChanFreq = _buff.getShort();
        _out.apRtd = (WlanRTD) _buff.getCodable(WlanRTD._instance);
        _out.apSSID = _buff.getArrayByte();
        return _out;
    }

    @Override
    public WlanApMeasurement[] getArray(Codable[] data) {
        WlanApMeasurement[] _out = new WlanApMeasurement[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApMeasurement) data[_i];
        }
        return _out;
    }

}
