// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanApReportedLocation implements Codable {

    public final static WlanApReportedLocation _instance = new WlanApReportedLocation();

    /**
     * 6-bits indicating the number of valid bits in the fixed-point value <br>
     * of latitude <br>
     */
    public byte latitudeResolution = (byte) 0;
    /**
     * A 34-bits fixed point value consisting of 9-bits of integer and 25-bits <br>
     * of fraction indicating the Latitude (+/- 90 degrees) of the AP <br>
     */
    public byte[] latitude = new byte[] {};    // maxSize 5
    /**
     * 6-bits indicating the number of valid bits in the fixed-point value of <br>
     * longitude <br>
     */
    public byte longitudeResolution = (byte) 0;
    /**
     * A 34-bits fixed point value consisting of 9-bits of integer and 25-bits <br>
     * of fraction indicating the Longitude (+/- 180 degrees) of the AP <br>
     */
    public byte[] longitude = new byte[] {};    // maxSize 5
    /**
     * 4-bits defines the altitude type. Codes defined are: <br>
     * 1: Meters of altitude. <br>
     * 2: Building floors of altitude. altitude value 0.0 represents the floor <br>
     * level associated with ground level. <br>
     */
    public byte altitudeType = (byte) 0;
    /**
     * 6-bits indicating the number of valid bits in the altitude <br>
     */
    public byte altitudeResolution = (byte) 0;
    /**
     * A 30-bit fixed point value consiting of 22-bits of integer and 8-bits of <br>
     * fraction indicating the Altitude of the AP in units defined by altitudeType <br>
     */
    public byte[] altitude = new byte[] {};    // maxSize 4
    /**
     * 8-bits defines the map datum used for the coordinates. Codes defined are: <br>
     * 1: World Geodetic System 1984 (WGS-84) <br>
     * 2: North American Datum 1983 (NAD-83) with North American Vertical <br>
     * Datum 1988 (NAVD-88) <br>
     * 3: North American Datum 1983 (NAD-83) with Mean Lower Low Water <br>
     * (MLLW) vertical datum <br>
     */
    public byte datum = (byte) 0;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanApReportedLocation)) {
            return false;
        }

        WlanApReportedLocation _tmp = (WlanApReportedLocation) _obj;
        if (_tmp.latitudeResolution != latitudeResolution)
            return false;
        if(!Arrays.equals(_tmp.latitude, latitude))
            return false;
        if (_tmp.longitudeResolution != longitudeResolution)
            return false;
        if(!Arrays.equals(_tmp.longitude, longitude))
            return false;
        if (_tmp.altitudeType != altitudeType)
            return false;
        if (_tmp.altitudeResolution != altitudeResolution)
            return false;
        if(!Arrays.equals(_tmp.altitude, altitude))
            return false;
        if (_tmp.datum != datum)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanApReportedLocation ");
        _o.append("latitudeResolution=[" + latitudeResolution + "] ");
        _o.append("latitude=[" + Arrays.toString(latitude) + "] ");
        _o.append("longitudeResolution=[" + longitudeResolution + "] ");
        _o.append("longitude=[" + Arrays.toString(longitude) + "] ");
        _o.append("altitudeType=[" + altitudeType + "] ");
        _o.append("altitudeResolution=[" + altitudeResolution + "] ");
        _o.append("altitude=[" + Arrays.toString(altitude) + "] ");
        _o.append("datum=[" + datum + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putByte(latitudeResolution);
        SocketUtils.assertSize(latitude, 5, 0);
        _buff.putArrayByte(latitude);
        _buff.putByte(longitudeResolution);
        SocketUtils.assertSize(longitude, 5, 0);
        _buff.putArrayByte(longitude);
        _buff.putByte(altitudeType);
        _buff.putByte(altitudeResolution);
        SocketUtils.assertSize(altitude, 4, 0);
        _buff.putArrayByte(altitude);
        _buff.putByte(datum);
    }

    @Override
    public WlanApReportedLocation decode(BaseBuffer _buff) {
        WlanApReportedLocation _out = new WlanApReportedLocation();
        _out.latitudeResolution = _buff.getByte();
        _out.latitude = _buff.getArrayByte();
        _out.longitudeResolution = _buff.getByte();
        _out.longitude = _buff.getArrayByte();
        _out.altitudeType = _buff.getByte();
        _out.altitudeResolution = _buff.getByte();
        _out.altitude = _buff.getArrayByte();
        _out.datum = _buff.getByte();
        return _out;
    }

    @Override
    public WlanApReportedLocation[] getArray(Codable[] data) {
        WlanApReportedLocation[] _out = new WlanApReportedLocation[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApReportedLocation) data[_i];
        }
        return _out;
    }

}
