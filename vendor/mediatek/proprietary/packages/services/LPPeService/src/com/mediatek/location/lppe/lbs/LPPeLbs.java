// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.lbs;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * This is an LPPe interface between LBS Module and AGPSD <br>
 * agpsVersion <br>
 * 1 first MP version <br>
 * lbsVersion <br>
 * 1 first MP version <br>
 * 2 add updateBatteryInfo() and batteryInfo parameter in LbsCapabilities <br>
 * 3 add IMEI in LbsCapabilities <br>
 */
public class LPPeLbs {
    public final static int PROTOCOL_TYPE = 206;
    public final static int MAX_BUFF_SIZE = 4108;
    public final static int REQUEST_CAPABILITIES = 0;
    public final static int PROVIDE_CAPABILITIES = 1;
    public final static int RECEIVE_SUPL_INIT = 2;
    public final static int UPDATE_BATTERY_INFO = 3;
    public final static int UPDATE_NLP_STATUS = 4;

    public static class LPPeLbsSender {
        public boolean requestCapabilities(UdpClient client, int agpsVersion) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_CAPABILITIES);
                buff.putInt(agpsVersion);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean provideCapabilities(UdpClient client, int lbsVersion, LbsCapabilities capabilities) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(PROVIDE_CAPABILITIES);
                buff.putInt(lbsVersion);
                buff.putCodable(capabilities);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean receiveSuplInit(UdpClient client, byte[] suplInit) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(RECEIVE_SUPL_INIT);
                SocketUtils.assertSize(suplInit, 4096, 0);
                buff.putArrayByte(suplInit);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean updateBatteryInfo(UdpClient client, int batteryPercentage) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(UPDATE_BATTERY_INFO);
                buff.putInt(batteryPercentage);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean updateNlpStatus(UdpClient client, boolean enabled) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(UPDATE_NLP_STATUS);
                buff.putBool(enabled);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class LPPeLbsReceiver implements ProtocolHandler {

        public abstract void requestCapabilities(int agpsVersion);

        public abstract void provideCapabilities(int lbsVersion, LbsCapabilities capabilities);

        public abstract void receiveSuplInit(byte[] suplInit);

        public abstract void updateBatteryInfo(int batteryPercentage);

        public abstract void updateNlpStatus(boolean enabled);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case REQUEST_CAPABILITIES: {
                int agpsVersion = (int) buff.getInt();
                requestCapabilities(agpsVersion);
                break;
            }
            case PROVIDE_CAPABILITIES: {
                int lbsVersion = (int) buff.getInt();
                LbsCapabilities capabilities = (LbsCapabilities) buff.getCodable(LbsCapabilities._instance);
                provideCapabilities(lbsVersion, capabilities);
                break;
            }
            case RECEIVE_SUPL_INIT: {
                byte[] suplInit = (byte[]) buff.getArrayByte();
                receiveSuplInit(suplInit);
                break;
            }
            case UPDATE_BATTERY_INFO: {
                int batteryPercentage = (int) buff.getInt();
                updateBatteryInfo(batteryPercentage);
                break;
            }
            case UPDATE_NLP_STATUS: {
                boolean enabled = (boolean) buff.getBool();
                updateNlpStatus(enabled);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
