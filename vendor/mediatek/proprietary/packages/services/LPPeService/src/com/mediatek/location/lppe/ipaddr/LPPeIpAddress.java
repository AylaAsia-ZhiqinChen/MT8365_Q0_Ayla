// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.ipaddr;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * This is an LPPe interface between IP Address Module and AGPSD <br>
 * agpsVersion <br>
 * 1 first MP version <br>
 * ipAddrVersion <br>
 * 1 first MP version <br>
 */
public class LPPeIpAddress {
    public final static int PROTOCOL_TYPE = 205;
    public final static int MAX_BUFF_SIZE = 192;
    public final static int REQUEST_CAPABILITIES = 0;
    public final static int PROVIDE_CAPABILITIES = 1;
    public final static int REQUEST_INFORMATION = 2;
    public final static int PROVIDE_INFORMATION = 3;

    public static class LPPeIpAddressSender {
        public boolean requestCapabilities(UdpClient client, int agpsVersion) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_CAPABILITIES);
                buff.putInt(agpsVersion);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean provideCapabilities(UdpClient client, int ipAddrVersion, IpAddressCapabilities capabilities) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(PROVIDE_CAPABILITIES);
                buff.putInt(ipAddrVersion);
                buff.putCodable(capabilities);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean requestInformation(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_INFORMATION);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean provideInformation(UdpClient client, IpAddressInformation info) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(PROVIDE_INFORMATION);
                buff.putCodable(info);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class LPPeIpAddressReceiver implements ProtocolHandler {

        public abstract void requestCapabilities(int agpsVersion);

        public abstract void provideCapabilities(int ipAddrVersion, IpAddressCapabilities capabilities);

        public abstract void requestInformation();

        public abstract void provideInformation(IpAddressInformation info);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case REQUEST_CAPABILITIES: {
                int agpsVersion = (int) buff.getInt();
                requestCapabilities(agpsVersion);
                break;
            }
            case PROVIDE_CAPABILITIES: {
                int ipAddrVersion = (int) buff.getInt();
                IpAddressCapabilities capabilities = (IpAddressCapabilities) buff.getCodable(IpAddressCapabilities._instance);
                provideCapabilities(ipAddrVersion, capabilities);
                break;
            }
            case REQUEST_INFORMATION: {
                requestInformation();
                break;
            }
            case PROVIDE_INFORMATION: {
                IpAddressInformation info = (IpAddressInformation) buff.getCodable(IpAddressInformation._instance);
                provideInformation(info);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
