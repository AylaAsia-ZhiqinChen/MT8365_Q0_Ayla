// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanApADSupported implements Codable {

    public final static WlanApADSupported _instance = new WlanApADSupported();

    /**
     * mandatory WLAN AP data <br>
     */
    public boolean aplist = false;
    /**
     * location of each WLAN AP <br>
     */
    public boolean aplocation = false;
    /**
     * reliability of WLAN AP location <br>
     */
    public boolean locationreliability = false;
    /**
     * transmit power for each WLAN AP <br>
     */
    public boolean transmitPower = false;
    /**
     * antenna gain for each WLAN AP <br>
     */
    public boolean antennaGain = false;
    /**
     * coverage area for each WLAN AP <br>
     */
    public boolean coverageArea = false;
    /**
     * information for WLAN APs belonging to a different operator than <br>
     * the serving WLAN AP or information for multiple WLAN AP data sets if <br>
     * the serving WLAN AP is not associated with a PLMN operator or if the <br>
     * target device is not served by a WLAN AP <br>
     */
    public boolean nonServing = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanApADSupported)) {
            return false;
        }

        WlanApADSupported _tmp = (WlanApADSupported) _obj;
        if (_tmp.aplist != aplist)
            return false;
        if (_tmp.aplocation != aplocation)
            return false;
        if (_tmp.locationreliability != locationreliability)
            return false;
        if (_tmp.transmitPower != transmitPower)
            return false;
        if (_tmp.antennaGain != antennaGain)
            return false;
        if (_tmp.coverageArea != coverageArea)
            return false;
        if (_tmp.nonServing != nonServing)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanApADSupported ");
        _o.append("aplist=[" + aplist + "] ");
        _o.append("aplocation=[" + aplocation + "] ");
        _o.append("locationreliability=[" + locationreliability + "] ");
        _o.append("transmitPower=[" + transmitPower + "] ");
        _o.append("antennaGain=[" + antennaGain + "] ");
        _o.append("coverageArea=[" + coverageArea + "] ");
        _o.append("nonServing=[" + nonServing + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(aplist);
        _buff.putBool(aplocation);
        _buff.putBool(locationreliability);
        _buff.putBool(transmitPower);
        _buff.putBool(antennaGain);
        _buff.putBool(coverageArea);
        _buff.putBool(nonServing);
    }

    @Override
    public WlanApADSupported decode(BaseBuffer _buff) {
        WlanApADSupported _out = new WlanApADSupported();
        _out.aplist = _buff.getBool();
        _out.aplocation = _buff.getBool();
        _out.locationreliability = _buff.getBool();
        _out.transmitPower = _buff.getBool();
        _out.antennaGain = _buff.getBool();
        _out.coverageArea = _buff.getBool();
        _out.nonServing = _buff.getBool();
        return _out;
    }

    @Override
    public WlanApADSupported[] getArray(Codable[] data) {
        WlanApADSupported[] _out = new WlanApADSupported[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApADSupported) data[_i];
        }
        return _out;
    }

}
