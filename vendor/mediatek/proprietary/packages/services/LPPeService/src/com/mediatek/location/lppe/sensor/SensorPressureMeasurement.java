// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.sensor;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class SensorPressureMeasurement implements Codable {

    public final static SensorPressureMeasurement _instance = new SensorPressureMeasurement();

    /**
     * This field specifies the measured atmospheric pressure in units of Pa <br>
     * (corresponding to a numerical altitude resolution of about 0.1m at sea level) <br>
     * 30000..115000 <br>
     */
    public int sensorMeasurement = 0;
    /**
     * This field specifies any adjustment in units of Pa applied by a target to <br>
     * the output of the sensor(s) to produce a more accurate atmospheric pressure <br>
     * accurate atmospheric pressure = sensorMeasurement + adjustment <br>
     * -5000..5000 <br>
     */
    public boolean adjustmentValid = false;
    public short adjustment = (short) 0;
    /**
     * This field provides the expected range for the pressure measurement and <br>
     * the confidence as a percentage that the true pressure lies in a range of <br>
     * (measurement + adjustment ?V range) to (measurement + adjustment + range). <br>
     * This field is optional and shall be provided if available <br>
     * 0..1000 <br>
     */
    public boolean uncertaintyRangeValid = false;
    public short uncertaintyRange = (short) 0;
    /**
     * 0..100 <br>
     */
    public boolean uncertaintyConfidenceValid = false;
    public byte uncertaintyConfidence = (byte) 0;
    /**
     * This field provides the temperature in degrees Celsius associated with the sensor(s) <br>
     * used for the pressure measurement. Note that the sensor temperature is internal to <br>
     * the target and may differ from the temperature outside the target if a different sensor <br>
     * is used to measure outside temperature <br>
     * -100..150 <br>
     */
    public boolean temperatureValid = false;
    public short temperature = (short) 0;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof SensorPressureMeasurement)) {
            return false;
        }

        SensorPressureMeasurement _tmp = (SensorPressureMeasurement) _obj;
        if (_tmp.sensorMeasurement != sensorMeasurement)
            return false;
        if (_tmp.adjustmentValid != adjustmentValid)
            return false;
        if (_tmp.adjustment != adjustment)
            return false;
        if (_tmp.uncertaintyRangeValid != uncertaintyRangeValid)
            return false;
        if (_tmp.uncertaintyRange != uncertaintyRange)
            return false;
        if (_tmp.uncertaintyConfidenceValid != uncertaintyConfidenceValid)
            return false;
        if (_tmp.uncertaintyConfidence != uncertaintyConfidence)
            return false;
        if (_tmp.temperatureValid != temperatureValid)
            return false;
        if (_tmp.temperature != temperature)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("SensorPressureMeasurement ");
        _o.append("sensorMeasurement=[" + sensorMeasurement + "] ");
        _o.append("adjustmentValid=[" + adjustmentValid + "] ");
        _o.append("adjustment=[" + adjustment + "] ");
        _o.append("uncertaintyRangeValid=[" + uncertaintyRangeValid + "] ");
        _o.append("uncertaintyRange=[" + uncertaintyRange + "] ");
        _o.append("uncertaintyConfidenceValid=[" + uncertaintyConfidenceValid + "] ");
        _o.append("uncertaintyConfidence=[" + uncertaintyConfidence + "] ");
        _o.append("temperatureValid=[" + temperatureValid + "] ");
        _o.append("temperature=[" + temperature + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putInt(sensorMeasurement);
        _buff.putBool(adjustmentValid);
        _buff.putShort(adjustment);
        _buff.putBool(uncertaintyRangeValid);
        _buff.putShort(uncertaintyRange);
        _buff.putBool(uncertaintyConfidenceValid);
        _buff.putByte(uncertaintyConfidence);
        _buff.putBool(temperatureValid);
        _buff.putShort(temperature);
    }

    @Override
    public SensorPressureMeasurement decode(BaseBuffer _buff) {
        SensorPressureMeasurement _out = new SensorPressureMeasurement();
        _out.sensorMeasurement = _buff.getInt();
        _out.adjustmentValid = _buff.getBool();
        _out.adjustment = _buff.getShort();
        _out.uncertaintyRangeValid = _buff.getBool();
        _out.uncertaintyRange = _buff.getShort();
        _out.uncertaintyConfidenceValid = _buff.getBool();
        _out.uncertaintyConfidence = _buff.getByte();
        _out.temperatureValid = _buff.getBool();
        _out.temperature = _buff.getShort();
        return _out;
    }

    @Override
    public SensorPressureMeasurement[] getArray(Codable[] data) {
        SensorPressureMeasurement[] _out = new SensorPressureMeasurement[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (SensorPressureMeasurement) data[_i];
        }
        return _out;
    }

}
