// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.network;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class NetworkLocationMeasurement implements Codable {

    public final static NetworkLocationMeasurement _instance = new NetworkLocationMeasurement();

    /**
     * UTC time of this fix, in milliseconds since January 1, 1970 <br>
     */
    public long time = 0;
    /**
     * in degrees <br>
     */
    public double latitude = 0;
    /**
     * in degrees <br>
     */
    public double longitude = 0;
    /**
     * the estimated accuracy of this location, in meters <br>
     */
    public boolean accuracyValid = false;
    public float accuracy = 0;
    /**
     * in meters above the WGS 84 reference ellipsoid <br>
     */
    public boolean altitudeValid = false;
    public double altitude = 0;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof NetworkLocationMeasurement)) {
            return false;
        }

        NetworkLocationMeasurement _tmp = (NetworkLocationMeasurement) _obj;
        if (_tmp.time != time)
            return false;
        if (_tmp.latitude != latitude)
            return false;
        if (_tmp.longitude != longitude)
            return false;
        if (_tmp.accuracyValid != accuracyValid)
            return false;
        if (_tmp.accuracy != accuracy)
            return false;
        if (_tmp.altitudeValid != altitudeValid)
            return false;
        if (_tmp.altitude != altitude)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("NetworkLocationMeasurement ");
        _o.append("time=[" + time + "] ");
        _o.append("latitude=[" + latitude + "] ");
        _o.append("longitude=[" + longitude + "] ");
        _o.append("accuracyValid=[" + accuracyValid + "] ");
        _o.append("accuracy=[" + accuracy + "] ");
        _o.append("altitudeValid=[" + altitudeValid + "] ");
        _o.append("altitude=[" + altitude + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putLong(time);
        _buff.putDouble(latitude);
        _buff.putDouble(longitude);
        _buff.putBool(accuracyValid);
        _buff.putFloat(accuracy);
        _buff.putBool(altitudeValid);
        _buff.putDouble(altitude);
    }

    @Override
    public NetworkLocationMeasurement decode(BaseBuffer _buff) {
        NetworkLocationMeasurement _out = new NetworkLocationMeasurement();
        _out.time = _buff.getLong();
        _out.latitude = _buff.getDouble();
        _out.longitude = _buff.getDouble();
        _out.accuracyValid = _buff.getBool();
        _out.accuracy = _buff.getFloat();
        _out.altitudeValid = _buff.getBool();
        _out.altitude = _buff.getDouble();
        return _out;
    }

    @Override
    public NetworkLocationMeasurement[] getArray(Codable[] data) {
        NetworkLocationMeasurement[] _out = new NetworkLocationMeasurement[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (NetworkLocationMeasurement) data[_i];
        }
        return _out;
    }

}
