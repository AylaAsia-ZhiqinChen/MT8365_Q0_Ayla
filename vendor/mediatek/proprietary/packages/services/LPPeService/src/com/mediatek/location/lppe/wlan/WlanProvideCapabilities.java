// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

/**
 * is used by the target to provide its capabilities for WLAN AP positioning <br>
 * to the server <br>
 */
public class WlanProvideCapabilities implements Codable {

    public final static WlanProvideCapabilities _instance = new WlanProvideCapabilities();

    /**
     * This parameter indicates whether DUT can support WLAN functionality <br>
     */
    public boolean isWlanSupported = false;
    /**
     * This parameter if present indicates that the target can function as a <br>
     * WLAN AP <br>
     */
    public boolean apCapabilityValid = false;
    public WlanApCapability apCapability = new WlanApCapability();
    /**
     * This field provides the WLAN AP types supported by the target device <br>
     * when functioning as a WLAN station <br>
     */
    public boolean wlanTypesSupportedValid = false;
    public WlanTypesSupported wlanTypesSupported = new WlanTypesSupported();
    /**
     * This field specifies the WLAN AP assistance data supported by the target device <br>
     */
    public WlanApADSupported apADSupported = new WlanApADSupported();
    /**
     * This field specifies the MAC Address of the UE. This field should be included <br>
     * for location for an emergency call and may be included in other cases <br>
     */
    public byte[] ueMACAddress = new byte[] {};    // maxSize 6
    /**
     * This field specifies the E-CID measurements supported by the target device <br>
     * when accessing a WLAN AP <br>
     */
    public WlanMeasurements measSupported = new WlanMeasurements();

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanProvideCapabilities)) {
            return false;
        }

        WlanProvideCapabilities _tmp = (WlanProvideCapabilities) _obj;
        if (_tmp.isWlanSupported != isWlanSupported)
            return false;
        if (_tmp.apCapabilityValid != apCapabilityValid)
            return false;
        if (!_tmp.apCapability.equals(apCapability))
            return false;
        if (_tmp.wlanTypesSupportedValid != wlanTypesSupportedValid)
            return false;
        if (!_tmp.wlanTypesSupported.equals(wlanTypesSupported))
            return false;
        if (!_tmp.apADSupported.equals(apADSupported))
            return false;
        if(!Arrays.equals(_tmp.ueMACAddress, ueMACAddress))
            return false;
        if (!_tmp.measSupported.equals(measSupported))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanProvideCapabilities ");
        _o.append("isWlanSupported=[" + isWlanSupported + "] ");
        _o.append("apCapabilityValid=[" + apCapabilityValid + "] ");
        _o.append("apCapability=[" + apCapability + "] ");
        _o.append("wlanTypesSupportedValid=[" + wlanTypesSupportedValid + "] ");
        _o.append("wlanTypesSupported=[" + wlanTypesSupported + "] ");
        _o.append("apADSupported=[" + apADSupported + "] ");
        _o.append("ueMACAddress=[" + Arrays.toString(ueMACAddress) + "] ");
        _o.append("measSupported=[" + measSupported + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putBool(isWlanSupported);
        _buff.putBool(apCapabilityValid);
        _buff.putCodable(apCapability);
        _buff.putBool(wlanTypesSupportedValid);
        _buff.putCodable(wlanTypesSupported);
        _buff.putCodable(apADSupported);
        SocketUtils.assertSize(ueMACAddress, 6, 0);
        _buff.putArrayByte(ueMACAddress);
        _buff.putCodable(measSupported);
    }

    @Override
    public WlanProvideCapabilities decode(BaseBuffer _buff) {
        WlanProvideCapabilities _out = new WlanProvideCapabilities();
        _out.isWlanSupported = _buff.getBool();
        _out.apCapabilityValid = _buff.getBool();
        _out.apCapability = (WlanApCapability) _buff.getCodable(WlanApCapability._instance);
        _out.wlanTypesSupportedValid = _buff.getBool();
        _out.wlanTypesSupported = (WlanTypesSupported) _buff.getCodable(WlanTypesSupported._instance);
        _out.apADSupported = (WlanApADSupported) _buff.getCodable(WlanApADSupported._instance);
        _out.ueMACAddress = _buff.getArrayByte();
        _out.measSupported = (WlanMeasurements) _buff.getCodable(WlanMeasurements._instance);
        return _out;
    }

    @Override
    public WlanProvideCapabilities[] getArray(Codable[] data) {
        WlanProvideCapabilities[] _out = new WlanProvideCapabilities[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanProvideCapabilities) data[_i];
        }
        return _out;
    }

}
