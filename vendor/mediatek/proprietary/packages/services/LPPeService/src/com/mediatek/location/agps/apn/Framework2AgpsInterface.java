// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.agps.apn;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from Framework  to AGPS <br>
 */
public class Framework2AgpsInterface {
    public final static int PROTOCOL_TYPE = 302;
    public final static int MAX_BUFF_SIZE = 68;
    public final static int DNS_QUERY_RESULT = 0;
    public final static int DNS_QUERY_RESULT2 = 1;
    public final static int C2K_APN_RESULT = 2;
    public final static int C2K_APN_FAILED = 3;
    public final static int C2K_APN_CLOSED = 4;
    public final static int AIRPLANE_MODE_CHANGED = 5;
    public final static int AGPS_NI_RESPONSE = 6;

    public static class Framework2AgpsInterfaceSender {
        public boolean DnsQueryResult(UdpClient client, boolean isSuccess, boolean hasIpv4, int ipv4, boolean hasIpv6, byte[] ipv6) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(DNS_QUERY_RESULT);
                buff.putBool(isSuccess);
                buff.putBool(hasIpv4);
                buff.putInt(ipv4);
                buff.putBool(hasIpv6);
                SocketUtils.assertSize(ipv6, 16, 0);
                buff.putArrayByte(ipv6);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean DnsQueryResult2(UdpClient client, boolean isSuccess, boolean hasIpv4, int ipv4, boolean hasIpv6, byte[] ipv6, boolean hasNetId, int netId) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(DNS_QUERY_RESULT2);
                buff.putBool(isSuccess);
                buff.putBool(hasIpv4);
                buff.putInt(ipv4);
                buff.putBool(hasIpv6);
                SocketUtils.assertSize(ipv6, 16, 0);
                buff.putArrayByte(ipv6);
                buff.putBool(hasNetId);
                buff.putInt(netId);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean C2kApnResult(UdpClient client, int netId, boolean isConnected, int type, boolean isRoaming, boolean isNetworkAvailable, String extraInfo, String defaultApn, String apnName, int ipType) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(C2K_APN_RESULT);
                buff.putInt(netId);
                buff.putBool(isConnected);
                buff.putInt(type);
                buff.putBool(isRoaming);
                buff.putBool(isNetworkAvailable);
                SocketUtils.assertSize(extraInfo, 10, 0);
                buff.putString(extraInfo);
                SocketUtils.assertSize(defaultApn, 10, 0);
                buff.putString(defaultApn);
                SocketUtils.assertSize(apnName, 10, 0);
                buff.putString(apnName);
                buff.putInt(ipType);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean C2kApnFailed(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(C2K_APN_FAILED);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean C2kApnClosed(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(C2K_APN_CLOSED);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean AirplaneModeChanged(UdpClient client, boolean enabled) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(AIRPLANE_MODE_CHANGED);
                buff.putBool(enabled);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean AgpsNiResponse(UdpClient client, int sessionId, AgpsNiResponseType response) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(AGPS_NI_RESPONSE);
                buff.putInt(sessionId);
                buff.putCodable(response);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }
/*
    public static abstract class Framework2AgpsInterfaceReceiver implements ProtocolHandler {

        public abstract void DnsQueryResult(boolean isSuccess, boolean hasIpv4, int ipv4, boolean hasIpv6, byte[] ipv6);

        public abstract void DnsQueryResult2(boolean isSuccess, boolean hasIpv4, int ipv4, boolean hasIpv6, byte[] ipv6, boolean hasNetId, int netId);

        public abstract void C2kApnResult(int netId, boolean isConnected, int type, boolean isRoaming, boolean isNetworkAvailable, String extraInfo, String defaultApn, String apnName, int ipType);

        public abstract void C2kApnFailed();

        public abstract void C2kApnClosed();

        public abstract void AirplaneModeChanged(boolean enabled);

        public abstract void AgpsNiResponse(int sessionId, AgpsNiResponseType response);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case DNS_QUERY_RESULT: {
                boolean isSuccess = (boolean) buff.getBool();
                boolean hasIpv4 = (boolean) buff.getBool();
                int ipv4 = (int) buff.getInt();
                boolean hasIpv6 = (boolean) buff.getBool();
                byte[] ipv6 = (byte[]) buff.getArrayByte();
                DnsQueryResult(isSuccess, hasIpv4, ipv4, hasIpv6, ipv6);
                break;
            }
            case DNS_QUERY_RESULT2: {
                boolean isSuccess = (boolean) buff.getBool();
                boolean hasIpv4 = (boolean) buff.getBool();
                int ipv4 = (int) buff.getInt();
                boolean hasIpv6 = (boolean) buff.getBool();
                byte[] ipv6 = (byte[]) buff.getArrayByte();
                boolean hasNetId = (boolean) buff.getBool();
                int netId = (int) buff.getInt();
                DnsQueryResult2(isSuccess, hasIpv4, ipv4, hasIpv6, ipv6, hasNetId, netId);
                break;
            }
            case C2K_APN_RESULT: {
                int netId = (int) buff.getInt();
                boolean isConnected = (boolean) buff.getBool();
                int type = (int) buff.getInt();
                boolean isRoaming = (boolean) buff.getBool();
                boolean isNetworkAvailable = (boolean) buff.getBool();
                String extraInfo = (String) buff.getString();
                String defaultApn = (String) buff.getString();
                String apnName = (String) buff.getString();
                int ipType = (int) buff.getInt();
                C2kApnResult(netId, isConnected, type, isRoaming, isNetworkAvailable, extraInfo, defaultApn, apnName, ipType);
                break;
            }
            case C2K_APN_FAILED: {
                C2kApnFailed();
                break;
            }
            case C2K_APN_CLOSED: {
                C2kApnClosed();
                break;
            }
            case AIRPLANE_MODE_CHANGED: {
                boolean enabled = (boolean) buff.getBool();
                AirplaneModeChanged(enabled);
                break;
            }
            case AGPS_NI_RESPONSE: {
                int sessionId = (int) buff.getInt();
                AgpsNiResponseType response = (AgpsNiResponseType) buff.getCodable(AgpsNiResponseType._instance);
                AgpsNiResponse(sessionId, response);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }
*/
}
