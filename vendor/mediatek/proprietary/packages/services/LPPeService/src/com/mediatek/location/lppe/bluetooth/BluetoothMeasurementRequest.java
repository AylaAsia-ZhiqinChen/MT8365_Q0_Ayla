// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.bluetooth;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

/**
 * is used to request BT/BTLE measurements <br>
 */
public class BluetoothMeasurementRequest implements Codable {

    public final static BluetoothMeasurementRequest _instance = new BluetoothMeasurementRequest();

    /**
     * This field specifies if the target is forbidded, allowed, or requested to provide <br>
     * multiple measurement sets per BT <br>
     */
    public BluetoothMultipleMeasurement btMultipleMeasurement = BluetoothMultipleMeasurement.forbidden;
    /**
     * Request BT round trip delay <br>
     */
    public boolean btRtd = false;
    /**
     * This field specifies if the target is forbidden, allowed, or requested to provide <br>
     * multiple measurement sets per BTLE <br>
     */
    public BluetoothMultipleMeasurement btleMultipleMeasurement = BluetoothMultipleMeasurement.forbidden;
    /**
     * Request BTLE round trip delay <br>
     */
    public boolean btleRtd = false;

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof BluetoothMeasurementRequest)) {
            return false;
        }

        BluetoothMeasurementRequest _tmp = (BluetoothMeasurementRequest) _obj;
        if (!_tmp.btMultipleMeasurement.equals(btMultipleMeasurement))
            return false;
        if (_tmp.btRtd != btRtd)
            return false;
        if (!_tmp.btleMultipleMeasurement.equals(btleMultipleMeasurement))
            return false;
        if (_tmp.btleRtd != btleRtd)
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("BluetoothMeasurementRequest ");
        _o.append("btMultipleMeasurement=[" + btMultipleMeasurement + "] ");
        _o.append("btRtd=[" + btRtd + "] ");
        _o.append("btleMultipleMeasurement=[" + btleMultipleMeasurement + "] ");
        _o.append("btleRtd=[" + btleRtd + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        _buff.putCodable(btMultipleMeasurement);
        _buff.putBool(btRtd);
        _buff.putCodable(btleMultipleMeasurement);
        _buff.putBool(btleRtd);
    }

    @Override
    public BluetoothMeasurementRequest decode(BaseBuffer _buff) {
        BluetoothMeasurementRequest _out = new BluetoothMeasurementRequest();
        _out.btMultipleMeasurement = (BluetoothMultipleMeasurement) _buff.getCodable(BluetoothMultipleMeasurement._instance);
        _out.btRtd = _buff.getBool();
        _out.btleMultipleMeasurement = (BluetoothMultipleMeasurement) _buff.getCodable(BluetoothMultipleMeasurement._instance);
        _out.btleRtd = _buff.getBool();
        return _out;
    }

    @Override
    public BluetoothMeasurementRequest[] getArray(Codable[] data) {
        BluetoothMeasurementRequest[] _out = new BluetoothMeasurementRequest[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (BluetoothMeasurementRequest) data[_i];
        }
        return _out;
    }

}
