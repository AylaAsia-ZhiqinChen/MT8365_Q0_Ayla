// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.agps.apn;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from AGPS  to Framework <br>
 */
public class Agps2FrameworkInterface {
    public final static int PROTOCOL_TYPE = 301;
    public final static int MAX_BUFF_SIZE = 2342;
    /**
     * check if this interface is available and setup the configuration <br>
     * esuplApnMode: <br>
     * 0 to use Emergency / IMS APN if they are available as GSMA IR92 (default) <br>
     * 1 to use Emergency APN if it is available <br>
     * 2 to use IMS APN if it is available <br>
     * 3 not to use Emergency / IMS APN, just as a normal supl <br>
     */
    public final static int IS_EXIST = 0;
    public final static int ACQUIRE_WAKE_LOCK = 1;
    public final static int RELEASE_WAKE_LOCK = 2;
    public final static int REQUEST_DEDICATED_APN_AND_DNS_QUERY = 3;
    public final static int RELEASE_DEDICATED_APN = 4;
    /**
     * when emergency call is dialed and location is requested from network <br>
     * AGPSD will decide to send this message to framework to show <br>
     * the GPS icon to meet the operator requirement <br>
     */
    public final static int REQUEST_GPS_ICON = 5;
    /**
     * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
     * AGPSD will send this message to framework to remove the GPS icon <br>
     */
    public final static int REMOVE_GPS_ICON = 6;
    public final static int REQUEST_C2K_APN = 7;
    public final static int RELEASE_C2K_APN = 8;
    public final static int AGPS_NI_NOTIFY = 9;

    public static class Agps2FrameworkInterfaceSender {
        /**
          * check if this interface is available and setup the configuration <br>
          * esuplApnMode: <br>
          * 0 to use Emergency / IMS APN if they are available as GSMA IR92 (default) <br>
          * 1 to use Emergency APN if it is available <br>
          * 2 to use IMS APN if it is available <br>
          * 3 not to use Emergency / IMS APN, just as a normal supl <br>
          */
        public boolean isExist(UdpClient client, byte esuplApnMode) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(IS_EXIST);
                buff.putByte(esuplApnMode);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean acquireWakeLock(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(ACQUIRE_WAKE_LOCK);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean releaseWakeLock(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(RELEASE_WAKE_LOCK);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean requestDedicatedApnAndDnsQuery(UdpClient client, String fqdn, boolean isEmergencySupl, boolean isApnEnabled) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_DEDICATED_APN_AND_DNS_QUERY);
                SocketUtils.assertSize(fqdn, 256, 0);
                buff.putString(fqdn);
                buff.putBool(isEmergencySupl);
                buff.putBool(isApnEnabled);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean releaseDedicatedApn(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(RELEASE_DEDICATED_APN);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        /**
          * when emergency call is dialed and location is requested from network <br>
          * AGPSD will decide to send this message to framework to show <br>
          * the GPS icon to meet the operator requirement <br>
          */
        public boolean requestGpsIcon(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_GPS_ICON);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        /**
          * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
          * AGPSD will send this message to framework to remove the GPS icon <br>
          */
        public boolean removeGpsIcon(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REMOVE_GPS_ICON);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean requestC2kApn(UdpClient client, byte[] addr, boolean isEmergency) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(REQUEST_C2K_APN);
                SocketUtils.assertSize(addr, 256, 0);
                buff.putArrayByte(addr);
                buff.putBool(isEmergency);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean releaseC2kApn(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(RELEASE_C2K_APN);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean AgpsNiNotify(UdpClient client, int sessionId, AgpsNiType niType, AgpsNotifyType notifyType, String requestorId, String text, AgpsNiEncodingType requestorIdEncoding, AgpsNiEncodingType textEncoding) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(AGPS_NI_NOTIFY);
                buff.putInt(sessionId);
                buff.putCodable(niType);
                buff.putCodable(notifyType);
                SocketUtils.assertSize(requestorId, 256, 0);
                buff.putString(requestorId);
                SocketUtils.assertSize(text, 2048, 0);
                buff.putString(text);
                buff.putCodable(requestorIdEncoding);
                buff.putCodable(textEncoding);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class Agps2FrameworkInterfaceReceiver implements ProtocolHandler {

        /**
          * check if this interface is available and setup the configuration <br>
          * esuplApnMode: <br>
          * 0 to use Emergency / IMS APN if they are available as GSMA IR92 (default) <br>
          * 1 to use Emergency APN if it is available <br>
          * 2 to use IMS APN if it is available <br>
          * 3 not to use Emergency / IMS APN, just as a normal supl <br>
          */
        public abstract void isExist(byte esuplApnMode);

        public abstract void acquireWakeLock();

        public abstract void releaseWakeLock();

        public abstract void requestDedicatedApnAndDnsQuery(String fqdn, boolean isEmergencySupl, boolean isApnEnabled);

        public abstract void releaseDedicatedApn();

        /**
          * when emergency call is dialed and location is requested from network <br>
          * AGPSD will decide to send this message to framework to show <br>
          * the GPS icon to meet the operator requirement <br>
          */
        public abstract void requestGpsIcon();

        /**
          * if requestGpsIcon() was sent before, in the end of this AGPS session <br>
          * AGPSD will send this message to framework to remove the GPS icon <br>
          */
        public abstract void removeGpsIcon();

        public abstract void requestC2kApn(byte[] addr, boolean isEmergency);

        public abstract void releaseC2kApn();

        public abstract void AgpsNiNotify(int sessionId, AgpsNiType niType, AgpsNotifyType notifyType, String requestorId, String text, AgpsNiEncodingType requestorIdEncoding, AgpsNiEncodingType textEncoding);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case IS_EXIST: {
                byte esuplApnMode = (byte) buff.getByte();
                isExist(esuplApnMode);
                break;
            }
            case ACQUIRE_WAKE_LOCK: {
                acquireWakeLock();
                break;
            }
            case RELEASE_WAKE_LOCK: {
                releaseWakeLock();
                break;
            }
            case REQUEST_DEDICATED_APN_AND_DNS_QUERY: {
                String fqdn = (String) buff.getString();
                boolean isEmergencySupl = (boolean) buff.getBool();
                boolean isApnEnabled = (boolean) buff.getBool();
                requestDedicatedApnAndDnsQuery(fqdn, isEmergencySupl, isApnEnabled);
                break;
            }
            case RELEASE_DEDICATED_APN: {
                releaseDedicatedApn();
                break;
            }
            case REQUEST_GPS_ICON: {
                requestGpsIcon();
                break;
            }
            case REMOVE_GPS_ICON: {
                removeGpsIcon();
                break;
            }
            case REQUEST_C2K_APN: {
                byte[] addr = (byte[]) buff.getArrayByte();
                boolean isEmergency = (boolean) buff.getBool();
                requestC2kApn(addr, isEmergency);
                break;
            }
            case RELEASE_C2K_APN: {
                releaseC2kApn();
                break;
            }
            case AGPS_NI_NOTIFY: {
                int sessionId = (int) buff.getInt();
                AgpsNiType niType = (AgpsNiType) buff.getCodable(AgpsNiType._instance);
                AgpsNotifyType notifyType = (AgpsNotifyType) buff.getCodable(AgpsNotifyType._instance);
                String requestorId = (String) buff.getString();
                String text = (String) buff.getString();
                AgpsNiEncodingType requestorIdEncoding = (AgpsNiEncodingType) buff.getCodable(AgpsNiEncodingType._instance);
                AgpsNiEncodingType textEncoding = (AgpsNiEncodingType) buff.getCodable(AgpsNiEncodingType._instance);
                AgpsNiNotify(sessionId, niType, notifyType, requestorId, text, requestorIdEncoding, textEncoding);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
