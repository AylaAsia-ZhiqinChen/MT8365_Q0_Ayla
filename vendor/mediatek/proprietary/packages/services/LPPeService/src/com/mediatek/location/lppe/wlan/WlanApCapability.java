// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public class WlanApCapability implements Codable {

    public final static WlanApCapability _instance = new WlanApCapability();

    public byte[] apMACAddress = new byte[] {};    // maxSize 6
    public WlanTypesSupported apTypes = new WlanTypesSupported();

    public boolean equals(Object _obj) {
        if (_obj == null) {
            return false;
        }
        if (_obj == this) {
            return true;
        }
        if (!(_obj instanceof WlanApCapability)) {
            return false;
        }

        WlanApCapability _tmp = (WlanApCapability) _obj;
        if(!Arrays.equals(_tmp.apMACAddress, apMACAddress))
            return false;
        if (!_tmp.apTypes.equals(apTypes))
            return false;
        return true;
    }

    public String toString() {
        StringBuilder _o = new StringBuilder();
        _o.append("WlanApCapability ");
        _o.append("apMACAddress=[" + Arrays.toString(apMACAddress) + "] ");
        _o.append("apTypes=[" + apTypes + "] ");
        return _o.toString();
    }

    @Override
    public void encode(BaseBuffer _buff) {
        SocketUtils.assertSize(apMACAddress, 6, 0);
        _buff.putArrayByte(apMACAddress);
        _buff.putCodable(apTypes);
    }

    @Override
    public WlanApCapability decode(BaseBuffer _buff) {
        WlanApCapability _out = new WlanApCapability();
        _out.apMACAddress = _buff.getArrayByte();
        _out.apTypes = (WlanTypesSupported) _buff.getCodable(WlanTypesSupported._instance);
        return _out;
    }

    @Override
    public WlanApCapability[] getArray(Codable[] data) {
        WlanApCapability[] _out = new WlanApCapability[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApCapability) data[_i];
        }
        return _out;
    }

}
