// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.location.lppe.wlan;

import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.Codable;

public enum WlanApDeviceType implements Codable {
    ieee802_11a,
    ieee802_11b,
    ieee802_11g,
    ieee802_11n,
    ieee802_11ac,
    ieee802_11ad,
    end,
;

    public final static WlanApDeviceType _instance = WlanApDeviceType.ieee802_11a;

    @Override
    public void encode(BaseBuffer buff) {
        switch (this) {
        case ieee802_11a:
            buff.putInt(0);
            break;
        case ieee802_11b:
            buff.putInt(1);
            break;
        case ieee802_11g:
            buff.putInt(2);
            break;
        case ieee802_11n:
            buff.putInt(3);
            break;
        case ieee802_11ac:
            buff.putInt(4);
            break;
        case ieee802_11ad:
            buff.putInt(5);
            break;
        case end:
            buff.putInt(2147483647);
            break;
        default:
            break;
        }
    }

    @Override
    public WlanApDeviceType decode(BaseBuffer buff) {
        int _type = buff.getInt();
        switch (_type) {
        case 0:
            return ieee802_11a;
        case 1:
            return ieee802_11b;
        case 2:
            return ieee802_11g;
        case 3:
            return ieee802_11n;
        case 4:
            return ieee802_11ac;
        case 5:
            return ieee802_11ad;
        case 2147483647:
            return end;
        }
        return null;
    }

    @Override
    public WlanApDeviceType[] getArray(Codable[] data) {
        WlanApDeviceType[] _out = new WlanApDeviceType[data.length];
        for (int _i = 0; _i < data.length; _i++) {
            _out[_i] = (WlanApDeviceType) data[_i];
        }
        return _out;
    }

}
