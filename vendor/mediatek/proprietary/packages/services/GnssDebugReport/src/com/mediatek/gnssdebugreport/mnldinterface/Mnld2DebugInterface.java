// This source code is generated by UdpGeneratorTool, not recommend to modify it directly
package com.mediatek.gnssdebugreport.mnldinterface;

import java.util.Arrays;

import com.mediatek.socket.base.SocketUtils;
import com.mediatek.socket.base.SocketUtils.BaseBuffer;
import com.mediatek.socket.base.SocketUtils.ProtocolHandler;
import com.mediatek.socket.base.SocketUtils.UdpServerInterface;
import com.mediatek.socket.base.UdpClient;

/**
 * The interface from Mnld to Debug <br>
 */
public class Mnld2DebugInterface {
    public final static int PROTOCOL_TYPE = 304;
    public final static int MAX_BUFF_SIZE = 269;
    public final static int MNLD_ACK_DEBUG_REQ = 0;
    public final static int MNLD_UPDATE_REBOOT = 1;
    public final static int MNLD_UPDATE_GPS_STATUS = 2;
    public final static int MNLD_UPDATE_MESSAGE_INFO = 3;

    public static class Mnld2DebugInterfaceSender {
        public boolean mnldAckDebugReq(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(MNLD_ACK_DEBUG_REQ);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean mnldUpdateReboot(UdpClient client) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(MNLD_UPDATE_REBOOT);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean mnldUpdateGpsStatus(UdpClient client, MnldGpsStatusCategory status) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(MNLD_UPDATE_GPS_STATUS);
                buff.putCodable(status);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

        public boolean mnldUpdateMessageInfo(UdpClient client, String msg) {
            synchronized(client) {
                if(!client.connect()) {
                    return false;
                }
                BaseBuffer buff = client.getBuff();
                buff.putInt(PROTOCOL_TYPE);
                buff.putInt(MNLD_UPDATE_MESSAGE_INFO);
                SocketUtils.assertSize(msg, 256, 0);
                buff.putString(msg);
                boolean _ret = client.write();
                client.close();
                return _ret;
            }
        }

    }

    public static abstract class Mnld2DebugInterfaceReceiver implements ProtocolHandler {

        public abstract void mnldAckDebugReq();

        public abstract void mnldUpdateReboot();

        public abstract void mnldUpdateGpsStatus(MnldGpsStatusCategory status);

        public abstract void mnldUpdateMessageInfo(String msg);


        public boolean readAndDecode(UdpServerInterface server) {
            if (!server.read()) {
                return false;
            }
            return decode(server);
        }

        @Override
        public int getProtocolType() {
            return PROTOCOL_TYPE;
        }

        @Override
        public boolean decode(UdpServerInterface server) {
            boolean _ret = true;
            BaseBuffer buff = server.getBuff();
            buff.setOffset(4); // skip protocol type
            int _type = buff.getInt();
            switch (_type) {
            case MNLD_ACK_DEBUG_REQ: {
                mnldAckDebugReq();
                break;
            }
            case MNLD_UPDATE_REBOOT: {
                mnldUpdateReboot();
                break;
            }
            case MNLD_UPDATE_GPS_STATUS: {
                MnldGpsStatusCategory status = (MnldGpsStatusCategory) buff.getCodable(MnldGpsStatusCategory._instance);
                mnldUpdateGpsStatus(status);
                break;
            }
            case MNLD_UPDATE_MESSAGE_INFO: {
                String msg = (String) buff.getString();
                mnldUpdateMessageInfo(msg);
                break;
            }
            default: {
                _ret = false;
                break;
            }
            }
            return _ret;
        }
    }

}
