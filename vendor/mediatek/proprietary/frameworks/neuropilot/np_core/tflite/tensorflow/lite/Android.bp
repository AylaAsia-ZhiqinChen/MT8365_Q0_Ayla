// Copyright (C) 2017 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

cc_defaults {
    name: "tflite_mtk_defaults",
    proprietary: true,
    owner: "mtk",
    header_libs: [
        "tensorflow_mtk_headers",
    ],
    cflags: [
        "-DTF_LITE_DISABLE_X86_NEON",
        "-DTFLITE_WITH_RUY",
        "-Wall",
        "-Werror",
        "-Wextra",
        "-Wno-unused-parameter",
        "-fvisibility=protected",
    ],
    ldflags: [
        "-Wl,--hash-style=both",
    ],
    shared_libs: [
        "liblog",
        "liblogprotection",
    ],
}

cc_library_static {
    name: "libtflite_mtk_context",
    defaults: ["tflite_mtk_defaults"],
    srcs: ["c/c_api_internal.c"],
    cflags: [
        "-Wno-typedef-redefinition",
        "-Wno-visibility",
    ],
}

cc_library_static {
    name: "libtflite_mtk_framework",
    defaults: ["tflite_mtk_defaults"],
    rtti: true,
    srcs: [
        "allocation.cc",
        "arena_planner.cc",
        "core/api/error_reporter.cc",
        "core/api/flatbuffer_conversions.cc",
        "core/api/op_resolver.cc",
        "core/subgraph.cc",
        "delegates/nnapi/nnapi_delegate.cc",
        "delegates/nnapi/quant_lstm_sup.cc",
        "experimental/resource_variable/resource_variable.cc",
        "external_cpu_backend_context.cc",
        "graph_info.cc",
        "interpreter.cc",
        "minimal_logging.cc",
        "minimal_logging_android.cc",
        "mmap_allocation.cc",
        "model.cc",
        "mutable_op_resolver.cc",
        "optional_debug_tools.cc",
        "simple_memory_arena.cc",
        "stderr_reporter.cc",
        "string_util.cc",
        "util.cc",
        "kernels/eigen_support.cc",
        "kernels/cpu_backend_context.cc",
        "kernels/cpu_backend_gemm_eigen.cc",
    ],
    header_libs: [
        "libeigen",
        "flatbuffer_headers",
        "gemmlowp_mtk_headers",
    ],
    cflags: [
        "-Wno-deprecated-declarations",
        "-Wno-extern-c-compat",
        "-Wno-mismatched-tags",
        "-Wno-sign-compare",
        "-Wno-unused-lambda-capture",
        "-Wno-invalid-partial-specialization",
    ],
}

cc_library_shared {
    name: "libtflite_mtk",
    defaults: ["tflite_mtk_defaults"],
    shared_libs: [
        "libcutils",
        "libnativewindow",
        "libtextclassifier_hash",
    ],
    whole_static_libs: [
        "libtflite_mtk_context",
        "libtflite_mtk_framework",
        "libtflite_mtk_kernels",
        "libtflite_mtk_nnapi",
        "libtflite_mtk_ruy",
        "libtflite_mtk_np_ext",
        "libtflite_mtk_np_ext_utils",
        "libtflite_mtk_np_c_api",
        "libtflite_mtk_easy_logging",
    ],
    stl: "libc++_static",
}

build = [
    "tflite_static.bp",
    "tflite_test.bp",
    "tflite_np_jni.bp"
]

subdirs = [
    "kernels",
    "tools",
]
