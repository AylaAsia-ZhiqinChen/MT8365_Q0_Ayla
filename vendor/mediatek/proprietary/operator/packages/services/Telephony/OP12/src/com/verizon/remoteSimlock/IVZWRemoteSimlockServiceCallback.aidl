package com.verizon.remoteSimlock;

interface IVZWRemoteSimlockServiceCallback {

    /**
    * Remote Lock/Unlock operation response
    *
    * @param token
    * Identifier for the client to match the request.
    *
    * @param responseCode
    * SIMLOCK_RESP_SUCCESS = 0;
    * SIMLOCK_RESP_FAIL = 1;
    *
    * @param simlockResponse
    * Status Response message of the remote lock/unlock operation generated by Network Lock Module
    *
    * @return None
    */
    void remoteSimlockProcessSimlockDataResponse(in int token, in int responseCode,
            in byte[] simlockResponse);

    /**
    * Highest major and minor version of incoming blob (Response message) that is supported by
    * Network Lock Module
    *
    * @param token
    * Identifier for the client to match the request.
    *
    * @param responseCode
    * SIMLOCK_RESP_SUCCESS = 0;
    * SIMLOCK_RESP_FAIL = 1;
    *
    * @param majorVersion
    * Highest major version of the incoming blob Message that is supposed by Network Lock Module
    *
    * @param minorVersion
    * Highest minor version of the incoming blob Message that is supposed by Network Lock Module
    *
    * @return None
    */
    void remoteSimlockGetVersionResponse(in int token, in int responseCode, in int majorVersion,
            in int minorVersion);

    /**
    * Device's SIMLock Status Response
    *
    * @param token
    * Identifier for the client to match the request.
    *
    * @param responseCode
    * SIMLOCK_RESP_SUCCESS = 0;
    * SIMLOCK_RESP_FAIL = 1;
    * SIMLOCK_RESP_GET_TIME_FAILED = 2;
    * (GGET_TIME_FAILED is not used in the current version)
    *
    * @param unlockStatus
    * SIMLOCK_STATE_LOCKED = 0;
    * SIMLOCK_STATE_TEMPORARY_UNLOCK = 1;
    * SIMLOCK_STATE_PERMANENT_UNLOCK = 2;
    *
    * @param unlockTime
    * Temporary unlock time remaining, valid when state is SIMLOCK_STATE_TEMPORARY_UNLOCK
    * (Note: Temporary Unlock not support in current release)
    *
    * @return None
    */
    void remoteSimlockGetSimlockStatusResponse(in int token, in int responseCode,
            in int unlockStatus, in long unlockTime);

    /**
    * Response for generate SimLock Request
    *
    * @param token
    * Identifier for the client to match the request.
    *
    * @param responseCode
    * SIMLOCK_RESP_SUCCESS = 0;
    * SIMLOCK_RESP_FAIL = 1;
    *
    * @param requestData
    * Contains SimLock Request message generated by Network Lock Module
    *
    * @return None
    */
    void remoteSimlockGenerateRequestResponse(in int token, in int responseCode,
            in byte[] requestData);

    /**
    * Response for Unlock Timer operation
    *
    * @param token
    * Identifier for the client to match the request.
    *
    * @param responseCode
    * SIMLOCK_RESP_SUCCESS = 0;
    * SIMLOCK_RESP_FAIL = 1;
    * SIMLOCK_RESP_TIMER_EXPIRED = 3;
    * (SIMLOCK_RESP_TIMER_EXPIRED if timer already started once and expired. Timer will not work
    * until next UICC Restart)
    *
    * @param timerValue
    * Unlock timer value (in seconds) started by Network Lock Module
    *
    * @return None
    */
    void remoteSimlockUnlockTimerResponse(in int token, in int responseCode,in int timerValue);
}
