#ifndef __TPIPE_CONFIG_H__
#define __TPIPE_CONFIG_H__

#include "isp_drv_dip_platform.h"


/* following define can be changed with rebuilding tpipe_driver.c */
#define LOG_REMARK_MUST_FILL_STR "<must>" /* can be changed */
#define LOG_REMARK_NOT_FOUND_STR "<no config>?" /* can be changed */
#define LOG_REMARK_HW_NOT_FOUND_STR "<no hw>?" /* can be changed */
#define LOG_REMARK_HW_REG_STR "<hw>" /* can be changed */
#define LOG_REMARK_DEBUG_STR "<debug>" /* can be changed */
#define LOG_REMARK_HW_DIFF_STR "<hw diff> " /* can be changed */
#define LOG_REMARK_HW_LOG_STR "<hw log>" /* can be changed */
#define TPIPE_DEBUG_DUMP_HEADER "[ISP][tpipe_dump]"
#define TPIPE_DEBUG_DUMP_START "start MT6593"
#define TPIPE_DEBUG_DUMP_END "end MT6593"
#define TPIPE_LOG_PARSE_FILE_NAME "tpipe_log_parse_"
#define TPIPE_LOG_PARSE_FILE_EXT ".txt"
#define TPIPE_REG_DUMP_HEADER "0x"
#define TPIPE_DIP_BASE_HW     (0x15022000)
#define TPIPE_DIP_ADDR_START  (0x15022000)
#define TPIPE_DIP_ADDR_END    (0x15027548)
#define TPIPE_DIP_DUMP_SKIP_NO ((unsigned int)(TPIPE_DIP_ADDR_START - TPIPE_DIP_BASE_HW)>>2)
#define TPIPE_WPE_BASE_HW     (0x1502A000)
#define TPIPE_WPE_ADDR_START  (0x1502A000)
#define TPIPE_WPE_ADDR_END    (0x1502A510)
#define TPIPE_WPE_DUMP_SKIP_NO ((unsigned int)(TPIPE_WPE_ADDR_START - TPIPE_WPE_BASE_HW)>>2)
#define TPIPE_EAF_BASE_HW     (0x1502D000)
#define TPIPE_EAF_ADDR_START  (0x1502D000)
#define TPIPE_EAF_ADDR_END    (0x1502D3A0)
#define TPIPE_EAF_DUMP_SKIP_NO ((unsigned int)(TPIPE_EAF_ADDR_START - TPIPE_EAF_BASE_HW)>>2)
#define TPIPE_BLD_BASE_HW     (0x1502E000)
#define TPIPE_BLD_ADDR_START  (0x1502E000)
#define TPIPE_BLD_ADDR_END    (0x1502E3D4)
#define TPIPE_BLD_DUMP_SKIP_NO ((unsigned int)(TPIPE_BLD_ADDR_START - TPIPE_BLD_BASE_HW)>>2)

#define MAX_READ_REG_NUM 4
#define MAX_TILE_TOT_NO (256)
#define MAX_ISP_DUMP_HEX_PER_TILE (256)
#define MAX_ISP_TILE_TDR_HEX_NO (MAX_TILE_TOT_NO*MAX_ISP_DUMP_HEX_PER_TILE)

#define MAX_ISP_DUMP_HEX_PER_TILE_WPE (32)
#define MAX_ISP_TILE_TDR_HEX_NO_WPE (MAX_TILE_TOT_NO*MAX_ISP_DUMP_HEX_PER_TILE_WPE)

#define ISP_ERROR_MESSAGE_DATA(n, CMD) \
    CMD(n, ISP_TPIPE_MESSAGE_OK)\
    CMD(n, ISP_TPIPE_MESSAGE_FAIL)\
    /* final count, can not be changed */\
    CMD(n, ISP_TPIPE_MESSAGE_MAX_NO)\

#define ISP_TPIPE_ENUM_DECLARE(a, b) b,
#define ISP_TPIPE_ENUM_STRING(n, a) if ((a) == (n)) return #a;

#define GET_ISP_ERROR_NAME(n) \
    if (0 == (n)) return "ISP_TPIPE_MESSAGE_UNKNOWN";\
    ISP_ERROR_MESSAGE_DATA(n, ISP_TPIPE_ENUM_STRING)\
    return "";

//need equal to ISP_DRV_P2_CQ_ENUM
typedef enum
{
    ISP_TPIPE_P2_CQ1 = 0,
    ISP_TPIPE_P2_CQ2,
    ISP_TPIPE_P2_CQ3,
    ISP_TPIPE_P2_CQ_NUM
}ISP_TPIPE_P2_CQ_ENUM;

/* error enum */
typedef enum ISP_TPIPE_MESSAGE_ENUM
{
    ISP_TPIPE_MESSAGE_UNKNOWN=0,
    ISP_ERROR_MESSAGE_DATA(,ISP_TPIPE_ENUM_DECLARE)
}ISP_TPIPE_MESSAGE_ENUM;

/* tpipe_irq_mode */
typedef enum TPIPE_IRQ_MODE_ENUM
{
    TPIPE_IRQ_FRAME_STOP=0,
    TPIPE_IRQ_LINE_END,
    TPIPE_IRQ_PER_TPIPE,
    TPIPE_IRQ_MODE_MAX_NO
}TPIPE_IRQ_MODE_ENUM;

/* f: reg_map_struct name*/
/* g: must and enable/disble*/
/* h: variable offset in isp_reg*/
/* i: variable mask in isp_reg*/
/* j: variable lsb in isp_reg*/
/* k: variable name in isp_reg*/
/* l: variable name in isp_reg*/
#define HW_DIP_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump DIP registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.pixel_id, true, 0x00000014, 0x15022014, 0x30000000, 28, DIP_A_CTL_FMT_SEL, PIX_ID, 0x00000014, 0x15022014, 0x30000000, 28, DIP_A_CTL_FMT_SEL, PIX_ID)\
	CMD(a, b, c, d, e, top.cam_in_fmt, true, 0x00000014, 0x15022014, 0x0000001F, 0, DIP_A_CTL_FMT_SEL, IMGI_FMT, 0x00000014, 0x15022014, 0x0000001F, 0, DIP_A_CTL_FMT_SEL, IMGI_FMT)\
	CMD(a, b, c, d, e, top.ctl_extension_en, true, 0x00000050, 0x15022050, 0x00000002, 1, DIP_A_CTL_TDR_CTL, CTL_EXTENSION_EN, 0x00000050, 0x15022050, 0x00000002, 1, DIP_A_CTL_TDR_CTL, CTL_EXTENSION_EN)\
	CMD(a, b, c, d, e, top.fg_mode, true, 0x00000014, 0x15022014, 0x00080000, 19, DIP_A_CTL_FMT_SEL, FG_MODE, 0x00000014, 0x15022014, 0x00080000, 19, DIP_A_CTL_FMT_SEL, FG_MODE)\
	CMD(a, b, c, d, e, top.ufo_imgi_en, true, 0x0000031C, 0x1502231C, 0x20000000, 29, DIP_A_SPECIAL_FUN_EN, UFO_IMGI_EN, 0x0000031C, 0x1502231C, 0x20000000, 29, DIP_A_SPECIAL_FUN_EN, UFO_IMGI_EN)\
	CMD(a, b, c, d, e, top.ufdi_fmt, true, 0x00000014, 0x15022014, 0x00010000, 16, DIP_A_CTL_FMT_SEL, UFDI_FMT, 0x00000014, 0x15022014, 0x00010000, 16, DIP_A_CTL_FMT_SEL, UFDI_FMT)\
	CMD(a, b, c, d, e, top.vipi_fmt, true, 0x00000014, 0x15022014, 0x00001F00, 8, DIP_A_CTL_FMT_SEL, VIPI_FMT, 0x00000014, 0x15022014, 0x00001F00, 8, DIP_A_CTL_FMT_SEL, VIPI_FMT)\
	CMD(a, b, c, d, e, top.img3o_fmt, true, 0x00000014, 0x15022014, 0x00700000, 20, DIP_A_CTL_FMT_SEL, IMG3O_FMT, 0x00000014, 0x15022014, 0x00700000, 20, DIP_A_CTL_FMT_SEL, IMG3O_FMT)\
	CMD(a, b, c, d, e, top.img2o_fmt, true, 0x00000014, 0x15022014, 0x01000000, 24, DIP_A_CTL_FMT_SEL, IMG2O_FMT, 0x00000014, 0x15022014, 0x01000000, 24, DIP_A_CTL_FMT_SEL, IMG2O_FMT)\
	CMD(a, b, c, d, e, top.pak2_fmt, true, 0x0000001C, 0x1502201C, 0x0000F000, 12, DIP_A_CTL_MISC_SEL, PAK2_FMT, 0x0000001C, 0x1502201C, 0x0000F000, 12, DIP_A_CTL_MISC_SEL, PAK2_FMT)\
	CMD(a, b, c, d, e, top.adl_en, true, 0x00000010, 0x15022010, 0x00020000, 17, DIP_A_CTL_DMA_EN, ADL2_EN, 0x00000010, 0x15022010, 0x00020000, 17, DIP_A_CTL_DMA_EN, ADL2_EN)\
	CMD(a, b, c, d, e, top.imgi_en, true, 0x00000010, 0x15022010, 0x00000001, 0, DIP_A_CTL_DMA_EN, IMGI_EN, 0x00000010, 0x15022010, 0x00000001, 0, DIP_A_CTL_DMA_EN, IMGI_EN)\
	CMD(a, b, c, d, e, top.imgbi_en, true, 0x00000010, 0x15022010, 0x00000002, 1, DIP_A_CTL_DMA_EN, IMGBI_EN, 0x00000010, 0x15022010, 0x00000002, 1, DIP_A_CTL_DMA_EN, IMGBI_EN)\
	CMD(a, b, c, d, e, top.imgci_en, true, 0x00000010, 0x15022010, 0x00000004, 2, DIP_A_CTL_DMA_EN, IMGCI_EN, 0x00000010, 0x15022010, 0x00000004, 2, DIP_A_CTL_DMA_EN, IMGCI_EN)\
	CMD(a, b, c, d, e, top.ufdi_en, true, 0x00000010, 0x15022010, 0x00000008, 3, DIP_A_CTL_DMA_EN, UFDI_EN, 0x00000010, 0x15022010, 0x00000008, 3, DIP_A_CTL_DMA_EN, UFDI_EN)\
	CMD(a, b, c, d, e, top.unp_en, true, 0x0000000C, 0x1502200C, 0x00000001, 0, DIP_A_CTL_RGB_EN, UNP_EN, 0x0000000C, 0x1502200C, 0x00000001, 0, DIP_A_CTL_RGB_EN, UNP_EN)\
	CMD(a, b, c, d, e, top.ufd_en, true, 0x0000000C, 0x1502200C, 0x00000002, 1, DIP_A_CTL_RGB_EN, UFD_EN, 0x0000000C, 0x1502200C, 0x00000002, 1, DIP_A_CTL_RGB_EN, UFD_EN)\
	CMD(a, b, c, d, e, top.dcpn2_en, true, 0x000000E8, 0x150220E8, 0x00000004, 2, DIP_A_CTL_RGB2_EN, DCPN2_EN, 0x000000E8, 0x150220E8, 0x00000004, 2, DIP_A_CTL_RGB2_EN, DCPN2_EN)\
	CMD(a, b, c, d, e, top.lsc2_en, true, 0x0000000C, 0x1502200C, 0x00008000, 15, DIP_A_CTL_RGB_EN, LSC2_EN, 0x0000000C, 0x1502200C, 0x00008000, 15, DIP_A_CTL_RGB_EN, LSC2_EN)\
	CMD(a, b, c, d, e, top.cpn2_en, true, 0x000000E8, 0x150220E8, 0x00000008, 3, DIP_A_CTL_RGB2_EN, CPN2_EN, 0x000000E8, 0x150220E8, 0x00000008, 3, DIP_A_CTL_RGB2_EN, CPN2_EN)\
	CMD(a, b, c, d, e, top.sl2_en, true, 0x0000000C, 0x1502200C, 0x00000008, 3, DIP_A_CTL_RGB_EN, SL2_EN, 0x0000000C, 0x1502200C, 0x00000008, 3, DIP_A_CTL_RGB_EN, SL2_EN)\
	CMD(a, b, c, d, e, top.rnr_en, true, 0x0000000C, 0x1502200C, 0x00040000, 18, DIP_A_CTL_RGB_EN, RNR_EN, 0x0000000C, 0x1502200C, 0x00040000, 18, DIP_A_CTL_RGB_EN, RNR_EN)\
	CMD(a, b, c, d, e, top.udm_en, true, 0x0000000C, 0x1502200C, 0x00000010, 4, DIP_A_CTL_RGB_EN, UDM_EN, 0x0000000C, 0x1502200C, 0x00000010, 4, DIP_A_CTL_RGB_EN, UDM_EN)\
	CMD(a, b, c, d, e, top.c24_en, true, 0x00000004, 0x15022004, 0x00000004, 2, DIP_A_CTL_YUV_EN, C24_EN, 0x00000004, 0x15022004, 0x00000004, 2, DIP_A_CTL_YUV_EN, C24_EN)\
	CMD(a, b, c, d, e, top.vipi_en, true, 0x00000010, 0x15022010, 0x00000010, 4, DIP_A_CTL_DMA_EN, VIPI_EN, 0x00000010, 0x15022010, 0x00000010, 4, DIP_A_CTL_DMA_EN, VIPI_EN)\
	CMD(a, b, c, d, e, top.vip2i_en, true, 0x00000010, 0x15022010, 0x00000020, 5, DIP_A_CTL_DMA_EN, VIP2I_EN, 0x00000010, 0x15022010, 0x00000020, 5, DIP_A_CTL_DMA_EN, VIP2I_EN)\
	CMD(a, b, c, d, e, top.vip3i_en, true, 0x00000010, 0x15022010, 0x00000040, 6, DIP_A_CTL_DMA_EN, VIP3I_EN, 0x00000010, 0x15022010, 0x00000040, 6, DIP_A_CTL_DMA_EN, VIP3I_EN)\
	CMD(a, b, c, d, e, top.pak2o_en, true, 0x00000010, 0x15022010, 0x00000400, 10, DIP_A_CTL_DMA_EN, PAK2O_EN, 0x00000010, 0x15022010, 0x00000400, 10, DIP_A_CTL_DMA_EN, PAK2O_EN)\
	CMD(a, b, c, d, e, top.g2c_en, true, 0x00000004, 0x15022004, 0x00000008, 3, DIP_A_CTL_YUV_EN, G2C_EN, 0x00000004, 0x15022004, 0x00000008, 3, DIP_A_CTL_YUV_EN, G2C_EN)\
	CMD(a, b, c, d, e, top.c42_en, true, 0x00000004, 0x15022004, 0x00000010, 4, DIP_A_CTL_YUV_EN, C42_EN, 0x00000004, 0x15022004, 0x00000010, 4, DIP_A_CTL_YUV_EN, C42_EN)\
	CMD(a, b, c, d, e, top.sl2b_en, true, 0x00000004, 0x15022004, 0x00000800, 11, DIP_A_CTL_YUV_EN, SL2B_EN, 0x00000004, 0x15022004, 0x00000800, 11, DIP_A_CTL_YUV_EN, SL2B_EN)\
	CMD(a, b, c, d, e, top.nbc_en, true, 0x00000004, 0x15022004, 0x00000020, 5, DIP_A_CTL_YUV_EN, NBC_EN, 0x00000004, 0x15022004, 0x00000020, 5, DIP_A_CTL_YUV_EN, NBC_EN)\
	CMD(a, b, c, d, e, top.nbc2_en, true, 0x00000004, 0x15022004, 0x00000040, 6, DIP_A_CTL_YUV_EN, NBC2_EN, 0x00000004, 0x15022004, 0x00000040, 6, DIP_A_CTL_YUV_EN, NBC2_EN)\
	CMD(a, b, c, d, e, top.mix1_en, true, 0x00000004, 0x15022004, 0x00040000, 18, DIP_A_CTL_YUV_EN, MIX1_EN, 0x00000004, 0x15022004, 0x00040000, 18, DIP_A_CTL_YUV_EN, MIX1_EN)\
	CMD(a, b, c, d, e, top.mix2_en, true, 0x00000004, 0x15022004, 0x00080000, 19, DIP_A_CTL_YUV_EN, MIX2_EN, 0x00000004, 0x15022004, 0x00080000, 19, DIP_A_CTL_YUV_EN, MIX2_EN)\
	CMD(a, b, c, d, e, top.pca_en, true, 0x00000004, 0x15022004, 0x00000080, 7, DIP_A_CTL_YUV_EN, PCA_EN, 0x00000004, 0x15022004, 0x00000080, 7, DIP_A_CTL_YUV_EN, PCA_EN)\
	CMD(a, b, c, d, e, top.sl2c_en, true, 0x00000004, 0x15022004, 0x00001000, 12, DIP_A_CTL_YUV_EN, SL2C_EN, 0x00000004, 0x15022004, 0x00001000, 12, DIP_A_CTL_YUV_EN, SL2C_EN)\
	CMD(a, b, c, d, e, top.sl2d_en, true, 0x00000004, 0x15022004, 0x00002000, 13, DIP_A_CTL_YUV_EN, SL2D_EN, 0x00000004, 0x15022004, 0x00002000, 13, DIP_A_CTL_YUV_EN, SL2D_EN)\
	CMD(a, b, c, d, e, top.sl2e_en, true, 0x00000004, 0x15022004, 0x00004000, 14, DIP_A_CTL_YUV_EN, SL2E_EN, 0x00000004, 0x15022004, 0x00004000, 14, DIP_A_CTL_YUV_EN, SL2E_EN)\
	CMD(a, b, c, d, e, top.sl2g_en, true, 0x0000000C, 0x1502200C, 0x00080000, 19, DIP_A_CTL_RGB_EN, SL2G_EN, 0x0000000C, 0x1502200C, 0x00080000, 19, DIP_A_CTL_RGB_EN, SL2G_EN)\
	CMD(a, b, c, d, e, top.sl2h_en, true, 0x0000000C, 0x1502200C, 0x00100000, 20, DIP_A_CTL_RGB_EN, SL2H_EN, 0x0000000C, 0x1502200C, 0x00100000, 20, DIP_A_CTL_RGB_EN, SL2H_EN)\
	CMD(a, b, c, d, e, top.sl2i_en, true, 0x00000008, 0x15022008, 0x00000020, 5, DIP_A_CTL_YUV2_EN, SL2I_EN, 0x00000008, 0x15022008, 0x00000020, 5, DIP_A_CTL_YUV2_EN, SL2I_EN)\
	CMD(a, b, c, d, e, top.hfg_en, true, 0x00000008, 0x15022008, 0x00000010, 4, DIP_A_CTL_YUV2_EN, HFG_EN, 0x00000008, 0x15022008, 0x00000010, 4, DIP_A_CTL_YUV2_EN, HFG_EN)\
	CMD(a, b, c, d, e, top.seee_en, true, 0x00000004, 0x15022004, 0x00000100, 8, DIP_A_CTL_YUV_EN, SEEE_EN, 0x00000004, 0x15022004, 0x00000100, 8, DIP_A_CTL_YUV_EN, SEEE_EN)\
	CMD(a, b, c, d, e, top.lcei_en, true, 0x00000010, 0x15022010, 0x00000080, 7, DIP_A_CTL_DMA_EN, LCEI_EN, 0x00000010, 0x15022010, 0x00000080, 7, DIP_A_CTL_DMA_EN, LCEI_EN)\
	CMD(a, b, c, d, e, top.lce_en, true, 0x0000000C, 0x1502200C, 0x00000020, 5, DIP_A_CTL_RGB_EN, LCE_EN, 0x0000000C, 0x1502200C, 0x00000020, 5, DIP_A_CTL_RGB_EN, LCE_EN)\
	CMD(a, b, c, d, e, top.mix3_en, true, 0x00000004, 0x15022004, 0x00100000, 20, DIP_A_CTL_YUV_EN, MIX3_EN, 0x00000004, 0x15022004, 0x00100000, 20, DIP_A_CTL_YUV_EN, MIX3_EN)\
	CMD(a, b, c, d, e, top.mix4_en, true, 0x00000008, 0x15022008, 0x00000400, 10, DIP_A_CTL_YUV2_EN, MIX4_EN, 0x00000008, 0x15022008, 0x00000400, 10, DIP_A_CTL_YUV2_EN, MIX4_EN)\
	CMD(a, b, c, d, e, top.crz_en, true, 0x00000004, 0x15022004, 0x00020000, 17, DIP_A_CTL_YUV_EN, CRZ_EN, 0x00000004, 0x15022004, 0x00020000, 17, DIP_A_CTL_YUV_EN, CRZ_EN)\
	CMD(a, b, c, d, e, top.img2o_en, true, 0x00000010, 0x15022010, 0x00000800, 11, DIP_A_CTL_DMA_EN, IMG2O_EN, 0x00000010, 0x15022010, 0x00000800, 11, DIP_A_CTL_DMA_EN, IMG2O_EN)\
	CMD(a, b, c, d, e, top.img2bo_en, true, 0x00000010, 0x15022010, 0x00001000, 12, DIP_A_CTL_DMA_EN, IMG2BO_EN, 0x00000010, 0x15022010, 0x00001000, 12, DIP_A_CTL_DMA_EN, IMG2BO_EN)\
	CMD(a, b, c, d, e, top.srz1_en, true, 0x00000004, 0x15022004, 0x00008000, 15, DIP_A_CTL_YUV_EN, SRZ1_EN, 0x00000004, 0x15022004, 0x00008000, 15, DIP_A_CTL_YUV_EN, SRZ1_EN)\
	CMD(a, b, c, d, e, top.fe_en, true, 0x00000004, 0x15022004, 0x02000000, 25, DIP_A_CTL_YUV_EN, FE_EN, 0x00000004, 0x15022004, 0x02000000, 25, DIP_A_CTL_YUV_EN, FE_EN)\
	CMD(a, b, c, d, e, top.feo_en, true, 0x00000010, 0x15022010, 0x00010000, 16, DIP_A_CTL_DMA_EN, FEO_EN, 0x00000010, 0x15022010, 0x00010000, 16, DIP_A_CTL_DMA_EN, FEO_EN)\
	CMD(a, b, c, d, e, top.c02_en, true, 0x00000004, 0x15022004, 0x01000000, 24, DIP_A_CTL_YUV_EN, C02_EN, 0x00000004, 0x15022004, 0x01000000, 24, DIP_A_CTL_YUV_EN, C02_EN)\
	CMD(a, b, c, d, e, top.c02b_en, true, 0x00000004, 0x15022004, 0x00000002, 1, DIP_A_CTL_YUV_EN, C02B_EN, 0x00000004, 0x15022004, 0x00000002, 1, DIP_A_CTL_YUV_EN, C02B_EN)\
	CMD(a, b, c, d, e, top.nr3d_en, true, 0x00000004, 0x15022004, 0x00000400, 10, DIP_A_CTL_YUV_EN, NR3D_EN, 0x00000004, 0x15022004, 0x00000400, 10, DIP_A_CTL_YUV_EN, NR3D_EN)\
	CMD(a, b, c, d, e, top.color_en, true, 0x00000004, 0x15022004, 0x00000200, 9, DIP_A_CTL_YUV_EN, COLOR_EN, 0x00000004, 0x15022004, 0x00000200, 9, DIP_A_CTL_YUV_EN, COLOR_EN)\
	CMD(a, b, c, d, e, top.crsp_en, true, 0x00000004, 0x15022004, 0x00200000, 21, DIP_A_CTL_YUV_EN, CRSP_EN, 0x00000004, 0x15022004, 0x00200000, 21, DIP_A_CTL_YUV_EN, CRSP_EN)\
	CMD(a, b, c, d, e, top.img3o_en, true, 0x00000010, 0x15022010, 0x00002000, 13, DIP_A_CTL_DMA_EN, IMG3O_EN, 0x00000010, 0x15022010, 0x00002000, 13, DIP_A_CTL_DMA_EN, IMG3O_EN)\
	CMD(a, b, c, d, e, top.img3bo_en, true, 0x00000010, 0x15022010, 0x00004000, 14, DIP_A_CTL_DMA_EN, IMG3BO_EN, 0x00000010, 0x15022010, 0x00004000, 14, DIP_A_CTL_DMA_EN, IMG3BO_EN)\
	CMD(a, b, c, d, e, top.img3co_en, true, 0x00000010, 0x15022010, 0x00008000, 15, DIP_A_CTL_DMA_EN, IMG3CO_EN, 0x00000010, 0x15022010, 0x00008000, 15, DIP_A_CTL_DMA_EN, IMG3CO_EN)\
	CMD(a, b, c, d, e, top.c24b_en, true, 0x00000004, 0x15022004, 0x00400000, 22, DIP_A_CTL_YUV_EN, C24B_EN, 0x00000004, 0x15022004, 0x00400000, 22, DIP_A_CTL_YUV_EN, C24B_EN)\
	CMD(a, b, c, d, e, top.mdp_crop_en, true, 0x00000004, 0x15022004, 0x00800000, 23, DIP_A_CTL_YUV_EN, MDPCROP_EN, 0x00000004, 0x15022004, 0x00800000, 23, DIP_A_CTL_YUV_EN, MDPCROP_EN)\
	CMD(a, b, c, d, e, top.mdp_crop2_en, true, 0x0000000C, 0x1502200C, 0x80000000, 31, DIP_A_CTL_RGB_EN, MDPCROP2_EN, 0x0000000C, 0x1502200C, 0x80000000, 31, DIP_A_CTL_RGB_EN, MDPCROP2_EN)\
	CMD(a, b, c, d, e, top.srz2_en, true, 0x00000004, 0x15022004, 0x00010000, 16, DIP_A_CTL_YUV_EN, SRZ2_EN, 0x00000004, 0x15022004, 0x00010000, 16, DIP_A_CTL_YUV_EN, SRZ2_EN)\
	CMD(a, b, c, d, e, top.pgn_en, true, 0x0000000C, 0x1502200C, 0x00000004, 2, DIP_A_CTL_RGB_EN, PGN_EN, 0x0000000C, 0x1502200C, 0x00000004, 2, DIP_A_CTL_RGB_EN, PGN_EN)\
	CMD(a, b, c, d, e, top.g2g_en, true, 0x0000000C, 0x1502200C, 0x00000040, 6, DIP_A_CTL_RGB_EN, G2G_EN, 0x0000000C, 0x1502200C, 0x00000040, 6, DIP_A_CTL_RGB_EN, G2G_EN)\
	CMD(a, b, c, d, e, top.flc_en, true, 0x0000000C, 0x1502200C, 0x00800000, 23, DIP_A_CTL_RGB_EN, FLC_EN, 0x0000000C, 0x1502200C, 0x00800000, 23, DIP_A_CTL_RGB_EN, FLC_EN)\
	CMD(a, b, c, d, e, top.flc2_en, true, 0x0000000C, 0x1502200C, 0x01000000, 24, DIP_A_CTL_RGB_EN, FLC2_EN, 0x0000000C, 0x1502200C, 0x01000000, 24, DIP_A_CTL_RGB_EN, FLC2_EN)\
	CMD(a, b, c, d, e, top.ggm_en, true, 0x0000000C, 0x1502200C, 0x00000080, 7, DIP_A_CTL_RGB_EN, GGM_EN, 0x0000000C, 0x1502200C, 0x00000080, 7, DIP_A_CTL_RGB_EN, GGM_EN)\
	CMD(a, b, c, d, e, top.dmgi_en, true, 0x00000010, 0x15022010, 0x00000200, 9, DIP_A_CTL_DMA_EN, DMGI_EN, 0x00000010, 0x15022010, 0x00000200, 9, DIP_A_CTL_DMA_EN, DMGI_EN)\
	CMD(a, b, c, d, e, top.depi_en, true, 0x00000010, 0x15022010, 0x00000100, 8, DIP_A_CTL_DMA_EN, DEPI_EN, 0x00000010, 0x15022010, 0x00000100, 8, DIP_A_CTL_DMA_EN, DEPI_EN)\
	CMD(a, b, c, d, e, top.plnr1_en, true, 0x00000004, 0x15022004, 0x20000000, 29, DIP_A_CTL_YUV_EN, PLNR1_EN, 0x00000004, 0x15022004, 0x20000000, 29, DIP_A_CTL_YUV_EN, PLNR1_EN)\
	CMD(a, b, c, d, e, top.plnr2_en, true, 0x00000004, 0x15022004, 0x80000000, 31, DIP_A_CTL_YUV_EN, PLNR2_EN, 0x00000004, 0x15022004, 0x80000000, 31, DIP_A_CTL_YUV_EN, PLNR2_EN)\
	CMD(a, b, c, d, e, top.plnw1_en, true, 0x00000004, 0x15022004, 0x10000000, 28, DIP_A_CTL_YUV_EN, PLNW1_EN, 0x00000004, 0x15022004, 0x10000000, 28, DIP_A_CTL_YUV_EN, PLNW1_EN)\
	CMD(a, b, c, d, e, top.plnw2_en, true, 0x00000004, 0x15022004, 0x40000000, 30, DIP_A_CTL_YUV_EN, PLNW2_EN, 0x00000004, 0x15022004, 0x40000000, 30, DIP_A_CTL_YUV_EN, PLNW2_EN)\
	CMD(a, b, c, d, e, top.dbs2_en, true, 0x0000000C, 0x1502200C, 0x00000400, 10, DIP_A_CTL_RGB_EN, DBS2_EN, 0x0000000C, 0x1502200C, 0x00000400, 10, DIP_A_CTL_RGB_EN, DBS2_EN)\
	CMD(a, b, c, d, e, top.adbs2_en, true, 0x000000E8, 0x150220E8, 0x00000002, 1, DIP_A_CTL_RGB2_EN, ADBS2_EN, 0x000000E8, 0x150220E8, 0x00000002, 1, DIP_A_CTL_RGB2_EN, ADBS2_EN)\
	CMD(a, b, c, d, e, top.bnr2_en, true, 0x0000000C, 0x1502200C, 0x00002000, 13, DIP_A_CTL_RGB_EN, BNR2_EN, 0x0000000C, 0x1502200C, 0x00002000, 13, DIP_A_CTL_RGB_EN, BNR2_EN)\
	CMD(a, b, c, d, e, top.gdr1_en, true, 0x0000000C, 0x1502200C, 0x00000100, 8, DIP_A_CTL_RGB_EN, GDR1_EN, 0x0000000C, 0x1502200C, 0x00000100, 8, DIP_A_CTL_RGB_EN, GDR1_EN)\
	CMD(a, b, c, d, e, top.gdr2_en, true, 0x0000000C, 0x1502200C, 0x00000200, 9, DIP_A_CTL_RGB_EN, GDR2_EN, 0x0000000C, 0x1502200C, 0x00000200, 9, DIP_A_CTL_RGB_EN, GDR2_EN)\
	CMD(a, b, c, d, e, top.obc2_en, true, 0x0000000C, 0x1502200C, 0x00000800, 11, DIP_A_CTL_RGB_EN, OBC2_EN, 0x0000000C, 0x1502200C, 0x00000800, 11, DIP_A_CTL_RGB_EN, OBC2_EN)\
	CMD(a, b, c, d, e, top.rmg2_en, true, 0x0000000C, 0x1502200C, 0x00001000, 12, DIP_A_CTL_RGB_EN, RMG2_EN, 0x0000000C, 0x1502200C, 0x00001000, 12, DIP_A_CTL_RGB_EN, RMG2_EN)\
	CMD(a, b, c, d, e, top.rmm2_en, true, 0x0000000C, 0x1502200C, 0x00004000, 14, DIP_A_CTL_RGB_EN, RMM2_EN, 0x0000000C, 0x1502200C, 0x00004000, 14, DIP_A_CTL_RGB_EN, RMM2_EN)\
	CMD(a, b, c, d, e, top.srz3_en, true, 0x00000008, 0x15022008, 0x00000002, 1, DIP_A_CTL_YUV2_EN, SRZ3_EN, 0x00000008, 0x15022008, 0x00000002, 1, DIP_A_CTL_YUV2_EN, SRZ3_EN)\
	CMD(a, b, c, d, e, top.srz4_en, true, 0x00000008, 0x15022008, 0x00000004, 2, DIP_A_CTL_YUV2_EN, SRZ4_EN, 0x00000008, 0x15022008, 0x00000004, 2, DIP_A_CTL_YUV2_EN, SRZ4_EN)\
	CMD(a, b, c, d, e, top.rcp2_en, true, 0x0000000C, 0x1502200C, 0x00010000, 16, DIP_A_CTL_RGB_EN, RCP2_EN, 0x0000000C, 0x1502200C, 0x00010000, 16, DIP_A_CTL_RGB_EN, RCP2_EN)\
	CMD(a, b, c, d, e, top.pak2_en, true, 0x0000000C, 0x1502200C, 0x00020000, 17, DIP_A_CTL_RGB_EN, PAK2_EN, 0x0000000C, 0x1502200C, 0x00020000, 17, DIP_A_CTL_RGB_EN, PAK2_EN)\
	CMD(a, b, c, d, e, top.ndg_en, true, 0x00000008, 0x15022008, 0x00000040, 6, DIP_A_CTL_YUV2_EN, NDG_EN, 0x00000008, 0x15022008, 0x00000040, 6, DIP_A_CTL_YUV2_EN, NDG_EN)\
	CMD(a, b, c, d, e, top.ndg2_en, true, 0x00000008, 0x15022008, 0x00000080, 7, DIP_A_CTL_YUV2_EN, NDG2_EN, 0x00000008, 0x15022008, 0x00000080, 7, DIP_A_CTL_YUV2_EN, NDG2_EN)\
	CMD(a, b, c, d, e, top.g2g2_en, true, 0x0000000C, 0x1502200C, 0x08000000, 27, DIP_A_CTL_RGB_EN, G2G2_EN, 0x0000000C, 0x1502200C, 0x08000000, 27, DIP_A_CTL_RGB_EN, G2G2_EN)\
	CMD(a, b, c, d, e, top.ggm2_en, true, 0x0000000C, 0x1502200C, 0x10000000, 28, DIP_A_CTL_RGB_EN, GGM2_EN, 0x0000000C, 0x1502200C, 0x10000000, 28, DIP_A_CTL_RGB_EN, GGM2_EN)\
	CMD(a, b, c, d, e, top.wshift_en, true, 0x0000000C, 0x1502200C, 0x20000000, 29, DIP_A_CTL_RGB_EN, WSHIFT_EN, 0x0000000C, 0x1502200C, 0x20000000, 29, DIP_A_CTL_RGB_EN, WSHIFT_EN)\
	CMD(a, b, c, d, e, top.wsync_en, true, 0x0000000C, 0x1502200C, 0x40000000, 30, DIP_A_CTL_RGB_EN, WSYNC_EN, 0x0000000C, 0x1502200C, 0x40000000, 30, DIP_A_CTL_RGB_EN, WSYNC_EN)\
	CMD(a, b, c, d, e, top.smx1_en, true, 0x0000000C, 0x1502200C, 0x02000000, 25, DIP_A_CTL_RGB_EN, SMX1_EN, 0x0000000C, 0x1502200C, 0x02000000, 25, DIP_A_CTL_RGB_EN, SMX1_EN)\
	CMD(a, b, c, d, e, top.smx2_en, true, 0x00000008, 0x15022008, 0x00000100, 8, DIP_A_CTL_YUV2_EN, SMX2_EN, 0x00000008, 0x15022008, 0x00000100, 8, DIP_A_CTL_YUV2_EN, SMX2_EN)\
	CMD(a, b, c, d, e, top.smx3_en, true, 0x00000008, 0x15022008, 0x00000200, 9, DIP_A_CTL_YUV2_EN, SMX3_EN, 0x00000008, 0x15022008, 0x00000200, 9, DIP_A_CTL_YUV2_EN, SMX3_EN)\
	CMD(a, b, c, d, e, top.smx4_en, true, 0x000000E8, 0x150220E8, 0x00000001, 0, DIP_A_CTL_RGB2_EN, SMX4_EN, 0x000000E8, 0x150220E8, 0x00000001, 0, DIP_A_CTL_RGB2_EN, SMX4_EN)\
	CMD(a, b, c, d, e, top.pgn_sel, true, 0x00000018, 0x15022018, 0x00000004, 2, DIP_A_CTL_PATH_SEL, PGN_SEL, 0x00000018, 0x15022018, 0x00000004, 2, DIP_A_CTL_PATH_SEL, PGN_SEL)\
	CMD(a, b, c, d, e, top.rcp2_sel, true, 0x00000018, 0x15022018, 0x00060000, 17, DIP_A_CTL_PATH_SEL, RCP2_SEL, 0x00000018, 0x15022018, 0x00060000, 17, DIP_A_CTL_PATH_SEL, RCP2_SEL)\
	CMD(a, b, c, d, e, top.g2g_sel, true, 0x00000018, 0x15022018, 0x00000003, 0, DIP_A_CTL_PATH_SEL, G2G_SEL, 0x00000018, 0x15022018, 0x00000003, 0, DIP_A_CTL_PATH_SEL, G2G_SEL)\
	CMD(a, b, c, d, e, top.g2c_sel, true, 0x00000018, 0x15022018, 0x00000010, 4, DIP_A_CTL_PATH_SEL, G2C_SEL, 0x00000018, 0x15022018, 0x00000010, 4, DIP_A_CTL_PATH_SEL, G2C_SEL)\
	CMD(a, b, c, d, e, top.srz1_sel, true, 0x00000018, 0x15022018, 0x000000C0, 6, DIP_A_CTL_PATH_SEL, SRZ1_SEL, 0x00000018, 0x15022018, 0x000000C0, 6, DIP_A_CTL_PATH_SEL, SRZ1_SEL)\
	CMD(a, b, c, d, e, top.mix1_sel, true, 0x00000018, 0x15022018, 0x00000100, 8, DIP_A_CTL_PATH_SEL, MIX1_SEL, 0x00000018, 0x15022018, 0x00000100, 8, DIP_A_CTL_PATH_SEL, MIX1_SEL)\
	CMD(a, b, c, d, e, top.crz_sel, true, 0x00000018, 0x15022018, 0x00003000, 12, DIP_A_CTL_PATH_SEL, CRZ_SEL, 0x00000018, 0x15022018, 0x00003000, 12, DIP_A_CTL_PATH_SEL, CRZ_SEL)\
	CMD(a, b, c, d, e, top.nr3d_sel, true, 0x00000018, 0x15022018, 0x00004000, 14, DIP_A_CTL_PATH_SEL, NR3D_SEL, 0x00000018, 0x15022018, 0x00004000, 14, DIP_A_CTL_PATH_SEL, NR3D_SEL)\
	CMD(a, b, c, d, e, top.fe_sel, true, 0x00000018, 0x15022018, 0x00010000, 16, DIP_A_CTL_PATH_SEL, FE_SEL, 0x00000018, 0x15022018, 0x00010000, 16, DIP_A_CTL_PATH_SEL, FE_SEL)\
	CMD(a, b, c, d, e, top.mdp_sel, true, 0x00000018, 0x15022018, 0x00008000, 15, DIP_A_CTL_PATH_SEL, MDP_SEL, 0x00000018, 0x15022018, 0x00008000, 15, DIP_A_CTL_PATH_SEL, MDP_SEL)\
	CMD(a, b, c, d, e, top.nbc_sel, true, 0x00000018, 0x15022018, 0x00000400, 10, DIP_A_CTL_PATH_SEL, NBC_SEL, 0x00000018, 0x15022018, 0x00000400, 10, DIP_A_CTL_PATH_SEL, NBC_SEL)\
	CMD(a, b, c, d, e, top.pak2o_sel, true, 0x0000001C, 0x1502201C, 0x00000300, 8, DIP_A_CTL_MISC_SEL, PAK2O_SEL, 0x0000001C, 0x1502201C, 0x00000300, 8, DIP_A_CTL_MISC_SEL, PAK2O_SEL)\
	CMD(a, b, c, d, e, top.crsp_sel, true, 0x00000018, 0x15022018, 0x00080000, 19, DIP_A_CTL_PATH_SEL, CRSP_SEL, 0x00000018, 0x15022018, 0x00080000, 19, DIP_A_CTL_PATH_SEL, CRSP_SEL)\
	CMD(a, b, c, d, e, top.imgi_sel, true, 0x00000018, 0x15022018, 0x00400000, 22, DIP_A_CTL_PATH_SEL, IMGI_SEL, 0x00000018, 0x15022018, 0x00400000, 22, DIP_A_CTL_PATH_SEL, IMGI_SEL)\
	CMD(a, b, c, d, e, top.ggm_sel, true, 0x00000018, 0x15022018, 0x00200000, 21, DIP_A_CTL_PATH_SEL, GGM_SEL, 0x00000018, 0x15022018, 0x00200000, 21, DIP_A_CTL_PATH_SEL, GGM_SEL)\
	CMD(a, b, c, d, e, top.src_sel, true, 0x00000E04, 0x15022E04, 0x00000007, 0, DIP_A_ADL_CTL, SRC_SEL, 0x00000E04, 0x15022E04, 0x00000007, 0, DIP_A_ADL_CTL, SRC_SEL)\
	CMD(a, b, c, d, e, top.dst_sel, true, 0x00000E04, 0x15022E04, 0x00000070, 4, DIP_A_ADL_CTL, DST_SEL, 0x00000E04, 0x15022E04, 0x00000070, 4, DIP_A_ADL_CTL, DST_SEL)\
	CMD(a, b, c, d, e, top.wpe_sel, true, 0x00000018, 0x15022018, 0x00100000, 20, DIP_A_CTL_PATH_SEL, WPE_SEL, 0x00000018, 0x15022018, 0x00100000, 20, DIP_A_CTL_PATH_SEL, WPE_SEL)\
	CMD(a, b, c, d, e, top.feo_sel, true, 0x00000018, 0x15022018, 0x00800000, 23, DIP_A_CTL_PATH_SEL, FEO_SEL, 0x00000018, 0x15022018, 0x00800000, 23, DIP_A_CTL_PATH_SEL, FEO_SEL)\
	CMD(a, b, c, d, e, top.g2g2_sel, true, 0x00000018, 0x15022018, 0x01000000, 24, DIP_A_CTL_PATH_SEL, G2G2_SEL, 0x00000018, 0x15022018, 0x01000000, 24, DIP_A_CTL_PATH_SEL, G2G2_SEL)\
	CMD(a, b, c, d, e, top.nbc_gmap_ltm_mode, true, 0x0000001C, 0x1502201C, 0x01000000, 24, DIP_A_CTL_MISC_SEL, NBC_GMAP_LTM_MODE, 0x0000001C, 0x1502201C, 0x01000000, 24, DIP_A_CTL_MISC_SEL, NBC_GMAP_LTM_MODE)\
	CMD(a, b, c, d, e, top.wuv_mode, true, 0x0000001C, 0x1502201C, 0x02000000, 25, DIP_A_CTL_MISC_SEL, WUV_MODE, 0x0000001C, 0x1502201C, 0x02000000, 25, DIP_A_CTL_MISC_SEL, WUV_MODE)\
	CMD(a, b, c, d, e, top.interlace_mode, true, 0x0000031C, 0x1502231C, 0x40000000, 30, DIP_A_SPECIAL_FUN_EN, INTERLACE_MODE, 0x0000031C, 0x1502231C, 0x40000000, 30, DIP_A_SPECIAL_FUN_EN, INTERLACE_MODE)\
	CMD(a, b, c, d, e, smx1.smx1o_sel, REG_CHECK_EN(c, SMX1_EN), 0x00001100, 0x15023100, 0x00000080, 7, DIP_A_SMX1_CTL, SMXO_SEL, 0x00001100, 0x15023100, 0x00000080, 7, DIP_A_SMX1_CTL, SMXO_SEL)\
	CMD(a, b, c, d, e, smx2.smx2o_sel, REG_CHECK_EN(c, SMX2_EN), 0x000047C0, 0x150267C0, 0x00000080, 7, DIP_A_SMX2_CTL, SMXO_SEL, 0x000047C0, 0x150267C0, 0x00000080, 7, DIP_A_SMX2_CTL, SMXO_SEL)\
	CMD(a, b, c, d, e, smx3.smx3o_sel, REG_CHECK_EN(c, SMX3_EN), 0x000049C0, 0x150269C0, 0x00000080, 7, DIP_A_SMX3_CTL, SMXO_SEL, 0x000049C0, 0x150269C0, 0x00000080, 7, DIP_A_SMX3_CTL, SMXO_SEL)\
	CMD(a, b, c, d, e, smx4.smx4o_sel, REG_CHECK_EN(c, SMX4_EN), 0x00002BC0, 0x15024BC0, 0x00000080, 7, DIP_A_SMX4_CTL, SMXO_SEL, 0x000049C0, 0x150269C0, 0x00000080, 7, DIP_A_SMX3_CTL, SMXO_SEL)\
	CMD(a, b, c, d, e, adl.adl_ctl_en, REG_CMP_EQ(c, ADL_EN, 1), 0x00000E04, 0x15022E04, 0x00300000, 20, DIP_A_ADL_CTL, ENABLE, 0x00000E04, 0x15022E04, 0x00300000, 20, DIP_A_ADL_CTL, ENABLE)\
	CMD(a, b, c, d, e, adl.ipui_stride, REG_CMP_EQ(c, ADL_EN, 1), 0x00000BA8, 0x15022BA8, 0x0000FFFF, 0, DIP_A_ADL_DMA_A_IPUI_STRIDE, STRIDE, 0x00000BA8, 0x15022BA8, 0x0000FFFF, 0, DIP_A_ADL_DMA_A_IPUI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, adl.ipuo_stride, REG_CMP_EQ(c, ADL_EN, 1), 0x00000B48, 0x15022B48, 0x0000FFFF, 0, DIP_A_ADL_DMA_A_IPUO_STRIDE, STRIDE, 0x00000B48, 0x15022B48, 0x0000FFFF, 0, DIP_A_ADL_DMA_A_IPUO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, imgi.imgi_v_flip_en, REG_CMP_EQ(c, IMGI_EN, 1), 0x00000310, 0x15022310, 0x00010000, 16, DIP_A_VERTICAL_FLIP_EN, IMGI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00010000, 16, DIP_A_VERTICAL_FLIP_EN, IMGI_V_FLIP_EN)\
	CMD(a, b, c, d, e, imgi.imgi_stride, REG_CMP_EQ(c, IMGI_EN, 1), 0x00000518, 0x15022518, 0x0000FFFF, 0, DIP_A_IMGI_STRIDE, STRIDE, 0x00000518, 0x15022518, 0x0000FFFF, 0, DIP_A_IMGI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, imgbi.imgbi_v_flip_en, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00000310, 0x15022310, 0x00020000, 17, DIP_A_VERTICAL_FLIP_EN, IMGBI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00020000, 17, DIP_A_VERTICAL_FLIP_EN, IMGBI_V_FLIP_EN)\
	CMD(a, b, c, d, e, imgbi.imgbi_stride, REG_CMP_EQ(c, LOG_IMGBI_EN, 1), 0x00000548, 0x15022548, 0x0000FFFF, 0, DIP_A_IMGBI_STRIDE, STRIDE, 0x00000548, 0x15022548, 0x0000FFFF, 0, DIP_A_IMGBI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, imgci.imgci_v_flip_en, REG_CMP_EQ(c, IMGCI_EN, 1), 0x00000310, 0x15022310, 0x00040000, 18, DIP_A_VERTICAL_FLIP_EN, IMGCI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00040000, 18, DIP_A_VERTICAL_FLIP_EN, IMGCI_V_FLIP_EN)\
	CMD(a, b, c, d, e, imgci.imgci_stride, REG_CMP_EQ(c, LOG_IMGCI_EN, 1), 0x00000578, 0x15022578, 0x0000FFFF, 0, DIP_A_IMGCI_STRIDE, STRIDE, 0x00000578, 0x15022578, 0x0000FFFF, 0, DIP_A_IMGCI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, ufdi.ufdi_v_flip_en, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x00000310, 0x15022310, 0x02000000, 25, DIP_A_VERTICAL_FLIP_EN, UFDI_V_FLIP_EN, 0x00000310, 0x15022310, 0x02000000, 25, DIP_A_VERTICAL_FLIP_EN, UFDI_V_FLIP_EN)\
	CMD(a, b, c, d, e, ufdi.ufdi_stride, REG_CMP_EQ(c, LOG_UFDI_EN, 1), 0x000006C8, 0x150226C8, 0x0000FFFF, 0, DIP_A_UFDI_STRIDE, STRIDE, 0x000006C8, 0x150226C8, 0x0000FFFF, 0, DIP_A_UFDI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bnr.bpc_en, REG_CMP_EQ(c, LOG_BNR_EN, 1), 0x00001240, 0x15023240, 0x00000001, 0, DIP_A_BNR2_BPC_CON, BPC_EN, 0x00001240, 0x15023240, 0x00000001, 0, DIP_A_BNR2_BPC_CON, BPC_EN)\
	CMD(a, b, c, d, e, bnr.bpc_tbl_en, REG_CMP_EQ(c, LOG_BNR_EN, 1), 0x00001240, 0x15023240, 0x00000010, 4, DIP_A_BNR2_BPC_CON, BPC_LUT_EN, 0x00001240, 0x15023240, 0x00000010, 4, DIP_A_BNR2_BPC_CON, BPC_LUT_EN)\
	CMD(a, b, c, d, e, rmg.rmg_ihdr_en, REG_CMP_EQ(c, LOG_RMG2_EN, 1), 0x00001200, 0x15023200, 0x00000001, 0, DIP_A_RMG2_HDR_CFG, RMG_IHDR_EN, 0x00001200, 0x15023200, 0x00000001, 0, DIP_A_RMG2_HDR_CFG, RMG_IHDR_EN)\
	CMD(a, b, c, d, e, rmg.rmg_zhdr_en, REG_CMP_EQ(c, LOG_RMG2_EN, 1), 0x00001200, 0x15023200, 0x00000010, 4, DIP_A_RMG2_HDR_CFG, RMG_ZHDR_EN, 0x00001200, 0x15023200, 0x00000010, 4, DIP_A_RMG2_HDR_CFG, RMG_ZHDR_EN)\
	CMD(a, b, c, d, e, sl2.sl2_hrz_comp, REG_CMP_EQ(c, LOG_SL2_EN, 1), 0x000015D0, 0x150235D0, 0x00003FFF, 0, DIP_A_SL2_RZ, SL2_HRZ_COMP, 0x000015D0, 0x150235D0, 0x00003FFF, 0, DIP_A_SL2_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2.sl2_vrz_comp, REG_CMP_EQ(c, LOG_SL2_EN, 1), 0x000015D0, 0x150235D0, 0x3FFF0000, 16, DIP_A_SL2_RZ, SL2_VRZ_COMP, 0x000015D0, 0x150235D0, 0x3FFF0000, 16, DIP_A_SL2_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, udm.bayer_bypass, REG_CMP_EQ(c, LOG_UDM_EN, 1), 0x00001540, 0x15023540, 0x40000000, 30, DIP_A_UDM_INTP_CRS, UDM_BYP, 0x00001540, 0x15023540, 0x40000000, 30, DIP_A_UDM_INTP_CRS, UDM_BYP)\
	CMD(a, b, c, d, e, vipi.vipi_v_flip_en, REG_CMP_EQ(c, LOG_VIPI_EN, 1), 0x00000310, 0x15022310, 0x00080000, 19, DIP_A_VERTICAL_FLIP_EN, VIPI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00080000, 19, DIP_A_VERTICAL_FLIP_EN, VIPI_V_FLIP_EN)\
	CMD(a, b, c, d, e, vipi.vipi_stride, REG_CMP_EQ(c, LOG_VIPI_EN, 1), 0x000005A8, 0x150225A8, 0x0000FFFF, 0, DIP_A_VIPI_STRIDE, STRIDE, 0x000005A8, 0x150225A8, 0x0000FFFF, 0, DIP_A_VIPI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, vip2i.vip2i_v_flip_en, REG_CMP_EQ(c, LOG_VIP2I_EN, 1), 0x00000310, 0x15022310, 0x00100000, 20, DIP_A_VERTICAL_FLIP_EN, VIP2I_V_FLIP_EN, 0x00000310, 0x15022310, 0x00100000, 20, DIP_A_VERTICAL_FLIP_EN, VIP2I_V_FLIP_EN)\
	CMD(a, b, c, d, e, vip2i.vip2i_stride, REG_CMP_EQ(c, LOG_VIP2I_EN, 1), 0x000005D8, 0x150225D8, 0x0000FFFF, 0, DIP_A_VIP2I_STRIDE, STRIDE, 0x000005D8, 0x150225D8, 0x0000FFFF, 0, DIP_A_VIP2I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, vip3i.vip3i_v_flip_en, REG_CMP_EQ(c, LOG_VIP3I_EN, 1), 0x00000310, 0x15022310, 0x00200000, 21, DIP_A_VERTICAL_FLIP_EN, VIP3I_V_FLIP_EN, 0x00000310, 0x15022310, 0x00200000, 21, DIP_A_VERTICAL_FLIP_EN, VIP3I_V_FLIP_EN)\
	CMD(a, b, c, d, e, vip3i.vip3i_stride, REG_CMP_EQ(c, LOG_VIP3I_EN, 1), 0x00000608, 0x15022608, 0x0000FFFF, 0, DIP_A_VIP3I_STRIDE, STRIDE, 0x00000608, 0x15022608, 0x0000FFFF, 0, DIP_A_VIP3I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, pak2o.pak2o_stride, REG_CMP_EQ(c, LOG_PAK2O_EN, 1), 0x00000468, 0x15022468, 0x0000FFFF, 0, DIP_A_PAK2O_STRIDE, STRIDE, 0x00000468, 0x15022468, 0x0000FFFF, 0, DIP_A_PAK2O_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, mfb.bld_deblock_en, REG_CMP_EQ(c, LOG_MFB_EN, 1), 0x00003100, 0x15025100, 0x00000020, 5, DIP_A_MFB_CON, BLD_LL_DB_EN, 0x00003100, 0x15025100, 0x00000020, 5, DIP_A_MFB_CON, BLD_LL_DB_EN)\
	CMD(a, b, c, d, e, mfb.bld_brz_en, REG_CMP_EQ(c, LOG_MFB_EN, 1), 0x00003100, 0x15025100, 0x00000010, 4, DIP_A_MFB_CON, BLD_LL_BRZ_EN, 0x00003100, 0x15025100, 0x00000010, 4, DIP_A_MFB_CON, BLD_LL_BRZ_EN)\
	CMD(a, b, c, d, e, mfb.bld_mbd_wt_en, REG_CMP_EQ(c, LOG_MFB_EN, 1), 0x00003100, 0x15025100, 0x00000040, 6, DIP_A_MFB_CON, BLD_MBD_WT_EN, 0x00003100, 0x15025100, 0x00000040, 6, DIP_A_MFB_CON, BLD_MBD_WT_EN)\
	CMD(a, b, c, d, e, g2c.g2c_shade_en, REG_CMP_EQ(c, LOG_G2C_EN, 1), 0x00003258, 0x15025258, 0x20000000, 29, DIP_A_G2C_SHADE_CON_1, G2C_SHADE_EN, 0x00003258, 0x15025258, 0x20000000, 29, DIP_A_G2C_SHADE_CON_1, G2C_SHADE_EN)\
	CMD(a, b, c, d, e, g2c.g2c_shade_xmid, REG_CMP_EQ(c, LOG_G2C_EN, 1), 0x00003264, 0x15025264, 0x00003FFF, 0, DIP_A_G2C_SHADE_TAR, G2C_SHADE_XMID, 0x00003264, 0x15025264, 0x00003FFF, 0, DIP_A_G2C_SHADE_TAR, G2C_SHADE_XMID)\
	CMD(a, b, c, d, e, g2c.g2c_shade_ymid, REG_CMP_EQ(c, LOG_G2C_EN, 1), 0x00003264, 0x15025264, 0x3FFF0000, 16, DIP_A_G2C_SHADE_TAR, G2C_SHADE_YMID, 0x00003264, 0x15025264, 0x3FFF0000, 16, DIP_A_G2C_SHADE_TAR, G2C_SHADE_YMID)\
	CMD(a, b, c, d, e, g2c.g2c_shade_var, REG_CMP_EQ(c, LOG_G2C_EN, 1), 0x00003258, 0x15025258, 0x0003FFFF, 0, DIP_A_G2C_SHADE_CON_1, G2C_SHADE_VAR, 0x00003258, 0x15025258, 0x0003FFFF, 0, DIP_A_G2C_SHADE_CON_1, G2C_SHADE_VAR)\
	CMD(a, b, c, d, e, sl2b.sl2b_hrz_comp, REG_CMP_EQ(c, LOG_SL2B_EN, 1), 0x00003810, 0x15025810, 0x00003FFF, 0, DIP_A_SL2B_RZ, SL2_HRZ_COMP, 0x00003810, 0x15025810, 0x00003FFF, 0, DIP_A_SL2B_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2b.sl2b_vrz_comp, REG_CMP_EQ(c, LOG_SL2B_EN, 1), 0x00003810, 0x15025810, 0x3FFF0000, 16, DIP_A_SL2B_RZ, SL2_VRZ_COMP, 0x00003810, 0x15025810, 0x3FFF0000, 16, DIP_A_SL2B_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, nbc.anr_eny, REG_CMP_EQ(c, LOG_NBC_EN, 1), 0x00003700, 0x15025700, 0x00000002, 1, DIP_A_NBC_ANR_CON1, NBC_ANR_ENY, 0x00003700, 0x15025700, 0x00000002, 1, DIP_A_NBC_ANR_CON1, NBC_ANR_ENY)\
	CMD(a, b, c, d, e, nbc.anr_enc, REG_CMP_EQ(c, LOG_NBC_EN, 1), 0x00003700, 0x15025700, 0x00000001, 0, DIP_A_NBC_ANR_CON1, NBC_ANR_ENC, 0x00003700, 0x15025700, 0x00000001, 0, DIP_A_NBC_ANR_CON1, NBC_ANR_ENC)\
	CMD(a, b, c, d, e, nbc.anr_ltm_link, REG_CMP_EQ(c, LOG_NBC_EN, 1), 0x00003700, 0x15025700, 0x00100000, 20, DIP_A_NBC_ANR_CON1, NBC_ANR_LTM_LINK, 0x00003700, 0x15025700, 0x00100000, 20, DIP_A_NBC_ANR_CON1, NBC_ANR_LTM_LINK)\
	CMD(a, b, c, d, e, nbc2.anr2_eny, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x00004800, 0x15026800, 0x00000002, 1, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_ENY, 0x00004800, 0x15026800, 0x00000002, 1, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_ENY)\
	CMD(a, b, c, d, e, nbc2.anr2_enc, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x00004800, 0x15026800, 0x00000001, 0, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_ENC, 0x00004800, 0x15026800, 0x00000001, 0, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_ENC)\
	CMD(a, b, c, d, e, nbc2.anr2_scale_mode, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x00004800, 0x15026800, 0x00000030, 4, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_SCALE_MODE, 0x00004800, 0x15026800, 0x00000030, 4, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_SCALE_MODE)\
	CMD(a, b, c, d, e, nbc2.anr2_mode, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x00004800, 0x15026800, 0x00001000, 12, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_MODE, 0x00004800, 0x15026800, 0x00001000, 12, DIP_A_NBC2_ANR2_CON1, NBC2_ANR2_MODE)\
	CMD(a, b, c, d, e, nbc2.anr2_bok_mode, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x000048B0, 0x150268B0, 0x00000001, 0, DIP_A_NBC2_BOK_CON, NBC2_BOK_MODE, 0x000048B0, 0x150268B0, 0x00000001, 0, DIP_A_NBC2_BOK_CON, NBC2_BOK_MODE)\
	CMD(a, b, c, d, e, nbc2.anr2_bok_pf_en, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x000048B0, 0x150268B0, 0x00010000, 16, DIP_A_NBC2_BOK_CON, NBC2_BOK_PF_EN, 0x000048B0, 0x150268B0, 0x00010000, 16, DIP_A_NBC2_BOK_CON, NBC2_BOK_PF_EN)\
	CMD(a, b, c, d, e, nbc2.abf_en, REG_CMP_EQ(c, LOG_NBC2_EN, 1), 0x000048C0, 0x150268C0, 0x00000001, 0, DIP_A_NBC2_ABF_CON1, NBC2_ABF_EN, 0x000048C0, 0x150268C0, 0x00000001, 0, DIP_A_NBC2_ABF_CON1, NBC2_ABF_EN)\
	CMD(a, b, c, d, e, sl2c.sl2c_hrz_comp, REG_CMP_EQ(c, LOG_SL2C_EN, 1), 0x00004910, 0x15026910, 0x00003FFF, 0, DIP_A_SL2C_RZ, SL2_HRZ_COMP, 0x00004910, 0x15026910, 0x00003FFF, 0, DIP_A_SL2C_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2c.sl2c_vrz_comp, REG_CMP_EQ(c, LOG_SL2C_EN, 1), 0x00004910, 0x15026910, 0x3FFF0000, 16, DIP_A_SL2C_RZ, SL2_VRZ_COMP, 0x00004910, 0x15026910, 0x3FFF0000, 16, DIP_A_SL2C_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, sl2d.sl2d_hrz_comp, REG_CMP_EQ(c, LOG_SL2D_EN, 1), 0x00004790, 0x15026790, 0x00003FFF, 0, DIP_A_SL2D_RZ, SL2_HRZ_COMP, 0x00004790, 0x15026790, 0x00003FFF, 0, DIP_A_SL2D_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2d.sl2d_vrz_comp, REG_CMP_EQ(c, LOG_SL2D_EN, 1), 0x00004790, 0x15026790, 0x3FFF0000, 16, DIP_A_SL2D_RZ, SL2_VRZ_COMP, 0x00004790, 0x15026790, 0x3FFF0000, 16, DIP_A_SL2D_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, sl2e.sl2e_hrz_comp, REG_CMP_EQ(c, LOG_SL2E_EN, 1), 0x00005450, 0x15027450, 0x00003FFF, 0, DIP_A_SL2E_RZ, SL2_HRZ_COMP, 0x00005450, 0x15027450, 0x00003FFF, 0, DIP_A_SL2E_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2e.sl2e_vrz_comp, REG_CMP_EQ(c, LOG_SL2E_EN, 1), 0x00005450, 0x15027450, 0x3FFF0000, 16, DIP_A_SL2E_RZ, SL2_VRZ_COMP, 0x00005450, 0x15027450, 0x3FFF0000, 16, DIP_A_SL2E_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, sl2g.sl2g_hrz_comp, REG_CMP_EQ(c, LOG_SL2G_EN, 1), 0x00001190, 0x15023190, 0x00003FFF, 0, DIP_A_SL2G_RZ, SL2_HRZ_COMP, 0x00001190, 0x15023190, 0x00003FFF, 0, DIP_A_SL2G_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2g.sl2g_vrz_comp, REG_CMP_EQ(c, LOG_SL2G_EN, 1), 0x00001190, 0x15023190, 0x3FFF0000, 16, DIP_A_SL2G_RZ, SL2_VRZ_COMP, 0x00001190, 0x15023190, 0x3FFF0000, 16, DIP_A_SL2G_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, sl2h.sl2h_hrz_comp, REG_CMP_EQ(c, LOG_SL2H_EN, 1), 0x00001510, 0x15023510, 0x00003FFF, 0, DIP_A_SL2H_RZ, SL2_HRZ_COMP, 0x00001510, 0x15023510, 0x00003FFF, 0, DIP_A_SL2H_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2h.sl2h_vrz_comp, REG_CMP_EQ(c, LOG_SL2H_EN, 1), 0x00001510, 0x15023510, 0x3FFF0000, 16, DIP_A_SL2H_RZ, SL2_VRZ_COMP, 0x00001510, 0x15023510, 0x3FFF0000, 16, DIP_A_SL2H_RZ, SL2_VRZ_COMP)\
	CMD(a, b, c, d, e, seee.se_edge, REG_CMP_EQ(c, LOG_SEEE_EN, 1), 0x000046C4, 0x150266C4, 0x00000003, 0, DIP_A_SEEE_TOP_CTRL, SEEE_OUT_EDGE_SEL, 0x000046C4, 0x150266C4, 0x00000003, 0, DIP_A_SEEE_TOP_CTRL, SEEE_OUT_EDGE_SEL)\
	CMD(a, b, c, d, e, lcei.lcei_v_flip_en, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x00000310, 0x15022310, 0x01000000, 24, DIP_A_VERTICAL_FLIP_EN, LCEI_V_FLIP_EN, 0x00000310, 0x15022310, 0x01000000, 24, DIP_A_VERTICAL_FLIP_EN, LCEI_V_FLIP_EN)\
	CMD(a, b, c, d, e, lcei.lcei_stride, REG_CMP_EQ(c, LOG_LCEI_EN, 1), 0x00000698, 0x15022698, 0x0000FFFF, 0, DIP_A_LCEI_STRIDE, STRIDE, 0x00000698, 0x15022698, 0x0000FFFF, 0, DIP_A_LCEI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, lce.lce_bc_mag_kubnx, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00002104, 0x15024104, 0x00007FFF, 0, DIP_A_LCE25_ZR, LCE_BCMK_X, 0x00002104, 0x15024104, 0x00007FFF, 0, DIP_A_LCE25_ZR, LCE_BCMK_X)\
	CMD(a, b, c, d, e, lce.lce_bc_mag_kubny, REG_CMP_EQ(c, LOG_LCE_EN, 1), 0x00002104, 0x15024104, 0x7FFF0000, 16, DIP_A_LCE25_ZR, LCE_BCMK_Y, 0x00002104, 0x15024104, 0x7FFF0000, 16, DIP_A_LCE25_ZR, LCE_BCMK_Y)\
	CMD(a, b, c, d, e, cdrz.cdrz_horizontal_luma_algorithm, REG_CMP_EQ(c, LOG_CDRZ_EN, 1), 0x00005300, 0x15027300, 0x00000060, 5, DIP_A_CRZ_CONTROL, CRZ_HORI_ALGO, 0x00005300, 0x15027300, 0x00000060, 5, DIP_A_CRZ_CONTROL, CRZ_HORI_ALGO)\
	CMD(a, b, c, d, e, cdrz.cdrz_vertical_luma_algorithm, REG_CMP_EQ(c, LOG_CDRZ_EN, 1), 0x00005300, 0x15027300, 0x00000180, 7, DIP_A_CRZ_CONTROL, CRZ_VERT_ALGO, 0x00005300, 0x15027300, 0x00000180, 7, DIP_A_CRZ_CONTROL, CRZ_VERT_ALGO)\
	CMD(a, b, c, d, e, cdrz.cdrz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_CDRZ_EN, 1), 0x0000530C, 0x1502730C, 0x007FFFFF, 0, DIP_A_CRZ_HORI_STEP, CRZ_HORI_STEP, 0x0000530C, 0x1502730C, 0x007FFFFF, 0, DIP_A_CRZ_HORI_STEP, CRZ_HORI_STEP)\
	CMD(a, b, c, d, e, cdrz.cdrz_vertical_coeff_step, REG_CMP_EQ(c, LOG_CDRZ_EN, 1), 0x00005310, 0x15027310, 0x007FFFFF, 0, DIP_A_CRZ_VERT_STEP, CRZ_VERT_STEP, 0x00005310, 0x15027310, 0x007FFFFF, 0, DIP_A_CRZ_VERT_STEP, CRZ_VERT_STEP)\
	CMD(a, b, c, d, e, img2o.img2o_stride, REG_CMP_EQ(c, LOG_IMG2O_EN, 1), 0x00000348, 0x15022348, 0x0000FFFF, 0, DIP_A_IMG2O_STRIDE, STRIDE, 0x00000348, 0x15022348, 0x0000FFFF, 0, DIP_A_IMG2O_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, img2bo.img2bo_stride, REG_CMP_EQ(c, LOG_IMG2BO_EN, 1), 0x00000378, 0x15022378, 0x0000FFFF, 0, DIP_A_IMG2BO_STRIDE, STRIDE, 0x00000378, 0x15022378, 0x0000FFFF, 0, DIP_A_IMG2BO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, srz1.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x0000390C, 0x1502590C, 0x0007FFFF, 0, DIP_A_SRZ1_HORI_STEP, SRZ_HORI_STEP, 0x0000390C, 0x1502590C, 0x0007FFFF, 0, DIP_A_SRZ1_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, srz1.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ1_EN, 1), 0x00003910, 0x15025910, 0x0007FFFF, 0, DIP_A_SRZ1_VERT_STEP, SRZ_VERT_STEP, 0x00003910, 0x15025910, 0x0007FFFF, 0, DIP_A_SRZ1_VERT_STEP, SRZ_VERT_STEP)\
	CMD(a, b, c, d, e, srz2.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ2_EN, 1), 0x0000468C, 0x1502668C, 0x0007FFFF, 0, DIP_A_SRZ2_HORI_STEP, SRZ_HORI_STEP, 0x0000468C, 0x1502668C, 0x0007FFFF, 0, DIP_A_SRZ2_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, srz2.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ2_EN, 1), 0x00004690, 0x15026690, 0x0007FFFF, 0, DIP_A_SRZ2_VERT_STEP, SRZ_VERT_STEP, 0x00004690, 0x15026690, 0x0007FFFF, 0, DIP_A_SRZ2_VERT_STEP, SRZ_VERT_STEP)\
	CMD(a, b, c, d, e, fe.fe_mode, REG_CMP_EQ(c, LOG_FE_EN, 1), 0x00003940, 0x15025940, 0x00000003, 0, DIP_A_FE_CTRL1, FE_MODE, 0x00003940, 0x15025940, 0x00000003, 0, DIP_A_FE_CTRL1, FE_MODE)\
	CMD(a, b, c, d, e, feo.feo_stride, REG_CMP_EQ(c, LOG_FEO_EN, 1), 0x00000438, 0x15022438, 0x0000FFFF, 0, DIP_A_FEO_STRIDE, STRIDE, 0x00000438, 0x15022438, 0x0000FFFF, 0, DIP_A_FEO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, nr3d.nr3d_on_en, REG_CMP_EQ(c, LOG_NR3D_EN, 1), 0x0000538C, 0x1502738C, 0x00000010, 4, DIP_A_NR3D_ON_CON, NR3D_ON_EN, 0x0000538C, 0x1502738C, 0x00000010, 4, DIP_A_NR3D_ON_CON, NR3D_ON_EN)\
	CMD(a, b, c, d, e, img3o.img3o_stride, REG_CMP_EQ(c, LOG_IMG3O_EN, 1), 0x000003A8, 0x150223A8, 0x0000FFFF, 0, DIP_A_IMG3O_STRIDE, STRIDE, 0x000003A8, 0x150223A8, 0x0000FFFF, 0, DIP_A_IMG3O_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, img3bo.img3bo_stride, REG_CMP_EQ(c, LOG_IMG3BO_EN, 1), 0x000003D8, 0x150223D8, 0x0000FFFF, 0, DIP_A_IMG3BO_STRIDE, STRIDE, 0x000003D8, 0x150223D8, 0x0000FFFF, 0, DIP_A_IMG3BO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, img3co.img3co_stride, REG_CMP_EQ(c, LOG_IMG3CO_EN, 1), 0x00000408, 0x15022408, 0x0000FFFF, 0, DIP_A_IMG3CO_STRIDE, STRIDE, 0x00000408, 0x15022408, 0x0000FFFF, 0, DIP_A_IMG3CO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, dmgi.dmgi_v_flip_en, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00000310, 0x15022310, 0x00400000, 22, DIP_A_VERTICAL_FLIP_EN, DMGI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00400000, 22, DIP_A_VERTICAL_FLIP_EN, DMGI_V_FLIP_EN)\
	CMD(a, b, c, d, e, dmgi.dmgi_stride, REG_CMP_EQ(c, LOG_DMGI_EN, 1), 0x00000638, 0x15022638, 0x0000FFFF, 0, DIP_A_DMGI_STRIDE, STRIDE, 0x00000638, 0x15022638, 0x0000FFFF, 0, DIP_A_DMGI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, depi.depi_v_flip_en, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x00000310, 0x15022310, 0x00800000, 23, DIP_A_VERTICAL_FLIP_EN, DEPI_V_FLIP_EN, 0x00000310, 0x15022310, 0x00800000, 23, DIP_A_VERTICAL_FLIP_EN, DEPI_V_FLIP_EN)\
	CMD(a, b, c, d, e, depi.depi_stride, REG_CMP_EQ(c, LOG_DEPI_EN, 1), 0x00000668, 0x15022668, 0x0000FFFF, 0, DIP_A_DEPI_STRIDE, STRIDE, 0x00000668, 0x15022668, 0x0000FFFF, 0, DIP_A_DEPI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, pca.pca_cfc_en, REG_CMP_EQ(c, LOG_PCA_EN, 1), 0x00004600, 0x15026600, 0x00000040, 6, DIP_A_PCA_CON1, PCA_CFC_EN, 0x00004600, 0x15026600, 0x00000040, 6, DIP_A_PCA_CON1, PCA_CFC_EN)\
	CMD(a, b, c, d, e, pca.pca_cnv_en, REG_CMP_EQ(c, LOG_PCA_EN, 1), 0x00004600, 0x15026600, 0x00000080, 7, DIP_A_PCA_CON1, PCA_CNV_EN, 0x00004600, 0x15026600, 0x00000080, 7, DIP_A_PCA_CON1, PCA_CNV_EN)\
	CMD(a, b, c, d, e, srz3.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x0000494C, 0x1502694C, 0x0007FFFF, 0, DIP_A_SRZ3_HORI_STEP, SRZ_HORI_STEP, 0x0000494C, 0x1502694C, 0x0007FFFF, 0, DIP_A_SRZ3_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, srz3.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ3_EN, 1), 0x00004950, 0x15026950, 0x0007FFFF, 0, DIP_A_SRZ3_VERT_STEP, SRZ_VERT_STEP, 0x00004950, 0x15026950, 0x0007FFFF, 0, DIP_A_SRZ3_VERT_STEP, SRZ_VERT_STEP)\
	CMD(a, b, c, d, e, srz4.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x0000388C, 0x1502588C, 0x0007FFFF, 0, DIP_A_SRZ4_HORI_STEP, SRZ_HORI_STEP, 0x0000388C, 0x1502588C, 0x0007FFFF, 0, DIP_A_SRZ4_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, srz4.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ4_EN, 1), 0x00003890, 0x15025890, 0x0007FFFF, 0, DIP_A_SRZ4_VERT_STEP, SRZ_VERT_STEP, 0x00003890, 0x15025890, 0x0007FFFF, 0, DIP_A_SRZ4_VERT_STEP, SRZ_VERT_STEP)\
	CMD(a, b, c, d, e, sl2i.sl2i_hrz_comp, REG_CMP_EQ(c, LOG_SL2I_EN, 1), 0x000052D0, 0x150272D0, 0x00003FFF, 0, DIP_A_SL2I_RZ, SL2_HRZ_COMP, 0x000052D0, 0x150272D0, 0x00003FFF, 0, DIP_A_SL2I_RZ, SL2_HRZ_COMP)\
	CMD(a, b, c, d, e, sl2i.sl2i_vrz_comp, REG_CMP_EQ(c, LOG_SL2I_EN, 1), 0x000052D0, 0x150272D0, 0x3FFF0000, 16, DIP_A_SL2I_RZ, SL2_VRZ_COMP, 0x000052D0, 0x150272D0, 0x3FFF0000, 16, DIP_A_SL2I_RZ, SL2_VRZ_COMP)\
    /* Dump DIP registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_WPE_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump WPE registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.wpe_ctl_extension_en, true, 0x00000004, 0x1502A004, 0x20000000, 29, WPE_A_CTL_MOD_EN, CTL_EXTENSION, 0x00000004, 0x1502A004, 0x20000000, 29, WPE_A_CTL_MOD_EN, CTL_EXTENSION)\
	CMD(a, b, c, d, e, top.cachi_en, true, 0x00000008, 0x1502A008, 0x00000001, 0, WPE_A_CTL_DMA_EN, CACHI_EN, 0x00000008, 0x1502A008, 0x00000001, 0, WPE_A_CTL_DMA_EN, CACHI_EN)\
	CMD(a, b, c, d, e, top.veci_en, true, 0x00000008, 0x1502A008, 0x00000100, 8, WPE_A_CTL_DMA_EN, VECI_EN, 0x00000008, 0x1502A008, 0x00000100, 8, WPE_A_CTL_DMA_EN, VECI_EN)\
	CMD(a, b, c, d, e, top.vec2i_en, true, 0x00000008, 0x1502A008, 0x00000200, 9, WPE_A_CTL_DMA_EN, VEC2I_EN, 0x00000008, 0x1502A008, 0x00000200, 9, WPE_A_CTL_DMA_EN, VEC2I_EN)\
	CMD(a, b, c, d, e, top.vec3i_en, true, 0x00000008, 0x1502A008, 0x00000400, 10, WPE_A_CTL_DMA_EN, VEC3I_EN, 0x00000008, 0x1502A008, 0x00000400, 10, WPE_A_CTL_DMA_EN, VEC3I_EN)\
	CMD(a, b, c, d, e, top.wpeo_en, true, 0x00000008, 0x1502A008, 0x00010000, 16, WPE_A_CTL_DMA_EN, WPEO_EN, 0x00000008, 0x1502A008, 0x00010000, 16, WPE_A_CTL_DMA_EN, WPEO_EN)\
	CMD(a, b, c, d, e, top.msko_en, true, 0x00000008, 0x1502A008, 0x01000000, 24, WPE_A_CTL_DMA_EN, MSKO_EN, 0x00000008, 0x1502A008, 0x01000000, 24, WPE_A_CTL_DMA_EN, MSKO_EN)\
	CMD(a, b, c, d, e, top.wpe_ispcrop_en, true, 0x00000004, 0x1502A004, 0x00000080, 7, WPE_A_CTL_MOD_EN, ISP_CROP_EN, 0x00000004, 0x1502A004, 0x00000080, 7, WPE_A_CTL_MOD_EN, ISP_CROP_EN)\
	CMD(a, b, c, d, e, top.wpe_mdpcrop_en, true, 0x00000004, 0x1502A004, 0x00000040, 6, WPE_A_CTL_MOD_EN, MDP_CROP_EN, 0x00000004, 0x1502A004, 0x00000040, 6, WPE_A_CTL_MOD_EN, MDP_CROP_EN)\
	CMD(a, b, c, d, e, top.wpe_c24_en, true, 0x00000004, 0x1502A004, 0x00000100, 8, WPE_A_CTL_MOD_EN, C24_EN, 0x00000004, 0x1502A004, 0x00000100, 8, WPE_A_CTL_MOD_EN, C24_EN)\
	CMD(a, b, c, d, e, top.vgen_en, true, 0x00000004, 0x1502A004, 0x00000010, 4, WPE_A_CTL_MOD_EN, VGEN_EN, 0x00000004, 0x1502A004, 0x00000010, 4, WPE_A_CTL_MOD_EN, VGEN_EN)\
	CMD(a, b, c, d, e, top.sync_en, true, 0x00000004, 0x1502A004, 0x00000020, 5, WPE_A_CTL_MOD_EN, SYNC_EN, 0x00000004, 0x1502A004, 0x00000020, 5, WPE_A_CTL_MOD_EN, SYNC_EN)\
	CMD(a, b, c, d, e, top.wpe_cachi_fmt, true, 0x00000014, 0x1502A014, 0x0000000F, 0, WPE_A_CTL_FMT_SEL, CACHI_FMT, 0x00000014, 0x1502A014, 0x0000000F, 0, WPE_A_CTL_FMT_SEL, CACHI_FMT)\
	CMD(a, b, c, d, e, veci.veci_v_flip_en, REG_CMP_EQ(c, LOG_VECI_EN, 1), 0x000003D0, 0x1502A3D0, 0x00010000, 16, WPE_A_VERTICAL_FLIP_EN, VECI_V_FLIP_EN, 0x000003D0, 0x1502A3D0, 0x00010000, 16, WPE_A_VERTICAL_FLIP_EN, VECI_V_FLIP_EN)\
	CMD(a, b, c, d, e, veci.veci_stride, REG_CMP_EQ(c, LOG_VECI_EN, 1), 0x00000468, 0x1502A468, 0x0000FFFF, 0, WPE_A_VECI_STRIDE, STRIDE, 0x00000468, 0x1502A468, 0x0000FFFF, 0, WPE_A_VECI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, vec2i.vec2i_v_flip_en, REG_CMP_EQ(c, LOG_VEC2I_EN, 1), 0x000003D0, 0x1502A3D0, 0x00020000, 17, WPE_A_VERTICAL_FLIP_EN, VEC2I_V_FLIP_EN, 0x000003D0, 0x1502A3D0, 0x00020000, 17, WPE_A_VERTICAL_FLIP_EN, VEC2I_V_FLIP_EN)\
	CMD(a, b, c, d, e, vec2i.vec2i_stride, REG_CMP_EQ(c, LOG_VEC2I_EN, 1), 0x00000498, 0x1502A498, 0x0000FFFF, 0, WPE_A_VEC2I_STRIDE, STRIDE, 0x00000498, 0x1502A498, 0x0000FFFF, 0, WPE_A_VEC2I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, vec3i.vec3i_v_flip_en, REG_CMP_EQ(c, LOG_VEC3I_EN, 1), 0x000003D0, 0x1502A3D0, 0x00040000, 18, WPE_A_VERTICAL_FLIP_EN, VEC3I_V_FLIP_EN, 0x000003D0, 0x1502A3D0, 0x00040000, 18, WPE_A_VERTICAL_FLIP_EN, VEC3I_V_FLIP_EN)\
	CMD(a, b, c, d, e, vec3i.vec3i_stride, REG_CMP_EQ(c, LOG_VEC3I_EN, 1), 0x000004C8, 0x1502A4C8, 0x0000FFFF, 0, WPE_A_VEC3I_STRIDE, STRIDE, 0x000004C8, 0x1502A4C8, 0x0000FFFF, 0, WPE_A_VEC3I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, wpe.vgen_horizontal_coeff_step, REG_CMP_EQ(c, LOG_WPE_EN, 1), 0x000000CC, 0x1502A0CC, 0xFFFFFFFF, 0, WPE_A_VGEN_HORI_STEP, VGEN_HORI_STEP, 0x000000CC, 0x1502A0CC, 0xFFFFFFFF, 0, WPE_A_VGEN_HORI_STEP, VGEN_HORI_STEP)\
	CMD(a, b, c, d, e, wpe.vgen_vertical_coeff_step, REG_CMP_EQ(c, LOG_WPE_EN, 1), 0x000000D0, 0x1502A0D0, 0xFFFFFFFF, 0, WPE_A_VGEN_VERT_STEP, VGEN_VERT_STEP, 0x000000D0, 0x1502A0D0, 0xFFFFFFFF, 0, WPE_A_VGEN_VERT_STEP, VGEN_VERT_STEP)\
	CMD(a, b, c, d, e, wpeo.wpeo_stride, REG_CMP_EQ(c, LOG_WPEO_EN, 1), 0x00000408, 0x1502A408, 0x0000FFFF, 0, WPE_A_WPEO_STRIDE, STRIDE, 0x00000408, 0x1502A408, 0x0000FFFF, 0, WPE_A_WPEO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, msko.msko_stride, REG_CMP_EQ(c, LOG_MSKO_EN, 1), 0x00000438, 0x1502A438, 0x0000FFFF, 0, WPE_A_MSKO_STRIDE, STRIDE, 0x00000438, 0x1502A438, 0x0000FFFF, 0, WPE_A_MSKO_STRIDE, STRIDE)\
    /* Dump WPE registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_EAF_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump EAF registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.eaf_en, true, 0x00000000, 0x1502D000, 0x00000001, 0, EAF_A_MAIN_CFG0, EAF_EN, 0x00000000, 0x1502D000, 0x00000001, 0, EAF_A_MAIN_CFG0, EAF_EN)\
	CMD(a, b, c, d, e, top.eafi_mask_en, true, 0x00000004, 0x1502D004, 0x00000001, 0, EAF_A_MAIN_CFG1, EAFI_MASK_EN, 0x00000004, 0x1502D004, 0x00000001, 0, EAF_A_MAIN_CFG1, EAFI_MASK_EN)\
	CMD(a, b, c, d, e, top.eafi_cur_y_en, true, 0x00000004, 0x1502D004, 0x00000002, 1, EAF_A_MAIN_CFG1, EAFI_CUR_Y_EN, 0x00000004, 0x1502D004, 0x00000002, 1, EAF_A_MAIN_CFG1, EAFI_CUR_Y_EN)\
	CMD(a, b, c, d, e, top.eafi_pre_y_en, true, 0x00000004, 0x1502D004, 0x00000008, 3, EAF_A_MAIN_CFG1, EAFI_PRE_Y_EN, 0x00000004, 0x1502D004, 0x00000008, 3, EAF_A_MAIN_CFG1, EAFI_PRE_Y_EN)\
	CMD(a, b, c, d, e, top.eafi_pre_uv_en, true, 0x00000004, 0x1502D004, 0x00000010, 4, EAF_A_MAIN_CFG1, EAFI_PRE_UV_EN, 0x00000004, 0x1502D004, 0x00000010, 4, EAF_A_MAIN_CFG1, EAFI_PRE_UV_EN)\
	CMD(a, b, c, d, e, top.eafi_lkh_wmap_en, true, 0x00000004, 0x1502D004, 0x00000040, 6, EAF_A_MAIN_CFG1, EAFI_LKH_WMAP_EN, 0x00000004, 0x1502D004, 0x00000040, 6, EAF_A_MAIN_CFG1, EAFI_LKH_WMAP_EN)\
	CMD(a, b, c, d, e, top.eafi_lkh_emap_en, true, 0x00000004, 0x1502D004, 0x00000080, 7, EAF_A_MAIN_CFG1, EAFI_LKH_EMAP_EN, 0x00000004, 0x1502D004, 0x00000080, 7, EAF_A_MAIN_CFG1, EAFI_LKH_EMAP_EN)\
	CMD(a, b, c, d, e, top.eafi_depth_en, true, 0x00000004, 0x1502D004, 0x00000020, 5, EAF_A_MAIN_CFG1, EAFI_DEP_EN, 0x00000004, 0x1502D004, 0x00000020, 5, EAF_A_MAIN_CFG1, EAFI_DEP_EN)\
	CMD(a, b, c, d, e, top.srz6_en, true, 0x00000000, 0x1502D000, 0x00000040, 6, EAF_A_MAIN_CFG0, EAF_SRZ_EN, 0x00000000, 0x1502D000, 0x00000040, 6, EAF_A_MAIN_CFG0, EAF_SRZ_EN)\
	CMD(a, b, c, d, e, top.eafo_fout_en, true, 0x00000004, 0x1502D004, 0x00000200, 9, EAF_A_MAIN_CFG1, EAFO_FOUT_EN, 0x00000004, 0x1502D004, 0x00000200, 9, EAF_A_MAIN_CFG1, EAFO_FOUT_EN)\
	CMD(a, b, c, d, e, eaf.jbfr_ref_sel, true, 0x00000000, 0x1502D000, 0x00000002, 1, EAF_A_MAIN_CFG0, EAF_JBFR_REF_SEL, 0x00000000, 0x1502D000, 0x00000002, 1, EAF_A_MAIN_CFG0, EAF_JBFR_REF_SEL)\
	CMD(a, b, c, d, e, eaf.jbfr_ker_mode, true, 0x00000300, 0x1502D300, 0x00000030, 4, EAF_A_JBFR_CFG0, EAF_JBFR_KER_MODE, 0x00000300, 0x1502D300, 0x00000030, 4, EAF_A_JBFR_CFG0, EAF_JBFR_KER_MODE)\
	CMD(a, b, c, d, e, eafi.mask_stride, REG_CMP_EQ(c, LOG_EAFI_MASK_EN, 1), 0x00000038, 0x1502D038, 0x0000FFFF, 0, EAF_A_EAFI_MASK2, EAFI_MASK_STRIDE, 0x00000038, 0x1502D038, 0x0000FFFF, 0, EAF_A_EAFI_MASK2, EAFI_MASK_STRIDE)\
	CMD(a, b, c, d, e, eafi.cur_y_stride, REG_CMP_EQ(c, LOG_EAFI_CUR_Y_EN, 1), 0x00000048, 0x1502D048, 0x0000FFFF, 0, EAF_A_EAFI_CUR_Y2, EAFI_CUR_Y_STRIDE, 0x00000048, 0x1502D048, 0x0000FFFF, 0, EAF_A_EAFI_CUR_Y2, EAFI_CUR_Y_STRIDE)\
	CMD(a, b, c, d, e, eafi.cur_uv_stride, REG_CMP_EQ(c, LOG_EAFI_CUR_UV_EN, 1), 0x00000058, 0x1502D058, 0x0000FFFF, 0, EAF_A_EAFI_CUR_UV2, EAFI_CUR_UV_STRIDE, 0x00000058, 0x1502D058, 0x0000FFFF, 0, EAF_A_EAFI_CUR_UV2, EAFI_CUR_UV_STRIDE)\
	CMD(a, b, c, d, e, eafi.lkh_wmap_stride, REG_CMP_EQ(c, LOG_EAFI_LKH_WMAP_EN, 1), 0x00000098, 0x1502D098, 0x0000FFFF, 0, EAF_A_EAFI_LKH_WMAP2, EAFI_LKH_WMAP_STRIDE, 0x00000098, 0x1502D098, 0x0000FFFF, 0, EAF_A_EAFI_LKH_WMAP2, EAFI_LKH_WMAP_STRIDE)\
	CMD(a, b, c, d, e, eafi.lkh_emap_stride, REG_CMP_EQ(c, LOG_EAFI_LKH_EMAP_EN, 1), 0x000000A8, 0x1502D0A8, 0x0000FFFF, 0, EAF_A_EAFI_LKH_EMAP2, EAFI_LKH_EMAP_STRIDE, 0x000000A8, 0x1502D0A8, 0x0000FFFF, 0, EAF_A_EAFI_LKH_EMAP2, EAFI_LKH_EMAP_STRIDE)\
	CMD(a, b, c, d, e, eafi.depth_stride, REG_CMP_EQ(c, LOG_EAFI_DEPTH_EN, 1), 0x00000088, 0x1502D088, 0x0000FFFF, 0, EAF_A_EAFI_DEP2, EAFI_DEP_STRIDE, 0x00000088, 0x1502D088, 0x0000FFFF, 0, EAF_A_EAFI_DEP2, EAFI_DEP_STRIDE)\
	CMD(a, b, c, d, e, eafi.pre_y_stride, REG_CMP_EQ(c, LOG_EAFI_PRE_Y_EN, 1), 0x00000068, 0x1502D068, 0x0000FFFF, 0, EAF_A_EAFI_PRE_Y2, EAFI_PRE_Y_STRIDE, 0x00000068, 0x1502D068, 0x0000FFFF, 0, EAF_A_EAFI_PRE_Y2, EAFI_PRE_Y_STRIDE)\
	CMD(a, b, c, d, e, eafi.pre_uv_stride, REG_CMP_EQ(c, LOG_EAFI_PRE_UV_EN, 1), 0x00000078, 0x1502D078, 0x0000FFFF, 0, EAF_A_EAFI_PRE_UV2, EAFI_PRE_UV_STRIDE, 0x00000078, 0x1502D078, 0x0000FFFF, 0, EAF_A_EAFI_PRE_UV2, EAFI_PRE_UV_STRIDE)\
	CMD(a, b, c, d, e, eafo.fout_stride, REG_CMP_EQ(c, LOG_EAFO_FOUT_EN, 1), 0x000000C8, 0x1502D0C8, 0x0000FFFF, 0, EAF_A_EAFO_FOUT2, EAFO_FOUT_STRIDE, 0x000000C8, 0x1502D0C8, 0x0000FFFF, 0, EAF_A_EAFO_FOUT2, EAFO_FOUT_STRIDE)\
	CMD(a, b, c, d, e, srz6.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_SRZ6_EN, 1), 0x0000038C, 0x1502D38C, 0x0007FFFF, 0, EAF_A_SRZ6_HORI_STEP, SRZ_HORI_STEP, 0x0000038C, 0x1502D38C, 0x0007FFFF, 0, EAF_A_SRZ6_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, srz6.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_SRZ6_EN, 1), 0x00000390, 0x1502D390, 0x0007FFFF, 0, EAF_A_SRZ6_VERT_STEP, SRZ_VERT_STEP, 0x00000390, 0x1502D390, 0x0007FFFF, 0, EAF_A_SRZ6_VERT_STEP, SRZ_VERT_STEP)\
    /* Dump EAF registers - end */\
    /* Manually insert more ISP registers below */\

#define HW_BLD_REG_CMP(CMD, a, b, c, d, e) \
    /* Dump BLD registers - start, replaced with auto-code gen */\
	CMD(a, b, c, d, e, top.bldi_en, true, 0x00000064, 0x1502E064, 0x00000001, 0, MFB_A_MFB_TOP_CFG2, MFB_MFBI_EN, 0x00000064, 0x1502E064, 0x00000001, 0, MFB_A_MFB_TOP_CFG2, MFB_MFBI_EN)\
	CMD(a, b, c, d, e, top.bld2i_en, true, 0x00000064, 0x1502E064, 0x00000002, 1, MFB_A_MFB_TOP_CFG2, MFB_MFB2I_EN, 0x00000064, 0x1502E064, 0x00000002, 1, MFB_A_MFB_TOP_CFG2, MFB_MFB2I_EN)\
	CMD(a, b, c, d, e, top.bld3i_en, true, 0x00000064, 0x1502E064, 0x00000004, 2, MFB_A_MFB_TOP_CFG2, MFB_MFB3I_EN, 0x00000064, 0x1502E064, 0x00000004, 2, MFB_A_MFB_TOP_CFG2, MFB_MFB3I_EN)\
	CMD(a, b, c, d, e, top.bld4i_en, true, 0x00000064, 0x1502E064, 0x00000008, 3, MFB_A_MFB_TOP_CFG2, MFB_MFB4I_EN, 0x00000064, 0x1502E064, 0x00000008, 3, MFB_A_MFB_TOP_CFG2, MFB_MFB4I_EN)\
	CMD(a, b, c, d, e, top.bld_en, true, 0x0000005C, 0x1502E05C, 0x00000001, 0, MFB_A_MFB_TOP_CFG0, MFB_EN, 0x0000005C, 0x1502E05C, 0x00000001, 0, MFB_A_MFB_TOP_CFG0, MFB_EN)\
	CMD(a, b, c, d, e, top.bldo_en, true, 0x00000064, 0x1502E064, 0x00000010, 4, MFB_A_MFB_TOP_CFG2, MFB_MFBO_EN, 0x00000064, 0x1502E064, 0x00000010, 4, MFB_A_MFB_TOP_CFG2, MFB_MFBO_EN)\
	CMD(a, b, c, d, e, top.bld2o_en, true, 0x00000064, 0x1502E064, 0x00000020, 5, MFB_A_MFB_TOP_CFG2, MFB_MFB2O_EN, 0x00000064, 0x1502E064, 0x00000020, 5, MFB_A_MFB_TOP_CFG2, MFB_MFB2O_EN)\
	CMD(a, b, c, d, e, top.mfb_srz_en, true, 0x0000005C, 0x1502E05C, 0x00000004, 2, MFB_A_MFB_TOP_CFG0, MFB_SRZ_EN, 0x0000005C, 0x1502E05C, 0x00000004, 2, MFB_A_MFB_TOP_CFG0, MFB_SRZ_EN)\
	CMD(a, b, c, d, e, top.bldi_fmt, true, 0x000001A8, 0x1502E1A8, 0x00300000, 20, MFB_A_MFBI_STRIDE, FORMAT, 0x000001A8, 0x1502E1A8, 0x00300000, 20, MFB_A_MFBI_STRIDE, FORMAT)\
	CMD(a, b, c, d, e, bldi.bldi_v_flip_en, REG_CMP_EQ(c, LOG_BLDI_EN, 1), 0x00000110, 0x1502E110, 0x00010000, 16, MFB_A_VERTICAL_FLIP_EN, MFBI_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00010000, 16, MFB_A_VERTICAL_FLIP_EN, MFBI_V_FLIP_EN)\
	CMD(a, b, c, d, e, bldi.bldi_stride, REG_CMP_EQ(c, LOG_BLDI_EN, 1), 0x000001A8, 0x1502E1A8, 0x0000FFFF, 0, MFB_A_MFBI_STRIDE, STRIDE, 0x000001A8, 0x1502E1A8, 0x0000FFFF, 0, MFB_A_MFBI_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bldbi.bldbi_v_flip_en, REG_CMP_EQ(c, LOG_BLDBI_EN, 1), 0x00000110, 0x1502E110, 0x00100000, 20, MFB_A_VERTICAL_FLIP_EN, MFBI_B_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00100000, 20, MFB_A_VERTICAL_FLIP_EN, MFBI_B_V_FLIP_EN)\
	CMD(a, b, c, d, e, bldbi.bldbi_stride, REG_CMP_EQ(c, LOG_BLDBI_EN, 1), 0x000002E8, 0x1502E2E8, 0x0000FFFF, 0, MFB_A_MFBI_B_STRIDE, STRIDE, 0x000002E8, 0x1502E2E8, 0x0000FFFF, 0, MFB_A_MFBI_B_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld2i.bld2i_v_flip_en, REG_CMP_EQ(c, LOG_BLD2I_EN, 1), 0x00000110, 0x1502E110, 0x00020000, 17, MFB_A_VERTICAL_FLIP_EN, MFB2I_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00020000, 17, MFB_A_VERTICAL_FLIP_EN, MFB2I_V_FLIP_EN)\
	CMD(a, b, c, d, e, bld2i.bld2i_stride, REG_CMP_EQ(c, LOG_BLD2I_EN, 1), 0x000001D8, 0x1502E1D8, 0x0000FFFF, 0, MFB_A_MFB2I_STRIDE, STRIDE, 0x000001D8, 0x1502E1D8, 0x0000FFFF, 0, MFB_A_MFB2I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld2bi.bld2bi_v_flip_en, REG_CMP_EQ(c, LOG_BLD2BI_EN, 1), 0x00000110, 0x1502E110, 0x00200000, 21, MFB_A_VERTICAL_FLIP_EN, MFB2I_B_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00200000, 21, MFB_A_VERTICAL_FLIP_EN, MFB2I_B_V_FLIP_EN)\
	CMD(a, b, c, d, e, bld2bi.bld2bi_stride, REG_CMP_EQ(c, LOG_BLD2BI_EN, 1), 0x00000318, 0x1502E318, 0x0000FFFF, 0, MFB_A_MFB2I_B_STRIDE, STRIDE, 0x00000318, 0x1502E318, 0x0000FFFF, 0, MFB_A_MFB2I_B_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld3i.bld3i_v_flip_en, REG_CMP_EQ(c, LOG_BLD3I_EN, 1), 0x00000110, 0x1502E110, 0x00040000, 18, MFB_A_VERTICAL_FLIP_EN, MFB3I_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00040000, 18, MFB_A_VERTICAL_FLIP_EN, MFB3I_V_FLIP_EN)\
	CMD(a, b, c, d, e, bld3i.bld3i_stride, REG_CMP_EQ(c, LOG_BLD3I_EN, 1), 0x00000208, 0x1502E208, 0x0000FFFF, 0, MFB_A_MFB3I_STRIDE, STRIDE, 0x00000208, 0x1502E208, 0x0000FFFF, 0, MFB_A_MFB3I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld4i.bld4i_v_flip_en, REG_CMP_EQ(c, LOG_BLD4I_EN, 1), 0x00000110, 0x1502E110, 0x00080000, 19, MFB_A_VERTICAL_FLIP_EN, MFB4I_V_FLIP_EN, 0x00000110, 0x1502E110, 0x00080000, 19, MFB_A_VERTICAL_FLIP_EN, MFB4I_V_FLIP_EN)\
	CMD(a, b, c, d, e, bld4i.bld4i_stride, REG_CMP_EQ(c, LOG_BLD4I_EN, 1), 0x00000238, 0x1502E238, 0x0000FFFF, 0, MFB_A_MFB4I_STRIDE, STRIDE, 0x00000238, 0x1502E238, 0x0000FFFF, 0, MFB_A_MFB4I_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld.bld_deblock_en, REG_CMP_EQ(c, LOG_BLD_EN, 1), 0x00000000, 0x1502E000, 0x00000020, 5, MFB_A_MFB_CON, BLD_LL_DB_EN, 0x00000000, 0x1502E000, 0x00000020, 5, MFB_A_MFB_CON, BLD_LL_DB_EN)\
	CMD(a, b, c, d, e, bld.bld_brz_en, REG_CMP_EQ(c, LOG_BLD_EN, 1), 0x00000000, 0x1502E000, 0x00000010, 4, MFB_A_MFB_CON, BLD_LL_BRZ_EN, 0x00000000, 0x1502E000, 0x00000010, 4, MFB_A_MFB_CON, BLD_LL_BRZ_EN)\
	CMD(a, b, c, d, e, bld.bld_mbd_wt_en, REG_CMP_EQ(c, LOG_BLD_EN, 1), 0x00000000, 0x1502E000, 0x00000040, 6, MFB_A_MFB_CON, BLD_MBD_WT_EN, 0x00000000, 0x1502E000, 0x00000040, 6, MFB_A_MFB_CON, BLD_MBD_WT_EN)\
	CMD(a, b, c, d, e, mfb_srz.srz_horizontal_coeff_step, REG_CMP_EQ(c, LOG_MFB_SRZ_EN, 1), 0x0000034C, 0x1502E34C, 0x0007FFFF, 0, MFB_A_SRZ_HORI_STEP, SRZ_HORI_STEP, 0x0000034C, 0x1502E34C, 0x0007FFFF, 0, MFB_A_SRZ_HORI_STEP, SRZ_HORI_STEP)\
	CMD(a, b, c, d, e, mfb_srz.srz_vertical_coeff_step, REG_CMP_EQ(c, LOG_MFB_SRZ_EN, 1), 0x00000350, 0x1502E350, 0x0007FFFF, 0, MFB_A_SRZ_VERT_STEP, SRZ_VERT_STEP, 0x00000350, 0x1502E350, 0x0007FFFF, 0, MFB_A_SRZ_VERT_STEP, SRZ_VERT_STEP)\
	CMD(a, b, c, d, e, bldo.bldo_stride, REG_CMP_EQ(c, LOG_BLDO_EN, 1), 0x00000148, 0x1502E148, 0x0000FFFF, 0, MFB_A_MFBO_STRIDE, STRIDE, 0x00000148, 0x1502E148, 0x0000FFFF, 0, MFB_A_MFBO_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bldbo.bldbo_stride, REG_CMP_EQ(c, LOG_BLDBO_EN, 1), 0x000002B8, 0x1502E2B8, 0x0000FFFF, 0, MFB_A_MFBO_B_STRIDE, STRIDE, 0x000002B8, 0x1502E2B8, 0x0000FFFF, 0, MFB_A_MFBO_B_STRIDE, STRIDE)\
	CMD(a, b, c, d, e, bld2o.bld2o_stride, REG_CMP_EQ(c, LOG_BLD2O_EN, 1), 0x00000178, 0x1502E178, 0x0000FFFF, 0, MFB_A_MFB2O_STRIDE, STRIDE, 0x00000178, 0x1502E178, 0x0000FFFF, 0, MFB_A_MFB2O_STRIDE, STRIDE)\
    /* Dump BLD registers - end */\
    /* Manually insert more ISP registers below */\

typedef struct ISP_TPIPE_CONFIG_TOP_STRUCT
{
    int pixel_id;
    int cam_in_fmt;
    int ctl_extension_en;
    int fg_mode;
	int ufo_imgi_en;
    int ufdi_fmt;
    int vipi_fmt;
    int img3o_fmt;
    int img2o_fmt;
    int pak2_fmt;
    int adl_en;
    int imgi_en;
    int imgbi_en;
    int imgci_en;
    int ufdi_en;
    int unp_en;
    int ufd_en;
    int ufd_crop_en;
    int bnr_en;
    int lsc2_en;
    int rcp2_en;
    int pak2_en;
    int c24_en;
    int sl2_en;
	int rnr_en;
    int udm_en;
    int vipi_en;
    int vip2i_en;
    int vip3i_en;
    int pak2o_en;
    int g2c_en;
    int c42_en;
    int sl2b_en;
    int nbc_en;
    int dmgi_en;
    int depi_en;
    int nbc2_en;
    int srz1_en;
    int mix1_en;
    int srz2_en;
    int mix2_en;
    int sl2c_en;
    int sl2d_en;
    int sl2e_en;
    int sl2g_en;
    int sl2h_en;
    int sl2i_en;
    int hfg_en;
    int ndg_en;
    int ndg2_en;
    int seee_en;
    int lcei_en;
    int lce_en;
    int mix3_en;
    int mix4_en;
    int crz_en;
    int img2o_en;
    int img2bo_en;
    int fe_en;
    int feo_en;
    int c02_en;
    int c02b_en;
    int nr3d_en;
	int color_en;
    int crsp_en;
    int img3o_en;
    int img3bo_en;
    int img3co_en;
    int c24b_en;
    int mdp_crop_en;
    int mdp_crop2_en;
    int plnr1_en;
    int plnr2_en;
    int plnw1_en;
    int plnw2_en;
    int adbs2_en;
    int dbs2_en;
    int obc2_en;
    int rmm2_en;
    int rmg2_en;
    int gdr1_en;
    int gdr2_en;
    int bnr2_en;
    int fm_en;
    int srz3_en;
    int srz4_en;
	int g2g2_en;
	int ggm2_en;
	int wsync_en;
	int wshift_en;
    int interlace_mode;
    int pgn_sel;
    int g2g_sel;
    int g2c_sel;
    int srz1_sel;
    int mix1_sel;
    int crz_sel;
    int nr3d_sel;
    int fe_sel;
    int mdp_sel;
    int pca_en;
	int pgn_en;
	int g2g_en;
	int flc_en;
	int flc2_en;
	int ggm_en;
	int dcpn2_en;
	int cpn2_en;
    int nbc_sel;
	int rcp2_sel;
	int pak2o_sel;
	int crsp_sel;
	int imgi_sel;
	int ggm_sel;
	int src_sel;
	int dst_sel;
	int wpe_sel;
	int feo_sel;
	int g2g2_sel;
	int nbc_gmap_ltm_mode;
    int wpe_ctl_extension_en;
    int eaf_ctl_extension_en;
	int eaf_en;
	int eafi_mask_en;
	int eafi_cur_y_en;
	int eafi_cur_uv_en;
	int eafi_pre_y_en;
	int eafi_pre_uv_en;
	int eafi_depth_en;
	int eafi_lkh_wmap_en;
	int eafi_lkh_emap_en;
	int eafo_fout_en;
    int srz6_en;
    int bld_ctl_extension_en;
	int bld_en;
	int bldi_en;
	int bld2i_en;
	int bld3i_en;
	int bld4i_en;
	int bldo_en;
	int bld2o_en;
    int mfb_srz_en;
	int bldi_fmt;
	int wpe_en;
	int wpe2_en;
	int veci_en;
	int vec2i_en;
	int vec3i_en;
	int wpeo_en;
	int msko_en;
	int wpe_ispcrop_en;
	int wpe_mdpcrop_en;
	int wpe_c24_en;
	int wpe_cachi_fmt;
	int cachi_en;
	int vgen_en;
	int sync_en;
	int wuv_mode;
	int pakg2_en;
    int smx1_en;
	int smx1i_en;
	int smx1o_en;
    int smx2_en;
	int smx2i_en;
	int smx2o_en;
    int smx3_en;
	int smx3i_en;
	int smx3o_en;
    int smx4_en;
	int smx4i_en;
	int smx4o_en;
}ISP_TPIPE_CONFIG_TOP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_TOP2_STRUCT
{
    int wpe_ctl_extension_en;
	int veci_en;
	int vec2i_en;
	int vec3i_en;
	int wpeo_en;
	int msko_en;
	int wpe_ispcrop_en;
	int wpe_mdpcrop_en;
	int wpe_c24_en;
	int wpe_cachi_fmt;
	int cachi_en;
	int vgen_en;
	int sync_en;
}ISP_TPIPE_CONFIG_TOP2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SW_STRUCT
{
    int log_en;
	int tpipe_sel_mode;
    int tpipe_irq_mode;
    int src_width;
    int src_height;
    int tpipe_width;
    int tpipe_height;
    int src_width_wpe;
    int src_height_wpe;
    int tpipe_width_wpe;
    int tpipe_height_wpe;
    int src_width_eaf;
    int src_height_eaf;
    int tpipe_width_eaf;
    int tpipe_height_eaf;
    int src_width_bld;
    int src_height_bld;
    int tpipe_width_bld;
    int tpipe_height_bld;
}ISP_TPIPE_CONFIG_SW_STRUCT;

typedef struct ISP_DRIVER_CONFIG_STRUCT
{
    unsigned int cq_basePA;
    ISP_TPIPE_P2_CQ_ENUM p2Cq;
    unsigned long DesCqPa;
    unsigned long DesCqVa; // for debugging
    unsigned int *pIspVirRegAddr_pa;
    unsigned int *pIspVirRegAddr_va;
    //unsigned int* VirCqVa; // for debugging
    unsigned long tpipeTablePa;
    unsigned int *tpipeTableVa;
    unsigned int RingBufIdx;
    unsigned int burstCqIdx;
    unsigned int dupCqIdx;
    E_ISP_DIP_CQ cqIdx;                     //! index of pass2 cmdQ
    unsigned int frameflag;
    unsigned long smx1iPa;
    unsigned long smx2iPa;
    unsigned long smx3iPa;
    unsigned long smx4iPa;
    //ISP2MDP_STRUCT isp2mdpcfg;
    char* m_pMetLogBuf;
    unsigned int m_MetLogBufSize;
    unsigned int debugRegDump; // dump isp reg from GCE
    unsigned int framemode_total_in_w;  //total width of in-dma for frame mode only
    unsigned int framemode_total_out_w; //total width od out-dma for frame mode only
    unsigned int framemode_h;		//height for frame mode only
    unsigned int total_data_size;     // add for bandwidth
    unsigned int regCount;
    unsigned int ReadAddrList[MAX_READ_REG_NUM];
    unsigned long tpipeTablePa_wpe;
    unsigned int *tpipeTableVa_wpe;
    unsigned int dupCqIdx_wpe;
    unsigned int regCount_wpe;
    unsigned int ReadAddrList_wpe[MAX_READ_REG_NUM];
    unsigned int *wpecommand;
    // DIP settings for GCE cmd
    unsigned long cqSecHdl;
    unsigned long cqSecSize;
    unsigned long DesCqOft;
    unsigned long DesCqSize;
    unsigned long VirtRegPa;
    unsigned long VirtRegVa;
    unsigned long VirtRegOft;
    unsigned long tpipeTableSecHdl;
    unsigned long tpipeTableSecSize;
    unsigned long tpipeTableOft;
    unsigned long smxSecHdl;
    unsigned long smxSecSize;
    unsigned long smx1iOft;
    unsigned long smx2iOft;
    unsigned long smx3iOft;
    unsigned long smx4iOft;
    unsigned long dip_ctl_yuv_en;
    unsigned long dip_ctl_yuv2_en;
    unsigned long dip_ctl_rgb_en;
    unsigned long dip_ctl_rgb2_en;
    unsigned long dip_ctl_dma_en;
    unsigned long dip_ctl_fmt_sel;
    unsigned long dip_ctl_path_sel;
    unsigned long dip_ctl_misc_sel;
    unsigned long dip_img2o_base_addr;
    unsigned long dip_img2bo_base_addr;
    unsigned long dip_img3o_base_addr;
    unsigned long dip_img3bo_base_addr;
    unsigned long dip_img3co_base_addr;
    unsigned long dip_feo_base_addr;
    unsigned long dip_pak2o_base_addr;
    unsigned long dip_imgi_base_addr;
    unsigned long dip_imgbi_base_addr;
    unsigned long dip_imgci_base_addr;
    unsigned long dip_vipi_base_addr;
    unsigned long dip_vip2i_base_addr;
    unsigned long dip_vip3i_base_addr;
    unsigned long dip_dmgi_base_addr;
    unsigned long dip_depi_base_addr;
    unsigned long dip_lcei_base_addr;
    unsigned long dip_ufdi_base_addr;
    unsigned long dip_imgbi_base_vaddr;
    unsigned long dip_imgci_base_vaddr;
    unsigned long dip_dmgi_base_vaddr;
    unsigned long dip_depi_base_vaddr;
    unsigned long dip_lcei_base_vaddr;
    unsigned int dip_img2o_size[3];
    unsigned int dip_img3o_size[3];
    unsigned int dip_feo_size[3];
    unsigned int dip_pak2o_size[3];
    unsigned int dip_imgi_size[3];
    unsigned int dip_imgbi_size[3];
    unsigned int dip_imgci_size[3];
    unsigned int dip_vipi_size[3];
    unsigned int dip_dmgi_size[3];
    unsigned int dip_depi_size[3];
    unsigned int dip_lcei_size[3];
    unsigned int dip_ufdi_size[3];
    unsigned int dip_secure_tag;
    unsigned int dip_img2o_secure_tag;
    unsigned int dip_img2bo_secure_tag;
    unsigned int dip_img3o_secure_tag;
    unsigned int dip_img3bo_secure_tag;
    unsigned int dip_img3co_secure_tag;
    unsigned int dip_feo_secure_tag;
    unsigned int dip_pak2o_secure_tag;
    unsigned int dip_imgi_secure_tag;
    unsigned int dip_imgbi_secure_tag;
    unsigned int dip_imgci_secure_tag;
    unsigned int dip_vipi_secure_tag;
    unsigned int dip_vip2i_secure_tag;
    unsigned int dip_vip3i_secure_tag;
    unsigned int dip_dmgi_secure_tag;
    unsigned int dip_depi_secure_tag;
    unsigned int dip_lcei_secure_tag;
    unsigned int dip_ufdi_secure_tag;
	unsigned int wpe_secure_tag;
    unsigned int wpe_wpei_secure_tag;
    unsigned int wpe_wpeo_secure_tag;
	unsigned int wpe_msko_secure_tag;
	unsigned long wpe_wpei_base_addr;
	unsigned long wpe_wpeo_base_addr;
	unsigned long wpe_msko_base_addr;
	unsigned int wpe_wpei_size[3];
    unsigned int wpe_wpeo_size[3];
	unsigned int wpe_msko_size[3];
    unsigned long imgi_base_addr;
}ISP_DRIVER_CONFIG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_ADL_STRUCT
{
    int adl_ctl_en;
	int ipui_stride;
	int ipuo_stride;
}ISP_TPIPE_CONFIG_ADL_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGI_STRUCT
{
    int imgi_v_flip_en;
	int imgi_stride;
}ISP_TPIPE_CONFIG_IMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX1I_STRUCT
{
    int smx1i_v_flip_en;
	int smx1i_xsize;
    int smx1i_ysize;
}ISP_TPIPE_CONFIG_SMX1I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX2I_STRUCT
{
    int smx2i_v_flip_en;
	int smx2i_xsize;
    int smx2i_ysize;
}ISP_TPIPE_CONFIG_SMX2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX3I_STRUCT
{
    int smx3i_v_flip_en;
	int smx3i_xsize;
    int smx3i_ysize;
}ISP_TPIPE_CONFIG_SMX3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX4I_STRUCT
{
    int smx4i_v_flip_en;
	int smx4i_xsize;
    int smx4i_ysize;
}ISP_TPIPE_CONFIG_SMX4I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGBI_STRUCT
{
    int imgbi_v_flip_en;
	int imgbi_offset;
	int imgbi_stride;
	int imgbi_xsize;
	int imgbi_ysize;
}ISP_TPIPE_CONFIG_IMGBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMGCI_STRUCT
{
    int imgci_v_flip_en;
	int imgci_stride;
}ISP_TPIPE_CONFIG_IMGCI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFDI_STRUCT
{
    int ufdi_v_flip_en;
	int ufdi_xsize;
    int ufdi_ysize;
	int ufdi_stride;
}ISP_TPIPE_CONFIG_UFDI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BNR_STRUCT
{
    int bpc_en;
    int bpc_tbl_en;
}ISP_TPIPE_CONFIG_BNR_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LSC_STRUCT
{
    int extend_coef_mode;
	int sdblk_width;
    int sdblk_xnum;
    int sdblk_last_width;
    int sdblk_height;
    int sdblk_ynum;
    int sdblk_last_height;
}ISP_TPIPE_CONFIG_LSC_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2_STRUCT
{
    int sl2_hrz_comp;
    int sl2_vrz_comp;
}ISP_TPIPE_CONFIG_SL2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UDM_STRUCT
{
    int bayer_bypass;
}ISP_TPIPE_CONFIG_UDM_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIPI_STRUCT
{
    int vipi_v_flip_en;
	int vipi_xsize;
    int vipi_ysize;
    int vipi_stride;
}ISP_TPIPE_CONFIG_VIPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIP2I_STRUCT
{
    int vip2i_v_flip_en;
	int vip2i_xsize;
    int vip2i_ysize;
    int vip2i_stride;
}ISP_TPIPE_CONFIG_VIP2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VIP3I_STRUCT
{
    int vip3i_v_flip_en;
	int vip3i_xsize;
    int vip3i_ysize;
    int vip3i_stride;
}ISP_TPIPE_CONFIG_VIP3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_UFD_STRUCT
{
	int ufd_bs2_au_start;
	int ufd_bs3_au_start;
	int ufd_bond_mode;
	int ufd_bond2_mode;
	int ufd_sel;
}ISP_TPIPE_CONFIG_UFD_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFB_STRUCT
{
    int bld_deblock_en;
    int bld_brz_en;
	int bld_mbd_wt_en;
}ISP_TPIPE_CONFIG_MFB_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MFBO_STRUCT
{
    int pak2o_stride;
    int pak2o_xoffset;
    int pak2o_yoffset;
    int pak2o_xsize;
    int pak2o_ysize;
}ISP_TPIPE_CONFIG_PAK2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_G2C_STRUCT
{
    int g2c_shade_en;
	int g2c_shade_xmid;
	int g2c_shade_ymid;
	int g2c_shade_var;
}ISP_TPIPE_CONFIG_G2C_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2B_STRUCT
{
    int sl2b_hrz_comp;
    int sl2b_vrz_comp;
}ISP_TPIPE_CONFIG_SL2B_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NBC_STRUCT
{
    int anr_eny;
    int anr_enc;
    int anr_ltm_link;
}ISP_TPIPE_CONFIG_NBC_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NBC2_STRUCT
{
    int anr2_eny;
    int anr2_enc;
    int anr2_scale_mode;
	int anr2_mode;
	int anr2_bok_mode;
	int anr2_bok_pf_en;
	int abf_en;
}ISP_TPIPE_CONFIG_NBC2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2C_STRUCT
{
    int sl2c_hrz_comp;
    int sl2c_vrz_comp;
}ISP_TPIPE_CONFIG_SL2C_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2D_STRUCT
{
    int sl2d_hrz_comp;
    int sl2d_vrz_comp;
}ISP_TPIPE_CONFIG_SL2D_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2E_STRUCT
{
    int sl2e_hrz_comp;
    int sl2e_vrz_comp;
}ISP_TPIPE_CONFIG_SL2E_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2G_STRUCT
{
    int sl2g_hrz_comp;
    int sl2g_vrz_comp;
}ISP_TPIPE_CONFIG_SL2G_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2H_STRUCT
{
    int sl2h_hrz_comp;
    int sl2h_vrz_comp;
}ISP_TPIPE_CONFIG_SL2H_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SL2I_STRUCT
{
    int sl2i_hrz_comp;
    int sl2i_vrz_comp;
}ISP_TPIPE_CONFIG_SL2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_HFG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_HFG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NDG2_STRUCT
{
    int non_block_base;
}ISP_TPIPE_CONFIG_NDG2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SEEE_STRUCT
{
    int se_edge;
}ISP_TPIPE_CONFIG_SEEE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCEI_STRUCT
{
    int lcei_v_flip_en;
	int lcei_xsize;
    int lcei_ysize;
	int lcei_stride;
}ISP_TPIPE_CONFIG_LCEI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_LCE_STRUCT
{
    int lce_lc_tone;    
	int lce_bc_mag_kubnx;
    int lce_slm_width;
    int lce_bc_mag_kubny;
    int lce_slm_height;
	int lce_full_xoff;
	int lce_full_yoff;
	int lce_full_slm_width;
	int lce_full_slm_height;
	int lce_full_out_height;
}ISP_TPIPE_CONFIG_LCE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CDRZ_STRUCT
{
    int cdrz_input_crop_width;
    int cdrz_input_crop_height;
    int cdrz_output_width;
    int cdrz_output_height;
    int cdrz_luma_horizontal_integer_offset;/* pixel base */
    int cdrz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int cdrz_luma_vertical_integer_offset;/* pixel base */
    int cdrz_luma_vertical_subpixel_offset;/* 20 bits base */
    int cdrz_horizontal_luma_algorithm;
    int cdrz_vertical_luma_algorithm;
    int cdrz_horizontal_coeff_step;
    int cdrz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_CDRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG2O_STRUCT
{
    int img2o_stride;
    int img2o_xoffset;
    int img2o_yoffset;
    int img2o_xsize;
    int img2o_ysize;
}ISP_TPIPE_CONFIG_IMG2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG2BO_STRUCT
{
    int img2bo_stride;
    int img2bo_xoffset;
    int img2bo_yoffset;
    int img2bo_xsize;
    int img2bo_ysize;
}ISP_TPIPE_CONFIG_IMG2BO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SRZ_STRUCT
{
    int srz_input_crop_width;
    int srz_input_crop_height;
    int srz_output_width;
    int srz_output_height;
    int srz_luma_horizontal_integer_offset;/* pixel base */
    int srz_luma_horizontal_subpixel_offset;/* 20 bits base */
    int srz_luma_vertical_integer_offset;/* pixel base */
    int srz_luma_vertical_subpixel_offset;/* 20 bits base */
    int srz_horizontal_coeff_step;
    int srz_vertical_coeff_step;
}ISP_TPIPE_CONFIG_SRZ_STRUCT;

typedef struct ISP_TPIPE_CONFIG_FE_STRUCT
{
    int fe_mode;
}ISP_TPIPE_CONFIG_FE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_FEO_STRUCT
{
    int feo_stride;
}ISP_TPIPE_CONFIG_FEO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_NR3D_STRUCT
{
    int nr3d_on_en;
    int nr3d_on_xoffset;
    int nr3d_on_yoffset;
    int nr3d_on_width;
    int nr3d_on_height;
}ISP_TPIPE_CONFIG_NR3D_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRSP_STRUCT
{
    int crsp_ystep;
    int crsp_xoffset;
    int crsp_yoffset;
}ISP_TPIPE_CONFIG_CRSP_STRUCT;

typedef struct ISP_TPIPE_CONFIG_CRSPB_STRUCT
{
    int crspb_ystep;
    int crspb_xoffset;
    int crspb_yoffset;
}ISP_TPIPE_CONFIG_CRSPB_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3O_STRUCT
{
    int img3o_stride;
    int img3o_xoffset;
    int img3o_yoffset;
    int img3o_xsize;
    int img3o_ysize;
}ISP_TPIPE_CONFIG_IMG3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3BO_STRUCT
{
    int img3bo_stride;
    int img3bo_xsize;
    int img3bo_ysize;
}ISP_TPIPE_CONFIG_IMG3BO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_IMG3CO_STRUCT
{
    int img3co_stride;
    int img3co_xsize;
    int img3co_ysize;
}ISP_TPIPE_CONFIG_IMG3CO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DMGI_STRUCT
{
    int dmgi_v_flip_en;
	int dmgi_stride;
	int dmgi_offset;
	int dmgi_xsize;
	int dmgi_ysize;
}ISP_TPIPE_CONFIG_DMGI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_DEPI_STRUCT
{
    int depi_v_flip_en;
	int depi_stride;
	int depi_xsize;
	int depi_ysize;
}ISP_TPIPE_CONFIG_DEPI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_PCA_STRUCT
{
    int pca_cfc_en;
    int pca_cnv_en;
}ISP_TPIPE_CONFIG_PCA_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX1O_STRUCT
{
    int smx1o_xsize;
	int smx1o_ysize;
}ISP_TPIPE_CONFIG_SMX1O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX2O_STRUCT
{
    int smx2o_xsize;
	int smx2o_ysize;
}ISP_TPIPE_CONFIG_SMX2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX3O_STRUCT
{
    int smx3o_xsize;
	int smx3o_ysize;
}ISP_TPIPE_CONFIG_SMX3O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX4O_STRUCT
{
    int smx4o_xsize;
	int smx4o_ysize;
}ISP_TPIPE_CONFIG_SMX4O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_EAF_STRUCT
{
    int eaf_phase;
	int jbfr_ref_sel;
	int jbfr_ker_mode;
}ISP_TPIPE_CONFIG_EAF_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD_STRUCT
{
    int bld_deblock_en;
    int bld_brz_en;
	int bld_mbd_wt_en;
}ISP_TPIPE_CONFIG_BLD_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLDI_STRUCT
{
    int bldi_v_flip_en;
	int bldi_stride;
}ISP_TPIPE_CONFIG_BLDI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLDBI_STRUCT
{
    int bldbi_v_flip_en;
	int bldbi_stride;
}ISP_TPIPE_CONFIG_BLDBI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD2I_STRUCT
{
    int bld2i_v_flip_en;
	int bld2i_stride;
}ISP_TPIPE_CONFIG_BLD2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD2BI_STRUCT
{
    int bld2bi_v_flip_en;
	int bld2bi_stride;
}ISP_TPIPE_CONFIG_BLD2BI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD23_STRUCT
{
    int bld3i_v_flip_en;
	int bld3i_stride;
}ISP_TPIPE_CONFIG_BLD3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD4I_STRUCT
{
    int bld4i_v_flip_en;
	int bld4i_xsize;
    int bld4i_ysize;
	int bld4i_stride;
}ISP_TPIPE_CONFIG_BLD4I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLDO_STRUCT
{
    int bldo_stride;
    int bldo_xoffset;
    int bldo_yoffset;
    int bldo_xsize;
    int bldo_ysize;
}ISP_TPIPE_CONFIG_BLDO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLDBO_STRUCT
{
    int bldbo_stride;
}ISP_TPIPE_CONFIG_BLDBO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_BLD2O_STRUCT
{
    int bld2o_stride;
    int bld2o_xoffset;
    int bld2o_yoffset;
    int bld2o_xsize;
    int bld2o_ysize;
}ISP_TPIPE_CONFIG_BLD2O_STRUCT;

typedef struct ISP_TPIPE_CONFIG_EAFO_STRUCT
{
    int fout_stride;
    int fout_xoffset;
    int fout_yoffset;
    int fout_xsize;
    int fout_ysize;
}ISP_TPIPE_CONFIG_EAFO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_EAFI_STRUCT
{
	int mask_xsize;
    int mask_ysize;
	int mask_stride;
    int cur_y_xsize;
    int cur_y_ysize;
	int cur_y_stride;
	int cur_uv_stride;
	int pre_y_stride;
	int pre_uv_stride;
	int lkh_wmap_stride;
	int lkh_emap_stride;
	int depth_stride;
}ISP_TPIPE_CONFIG_EAFI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VECI_STRUCT
{
    int veci_v_flip_en;
	int veci_stride;
	int veci_xsize;
	int veci_ysize;
}ISP_TPIPE_CONFIG_VECI_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VEC2I_STRUCT
{
    int vec2i_v_flip_en;
	int vec2i_stride;
	int vec2i_xsize;
	int vec2i_ysize;
}ISP_TPIPE_CONFIG_VEC2I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_VEC3I_STRUCT
{
    int vec3i_v_flip_en;
	int vec3i_stride;
	int vec3i_xsize;
	int vec3i_ysize;
}ISP_TPIPE_CONFIG_VEC3I_STRUCT;

typedef struct ISP_TPIPE_CONFIG_WPE_STRUCT
{
    int vgen_input_crop_width;
    int vgen_input_crop_height;
    int vgen_output_width;
    int vgen_output_height;
    int vgen_luma_horizontal_integer_offset;/* pixel base */
    int vgen_luma_horizontal_subpixel_offset;/* 24 bits base */
    int vgen_luma_vertical_integer_offset;/* pixel base */
    int vgen_luma_vertical_subpixel_offset;/* 24 bits base */
    int vgen_horizontal_coeff_step;
    int vgen_vertical_coeff_step;
}ISP_TPIPE_CONFIG_WPE_STRUCT;

typedef struct ISP_TPIPE_CONFIG_WPEO_STRUCT
{
    int wpeo_stride;
    int wpeo_xoffset;
    int wpeo_yoffset;
    int wpeo_xsize;
    int wpeo_ysize;
}ISP_TPIPE_CONFIG_WPEO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_MSKO_STRUCT
{
    int msko_stride;
    int msko_xoffset;
    int msko_yoffset;
    int msko_xsize;
    int msko_ysize;
}ISP_TPIPE_CONFIG_MSKO_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX1_STRUCT
{
    int smx1o_sel;
}ISP_TPIPE_CONFIG_SMX1_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX2_STRUCT
{
    int smx2o_sel;
}ISP_TPIPE_CONFIG_SMX2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX3_STRUCT
{
    int smx3o_sel;
}ISP_TPIPE_CONFIG_SMX3_STRUCT;

typedef struct ISP_TPIPE_CONFIG_SMX4_STRUCT
{
    int smx4o_sel;
}ISP_TPIPE_CONFIG_SMX4_STRUCT;

typedef struct ISP_TPIPE_CONFIG_RMG_STRUCT
{
    int rmg_ihdr_en;
    int rmg_zhdr_en;
}ISP_TPIPE_CONFIG_RMG_STRUCT;

typedef enum TPIPE_Pass2CmdqNum_ENUM
{
	TPIPE_PASS2_CMDQ_NONE=0,
    TPIPE_PASS2_CMDQ_1,
    TPIPE_PASS2_CMDQ_2,
    TPIPE_PASS2_CMDQ_3,
  	TPIPE_PASS2_CMDQ_NUM
}TPIPE_Pass2CmdqNum_ENUM;

typedef enum TPIPE_Pass2CmdqPrior_ENUM
{
	TPIPE_PASS2_CMDQ_PRIOR_LOW=1,
    TPIPE_PASS2_CMDQ_PRIOR_HIGH = 10
}TPIPE_Pass2CmdqPrior_ENUM;

typedef struct ISP_TPIPE_CONFIG_PASS2_STRUCT
{
    E_ISP_DIP_CQ Pass2CmdqNum;
	//TPIPE_Pass2CmdqPrior_ENUM Pass2CmdqPriority;
}ISP_TPIPE_CONFIG_PASS2_STRUCT;

typedef struct ISP_TPIPE_CONFIG_STRUCT
{
    ISP_TPIPE_CONFIG_TOP_STRUCT top;
    ISP_TPIPE_CONFIG_TOP2_STRUCT top2;
    ISP_TPIPE_CONFIG_SW_STRUCT sw;
	ISP_TPIPE_CONFIG_UFD_STRUCT ufd;
    ISP_TPIPE_CONFIG_ADL_STRUCT adl;
    ISP_TPIPE_CONFIG_IMGI_STRUCT imgi;
    ISP_TPIPE_CONFIG_IMGBI_STRUCT imgbi;
    ISP_TPIPE_CONFIG_IMGCI_STRUCT imgci;
    ISP_TPIPE_CONFIG_UFDI_STRUCT ufdi;
    ISP_TPIPE_CONFIG_BNR_STRUCT bnr;
    ISP_TPIPE_CONFIG_RMG_STRUCT rmg;
    ISP_TPIPE_CONFIG_LSC_STRUCT lsc2;
    ISP_TPIPE_CONFIG_SL2_STRUCT sl2;
    ISP_TPIPE_CONFIG_UDM_STRUCT udm;
    ISP_TPIPE_CONFIG_VIPI_STRUCT vipi;
    ISP_TPIPE_CONFIG_VIP2I_STRUCT vip2i;
    ISP_TPIPE_CONFIG_VIP3I_STRUCT vip3i;
    ISP_TPIPE_CONFIG_MFB_STRUCT mfb;
    ISP_TPIPE_CONFIG_PAK2O_STRUCT pak2o;
    ISP_TPIPE_CONFIG_G2C_STRUCT g2c;
    ISP_TPIPE_CONFIG_SL2B_STRUCT sl2b;
    ISP_TPIPE_CONFIG_NBC_STRUCT nbc;
    ISP_TPIPE_CONFIG_NBC2_STRUCT nbc2;
    ISP_TPIPE_CONFIG_SL2C_STRUCT sl2c;
    ISP_TPIPE_CONFIG_SL2D_STRUCT sl2d;
    ISP_TPIPE_CONFIG_SL2E_STRUCT sl2e;
    ISP_TPIPE_CONFIG_SL2G_STRUCT sl2g;
    ISP_TPIPE_CONFIG_SL2H_STRUCT sl2h;
    ISP_TPIPE_CONFIG_SL2I_STRUCT sl2i;
    ISP_TPIPE_CONFIG_HFG_STRUCT hfg;
    ISP_TPIPE_CONFIG_NDG_STRUCT ndg;
    ISP_TPIPE_CONFIG_NDG2_STRUCT ndg2;
    ISP_TPIPE_CONFIG_SEEE_STRUCT seee;
    ISP_TPIPE_CONFIG_LCEI_STRUCT lcei;
    ISP_TPIPE_CONFIG_LCE_STRUCT lce;
    ISP_TPIPE_CONFIG_CDRZ_STRUCT cdrz;
    ISP_TPIPE_CONFIG_IMG2O_STRUCT img2o;
    ISP_TPIPE_CONFIG_IMG2BO_STRUCT img2bo;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz1;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz2;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz3;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz4;
    ISP_TPIPE_CONFIG_FE_STRUCT fe;
    ISP_TPIPE_CONFIG_FEO_STRUCT feo;
    ISP_TPIPE_CONFIG_NR3D_STRUCT nr3d;
	ISP_TPIPE_CONFIG_CRSP_STRUCT crsp;
    ISP_TPIPE_CONFIG_IMG3O_STRUCT img3o;
    ISP_TPIPE_CONFIG_IMG3BO_STRUCT img3bo;
    ISP_TPIPE_CONFIG_IMG3CO_STRUCT img3co;
    ISP_TPIPE_CONFIG_DMGI_STRUCT dmgi;
    ISP_TPIPE_CONFIG_DEPI_STRUCT depi;
    ISP_TPIPE_CONFIG_PCA_STRUCT pca;
    ISP_TPIPE_CONFIG_SMX1I_STRUCT smx1i;
    ISP_TPIPE_CONFIG_SMX1O_STRUCT smx1o;
    ISP_TPIPE_CONFIG_SMX2I_STRUCT smx2i;
    ISP_TPIPE_CONFIG_SMX2O_STRUCT smx2o;
    ISP_TPIPE_CONFIG_SMX3I_STRUCT smx3i;
    ISP_TPIPE_CONFIG_SMX3O_STRUCT smx3o;
    ISP_TPIPE_CONFIG_SMX4I_STRUCT smx4i;
    ISP_TPIPE_CONFIG_SMX4O_STRUCT smx4o;
    ISP_TPIPE_CONFIG_SRZ_STRUCT srz6;
    ISP_TPIPE_CONFIG_EAF_STRUCT eaf;
	ISP_TPIPE_CONFIG_EAFI_STRUCT eafi;
	ISP_TPIPE_CONFIG_EAFO_STRUCT eafo;
    ISP_TPIPE_CONFIG_BLDI_STRUCT bldi;
    ISP_TPIPE_CONFIG_BLDBI_STRUCT bldbi;
    ISP_TPIPE_CONFIG_BLD2I_STRUCT bld2i;
    ISP_TPIPE_CONFIG_BLD2BI_STRUCT bld2bi;
    ISP_TPIPE_CONFIG_BLD3I_STRUCT bld3i;
    ISP_TPIPE_CONFIG_BLD4I_STRUCT bld4i;
    ISP_TPIPE_CONFIG_BLD_STRUCT bld;
    ISP_TPIPE_CONFIG_BLDO_STRUCT bldo;
    ISP_TPIPE_CONFIG_BLDBO_STRUCT bldbo;
    ISP_TPIPE_CONFIG_BLD2O_STRUCT bld2o;
    ISP_TPIPE_CONFIG_SRZ_STRUCT mfb_srz;
	ISP_TPIPE_CONFIG_CRSPB_STRUCT crspb;
    ISP_TPIPE_CONFIG_VECI_STRUCT veci;
    ISP_TPIPE_CONFIG_VEC2I_STRUCT vec2i;
    ISP_TPIPE_CONFIG_VEC3I_STRUCT vec3i;
    ISP_TPIPE_CONFIG_WPE_STRUCT wpe;
    ISP_TPIPE_CONFIG_WPEO_STRUCT wpeo;
    ISP_TPIPE_CONFIG_MSKO_STRUCT msko;
	ISP_TPIPE_CONFIG_SMX1_STRUCT smx1;
	ISP_TPIPE_CONFIG_SMX2_STRUCT smx2;
	ISP_TPIPE_CONFIG_SMX3_STRUCT smx3;
	ISP_TPIPE_CONFIG_SMX4_STRUCT smx4;
	ISP_TPIPE_CONFIG_PASS2_STRUCT pass2;
	ISP_DRIVER_CONFIG_STRUCT drvinfo;
}ISP_TPIPE_CONFIG_STRUCT;

/* struct size must be x4 bytes */
typedef struct ISP_TPIPE_INFORMATION_STRUCT
{
    unsigned int tdr_disable_flag;/* tdr disable flag */
	unsigned int pos_xs;/* tpipe start */
    unsigned int pos_xe;/* tpipe end */
    unsigned int pos_ys;/* tpipe start */
    unsigned int pos_ye;/* tpipe end */
    unsigned int tpipe_stop_flag;/* stop flag */
    unsigned int dump_offset_no;/* word offset */
}ISP_TPIPE_INFORMATION_STRUCT;

typedef struct ISP_TPIPE_DESCRIPTOR_STRUCT
{
	unsigned int tpipe_sel_mode;
	unsigned int used_word_no;
    unsigned int total_word_no;
    unsigned int config_no_per_tpipe;
    unsigned int used_tpipe_no;
    unsigned int total_tpipe_no;
    unsigned int horizontal_tpipe_no;
    unsigned int curr_horizontal_tpipe_no;
    unsigned int curr_vertical_tpipe_no;
	unsigned int tpipe_sel;
    unsigned int *tdr_disable_flag;
    unsigned int *last_irq_flag;
    unsigned int *tpipe_config;
    unsigned int used_word_no_d;
    unsigned int used_tpipe_no_d;
	unsigned int tpipe_sel_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info;
    unsigned int *tpipe_config_d;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d;
	/* wpe */
	unsigned int config_no_per_tpipe_wpe;
	unsigned int tpipe_sel_wpe;
    unsigned int *tpipe_config_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_wpe;
	unsigned int used_word_no_wpe;
    unsigned int total_word_no_wpe;
	/* wpe_d */
	unsigned int tpipe_sel_wpe_d;
    unsigned int *tpipe_config_d_wpe;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_d_wpe;
	unsigned int used_word_no_d_wpe;
	/* wpe2 */
	unsigned int config_no_per_tpipe_wpe2;
	unsigned int tpipe_sel_wpe2;
    unsigned int *tpipe_config_wpe2;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_wpe2;
	unsigned int used_word_no_wpe2;
    unsigned int total_word_no_wpe2;
	/* eaf */
	unsigned int config_no_per_tpipe_eaf;
    unsigned int *tpipe_config_eaf;
	unsigned int tpipe_sel_eaf;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_eaf;
    unsigned int total_word_no_eaf;
	unsigned int used_word_no_eaf;
	/* bld */
	unsigned int config_no_per_tpipe_bld;
    unsigned int *tpipe_config_bld;
	unsigned int tpipe_sel_bld;
    ISP_TPIPE_INFORMATION_STRUCT *tpipe_info_bld;
    unsigned int total_word_no_bld;
	unsigned int used_word_no_bld;
}ISP_TPIPE_DESCRIPTOR_STRUCT;

extern int tpipe_main_query_platform_working_buffer_size(int tpipe_no);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_main_platform(const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config,
                ISP_TPIPE_DESCRIPTOR_STRUCT *ptr_isp_tpipe_descriptor,
                char *ptr_working_buffer, int buffer_size, void *ptr_dip_reg, void *ptr_wpe_reg, void *ptr_eaf_reg, void *ptr_bld_reg);
extern ISP_TPIPE_MESSAGE_ENUM tpipe_print_platform_config(
	const ISP_TPIPE_CONFIG_STRUCT *ptr_tpipe_config);
#endif
