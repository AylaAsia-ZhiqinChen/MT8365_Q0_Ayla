/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/
#ifndef _SENSOR_DRV_H
#define _SENSOR_DRV_H

#include <mtkcam/def/common.h>
#include "kd_imgsensor_define.h"
#include "kd_camera_feature.h"
#include <mtkcam/drv/IHalSensor.h>

/*******************************************************************************
*
********************************************************************************/

//////////////////////////////////////////////////////////////////////////
//
//  Sensor Feature
//
//////////////////////////////////////////////////////////////////////////
using namespace NSCam;


typedef enum {
    CMD_SENSOR_SET_SENSOR_EXP_TIME                      = SENSOR_CMD_SET_SENSOR_EXP_TIME,
    CMD_SENSOR_SET_SENSOR_EXP_LINE                      = SENSOR_CMD_SET_SENSOR_EXP_LINE,
    CMD_SENSOR_SET_SENSOR_GAIN                          = SENSOR_CMD_SET_SENSOR_GAIN,
    CMD_SENSOR_SET_SENSOR_DUAL_GAIN                     = SENSOR_CMD_SET_SENSOR_DUAL_GAIN,
    CMD_SENSOR_SET_FLICKER_FRAME_RATE                   = SENSOR_CMD_SET_FLICKER_FRAME_RATE,
    CMD_SENSOR_SET_VIDEO_FRAME_RATE                     = SENSOR_CMD_SET_VIDEO_FRAME_RATE,
    CMD_SENSOR_SET_AE_EXPOSURE_GAIN_SYNC                = SENSOR_CMD_SET_AE_EXPOSURE_GAIN_SYNC,
    CMD_SENSOR_SET_CCT_FEATURE_CONTROL                  = SENSOR_CMD_SET_CCT_FEATURE_CONTROL,
    CMD_SENSOR_SET_SENSOR_CALIBRATION_DATA              = SENSOR_CMD_SET_SENSOR_CALIBRATION_DATA,
    CMD_SENSOR_SET_MAX_FRAME_RATE_BY_SCENARIO           = SENSOR_CMD_SET_MAX_FRAME_RATE_BY_SCENARIO,
    CMD_SENSOR_SET_TEST_PATTERN_OUTPUT                  = SENSOR_CMD_SET_TEST_PATTERN_OUTPUT,
    CMD_SENSOR_SET_N3D_I2C_STREAM_REGDATA               = SENSOR_CMD_SET_N3D_I2C_STREAM_REGDATA,
    CMD_SENSOR_SET_N3D_START_STREAMING                  = SENSOR_CMD_SET_N3D_START_STREAMING,
    CMD_SENSOR_SET_N3D_STOP_STREAMING                   = SENSOR_CMD_SET_N3D_STOP_STREAMING,
    CMD_SENSOR_SET_ESHUTTER_GAIN                        = SENSOR_CMD_SET_SENSOR_ESHUTTER_GAIN,
    CMD_SENSOR_SET_OB_LOCK                              = SENSOR_CMD_SET_OB_LOCK,
    CMD_SNESOR_SET_SENSOR_OTP_AWB_CMD                   = SENSOR_CMD_SET_SENSOR_OTP_AWB_CMD,
    CMD_SNESOR_SET_SENSOR_OTP_LSC_CMD                   = SENSOR_CMD_SET_SENSOR_OTP_LSC_CMD,
    CMD_SENSOR_SET_SENSOR_EXP_FRAME_TIME                = SENSOR_CMD_SET_SENSOR_EXP_FRAME_TIME,
    CMD_SENSOR_SET_SENSOR_EXP_LINE_BUF_MODE             = SENSOR_CMD_SET_SENSOR_EXP_LINE_BUF_MODE,
    CMD_SENSOR_SET_SENSOR_EXP_TIME_BUF_MODE             = SENSOR_CMD_SET_SENSOR_EXP_TIME_BUF_MODE,
    CMD_SENSOR_SET_SENSOR_GAIN_BUF_MODE                 = SENSOR_CMD_SET_SENSOR_GAIN_BUF_MODE,
    CMD_SENSOR_SET_I2C_BUF_MODE_EN                      = SENSOR_CMD_SET_I2C_BUF_MODE_EN,
    CMD_SENSOR_SET_STREAMING_SUSPEND                    = SENSOR_CMD_SET_STREAMING_SUSPEND,
    CMD_SENSOR_SET_STREAMING_RESUME                     = SENSOR_CMD_SET_STREAMING_RESUME,
    CMD_SENSOR_GET_UNSTABLE_DELAY_FRAME_CNT             = SENSOR_CMD_GET_UNSTABLE_DELAY_FRAME_CNT,
    CMD_SENSOR_GET_PIXEL_CLOCK_FREQ                     = SENSOR_CMD_GET_PIXEL_CLOCK_FREQ,
    CMD_SENSOR_GET_FRAME_SYNC_PIXEL_LINE_NUM            = SENSOR_CMD_GET_FRAME_SYNC_PIXEL_LINE_NUM,
    CMD_SENSOR_GET_SENSOR_FEATURE_INFO                  = SENSOR_CMD_GET_SENSOR_FEATURE_INFO,
    CMD_SENSOR_GET_DEFAULT_FRAME_RATE_BY_SCENARIO       = SENSOR_CMD_GET_DEFAULT_FRAME_RATE_BY_SCENARIO,
    CMD_SENSOR_GET_TEST_PATTERN_CHECKSUM_VALUE          = SENSOR_CMD_GET_TEST_PATTERN_CHECKSUM_VALUE,
    CMD_SENSOR_GET_TEMPERATURE_VALUE                    = SENSOR_CMD_GET_TEMPERATURE_VALUE,
    CMD_SENSOR_GET_SENSOR_CROP_WIN_INFO                 = SENSOR_CMD_GET_SENSOR_CROP_WIN_INFO,
    CMD_SENSOR_GET_SENSOR_VC_INFO                       = SENSOR_CMD_GET_SENSOR_VC_INFO,
    CMD_SENSOR_GET_SENSOR_PDAF_INFO                     = SENSOR_CMD_GET_SENSOR_PDAF_INFO,
    CMD_SENSOR_GET_SENSOR_N3D_STREAM_TO_VSYNC_TIME      = SENSOR_CMD_GET_SENSOR_N3D_STREAM_TO_VSYNC_TIME,
    CMD_SENSOR_SET_YUV_FEATURE_CMD                      = SENSOR_CMD_SET_YUV_FEATURE_CMD,
    CMD_SENSOR_SET_YUV_SINGLE_FOCUS_MODE                = SENSOR_CMD_SET_YUV_SINGLE_FOCUS_MODE,
    CMD_SENSOR_SET_YUV_CANCEL_AF                        = SENSOR_CMD_SET_YUV_CANCEL_AF,
    CMD_SENSOR_SET_YUV_CONSTANT_AF                      = SENSOR_CMD_SET_YUV_CONSTANT_AF,
    CMD_SENSOR_SET_YUV_INFINITY_AF                      = SENSOR_CMD_SET_YUV_INFINITY_AF,
    CMD_SENSOR_SET_YUV_AF_WINDOW                        = SENSOR_CMD_SET_YUV_AF_WINDOW,
    CMD_SENSOR_SET_YUV_AE_WINDOW                        = SENSOR_CMD_SET_YUV_AE_WINDOW,
    CMD_SENSOR_SET_YUV_GAIN_AND_EXP_LINE                = SENSOR_CMD_SET_YUV_GAIN_AND_EXP_LINE,
    CMD_SENSOR_SET_YUV_3A_CMD                           = SENSOR_CMD_SET_YUV_3A_CMD,
    CMD_SENSOR_GET_YUV_AF_STATUS                        = SENSOR_CMD_GET_YUV_AF_STATUS,
    CMD_SENSOR_GET_YUV_AE_STATUS                        = SENSOR_CMD_GET_YUV_AE_STATUS,
    CMD_SENSOR_GET_YUV_AWB_STATUS                       = SENSOR_CMD_GET_YUV_AWB_STATUS,
    CMD_SENSOR_GET_YUV_EV_INFO_AWB_REF_GAIN             = SENSOR_CMD_GET_YUV_EV_INFO_AWB_REF_GAIN,
    CMD_SENSOR_GET_YUV_CURRENT_SHUTTER_GAIN_AWB_GAIN    = SENSOR_CMD_GET_YUV_CURRENT_SHUTTER_GAIN_AWB_GAIN,
    CMD_SENSOR_GET_YUV_AF_MAX_NUM_FOCUS_AREAS           = SENSOR_CMD_GET_YUV_AF_MAX_NUM_FOCUS_AREAS,
    CMD_SENSOR_GET_YUV_AE_MAX_NUM_METERING_AREAS        = SENSOR_CMD_GET_YUV_AE_MAX_NUM_METERING_AREAS,
    CMD_SENSOR_GET_YUV_EXIF_INFO                        = SENSOR_CMD_GET_YUV_EXIF_INFO,
    CMD_SENSOR_GET_YUV_DELAY_INFO                       = SENSOR_CMD_GET_YUV_DELAY_INFO,
    CMD_SENSOR_GET_YUV_AE_AWB_LOCK_INFO                 = SENSOR_CMD_GET_YUV_AE_AWB_LOCK,
    CMD_SENSOR_GET_YUV_AE_FLASHLIGHT_INFO               = SENSOR_CMD_GET_YUV_STROBE_INFO,
    CMD_SENSOR_GET_YUV_TRIGGER_FLASHLIGHT_INFO          = SENSOR_CMD_GET_YUV_TRIGGER_FLASHLIGHT_INFO,
    CMD_SENSOR_SET_YUV_AUTOTEST                         = SENSOR_CMD_SET_YUV_AUTOTEST,
    CMD_SENSOR_SET_IHDR_SHUTTER_GAIN                    = SENSOR_CMD_SET_SENSOR_HDR_SHUTTER_GAIN,
    CMD_SENSOR_SET_HDR_SHUTTER                          = SENSOR_CMD_SET_SENSOR_HDR_SHUTTER,
    CMD_SENSOR_SET_SENSOR_AWB_GAIN                      = SENSOR_CMD_SET_SENSOR_HDR_AWB_GAIN,
    CMD_SENSOR_GET_PDAF_DATA                            = SENSOR_CMD_GET_PDAF_DATA,
    CMD_SET_PDFOCUS_AREA                                = SENSOR_CMD_SET_PDFOCUS_AREA,
    CMD_SENSOR_SET_SENSOR_ISO                           = SENSOR_CMD_SET_SENSOR_ISO,
    CMD_SENSOR_GET_SENSOR_PDAF_CAPACITY                 = SENSOR_CMD_GET_SENSOR_PDAF_CAPACITY,
    CMD_SENSOR_GET_SENSOR_HDR_CAPACITY                  = SENSOR_CMD_GET_SENSOR_HDR_CAPACITY,
    CMD_SENSOR_GET_SENSOR_PDAF_REG_SETTING              = SENSOR_CMD_GET_SENSOR_PDAF_REG_SETTING,
    CMD_SENSOR_SET_SENSOR_PDAF_REG_SETTING              = SENSOR_CMD_SET_SENSOR_PDAF_REG_SETTING,
    CMD_SENSOR_GET_4CELL_DATA                           = SENSOR_CMD_GET_4CELL_SENSOR,
    CMD_SENSOR_GET_SENSOR_SYNC_MODE_CAPACITY            = SENSOR_CMD_GET_SENSOR_SYNC_MODE_CAPACITY,
    CMD_SENSOR_GET_SENSOR_SYNC_MODE                     = SENSOR_CMD_GET_SENSOR_SYNC_MODE,
    CMD_SENSOR_SET_SENSOR_SYNC_MODE                     = SENSOR_CMD_SET_SENSOR_SYNC_MODE,
    CMD_SENSOR_GET_MIPI_PIXEL_RATE                      = SENSOR_CMD_GET_MIPI_PIXEL_RATE,
    CMD_SENSOR_GET_PIXEL_RATE                           = SENSOR_CMD_GET_PIXEL_RATE,
    CMD_SENSOR_GET_AE_EFFECTIVE_FRAME_FOR_LE            = SENSOR_CMD_GET_AE_EFFECTIVE_FRAME_FOR_LE,
    CMD_SENSOR_GET_AE_FRAME_MODE_FOR_LE                 = SENSOR_CMD_GET_AE_FRAME_MODE_FOR_LE,


    CMD_SENSOR_GET_INPUT_BIT_ORDER                      = 0x5000,
    CMD_SENSOR_GET_PAD_PCLK_INV,
    CMD_SENSOR_GET_SENSOR_ORIENTATION_ANGLE,
    CMD_SENSOR_GET_SENSOR_FACING_DIRECTION,
    CMD_SENSOR_GET_FAKE_ORIENTATION,
    CMD_SENSOR_GET_SENSOR_VIEWANGLE,
    CMD_SENSOR_GET_MCLK_CONNECTION,
    CMD_SENSOR_GET_MIPI_SENSOR_PORT,
    CMD_SENSOR_GET_OFFSET_TO_START_OF_EXPOSURE,
    CMD_SENSOR_SET_DRIVE_CURRENT,

    CMD_SENSOR_MAX                 = 0xFFFF
} CMD_SENSOR_ENUM;

//HDR
typedef enum {
    WAIT_SENSOR_SET_SHUTTER_GAIN_DONE = 0x0,
    WAIT_SENSOR_EVENT_MAX = 0xFFFF
}WAIT_SENSOR_EVENT_ENUM;

/*******************************************************************************
*
********************************************************************************/
typedef enum {
    IMAGE_SENSOR_TYPE_RAW,
    IMAGE_SENSOR_TYPE_YUV,
    IMAGE_SENSOR_TYPE_YCBCR,
    IMAGE_SENSOR_TYPE_RGB565,
    IMAGE_SENSOR_TYPE_RGB888,
    IMAGE_SENSOR_TYPE_JPEG,
    IMAGE_SENSOR_TYPE_RAW8,
    IMAGE_SENSOR_TYPE_RAW12,
    IMAGE_SENSOR_TYPE_RAW14,
    IMAGE_SENSOR_TYPE_UNKNOWN = 0xFFFF,
} IMAGE_SENSOR_TYPE;

typedef enum {
    SENSOR_NO_ERROR         = 0,            ///< The function work successfully
    SENSOR_ALREADY_SEARCH,
    SENSOR_UNKNOWN_ERROR    = 0x80000000,   ///< Unknown error
    SENSOR_INVALID_DRIVER   = 0x80000001,
    SENSOR_NO_SENSOR        = 0x80000002,
    SENSOR_INVALID_SENSOR   = 0x80000003,
    SENSOR_INVALID_PARA     = 0x80000004,
} SENSOR_ERROR_ENUM;

typedef enum {
    SENSOR_SOCKET_1 = 0,
    SENSOR_SOCKET_2 = 1,
    SENSOR_SOCKET_NONE = 0xFF,
}SENSOR_SOCKET_ENUM;

typedef struct
{
    MINT32              sensorID;
    MUINT8              index;
    IMAGE_SENSOR_TYPE   type;
    MUINT32             number;
    MUINT32             position;
    MUINT8              firstRawIndex;
    MUINT8              firstYuvIndex;
} SENSOR_DRIVER_LIST_T, *PSENSOR_DRIVER_LIST_T;

typedef struct
{
    MUINT32         sId;
    MUINT32         InitFPS;
    MUINT32         HDRMode;
    MUINT32         PDAFMode;
} SENSOR_DRIVER_SCENARIO_T, *PSENSOR_DRIVER_SCENARIO_T;

typedef struct
{
    ACDK_SENSOR_INFO2_STRUCT   info;
    ACDK_SENSOR_CONFIG_STRUCT config;
    ACDK_SENSOR_RESOLUTION_INFO_STRUCT resolutionInfo;
} SENSORDRV_INFO_STRUCT, *PSENSORDRV_INFO_STRUCT;

/*******************************************************************************
*
********************************************************************************/
namespace NSFeature
{
    class SensorInfoBase;
};  //NSFeature

class SensorDrv {
public:
    static SensorDrv* get();

protected:
    virtual ~SensorDrv() {};

public:
    virtual MINT32 init() = 0;
    virtual MINT32 uninit() = 0;
    virtual MINT32 open(IMGSENSOR_SENSOR_IDX sensorIdx) = 0;
    virtual MINT32 close(IMGSENSOR_SENSOR_IDX sensorIdx)= 0;

    virtual MINT32 setScenario(IMGSENSOR_SENSOR_IDX sensorDevId, SENSOR_DRIVER_SCENARIO_T scenarioconf) = 0;

    virtual MINT32 getInfo(IMGSENSOR_SENSOR_IDX sensorDevId, MUINT32 ScenarioId,ACDK_SENSOR_INFO_STRUCT *pSensorInfo,ACDK_SENSOR_CONFIG_STRUCT *pSensorConfigData) = 0;

    virtual MINT32 getInfo2(IMGSENSOR_SENSOR_IDX sensorDevId, SENSORDRV_INFO_STRUCT *pSensorInfo) = 0;

    virtual MINT32 sendCommand(IMGSENSOR_SENSOR_IDX sensorDevId, MUINT32 cmd, MUINTPTR parg1 = 0, MUINTPTR parg2 = 0, MUINTPTR parg3 = 0) = 0;

    virtual MUINT32 getSensorID(IMGSENSOR_SENSOR_IDX sensorDevId) = 0;
    virtual IMAGE_SENSOR_TYPE getCurrentSensorType(IMGSENSOR_SENSOR_IDX sensorDevId) = 0;
    virtual NSFeature::SensorInfoBase*  getSensorInfo(IMGSENSOR_SENSOR_IDX sensorDevId) = 0;

//protected:
    virtual MINT32 searchSensor(IMGSENSOR_SENSOR_IDX SensorEnum) = 0;
};

/*******************************************************************************
*
********************************************************************************/

#endif // _SENSOR_DRV_H
