/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/
#ifndef _ISP_MGR_HELPER_H_
#define _ISP_MGR_HELPER_H_


namespace NSIspTuning
{


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
template <class T>
struct ISPType2Type;

#define BIND_ISP_TYPES(FROM_T, TO_T)\
    template <> struct ISPType2Type<FROM_T> { typedef TO_T type; }


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

BIND_ISP_TYPES(ISP_NVRAM_FRZ_T,    ISP_MGR_FRZ_T);
BIND_ISP_TYPES(ISP_NVRAM_RRZ_T,    ISP_MGR_RRZ_T);

//OBC
BIND_ISP_TYPES(ISP_NVRAM_OBC_T,     ISP_MGR_OBC_T);
//BPC
BIND_ISP_TYPES(ISP_NVRAM_BPC_BPC_T, ISP_MGR_BPC_T);
BIND_ISP_TYPES(ISP_NVRAM_BPC_CT_T,  ISP_MGR_BPC_T);
BIND_ISP_TYPES(ISP_NVRAM_BPC_PDC_T, ISP_MGR_BPC_T);
//DGN
BIND_ISP_TYPES(ISP_NVRAM_DGN_T,     ISP_MGR_DGN_T);
//WB
BIND_ISP_TYPES(ISP_NVRAM_WB_T,      ISP_MGR_WB_T);
//HLR
BIND_ISP_TYPES(ISP_NVRAM_HLR_T,     ISP_MGR_HLR_T);
//LTM
BIND_ISP_TYPES(ISP_NVRAM_LTMS_T,    ISP_MGR_LTMS_T);
BIND_ISP_TYPES(ISP_NVRAM_LTM_T,     ISP_MGR_LTM_T);
//LCE
//BIND_ISP_TYPES(ISP_NVRAM_LCES_T,    ISP_MGR_LCES_T);
BIND_ISP_TYPES(ISP_NVRAM_LCE_T,     ISP_MGR_LCE_T);
//SLK
BIND_ISP_TYPES(ISP_NVRAM_SLK_T,     ISP_MGR_SLK_T);
//FLC
BIND_ISP_TYPES(ISP_NVRAM_FLC_T,     ISP_MGR_FLC_T);
//GGM
BIND_ISP_TYPES(ISP_NVRAM_GGM_T,     ISP_MGR_GGM_T);
BIND_ISP_TYPES(ISP_NVRAM_IGGM_T,    ISP_MGR_IGGM_T);
//C2G
BIND_ISP_TYPES(ISP_NVRAM_C2G_T,     ISP_MGR_C2G_T);

//G2C
BIND_ISP_TYPES(ISP_NVRAM_G2C_T,     ISP_MGR_G2C_T);
BIND_ISP_TYPES(ISP_NVRAM_G2CX_T,    ISP_MGR_G2CX_T);
//BIND_ISP_TYPES(ISP_NVRAM_G2CX_SHADE_T,    ISP_MGR_G2CX_T);

//NDG
//BIND_ISP_TYPES(ISP_NVRAM_NDG_T,     ISP_MGR_NDG_T);
//YNR
BIND_ISP_TYPES(ISP_NVRAM_YNR_T,     ISP_MGR_YNR_T);
BIND_ISP_TYPES(ISP_NVRAM_YNR_LUT_T, ISP_MGR_YNR_T);
//DCE
//BIND_ISP_TYPES(ISP_NVRAM_DCES_T,    ISP_MGR_DCES_T);
BIND_ISP_TYPES(ISP_NVRAM_DCE_T,     ISP_MGR_DCE_T);
//EE
BIND_ISP_TYPES(ISP_NVRAM_EE_T,      ISP_MGR_EE_T);
//BIND_ISP_TYPES(ISP_NVRAM_EE_EFFECT_T,    ISP_MGR_EE_T);
//CNR
BIND_ISP_TYPES(ISP_NVRAM_CNR_CNR_T, ISP_MGR_CNR_T);
BIND_ISP_TYPES(ISP_NVRAM_CNR_CCR_T, ISP_MGR_CNR_T);
BIND_ISP_TYPES(ISP_NVRAM_CNR_ABF_T, ISP_MGR_CNR_T);
//BIND_ISP_TYPES(ISP_NVRAM_CNR_BOK_T, ISP_MGR_CNR_T);
//LDNR
BIND_ISP_TYPES(ISP_NVRAM_LDNR_T,    ISP_MGR_LDNR_T);
//NR3D
BIND_ISP_TYPES(ISP_NVRAM_NR3D_T,    ISP_MGR_NR3D_T);
//COLOR
BIND_ISP_TYPES(ISP_NVRAM_COLOR_T,   ISP_MGR_COLOR_T);
//LPCNR
BIND_ISP_TYPES(ISP_NVRAM_LPCNR_T,   ISP_MGR_LPCNR_T);
//CCM
BIND_ISP_TYPES(ISP_NVRAM_CCM_T,     ISP_MGR_CCM_T);
//DM
BIND_ISP_TYPES(ISP_NVRAM_DM_T,      ISP_MGR_DM_T);
//MFB
BIND_ISP_TYPES(ISP_NVRAM_MFB_T,     ISP_MGR_MFB_T);
//MIX
BIND_ISP_TYPES(ISP_NVRAM_MIX_T,     ISP_MGR_MIX_T);
//FUS
//BIND_ISP_TYPES(ISP_NVRAM_FUS_T,     ISP_MGR_FUS_T);
//ZFUS
//BIND_ISP_TYPES(ISP_NVRAM_ZFUS_T,    ISP_MGR_ZFUS_T);

//TOP CTL
BIND_ISP_TYPES(ISP_NVRAM_CAMCTL_T, ISP_MGR_CAMCTL_T);
BIND_ISP_TYPES(ISP_NVRAM_DIPCTL_T, ISP_MGR_DIPCTL_T);


BIND_ISP_TYPES(ISP_NVRAM_LSC_T,    ISP_MGR_LSC_T);
BIND_ISP_TYPES(ISP_NVRAM_MSF_T,    ISP_MGR_MSF_T);
BIND_ISP_TYPES(ISP_NVRAM_OMC_T,    ISP_MGR_OMC_T);


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
template <class ISP_XXX_T>
MVOID
getIspHWArray(ESensorDev_T const eSensorDev, ISP_XXX_T& rParam)
{
    typedef typename ISPType2Type<ISP_XXX_T>::type ISP_MGR_T;
    ISP_MGR_T::getInstance(eSensorDev).get(rParam);
}

template <class ISP_XXX_T>
MVOID
putIspHWArray(ESensorDev_T const eSensorDev, ISP_XXX_T const& rParam)
{
    typedef typename ISPType2Type<ISP_XXX_T>::type ISP_MGR_T;
    ISP_MGR_T::getInstance(eSensorDev).put(rParam);
}

};  //  NSIspTuning
#endif // _ISP_MGR_HELPER_H_

