/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

/********************************************************************************************
 *     LEGAL DISCLAIMER
 *
 *     (Header of MediaTek Software/Firmware Release or Documentation)
 *
 *     BY OPENING OR USING THIS FILE, BUYER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 *     THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE") RECEIVED
 *     FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO BUYER ON AN "AS-IS" BASIS
 *     ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES, EXPRESS OR IMPLIED,
 *     INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR
 *     A PARTICULAR PURPOSE OR NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY
 *     WHATSOEVER WITH RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 *     INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND BUYER AGREES TO LOOK
 *     ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. MEDIATEK SHALL ALSO
 *     NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE RELEASES MADE TO BUYER'S SPECIFICATION
 *     OR TO CONFORM TO A PARTICULAR STANDARD OR OPEN FORUM.
 *
 *     BUYER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND CUMULATIVE LIABILITY WITH
 *     RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION,
 *     TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE
 *     FEES OR SERVICE CHARGE PAID BY BUYER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 *     THE TRANSACTION CONTEMPLATED HEREUNDER SHALL BE CONSTRUED IN ACCORDANCE WITH THE LAWS
 *     OF THE STATE OF CALIFORNIA, USA, EXCLUDING ITS CONFLICT OF LAWS PRINCIPLES.
 ************************************************************************************************/
#ifndef _ISP_MGR_MSF_H_
#define _ISP_MGR_MSF_H_

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// MSF
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define INIT_MSF_ADDR(reg)\
    INIT_REG_INFO_ADDR_MFB_MULTI(EMSF_D1, reg, MFB_D1A_MSF_MSF_);\

typedef class ISP_MGR_MSF : public ISP_MGR_BASE_T
{
    typedef ISP_MGR_MSF    MyType;
public:
    enum
    {
        EMSF_D1,
        ESubModule_NUM
    };
private:
    MBOOL m_bEnable[ESubModule_NUM];
    MBOOL m_bCCTEnable;

    enum
    {
        ERegInfo_TOP_CTRL,
        ERegInfo_MULTISCALE_ROLLING,
        ERegInfo_TNR_STR_Y,
        ERegInfo_TNR_STR_UV,
        ERegInfo_FREQUENCY_DIFFERENCE,
        ERegInfo_FREQUENCY_NES,
        ERegInfo_FREQUENCY_BANDPASS_FILTER0,
        ERegInfo_FREQUENCY_BANDPASS_FILTER1,
        ERegInfo_GRADIENT_DIFFERENCE0,
        ERegInfo_GRADIENT_DIFFERENCE1,
        ERegInfo_GRADIENT_NES,
        ERegInfo_MEAN_SMOOTH_THD0,
        ERegInfo_MEAN_SMOOTH_THD1,
        ERegInfo_MEAN_SMOOTH_WGT0,
        ERegInfo_MEAN_SMOOTH_SLP0,
        ERegInfo_MEAN_DIFFERENCE0,
        ERegInfo_MEAN_DIFFERENCE1,
        ERegInfo_MEAN_DIFFERENCE2,
        ERegInfo_MEAN_NES,
        ERegInfo_GRADIENT_SMOOTH_THD0,
        ERegInfo_GRADIENT_SMOOTH_THD1,
        ERegInfo_GRADIENT_SMOOTH_WGT0,
        ERegInfo_GRADIENT_SMOOTH_SLP0,
        ERegInfo_RESIDUE_DIFFERENCE0,
        ERegInfo_RESIDUE_DIFFERENCE1,
        ERegInfo_RESI_Y_SMOOTH_THD0,
        ERegInfo_RESI_Y_SMOOTH_THD1,
        ERegInfo_RESI_Y_SMOOTH_WGT0,
        ERegInfo_RESI_Y_SMOOTH_SLP0,
        ERegInfo_RESI_UV_SMOOTH_THD0,
        ERegInfo_RESI_UV_SMOOTH_THD1,
        ERegInfo_RESI_UV_SMOOTH_WGT0,
        ERegInfo_RESI_UV_SMOOTH_SLP0,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT0,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT1,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT2,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT3,
        ERegInfo_GLOBAL_FREQUENCY_ANALYSIS0,
        ERegInfo_GLOBAL_FREQUENCY_ANALYSIS1,
        ERegInfo_GLOBAL_FREQUENCY_ANALYSIS2,
        ERegInfo_GLOBAL_FREQUENCY_ANALYSIS3,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT4,
        ERegInfo_GLOBAL_FREQUENCY_COEFFICIENT5,
        ERegInfo_GLOBAL_FREQUENCY_STATISTICS0,
        ERegInfo_EDGE_CONFIDENCE0,
        ERegInfo_EDGE_CONFIDENCE1,
        ERegInfo_EDGE_CONFIDENCE2,
        ERegInfo_EDGE_CONFIDENCE3,
        ERegInfo_EDGE_CONFIDENCE4,
        ERegInfo_BLENDING_CONTROL0,
        ERegInfo_BLENDING_CONTROL1,
        ERegInfo_BLENDING_CONTROL2,
        ERegInfo_BLENDING_CONTROL3,
        ERegInfo_BLENDING_CONTROL4,
        ERegInfo_BLENDING_CONTROL5,
        ERegInfo_BLENDING_CONTROL6,
        ERegInfo_BLENDING_CONTROL7,
        ERegInfo_CONFIDENCE_ACCUMULATION,
        ERegInfo_AGGRESSIVE_BLENDING0,
        ERegInfo_AGGRESSIVE_BLENDING1,
        ERegInfo_LUMINANCE_CONTROL0,
        ERegInfo_LUMINANCE_CONTROL1,
        ERegInfo_LUMINANCE_CONTROL2,
        ERegInfo_LUMINANCE_CONTROL3,
        ERegInfo_SHADING_LINK0,
        ERegInfo_SHADING_LINK1,
        ERegInfo_NOISE_LEVEL_STATISTICS0,
        ERegInfo_NOISE_LEVEL_STATISTICS1,
        ERegInfo_BACKGROUND_PROTECTION0,
        ERegInfo_BACKGROUND_PROTECTION1,
        ERegInfo_VALID_BIT_ADJUSTMENT,
        ERegInfo_NON_LOCAL_MEANS_FILTERING0,
        ERegInfo_NON_LOCAL_MEANS_FILTERING1,
        ERegInfo_NON_LOCAL_MEANS_FILTERING2,
        ERegInfo_NON_LOCAL_MEANS_FILTERING3,
        ERegInfo_HIGH_FREQUENCY_ENHANCEMENT0,
        ERegInfo_HIGH_FREQUENCY_ENHANCEMENT1,
        ERegInfo_HIGH_FREQUENCY_ENHANCEMENT2,
        ERegInfo_HFE_NES0,
        ERegInfo_HFE_NES1,
        ERegInfo_TEMPORAL,
        ERegInfo_SPATIAL,
        ERegInfo_HDR_FUSION_0,
        ERegInfo_HDR_FUSION_1,
        ERegInfo_SYN_FILTER0,
        ERegInfo_SYN_FILTER1,
        ERegInfo_SYN_FILTER2,
        ERegInfo_SYN_DENOISE_AND_DIFF,
        ERegInfo_SYN_CONF0,
        ERegInfo_SYN_CONF1,
        ERegInfo_SYN_PRIOR0,
        ERegInfo_SYN_PRIOR1,
        ERegInfo_SYN_GENERAL,
        ERegInfo_NUM
    };

    RegInfo_T m_rIspRegInfo[ESubModule_NUM][ERegInfo_NUM];

protected:
    ISP_MGR_MSF(ESensorDev_T const eSensorDev)
        : ISP_MGR_BASE_T(m_rIspRegInfo, ERegInfo_NUM, eSensorDev, ESubModule_NUM)
        , m_bCCTEnable(MTRUE)
    {
        for(int i=0; i<ESubModule_NUM; i++){
			m_bEnable[i] = MFALSE;
            ::memset(m_rIspRegInfo[i], 0, sizeof(RegInfo_T)*ERegInfo_NUM);
        }
        INIT_MSF_ADDR(TOP_CTRL);
        INIT_MSF_ADDR(MULTISCALE_ROLLING);
        INIT_MSF_ADDR(TNR_STR_Y);
        INIT_MSF_ADDR(TNR_STR_UV);
        INIT_MSF_ADDR(FREQUENCY_DIFFERENCE);
        INIT_MSF_ADDR(FREQUENCY_NES);
        INIT_MSF_ADDR(FREQUENCY_BANDPASS_FILTER0);
        INIT_MSF_ADDR(FREQUENCY_BANDPASS_FILTER1);
        INIT_MSF_ADDR(GRADIENT_DIFFERENCE0);
        INIT_MSF_ADDR(GRADIENT_DIFFERENCE1);
        INIT_MSF_ADDR(GRADIENT_NES);
        INIT_MSF_ADDR(MEAN_SMOOTH_THD0);
        INIT_MSF_ADDR(MEAN_SMOOTH_THD1);
        INIT_MSF_ADDR(MEAN_SMOOTH_WGT0);
        INIT_MSF_ADDR(MEAN_SMOOTH_SLP0);
        INIT_MSF_ADDR(MEAN_DIFFERENCE0);
        INIT_MSF_ADDR(MEAN_DIFFERENCE1);
        INIT_MSF_ADDR(MEAN_DIFFERENCE2);
        INIT_MSF_ADDR(MEAN_NES);
        INIT_MSF_ADDR(GRADIENT_SMOOTH_THD0);
        INIT_MSF_ADDR(GRADIENT_SMOOTH_THD1);
        INIT_MSF_ADDR(GRADIENT_SMOOTH_WGT0);
        INIT_MSF_ADDR(GRADIENT_SMOOTH_SLP0);
        INIT_MSF_ADDR(RESIDUE_DIFFERENCE0);
        INIT_MSF_ADDR(RESIDUE_DIFFERENCE1);
        INIT_MSF_ADDR(RESI_Y_SMOOTH_THD0);
        INIT_MSF_ADDR(RESI_Y_SMOOTH_THD1);
        INIT_MSF_ADDR(RESI_Y_SMOOTH_WGT0);
        INIT_MSF_ADDR(RESI_Y_SMOOTH_SLP0);
        INIT_MSF_ADDR(RESI_UV_SMOOTH_THD0);
        INIT_MSF_ADDR(RESI_UV_SMOOTH_THD1);
        INIT_MSF_ADDR(RESI_UV_SMOOTH_WGT0);
        INIT_MSF_ADDR(RESI_UV_SMOOTH_SLP0);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT0);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT1);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT2);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT3);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_ANALYSIS0);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_ANALYSIS1);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_ANALYSIS2);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_ANALYSIS3);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT4);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_COEFFICIENT5);
        INIT_MSF_ADDR(GLOBAL_FREQUENCY_STATISTICS0);
        INIT_MSF_ADDR(EDGE_CONFIDENCE0);
        INIT_MSF_ADDR(EDGE_CONFIDENCE1);
        INIT_MSF_ADDR(EDGE_CONFIDENCE2);
        INIT_MSF_ADDR(EDGE_CONFIDENCE3);
        INIT_MSF_ADDR(EDGE_CONFIDENCE4);
        INIT_MSF_ADDR(BLENDING_CONTROL0);
        INIT_MSF_ADDR(BLENDING_CONTROL1);
        INIT_MSF_ADDR(BLENDING_CONTROL2);
        INIT_MSF_ADDR(BLENDING_CONTROL3);
        INIT_MSF_ADDR(BLENDING_CONTROL4);
        INIT_MSF_ADDR(BLENDING_CONTROL5);
        INIT_MSF_ADDR(BLENDING_CONTROL6);
        INIT_MSF_ADDR(BLENDING_CONTROL7);
        INIT_MSF_ADDR(CONFIDENCE_ACCUMULATION);
        INIT_MSF_ADDR(AGGRESSIVE_BLENDING0);
        INIT_MSF_ADDR(AGGRESSIVE_BLENDING1);
        INIT_MSF_ADDR(LUMINANCE_CONTROL0);
        INIT_MSF_ADDR(LUMINANCE_CONTROL1);
        INIT_MSF_ADDR(LUMINANCE_CONTROL2);
        INIT_MSF_ADDR(LUMINANCE_CONTROL3);
        INIT_MSF_ADDR(SHADING_LINK0);
        INIT_MSF_ADDR(SHADING_LINK1);
        INIT_MSF_ADDR(NOISE_LEVEL_STATISTICS0);
        INIT_MSF_ADDR(NOISE_LEVEL_STATISTICS1);
        INIT_MSF_ADDR(BACKGROUND_PROTECTION0);
        INIT_MSF_ADDR(BACKGROUND_PROTECTION1);
        INIT_MSF_ADDR(VALID_BIT_ADJUSTMENT);
        INIT_MSF_ADDR(NON_LOCAL_MEANS_FILTERING0);
        INIT_MSF_ADDR(NON_LOCAL_MEANS_FILTERING1);
        INIT_MSF_ADDR(NON_LOCAL_MEANS_FILTERING2);
        INIT_MSF_ADDR(NON_LOCAL_MEANS_FILTERING3);
        INIT_MSF_ADDR(HIGH_FREQUENCY_ENHANCEMENT0);
        INIT_MSF_ADDR(HIGH_FREQUENCY_ENHANCEMENT1);
        INIT_MSF_ADDR(HIGH_FREQUENCY_ENHANCEMENT2);
        INIT_MSF_ADDR(HFE_NES0);
        INIT_MSF_ADDR(HFE_NES1);
        INIT_MSF_ADDR(TEMPORAL);
        INIT_MSF_ADDR(SPATIAL);
        INIT_MSF_ADDR(HDR_FUSION_0);
        INIT_MSF_ADDR(HDR_FUSION_1);
        INIT_MSF_ADDR(SYN_FILTER0);
        INIT_MSF_ADDR(SYN_FILTER1);
        INIT_MSF_ADDR(SYN_FILTER2);
        INIT_MSF_ADDR(SYN_DENOISE_AND_DIFF);
        INIT_MSF_ADDR(SYN_CONF0);
        INIT_MSF_ADDR(SYN_CONF1);
        INIT_MSF_ADDR(SYN_PRIOR0);
        INIT_MSF_ADDR(SYN_PRIOR1);
        INIT_MSF_ADDR(SYN_GENERAL);
    }

    virtual ~ISP_MGR_MSF() {}

public:
    static MyType&  getInstance(ESensorDev_T const eSensorDev);

public:

    template <class ISP_xxx_T>
    MyType& put(MUINT8 SubModuleIndex, ISP_xxx_T const& rParam);

    template <class ISP_xxx_T>
    MyType& get(MUINT8 SubModuleIndex, ISP_xxx_T & rParam);

    MBOOL
    isEnable(MUINT8 SubModuleIndex)
    {
        return m_bEnable[SubModuleIndex];
    }

    MBOOL
    isCCTEnable()
    {
        return m_bCCTEnable;
    }

    MVOID
    setEnable(MUINT8 SubModuleIndex, MBOOL bEnable)
    {
        m_bEnable[SubModuleIndex] = bEnable;
    }

    MVOID
    setCCTEnable(MBOOL bEnable)
    {
        m_bCCTEnable = bEnable;
    }
    MBOOL apply_MSF(MUINT8 SubModuleIndex, const RAWIspCamInfo& rRawIspCamInfo, mfb_reg_t* pReg);

} ISP_MGR_MSF_T;

template <ESensorDev_T const eSensorDev>
class ISP_MGR_MSF_DEV : public ISP_MGR_MSF_T
{
public:
    static
    ISP_MGR_MSF_T&
    getInstance()
    {
        static ISP_MGR_MSF_DEV<eSensorDev> singleton;
        return singleton;
    }
    virtual MVOID destroyInstance() {}

    ISP_MGR_MSF_DEV()
        : ISP_MGR_MSF_T(eSensorDev)
    {}

    virtual ~ISP_MGR_MSF_DEV() {}

};
#endif
