/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#define LOG_TAG "isp_interpolation"

#ifndef ENABLE_MY_LOG
    #define ENABLE_MY_LOG       (1)
#endif

#include <cutils/properties.h>
#include <stdlib.h>
#include <cutils/log.h>
#include <math.h>
#include <aaa_types.h>
#include <aaa_log.h>
#include <camera_custom_nvram.h>
#include <isp_tuning_cam_info.h>
#include "isp_interpolation.h"
#include <isp_feature.h>
#include <utilSystrace.h>

#define INTER_LOGD(fmt, arg...) ALOGD(fmt, ##arg)
#define INTER_LOGW(fmt, arg...) ALOGW(fmt, ##arg)
#define INTER_LOGE(fmt, arg...) ALOGE(fmt, ##arg)

#define INTER_LOG_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGD(__VA_ARGS__); } }while(0)
#define INTER_LOGW_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGW(__VA_ARGS__); } }while(0)
#define INTER_LOGE_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGE(__VA_ARGS__); } }while(0)

#define COLOR_LOGD(fmt, arg...) ALOGD(fmt, ##arg)
#define COLOR_LOG_IF(cond, ...)      do { if ( (cond) ) { COLOR_LOGD(__VA_ARGS__); } }while(0)
MUINT16 g_Smooth_Color_Ver = 110; // V1.10
MUINT16 g_FW_NBC_Ver = 100; // V1.00

#define GGM_TABLE_SIZE 192

#define PI 3.14159265358979323846

MINT32 LOG10_TBL[4096] = {  0, 308, 489, 617, 716, 797, 865, 925, 977, 1024, 1066, 1105, 1141, 1174, 1204, 1233, 1260, 1285, 1309, 1332, 1354, 1375, 1394, 1413, 1431, 1449, 1466, 1482, 1497, 1513, 1527, 1541, 
                        1555, 1568, 1581, 1594, 1606, 1618, 1629, 1641, 1651, 1662, 1673, 1683, 1693, 1703, 1712, 1722, 1731, 1740, 1749, 1757, 1766, 1774, 1782, 1790, 1798, 1806, 1813, 1821, 1828, 1835, 1843, 1850, 
                        1856, 1863, 1870, 1876, 1883, 1889, 1896, 1902, 1908, 1914, 1920, 1926, 1932, 1938, 1943, 1949, 1954, 1960, 1965, 1970, 1976, 1981, 1986, 1991, 1996, 2001, 2006, 2011, 2016, 2020, 2025, 2030, 
                        2034, 2039, 2044, 2048, 2052, 2057, 2061, 2065, 2070, 2074, 2078, 2082, 2086, 2090, 2094, 2098, 2102, 2106, 2110, 2114, 2118, 2122, 2125, 2129, 2133, 2136, 2140, 2144, 2147, 2151, 2154, 2158, 
                        2161, 2165, 2168, 2171, 2175, 2178, 2181, 2185, 2188, 2191, 2194, 2198, 2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222, 2225, 2228, 2231, 2234, 2237, 2240, 2243, 2246, 2249, 2251, 2254, 2257, 
                        2260, 2263, 2265, 2268, 2271, 2273, 2276, 2279, 2281, 2284, 2287, 2289, 2292, 2294, 2297, 2299, 2302, 2304, 2307, 2309, 2312, 2314, 2317, 2319, 2322, 2324, 2326, 2329, 2331, 2333, 2336, 2338, 
                        2340, 2343, 2345, 2347, 2350, 2352, 2354, 2356, 2358, 2361, 2363, 2365, 2367, 2369, 2372, 2374, 2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407, 
                        2409, 2411, 2413, 2415, 2416, 2418, 2420, 2422, 2424, 2426, 2428, 2430, 2432, 2434, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2448, 2450, 2452, 2454, 2455, 2457, 2459, 2461, 2463, 2464, 2466, 
                        2468, 2469, 2471, 2473, 2475, 2476, 2478, 2480, 2481, 2483, 2485, 2486, 2488, 2490, 2491, 2493, 2495, 2496, 2498, 2499, 2501, 2503, 2504, 2506, 2507, 2509, 2511, 2512, 2514, 2515, 2517, 2518, 
                        2520, 2521, 2523, 2525, 2526, 2528, 2529, 2531, 2532, 2534, 2535, 2537, 2538, 2540, 2541, 2542, 2544, 2545, 2547, 2548, 2550, 2551, 2553, 2554, 2555, 2557, 2558, 2560, 2561, 2562, 2564, 2565, 
                        2567, 2568, 2569, 2571, 2572, 2574, 2575, 2576, 2578, 2579, 2580, 2582, 2583, 2584, 2586, 2587, 2588, 2590, 2591, 2592, 2594, 2595, 2596, 2597, 2599, 2600, 2601, 2603, 2604, 2605, 2606, 2608, 
                        2609, 2610, 2611, 2613, 2614, 2615, 2616, 2618, 2619, 2620, 2621, 2623, 2624, 2625, 2626, 2627, 2629, 2630, 2631, 2632, 2633, 2635, 2636, 2637, 2638, 2639, 2641, 2642, 2643, 2644, 2645, 2646, 
                        2648, 2649, 2650, 2651, 2652, 2653, 2654, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2682, 
                        2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 
                        2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 
                        2747, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2773, 2774, 
                        2775, 2776, 2777, 2778, 2779, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2785, 2786, 2787, 2788, 2789, 2790, 2790, 2791, 2792, 2793, 2794, 2795, 2795, 2796, 2797, 2798, 2799, 2800, 2800, 2801, 
                        2802, 2803, 2804, 2805, 2805, 2806, 2807, 2808, 2809, 2809, 2810, 2811, 2812, 2813, 2813, 2814, 2815, 2816, 2817, 2817, 2818, 2819, 2820, 2820, 2821, 2822, 2823, 2824, 2824, 2825, 2826, 2827, 
                        2827, 2828, 2829, 2830, 2831, 2831, 2832, 2833, 2834, 2834, 2835, 2836, 2837, 2837, 2838, 2839, 2840, 2840, 2841, 2842, 2843, 2843, 2844, 2845, 2846, 2846, 2847, 2848, 2849, 2849, 2850, 2851, 
                        2851, 2852, 2853, 2854, 2854, 2855, 2856, 2857, 2857, 2858, 2859, 2859, 2860, 2861, 2862, 2862, 2863, 2864, 2864, 2865, 2866, 2867, 2867, 2868, 2869, 2869, 2870, 2871, 2871, 2872, 2873, 2874, 
                        2874, 2875, 2876, 2876, 2877, 2878, 2878, 2879, 2880, 2880, 2881, 2882, 2882, 2883, 2884, 2885, 2885, 2886, 2887, 2887, 2888, 2889, 2889, 2890, 2891, 2891, 2892, 2893, 2893, 2894, 2895, 2895, 
                        2896, 2897, 2897, 2898, 2899, 2899, 2900, 2900, 2901, 2902, 2902, 2903, 2904, 2904, 2905, 2906, 2906, 2907, 2908, 2908, 2909, 2910, 2910, 2911, 2911, 2912, 2913, 2913, 2914, 2915, 2915, 2916, 
                        2917, 2917, 2918, 2918, 2919, 2920, 2920, 2921, 2922, 2922, 2923, 2923, 2924, 2925, 2925, 2926, 2927, 2927, 2928, 2928, 2929, 2930, 2930, 2931, 2931, 2932, 2933, 2933, 2934, 2934, 2935, 2936, 
                        2936, 2937, 2937, 2938, 2939, 2939, 2940, 2940, 2941, 2942, 2942, 2943, 2943, 2944, 2945, 2945, 2946, 2946, 2947, 2948, 2948, 2949, 2949, 2950, 2951, 2951, 2952, 2952, 2953, 2953, 2954, 2955, 
                        2955, 2956, 2956, 2957, 2957, 2958, 2959, 2959, 2960, 2960, 2961, 2962, 2962, 2963, 2963, 2964, 2964, 2965, 2965, 2966, 2967, 2967, 2968, 2968, 2969, 2969, 2970, 2971, 2971, 2972, 2972, 2973, 
                        2973, 2974, 2974, 2975, 2976, 2976, 2977, 2977, 2978, 2978, 2979, 2979, 2980, 2980, 2981, 2982, 2982, 2983, 2983, 2984, 2984, 2985, 2985, 2986, 2986, 2987, 2988, 2988, 2989, 2989, 2990, 2990, 
                        2991, 2991, 2992, 2992, 2993, 2993, 2994, 2994, 2995, 2996, 2996, 2997, 2997, 2998, 2998, 2999, 2999, 3000, 3000, 3001, 3001, 3002, 3002, 3003, 3003, 3004, 3004, 3005, 3005, 3006, 3006, 3007, 
                        3008, 3008, 3009, 3009, 3010, 3010, 3011, 3011, 3012, 3012, 3013, 3013, 3014, 3014, 3015, 3015, 3016, 3016, 3017, 3017, 3018, 3018, 3019, 3019, 3020, 3020, 3021, 3021, 3022, 3022, 3023, 3023, 
                        3024, 3024, 3025, 3025, 3026, 3026, 3027, 3027, 3028, 3028, 3029, 3029, 3030, 3030, 3031, 3031, 3032, 3032, 3032, 3033, 3033, 3034, 3034, 3035, 3035, 3036, 3036, 3037, 3037, 3038, 3038, 3039, 
                        3039, 3040, 3040, 3041, 3041, 3042, 3042, 3043, 3043, 3044, 3044, 3044, 3045, 3045, 3046, 3046, 3047, 3047, 3048, 3048, 3049, 3049, 3050, 3050, 3051, 3051, 3052, 3052, 3052, 3053, 3053, 3054, 
                        3054, 3055, 3055, 3056, 3056, 3057, 3057, 3058, 3058, 3058, 3059, 3059, 3060, 3060, 3061, 3061, 3062, 3062, 3063, 3063, 3063, 3064, 3064, 3065, 3065, 3066, 3066, 3067, 3067, 3068, 3068, 3068, 
                        3069, 3069, 3070, 3070, 3071, 3071, 3072, 3072, 3072, 3073, 3073, 3074, 3074, 3075, 3075, 3076, 3076, 3076, 3077, 3077, 3078, 3078, 3079, 3079, 3079, 3080, 3080, 3081, 3081, 3082, 3082, 3083, 
                        3083, 3083, 3084, 3084, 3085, 3085, 3086, 3086, 3086, 3087, 3087, 3088, 3088, 3089, 3089, 3089, 3090, 3090, 3091, 3091, 3092, 3092, 3092, 3093, 3093, 3094, 3094, 3095, 3095, 3095, 3096, 3096, 
                        3097, 3097, 3097, 3098, 3098, 3099, 3099, 3100, 3100, 3100, 3101, 3101, 3102, 3102, 3103, 3103, 3103, 3104, 3104, 3105, 3105, 3105, 3106, 3106, 3107, 3107, 3107, 3108, 3108, 3109, 3109, 3110, 
                        3110, 3110, 3111, 3111, 3112, 3112, 3112, 3113, 3113, 3114, 3114, 3114, 3115, 3115, 3116, 3116, 3116, 3117, 3117, 3118, 3118, 3118, 3119, 3119, 3120, 3120, 3120, 3121, 3121, 3122, 3122, 3122, 
                        3123, 3123, 3124, 3124, 3124, 3125, 3125, 3126, 3126, 3126, 3127, 3127, 3128, 3128, 3128, 3129, 3129, 3129, 3130, 3130, 3131, 3131, 3131, 3132, 3132, 3133, 3133, 3133, 3134, 3134, 3135, 3135, 
                        3135, 3136, 3136, 3136, 3137, 3137, 3138, 3138, 3138, 3139, 3139, 3140, 3140, 3140, 3141, 3141, 3141, 3142, 3142, 3143, 3143, 3143, 3144, 3144, 3144, 3145, 3145, 3146, 3146, 3146, 3147, 3147, 
                        3147, 3148, 3148, 3149, 3149, 3149, 3150, 3150, 3150, 3151, 3151, 3152, 3152, 3152, 3153, 3153, 3153, 3154, 3154, 3155, 3155, 3155, 3156, 3156, 3156, 3157, 3157, 3158, 3158, 3158, 3159, 3159, 
                        3159, 3160, 3160, 3160, 3161, 3161, 3162, 3162, 3162, 3163, 3163, 3163, 3164, 3164, 3164, 3165, 3165, 3166, 3166, 3166, 3167, 3167, 3167, 3168, 3168, 3168, 3169, 3169, 3169, 3170, 3170, 3171, 
                        3171, 3171, 3172, 3172, 3172, 3173, 3173, 3173, 3174, 3174, 3174, 3175, 3175, 3175, 3176, 3176, 3177, 3177, 3177, 3178, 3178, 3178, 3179, 3179, 3179, 3180, 3180, 3180, 3181, 3181, 3181, 3182, 
                        3182, 3182, 3183, 3183, 3184, 3184, 3184, 3185, 3185, 3185, 3186, 3186, 3186, 3187, 3187, 3187, 3188, 3188, 3188, 3189, 3189, 3189, 3190, 3190, 3190, 3191, 3191, 3191, 3192, 3192, 3192, 3193, 
                        3193, 3193, 3194, 3194, 3194, 3195, 3195, 3195, 3196, 3196, 3196, 3197, 3197, 3197, 3198, 3198, 3198, 3199, 3199, 3199, 3200, 3200, 3200, 3201, 3201, 3201, 3202, 3202, 3202, 3203, 3203, 3203, 
                        3204, 3204, 3204, 3205, 3205, 3205, 3206, 3206, 3206, 3207, 3207, 3207, 3208, 3208, 3208, 3209, 3209, 3209, 3210, 3210, 3210, 3211, 3211, 3211, 3212, 3212, 3212, 3213, 3213, 3213, 3214, 3214, 
                        3214, 3215, 3215, 3215, 3216, 3216, 3216, 3217, 3217, 3217, 3217, 3218, 3218, 3218, 3219, 3219, 3219, 3220, 3220, 3220, 3221, 3221, 3221, 3222, 3222, 3222, 3223, 3223, 3223, 3224, 3224, 3224, 
                        3224, 3225, 3225, 3225, 3226, 3226, 3226, 3227, 3227, 3227, 3228, 3228, 3228, 3229, 3229, 3229, 3230, 3230, 3230, 3230, 3231, 3231, 3231, 3232, 3232, 3232, 3233, 3233, 3233, 3234, 3234, 3234, 
                        3234, 3235, 3235, 3235, 3236, 3236, 3236, 3237, 3237, 3237, 3238, 3238, 3238, 3238, 3239, 3239, 3239, 3240, 3240, 3240, 3241, 3241, 3241, 3242, 3242, 3242, 3242, 3243, 3243, 3243, 3244, 3244, 
                        3244, 3245, 3245, 3245, 3245, 3246, 3246, 3246, 3247, 3247, 3247, 3248, 3248, 3248, 3248, 3249, 3249, 3249, 3250, 3250, 3250, 3251, 3251, 3251, 3251, 3252, 3252, 3252, 3253, 3253, 3253, 3254, 
                        3254, 3254, 3254, 3255, 3255, 3255, 3256, 3256, 3256, 3256, 3257, 3257, 3257, 3258, 3258, 3258, 3259, 3259, 3259, 3259, 3260, 3260, 3260, 3261, 3261, 3261, 3261, 3262, 3262, 3262, 3263, 3263, 
                        3263, 3263, 3264, 3264, 3264, 3265, 3265, 3265, 3265, 3266, 3266, 3266, 3267, 3267, 3267, 3267, 3268, 3268, 3268, 3269, 3269, 3269, 3269, 3270, 3270, 3270, 3271, 3271, 3271, 3271, 3272, 3272, 
                        3272, 3273, 3273, 3273, 3273, 3274, 3274, 3274, 3275, 3275, 3275, 3275, 3276, 3276, 3276, 3277, 3277, 3277, 3277, 3278, 3278, 3278, 3279, 3279, 3279, 3279, 3280, 3280, 3280, 3280, 3281, 3281, 
                        3281, 3282, 3282, 3282, 3282, 3283, 3283, 3283, 3284, 3284, 3284, 3284, 3285, 3285, 3285, 3285, 3286, 3286, 3286, 3287, 3287, 3287, 3287, 3288, 3288, 3288, 3288, 3289, 3289, 3289, 3290, 3290, 
                        3290, 3290, 3291, 3291, 3291, 3291, 3292, 3292, 3292, 3293, 3293, 3293, 3293, 3294, 3294, 3294, 3294, 3295, 3295, 3295, 3296, 3296, 3296, 3296, 3297, 3297, 3297, 3297, 3298, 3298, 3298, 3298, 
                        3299, 3299, 3299, 3300, 3300, 3300, 3300, 3301, 3301, 3301, 3301, 3302, 3302, 3302, 3302, 3303, 3303, 3303, 3304, 3304, 3304, 3304, 3305, 3305, 3305, 3305, 3306, 3306, 3306, 3306, 3307, 3307, 
                        3307, 3307, 3308, 3308, 3308, 3309, 3309, 3309, 3309, 3310, 3310, 3310, 3310, 3311, 3311, 3311, 3311, 3312, 3312, 3312, 3312, 3313, 3313, 3313, 3313, 3314, 3314, 3314, 3314, 3315, 3315, 3315, 
                        3316, 3316, 3316, 3316, 3317, 3317, 3317, 3317, 3318, 3318, 3318, 3318, 3319, 3319, 3319, 3319, 3320, 3320, 3320, 3320, 3321, 3321, 3321, 3321, 3322, 3322, 3322, 3322, 3323, 3323, 3323, 3323, 
                        3324, 3324, 3324, 3324, 3325, 3325, 3325, 3325, 3326, 3326, 3326, 3326, 3327, 3327, 3327, 3327, 3328, 3328, 3328, 3328, 3329, 3329, 3329, 3329, 3330, 3330, 3330, 3330, 3331, 3331, 3331, 3331, 
                        3332, 3332, 3332, 3332, 3333, 3333, 3333, 3333, 3334, 3334, 3334, 3334, 3335, 3335, 3335, 3335, 3336, 3336, 3336, 3336, 3337, 3337, 3337, 3337, 3338, 3338, 3338, 3338, 3339, 3339, 3339, 3339, 
                        3340, 3340, 3340, 3340, 3341, 3341, 3341, 3341, 3341, 3342, 3342, 3342, 3342, 3343, 3343, 3343, 3343, 3344, 3344, 3344, 3344, 3345, 3345, 3345, 3345, 3346, 3346, 3346, 3346, 3347, 3347, 3347, 
                        3347, 3348, 3348, 3348, 3348, 3348, 3349, 3349, 3349, 3349, 3350, 3350, 3350, 3350, 3351, 3351, 3351, 3351, 3352, 3352, 3352, 3352, 3353, 3353, 3353, 3353, 3353, 3354, 3354, 3354, 3354, 3355, 
                        3355, 3355, 3355, 3356, 3356, 3356, 3356, 3357, 3357, 3357, 3357, 3357, 3358, 3358, 3358, 3358, 3359, 3359, 3359, 3359, 3360, 3360, 3360, 3360, 3360, 3361, 3361, 3361, 3361, 3362, 3362, 3362, 
                        3362, 3363, 3363, 3363, 3363, 3363, 3364, 3364, 3364, 3364, 3365, 3365, 3365, 3365, 3366, 3366, 3366, 3366, 3366, 3367, 3367, 3367, 3367, 3368, 3368, 3368, 3368, 3369, 3369, 3369, 3369, 3369, 
                        3370, 3370, 3370, 3370, 3371, 3371, 3371, 3371, 3371, 3372, 3372, 3372, 3372, 3373, 3373, 3373, 3373, 3374, 3374, 3374, 3374, 3374, 3375, 3375, 3375, 3375, 3376, 3376, 3376, 3376, 3376, 3377, 
                        3377, 3377, 3377, 3378, 3378, 3378, 3378, 3378, 3379, 3379, 3379, 3379, 3380, 3380, 3380, 3380, 3380, 3381, 3381, 3381, 3381, 3382, 3382, 3382, 3382, 3382, 3383, 3383, 3383, 3383, 3384, 3384, 
                        3384, 3384, 3384, 3385, 3385, 3385, 3385, 3386, 3386, 3386, 3386, 3386, 3387, 3387, 3387, 3387, 3388, 3388, 3388, 3388, 3388, 3389, 3389, 3389, 3389, 3389, 3390, 3390, 3390, 3390, 3391, 3391, 
                        3391, 3391, 3391, 3392, 3392, 3392, 3392, 3393, 3393, 3393, 3393, 3393, 3394, 3394, 3394, 3394, 3394, 3395, 3395, 3395, 3395, 3396, 3396, 3396, 3396, 3396, 3397, 3397, 3397, 3397, 3397, 3398, 
                        3398, 3398, 3398, 3399, 3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400, 3400, 3401, 3401, 3401, 3401, 3402, 3402, 3402, 3402, 3402, 3403, 3403, 3403, 3403, 3403, 3404, 3404, 3404, 3404, 3404, 
                        3405, 3405, 3405, 3405, 3406, 3406, 3406, 3406, 3406, 3407, 3407, 3407, 3407, 3407, 3408, 3408, 3408, 3408, 3408, 3409, 3409, 3409, 3409, 3410, 3410, 3410, 3410, 3410, 3411, 3411, 3411, 3411, 
                        3411, 3412, 3412, 3412, 3412, 3412, 3413, 3413, 3413, 3413, 3413, 3414, 3414, 3414, 3414, 3414, 3415, 3415, 3415, 3415, 3416, 3416, 3416, 3416, 3416, 3417, 3417, 3417, 3417, 3417, 3418, 3418, 
                        3418, 3418, 3418, 3419, 3419, 3419, 3419, 3419, 3420, 3420, 3420, 3420, 3420, 3421, 3421, 3421, 3421, 3421, 3422, 3422, 3422, 3422, 3422, 3423, 3423, 3423, 3423, 3423, 3424, 3424, 3424, 3424, 
                        3424, 3425, 3425, 3425, 3425, 3425, 3426, 3426, 3426, 3426, 3426, 3427, 3427, 3427, 3427, 3427, 3428, 3428, 3428, 3428, 3428, 3429, 3429, 3429, 3429, 3429, 3430, 3430, 3430, 3430, 3430, 3431, 
                        3431, 3431, 3431, 3431, 3432, 3432, 3432, 3432, 3432, 3433, 3433, 3433, 3433, 3433, 3434, 3434, 3434, 3434, 3434, 3435, 3435, 3435, 3435, 3435, 3436, 3436, 3436, 3436, 3436, 3437, 3437, 3437, 
                        3437, 3437, 3438, 3438, 3438, 3438, 3438, 3439, 3439, 3439, 3439, 3439, 3439, 3440, 3440, 3440, 3440, 3440, 3441, 3441, 3441, 3441, 3441, 3442, 3442, 3442, 3442, 3442, 3443, 3443, 3443, 3443, 
                        3443, 3444, 3444, 3444, 3444, 3444, 3445, 3445, 3445, 3445, 3445, 3445, 3446, 3446, 3446, 3446, 3446, 3447, 3447, 3447, 3447, 3447, 3448, 3448, 3448, 3448, 3448, 3449, 3449, 3449, 3449, 3449, 
                        3450, 3450, 3450, 3450, 3450, 3450, 3451, 3451, 3451, 3451, 3451, 3452, 3452, 3452, 3452, 3452, 3453, 3453, 3453, 3453, 3453, 3453, 3454, 3454, 3454, 3454, 3454, 3455, 3455, 3455, 3455, 3455, 
                        3456, 3456, 3456, 3456, 3456, 3456, 3457, 3457, 3457, 3457, 3457, 3458, 3458, 3458, 3458, 3458, 3459, 3459, 3459, 3459, 3459, 3459, 3460, 3460, 3460, 3460, 3460, 3461, 3461, 3461, 3461, 3461, 
                        3462, 3462, 3462, 3462, 3462, 3462, 3463, 3463, 3463, 3463, 3463, 3464, 3464, 3464, 3464, 3464, 3464, 3465, 3465, 3465, 3465, 3465, 3466, 3466, 3466, 3466, 3466, 3466, 3467, 3467, 3467, 3467, 
                        3467, 3468, 3468, 3468, 3468, 3468, 3469, 3469, 3469, 3469, 3469, 3469, 3470, 3470, 3470, 3470, 3470, 3471, 3471, 3471, 3471, 3471, 3471, 3472, 3472, 3472, 3472, 3472, 3472, 3473, 3473, 3473, 
                        3473, 3473, 3474, 3474, 3474, 3474, 3474, 3474, 3475, 3475, 3475, 3475, 3475, 3476, 3476, 3476, 3476, 3476, 3476, 3477, 3477, 3477, 3477, 3477, 3478, 3478, 3478, 3478, 3478, 3478, 3479, 3479, 
                        3479, 3479, 3479, 3479, 3480, 3480, 3480, 3480, 3480, 3481, 3481, 3481, 3481, 3481, 3481, 3482, 3482, 3482, 3482, 3482, 3483, 3483, 3483, 3483, 3483, 3483, 3484, 3484, 3484, 3484, 3484, 3484, 
                        3485, 3485, 3485, 3485, 3485, 3485, 3486, 3486, 3486, 3486, 3486, 3487, 3487, 3487, 3487, 3487, 3487, 3488, 3488, 3488, 3488, 3488, 3488, 3489, 3489, 3489, 3489, 3489, 3490, 3490, 3490, 3490, 
                        3490, 3490, 3491, 3491, 3491, 3491, 3491, 3491, 3492, 3492, 3492, 3492, 3492, 3492, 3493, 3493, 3493, 3493, 3493, 3493, 3494, 3494, 3494, 3494, 3494, 3495, 3495, 3495, 3495, 3495, 3495, 3496, 
                        3496, 3496, 3496, 3496, 3496, 3497, 3497, 3497, 3497, 3497, 3497, 3498, 3498, 3498, 3498, 3498, 3498, 3499, 3499, 3499, 3499, 3499, 3499, 3500, 3500, 3500, 3500, 3500, 3501, 3501, 3501, 3501, 
                        3501, 3501, 3502, 3502, 3502, 3502, 3502, 3502, 3503, 3503, 3503, 3503, 3503, 3503, 3504, 3504, 3504, 3504, 3504, 3504, 3505, 3505, 3505, 3505, 3505, 3505, 3506, 3506, 3506, 3506, 3506, 3506, 
                        3507, 3507, 3507, 3507, 3507, 3507, 3508, 3508, 3508, 3508, 3508, 3508, 3509, 3509, 3509, 3509, 3509, 3509, 3510, 3510, 3510, 3510, 3510, 3510, 3511, 3511, 3511, 3511, 3511, 3511, 3512, 3512, 
                        3512, 3512, 3512, 3512, 3513, 3513, 3513, 3513, 3513, 3513, 3514, 3514, 3514, 3514, 3514, 3514, 3515, 3515, 3515, 3515, 3515, 3515, 3516, 3516, 3516, 3516, 3516, 3516, 3517, 3517, 3517, 3517, 
                        3517, 3517, 3517, 3518, 3518, 3518, 3518, 3518, 3518, 3519, 3519, 3519, 3519, 3519, 3519, 3520, 3520, 3520, 3520, 3520, 3520, 3521, 3521, 3521, 3521, 3521, 3521, 3522, 3522, 3522, 3522, 3522, 
                        3522, 3523, 3523, 3523, 3523, 3523, 3523, 3523, 3524, 3524, 3524, 3524, 3524, 3524, 3525, 3525, 3525, 3525, 3525, 3525, 3526, 3526, 3526, 3526, 3526, 3526, 3527, 3527, 3527, 3527, 3527, 3527, 
                        3528, 3528, 3528, 3528, 3528, 3528, 3528, 3529, 3529, 3529, 3529, 3529, 3529, 3530, 3530, 3530, 3530, 3530, 3530, 3531, 3531, 3531, 3531, 3531, 3531, 3531, 3532, 3532, 3532, 3532, 3532, 3532, 
                        3533, 3533, 3533, 3533, 3533, 3533, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3535, 3535, 3535, 3535, 3535, 3535, 3536, 3536, 3536, 3536, 3536, 3536, 3537, 3537, 3537, 3537, 3537, 3537, 3537, 
                        3538, 3538, 3538, 3538, 3538, 3538, 3539, 3539, 3539, 3539, 3539, 3539, 3539, 3540, 3540, 3540, 3540, 3540, 3540, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3542, 3542, 3542, 3542, 3542, 3542, 
                        3543, 3543, 3543, 3543, 3543, 3543, 3543, 3544, 3544, 3544, 3544, 3544, 3544, 3545, 3545, 3545, 3545, 3545, 3545, 3545, 3546, 3546, 3546, 3546, 3546, 3546, 3547, 3547, 3547, 3547, 3547, 3547, 
                        3547, 3548, 3548, 3548, 3548, 3548, 3548, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3550, 3550, 3550, 3550, 3550, 3550, 3551, 3551, 3551, 3551, 3551, 3551, 3551, 3552, 3552, 3552, 3552, 3552, 
                        3552, 3552, 3553, 3553, 3553, 3553, 3553, 3553, 3554, 3554, 3554, 3554, 3554, 3554, 3554, 3555, 3555, 3555, 3555, 3555, 3555, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3557, 3557, 3557, 3557, 
                        3557, 3557, 3557, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3559, 3559, 3559, 3559, 3559, 3559, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3562, 3562, 
                        3562, 3562, 3562, 3562, 3562, 3563, 3563, 3563, 3563, 3563, 3563, 3564, 3564, 3564, 3564, 3564, 3564, 3564, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3566, 3566, 3566, 3566, 3566, 3566, 3566, 
                        3567, 3567, 3567, 3567, 3567, 3567, 3567, 3568, 3568, 3568, 3568, 3568, 3568, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3571, 3571, 3571, 3571, 3571, 
                        3571, 3571, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3574, 3574, 3574, 3574, 3574, 3574, 3574, 3575, 3575, 3575, 3575, 3575, 3575, 3575, 3576, 3576, 
                        3576, 3576, 3576, 3576, 3576, 3577, 3577, 3577, 3577, 3577, 3577, 3577, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3579, 3579, 3579, 3579, 3579, 3579, 3579, 3580, 3580, 3580, 3580, 3580, 3580, 
                        3580, 3581, 3581, 3581, 3581, 3581, 3581, 3581, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3583, 3583, 3583, 3583, 3583, 3583, 3583, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3585, 3585, 3585, 
                        3585, 3585, 3585, 3585, 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3587, 3587, 3587, 3587, 3587, 3587, 3587, 3588, 3588, 3588, 3588, 3588, 3588, 3588, 3589, 3589, 3589, 3589, 3589, 3589, 
                        3589, 3590, 3590, 3590, 3590, 3590, 3590, 3590, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3592, 3592, 3592, 3592, 3592, 3592, 3592, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3594, 3594, 
                        3594, 3594, 3594, 3594, 3594, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3596, 3596, 3596, 3596, 3596, 3596, 3596, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3598, 3598, 3598, 3598, 3598, 
                        3598, 3598, 3598, 3599, 3599, 3599, 3599, 3599, 3599, 3599, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3602, 3602, 3602, 3602, 3602, 3602, 3602, 
                        3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3607, 3607, 
                        3607, 3607, 3607, 3607, 3607, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3611, 3611, 3611, 3611, 
                        3611, 3611, 3611, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3615, 3615, 3615, 3615, 3615, 3615, 
                        3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3619, 3619, 3619, 3619, 3619, 3619, 3619, 
                        3619, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 
                        3624, 3624, 3624, 3624, 3624, 3624, 3624, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3628, 
                        3628, 3628, 3628, 3628, 3628, 3628, 3628, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3632, 3632, 
                        3632, 3632, 3632, 3632, 3632, 3632, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3636, 3636, 
                        3636, 3636, 3636, 3636, 3636, 3636, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3640, 3640, 
                        3640, 3640, 3640, 3640, 3640, 3640, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3644, 3644, 
                        3644, 3644, 3644, 3644, 3644, 3644, 3644, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3648, 
                        3648, 3648, 3648, 3648, 3648, 3648, 3648, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 
                        3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3655, 3655, 3655, 3655, 3655, 3655, 3655, 
                        3655, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3659, 3659, 3659, 3659, 3659, 3659, 
                        3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3663, 3663, 3663, 3663, 
                        3663, 3663, 3663, 3663, 3663, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3667, 3667, 
                        3667, 3667, 3667, 3667, 3667, 3667, 3667, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3670, 3670, 3670, 3670, 3670, 3670, 3670, 3670, 
                        3670, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3674, 3674, 3674, 3674, 3674, 
                        3674, 3674, 3674, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3678, 3678, 
                        3678, 3678, 3678, 3678, 3678, 3678, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 
                        3681, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3685, 3685, 3685, 3685, 
                        3685, 3685, 3685, 3685, 3685, 3686, 3686, 3686, 3686, 3686, 3686, 3686, 3686, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3689, 
                        3689, 3689, 3689, 3689, 3689, 3689, 3689, 3689, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3692, 3692, 3692, 3692, 3692, 3692, 
                        3692, 3692, 3692, 3692, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3696, 
                        3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3699, 3699, 3699, 3699, 3699, 3699};

MINT32 EXP10_TBL[3701] = {   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
							3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
							3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 
							4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
							4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
							5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
                            5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 
							6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                            6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 
							8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                            8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
                            9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 
                            10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 
                            11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
                            11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 
                            12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 
                            13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 
                            14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 
                            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 
                            17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 
                            18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 
                            20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 
                            21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 
                            23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 
                            24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 
                            26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 
                            28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 
                            31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 
                            33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 
                            36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 
                            38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 
                            41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 
                            44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48, 
                            48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51, 
                            51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55, 
                            55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59, 
                            59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 64, 64, 
                            64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 69, 
                            69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 74, 74, 
                            74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79, 
                            80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85, 
                            86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92, 
                            92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 
                            99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106, 
                            106, 107, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 109, 110, 110, 110, 110, 111, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 113, 114, 114, 114, 
                            114, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 123, 123, 
                            123, 123, 124, 124, 124, 124, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 131, 131, 131, 131, 132, 132, 
                            132, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142, 
							142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153,
                            153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 
                            164, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 169, 169, 169, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 174, 174, 174, 175, 175, 176, 176, 176, 
                            177, 177, 178, 178, 178, 179, 179, 180, 180, 180, 181, 181, 182, 182, 183, 183, 183, 184, 184, 185, 185, 185, 186, 186, 187, 187, 188, 188, 188, 189, 189, 190, 
                            190, 191, 191, 191, 192, 192, 193, 193, 194, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 203, 204, 
                            204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219, 
							220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 235, 235, 236,
                            236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 251, 252, 252, 253, 253, 
                            254, 254, 255, 256, 256, 257, 257, 258, 258, 259, 260, 260, 261, 261, 262, 263, 263, 264, 264, 265, 266, 266, 267, 267, 268, 269, 269, 270, 270, 271, 272, 272, 
                            273, 273, 274, 275, 275, 276, 277, 277, 278, 278, 279, 280, 280, 281, 282, 282, 283, 284, 284, 285, 285, 286, 287, 287, 288, 289, 289, 290, 291, 291, 292, 293, 
                            293, 294, 295, 295, 296, 297, 297, 298, 299, 299, 300, 301, 301, 302, 303, 303, 304, 305, 305, 306, 307, 308, 308, 309, 310, 310, 311, 312, 312, 313, 314, 315, 
                            315, 316, 317, 317, 318, 319, 320, 320, 321, 322, 322, 323, 324, 325, 325, 326, 327, 328, 328, 329, 330, 331, 331, 332, 333, 334, 334, 335, 336, 337, 337, 338, 
                            339, 340, 340, 341, 342, 343, 343, 344, 345, 346, 347, 347, 348, 349, 350, 350, 351, 352, 353, 354, 354, 355, 356, 357, 358, 358, 359, 360, 361, 362, 363, 363, 
                            364, 365, 366, 367, 367, 368, 369, 370, 371, 372, 372, 373, 374, 375, 376, 377, 378, 378, 379, 380, 381, 382, 383, 384, 384, 385, 386, 387, 388, 389, 390, 391, 
                            391, 392, 393, 394, 395, 396, 397, 398, 399, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 
                            421, 422, 423, 424, 425, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 
                            452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 
                            486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521, 
                            522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560, 
                            561, 563, 564, 565, 566, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 590, 591, 593, 594, 595, 597, 598, 599, 601, 602, 
                            603, 605, 606, 607, 609, 610, 612, 613, 614, 616, 617, 618, 620, 621, 623, 624, 625, 627, 628, 630, 631, 633, 634, 635, 637, 638, 640, 641, 643, 644, 645, 647, 
                            648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 691, 692, 694, 695, 
                            697, 698, 700, 702, 703, 705, 706, 708, 709, 711, 713, 714, 716, 718, 719, 721, 722, 724, 726, 727, 729, 731, 732, 734, 736, 737, 739, 741, 742, 744, 746, 747, 
                            749, 751, 752, 754, 756, 757, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 776, 778, 780, 782, 783, 785, 787, 789, 790, 792, 794, 796, 798, 799, 801, 803, 
                            805, 807, 808, 810, 812, 814, 816, 818, 819, 821, 823, 825, 827, 829, 831, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 851, 853, 855, 857, 859, 861, 863, 
                            865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 
                            930, 932, 934, 936, 938, 940, 942, 944, 946, 949, 951, 953, 955, 957, 959, 961, 964, 966, 968, 970, 972, 975, 977, 979, 981, 983, 986, 988, 990, 992, 995, 997, 
                            999, 1001, 1004, 1006, 1008, 1010, 1013, 1015, 1017, 1019, 1022, 1024, 1026, 1029, 1031, 1033, 1036, 1038, 1040, 1043, 1045, 1047, 1050, 1052, 1054, 1057, 1059, 1062, 1064, 1066, 1069, 1071, 
                            1074, 1076, 1078, 1081, 1083, 1086, 1088, 1091, 1093, 1096, 1098, 1101, 1103, 1105, 1108, 1110, 1113, 1115, 1118, 1121, 1123, 1126, 1128, 1131, 1133, 1136, 1138, 1141, 1143, 1146, 1149, 1151, 
                            1154, 1156, 1159, 1162, 1164, 1167, 1169, 1172, 1175, 1177, 1180, 1183, 1185, 1188, 1191, 1193, 1196, 1199, 1201, 1204, 1207, 1210, 1212, 1215, 1218, 1221, 1223, 1226, 1229, 1232, 1234, 1237, 
                            1240, 1243, 1246, 1248, 1251, 1254, 1257, 1260, 1262, 1265, 1268, 1271, 1274, 1277, 1280, 1283, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327, 1330, 
                            1333, 1336, 1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 1388, 1391, 1394, 1397, 1400, 1403, 1406, 1410, 1413, 1416, 1419, 1422, 1426, 1429, 
                            1432, 1435, 1438, 1442, 1445, 1448, 1451, 1455, 1458, 1461, 1465, 1468, 1471, 1475, 1478, 1481, 1485, 1488, 1491, 1495, 1498, 1501, 1505, 1508, 1511, 1515, 1518, 1522, 1525, 1529, 1532, 1535, 
                            1539, 1542, 1546, 1549, 1553, 1556, 1560, 1563, 1567, 1570, 1574, 1577, 1581, 1585, 1588, 1592, 1595, 1599, 1603, 1606, 1610, 1613, 1617, 1621, 1624, 1628, 1632, 1635, 1639, 1643, 1646, 1650, 
                            1654, 1658, 1661, 1665, 1669, 1673, 1676, 1680, 1684, 1688, 1691, 1695, 1699, 1703, 1707, 1711, 1714, 1718, 1722, 1726, 1730, 1734, 1738, 1742, 1746, 1750, 1753, 1757, 1761, 1765, 1769, 1773, 
                            1777, 1781, 1785, 1789, 1793, 1797, 1801, 1805, 1810, 1814, 1818, 1822, 1826, 1830, 1834, 1838, 1842, 1847, 1851, 1855, 1859, 1863, 1867, 1872, 1876, 1880, 1884, 1889, 1893, 1897, 1901, 1906, 
                            1910, 1914, 1919, 1923, 1927, 1932, 1936, 1940, 1945, 1949, 1953, 1958, 1962, 1967, 1971, 1976, 1980, 1984, 1989, 1993, 1998, 2002, 2007, 2011, 2016, 2020, 2025, 2030, 2034, 2039, 2043, 2048, 
                            2053, 2057, 2062, 2066, 2071, 2076, 2080, 2085, 2090, 2095, 2099, 2104, 2109, 2113, 2118, 2123, 2128, 2133, 2137, 2142, 2147, 2152, 2157, 2162, 2166, 2171, 2176, 2181, 2186, 2191, 2196, 2201, 
                            2206, 2211, 2216, 2221, 2226, 2231, 2236, 2241, 2246, 2251, 2256, 2261, 2266, 2271, 2276, 2281, 2287, 2292, 2297, 2302, 2307, 2312, 2318, 2323, 2328, 2333, 2339, 2344, 2349, 2354, 2360, 2365, 
                            2370, 2376, 2381, 2386, 2392, 2397, 2403, 2408, 2413, 2419, 2424, 2430, 2435, 2441, 2446, 2452, 2457, 2463, 2468, 2474, 2479, 2485, 2491, 2496, 2502, 2507, 2513, 2519, 2524, 2530, 2536, 2542, 
                            2547, 2553, 2559, 2565, 2570, 2576, 2582, 2588, 2594, 2599, 2605, 2611, 2617, 2623, 2629, 2635, 2641, 2647, 2653, 2659, 2665, 2671, 2677, 2683, 2689, 2695, 2701, 2707, 2713, 2719, 2725, 2731, 
                            2737, 2744, 2750, 2756, 2762, 2768, 2775, 2781, 2787, 2793, 2800, 2806, 2812, 2819, 2825, 2831, 2838, 2844, 2851, 2857, 2863, 2870, 2876, 2883, 2889, 2896, 2902, 2909, 2915, 2922, 2929, 2935, 
                            2942, 2948, 2955, 2962, 2968, 2975, 2982, 2988, 2995, 3002, 3009, 3015, 3022, 3029, 3036, 3043, 3050, 3056, 3063, 3070, 3077, 3084, 3091, 3098, 3105, 3112, 3119, 3126, 3133, 3140, 3147, 3154, 
                            3161, 3168, 3176, 3183, 3190, 3197, 3204, 3211, 3219, 3226, 3233, 3240, 3248, 3255, 3262, 3270, 3277, 3285, 3292, 3299, 3307, 3314, 3322, 3329, 3337, 3344, 3352, 3359, 3367, 3374, 3382, 3390, 
                            3397, 3405, 3413, 3420, 3428, 3436, 3443, 3451, 3459, 3467, 3474, 3482, 3490, 3498, 3506, 3514, 3522, 3530, 3538, 3546, 3554, 3562, 3570, 3578, 3586, 3594, 3602, 3610, 3618, 3626, 3634, 3643, 
                            3651, 3659, 3667, 3675, 3684, 3692, 3700, 3709, 3717, 3725, 3734, 3742, 3751, 3759, 3768, 3776, 3785, 3793, 3802, 3810, 3819, 3827, 3836, 3845, 3853, 3862, 3871, 3879, 3888, 3897, 3906, 3914, 
                            3923, 3932, 3941, 3950, 3959, 3968, 3976, 3985, 3994, 4003, 4012, 4021, 4031, 4040, 4049, 4058, 4067, 4076, 4085, 4094};

MINT32 MIN(MINT32 a, MINT32 b)
{
    MINT32 output = 0;

    if (a < b)
    {
        output = a;
    }
    else
    {
        output = b;
    }

    return output;
}

MINT32 MAX(MINT32 a, MINT32 b)
{
    MINT32 output = 0;

    if (a > b)
    {
        output = a;
    }
    else
    {
        output = b;
    }

    return output;
}

typedef struct
{
    MINT32 Y[8][8][8];
	MINT32 U[8][8][8];
	MINT32 V[8][8][8];
} ANRTbl8x8x8_T;

typedef struct
{
    float Y_Mean;
	float Y_Gain;
	float Y_Range;
	float U_Mean;
	float U_Gain;
	float U_Range;
	float V_Mean;
	float V_Gain;
	float V_Range;
} ANRTblTuning_T;


//  "return value": Interpolated register value
//  "ISO":          ISO value of current image
//  "ISOpre":       A pre-defined ISO (100, 200, 400, ...) who is the cloeset but smaller than or equal to "ISO"
//  "ISOpos":       A pre-defined ISO (100, 200, 400, ...) who is the cloeset but larger than or equal to "ISO"
//  "PARAMpre":     Corresponding register value from "ISOpre"
//  "PARAMpos":     Corresponding register value from "ISOpos"
//  "Method:        0 for linear interpolation, 1 for closest one


MINT32 InterParam_1D(double Ratio_Lo, double Ratio_Up, MINT32 PARAMpre, MINT32 PARAMpos, MINT32 Method) {
    MINT32 InterPARAM = 0;

	switch(Method) {
		case 1:
			if( Ratio_Lo > Ratio_Up)
			{
				InterPARAM = PARAMpre;
			}
			else
			{
				InterPARAM = PARAMpos;
			}

			break;
		case 0:
		default:
			double temp =  (Ratio_Lo * PARAMpre + Ratio_Up * PARAMpos);
			InterPARAM = (temp > 0) ? (MINT32)(temp + 0.5) : (MINT32)(temp - 0.5);
			break;
		}

    return InterPARAM;
}


MINT32 InterParam_2D(double Ratio_L_L, double Ratio_L_U, double Ratio_U_L, double Ratio_U_U, MINT32 PARAM_L_L, MINT32 PARAM_L_U, MINT32 PARAM_U_L, MINT32 PARAM_U_U, MINT32 Method) {
    MINT32 InterPARAM = 0;


    switch(Method) {
    case 1:
        if( Ratio_L_L > Ratio_L_U)
		{
            if( Ratio_L_L > Ratio_U_L)
			{
                InterPARAM = PARAM_L_L;
        	}
        	else
			{
                InterPARAM = PARAM_U_L;
        	}
        }
        else
		{
            if( Ratio_L_L > Ratio_U_L)
			{
                InterPARAM = PARAM_L_U;
        	}
        	else
			{
                InterPARAM = PARAM_U_U;
        	}
        }
        break;
    case 0:
    default:
        double temp =  (Ratio_L_L * PARAM_L_L + Ratio_L_U * PARAM_L_U + Ratio_U_L * PARAM_U_L + Ratio_U_U * PARAM_U_U);
		InterPARAM = (temp > 0) ? (MINT32)(temp + 0.5) : (MINT32)(temp - 0.5);
        break;
    }

    return InterPARAM;
}


MINT32 CalculateLUTSP(MINT32 X0, MINT32 X1, MINT32 Y0, MINT32 Y1, MINT32 slope_base, MINT32 max_slope, MINT32 min_slope)
{
    MINT32 slope;
    double dividor = X1 - X0;
    dividor = (dividor > 1) ? dividor : 1;

    double slope_d = (double)((Y1 - Y0) * slope_base) / dividor;
    if (slope_d > 0.0)
    {
        slope = (MINT32)(slope_d + 0.5);
    }
    else
    {
        slope = (MINT32)(slope_d - 0.5);
    }

    slope = (slope > max_slope) ? max_slope : slope;
    slope = (slope < min_slope) ? min_slope : slope;

    return slope;
}

MINT32 Convert2Neg(MINT32 Input, MINT32 Range)
{
    MINT32 value = 0;
    if (Input < Range/2)
    {
        value = Input;
    }
    else
    {
        value = Input - Range;
    }

    return value;
}

MINT32 Convert2Pos(MINT32 Input, MINT32 Range)
{
    MINT32 value = 0;
    if (Input >= 0)
    {
        value = Input;
    }
    else
    {
        value = Input + Range;
    }

    return value;
}


MUINT32 Clip(MUINT32 input, MUINT32 upper, MUINT32 lower)
{
    MUINT32 output = 0;
    MUINT32 max = 0, min = 0;

    if (upper < lower)
    {
        max = lower;
        min = upper;
    }
    else
    {
        max = upper;
        min = lower;
    }

    if (input > max)
        output = max;
    else if (input < min)
        output = min;
    else
        output = input;

    return output;
}

MINT32 ClipInt32(MINT32 input, MINT32 upper, MINT32 lower)
{
    MINT32 output = 0;
    MINT32 max = 0, min = 0;

    if (upper < lower)
    {
        max = lower;
        min = upper;
    }
    else
    {
        max = upper;
        min = lower;
    }

    if (input > max)
        output = max;
    else if (input < min)
        output = min;
    else
        output = input;

    return output;
}


#define CLIP(a,b,c)   ( (a<b)?  b : ((a>c)? c: a) )

MVOID SmoothABF(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_ABF_T const& rUpperABF,   // ABF settings for upper ISO
                ISP_NVRAM_ABF_T const& rLowerABF,   // ABF settings for lower ISO
                ISP_NVRAM_ABF_T& rSmoothABF)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_abf.enable", value, "0");
    MBOOL bSmoothABFDebug = atoi(value);

    INTER_LOG_IF(bSmoothABFDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_NBC2_ABF_NSR_IDX       = rLowerABF.con1.bits.NBC2_ABF_NSR_IDX;
    MINT32 pre_NBC2_ABF_BIL_IDX       = rLowerABF.con1.bits.NBC2_ABF_BIL_IDX;
    MINT32 pre_NBC2_ABF_BF_U_OFST       = rLowerABF.con2.bits.NBC2_ABF_BF_U_OFST;
    MINT32 pre_NBC2_ABF_STHRE_B       = rLowerABF.clp.bits.NBC2_ABF_STHRE_B;
    MINT32 pre_NBC2_ABF_STHRE_G       = rLowerABF.clp.bits.NBC2_ABF_STHRE_G;
    MINT32 pre_NBC2_ABF_STHRE_R       = rLowerABF.clp.bits.NBC2_ABF_STHRE_R;
    MINT32 pos_NBC2_ABF_NSR_IDX       = rUpperABF.con1.bits.NBC2_ABF_NSR_IDX;
    MINT32 pos_NBC2_ABF_BIL_IDX       = rUpperABF.con1.bits.NBC2_ABF_BIL_IDX;
    MINT32 pos_NBC2_ABF_BF_U_OFST       = rUpperABF.con2.bits.NBC2_ABF_BF_U_OFST;
    MINT32 pos_NBC2_ABF_STHRE_B       = rUpperABF.clp.bits.NBC2_ABF_STHRE_B;
    MINT32 pos_NBC2_ABF_STHRE_G       = rUpperABF.clp.bits.NBC2_ABF_STHRE_G;
    MINT32 pos_NBC2_ABF_STHRE_R       = rUpperABF.clp.bits.NBC2_ABF_STHRE_R;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 NBC2_ABF_NSR_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_NSR_IDX, pos_NBC2_ABF_NSR_IDX, 0);
    MINT32 NBC2_ABF_BIL_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_BIL_IDX, pos_NBC2_ABF_BIL_IDX, 0);
    MINT32 NBC2_ABF_BF_U_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_BF_U_OFST, pos_NBC2_ABF_BF_U_OFST, 0);
    MINT32 NBC2_ABF_STHRE_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_STHRE_B, pos_NBC2_ABF_STHRE_B, 0);
    MINT32 NBC2_ABF_STHRE_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_STHRE_G, pos_NBC2_ABF_STHRE_G, 0);
    MINT32 NBC2_ABF_STHRE_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_ABF_STHRE_R, pos_NBC2_ABF_STHRE_R, 0);


    // interpolation result assignment
    rSmoothABF.con1.bits.NBC2_ABF_NSR_IDX       = NBC2_ABF_NSR_IDX;
    rSmoothABF.con1.bits.NBC2_ABF_BIL_IDX       = NBC2_ABF_BIL_IDX;
    rSmoothABF.con2.bits.NBC2_ABF_BF_U_OFST       = NBC2_ABF_BF_U_OFST;
    rSmoothABF.clp.bits.NBC2_ABF_STHRE_B       = NBC2_ABF_STHRE_B;
    rSmoothABF.clp.bits.NBC2_ABF_STHRE_G       = NBC2_ABF_STHRE_G;
    rSmoothABF.clp.bits.NBC2_ABF_STHRE_R       = NBC2_ABF_STHRE_R;


    // logging
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_NSR_IDX       = %d, %d, %d", rLowerABF.con1.bits.NBC2_ABF_NSR_IDX, rSmoothABF.con1.bits.NBC2_ABF_NSR_IDX, rUpperABF.con1.bits.NBC2_ABF_NSR_IDX);
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_BIL_IDX       = %d, %d, %d", rLowerABF.con1.bits.NBC2_ABF_BIL_IDX, rSmoothABF.con1.bits.NBC2_ABF_BIL_IDX, rUpperABF.con1.bits.NBC2_ABF_BIL_IDX);
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_BF_U_OFST       = %d, %d, %d", rLowerABF.con2.bits.NBC2_ABF_BF_U_OFST, rSmoothABF.con2.bits.NBC2_ABF_BF_U_OFST, rUpperABF.con2.bits.NBC2_ABF_BF_U_OFST);
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_STHRE_B       = %d, %d, %d", rLowerABF.clp.bits.NBC2_ABF_STHRE_B, rSmoothABF.clp.bits.NBC2_ABF_STHRE_B, rUpperABF.clp.bits.NBC2_ABF_STHRE_B);
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_STHRE_G       = %d, %d, %d", rLowerABF.clp.bits.NBC2_ABF_STHRE_G, rSmoothABF.clp.bits.NBC2_ABF_STHRE_G, rUpperABF.clp.bits.NBC2_ABF_STHRE_G);
    INTER_LOG_IF(bSmoothABFDebug, "[L,S,U]NBC2_ABF_STHRE_R       = %d, %d, %d", rLowerABF.clp.bits.NBC2_ABF_STHRE_R, rSmoothABF.clp.bits.NBC2_ABF_STHRE_R, rUpperABF.clp.bits.NBC2_ABF_STHRE_R);

}

MVOID SmoothADBS(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_ADBS_T const& rUpperADBS,   // ADBS settings for upper ISO
                ISP_NVRAM_ADBS_T const& rLowerADBS,   // ADBS settings for lower ISO
                ISP_NVRAM_ADBS_T& rSmoothADBS)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_adbs.enable", value, "0");
    MBOOL bSmoothADBSDebug = atoi(value);

    INTER_LOG_IF(bSmoothADBSDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_ADBS_BLD_MXRT       = rLowerADBS.gray_bld_0.bits.ADBS_BLD_MXRT;
    MINT32 pre_ADBS_LUMA_MODE       = rLowerADBS.gray_bld_0.bits.ADBS_LUMA_MODE;
    MINT32 pre_ADBS_BLD_SLP       = rLowerADBS.gray_bld_1.bits.ADBS_BLD_SLP;
    MINT32 pre_ADBS_BLD_LOW       = rLowerADBS.gray_bld_1.bits.ADBS_BLD_LOW;
    MINT32 pre_ADBS_BIAS_R0       = rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R0;
    MINT32 pre_ADBS_BIAS_R1       = rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R1;
    MINT32 pre_ADBS_BIAS_R2       = rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R2;
    MINT32 pre_ADBS_BIAS_R3       = rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R3;
    MINT32 pre_ADBS_BIAS_R4       = rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R4;
    MINT32 pre_ADBS_BIAS_R5       = rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R5;
    MINT32 pre_ADBS_BIAS_R6       = rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R6;
    MINT32 pre_ADBS_BIAS_R7       = rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R7;
    MINT32 pre_ADBS_BIAS_R8       = rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R8;
    MINT32 pre_ADBS_BIAS_R9       = rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R9;
    MINT32 pre_ADBS_BIAS_R10       = rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R10;
    MINT32 pre_ADBS_BIAS_R11       = rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R11;
    MINT32 pre_ADBS_BIAS_R12       = rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R12;
    MINT32 pre_ADBS_BIAS_R13       = rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R13;
    MINT32 pre_ADBS_BIAS_R14       = rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R14;
    MINT32 pre_ADBS_BIAS_G0       = rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G0;
    MINT32 pre_ADBS_BIAS_G1       = rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G1;
    MINT32 pre_ADBS_BIAS_G2       = rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G2;
    MINT32 pre_ADBS_BIAS_G3       = rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G3;
    MINT32 pre_ADBS_BIAS_G4       = rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G4;
    MINT32 pre_ADBS_BIAS_G5       = rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G5;
    MINT32 pre_ADBS_BIAS_G6       = rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G6;
    MINT32 pre_ADBS_BIAS_G7       = rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G7;
    MINT32 pre_ADBS_BIAS_G8       = rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G8;
    MINT32 pre_ADBS_BIAS_G9       = rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G9;
    MINT32 pre_ADBS_BIAS_G10       = rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G10;
    MINT32 pre_ADBS_BIAS_G11       = rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G11;
    MINT32 pre_ADBS_BIAS_G12       = rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G12;
    MINT32 pre_ADBS_BIAS_G13       = rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G13;
    MINT32 pre_ADBS_BIAS_G14       = rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G14;
    MINT32 pre_ADBS_BIAS_B0       = rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B0;
    MINT32 pre_ADBS_BIAS_B1       = rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B1;
    MINT32 pre_ADBS_BIAS_B2       = rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B2;
    MINT32 pre_ADBS_BIAS_B3       = rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B3;
    MINT32 pre_ADBS_BIAS_B4       = rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B4;
    MINT32 pre_ADBS_BIAS_B5       = rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B5;
    MINT32 pre_ADBS_BIAS_B6       = rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B6;
    MINT32 pre_ADBS_BIAS_B7       = rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B7;
    MINT32 pre_ADBS_BIAS_B8       = rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B8;
    MINT32 pre_ADBS_BIAS_B9       = rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B9;
    MINT32 pre_ADBS_BIAS_B10       = rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B10;
    MINT32 pre_ADBS_BIAS_B11       = rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B11;
    MINT32 pre_ADBS_BIAS_B12       = rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B12;
    MINT32 pre_ADBS_BIAS_B13       = rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B13;
    MINT32 pre_ADBS_BIAS_B14       = rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B14;
    MINT32 pos_ADBS_BLD_MXRT       = rUpperADBS.gray_bld_0.bits.ADBS_BLD_MXRT;
    MINT32 pos_ADBS_LUMA_MODE       = rUpperADBS.gray_bld_0.bits.ADBS_LUMA_MODE;
    MINT32 pos_ADBS_BLD_SLP       = rUpperADBS.gray_bld_1.bits.ADBS_BLD_SLP;
    MINT32 pos_ADBS_BLD_LOW       = rUpperADBS.gray_bld_1.bits.ADBS_BLD_LOW;
    MINT32 pos_ADBS_BIAS_R0       = rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R0;
    MINT32 pos_ADBS_BIAS_R1       = rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R1;
    MINT32 pos_ADBS_BIAS_R2       = rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R2;
    MINT32 pos_ADBS_BIAS_R3       = rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R3;
    MINT32 pos_ADBS_BIAS_R4       = rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R4;
    MINT32 pos_ADBS_BIAS_R5       = rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R5;
    MINT32 pos_ADBS_BIAS_R6       = rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R6;
    MINT32 pos_ADBS_BIAS_R7       = rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R7;
    MINT32 pos_ADBS_BIAS_R8       = rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R8;
    MINT32 pos_ADBS_BIAS_R9       = rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R9;
    MINT32 pos_ADBS_BIAS_R10       = rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R10;
    MINT32 pos_ADBS_BIAS_R11       = rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R11;
    MINT32 pos_ADBS_BIAS_R12       = rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R12;
    MINT32 pos_ADBS_BIAS_R13       = rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R13;
    MINT32 pos_ADBS_BIAS_R14       = rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R14;
    MINT32 pos_ADBS_BIAS_G0       = rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G0;
    MINT32 pos_ADBS_BIAS_G1       = rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G1;
    MINT32 pos_ADBS_BIAS_G2       = rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G2;
    MINT32 pos_ADBS_BIAS_G3       = rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G3;
    MINT32 pos_ADBS_BIAS_G4       = rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G4;
    MINT32 pos_ADBS_BIAS_G5       = rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G5;
    MINT32 pos_ADBS_BIAS_G6       = rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G6;
    MINT32 pos_ADBS_BIAS_G7       = rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G7;
    MINT32 pos_ADBS_BIAS_G8       = rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G8;
    MINT32 pos_ADBS_BIAS_G9       = rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G9;
    MINT32 pos_ADBS_BIAS_G10       = rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G10;
    MINT32 pos_ADBS_BIAS_G11       = rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G11;
    MINT32 pos_ADBS_BIAS_G12       = rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G12;
    MINT32 pos_ADBS_BIAS_G13       = rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G13;
    MINT32 pos_ADBS_BIAS_G14       = rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G14;
    MINT32 pos_ADBS_BIAS_B0       = rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B0;
    MINT32 pos_ADBS_BIAS_B1       = rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B1;
    MINT32 pos_ADBS_BIAS_B2       = rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B2;
    MINT32 pos_ADBS_BIAS_B3       = rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B3;
    MINT32 pos_ADBS_BIAS_B4       = rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B4;
    MINT32 pos_ADBS_BIAS_B5       = rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B5;
    MINT32 pos_ADBS_BIAS_B6       = rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B6;
    MINT32 pos_ADBS_BIAS_B7       = rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B7;
    MINT32 pos_ADBS_BIAS_B8       = rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B8;
    MINT32 pos_ADBS_BIAS_B9       = rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B9;
    MINT32 pos_ADBS_BIAS_B10       = rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B10;
    MINT32 pos_ADBS_BIAS_B11       = rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B11;
    MINT32 pos_ADBS_BIAS_B12       = rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B12;
    MINT32 pos_ADBS_BIAS_B13       = rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B13;
    MINT32 pos_ADBS_BIAS_B14       = rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B14;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 ADBS_BLD_MXRT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BLD_MXRT, pos_ADBS_BLD_MXRT, 0);
    MINT32 ADBS_LUMA_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_LUMA_MODE, pos_ADBS_LUMA_MODE, 0);
    MINT32 ADBS_BLD_SLP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BLD_SLP, pos_ADBS_BLD_SLP, 0);
    MINT32 ADBS_BLD_LOW       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BLD_LOW, pos_ADBS_BLD_LOW, 0);
    MINT32 ADBS_BIAS_R0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R0, pos_ADBS_BIAS_R0, 0);
    MINT32 ADBS_BIAS_R1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R1, pos_ADBS_BIAS_R1, 0);
    MINT32 ADBS_BIAS_R2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R2, pos_ADBS_BIAS_R2, 0);
    MINT32 ADBS_BIAS_R3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R3, pos_ADBS_BIAS_R3, 0);
    MINT32 ADBS_BIAS_R4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R4, pos_ADBS_BIAS_R4, 0);
    MINT32 ADBS_BIAS_R5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R5, pos_ADBS_BIAS_R5, 0);
    MINT32 ADBS_BIAS_R6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R6, pos_ADBS_BIAS_R6, 0);
    MINT32 ADBS_BIAS_R7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R7, pos_ADBS_BIAS_R7, 0);
    MINT32 ADBS_BIAS_R8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R8, pos_ADBS_BIAS_R8, 0);
    MINT32 ADBS_BIAS_R9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R9, pos_ADBS_BIAS_R9, 0);
    MINT32 ADBS_BIAS_R10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R10, pos_ADBS_BIAS_R10, 0);
    MINT32 ADBS_BIAS_R11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R11, pos_ADBS_BIAS_R11, 0);
    MINT32 ADBS_BIAS_R12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R12, pos_ADBS_BIAS_R12, 0);
    MINT32 ADBS_BIAS_R13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R13, pos_ADBS_BIAS_R13, 0);
    MINT32 ADBS_BIAS_R14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_R14, pos_ADBS_BIAS_R14, 0);
    MINT32 ADBS_BIAS_G0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G0, pos_ADBS_BIAS_G0, 0);
    MINT32 ADBS_BIAS_G1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G1, pos_ADBS_BIAS_G1, 0);
    MINT32 ADBS_BIAS_G2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G2, pos_ADBS_BIAS_G2, 0);
    MINT32 ADBS_BIAS_G3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G3, pos_ADBS_BIAS_G3, 0);
    MINT32 ADBS_BIAS_G4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G4, pos_ADBS_BIAS_G4, 0);
    MINT32 ADBS_BIAS_G5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G5, pos_ADBS_BIAS_G5, 0);
    MINT32 ADBS_BIAS_G6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G6, pos_ADBS_BIAS_G6, 0);
    MINT32 ADBS_BIAS_G7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G7, pos_ADBS_BIAS_G7, 0);
    MINT32 ADBS_BIAS_G8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G8, pos_ADBS_BIAS_G8, 0);
    MINT32 ADBS_BIAS_G9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G9, pos_ADBS_BIAS_G9, 0);
    MINT32 ADBS_BIAS_G10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G10, pos_ADBS_BIAS_G10, 0);
    MINT32 ADBS_BIAS_G11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G11, pos_ADBS_BIAS_G11, 0);
    MINT32 ADBS_BIAS_G12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G12, pos_ADBS_BIAS_G12, 0);
    MINT32 ADBS_BIAS_G13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G13, pos_ADBS_BIAS_G13, 0);
    MINT32 ADBS_BIAS_G14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_G14, pos_ADBS_BIAS_G14, 0);
    MINT32 ADBS_BIAS_B0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B0, pos_ADBS_BIAS_B0, 0);
    MINT32 ADBS_BIAS_B1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B1, pos_ADBS_BIAS_B1, 0);
    MINT32 ADBS_BIAS_B2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B2, pos_ADBS_BIAS_B2, 0);
    MINT32 ADBS_BIAS_B3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B3, pos_ADBS_BIAS_B3, 0);
    MINT32 ADBS_BIAS_B4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B4, pos_ADBS_BIAS_B4, 0);
    MINT32 ADBS_BIAS_B5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B5, pos_ADBS_BIAS_B5, 0);
    MINT32 ADBS_BIAS_B6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B6, pos_ADBS_BIAS_B6, 0);
    MINT32 ADBS_BIAS_B7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B7, pos_ADBS_BIAS_B7, 0);
    MINT32 ADBS_BIAS_B8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B8, pos_ADBS_BIAS_B8, 0);
    MINT32 ADBS_BIAS_B9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B9, pos_ADBS_BIAS_B9, 0);
    MINT32 ADBS_BIAS_B10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B10, pos_ADBS_BIAS_B10, 0);
    MINT32 ADBS_BIAS_B11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B11, pos_ADBS_BIAS_B11, 0);
    MINT32 ADBS_BIAS_B12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B12, pos_ADBS_BIAS_B12, 0);
    MINT32 ADBS_BIAS_B13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B13, pos_ADBS_BIAS_B13, 0);
    MINT32 ADBS_BIAS_B14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ADBS_BIAS_B14, pos_ADBS_BIAS_B14, 0);


    // interpolation result assignment
    rSmoothADBS.gray_bld_0.bits.ADBS_BLD_MXRT       = ADBS_BLD_MXRT;
    rSmoothADBS.gray_bld_0.bits.ADBS_LUMA_MODE       = ADBS_LUMA_MODE;
    rSmoothADBS.gray_bld_1.bits.ADBS_BLD_SLP       = ADBS_BLD_SLP;
    rSmoothADBS.gray_bld_1.bits.ADBS_BLD_LOW       = ADBS_BLD_LOW;
    rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R0       = ADBS_BIAS_R0;
    rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R1       = ADBS_BIAS_R1;
    rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R2       = ADBS_BIAS_R2;
    rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R3       = ADBS_BIAS_R3;
    rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R4       = ADBS_BIAS_R4;
    rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R5       = ADBS_BIAS_R5;
    rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R6       = ADBS_BIAS_R6;
    rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R7       = ADBS_BIAS_R7;
    rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R8       = ADBS_BIAS_R8;
    rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R9       = ADBS_BIAS_R9;
    rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R10       = ADBS_BIAS_R10;
    rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R11       = ADBS_BIAS_R11;
    rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R12       = ADBS_BIAS_R12;
    rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R13       = ADBS_BIAS_R13;
    rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R14       = ADBS_BIAS_R14;
    rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G0       = ADBS_BIAS_G0;
    rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G1       = ADBS_BIAS_G1;
    rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G2       = ADBS_BIAS_G2;
    rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G3       = ADBS_BIAS_G3;
    rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G4       = ADBS_BIAS_G4;
    rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G5       = ADBS_BIAS_G5;
    rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G6       = ADBS_BIAS_G6;
    rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G7       = ADBS_BIAS_G7;
    rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G8       = ADBS_BIAS_G8;
    rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G9       = ADBS_BIAS_G9;
    rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G10       = ADBS_BIAS_G10;
    rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G11       = ADBS_BIAS_G11;
    rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G12       = ADBS_BIAS_G12;
    rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G13       = ADBS_BIAS_G13;
    rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G14       = ADBS_BIAS_G14;
    rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B0       = ADBS_BIAS_B0;
    rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B1       = ADBS_BIAS_B1;
    rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B2       = ADBS_BIAS_B2;
    rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B3       = ADBS_BIAS_B3;
    rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B4       = ADBS_BIAS_B4;
    rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B5       = ADBS_BIAS_B5;
    rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B6       = ADBS_BIAS_B6;
    rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B7       = ADBS_BIAS_B7;
    rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B8       = ADBS_BIAS_B8;
    rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B9       = ADBS_BIAS_B9;
    rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B10       = ADBS_BIAS_B10;
    rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B11       = ADBS_BIAS_B11;
    rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B12       = ADBS_BIAS_B12;
    rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B13       = ADBS_BIAS_B13;
    rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B14       = ADBS_BIAS_B14;


    // logging
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BLD_MXRT       = %d, %d, %d", rLowerADBS.gray_bld_0.bits.ADBS_BLD_MXRT, rSmoothADBS.gray_bld_0.bits.ADBS_BLD_MXRT, rUpperADBS.gray_bld_0.bits.ADBS_BLD_MXRT);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_LUMA_MODE       = %d, %d, %d", rLowerADBS.gray_bld_0.bits.ADBS_LUMA_MODE, rSmoothADBS.gray_bld_0.bits.ADBS_LUMA_MODE, rUpperADBS.gray_bld_0.bits.ADBS_LUMA_MODE);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BLD_SLP       = %d, %d, %d", rLowerADBS.gray_bld_1.bits.ADBS_BLD_SLP, rSmoothADBS.gray_bld_1.bits.ADBS_BLD_SLP, rUpperADBS.gray_bld_1.bits.ADBS_BLD_SLP);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BLD_LOW       = %d, %d, %d", rLowerADBS.gray_bld_1.bits.ADBS_BLD_LOW, rSmoothADBS.gray_bld_1.bits.ADBS_BLD_LOW, rUpperADBS.gray_bld_1.bits.ADBS_BLD_LOW);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R0       = %d, %d, %d", rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R0, rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R0, rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R0);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R1       = %d, %d, %d", rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R1, rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R1, rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R1);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R2       = %d, %d, %d", rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R2, rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R2, rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R2);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R3       = %d, %d, %d", rLowerADBS.bias_lut_r0.bits.ADBS_BIAS_R3, rSmoothADBS.bias_lut_r0.bits.ADBS_BIAS_R3, rUpperADBS.bias_lut_r0.bits.ADBS_BIAS_R3);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R4       = %d, %d, %d", rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R4, rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R4, rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R4);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R5       = %d, %d, %d", rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R5, rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R5, rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R5);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R6       = %d, %d, %d", rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R6, rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R6, rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R6);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R7       = %d, %d, %d", rLowerADBS.bias_lut_r1.bits.ADBS_BIAS_R7, rSmoothADBS.bias_lut_r1.bits.ADBS_BIAS_R7, rUpperADBS.bias_lut_r1.bits.ADBS_BIAS_R7);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R8       = %d, %d, %d", rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R8, rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R8, rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R8);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R9       = %d, %d, %d", rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R9, rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R9, rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R9);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R10       = %d, %d, %d", rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R10, rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R10, rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R10);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R11       = %d, %d, %d", rLowerADBS.bias_lut_r2.bits.ADBS_BIAS_R11, rSmoothADBS.bias_lut_r2.bits.ADBS_BIAS_R11, rUpperADBS.bias_lut_r2.bits.ADBS_BIAS_R11);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R12       = %d, %d, %d", rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R12, rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R12, rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R12);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R13       = %d, %d, %d", rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R13, rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R13, rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R13);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_R14       = %d, %d, %d", rLowerADBS.bias_lut_r3.bits.ADBS_BIAS_R14, rSmoothADBS.bias_lut_r3.bits.ADBS_BIAS_R14, rUpperADBS.bias_lut_r3.bits.ADBS_BIAS_R14);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G0       = %d, %d, %d", rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G0, rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G0, rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G0);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G1       = %d, %d, %d", rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G1, rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G1, rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G1);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G2       = %d, %d, %d", rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G2, rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G2, rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G2);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G3       = %d, %d, %d", rLowerADBS.bias_lut_g0.bits.ADBS_BIAS_G3, rSmoothADBS.bias_lut_g0.bits.ADBS_BIAS_G3, rUpperADBS.bias_lut_g0.bits.ADBS_BIAS_G3);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G4       = %d, %d, %d", rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G4, rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G4, rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G4);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G5       = %d, %d, %d", rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G5, rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G5, rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G5);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G6       = %d, %d, %d", rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G6, rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G6, rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G6);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G7       = %d, %d, %d", rLowerADBS.bias_lut_g1.bits.ADBS_BIAS_G7, rSmoothADBS.bias_lut_g1.bits.ADBS_BIAS_G7, rUpperADBS.bias_lut_g1.bits.ADBS_BIAS_G7);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G8       = %d, %d, %d", rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G8, rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G8, rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G8);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G9       = %d, %d, %d", rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G9, rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G9, rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G9);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G10       = %d, %d, %d", rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G10, rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G10, rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G10);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G11       = %d, %d, %d", rLowerADBS.bias_lut_g2.bits.ADBS_BIAS_G11, rSmoothADBS.bias_lut_g2.bits.ADBS_BIAS_G11, rUpperADBS.bias_lut_g2.bits.ADBS_BIAS_G11);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G12       = %d, %d, %d", rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G12, rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G12, rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G12);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G13       = %d, %d, %d", rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G13, rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G13, rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G13);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_G14       = %d, %d, %d", rLowerADBS.bias_lut_g3.bits.ADBS_BIAS_G14, rSmoothADBS.bias_lut_g3.bits.ADBS_BIAS_G14, rUpperADBS.bias_lut_g3.bits.ADBS_BIAS_G14);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B0       = %d, %d, %d", rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B0, rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B0, rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B0);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B1       = %d, %d, %d", rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B1, rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B1, rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B1);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B2       = %d, %d, %d", rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B2, rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B2, rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B2);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B3       = %d, %d, %d", rLowerADBS.bias_lut_b0.bits.ADBS_BIAS_B3, rSmoothADBS.bias_lut_b0.bits.ADBS_BIAS_B3, rUpperADBS.bias_lut_b0.bits.ADBS_BIAS_B3);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B4       = %d, %d, %d", rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B4, rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B4, rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B4);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B5       = %d, %d, %d", rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B5, rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B5, rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B5);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B6       = %d, %d, %d", rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B6, rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B6, rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B6);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B7       = %d, %d, %d", rLowerADBS.bias_lut_b1.bits.ADBS_BIAS_B7, rSmoothADBS.bias_lut_b1.bits.ADBS_BIAS_B7, rUpperADBS.bias_lut_b1.bits.ADBS_BIAS_B7);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B8       = %d, %d, %d", rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B8, rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B8, rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B8);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B9       = %d, %d, %d", rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B9, rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B9, rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B9);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B10       = %d, %d, %d", rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B10, rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B10, rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B10);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B11       = %d, %d, %d", rLowerADBS.bias_lut_b2.bits.ADBS_BIAS_B11, rSmoothADBS.bias_lut_b2.bits.ADBS_BIAS_B11, rUpperADBS.bias_lut_b2.bits.ADBS_BIAS_B11);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B12       = %d, %d, %d", rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B12, rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B12, rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B12);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B13       = %d, %d, %d", rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B13, rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B13, rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B13);
    INTER_LOG_IF(bSmoothADBSDebug, "[L,S,U]ADBS_BIAS_B14       = %d, %d, %d", rLowerADBS.bias_lut_b3.bits.ADBS_BIAS_B14, rSmoothADBS.bias_lut_b3.bits.ADBS_BIAS_B14, rUpperADBS.bias_lut_b3.bits.ADBS_BIAS_B14);

}

MVOID SmoothANR2(ISP_NVRAM_ANR2_INT_T const& rParam,   // ANR2 settings
                ISP_NVRAM_ANR2_T& rSmoothANR2)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_anr2.enable", value, "0");
    MBOOL bSmoothANR2Debug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothANR2Debug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothANR2Debug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 NBC2_ANR2_SCALE_MODE_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_SCALE_MODE;
    MINT32 NBC2_ANR2_PTC_GAIN_TH_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH;
    MINT32 NBC2_ANR2_PTC1_L_L		= rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC1;
    MINT32 NBC2_ANR2_PTC2_L_L		= rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC2;
    MINT32 NBC2_ANR2_PTC3_L_L		= rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC3;
    MINT32 NBC2_ANR2_PTC4_L_L		= rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC4;
    MINT32 NBC2_ANR2_PTC_VGAIN_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_VGAIN;
    MINT32 NBC2_ANR2_VAR_L_L		= rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_VAR;
    MINT32 NBC2_ANR2_LM_WT_L_L		= rParam.rLowerIso_LowerZoom.sl2.bits.NBC2_ANR2_LM_WT;
    MINT32 NBC2_ANR2_Y0_L_L		= rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_Y0;
    MINT32 NBC2_ANR2_Y1_L_L		= rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y1;
    MINT32 NBC2_ANR2_Y2_L_L		= rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y2;
    MINT32 NBC2_ANR2_Y3_L_L		= rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y3;
    MINT32 NBC2_ANR2_Y4_L_L		= rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y4;
    MINT32 NBC2_ANR2_COR_TH_L_L		= rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_COR_TH;
    MINT32 NBC2_ANR2_MCD_TH_L_L		= rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_TH;
    MINT32 NBC2_ANR2_LCL_TH_L_L		= rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_LCL_TH;
    MINT32 NBC2_ANR2_SCL_TH_L_L		= rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_TH;
    MINT32 NBC2_ANR2_NCL_TH_L_L		= rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_TH;
    MINT32 NBC2_ANR2_COR_SL_L_L		= rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_COR_SL;
    MINT32 NBC2_ANR2_MCD_SL_L_L		= rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_SL;
    MINT32 NBC2_ANR2_LCL_SL_L_L		= rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_SL;
    MINT32 NBC2_ANR2_SCL_SL_L_L		= rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_SL;
    MINT32 NBC2_ANR2_NCL_SL_L_L		= rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_SL;
    MINT32 NBC2_ANR2_LCL_LV_L_L		= rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_LV;
    MINT32 NBC2_ANR2_SCL_LV_L_L		= rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_LV;
    MINT32 NBC2_ANR2_NCL_LV_L_L		= rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_LV;
    MINT32 NBC2_ANR2_LCL_OFT_L_L		= rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_LCL_OFT;
    MINT32 NBC2_ANR2_SCL_OFT_L_L		= rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_SCL_OFT;
    MINT32 NBC2_ANR2_NCL_OFT_L_L		= rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_NCL_OFT;
    MINT32 NBC2_ANR2_Y_CPX1_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1;
    MINT32 NBC2_ANR2_Y_CPX2_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2;
    MINT32 NBC2_ANR2_Y_CPX3_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3;
    MINT32 NBC2_ANR2_Y_SCALE_CPY0_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0;
    MINT32 NBC2_ANR2_Y_SCALE_CPY1_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1;
    MINT32 NBC2_ANR2_Y_SCALE_CPY2_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2;
    MINT32 NBC2_ANR2_Y_SCALE_CPY3_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3;
    MINT32 NBC2_ANR2_SL2_X1_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X1;
    MINT32 NBC2_ANR2_SL2_X2_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X2;
    MINT32 NBC2_ANR2_SL2_X3_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X3;
    MINT32 NBC2_ANR2_SL2_GAIN0_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0;
    MINT32 NBC2_ANR2_SL2_GAIN1_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1;
    MINT32 NBC2_ANR2_SL2_GAIN2_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2;
    MINT32 NBC2_ANR2_SL2_GAIN3_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3;
    MINT32 NBC2_ANR2_SL2_C_GAIN_L_L		= rParam.rLowerIso_LowerZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN;
    MINT32 NBC2_ANR2_C_L_DIFF_TH_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH;
    MINT32 NBC2_ANR2_C_SM_EDGE_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC2_ANR2_C_SM_EDGE;
    MINT32 NBC2_ANR2_K_TH_C_L_L		= rParam.rLowerIso_LowerZoom.yad1.bits.NBC2_ANR2_K_TH_C;
    MINT32 NBC2_ANR2_C_DITH_V_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_V;
    MINT32 NBC2_ANR2_C_DITH_U_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_U;
    MINT32 NBC2_ANR2_ACT_BLD_BASE_C_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C;
    MINT32 NBC2_ANR2_ENY_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_ENY;
    MINT32 NBC2_ANR2_ENC_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_ENC;
    MINT32 NBC2_ANR2_MODE_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_MODE;
    MINT32 NBC2_ANR2_VER_C_REF_Y_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y;
    MINT32 NBC2_ANR2_C_MODE_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_C_MODE;
    MINT32 NBC2_ANR2_SL2_LINK_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_SL2_LINK;
    MINT32 NBC2_ANR2_FLT_C_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC2_ANR2_FLT_C;

    MINT32 NBC2_ANR2_SCALE_MODE_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_SCALE_MODE;
    MINT32 NBC2_ANR2_PTC_GAIN_TH_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH;
    MINT32 NBC2_ANR2_PTC1_L_U		= rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC1;
    MINT32 NBC2_ANR2_PTC2_L_U		= rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC2;
    MINT32 NBC2_ANR2_PTC3_L_U		= rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC3;
    MINT32 NBC2_ANR2_PTC4_L_U		= rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC4;
    MINT32 NBC2_ANR2_PTC_VGAIN_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_VGAIN;
    MINT32 NBC2_ANR2_VAR_L_U		= rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_VAR;
    MINT32 NBC2_ANR2_LM_WT_L_U		= rParam.rLowerIso_UpperZoom.sl2.bits.NBC2_ANR2_LM_WT;
    MINT32 NBC2_ANR2_Y0_L_U		= rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_Y0;
    MINT32 NBC2_ANR2_Y1_L_U		= rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y1;
    MINT32 NBC2_ANR2_Y2_L_U		= rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y2;
    MINT32 NBC2_ANR2_Y3_L_U		= rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y3;
    MINT32 NBC2_ANR2_Y4_L_U		= rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y4;
    MINT32 NBC2_ANR2_COR_TH_L_U		= rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_COR_TH;
    MINT32 NBC2_ANR2_MCD_TH_L_U		= rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_TH;
    MINT32 NBC2_ANR2_LCL_TH_L_U		= rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_LCL_TH;
    MINT32 NBC2_ANR2_SCL_TH_L_U		= rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_TH;
    MINT32 NBC2_ANR2_NCL_TH_L_U		= rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_TH;
    MINT32 NBC2_ANR2_COR_SL_L_U		= rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_COR_SL;
    MINT32 NBC2_ANR2_MCD_SL_L_U		= rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_SL;
    MINT32 NBC2_ANR2_LCL_SL_L_U		= rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_SL;
    MINT32 NBC2_ANR2_SCL_SL_L_U		= rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_SL;
    MINT32 NBC2_ANR2_NCL_SL_L_U		= rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_SL;
    MINT32 NBC2_ANR2_LCL_LV_L_U		= rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_LV;
    MINT32 NBC2_ANR2_SCL_LV_L_U		= rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_LV;
    MINT32 NBC2_ANR2_NCL_LV_L_U		= rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_LV;
    MINT32 NBC2_ANR2_LCL_OFT_L_U		= rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_LCL_OFT;
    MINT32 NBC2_ANR2_SCL_OFT_L_U		= rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_SCL_OFT;
    MINT32 NBC2_ANR2_NCL_OFT_L_U		= rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_NCL_OFT;
    MINT32 NBC2_ANR2_Y_CPX1_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1;
    MINT32 NBC2_ANR2_Y_CPX2_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2;
    MINT32 NBC2_ANR2_Y_CPX3_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3;
    MINT32 NBC2_ANR2_Y_SCALE_CPY0_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0;
    MINT32 NBC2_ANR2_Y_SCALE_CPY1_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1;
    MINT32 NBC2_ANR2_Y_SCALE_CPY2_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2;
    MINT32 NBC2_ANR2_Y_SCALE_CPY3_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3;
    MINT32 NBC2_ANR2_SL2_X1_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X1;
    MINT32 NBC2_ANR2_SL2_X2_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X2;
    MINT32 NBC2_ANR2_SL2_X3_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X3;
    MINT32 NBC2_ANR2_SL2_GAIN0_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0;
    MINT32 NBC2_ANR2_SL2_GAIN1_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1;
    MINT32 NBC2_ANR2_SL2_GAIN2_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2;
    MINT32 NBC2_ANR2_SL2_GAIN3_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3;
    MINT32 NBC2_ANR2_SL2_C_GAIN_L_U		= rParam.rLowerIso_UpperZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN;
    MINT32 NBC2_ANR2_C_L_DIFF_TH_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH;
    MINT32 NBC2_ANR2_C_SM_EDGE_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC2_ANR2_C_SM_EDGE;
    MINT32 NBC2_ANR2_K_TH_C_L_U		= rParam.rLowerIso_UpperZoom.yad1.bits.NBC2_ANR2_K_TH_C;
    MINT32 NBC2_ANR2_C_DITH_V_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_V;
    MINT32 NBC2_ANR2_C_DITH_U_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_U;
    MINT32 NBC2_ANR2_ACT_BLD_BASE_C_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C;
    MINT32 NBC2_ANR2_ENY_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_ENY;
    MINT32 NBC2_ANR2_ENC_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_ENC;
    MINT32 NBC2_ANR2_MODE_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_MODE;
    MINT32 NBC2_ANR2_VER_C_REF_Y_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y;
    MINT32 NBC2_ANR2_C_MODE_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_C_MODE;
    MINT32 NBC2_ANR2_SL2_LINK_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_SL2_LINK;
    MINT32 NBC2_ANR2_FLT_C_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC2_ANR2_FLT_C;

    MINT32 NBC2_ANR2_SCALE_MODE_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_SCALE_MODE;
    MINT32 NBC2_ANR2_PTC_GAIN_TH_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH;
    MINT32 NBC2_ANR2_PTC1_U_L		= rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC1;
    MINT32 NBC2_ANR2_PTC2_U_L		= rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC2;
    MINT32 NBC2_ANR2_PTC3_U_L		= rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC3;
    MINT32 NBC2_ANR2_PTC4_U_L		= rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC4;
    MINT32 NBC2_ANR2_PTC_VGAIN_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_VGAIN;
    MINT32 NBC2_ANR2_VAR_U_L		= rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_VAR;
    MINT32 NBC2_ANR2_LM_WT_U_L		= rParam.rUpperIso_LowerZoom.sl2.bits.NBC2_ANR2_LM_WT;
    MINT32 NBC2_ANR2_Y0_U_L		= rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_Y0;
    MINT32 NBC2_ANR2_Y1_U_L		= rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y1;
    MINT32 NBC2_ANR2_Y2_U_L		= rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y2;
    MINT32 NBC2_ANR2_Y3_U_L		= rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y3;
    MINT32 NBC2_ANR2_Y4_U_L		= rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y4;
    MINT32 NBC2_ANR2_COR_TH_U_L		= rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_COR_TH;
    MINT32 NBC2_ANR2_MCD_TH_U_L		= rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_TH;
    MINT32 NBC2_ANR2_LCL_TH_U_L		= rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_LCL_TH;
    MINT32 NBC2_ANR2_SCL_TH_U_L		= rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_TH;
    MINT32 NBC2_ANR2_NCL_TH_U_L		= rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_TH;
    MINT32 NBC2_ANR2_COR_SL_U_L		= rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_COR_SL;
    MINT32 NBC2_ANR2_MCD_SL_U_L		= rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_SL;
    MINT32 NBC2_ANR2_LCL_SL_U_L		= rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_SL;
    MINT32 NBC2_ANR2_SCL_SL_U_L		= rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_SL;
    MINT32 NBC2_ANR2_NCL_SL_U_L		= rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_SL;
    MINT32 NBC2_ANR2_LCL_LV_U_L		= rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_LV;
    MINT32 NBC2_ANR2_SCL_LV_U_L		= rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_LV;
    MINT32 NBC2_ANR2_NCL_LV_U_L		= rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_LV;
    MINT32 NBC2_ANR2_LCL_OFT_U_L		= rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_LCL_OFT;
    MINT32 NBC2_ANR2_SCL_OFT_U_L		= rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_SCL_OFT;
    MINT32 NBC2_ANR2_NCL_OFT_U_L		= rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_NCL_OFT;
    MINT32 NBC2_ANR2_Y_CPX1_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1;
    MINT32 NBC2_ANR2_Y_CPX2_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2;
    MINT32 NBC2_ANR2_Y_CPX3_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3;
    MINT32 NBC2_ANR2_Y_SCALE_CPY0_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0;
    MINT32 NBC2_ANR2_Y_SCALE_CPY1_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1;
    MINT32 NBC2_ANR2_Y_SCALE_CPY2_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2;
    MINT32 NBC2_ANR2_Y_SCALE_CPY3_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3;
    MINT32 NBC2_ANR2_SL2_X1_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X1;
    MINT32 NBC2_ANR2_SL2_X2_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X2;
    MINT32 NBC2_ANR2_SL2_X3_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X3;
    MINT32 NBC2_ANR2_SL2_GAIN0_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0;
    MINT32 NBC2_ANR2_SL2_GAIN1_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1;
    MINT32 NBC2_ANR2_SL2_GAIN2_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2;
    MINT32 NBC2_ANR2_SL2_GAIN3_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3;
    MINT32 NBC2_ANR2_SL2_C_GAIN_U_L		= rParam.rUpperIso_LowerZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN;
    MINT32 NBC2_ANR2_C_L_DIFF_TH_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH;
    MINT32 NBC2_ANR2_C_SM_EDGE_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC2_ANR2_C_SM_EDGE;
    MINT32 NBC2_ANR2_K_TH_C_U_L		= rParam.rUpperIso_LowerZoom.yad1.bits.NBC2_ANR2_K_TH_C;
    MINT32 NBC2_ANR2_C_DITH_V_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_V;
    MINT32 NBC2_ANR2_C_DITH_U_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_U;
    MINT32 NBC2_ANR2_ACT_BLD_BASE_C_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C;
    MINT32 NBC2_ANR2_ENY_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_ENY;
    MINT32 NBC2_ANR2_ENC_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_ENC;
    MINT32 NBC2_ANR2_MODE_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_MODE;
    MINT32 NBC2_ANR2_VER_C_REF_Y_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y;
    MINT32 NBC2_ANR2_C_MODE_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_C_MODE;
    MINT32 NBC2_ANR2_SL2_LINK_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_SL2_LINK;
    MINT32 NBC2_ANR2_FLT_C_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC2_ANR2_FLT_C;

    MINT32 NBC2_ANR2_SCALE_MODE_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_SCALE_MODE;
    MINT32 NBC2_ANR2_PTC_GAIN_TH_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH;
    MINT32 NBC2_ANR2_PTC1_U_U		= rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC1;
    MINT32 NBC2_ANR2_PTC2_U_U		= rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC2;
    MINT32 NBC2_ANR2_PTC3_U_U		= rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC3;
    MINT32 NBC2_ANR2_PTC4_U_U		= rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC4;
    MINT32 NBC2_ANR2_PTC_VGAIN_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_VGAIN;
    MINT32 NBC2_ANR2_VAR_U_U		= rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_VAR;
    MINT32 NBC2_ANR2_LM_WT_U_U		= rParam.rUpperIso_UpperZoom.sl2.bits.NBC2_ANR2_LM_WT;
    MINT32 NBC2_ANR2_Y0_U_U		= rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_Y0;
    MINT32 NBC2_ANR2_Y1_U_U		= rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y1;
    MINT32 NBC2_ANR2_Y2_U_U		= rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y2;
    MINT32 NBC2_ANR2_Y3_U_U		= rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y3;
    MINT32 NBC2_ANR2_Y4_U_U		= rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y4;
    MINT32 NBC2_ANR2_COR_TH_U_U		= rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_COR_TH;
    MINT32 NBC2_ANR2_MCD_TH_U_U		= rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_TH;
    MINT32 NBC2_ANR2_LCL_TH_U_U		= rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_LCL_TH;
    MINT32 NBC2_ANR2_SCL_TH_U_U		= rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_TH;
    MINT32 NBC2_ANR2_NCL_TH_U_U		= rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_TH;
    MINT32 NBC2_ANR2_COR_SL_U_U		= rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_COR_SL;
    MINT32 NBC2_ANR2_MCD_SL_U_U		= rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_SL;
    MINT32 NBC2_ANR2_LCL_SL_U_U		= rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_SL;
    MINT32 NBC2_ANR2_SCL_SL_U_U		= rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_SL;
    MINT32 NBC2_ANR2_NCL_SL_U_U		= rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_SL;
    MINT32 NBC2_ANR2_LCL_LV_U_U		= rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_LV;
    MINT32 NBC2_ANR2_SCL_LV_U_U		= rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_LV;
    MINT32 NBC2_ANR2_NCL_LV_U_U		= rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_LV;
    MINT32 NBC2_ANR2_LCL_OFT_U_U		= rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_LCL_OFT;
    MINT32 NBC2_ANR2_SCL_OFT_U_U		= rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_SCL_OFT;
    MINT32 NBC2_ANR2_NCL_OFT_U_U		= rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_NCL_OFT;
    MINT32 NBC2_ANR2_Y_CPX1_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1;
    MINT32 NBC2_ANR2_Y_CPX2_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2;
    MINT32 NBC2_ANR2_Y_CPX3_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3;
    MINT32 NBC2_ANR2_Y_SCALE_CPY0_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0;
    MINT32 NBC2_ANR2_Y_SCALE_CPY1_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1;
    MINT32 NBC2_ANR2_Y_SCALE_CPY2_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2;
    MINT32 NBC2_ANR2_Y_SCALE_CPY3_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3;
    MINT32 NBC2_ANR2_SL2_X1_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X1;
    MINT32 NBC2_ANR2_SL2_X2_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X2;
    MINT32 NBC2_ANR2_SL2_X3_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X3;
    MINT32 NBC2_ANR2_SL2_GAIN0_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0;
    MINT32 NBC2_ANR2_SL2_GAIN1_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1;
    MINT32 NBC2_ANR2_SL2_GAIN2_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2;
    MINT32 NBC2_ANR2_SL2_GAIN3_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3;
    MINT32 NBC2_ANR2_SL2_C_GAIN_U_U		= rParam.rUpperIso_UpperZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN;
    MINT32 NBC2_ANR2_C_L_DIFF_TH_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH;
    MINT32 NBC2_ANR2_C_SM_EDGE_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC2_ANR2_C_SM_EDGE;
    MINT32 NBC2_ANR2_K_TH_C_U_U		= rParam.rUpperIso_UpperZoom.yad1.bits.NBC2_ANR2_K_TH_C;
    MINT32 NBC2_ANR2_C_DITH_V_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_V;
    MINT32 NBC2_ANR2_C_DITH_U_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_U;
    MINT32 NBC2_ANR2_ACT_BLD_BASE_C_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C;
    MINT32 NBC2_ANR2_ENY_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_ENY;
    MINT32 NBC2_ANR2_ENC_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_ENC;
    MINT32 NBC2_ANR2_MODE_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_MODE;
    MINT32 NBC2_ANR2_VER_C_REF_Y_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y;
    MINT32 NBC2_ANR2_C_MODE_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_C_MODE;
    MINT32 NBC2_ANR2_SL2_LINK_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_SL2_LINK;
    MINT32 NBC2_ANR2_FLT_C_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC2_ANR2_FLT_C;


    // interpolation core
    MINT32 NBC2_ANR2_SCALE_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SCALE_MODE_L_L, NBC2_ANR2_SCALE_MODE_L_U, NBC2_ANR2_SCALE_MODE_U_L, NBC2_ANR2_SCALE_MODE_U_U, 4);
    MINT32 NBC2_ANR2_PTC_GAIN_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC_GAIN_TH_L_L, NBC2_ANR2_PTC_GAIN_TH_L_U, NBC2_ANR2_PTC_GAIN_TH_U_L, NBC2_ANR2_PTC_GAIN_TH_U_U, 4);
    MINT32 NBC2_ANR2_PTC1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC1_L_L, NBC2_ANR2_PTC1_L_U, NBC2_ANR2_PTC1_U_L, NBC2_ANR2_PTC1_U_U, 4);
    MINT32 NBC2_ANR2_PTC2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC2_L_L, NBC2_ANR2_PTC2_L_U, NBC2_ANR2_PTC2_U_L, NBC2_ANR2_PTC2_U_U, 4);
    MINT32 NBC2_ANR2_PTC3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC3_L_L, NBC2_ANR2_PTC3_L_U, NBC2_ANR2_PTC3_U_L, NBC2_ANR2_PTC3_U_U, 4);
    MINT32 NBC2_ANR2_PTC4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC4_L_L, NBC2_ANR2_PTC4_L_U, NBC2_ANR2_PTC4_U_L, NBC2_ANR2_PTC4_U_U, 4);
    MINT32 NBC2_ANR2_PTC_VGAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_PTC_VGAIN_L_L, NBC2_ANR2_PTC_VGAIN_L_U, NBC2_ANR2_PTC_VGAIN_U_L, NBC2_ANR2_PTC_VGAIN_U_U, 4);
    MINT32 NBC2_ANR2_VAR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_VAR_L_L, NBC2_ANR2_VAR_L_U, NBC2_ANR2_VAR_U_L, NBC2_ANR2_VAR_U_U, 4);
    MINT32 NBC2_ANR2_LM_WT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_LM_WT_L_L, NBC2_ANR2_LM_WT_L_U, NBC2_ANR2_LM_WT_U_L, NBC2_ANR2_LM_WT_U_U, 4);
    MINT32 NBC2_ANR2_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y0_L_L, NBC2_ANR2_Y0_L_U, NBC2_ANR2_Y0_U_L, NBC2_ANR2_Y0_U_U, 4);
    MINT32 NBC2_ANR2_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y1_L_L, NBC2_ANR2_Y1_L_U, NBC2_ANR2_Y1_U_L, NBC2_ANR2_Y1_U_U, 4);
    MINT32 NBC2_ANR2_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y2_L_L, NBC2_ANR2_Y2_L_U, NBC2_ANR2_Y2_U_L, NBC2_ANR2_Y2_U_U, 4);
    MINT32 NBC2_ANR2_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y3_L_L, NBC2_ANR2_Y3_L_U, NBC2_ANR2_Y3_U_L, NBC2_ANR2_Y3_U_U, 4);
    MINT32 NBC2_ANR2_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y4_L_L, NBC2_ANR2_Y4_L_U, NBC2_ANR2_Y4_U_L, NBC2_ANR2_Y4_U_U, 4);
    MINT32 NBC2_ANR2_COR_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_COR_TH_L_L, NBC2_ANR2_COR_TH_L_U, NBC2_ANR2_COR_TH_U_L, NBC2_ANR2_COR_TH_U_U, 4);
    MINT32 NBC2_ANR2_MCD_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_MCD_TH_L_L, NBC2_ANR2_MCD_TH_L_U, NBC2_ANR2_MCD_TH_U_L, NBC2_ANR2_MCD_TH_U_U, 4);
    MINT32 NBC2_ANR2_LCL_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_LCL_TH_L_L, NBC2_ANR2_LCL_TH_L_U, NBC2_ANR2_LCL_TH_U_L, NBC2_ANR2_LCL_TH_U_U, 4);
    MINT32 NBC2_ANR2_SCL_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SCL_TH_L_L, NBC2_ANR2_SCL_TH_L_U, NBC2_ANR2_SCL_TH_U_L, NBC2_ANR2_SCL_TH_U_U, 4);
    MINT32 NBC2_ANR2_NCL_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_NCL_TH_L_L, NBC2_ANR2_NCL_TH_L_U, NBC2_ANR2_NCL_TH_U_L, NBC2_ANR2_NCL_TH_U_U, 4);
    MINT32 NBC2_ANR2_COR_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_COR_SL_L_L, NBC2_ANR2_COR_SL_L_U, NBC2_ANR2_COR_SL_U_L, NBC2_ANR2_COR_SL_U_U, 4);
    MINT32 NBC2_ANR2_MCD_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_MCD_SL_L_L, NBC2_ANR2_MCD_SL_L_U, NBC2_ANR2_MCD_SL_U_L, NBC2_ANR2_MCD_SL_U_U, 4);
    MINT32 NBC2_ANR2_LCL_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_LCL_SL_L_L, NBC2_ANR2_LCL_SL_L_U, NBC2_ANR2_LCL_SL_U_L, NBC2_ANR2_LCL_SL_U_U, 4);
    MINT32 NBC2_ANR2_SCL_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SCL_SL_L_L, NBC2_ANR2_SCL_SL_L_U, NBC2_ANR2_SCL_SL_U_L, NBC2_ANR2_SCL_SL_U_U, 4);
    MINT32 NBC2_ANR2_NCL_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_NCL_SL_L_L, NBC2_ANR2_NCL_SL_L_U, NBC2_ANR2_NCL_SL_U_L, NBC2_ANR2_NCL_SL_U_U, 4);
    MINT32 NBC2_ANR2_LCL_LV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_LCL_LV_L_L, NBC2_ANR2_LCL_LV_L_U, NBC2_ANR2_LCL_LV_U_L, NBC2_ANR2_LCL_LV_U_U, 4);
    MINT32 NBC2_ANR2_SCL_LV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SCL_LV_L_L, NBC2_ANR2_SCL_LV_L_U, NBC2_ANR2_SCL_LV_U_L, NBC2_ANR2_SCL_LV_U_U, 4);
    MINT32 NBC2_ANR2_NCL_LV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_NCL_LV_L_L, NBC2_ANR2_NCL_LV_L_U, NBC2_ANR2_NCL_LV_U_L, NBC2_ANR2_NCL_LV_U_U, 4);
    MINT32 NBC2_ANR2_LCL_OFT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_LCL_OFT_L_L, NBC2_ANR2_LCL_OFT_L_U, NBC2_ANR2_LCL_OFT_U_L, NBC2_ANR2_LCL_OFT_U_U, 4);
    MINT32 NBC2_ANR2_SCL_OFT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SCL_OFT_L_L, NBC2_ANR2_SCL_OFT_L_U, NBC2_ANR2_SCL_OFT_U_L, NBC2_ANR2_SCL_OFT_U_U, 4);
    MINT32 NBC2_ANR2_NCL_OFT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_NCL_OFT_L_L, NBC2_ANR2_NCL_OFT_L_U, NBC2_ANR2_NCL_OFT_U_L, NBC2_ANR2_NCL_OFT_U_U, 4);
    MINT32 NBC2_ANR2_Y_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_CPX1_L_L, NBC2_ANR2_Y_CPX1_L_U, NBC2_ANR2_Y_CPX1_U_L, NBC2_ANR2_Y_CPX1_U_U, 4);
    MINT32 NBC2_ANR2_Y_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_CPX2_L_L, NBC2_ANR2_Y_CPX2_L_U, NBC2_ANR2_Y_CPX2_U_L, NBC2_ANR2_Y_CPX2_U_U, 4);
    MINT32 NBC2_ANR2_Y_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_CPX3_L_L, NBC2_ANR2_Y_CPX3_L_U, NBC2_ANR2_Y_CPX3_U_L, NBC2_ANR2_Y_CPX3_U_U, 4);
    MINT32 NBC2_ANR2_Y_SCALE_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_SCALE_CPY0_L_L, NBC2_ANR2_Y_SCALE_CPY0_L_U, NBC2_ANR2_Y_SCALE_CPY0_U_L, NBC2_ANR2_Y_SCALE_CPY0_U_U, 4);
    MINT32 NBC2_ANR2_Y_SCALE_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_SCALE_CPY1_L_L, NBC2_ANR2_Y_SCALE_CPY1_L_U, NBC2_ANR2_Y_SCALE_CPY1_U_L, NBC2_ANR2_Y_SCALE_CPY1_U_U, 4);
    MINT32 NBC2_ANR2_Y_SCALE_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_SCALE_CPY2_L_L, NBC2_ANR2_Y_SCALE_CPY2_L_U, NBC2_ANR2_Y_SCALE_CPY2_U_L, NBC2_ANR2_Y_SCALE_CPY2_U_U, 4);
    MINT32 NBC2_ANR2_Y_SCALE_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_SCALE_CPY3_L_L, NBC2_ANR2_Y_SCALE_CPY3_L_U, NBC2_ANR2_Y_SCALE_CPY3_U_L, NBC2_ANR2_Y_SCALE_CPY3_U_U, 4);
    MINT32 NBC2_ANR2_SL2_X1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_X1_L_L, NBC2_ANR2_SL2_X1_L_U, NBC2_ANR2_SL2_X1_U_L, NBC2_ANR2_SL2_X1_U_U, 4);
    MINT32 NBC2_ANR2_SL2_X2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_X2_L_L, NBC2_ANR2_SL2_X2_L_U, NBC2_ANR2_SL2_X2_U_L, NBC2_ANR2_SL2_X2_U_U, 4);
    MINT32 NBC2_ANR2_SL2_X3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_X3_L_L, NBC2_ANR2_SL2_X3_L_U, NBC2_ANR2_SL2_X3_U_L, NBC2_ANR2_SL2_X3_U_U, 4);
    MINT32 NBC2_ANR2_SL2_GAIN0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_GAIN0_L_L, NBC2_ANR2_SL2_GAIN0_L_U, NBC2_ANR2_SL2_GAIN0_U_L, NBC2_ANR2_SL2_GAIN0_U_U, 4);
    MINT32 NBC2_ANR2_SL2_GAIN1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_GAIN1_L_L, NBC2_ANR2_SL2_GAIN1_L_U, NBC2_ANR2_SL2_GAIN1_U_L, NBC2_ANR2_SL2_GAIN1_U_U, 4);
    MINT32 NBC2_ANR2_SL2_GAIN2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_GAIN2_L_L, NBC2_ANR2_SL2_GAIN2_L_U, NBC2_ANR2_SL2_GAIN2_U_L, NBC2_ANR2_SL2_GAIN2_U_U, 4);
    MINT32 NBC2_ANR2_SL2_GAIN3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_GAIN3_L_L, NBC2_ANR2_SL2_GAIN3_L_U, NBC2_ANR2_SL2_GAIN3_U_L, NBC2_ANR2_SL2_GAIN3_U_U, 4);
    MINT32 NBC2_ANR2_SL2_C_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_C_GAIN_L_L, NBC2_ANR2_SL2_C_GAIN_L_U, NBC2_ANR2_SL2_C_GAIN_U_L, NBC2_ANR2_SL2_C_GAIN_U_U, 4);
    MINT32 NBC2_ANR2_C_L_DIFF_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_C_L_DIFF_TH_L_L, NBC2_ANR2_C_L_DIFF_TH_L_U, NBC2_ANR2_C_L_DIFF_TH_U_L, NBC2_ANR2_C_L_DIFF_TH_U_U, 4);
    MINT32 NBC2_ANR2_C_SM_EDGE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_C_SM_EDGE_L_L, NBC2_ANR2_C_SM_EDGE_L_U, NBC2_ANR2_C_SM_EDGE_U_L, NBC2_ANR2_C_SM_EDGE_U_U, 4);
    MINT32 NBC2_ANR2_K_TH_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_K_TH_C_L_L, NBC2_ANR2_K_TH_C_L_U, NBC2_ANR2_K_TH_C_U_L, NBC2_ANR2_K_TH_C_U_U, 4);
    MINT32 NBC2_ANR2_C_DITH_V		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_C_DITH_V_L_L, NBC2_ANR2_C_DITH_V_L_U, NBC2_ANR2_C_DITH_V_U_L, NBC2_ANR2_C_DITH_V_U_U, 4);
    MINT32 NBC2_ANR2_C_DITH_U		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_C_DITH_U_L_L, NBC2_ANR2_C_DITH_U_L_U, NBC2_ANR2_C_DITH_U_U_L, NBC2_ANR2_C_DITH_U_U_U, 4);
    MINT32 NBC2_ANR2_ACT_BLD_BASE_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_ACT_BLD_BASE_C_L_L, NBC2_ANR2_ACT_BLD_BASE_C_L_U, NBC2_ANR2_ACT_BLD_BASE_C_U_L, NBC2_ANR2_ACT_BLD_BASE_C_U_U, 4);
    MINT32 NBC2_ANR2_ENY		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_ENY_L_L, NBC2_ANR2_ENY_L_U, NBC2_ANR2_ENY_U_L, NBC2_ANR2_ENY_U_U, 5);
    MINT32 NBC2_ANR2_ENC		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_ENC_L_L, NBC2_ANR2_ENC_L_U, NBC2_ANR2_ENC_U_L, NBC2_ANR2_ENC_U_U, 5);
    MINT32 NBC2_ANR2_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_MODE_L_L, NBC2_ANR2_MODE_L_U, NBC2_ANR2_MODE_U_L, NBC2_ANR2_MODE_U_U, 5);
    MINT32 NBC2_ANR2_VER_C_REF_Y		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_VER_C_REF_Y_L_L, NBC2_ANR2_VER_C_REF_Y_L_U, NBC2_ANR2_VER_C_REF_Y_U_L, NBC2_ANR2_VER_C_REF_Y_U_U, 5);
    MINT32 NBC2_ANR2_C_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_C_MODE_L_L, NBC2_ANR2_C_MODE_L_U, NBC2_ANR2_C_MODE_U_L, NBC2_ANR2_C_MODE_U_U, 5);
    MINT32 NBC2_ANR2_SL2_LINK		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_LINK_L_L, NBC2_ANR2_SL2_LINK_L_U, NBC2_ANR2_SL2_LINK_U_L, NBC2_ANR2_SL2_LINK_U_U, 5);
    MINT32 NBC2_ANR2_FLT_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_FLT_C_L_L, NBC2_ANR2_FLT_C_L_U, NBC2_ANR2_FLT_C_U_L, NBC2_ANR2_FLT_C_U_U, 5);
    MINT32 NBC2_ANR2_Y_SCALE_SP0    = CalculateLUTSP(   0, NBC2_ANR2_Y_CPX1, NBC2_ANR2_Y_SCALE_CPY0, NBC2_ANR2_Y_SCALE_CPY1, 128, 15, -15);
    NBC2_ANR2_Y_SCALE_SP0  = Convert2Pos(NBC2_ANR2_Y_SCALE_SP0,32);
    MINT32 NBC2_ANR2_Y_SCALE_SP1    = CalculateLUTSP(   NBC2_ANR2_Y_CPX1, NBC2_ANR2_Y_CPX2, NBC2_ANR2_Y_SCALE_CPY1, NBC2_ANR2_Y_SCALE_CPY2, 128, 15, -15);
    NBC2_ANR2_Y_SCALE_SP1  = Convert2Pos(NBC2_ANR2_Y_SCALE_SP1,32);
    MINT32 NBC2_ANR2_Y_SCALE_SP2    = CalculateLUTSP(   NBC2_ANR2_Y_CPX2, NBC2_ANR2_Y_CPX3, NBC2_ANR2_Y_SCALE_CPY2, NBC2_ANR2_Y_SCALE_CPY3, 128, 15, -15);
    NBC2_ANR2_Y_SCALE_SP2  = Convert2Pos(NBC2_ANR2_Y_SCALE_SP2,32);
    MINT32 NBC2_ANR2_Y_SCALE_SP3_L_L  = rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3;
    MINT32 NBC2_ANR2_Y_SCALE_SP3_L_U  = rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3;
    MINT32 NBC2_ANR2_Y_SCALE_SP3_U_L  = rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3;
    MINT32 NBC2_ANR2_Y_SCALE_SP3_U_U  = rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3;
    NBC2_ANR2_Y_SCALE_SP3_L_L = Convert2Neg(NBC2_ANR2_Y_SCALE_SP3_L_L,32);
    NBC2_ANR2_Y_SCALE_SP3_L_U = Convert2Neg(NBC2_ANR2_Y_SCALE_SP3_L_U,32);
    NBC2_ANR2_Y_SCALE_SP3_U_L = Convert2Neg(NBC2_ANR2_Y_SCALE_SP3_U_L,32);
    NBC2_ANR2_Y_SCALE_SP3_U_U = Convert2Neg(NBC2_ANR2_Y_SCALE_SP3_U_U,32);
    MINT32 NBC2_ANR2_Y_SCALE_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_Y_SCALE_SP3_L_L, NBC2_ANR2_Y_SCALE_SP3_L_U, NBC2_ANR2_Y_SCALE_SP3_U_L, NBC2_ANR2_Y_SCALE_SP3_U_U, 4);
    NBC2_ANR2_Y_SCALE_SP3  = Convert2Pos(NBC2_ANR2_Y_SCALE_SP3,32);

    MINT32 NBC2_ANR2_SL2_SP0    = CalculateLUTSP(   0, NBC2_ANR2_SL2_X1, NBC2_ANR2_SL2_GAIN0, NBC2_ANR2_SL2_GAIN1, 128, 31, -31);
    NBC2_ANR2_SL2_SP0  = Convert2Pos(NBC2_ANR2_SL2_SP0,64);
    MINT32 NBC2_ANR2_SL2_SP1    = CalculateLUTSP(   NBC2_ANR2_SL2_X1, NBC2_ANR2_SL2_X2, NBC2_ANR2_SL2_GAIN1, NBC2_ANR2_SL2_GAIN2, 128, 31, -31);
    NBC2_ANR2_SL2_SP1  = Convert2Pos(NBC2_ANR2_SL2_SP1,64);
    MINT32 NBC2_ANR2_SL2_SP2    = CalculateLUTSP(   NBC2_ANR2_SL2_X2, NBC2_ANR2_SL2_X3, NBC2_ANR2_SL2_GAIN2, NBC2_ANR2_SL2_GAIN3, 128, 31, -31);
    NBC2_ANR2_SL2_SP2  = Convert2Pos(NBC2_ANR2_SL2_SP2,64);
    MINT32 NBC2_ANR2_SL2_SP3_L_L  = rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3;
    MINT32 NBC2_ANR2_SL2_SP3_L_U  = rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3;
    MINT32 NBC2_ANR2_SL2_SP3_U_L  = rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3;
    MINT32 NBC2_ANR2_SL2_SP3_U_U  = rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3;
    NBC2_ANR2_SL2_SP3_L_L = Convert2Neg(NBC2_ANR2_SL2_SP3_L_L,64);
    NBC2_ANR2_SL2_SP3_L_U = Convert2Neg(NBC2_ANR2_SL2_SP3_L_U,64);
    NBC2_ANR2_SL2_SP3_U_L = Convert2Neg(NBC2_ANR2_SL2_SP3_U_L,64);
    NBC2_ANR2_SL2_SP3_U_U = Convert2Neg(NBC2_ANR2_SL2_SP3_U_U,64);
    MINT32 NBC2_ANR2_SL2_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC2_ANR2_SL2_SP3_L_L, NBC2_ANR2_SL2_SP3_L_U, NBC2_ANR2_SL2_SP3_U_L, NBC2_ANR2_SL2_SP3_U_U, 4);
    NBC2_ANR2_SL2_SP3  = Convert2Pos(NBC2_ANR2_SL2_SP3,64);



    // assign interpolation result
    rSmoothANR2.con1.bits.NBC2_ANR2_SCALE_MODE       = NBC2_ANR2_SCALE_MODE;
    rSmoothANR2.cad.bits.NBC2_ANR2_PTC_GAIN_TH       = NBC2_ANR2_PTC_GAIN_TH;
    rSmoothANR2.ptc.bits.NBC2_ANR2_PTC1       = NBC2_ANR2_PTC1;
    rSmoothANR2.ptc.bits.NBC2_ANR2_PTC2       = NBC2_ANR2_PTC2;
    rSmoothANR2.ptc.bits.NBC2_ANR2_PTC3       = NBC2_ANR2_PTC3;
    rSmoothANR2.ptc.bits.NBC2_ANR2_PTC4       = NBC2_ANR2_PTC4;
    rSmoothANR2.cad.bits.NBC2_ANR2_PTC_VGAIN       = NBC2_ANR2_PTC_VGAIN;
    rSmoothANR2.med3.bits.NBC2_ANR2_VAR       = NBC2_ANR2_VAR;
    rSmoothANR2.sl2.bits.NBC2_ANR2_LM_WT       = NBC2_ANR2_LM_WT;
    rSmoothANR2.med3.bits.NBC2_ANR2_Y0       = NBC2_ANR2_Y0;
    rSmoothANR2.med4.bits.NBC2_ANR2_Y1       = NBC2_ANR2_Y1;
    rSmoothANR2.med4.bits.NBC2_ANR2_Y2       = NBC2_ANR2_Y2;
    rSmoothANR2.med4.bits.NBC2_ANR2_Y3       = NBC2_ANR2_Y3;
    rSmoothANR2.med4.bits.NBC2_ANR2_Y4       = NBC2_ANR2_Y4;
    rSmoothANR2.med1.bits.NBC2_ANR2_COR_TH       = NBC2_ANR2_COR_TH;
    rSmoothANR2.med1.bits.NBC2_ANR2_MCD_TH       = NBC2_ANR2_MCD_TH;
    rSmoothANR2.med1.bits.NBC2_ANR2_LCL_TH       = NBC2_ANR2_LCL_TH;
    rSmoothANR2.med2.bits.NBC2_ANR2_SCL_TH       = NBC2_ANR2_SCL_TH;
    rSmoothANR2.med3.bits.NBC2_ANR2_NCL_TH       = NBC2_ANR2_NCL_TH;
    rSmoothANR2.med1.bits.NBC2_ANR2_COR_SL       = NBC2_ANR2_COR_SL;
    rSmoothANR2.med1.bits.NBC2_ANR2_MCD_SL       = NBC2_ANR2_MCD_SL;
    rSmoothANR2.med2.bits.NBC2_ANR2_LCL_SL       = NBC2_ANR2_LCL_SL;
    rSmoothANR2.med2.bits.NBC2_ANR2_SCL_SL       = NBC2_ANR2_SCL_SL;
    rSmoothANR2.med3.bits.NBC2_ANR2_NCL_SL       = NBC2_ANR2_NCL_SL;
    rSmoothANR2.med2.bits.NBC2_ANR2_LCL_LV       = NBC2_ANR2_LCL_LV;
    rSmoothANR2.med2.bits.NBC2_ANR2_SCL_LV       = NBC2_ANR2_SCL_LV;
    rSmoothANR2.med3.bits.NBC2_ANR2_NCL_LV       = NBC2_ANR2_NCL_LV;
    rSmoothANR2.med5.bits.NBC2_ANR2_LCL_OFT       = NBC2_ANR2_LCL_OFT;
    rSmoothANR2.med5.bits.NBC2_ANR2_SCL_OFT       = NBC2_ANR2_SCL_OFT;
    rSmoothANR2.med5.bits.NBC2_ANR2_NCL_OFT       = NBC2_ANR2_NCL_OFT;
    rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX1       = NBC2_ANR2_Y_CPX1;
    rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX2       = NBC2_ANR2_Y_CPX2;
    rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX3       = NBC2_ANR2_Y_CPX3;
    rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0       = NBC2_ANR2_Y_SCALE_CPY0;
    rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1       = NBC2_ANR2_Y_SCALE_CPY1;
    rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2       = NBC2_ANR2_Y_SCALE_CPY2;
    rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3       = NBC2_ANR2_Y_SCALE_CPY3;
    rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X1       = NBC2_ANR2_SL2_X1;
    rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X2       = NBC2_ANR2_SL2_X2;
    rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X3       = NBC2_ANR2_SL2_X3;
    rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN0       = NBC2_ANR2_SL2_GAIN0;
    rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN1       = NBC2_ANR2_SL2_GAIN1;
    rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN2       = NBC2_ANR2_SL2_GAIN2;
    rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN3       = NBC2_ANR2_SL2_GAIN3;
    rSmoothANR2.sl2.bits.NBC2_ANR2_SL2_C_GAIN       = NBC2_ANR2_SL2_C_GAIN;
    rSmoothANR2.cad.bits.NBC2_ANR2_C_L_DIFF_TH       = NBC2_ANR2_C_L_DIFF_TH;
    rSmoothANR2.con2.bits.NBC2_ANR2_C_SM_EDGE       = NBC2_ANR2_C_SM_EDGE;
    rSmoothANR2.yad1.bits.NBC2_ANR2_K_TH_C       = NBC2_ANR2_K_TH_C;
    rSmoothANR2.actc.bits.NBC2_ANR2_C_DITH_V       = NBC2_ANR2_C_DITH_V;
    rSmoothANR2.actc.bits.NBC2_ANR2_C_DITH_U       = NBC2_ANR2_C_DITH_U;
    rSmoothANR2.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C       = NBC2_ANR2_ACT_BLD_BASE_C;
    rSmoothANR2.con1.bits.NBC2_ANR2_ENY       = NBC2_ANR2_ENY;
    rSmoothANR2.con1.bits.NBC2_ANR2_ENC       = NBC2_ANR2_ENC;
    rSmoothANR2.con1.bits.NBC2_ANR2_MODE       = NBC2_ANR2_MODE;
    rSmoothANR2.con1.bits.NBC2_ANR2_VER_C_REF_Y       = NBC2_ANR2_VER_C_REF_Y;
    rSmoothANR2.cad.bits.NBC2_ANR2_C_MODE       = NBC2_ANR2_C_MODE;
    rSmoothANR2.con1.bits.NBC2_ANR2_SL2_LINK       = NBC2_ANR2_SL2_LINK;
    rSmoothANR2.con2.bits.NBC2_ANR2_FLT_C       = NBC2_ANR2_FLT_C;
    rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0       = NBC2_ANR2_Y_SCALE_SP0;
    rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1       = NBC2_ANR2_Y_SCALE_SP1;
    rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2       = NBC2_ANR2_Y_SCALE_SP2;
    rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3       = NBC2_ANR2_Y_SCALE_SP3;
    rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP0       = NBC2_ANR2_SL2_SP0;
    rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP1       = NBC2_ANR2_SL2_SP1;
    rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP2       = NBC2_ANR2_SL2_SP2;
    rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP3       = NBC2_ANR2_SL2_SP3;


    // log
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SCALE_MODE = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_SCALE_MODE, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_SCALE_MODE, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_SCALE_MODE, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_SCALE_MODE, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_SCALE_MODE);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC_GAIN_TH = %d, %d, %d, %d, %d", rSmoothANR2.cad.bits.NBC2_ANR2_PTC_GAIN_TH, rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH, rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH, rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH, rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_GAIN_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC1 = %d, %d, %d, %d, %d", rSmoothANR2.ptc.bits.NBC2_ANR2_PTC1, rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC1, rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC1, rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC1, rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC2 = %d, %d, %d, %d, %d", rSmoothANR2.ptc.bits.NBC2_ANR2_PTC2, rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC2, rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC2, rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC2, rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC3 = %d, %d, %d, %d, %d", rSmoothANR2.ptc.bits.NBC2_ANR2_PTC3, rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC3, rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC3, rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC3, rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC4 = %d, %d, %d, %d, %d", rSmoothANR2.ptc.bits.NBC2_ANR2_PTC4, rParam.rLowerIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC4, rParam.rLowerIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC4, rParam.rUpperIso_LowerZoom.ptc.bits.NBC2_ANR2_PTC4, rParam.rUpperIso_UpperZoom.ptc.bits.NBC2_ANR2_PTC4);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_PTC_VGAIN = %d, %d, %d, %d, %d", rSmoothANR2.cad.bits.NBC2_ANR2_PTC_VGAIN, rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_VGAIN, rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_VGAIN, rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_PTC_VGAIN, rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_PTC_VGAIN);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_VAR = %d, %d, %d, %d, %d", rSmoothANR2.med3.bits.NBC2_ANR2_VAR, rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_VAR, rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_VAR, rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_VAR, rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_VAR);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_LM_WT = %d, %d, %d, %d, %d", rSmoothANR2.sl2.bits.NBC2_ANR2_LM_WT, rParam.rLowerIso_LowerZoom.sl2.bits.NBC2_ANR2_LM_WT, rParam.rLowerIso_UpperZoom.sl2.bits.NBC2_ANR2_LM_WT, rParam.rUpperIso_LowerZoom.sl2.bits.NBC2_ANR2_LM_WT, rParam.rUpperIso_UpperZoom.sl2.bits.NBC2_ANR2_LM_WT);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y0 = %d, %d, %d, %d, %d", rSmoothANR2.med3.bits.NBC2_ANR2_Y0, rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_Y0, rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_Y0, rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_Y0, rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_Y0);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y1 = %d, %d, %d, %d, %d", rSmoothANR2.med4.bits.NBC2_ANR2_Y1, rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y1, rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y1, rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y1, rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y2 = %d, %d, %d, %d, %d", rSmoothANR2.med4.bits.NBC2_ANR2_Y2, rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y2, rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y2, rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y2, rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y3 = %d, %d, %d, %d, %d", rSmoothANR2.med4.bits.NBC2_ANR2_Y3, rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y3, rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y3, rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y3, rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y4 = %d, %d, %d, %d, %d", rSmoothANR2.med4.bits.NBC2_ANR2_Y4, rParam.rLowerIso_LowerZoom.med4.bits.NBC2_ANR2_Y4, rParam.rLowerIso_UpperZoom.med4.bits.NBC2_ANR2_Y4, rParam.rUpperIso_LowerZoom.med4.bits.NBC2_ANR2_Y4, rParam.rUpperIso_UpperZoom.med4.bits.NBC2_ANR2_Y4);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_COR_TH = %d, %d, %d, %d, %d", rSmoothANR2.med1.bits.NBC2_ANR2_COR_TH, rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_COR_TH, rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_COR_TH, rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_COR_TH, rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_COR_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_MCD_TH = %d, %d, %d, %d, %d", rSmoothANR2.med1.bits.NBC2_ANR2_MCD_TH, rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_TH, rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_TH, rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_TH, rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_LCL_TH = %d, %d, %d, %d, %d", rSmoothANR2.med1.bits.NBC2_ANR2_LCL_TH, rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_LCL_TH, rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_LCL_TH, rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_LCL_TH, rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_LCL_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SCL_TH = %d, %d, %d, %d, %d", rSmoothANR2.med2.bits.NBC2_ANR2_SCL_TH, rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_TH, rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_TH, rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_TH, rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_NCL_TH = %d, %d, %d, %d, %d", rSmoothANR2.med3.bits.NBC2_ANR2_NCL_TH, rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_TH, rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_TH, rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_TH, rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_COR_SL = %d, %d, %d, %d, %d", rSmoothANR2.med1.bits.NBC2_ANR2_COR_SL, rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_COR_SL, rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_COR_SL, rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_COR_SL, rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_COR_SL);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_MCD_SL = %d, %d, %d, %d, %d", rSmoothANR2.med1.bits.NBC2_ANR2_MCD_SL, rParam.rLowerIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_SL, rParam.rLowerIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_SL, rParam.rUpperIso_LowerZoom.med1.bits.NBC2_ANR2_MCD_SL, rParam.rUpperIso_UpperZoom.med1.bits.NBC2_ANR2_MCD_SL);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_LCL_SL = %d, %d, %d, %d, %d", rSmoothANR2.med2.bits.NBC2_ANR2_LCL_SL, rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_SL, rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_SL, rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_SL, rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_SL);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SCL_SL = %d, %d, %d, %d, %d", rSmoothANR2.med2.bits.NBC2_ANR2_SCL_SL, rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_SL, rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_SL, rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_SL, rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_SL);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_NCL_SL = %d, %d, %d, %d, %d", rSmoothANR2.med3.bits.NBC2_ANR2_NCL_SL, rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_SL, rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_SL, rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_SL, rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_SL);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_LCL_LV = %d, %d, %d, %d, %d", rSmoothANR2.med2.bits.NBC2_ANR2_LCL_LV, rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_LV, rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_LV, rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_LCL_LV, rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_LCL_LV);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SCL_LV = %d, %d, %d, %d, %d", rSmoothANR2.med2.bits.NBC2_ANR2_SCL_LV, rParam.rLowerIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_LV, rParam.rLowerIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_LV, rParam.rUpperIso_LowerZoom.med2.bits.NBC2_ANR2_SCL_LV, rParam.rUpperIso_UpperZoom.med2.bits.NBC2_ANR2_SCL_LV);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_NCL_LV = %d, %d, %d, %d, %d", rSmoothANR2.med3.bits.NBC2_ANR2_NCL_LV, rParam.rLowerIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_LV, rParam.rLowerIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_LV, rParam.rUpperIso_LowerZoom.med3.bits.NBC2_ANR2_NCL_LV, rParam.rUpperIso_UpperZoom.med3.bits.NBC2_ANR2_NCL_LV);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_LCL_OFT = %d, %d, %d, %d, %d", rSmoothANR2.med5.bits.NBC2_ANR2_LCL_OFT, rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_LCL_OFT, rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_LCL_OFT, rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_LCL_OFT, rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_LCL_OFT);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SCL_OFT = %d, %d, %d, %d, %d", rSmoothANR2.med5.bits.NBC2_ANR2_SCL_OFT, rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_SCL_OFT, rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_SCL_OFT, rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_SCL_OFT, rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_SCL_OFT);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_NCL_OFT = %d, %d, %d, %d, %d", rSmoothANR2.med5.bits.NBC2_ANR2_NCL_OFT, rParam.rLowerIso_LowerZoom.med5.bits.NBC2_ANR2_NCL_OFT, rParam.rLowerIso_UpperZoom.med5.bits.NBC2_ANR2_NCL_OFT, rParam.rUpperIso_LowerZoom.med5.bits.NBC2_ANR2_NCL_OFT, rParam.rUpperIso_UpperZoom.med5.bits.NBC2_ANR2_NCL_OFT);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_CPX1 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX1, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_CPX2 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX2, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_CPX3 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut1.bits.NBC2_ANR2_Y_CPX3, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC2_ANR2_Y_CPX3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_CPY0 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY0);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_CPY1 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_CPY2 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_CPY3 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC2_ANR2_Y_SCALE_CPY3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_X1 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X1, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X1, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X1, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X1, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_X2 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X2, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X2, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X2, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X2, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_X3 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut1.bits.NBC2_ANR2_SL2_X3, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X3, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X3, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC2_ANR2_SL2_X3, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC2_ANR2_SL2_X3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_GAIN0 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN0, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN0);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_GAIN1 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN1, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_GAIN2 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN2, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_GAIN3 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut2.bits.NBC2_ANR2_SL2_GAIN3, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC2_ANR2_SL2_GAIN3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_C_GAIN = %d, %d, %d, %d, %d", rSmoothANR2.sl2.bits.NBC2_ANR2_SL2_C_GAIN, rParam.rLowerIso_LowerZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN, rParam.rLowerIso_UpperZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN, rParam.rUpperIso_LowerZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN, rParam.rUpperIso_UpperZoom.sl2.bits.NBC2_ANR2_SL2_C_GAIN);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_C_L_DIFF_TH = %d, %d, %d, %d, %d", rSmoothANR2.cad.bits.NBC2_ANR2_C_L_DIFF_TH, rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH, rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH, rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH, rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_C_L_DIFF_TH);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_C_SM_EDGE = %d, %d, %d, %d, %d", rSmoothANR2.con2.bits.NBC2_ANR2_C_SM_EDGE, rParam.rLowerIso_LowerZoom.con2.bits.NBC2_ANR2_C_SM_EDGE, rParam.rLowerIso_UpperZoom.con2.bits.NBC2_ANR2_C_SM_EDGE, rParam.rUpperIso_LowerZoom.con2.bits.NBC2_ANR2_C_SM_EDGE, rParam.rUpperIso_UpperZoom.con2.bits.NBC2_ANR2_C_SM_EDGE);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_K_TH_C = %d, %d, %d, %d, %d", rSmoothANR2.yad1.bits.NBC2_ANR2_K_TH_C, rParam.rLowerIso_LowerZoom.yad1.bits.NBC2_ANR2_K_TH_C, rParam.rLowerIso_UpperZoom.yad1.bits.NBC2_ANR2_K_TH_C, rParam.rUpperIso_LowerZoom.yad1.bits.NBC2_ANR2_K_TH_C, rParam.rUpperIso_UpperZoom.yad1.bits.NBC2_ANR2_K_TH_C);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_C_DITH_V = %d, %d, %d, %d, %d", rSmoothANR2.actc.bits.NBC2_ANR2_C_DITH_V, rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_V, rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_V, rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_V, rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_V);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_C_DITH_U = %d, %d, %d, %d, %d", rSmoothANR2.actc.bits.NBC2_ANR2_C_DITH_U, rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_U, rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_U, rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_C_DITH_U, rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_C_DITH_U);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_ACT_BLD_BASE_C = %d, %d, %d, %d, %d", rSmoothANR2.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C, rParam.rLowerIso_LowerZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C, rParam.rLowerIso_UpperZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C, rParam.rUpperIso_LowerZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C, rParam.rUpperIso_UpperZoom.actc.bits.NBC2_ANR2_ACT_BLD_BASE_C);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_ENY = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_ENY, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_ENY, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_ENY, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_ENY, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_ENY);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_ENC = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_ENC, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_ENC, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_ENC, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_ENC, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_ENC);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_MODE = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_MODE, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_MODE, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_MODE, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_MODE, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_MODE);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_VER_C_REF_Y = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_VER_C_REF_Y, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_VER_C_REF_Y);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_C_MODE = %d, %d, %d, %d, %d", rSmoothANR2.cad.bits.NBC2_ANR2_C_MODE, rParam.rLowerIso_LowerZoom.cad.bits.NBC2_ANR2_C_MODE, rParam.rLowerIso_UpperZoom.cad.bits.NBC2_ANR2_C_MODE, rParam.rUpperIso_LowerZoom.cad.bits.NBC2_ANR2_C_MODE, rParam.rUpperIso_UpperZoom.cad.bits.NBC2_ANR2_C_MODE);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_LINK = %d, %d, %d, %d, %d", rSmoothANR2.con1.bits.NBC2_ANR2_SL2_LINK, rParam.rLowerIso_LowerZoom.con1.bits.NBC2_ANR2_SL2_LINK, rParam.rLowerIso_UpperZoom.con1.bits.NBC2_ANR2_SL2_LINK, rParam.rUpperIso_LowerZoom.con1.bits.NBC2_ANR2_SL2_LINK, rParam.rUpperIso_UpperZoom.con1.bits.NBC2_ANR2_SL2_LINK);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_FLT_C = %d, %d, %d, %d, %d", rSmoothANR2.con2.bits.NBC2_ANR2_FLT_C, rParam.rLowerIso_LowerZoom.con2.bits.NBC2_ANR2_FLT_C, rParam.rLowerIso_UpperZoom.con2.bits.NBC2_ANR2_FLT_C, rParam.rUpperIso_LowerZoom.con2.bits.NBC2_ANR2_FLT_C, rParam.rUpperIso_UpperZoom.con2.bits.NBC2_ANR2_FLT_C);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_SP0 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP0);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_SP1 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_SP2 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_Y_SCALE_SP3 = %d, %d, %d, %d, %d", rSmoothANR2.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC2_ANR2_Y_SCALE_SP3);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_SP0 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP0, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP0, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP0, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP0, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP0);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_SP1 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP1, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP1, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP1, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP1, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP1);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_SP2 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP2, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP2, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP2, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP2, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP2);
    INTER_LOG_IF(bSmoothANR2Debug, "[S, L_L, L_U, U_L, U_U]NBC2_ANR2_SL2_SP3 = %d, %d, %d, %d, %d", rSmoothANR2.l4lut3.bits.NBC2_ANR2_SL2_SP3, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC2_ANR2_SL2_SP3);


}
MVOID SmoothANR(ISP_NVRAM_ANR_INT_T const& rParam,   // ANR settings
                ISP_NVRAM_ANR_T& rSmoothANR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_anr.enable", value, "0");
    MBOOL bSmoothANRDebug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothANRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothANRDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 NBC_ANR_LTM_LINK_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_LTM_LINK;
    MINT32 NBC_ANR_PTY_GAIN_TH_L_L		= rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_SL_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_SL_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_SL_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_SL_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_TH_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_TH_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_TH_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_TH_L_L		= rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_FLT0_IDX_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT0_IDX;
    MINT32 NBC_ANR_Y_FLT1_IDX_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT1_IDX;
    MINT32 NBC_ANR_Y_FLT2_IDX_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT2_IDX;
    MINT32 NBC_ANR_Y_FLT3_IDX_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT3_IDX;
    MINT32 NBC_ANR_Y_SLOPE_H_TH_L_L		= rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH;
    MINT32 NBC_ANR_Y_SLOPE_V_TH_L_L		= rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH;
    MINT32 NBC_ANR_C_V_RNG1_L_L		= rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG1;
    MINT32 NBC_ANR_C_V_RNG2_L_L		= rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG2;
    MINT32 NBC_ANR_C_V_RNG3_L_L		= rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG3;
    MINT32 NBC_ANR_C_V_RNG4_L_L		= rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG4;
    MINT32 NBC_ANR_C_H_RNG1_L_L		= rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG1;
    MINT32 NBC_ANR_C_H_RNG2_L_L		= rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG2;
    MINT32 NBC_ANR_C_H_RNG3_L_L		= rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG3;
    MINT32 NBC_ANR_C_H_RNG4_L_L		= rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG4;
    MINT32 NBC_ANR_Y_CPX1_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX1;
    MINT32 NBC_ANR_Y_CPX2_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX2;
    MINT32 NBC_ANR_Y_CPX3_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX3;
    MINT32 NBC_ANR_Y_CPX4_L_L		= rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX4;
    MINT32 NBC_ANR_Y_CPX5_L_L		= rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX5;
    MINT32 NBC_ANR_Y_CPX6_L_L		= rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX6;
    MINT32 NBC_ANR_Y_CPX7_L_L		= rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX7;
    MINT32 NBC_ANR_Y_CPX8_L_L		= rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX8;
    MINT32 NBC_ANR_Y_SCALE_CPY0_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0;
    MINT32 NBC_ANR_Y_SCALE_CPY1_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1;
    MINT32 NBC_ANR_Y_SCALE_CPY2_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2;
    MINT32 NBC_ANR_Y_SCALE_CPY3_L_L		= rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3;
    MINT32 NBC_ANR_Y_SCALE_CPY4_L_L		= rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4;
    MINT32 NBC_ANR_Y_SCALE_CPY5_L_L		= rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5;
    MINT32 NBC_ANR_Y_SCALE_CPY6_L_L		= rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6;
    MINT32 NBC_ANR_Y_SCALE_CPY7_L_L		= rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7;
    MINT32 NBC_ANR_Y_SCALE_CPY8_L_L		= rParam.rLowerIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8;
    MINT32 NBC_ANR_SL2_LINK_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_SL2_LINK;
    MINT32 NBC_ANR_SL2_X1_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X1;
    MINT32 NBC_ANR_SL2_X2_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X2;
    MINT32 NBC_ANR_SL2_X3_L_L		= rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X3;
    MINT32 NBC_ANR_SL2_GAIN0_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0;
    MINT32 NBC_ANR_SL2_GAIN1_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1;
    MINT32 NBC_ANR_SL2_GAIN2_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2;
    MINT32 NBC_ANR_SL2_GAIN3_L_L		= rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3;
    MINT32 NBC_ANR_SL2_SCALE_GAIN_L_L		= rParam.rLowerIso_LowerZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN;
    MINT32 NBC_ANR_SL2_C_GAIN_L_L		= rParam.rLowerIso_LowerZoom.sl2.bits.NBC_ANR_SL2_C_GAIN;
    MINT32 NBC_ANR_C_L_DIFF_TH_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC_ANR_C_L_DIFF_TH;
    MINT32 NBC_ANR_C_SM_EDGE_TH_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_L_L		= rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_L_L		= rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_LPF_L_L		= rParam.rLowerIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_LPF_L_L		= rParam.rLowerIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF;
    MINT32 NBC_ANR_Y_ACT_CEN_TH_L_L		= rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH;
    MINT32 NBC_ANR_Y_ACT_CEN_GAIN_L_L		= rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN;
    MINT32 NBC_ANR_Y_ACT_CEN_OFT_L_L		= rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT;
    MINT32 NBC_ANR_Y_VERT_SIGMA_L_L		= rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA;
    MINT32 NBC_ANR_Y_VERT_ACT_TH_L_L		= rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH;
    MINT32 NBC_ANR_C_CPX1_L_L		= rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX1;
    MINT32 NBC_ANR_C_CPX2_L_L		= rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX2;
    MINT32 NBC_ANR_C_CPX3_L_L		= rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX3;
    MINT32 NBC_ANR_C_SCALE_CPY0_L_L		= rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0;
    MINT32 NBC_ANR_C_SCALE_CPY1_L_L		= rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1;
    MINT32 NBC_ANR_C_SCALE_CPY2_L_L		= rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2;
    MINT32 NBC_ANR_C_SCALE_CPY3_L_L		= rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3;
    MINT32 NBC_ANR_Y_L0_V_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4;
    MINT32 NBC_ANR_Y_L0_V_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3;
    MINT32 NBC_ANR_Y_L0_V_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2;
    MINT32 NBC_ANR_Y_L0_V_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1;
    MINT32 NBC_ANR_PTC_GAIN_TH_L_L		= rParam.rLowerIso_LowerZoom.cad.bits.NBC_ANR_PTC_GAIN_TH;
    MINT32 NBC_ANR_Y_L1_V_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4;
    MINT32 NBC_ANR_Y_L1_V_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3;
    MINT32 NBC_ANR_Y_L1_V_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2;
    MINT32 NBC_ANR_Y_L1_V_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1;
    MINT32 NBC_ANR_Y_L2_V_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4;
    MINT32 NBC_ANR_Y_L2_V_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3;
    MINT32 NBC_ANR_Y_L2_V_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2;
    MINT32 NBC_ANR_Y_L2_V_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1;
    MINT32 NBC_ANR_Y_L3_V_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4;
    MINT32 NBC_ANR_Y_L3_V_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3;
    MINT32 NBC_ANR_Y_L3_V_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2;
    MINT32 NBC_ANR_Y_L3_V_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1;
    MINT32 NBC_ANR_Y_L0_H_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4;
    MINT32 NBC_ANR_Y_L0_H_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3;
    MINT32 NBC_ANR_Y_L0_H_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2;
    MINT32 NBC_ANR_Y_L0_H_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1;
    MINT32 NBC_ANR_Y_L1_H_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4;
    MINT32 NBC_ANR_Y_L1_H_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3;
    MINT32 NBC_ANR_Y_L1_H_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2;
    MINT32 NBC_ANR_Y_L1_H_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1;
    MINT32 NBC_ANR_Y_L2_H_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4;
    MINT32 NBC_ANR_Y_L2_H_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3;
    MINT32 NBC_ANR_Y_L2_H_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2;
    MINT32 NBC_ANR_Y_L2_H_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1;
    MINT32 NBC_ANR_TBL_CPX1_L_L		= rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX1;
    MINT32 NBC_ANR_TBL_CPX2_L_L		= rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX2;
    MINT32 NBC_ANR_TBL_CPX3_L_L		= rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX3;
    MINT32 NBC_ANR_TBL_GAIN_CPY0_L_L		= rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0;
    MINT32 NBC_ANR_TBL_GAIN_CPY1_L_L		= rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1;
    MINT32 NBC_ANR_TBL_GAIN_CPY2_L_L		= rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2;
    MINT32 NBC_ANR_TBL_GAIN_CPY3_L_L		= rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3;
    MINT32 NBC_ANR_ACT_SL2_GAIN_L_L		= rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN;
    MINT32 NBC_ANR_ACT_DIF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN;
    MINT32 NBC_ANR_ACT_DIF_LO_TH_L_L		= rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH;
    MINT32 NBC_ANR_ACT_DIF_HI_TH_L_L		= rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH;
    MINT32 NBC_ANR_Y_L3_H_RNG4_L_L		= rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4;
    MINT32 NBC_ANR_Y_L3_H_RNG3_L_L		= rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3;
    MINT32 NBC_ANR_Y_L3_H_RNG2_L_L		= rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2;
    MINT32 NBC_ANR_Y_L3_H_RNG1_L_L		= rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1;
    MINT32 NBC_ANR_Y_HF_ACT_X1_L_L		= rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1;
    MINT32 NBC_ANR_Y_HF_ACT_X2_L_L		= rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2;
    MINT32 NBC_ANR_Y_HF_ACT_X3_L_L		= rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3;
    MINT32 NBC_ANR_Y_HF_ACT_X4_L_L		= rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4;
    MINT32 NBC_ANR_Y_HF_ACT_Y0_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0;
    MINT32 NBC_ANR_Y_HF_ACT_Y1_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1;
    MINT32 NBC_ANR_Y_HF_ACT_Y2_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2;
    MINT32 NBC_ANR_Y_HF_ACT_Y3_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3;
    MINT32 NBC_ANR_Y_HF_ACT_Y4_L_L		= rParam.rLowerIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4;
    MINT32 NBC_ANR_Y_HF_LUMA_X1_L_L		= rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1;
    MINT32 NBC_ANR_Y_HF_LUMA_X2_L_L		= rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2;
    MINT32 NBC_ANR_Y_HF_LUMA_Y0_L_L		= rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0;
    MINT32 NBC_ANR_Y_HF_LUMA_Y1_L_L		= rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1;
    MINT32 NBC_ANR_Y_HF_LUMA_Y2_L_L		= rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2;
    MINT32 NBC_ANR_Y_HF_LUMA_SP2_L_L		= rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2;
    MINT32 NBC_ANR_C_DITH_U_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_U;
    MINT32 NBC_ANR_C_DITH_V_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_V;
    MINT32 NBC_ANR_ACT_BLD_BASE_C_L_L		= rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C;
    MINT32 NBC_ANR_Y_L0_HF_W_L_L		= rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W;
    MINT32 NBC_ANR_Y_L1_HF_W_L_L		= rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W;
    MINT32 NBC_ANR_Y_L2_HF_W_L_L		= rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W;
    MINT32 NBC_ANR_Y_L3_HF_W_L_L		= rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W;
    MINT32 NBC_ANR_Y_HF_CLIP_L_L		= rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP;
    MINT32 NBC_ANR_Y_HF_CORE_SL_L_L		= rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL;
    MINT32 NBC_ANR_Y_HF_CORE_TH_L_L		= rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH;
    MINT32 NBC_ANR_Y_ACT_CPX1_L_L		= rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1;
    MINT32 NBC_ANR_Y_ACT_CPX2_L_L		= rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2;
    MINT32 NBC_ANR_Y_ACT_CPX3_L_L		= rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3;
    MINT32 NBC_ANR_Y_ACT_CPY0_L_L		= rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0;
    MINT32 NBC_ANR_Y_ACT_CPY1_L_L		= rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1;
    MINT32 NBC_ANR_Y_ACT_CPY2_L_L		= rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2;
    MINT32 NBC_ANR_Y_ACT_CPY3_L_L		= rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3;
    MINT32 NBC_ANR_TBL_PRC_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_TBL_PRC;
    MINT32 NBC_ANR_TABLE_EN_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_TABLE_EN;
    MINT32 NBC_ANR_ENY_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_ENY;
    MINT32 NBC_ANR_ENC_L_L		= rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_ENC;
    MINT32 NBC_ANR_C_SM_EDGE_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE;
    MINT32 NBC_ANR_FLT_C_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_FLT_C;
    MINT32 NBC_ANR_IMPL_MODE_L_L		= rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_IMPL_MODE;
    MINT32 NBC_ANR_HF_BAL_MODE_L_L		= rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE;

    MINT32 NBC_ANR_LTM_LINK_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_LTM_LINK;
    MINT32 NBC_ANR_PTY_GAIN_TH_L_U		= rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_SL_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_SL_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_SL_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_SL_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_TH_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_TH_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_TH_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_TH_L_U		= rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_FLT0_IDX_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT0_IDX;
    MINT32 NBC_ANR_Y_FLT1_IDX_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT1_IDX;
    MINT32 NBC_ANR_Y_FLT2_IDX_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT2_IDX;
    MINT32 NBC_ANR_Y_FLT3_IDX_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT3_IDX;
    MINT32 NBC_ANR_Y_SLOPE_H_TH_L_U		= rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH;
    MINT32 NBC_ANR_Y_SLOPE_V_TH_L_U		= rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH;
    MINT32 NBC_ANR_C_V_RNG1_L_U		= rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG1;
    MINT32 NBC_ANR_C_V_RNG2_L_U		= rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG2;
    MINT32 NBC_ANR_C_V_RNG3_L_U		= rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG3;
    MINT32 NBC_ANR_C_V_RNG4_L_U		= rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG4;
    MINT32 NBC_ANR_C_H_RNG1_L_U		= rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG1;
    MINT32 NBC_ANR_C_H_RNG2_L_U		= rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG2;
    MINT32 NBC_ANR_C_H_RNG3_L_U		= rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG3;
    MINT32 NBC_ANR_C_H_RNG4_L_U		= rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG4;
    MINT32 NBC_ANR_Y_CPX1_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX1;
    MINT32 NBC_ANR_Y_CPX2_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX2;
    MINT32 NBC_ANR_Y_CPX3_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX3;
    MINT32 NBC_ANR_Y_CPX4_L_U		= rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX4;
    MINT32 NBC_ANR_Y_CPX5_L_U		= rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX5;
    MINT32 NBC_ANR_Y_CPX6_L_U		= rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX6;
    MINT32 NBC_ANR_Y_CPX7_L_U		= rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX7;
    MINT32 NBC_ANR_Y_CPX8_L_U		= rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX8;
    MINT32 NBC_ANR_Y_SCALE_CPY0_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0;
    MINT32 NBC_ANR_Y_SCALE_CPY1_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1;
    MINT32 NBC_ANR_Y_SCALE_CPY2_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2;
    MINT32 NBC_ANR_Y_SCALE_CPY3_L_U		= rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3;
    MINT32 NBC_ANR_Y_SCALE_CPY4_L_U		= rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4;
    MINT32 NBC_ANR_Y_SCALE_CPY5_L_U		= rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5;
    MINT32 NBC_ANR_Y_SCALE_CPY6_L_U		= rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6;
    MINT32 NBC_ANR_Y_SCALE_CPY7_L_U		= rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7;
    MINT32 NBC_ANR_Y_SCALE_CPY8_L_U		= rParam.rLowerIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8;
    MINT32 NBC_ANR_SL2_LINK_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_SL2_LINK;
    MINT32 NBC_ANR_SL2_X1_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X1;
    MINT32 NBC_ANR_SL2_X2_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X2;
    MINT32 NBC_ANR_SL2_X3_L_U		= rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X3;
    MINT32 NBC_ANR_SL2_GAIN0_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0;
    MINT32 NBC_ANR_SL2_GAIN1_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1;
    MINT32 NBC_ANR_SL2_GAIN2_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2;
    MINT32 NBC_ANR_SL2_GAIN3_L_U		= rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3;
    MINT32 NBC_ANR_SL2_SCALE_GAIN_L_U		= rParam.rLowerIso_UpperZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN;
    MINT32 NBC_ANR_SL2_C_GAIN_L_U		= rParam.rLowerIso_UpperZoom.sl2.bits.NBC_ANR_SL2_C_GAIN;
    MINT32 NBC_ANR_C_L_DIFF_TH_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC_ANR_C_L_DIFF_TH;
    MINT32 NBC_ANR_C_SM_EDGE_TH_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_L_U		= rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_L_U		= rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_LPF_L_U		= rParam.rLowerIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_LPF_L_U		= rParam.rLowerIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF;
    MINT32 NBC_ANR_Y_ACT_CEN_TH_L_U		= rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH;
    MINT32 NBC_ANR_Y_ACT_CEN_GAIN_L_U		= rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN;
    MINT32 NBC_ANR_Y_ACT_CEN_OFT_L_U		= rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT;
    MINT32 NBC_ANR_Y_VERT_SIGMA_L_U		= rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA;
    MINT32 NBC_ANR_Y_VERT_ACT_TH_L_U		= rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH;
    MINT32 NBC_ANR_C_CPX1_L_U		= rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX1;
    MINT32 NBC_ANR_C_CPX2_L_U		= rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX2;
    MINT32 NBC_ANR_C_CPX3_L_U		= rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX3;
    MINT32 NBC_ANR_C_SCALE_CPY0_L_U		= rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0;
    MINT32 NBC_ANR_C_SCALE_CPY1_L_U		= rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1;
    MINT32 NBC_ANR_C_SCALE_CPY2_L_U		= rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2;
    MINT32 NBC_ANR_C_SCALE_CPY3_L_U		= rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3;
    MINT32 NBC_ANR_Y_L0_V_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4;
    MINT32 NBC_ANR_Y_L0_V_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3;
    MINT32 NBC_ANR_Y_L0_V_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2;
    MINT32 NBC_ANR_Y_L0_V_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1;
    MINT32 NBC_ANR_PTC_GAIN_TH_L_U		= rParam.rLowerIso_UpperZoom.cad.bits.NBC_ANR_PTC_GAIN_TH;
    MINT32 NBC_ANR_Y_L1_V_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4;
    MINT32 NBC_ANR_Y_L1_V_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3;
    MINT32 NBC_ANR_Y_L1_V_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2;
    MINT32 NBC_ANR_Y_L1_V_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1;
    MINT32 NBC_ANR_Y_L2_V_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4;
    MINT32 NBC_ANR_Y_L2_V_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3;
    MINT32 NBC_ANR_Y_L2_V_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2;
    MINT32 NBC_ANR_Y_L2_V_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1;
    MINT32 NBC_ANR_Y_L3_V_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4;
    MINT32 NBC_ANR_Y_L3_V_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3;
    MINT32 NBC_ANR_Y_L3_V_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2;
    MINT32 NBC_ANR_Y_L3_V_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1;
    MINT32 NBC_ANR_Y_L0_H_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4;
    MINT32 NBC_ANR_Y_L0_H_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3;
    MINT32 NBC_ANR_Y_L0_H_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2;
    MINT32 NBC_ANR_Y_L0_H_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1;
    MINT32 NBC_ANR_Y_L1_H_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4;
    MINT32 NBC_ANR_Y_L1_H_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3;
    MINT32 NBC_ANR_Y_L1_H_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2;
    MINT32 NBC_ANR_Y_L1_H_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1;
    MINT32 NBC_ANR_Y_L2_H_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4;
    MINT32 NBC_ANR_Y_L2_H_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3;
    MINT32 NBC_ANR_Y_L2_H_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2;
    MINT32 NBC_ANR_Y_L2_H_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1;
    MINT32 NBC_ANR_TBL_CPX1_L_U		= rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX1;
    MINT32 NBC_ANR_TBL_CPX2_L_U		= rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX2;
    MINT32 NBC_ANR_TBL_CPX3_L_U		= rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX3;
    MINT32 NBC_ANR_TBL_GAIN_CPY0_L_U		= rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0;
    MINT32 NBC_ANR_TBL_GAIN_CPY1_L_U		= rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1;
    MINT32 NBC_ANR_TBL_GAIN_CPY2_L_U		= rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2;
    MINT32 NBC_ANR_TBL_GAIN_CPY3_L_U		= rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3;
    MINT32 NBC_ANR_ACT_SL2_GAIN_L_U		= rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN;
    MINT32 NBC_ANR_ACT_DIF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN;
    MINT32 NBC_ANR_ACT_DIF_LO_TH_L_U		= rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH;
    MINT32 NBC_ANR_ACT_DIF_HI_TH_L_U		= rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH;
    MINT32 NBC_ANR_Y_L3_H_RNG4_L_U		= rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4;
    MINT32 NBC_ANR_Y_L3_H_RNG3_L_U		= rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3;
    MINT32 NBC_ANR_Y_L3_H_RNG2_L_U		= rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2;
    MINT32 NBC_ANR_Y_L3_H_RNG1_L_U		= rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1;
    MINT32 NBC_ANR_Y_HF_ACT_X1_L_U		= rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1;
    MINT32 NBC_ANR_Y_HF_ACT_X2_L_U		= rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2;
    MINT32 NBC_ANR_Y_HF_ACT_X3_L_U		= rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3;
    MINT32 NBC_ANR_Y_HF_ACT_X4_L_U		= rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4;
    MINT32 NBC_ANR_Y_HF_ACT_Y0_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0;
    MINT32 NBC_ANR_Y_HF_ACT_Y1_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1;
    MINT32 NBC_ANR_Y_HF_ACT_Y2_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2;
    MINT32 NBC_ANR_Y_HF_ACT_Y3_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3;
    MINT32 NBC_ANR_Y_HF_ACT_Y4_L_U		= rParam.rLowerIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4;
    MINT32 NBC_ANR_Y_HF_LUMA_X1_L_U		= rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1;
    MINT32 NBC_ANR_Y_HF_LUMA_X2_L_U		= rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2;
    MINT32 NBC_ANR_Y_HF_LUMA_Y0_L_U		= rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0;
    MINT32 NBC_ANR_Y_HF_LUMA_Y1_L_U		= rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1;
    MINT32 NBC_ANR_Y_HF_LUMA_Y2_L_U		= rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2;
    MINT32 NBC_ANR_Y_HF_LUMA_SP2_L_U		= rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2;
    MINT32 NBC_ANR_C_DITH_U_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_U;
    MINT32 NBC_ANR_C_DITH_V_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_V;
    MINT32 NBC_ANR_ACT_BLD_BASE_C_L_U		= rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C;
    MINT32 NBC_ANR_Y_L0_HF_W_L_U		= rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W;
    MINT32 NBC_ANR_Y_L1_HF_W_L_U		= rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W;
    MINT32 NBC_ANR_Y_L2_HF_W_L_U		= rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W;
    MINT32 NBC_ANR_Y_L3_HF_W_L_U		= rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W;
    MINT32 NBC_ANR_Y_HF_CLIP_L_U		= rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP;
    MINT32 NBC_ANR_Y_HF_CORE_SL_L_U		= rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL;
    MINT32 NBC_ANR_Y_HF_CORE_TH_L_U		= rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH;
    MINT32 NBC_ANR_Y_ACT_CPX1_L_U		= rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1;
    MINT32 NBC_ANR_Y_ACT_CPX2_L_U		= rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2;
    MINT32 NBC_ANR_Y_ACT_CPX3_L_U		= rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3;
    MINT32 NBC_ANR_Y_ACT_CPY0_L_U		= rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0;
    MINT32 NBC_ANR_Y_ACT_CPY1_L_U		= rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1;
    MINT32 NBC_ANR_Y_ACT_CPY2_L_U		= rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2;
    MINT32 NBC_ANR_Y_ACT_CPY3_L_U		= rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3;
    MINT32 NBC_ANR_TBL_PRC_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_TBL_PRC;
    MINT32 NBC_ANR_TABLE_EN_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_TABLE_EN;
    MINT32 NBC_ANR_ENY_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_ENY;
    MINT32 NBC_ANR_ENC_L_U		= rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_ENC;
    MINT32 NBC_ANR_C_SM_EDGE_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE;
    MINT32 NBC_ANR_FLT_C_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_FLT_C;
    MINT32 NBC_ANR_IMPL_MODE_L_U		= rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_IMPL_MODE;
    MINT32 NBC_ANR_HF_BAL_MODE_L_U		= rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE;

    MINT32 NBC_ANR_LTM_LINK_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_LTM_LINK;
    MINT32 NBC_ANR_PTY_GAIN_TH_U_L		= rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_SL_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_SL_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_SL_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_SL_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_TH_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_TH_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_TH_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_TH_U_L		= rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_FLT0_IDX_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT0_IDX;
    MINT32 NBC_ANR_Y_FLT1_IDX_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT1_IDX;
    MINT32 NBC_ANR_Y_FLT2_IDX_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT2_IDX;
    MINT32 NBC_ANR_Y_FLT3_IDX_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT3_IDX;
    MINT32 NBC_ANR_Y_SLOPE_H_TH_U_L		= rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH;
    MINT32 NBC_ANR_Y_SLOPE_V_TH_U_L		= rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH;
    MINT32 NBC_ANR_C_V_RNG1_U_L		= rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG1;
    MINT32 NBC_ANR_C_V_RNG2_U_L		= rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG2;
    MINT32 NBC_ANR_C_V_RNG3_U_L		= rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG3;
    MINT32 NBC_ANR_C_V_RNG4_U_L		= rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG4;
    MINT32 NBC_ANR_C_H_RNG1_U_L		= rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG1;
    MINT32 NBC_ANR_C_H_RNG2_U_L		= rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG2;
    MINT32 NBC_ANR_C_H_RNG3_U_L		= rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG3;
    MINT32 NBC_ANR_C_H_RNG4_U_L		= rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG4;
    MINT32 NBC_ANR_Y_CPX1_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX1;
    MINT32 NBC_ANR_Y_CPX2_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX2;
    MINT32 NBC_ANR_Y_CPX3_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX3;
    MINT32 NBC_ANR_Y_CPX4_U_L		= rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX4;
    MINT32 NBC_ANR_Y_CPX5_U_L		= rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX5;
    MINT32 NBC_ANR_Y_CPX6_U_L		= rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX6;
    MINT32 NBC_ANR_Y_CPX7_U_L		= rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX7;
    MINT32 NBC_ANR_Y_CPX8_U_L		= rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX8;
    MINT32 NBC_ANR_Y_SCALE_CPY0_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0;
    MINT32 NBC_ANR_Y_SCALE_CPY1_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1;
    MINT32 NBC_ANR_Y_SCALE_CPY2_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2;
    MINT32 NBC_ANR_Y_SCALE_CPY3_U_L		= rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3;
    MINT32 NBC_ANR_Y_SCALE_CPY4_U_L		= rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4;
    MINT32 NBC_ANR_Y_SCALE_CPY5_U_L		= rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5;
    MINT32 NBC_ANR_Y_SCALE_CPY6_U_L		= rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6;
    MINT32 NBC_ANR_Y_SCALE_CPY7_U_L		= rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7;
    MINT32 NBC_ANR_Y_SCALE_CPY8_U_L		= rParam.rUpperIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8;
    MINT32 NBC_ANR_SL2_LINK_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_SL2_LINK;
    MINT32 NBC_ANR_SL2_X1_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X1;
    MINT32 NBC_ANR_SL2_X2_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X2;
    MINT32 NBC_ANR_SL2_X3_U_L		= rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X3;
    MINT32 NBC_ANR_SL2_GAIN0_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0;
    MINT32 NBC_ANR_SL2_GAIN1_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1;
    MINT32 NBC_ANR_SL2_GAIN2_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2;
    MINT32 NBC_ANR_SL2_GAIN3_U_L		= rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3;
    MINT32 NBC_ANR_SL2_SCALE_GAIN_U_L		= rParam.rUpperIso_LowerZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN;
    MINT32 NBC_ANR_SL2_C_GAIN_U_L		= rParam.rUpperIso_LowerZoom.sl2.bits.NBC_ANR_SL2_C_GAIN;
    MINT32 NBC_ANR_C_L_DIFF_TH_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC_ANR_C_L_DIFF_TH;
    MINT32 NBC_ANR_C_SM_EDGE_TH_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_U_L		= rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_U_L		= rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_LPF_U_L		= rParam.rUpperIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_LPF_U_L		= rParam.rUpperIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF;
    MINT32 NBC_ANR_Y_ACT_CEN_TH_U_L		= rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH;
    MINT32 NBC_ANR_Y_ACT_CEN_GAIN_U_L		= rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN;
    MINT32 NBC_ANR_Y_ACT_CEN_OFT_U_L		= rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT;
    MINT32 NBC_ANR_Y_VERT_SIGMA_U_L		= rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA;
    MINT32 NBC_ANR_Y_VERT_ACT_TH_U_L		= rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH;
    MINT32 NBC_ANR_C_CPX1_U_L		= rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX1;
    MINT32 NBC_ANR_C_CPX2_U_L		= rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX2;
    MINT32 NBC_ANR_C_CPX3_U_L		= rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX3;
    MINT32 NBC_ANR_C_SCALE_CPY0_U_L		= rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0;
    MINT32 NBC_ANR_C_SCALE_CPY1_U_L		= rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1;
    MINT32 NBC_ANR_C_SCALE_CPY2_U_L		= rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2;
    MINT32 NBC_ANR_C_SCALE_CPY3_U_L		= rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3;
    MINT32 NBC_ANR_Y_L0_V_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4;
    MINT32 NBC_ANR_Y_L0_V_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3;
    MINT32 NBC_ANR_Y_L0_V_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2;
    MINT32 NBC_ANR_Y_L0_V_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1;
    MINT32 NBC_ANR_PTC_GAIN_TH_U_L		= rParam.rUpperIso_LowerZoom.cad.bits.NBC_ANR_PTC_GAIN_TH;
    MINT32 NBC_ANR_Y_L1_V_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4;
    MINT32 NBC_ANR_Y_L1_V_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3;
    MINT32 NBC_ANR_Y_L1_V_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2;
    MINT32 NBC_ANR_Y_L1_V_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1;
    MINT32 NBC_ANR_Y_L2_V_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4;
    MINT32 NBC_ANR_Y_L2_V_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3;
    MINT32 NBC_ANR_Y_L2_V_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2;
    MINT32 NBC_ANR_Y_L2_V_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1;
    MINT32 NBC_ANR_Y_L3_V_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4;
    MINT32 NBC_ANR_Y_L3_V_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3;
    MINT32 NBC_ANR_Y_L3_V_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2;
    MINT32 NBC_ANR_Y_L3_V_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1;
    MINT32 NBC_ANR_Y_L0_H_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4;
    MINT32 NBC_ANR_Y_L0_H_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3;
    MINT32 NBC_ANR_Y_L0_H_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2;
    MINT32 NBC_ANR_Y_L0_H_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1;
    MINT32 NBC_ANR_Y_L1_H_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4;
    MINT32 NBC_ANR_Y_L1_H_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3;
    MINT32 NBC_ANR_Y_L1_H_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2;
    MINT32 NBC_ANR_Y_L1_H_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1;
    MINT32 NBC_ANR_Y_L2_H_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4;
    MINT32 NBC_ANR_Y_L2_H_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3;
    MINT32 NBC_ANR_Y_L2_H_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2;
    MINT32 NBC_ANR_Y_L2_H_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1;
    MINT32 NBC_ANR_TBL_CPX1_U_L		= rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX1;
    MINT32 NBC_ANR_TBL_CPX2_U_L		= rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX2;
    MINT32 NBC_ANR_TBL_CPX3_U_L		= rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX3;
    MINT32 NBC_ANR_TBL_GAIN_CPY0_U_L		= rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0;
    MINT32 NBC_ANR_TBL_GAIN_CPY1_U_L		= rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1;
    MINT32 NBC_ANR_TBL_GAIN_CPY2_U_L		= rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2;
    MINT32 NBC_ANR_TBL_GAIN_CPY3_U_L		= rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3;
    MINT32 NBC_ANR_ACT_SL2_GAIN_U_L		= rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN;
    MINT32 NBC_ANR_ACT_DIF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN;
    MINT32 NBC_ANR_ACT_DIF_LO_TH_U_L		= rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH;
    MINT32 NBC_ANR_ACT_DIF_HI_TH_U_L		= rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH;
    MINT32 NBC_ANR_Y_L3_H_RNG4_U_L		= rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4;
    MINT32 NBC_ANR_Y_L3_H_RNG3_U_L		= rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3;
    MINT32 NBC_ANR_Y_L3_H_RNG2_U_L		= rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2;
    MINT32 NBC_ANR_Y_L3_H_RNG1_U_L		= rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1;
    MINT32 NBC_ANR_Y_HF_ACT_X1_U_L		= rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1;
    MINT32 NBC_ANR_Y_HF_ACT_X2_U_L		= rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2;
    MINT32 NBC_ANR_Y_HF_ACT_X3_U_L		= rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3;
    MINT32 NBC_ANR_Y_HF_ACT_X4_U_L		= rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4;
    MINT32 NBC_ANR_Y_HF_ACT_Y0_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0;
    MINT32 NBC_ANR_Y_HF_ACT_Y1_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1;
    MINT32 NBC_ANR_Y_HF_ACT_Y2_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2;
    MINT32 NBC_ANR_Y_HF_ACT_Y3_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3;
    MINT32 NBC_ANR_Y_HF_ACT_Y4_U_L		= rParam.rUpperIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4;
    MINT32 NBC_ANR_Y_HF_LUMA_X1_U_L		= rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1;
    MINT32 NBC_ANR_Y_HF_LUMA_X2_U_L		= rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2;
    MINT32 NBC_ANR_Y_HF_LUMA_Y0_U_L		= rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0;
    MINT32 NBC_ANR_Y_HF_LUMA_Y1_U_L		= rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1;
    MINT32 NBC_ANR_Y_HF_LUMA_Y2_U_L		= rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2;
    MINT32 NBC_ANR_Y_HF_LUMA_SP2_U_L		= rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2;
    MINT32 NBC_ANR_C_DITH_U_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_U;
    MINT32 NBC_ANR_C_DITH_V_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_V;
    MINT32 NBC_ANR_ACT_BLD_BASE_C_U_L		= rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C;
    MINT32 NBC_ANR_Y_L0_HF_W_U_L		= rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W;
    MINT32 NBC_ANR_Y_L1_HF_W_U_L		= rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W;
    MINT32 NBC_ANR_Y_L2_HF_W_U_L		= rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W;
    MINT32 NBC_ANR_Y_L3_HF_W_U_L		= rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W;
    MINT32 NBC_ANR_Y_HF_CLIP_U_L		= rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP;
    MINT32 NBC_ANR_Y_HF_CORE_SL_U_L		= rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL;
    MINT32 NBC_ANR_Y_HF_CORE_TH_U_L		= rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH;
    MINT32 NBC_ANR_Y_ACT_CPX1_U_L		= rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1;
    MINT32 NBC_ANR_Y_ACT_CPX2_U_L		= rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2;
    MINT32 NBC_ANR_Y_ACT_CPX3_U_L		= rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3;
    MINT32 NBC_ANR_Y_ACT_CPY0_U_L		= rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0;
    MINT32 NBC_ANR_Y_ACT_CPY1_U_L		= rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1;
    MINT32 NBC_ANR_Y_ACT_CPY2_U_L		= rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2;
    MINT32 NBC_ANR_Y_ACT_CPY3_U_L		= rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3;
    MINT32 NBC_ANR_TBL_PRC_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_TBL_PRC;
    MINT32 NBC_ANR_TABLE_EN_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_TABLE_EN;
    MINT32 NBC_ANR_ENY_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_ENY;
    MINT32 NBC_ANR_ENC_U_L		= rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_ENC;
    MINT32 NBC_ANR_C_SM_EDGE_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE;
    MINT32 NBC_ANR_FLT_C_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_FLT_C;
    MINT32 NBC_ANR_IMPL_MODE_U_L		= rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_IMPL_MODE;
    MINT32 NBC_ANR_HF_BAL_MODE_U_L		= rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE;

    MINT32 NBC_ANR_LTM_LINK_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_LTM_LINK;
    MINT32 NBC_ANR_PTY_GAIN_TH_U_U		= rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_SL_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_SL_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_SL_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_SL_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL;
    MINT32 NBC_ANR_Y_L0_RNG_RAT_TH_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L1_RNG_RAT_TH_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L2_RNG_RAT_TH_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_L3_RNG_RAT_TH_U_U		= rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH;
    MINT32 NBC_ANR_Y_FLT0_IDX_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT0_IDX;
    MINT32 NBC_ANR_Y_FLT1_IDX_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT1_IDX;
    MINT32 NBC_ANR_Y_FLT2_IDX_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT2_IDX;
    MINT32 NBC_ANR_Y_FLT3_IDX_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT3_IDX;
    MINT32 NBC_ANR_Y_SLOPE_H_TH_U_U		= rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH;
    MINT32 NBC_ANR_Y_SLOPE_V_TH_U_U		= rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH;
    MINT32 NBC_ANR_C_V_RNG1_U_U		= rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG1;
    MINT32 NBC_ANR_C_V_RNG2_U_U		= rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG2;
    MINT32 NBC_ANR_C_V_RNG3_U_U		= rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG3;
    MINT32 NBC_ANR_C_V_RNG4_U_U		= rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG4;
    MINT32 NBC_ANR_C_H_RNG1_U_U		= rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG1;
    MINT32 NBC_ANR_C_H_RNG2_U_U		= rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG2;
    MINT32 NBC_ANR_C_H_RNG3_U_U		= rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG3;
    MINT32 NBC_ANR_C_H_RNG4_U_U		= rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG4;
    MINT32 NBC_ANR_Y_CPX1_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX1;
    MINT32 NBC_ANR_Y_CPX2_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX2;
    MINT32 NBC_ANR_Y_CPX3_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX3;
    MINT32 NBC_ANR_Y_CPX4_U_U		= rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX4;
    MINT32 NBC_ANR_Y_CPX5_U_U		= rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX5;
    MINT32 NBC_ANR_Y_CPX6_U_U		= rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX6;
    MINT32 NBC_ANR_Y_CPX7_U_U		= rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX7;
    MINT32 NBC_ANR_Y_CPX8_U_U		= rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX8;
    MINT32 NBC_ANR_Y_SCALE_CPY0_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0;
    MINT32 NBC_ANR_Y_SCALE_CPY1_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1;
    MINT32 NBC_ANR_Y_SCALE_CPY2_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2;
    MINT32 NBC_ANR_Y_SCALE_CPY3_U_U		= rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3;
    MINT32 NBC_ANR_Y_SCALE_CPY4_U_U		= rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4;
    MINT32 NBC_ANR_Y_SCALE_CPY5_U_U		= rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5;
    MINT32 NBC_ANR_Y_SCALE_CPY6_U_U		= rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6;
    MINT32 NBC_ANR_Y_SCALE_CPY7_U_U		= rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7;
    MINT32 NBC_ANR_Y_SCALE_CPY8_U_U		= rParam.rUpperIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8;
    MINT32 NBC_ANR_SL2_LINK_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_SL2_LINK;
    MINT32 NBC_ANR_SL2_X1_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X1;
    MINT32 NBC_ANR_SL2_X2_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X2;
    MINT32 NBC_ANR_SL2_X3_U_U		= rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X3;
    MINT32 NBC_ANR_SL2_GAIN0_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0;
    MINT32 NBC_ANR_SL2_GAIN1_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1;
    MINT32 NBC_ANR_SL2_GAIN2_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2;
    MINT32 NBC_ANR_SL2_GAIN3_U_U		= rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3;
    MINT32 NBC_ANR_SL2_SCALE_GAIN_U_U		= rParam.rUpperIso_UpperZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN;
    MINT32 NBC_ANR_SL2_C_GAIN_U_U		= rParam.rUpperIso_UpperZoom.sl2.bits.NBC_ANR_SL2_C_GAIN;
    MINT32 NBC_ANR_C_L_DIFF_TH_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC_ANR_C_L_DIFF_TH;
    MINT32 NBC_ANR_C_SM_EDGE_TH_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_U_U		= rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_U_U		= rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH;
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_LPF_U_U		= rParam.rUpperIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF;
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_LPF_U_U		= rParam.rUpperIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF;
    MINT32 NBC_ANR_Y_ACT_CEN_TH_U_U		= rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH;
    MINT32 NBC_ANR_Y_ACT_CEN_GAIN_U_U		= rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN;
    MINT32 NBC_ANR_Y_ACT_CEN_OFT_U_U		= rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT;
    MINT32 NBC_ANR_Y_VERT_SIGMA_U_U		= rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA;
    MINT32 NBC_ANR_Y_VERT_ACT_TH_U_U		= rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH;
    MINT32 NBC_ANR_C_CPX1_U_U		= rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX1;
    MINT32 NBC_ANR_C_CPX2_U_U		= rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX2;
    MINT32 NBC_ANR_C_CPX3_U_U		= rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX3;
    MINT32 NBC_ANR_C_SCALE_CPY0_U_U		= rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0;
    MINT32 NBC_ANR_C_SCALE_CPY1_U_U		= rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1;
    MINT32 NBC_ANR_C_SCALE_CPY2_U_U		= rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2;
    MINT32 NBC_ANR_C_SCALE_CPY3_U_U		= rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3;
    MINT32 NBC_ANR_Y_L0_V_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4;
    MINT32 NBC_ANR_Y_L0_V_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3;
    MINT32 NBC_ANR_Y_L0_V_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2;
    MINT32 NBC_ANR_Y_L0_V_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1;
    MINT32 NBC_ANR_PTC_GAIN_TH_U_U		= rParam.rUpperIso_UpperZoom.cad.bits.NBC_ANR_PTC_GAIN_TH;
    MINT32 NBC_ANR_Y_L1_V_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4;
    MINT32 NBC_ANR_Y_L1_V_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3;
    MINT32 NBC_ANR_Y_L1_V_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2;
    MINT32 NBC_ANR_Y_L1_V_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1;
    MINT32 NBC_ANR_Y_L2_V_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4;
    MINT32 NBC_ANR_Y_L2_V_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3;
    MINT32 NBC_ANR_Y_L2_V_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2;
    MINT32 NBC_ANR_Y_L2_V_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1;
    MINT32 NBC_ANR_Y_L3_V_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4;
    MINT32 NBC_ANR_Y_L3_V_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3;
    MINT32 NBC_ANR_Y_L3_V_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2;
    MINT32 NBC_ANR_Y_L3_V_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1;
    MINT32 NBC_ANR_Y_L0_H_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4;
    MINT32 NBC_ANR_Y_L0_H_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3;
    MINT32 NBC_ANR_Y_L0_H_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2;
    MINT32 NBC_ANR_Y_L0_H_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1;
    MINT32 NBC_ANR_Y_L1_H_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4;
    MINT32 NBC_ANR_Y_L1_H_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3;
    MINT32 NBC_ANR_Y_L1_H_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2;
    MINT32 NBC_ANR_Y_L1_H_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1;
    MINT32 NBC_ANR_Y_L2_H_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4;
    MINT32 NBC_ANR_Y_L2_H_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3;
    MINT32 NBC_ANR_Y_L2_H_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2;
    MINT32 NBC_ANR_Y_L2_H_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1;
    MINT32 NBC_ANR_TBL_CPX1_U_U		= rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX1;
    MINT32 NBC_ANR_TBL_CPX2_U_U		= rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX2;
    MINT32 NBC_ANR_TBL_CPX3_U_U		= rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX3;
    MINT32 NBC_ANR_TBL_GAIN_CPY0_U_U		= rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0;
    MINT32 NBC_ANR_TBL_GAIN_CPY1_U_U		= rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1;
    MINT32 NBC_ANR_TBL_GAIN_CPY2_U_U		= rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2;
    MINT32 NBC_ANR_TBL_GAIN_CPY3_U_U		= rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3;
    MINT32 NBC_ANR_ACT_SL2_GAIN_U_U		= rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN;
    MINT32 NBC_ANR_ACT_DIF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN;
    MINT32 NBC_ANR_ACT_DIF_LO_TH_U_U		= rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH;
    MINT32 NBC_ANR_ACT_DIF_HI_TH_U_U		= rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH;
    MINT32 NBC_ANR_Y_L3_H_RNG4_U_U		= rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4;
    MINT32 NBC_ANR_Y_L3_H_RNG3_U_U		= rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3;
    MINT32 NBC_ANR_Y_L3_H_RNG2_U_U		= rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2;
    MINT32 NBC_ANR_Y_L3_H_RNG1_U_U		= rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1;
    MINT32 NBC_ANR_Y_HF_ACT_X1_U_U		= rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1;
    MINT32 NBC_ANR_Y_HF_ACT_X2_U_U		= rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2;
    MINT32 NBC_ANR_Y_HF_ACT_X3_U_U		= rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3;
    MINT32 NBC_ANR_Y_HF_ACT_X4_U_U		= rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4;
    MINT32 NBC_ANR_Y_HF_ACT_Y0_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0;
    MINT32 NBC_ANR_Y_HF_ACT_Y1_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1;
    MINT32 NBC_ANR_Y_HF_ACT_Y2_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2;
    MINT32 NBC_ANR_Y_HF_ACT_Y3_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3;
    MINT32 NBC_ANR_Y_HF_ACT_Y4_U_U		= rParam.rUpperIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4;
    MINT32 NBC_ANR_Y_HF_LUMA_X1_U_U		= rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1;
    MINT32 NBC_ANR_Y_HF_LUMA_X2_U_U		= rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2;
    MINT32 NBC_ANR_Y_HF_LUMA_Y0_U_U		= rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0;
    MINT32 NBC_ANR_Y_HF_LUMA_Y1_U_U		= rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1;
    MINT32 NBC_ANR_Y_HF_LUMA_Y2_U_U		= rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2;
    MINT32 NBC_ANR_Y_HF_LUMA_SP2_U_U		= rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2;
    MINT32 NBC_ANR_C_DITH_U_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_U;
    MINT32 NBC_ANR_C_DITH_V_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_V;
    MINT32 NBC_ANR_ACT_BLD_BASE_C_U_U		= rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C;
    MINT32 NBC_ANR_Y_L0_HF_W_U_U		= rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W;
    MINT32 NBC_ANR_Y_L1_HF_W_U_U		= rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W;
    MINT32 NBC_ANR_Y_L2_HF_W_U_U		= rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W;
    MINT32 NBC_ANR_Y_L3_HF_W_U_U		= rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W;
    MINT32 NBC_ANR_Y_HF_CLIP_U_U		= rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP;
    MINT32 NBC_ANR_Y_HF_CORE_SL_U_U		= rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL;
    MINT32 NBC_ANR_Y_HF_CORE_TH_U_U		= rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH;
    MINT32 NBC_ANR_Y_ACT_CPX1_U_U		= rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1;
    MINT32 NBC_ANR_Y_ACT_CPX2_U_U		= rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2;
    MINT32 NBC_ANR_Y_ACT_CPX3_U_U		= rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3;
    MINT32 NBC_ANR_Y_ACT_CPY0_U_U		= rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0;
    MINT32 NBC_ANR_Y_ACT_CPY1_U_U		= rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1;
    MINT32 NBC_ANR_Y_ACT_CPY2_U_U		= rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2;
    MINT32 NBC_ANR_Y_ACT_CPY3_U_U		= rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3;
    MINT32 NBC_ANR_TBL_PRC_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_TBL_PRC;
    MINT32 NBC_ANR_TABLE_EN_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_TABLE_EN;
    MINT32 NBC_ANR_ENY_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_ENY;
    MINT32 NBC_ANR_ENC_U_U		= rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_ENC;
    MINT32 NBC_ANR_C_SM_EDGE_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE;
    MINT32 NBC_ANR_FLT_C_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_FLT_C;
    MINT32 NBC_ANR_IMPL_MODE_U_U		= rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_IMPL_MODE;
    MINT32 NBC_ANR_HF_BAL_MODE_U_U		= rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE;


    // interpolation core
    MINT32 NBC_ANR_LTM_LINK		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_LTM_LINK_L_L, NBC_ANR_LTM_LINK_L_U, NBC_ANR_LTM_LINK_U_L, NBC_ANR_LTM_LINK_U_U, 4);
    MINT32 NBC_ANR_PTY_GAIN_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_PTY_GAIN_TH_L_L, NBC_ANR_PTY_GAIN_TH_L_U, NBC_ANR_PTY_GAIN_TH_U_L, NBC_ANR_PTY_GAIN_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L0_RNG_RAT_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_RNG_RAT_SL_L_L, NBC_ANR_Y_L0_RNG_RAT_SL_L_U, NBC_ANR_Y_L0_RNG_RAT_SL_U_L, NBC_ANR_Y_L0_RNG_RAT_SL_U_U, 4);
    MINT32 NBC_ANR_Y_L1_RNG_RAT_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_RNG_RAT_SL_L_L, NBC_ANR_Y_L1_RNG_RAT_SL_L_U, NBC_ANR_Y_L1_RNG_RAT_SL_U_L, NBC_ANR_Y_L1_RNG_RAT_SL_U_U, 4);
    MINT32 NBC_ANR_Y_L2_RNG_RAT_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_RNG_RAT_SL_L_L, NBC_ANR_Y_L2_RNG_RAT_SL_L_U, NBC_ANR_Y_L2_RNG_RAT_SL_U_L, NBC_ANR_Y_L2_RNG_RAT_SL_U_U, 4);
    MINT32 NBC_ANR_Y_L3_RNG_RAT_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_RNG_RAT_SL_L_L, NBC_ANR_Y_L3_RNG_RAT_SL_L_U, NBC_ANR_Y_L3_RNG_RAT_SL_U_L, NBC_ANR_Y_L3_RNG_RAT_SL_U_U, 4);
    MINT32 NBC_ANR_Y_L0_RNG_RAT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_RNG_RAT_TH_L_L, NBC_ANR_Y_L0_RNG_RAT_TH_L_U, NBC_ANR_Y_L0_RNG_RAT_TH_U_L, NBC_ANR_Y_L0_RNG_RAT_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L1_RNG_RAT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_RNG_RAT_TH_L_L, NBC_ANR_Y_L1_RNG_RAT_TH_L_U, NBC_ANR_Y_L1_RNG_RAT_TH_U_L, NBC_ANR_Y_L1_RNG_RAT_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L2_RNG_RAT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_RNG_RAT_TH_L_L, NBC_ANR_Y_L2_RNG_RAT_TH_L_U, NBC_ANR_Y_L2_RNG_RAT_TH_U_L, NBC_ANR_Y_L2_RNG_RAT_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L3_RNG_RAT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_RNG_RAT_TH_L_L, NBC_ANR_Y_L3_RNG_RAT_TH_L_U, NBC_ANR_Y_L3_RNG_RAT_TH_U_L, NBC_ANR_Y_L3_RNG_RAT_TH_U_U, 4);
    MINT32 NBC_ANR_Y_FLT0_IDX		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_FLT0_IDX_L_L, NBC_ANR_Y_FLT0_IDX_L_U, NBC_ANR_Y_FLT0_IDX_U_L, NBC_ANR_Y_FLT0_IDX_U_U, 4);
    MINT32 NBC_ANR_Y_FLT1_IDX		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_FLT1_IDX_L_L, NBC_ANR_Y_FLT1_IDX_L_U, NBC_ANR_Y_FLT1_IDX_U_L, NBC_ANR_Y_FLT1_IDX_U_U, 4);
    MINT32 NBC_ANR_Y_FLT2_IDX		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_FLT2_IDX_L_L, NBC_ANR_Y_FLT2_IDX_L_U, NBC_ANR_Y_FLT2_IDX_U_L, NBC_ANR_Y_FLT2_IDX_U_U, 4);
    MINT32 NBC_ANR_Y_FLT3_IDX		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_FLT3_IDX_L_L, NBC_ANR_Y_FLT3_IDX_L_U, NBC_ANR_Y_FLT3_IDX_U_L, NBC_ANR_Y_FLT3_IDX_U_U, 4);
    MINT32 NBC_ANR_Y_SLOPE_H_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SLOPE_H_TH_L_L, NBC_ANR_Y_SLOPE_H_TH_L_U, NBC_ANR_Y_SLOPE_H_TH_U_L, NBC_ANR_Y_SLOPE_H_TH_U_U, 4);
    MINT32 NBC_ANR_Y_SLOPE_V_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SLOPE_V_TH_L_L, NBC_ANR_Y_SLOPE_V_TH_L_U, NBC_ANR_Y_SLOPE_V_TH_U_L, NBC_ANR_Y_SLOPE_V_TH_U_U, 4);
    MINT32 NBC_ANR_C_V_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_V_RNG1_L_L, NBC_ANR_C_V_RNG1_L_U, NBC_ANR_C_V_RNG1_U_L, NBC_ANR_C_V_RNG1_U_U, 4);
    MINT32 NBC_ANR_C_V_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_V_RNG2_L_L, NBC_ANR_C_V_RNG2_L_U, NBC_ANR_C_V_RNG2_U_L, NBC_ANR_C_V_RNG2_U_U, 4);
    MINT32 NBC_ANR_C_V_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_V_RNG3_L_L, NBC_ANR_C_V_RNG3_L_U, NBC_ANR_C_V_RNG3_U_L, NBC_ANR_C_V_RNG3_U_U, 4);
    MINT32 NBC_ANR_C_V_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_V_RNG4_L_L, NBC_ANR_C_V_RNG4_L_U, NBC_ANR_C_V_RNG4_U_L, NBC_ANR_C_V_RNG4_U_U, 4);
    MINT32 NBC_ANR_C_H_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_H_RNG1_L_L, NBC_ANR_C_H_RNG1_L_U, NBC_ANR_C_H_RNG1_U_L, NBC_ANR_C_H_RNG1_U_U, 4);
    MINT32 NBC_ANR_C_H_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_H_RNG2_L_L, NBC_ANR_C_H_RNG2_L_U, NBC_ANR_C_H_RNG2_U_L, NBC_ANR_C_H_RNG2_U_U, 4);
    MINT32 NBC_ANR_C_H_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_H_RNG3_L_L, NBC_ANR_C_H_RNG3_L_U, NBC_ANR_C_H_RNG3_U_L, NBC_ANR_C_H_RNG3_U_U, 4);
    MINT32 NBC_ANR_C_H_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_H_RNG4_L_L, NBC_ANR_C_H_RNG4_L_U, NBC_ANR_C_H_RNG4_U_L, NBC_ANR_C_H_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX1_L_L, NBC_ANR_Y_CPX1_L_U, NBC_ANR_Y_CPX1_U_L, NBC_ANR_Y_CPX1_U_U, 4);
    MINT32 NBC_ANR_Y_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX2_L_L, NBC_ANR_Y_CPX2_L_U, NBC_ANR_Y_CPX2_U_L, NBC_ANR_Y_CPX2_U_U, 4);
    MINT32 NBC_ANR_Y_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX3_L_L, NBC_ANR_Y_CPX3_L_U, NBC_ANR_Y_CPX3_U_L, NBC_ANR_Y_CPX3_U_U, 4);
    MINT32 NBC_ANR_Y_CPX4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX4_L_L, NBC_ANR_Y_CPX4_L_U, NBC_ANR_Y_CPX4_U_L, NBC_ANR_Y_CPX4_U_U, 4);
    MINT32 NBC_ANR_Y_CPX5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX5_L_L, NBC_ANR_Y_CPX5_L_U, NBC_ANR_Y_CPX5_U_L, NBC_ANR_Y_CPX5_U_U, 4);
    MINT32 NBC_ANR_Y_CPX6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX6_L_L, NBC_ANR_Y_CPX6_L_U, NBC_ANR_Y_CPX6_U_L, NBC_ANR_Y_CPX6_U_U, 4);
    MINT32 NBC_ANR_Y_CPX7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX7_L_L, NBC_ANR_Y_CPX7_L_U, NBC_ANR_Y_CPX7_U_L, NBC_ANR_Y_CPX7_U_U, 4);
    MINT32 NBC_ANR_Y_CPX8		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_CPX8_L_L, NBC_ANR_Y_CPX8_L_U, NBC_ANR_Y_CPX8_U_L, NBC_ANR_Y_CPX8_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY0_L_L, NBC_ANR_Y_SCALE_CPY0_L_U, NBC_ANR_Y_SCALE_CPY0_U_L, NBC_ANR_Y_SCALE_CPY0_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY1_L_L, NBC_ANR_Y_SCALE_CPY1_L_U, NBC_ANR_Y_SCALE_CPY1_U_L, NBC_ANR_Y_SCALE_CPY1_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY2_L_L, NBC_ANR_Y_SCALE_CPY2_L_U, NBC_ANR_Y_SCALE_CPY2_U_L, NBC_ANR_Y_SCALE_CPY2_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY3_L_L, NBC_ANR_Y_SCALE_CPY3_L_U, NBC_ANR_Y_SCALE_CPY3_U_L, NBC_ANR_Y_SCALE_CPY3_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY4_L_L, NBC_ANR_Y_SCALE_CPY4_L_U, NBC_ANR_Y_SCALE_CPY4_U_L, NBC_ANR_Y_SCALE_CPY4_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY5_L_L, NBC_ANR_Y_SCALE_CPY5_L_U, NBC_ANR_Y_SCALE_CPY5_U_L, NBC_ANR_Y_SCALE_CPY5_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY6_L_L, NBC_ANR_Y_SCALE_CPY6_L_U, NBC_ANR_Y_SCALE_CPY6_U_L, NBC_ANR_Y_SCALE_CPY6_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY7_L_L, NBC_ANR_Y_SCALE_CPY7_L_U, NBC_ANR_Y_SCALE_CPY7_U_L, NBC_ANR_Y_SCALE_CPY7_U_U, 4);
    MINT32 NBC_ANR_Y_SCALE_CPY8		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_CPY8_L_L, NBC_ANR_Y_SCALE_CPY8_L_U, NBC_ANR_Y_SCALE_CPY8_U_L, NBC_ANR_Y_SCALE_CPY8_U_U, 4);
    MINT32 NBC_ANR_SL2_LINK		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_LINK_L_L, NBC_ANR_SL2_LINK_L_U, NBC_ANR_SL2_LINK_U_L, NBC_ANR_SL2_LINK_U_U, 4);
    MINT32 NBC_ANR_SL2_X1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_X1_L_L, NBC_ANR_SL2_X1_L_U, NBC_ANR_SL2_X1_U_L, NBC_ANR_SL2_X1_U_U, 4);
    MINT32 NBC_ANR_SL2_X2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_X2_L_L, NBC_ANR_SL2_X2_L_U, NBC_ANR_SL2_X2_U_L, NBC_ANR_SL2_X2_U_U, 4);
    MINT32 NBC_ANR_SL2_X3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_X3_L_L, NBC_ANR_SL2_X3_L_U, NBC_ANR_SL2_X3_U_L, NBC_ANR_SL2_X3_U_U, 4);
    MINT32 NBC_ANR_SL2_GAIN0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_GAIN0_L_L, NBC_ANR_SL2_GAIN0_L_U, NBC_ANR_SL2_GAIN0_U_L, NBC_ANR_SL2_GAIN0_U_U, 4);
    MINT32 NBC_ANR_SL2_GAIN1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_GAIN1_L_L, NBC_ANR_SL2_GAIN1_L_U, NBC_ANR_SL2_GAIN1_U_L, NBC_ANR_SL2_GAIN1_U_U, 4);
    MINT32 NBC_ANR_SL2_GAIN2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_GAIN2_L_L, NBC_ANR_SL2_GAIN2_L_U, NBC_ANR_SL2_GAIN2_U_L, NBC_ANR_SL2_GAIN2_U_U, 4);
    MINT32 NBC_ANR_SL2_GAIN3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_GAIN3_L_L, NBC_ANR_SL2_GAIN3_L_U, NBC_ANR_SL2_GAIN3_U_L, NBC_ANR_SL2_GAIN3_U_U, 4);
    MINT32 NBC_ANR_SL2_SCALE_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_SCALE_GAIN_L_L, NBC_ANR_SL2_SCALE_GAIN_L_U, NBC_ANR_SL2_SCALE_GAIN_U_L, NBC_ANR_SL2_SCALE_GAIN_U_U, 4);
    MINT32 NBC_ANR_SL2_C_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_C_GAIN_L_L, NBC_ANR_SL2_C_GAIN_L_U, NBC_ANR_SL2_C_GAIN_U_L, NBC_ANR_SL2_C_GAIN_U_U, 4);
    MINT32 NBC_ANR_C_L_DIFF_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_L_DIFF_TH_L_L, NBC_ANR_C_L_DIFF_TH_L_U, NBC_ANR_C_L_DIFF_TH_U_L, NBC_ANR_C_L_DIFF_TH_U_U, 4);
    MINT32 NBC_ANR_C_SM_EDGE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SM_EDGE_TH_L_L, NBC_ANR_C_SM_EDGE_TH_L_U, NBC_ANR_C_SM_EDGE_TH_U_L, NBC_ANR_C_SM_EDGE_TH_U_U, 4);
    MINT32 NBC_ANR_CEN_GAIN_HI_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_CEN_GAIN_HI_TH_L_L, NBC_ANR_CEN_GAIN_HI_TH_L_U, NBC_ANR_CEN_GAIN_HI_TH_U_L, NBC_ANR_CEN_GAIN_HI_TH_U_U, 4);
    MINT32 NBC_ANR_CEN_GAIN_LO_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_CEN_GAIN_LO_TH_L_L, NBC_ANR_CEN_GAIN_LO_TH_L_U, NBC_ANR_CEN_GAIN_LO_TH_U_L, NBC_ANR_CEN_GAIN_LO_TH_U_U, 4);
    MINT32 NBC_ANR_CEN_GAIN_HI_TH_LPF		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_CEN_GAIN_HI_TH_LPF_L_L, NBC_ANR_CEN_GAIN_HI_TH_LPF_L_U, NBC_ANR_CEN_GAIN_HI_TH_LPF_U_L, NBC_ANR_CEN_GAIN_HI_TH_LPF_U_U, 4);
    MINT32 NBC_ANR_CEN_GAIN_LO_TH_LPF		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_CEN_GAIN_LO_TH_LPF_L_L, NBC_ANR_CEN_GAIN_LO_TH_LPF_L_U, NBC_ANR_CEN_GAIN_LO_TH_LPF_U_L, NBC_ANR_CEN_GAIN_LO_TH_LPF_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CEN_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CEN_TH_L_L, NBC_ANR_Y_ACT_CEN_TH_L_U, NBC_ANR_Y_ACT_CEN_TH_U_L, NBC_ANR_Y_ACT_CEN_TH_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CEN_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CEN_GAIN_L_L, NBC_ANR_Y_ACT_CEN_GAIN_L_U, NBC_ANR_Y_ACT_CEN_GAIN_U_L, NBC_ANR_Y_ACT_CEN_GAIN_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CEN_OFT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CEN_OFT_L_L, NBC_ANR_Y_ACT_CEN_OFT_L_U, NBC_ANR_Y_ACT_CEN_OFT_U_L, NBC_ANR_Y_ACT_CEN_OFT_U_U, 4);
    MINT32 NBC_ANR_Y_VERT_SIGMA		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_VERT_SIGMA_L_L, NBC_ANR_Y_VERT_SIGMA_L_U, NBC_ANR_Y_VERT_SIGMA_U_L, NBC_ANR_Y_VERT_SIGMA_U_U, 4);
    MINT32 NBC_ANR_Y_VERT_ACT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_VERT_ACT_TH_L_L, NBC_ANR_Y_VERT_ACT_TH_L_U, NBC_ANR_Y_VERT_ACT_TH_U_L, NBC_ANR_Y_VERT_ACT_TH_U_U, 4);
    MINT32 NBC_ANR_C_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_CPX1_L_L, NBC_ANR_C_CPX1_L_U, NBC_ANR_C_CPX1_U_L, NBC_ANR_C_CPX1_U_U, 4);
    MINT32 NBC_ANR_C_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_CPX2_L_L, NBC_ANR_C_CPX2_L_U, NBC_ANR_C_CPX2_U_L, NBC_ANR_C_CPX2_U_U, 4);
    MINT32 NBC_ANR_C_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_CPX3_L_L, NBC_ANR_C_CPX3_L_U, NBC_ANR_C_CPX3_U_L, NBC_ANR_C_CPX3_U_U, 4);
    MINT32 NBC_ANR_C_SCALE_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SCALE_CPY0_L_L, NBC_ANR_C_SCALE_CPY0_L_U, NBC_ANR_C_SCALE_CPY0_U_L, NBC_ANR_C_SCALE_CPY0_U_U, 4);
    MINT32 NBC_ANR_C_SCALE_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SCALE_CPY1_L_L, NBC_ANR_C_SCALE_CPY1_L_U, NBC_ANR_C_SCALE_CPY1_U_L, NBC_ANR_C_SCALE_CPY1_U_U, 4);
    MINT32 NBC_ANR_C_SCALE_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SCALE_CPY2_L_L, NBC_ANR_C_SCALE_CPY2_L_U, NBC_ANR_C_SCALE_CPY2_U_L, NBC_ANR_C_SCALE_CPY2_U_U, 4);
    MINT32 NBC_ANR_C_SCALE_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SCALE_CPY3_L_L, NBC_ANR_C_SCALE_CPY3_L_U, NBC_ANR_C_SCALE_CPY3_U_L, NBC_ANR_C_SCALE_CPY3_U_U, 4);
    MINT32 NBC_ANR_Y_L0_V_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_V_RNG4_L_L, NBC_ANR_Y_L0_V_RNG4_L_U, NBC_ANR_Y_L0_V_RNG4_U_L, NBC_ANR_Y_L0_V_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L0_V_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_V_RNG3_L_L, NBC_ANR_Y_L0_V_RNG3_L_U, NBC_ANR_Y_L0_V_RNG3_U_L, NBC_ANR_Y_L0_V_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L0_V_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_V_RNG2_L_L, NBC_ANR_Y_L0_V_RNG2_L_U, NBC_ANR_Y_L0_V_RNG2_U_L, NBC_ANR_Y_L0_V_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L0_V_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_V_RNG1_L_L, NBC_ANR_Y_L0_V_RNG1_L_U, NBC_ANR_Y_L0_V_RNG1_U_L, NBC_ANR_Y_L0_V_RNG1_U_U, 4);
    MINT32 NBC_ANR_PTC_GAIN_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_PTC_GAIN_TH_L_L, NBC_ANR_PTC_GAIN_TH_L_U, NBC_ANR_PTC_GAIN_TH_U_L, NBC_ANR_PTC_GAIN_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L1_V_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_V_RNG4_L_L, NBC_ANR_Y_L1_V_RNG4_L_U, NBC_ANR_Y_L1_V_RNG4_U_L, NBC_ANR_Y_L1_V_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L1_V_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_V_RNG3_L_L, NBC_ANR_Y_L1_V_RNG3_L_U, NBC_ANR_Y_L1_V_RNG3_U_L, NBC_ANR_Y_L1_V_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L1_V_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_V_RNG2_L_L, NBC_ANR_Y_L1_V_RNG2_L_U, NBC_ANR_Y_L1_V_RNG2_U_L, NBC_ANR_Y_L1_V_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L1_V_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_V_RNG1_L_L, NBC_ANR_Y_L1_V_RNG1_L_U, NBC_ANR_Y_L1_V_RNG1_U_L, NBC_ANR_Y_L1_V_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_L2_V_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_V_RNG4_L_L, NBC_ANR_Y_L2_V_RNG4_L_U, NBC_ANR_Y_L2_V_RNG4_U_L, NBC_ANR_Y_L2_V_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L2_V_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_V_RNG3_L_L, NBC_ANR_Y_L2_V_RNG3_L_U, NBC_ANR_Y_L2_V_RNG3_U_L, NBC_ANR_Y_L2_V_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L2_V_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_V_RNG2_L_L, NBC_ANR_Y_L2_V_RNG2_L_U, NBC_ANR_Y_L2_V_RNG2_U_L, NBC_ANR_Y_L2_V_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L2_V_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_V_RNG1_L_L, NBC_ANR_Y_L2_V_RNG1_L_U, NBC_ANR_Y_L2_V_RNG1_U_L, NBC_ANR_Y_L2_V_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_L3_V_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_V_RNG4_L_L, NBC_ANR_Y_L3_V_RNG4_L_U, NBC_ANR_Y_L3_V_RNG4_U_L, NBC_ANR_Y_L3_V_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L3_V_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_V_RNG3_L_L, NBC_ANR_Y_L3_V_RNG3_L_U, NBC_ANR_Y_L3_V_RNG3_U_L, NBC_ANR_Y_L3_V_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L3_V_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_V_RNG2_L_L, NBC_ANR_Y_L3_V_RNG2_L_U, NBC_ANR_Y_L3_V_RNG2_U_L, NBC_ANR_Y_L3_V_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L3_V_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_V_RNG1_L_L, NBC_ANR_Y_L3_V_RNG1_L_U, NBC_ANR_Y_L3_V_RNG1_U_L, NBC_ANR_Y_L3_V_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_L0_H_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_H_RNG4_L_L, NBC_ANR_Y_L0_H_RNG4_L_U, NBC_ANR_Y_L0_H_RNG4_U_L, NBC_ANR_Y_L0_H_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L0_H_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_H_RNG3_L_L, NBC_ANR_Y_L0_H_RNG3_L_U, NBC_ANR_Y_L0_H_RNG3_U_L, NBC_ANR_Y_L0_H_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L0_H_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_H_RNG2_L_L, NBC_ANR_Y_L0_H_RNG2_L_U, NBC_ANR_Y_L0_H_RNG2_U_L, NBC_ANR_Y_L0_H_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L0_H_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_H_RNG1_L_L, NBC_ANR_Y_L0_H_RNG1_L_U, NBC_ANR_Y_L0_H_RNG1_U_L, NBC_ANR_Y_L0_H_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_L1_H_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_H_RNG4_L_L, NBC_ANR_Y_L1_H_RNG4_L_U, NBC_ANR_Y_L1_H_RNG4_U_L, NBC_ANR_Y_L1_H_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L1_H_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_H_RNG3_L_L, NBC_ANR_Y_L1_H_RNG3_L_U, NBC_ANR_Y_L1_H_RNG3_U_L, NBC_ANR_Y_L1_H_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L1_H_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_H_RNG2_L_L, NBC_ANR_Y_L1_H_RNG2_L_U, NBC_ANR_Y_L1_H_RNG2_U_L, NBC_ANR_Y_L1_H_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L1_H_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_H_RNG1_L_L, NBC_ANR_Y_L1_H_RNG1_L_U, NBC_ANR_Y_L1_H_RNG1_U_L, NBC_ANR_Y_L1_H_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_L2_H_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_H_RNG4_L_L, NBC_ANR_Y_L2_H_RNG4_L_U, NBC_ANR_Y_L2_H_RNG4_U_L, NBC_ANR_Y_L2_H_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L2_H_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_H_RNG3_L_L, NBC_ANR_Y_L2_H_RNG3_L_U, NBC_ANR_Y_L2_H_RNG3_U_L, NBC_ANR_Y_L2_H_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L2_H_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_H_RNG2_L_L, NBC_ANR_Y_L2_H_RNG2_L_U, NBC_ANR_Y_L2_H_RNG2_U_L, NBC_ANR_Y_L2_H_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L2_H_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_H_RNG1_L_L, NBC_ANR_Y_L2_H_RNG1_L_U, NBC_ANR_Y_L2_H_RNG1_U_L, NBC_ANR_Y_L2_H_RNG1_U_U, 4);
    MINT32 NBC_ANR_TBL_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_CPX1_L_L, NBC_ANR_TBL_CPX1_L_U, NBC_ANR_TBL_CPX1_U_L, NBC_ANR_TBL_CPX1_U_U, 4);
    MINT32 NBC_ANR_TBL_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_CPX2_L_L, NBC_ANR_TBL_CPX2_L_U, NBC_ANR_TBL_CPX2_U_L, NBC_ANR_TBL_CPX2_U_U, 4);
    MINT32 NBC_ANR_TBL_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_CPX3_L_L, NBC_ANR_TBL_CPX3_L_U, NBC_ANR_TBL_CPX3_U_L, NBC_ANR_TBL_CPX3_U_U, 4);
    MINT32 NBC_ANR_TBL_GAIN_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_GAIN_CPY0_L_L, NBC_ANR_TBL_GAIN_CPY0_L_U, NBC_ANR_TBL_GAIN_CPY0_U_L, NBC_ANR_TBL_GAIN_CPY0_U_U, 4);
    MINT32 NBC_ANR_TBL_GAIN_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_GAIN_CPY1_L_L, NBC_ANR_TBL_GAIN_CPY1_L_U, NBC_ANR_TBL_GAIN_CPY1_U_L, NBC_ANR_TBL_GAIN_CPY1_U_U, 4);
    MINT32 NBC_ANR_TBL_GAIN_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_GAIN_CPY2_L_L, NBC_ANR_TBL_GAIN_CPY2_L_U, NBC_ANR_TBL_GAIN_CPY2_U_L, NBC_ANR_TBL_GAIN_CPY2_U_U, 4);
    MINT32 NBC_ANR_TBL_GAIN_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_GAIN_CPY3_L_L, NBC_ANR_TBL_GAIN_CPY3_L_U, NBC_ANR_TBL_GAIN_CPY3_U_L, NBC_ANR_TBL_GAIN_CPY3_U_U, 4);
    MINT32 NBC_ANR_ACT_SL2_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ACT_SL2_GAIN_L_L, NBC_ANR_ACT_SL2_GAIN_L_U, NBC_ANR_ACT_SL2_GAIN_U_L, NBC_ANR_ACT_SL2_GAIN_U_U, 4);
    MINT32 NBC_ANR_ACT_DIF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ACT_DIF_GAIN_L_L, NBC_ANR_ACT_DIF_GAIN_L_U, NBC_ANR_ACT_DIF_GAIN_U_L, NBC_ANR_ACT_DIF_GAIN_U_U, 4);
    MINT32 NBC_ANR_ACT_DIF_LO_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ACT_DIF_LO_TH_L_L, NBC_ANR_ACT_DIF_LO_TH_L_U, NBC_ANR_ACT_DIF_LO_TH_U_L, NBC_ANR_ACT_DIF_LO_TH_U_U, 4);
    MINT32 NBC_ANR_ACT_DIF_HI_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ACT_DIF_HI_TH_L_L, NBC_ANR_ACT_DIF_HI_TH_L_U, NBC_ANR_ACT_DIF_HI_TH_U_L, NBC_ANR_ACT_DIF_HI_TH_U_U, 4);
    MINT32 NBC_ANR_Y_L3_H_RNG4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_H_RNG4_L_L, NBC_ANR_Y_L3_H_RNG4_L_U, NBC_ANR_Y_L3_H_RNG4_U_L, NBC_ANR_Y_L3_H_RNG4_U_U, 4);
    MINT32 NBC_ANR_Y_L3_H_RNG3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_H_RNG3_L_L, NBC_ANR_Y_L3_H_RNG3_L_U, NBC_ANR_Y_L3_H_RNG3_U_L, NBC_ANR_Y_L3_H_RNG3_U_U, 4);
    MINT32 NBC_ANR_Y_L3_H_RNG2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_H_RNG2_L_L, NBC_ANR_Y_L3_H_RNG2_L_U, NBC_ANR_Y_L3_H_RNG2_U_L, NBC_ANR_Y_L3_H_RNG2_U_U, 4);
    MINT32 NBC_ANR_Y_L3_H_RNG1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_H_RNG1_L_L, NBC_ANR_Y_L3_H_RNG1_L_U, NBC_ANR_Y_L3_H_RNG1_U_L, NBC_ANR_Y_L3_H_RNG1_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_X1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_X1_L_L, NBC_ANR_Y_HF_ACT_X1_L_U, NBC_ANR_Y_HF_ACT_X1_U_L, NBC_ANR_Y_HF_ACT_X1_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_X2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_X2_L_L, NBC_ANR_Y_HF_ACT_X2_L_U, NBC_ANR_Y_HF_ACT_X2_U_L, NBC_ANR_Y_HF_ACT_X2_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_X3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_X3_L_L, NBC_ANR_Y_HF_ACT_X3_L_U, NBC_ANR_Y_HF_ACT_X3_U_L, NBC_ANR_Y_HF_ACT_X3_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_X4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_X4_L_L, NBC_ANR_Y_HF_ACT_X4_L_U, NBC_ANR_Y_HF_ACT_X4_U_L, NBC_ANR_Y_HF_ACT_X4_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_Y0_L_L, NBC_ANR_Y_HF_ACT_Y0_L_U, NBC_ANR_Y_HF_ACT_Y0_U_L, NBC_ANR_Y_HF_ACT_Y0_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_Y1_L_L, NBC_ANR_Y_HF_ACT_Y1_L_U, NBC_ANR_Y_HF_ACT_Y1_U_L, NBC_ANR_Y_HF_ACT_Y1_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_Y2_L_L, NBC_ANR_Y_HF_ACT_Y2_L_U, NBC_ANR_Y_HF_ACT_Y2_U_L, NBC_ANR_Y_HF_ACT_Y2_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_Y3_L_L, NBC_ANR_Y_HF_ACT_Y3_L_U, NBC_ANR_Y_HF_ACT_Y3_U_L, NBC_ANR_Y_HF_ACT_Y3_U_U, 4);
    MINT32 NBC_ANR_Y_HF_ACT_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_Y4_L_L, NBC_ANR_Y_HF_ACT_Y4_L_U, NBC_ANR_Y_HF_ACT_Y4_U_L, NBC_ANR_Y_HF_ACT_Y4_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_X1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_X1_L_L, NBC_ANR_Y_HF_LUMA_X1_L_U, NBC_ANR_Y_HF_LUMA_X1_U_L, NBC_ANR_Y_HF_LUMA_X1_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_X2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_X2_L_L, NBC_ANR_Y_HF_LUMA_X2_L_U, NBC_ANR_Y_HF_LUMA_X2_U_L, NBC_ANR_Y_HF_LUMA_X2_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_Y0_L_L, NBC_ANR_Y_HF_LUMA_Y0_L_U, NBC_ANR_Y_HF_LUMA_Y0_U_L, NBC_ANR_Y_HF_LUMA_Y0_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_Y1_L_L, NBC_ANR_Y_HF_LUMA_Y1_L_U, NBC_ANR_Y_HF_LUMA_Y1_U_L, NBC_ANR_Y_HF_LUMA_Y1_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_Y2_L_L, NBC_ANR_Y_HF_LUMA_Y2_L_U, NBC_ANR_Y_HF_LUMA_Y2_U_L, NBC_ANR_Y_HF_LUMA_Y2_U_U, 4);
    MINT32 NBC_ANR_Y_HF_LUMA_SP2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_LUMA_SP2_L_L, NBC_ANR_Y_HF_LUMA_SP2_L_U, NBC_ANR_Y_HF_LUMA_SP2_U_L, NBC_ANR_Y_HF_LUMA_SP2_U_U, 4);
    MINT32 NBC_ANR_C_DITH_U		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_DITH_U_L_L, NBC_ANR_C_DITH_U_L_U, NBC_ANR_C_DITH_U_U_L, NBC_ANR_C_DITH_U_U_U, 4);
    MINT32 NBC_ANR_C_DITH_V		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_DITH_V_L_L, NBC_ANR_C_DITH_V_L_U, NBC_ANR_C_DITH_V_U_L, NBC_ANR_C_DITH_V_U_U, 4);
    MINT32 NBC_ANR_ACT_BLD_BASE_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ACT_BLD_BASE_C_L_L, NBC_ANR_ACT_BLD_BASE_C_L_U, NBC_ANR_ACT_BLD_BASE_C_U_L, NBC_ANR_ACT_BLD_BASE_C_U_U, 4);
    MINT32 NBC_ANR_Y_L0_HF_W		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L0_HF_W_L_L, NBC_ANR_Y_L0_HF_W_L_U, NBC_ANR_Y_L0_HF_W_U_L, NBC_ANR_Y_L0_HF_W_U_U, 4);
    MINT32 NBC_ANR_Y_L1_HF_W		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L1_HF_W_L_L, NBC_ANR_Y_L1_HF_W_L_U, NBC_ANR_Y_L1_HF_W_U_L, NBC_ANR_Y_L1_HF_W_U_U, 4);
    MINT32 NBC_ANR_Y_L2_HF_W		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L2_HF_W_L_L, NBC_ANR_Y_L2_HF_W_L_U, NBC_ANR_Y_L2_HF_W_U_L, NBC_ANR_Y_L2_HF_W_U_U, 4);
    MINT32 NBC_ANR_Y_L3_HF_W		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_L3_HF_W_L_L, NBC_ANR_Y_L3_HF_W_L_U, NBC_ANR_Y_L3_HF_W_U_L, NBC_ANR_Y_L3_HF_W_U_U, 4);
    MINT32 NBC_ANR_Y_HF_CLIP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_CLIP_L_L, NBC_ANR_Y_HF_CLIP_L_U, NBC_ANR_Y_HF_CLIP_U_L, NBC_ANR_Y_HF_CLIP_U_U, 4);
    MINT32 NBC_ANR_Y_HF_CORE_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_CORE_SL_L_L, NBC_ANR_Y_HF_CORE_SL_L_U, NBC_ANR_Y_HF_CORE_SL_U_L, NBC_ANR_Y_HF_CORE_SL_U_U, 4);
    MINT32 NBC_ANR_Y_HF_CORE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_CORE_TH_L_L, NBC_ANR_Y_HF_CORE_TH_L_U, NBC_ANR_Y_HF_CORE_TH_U_L, NBC_ANR_Y_HF_CORE_TH_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPX1_L_L, NBC_ANR_Y_ACT_CPX1_L_U, NBC_ANR_Y_ACT_CPX1_U_L, NBC_ANR_Y_ACT_CPX1_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPX2_L_L, NBC_ANR_Y_ACT_CPX2_L_U, NBC_ANR_Y_ACT_CPX2_U_L, NBC_ANR_Y_ACT_CPX2_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPX3_L_L, NBC_ANR_Y_ACT_CPX3_L_U, NBC_ANR_Y_ACT_CPX3_U_L, NBC_ANR_Y_ACT_CPX3_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPY0_L_L, NBC_ANR_Y_ACT_CPY0_L_U, NBC_ANR_Y_ACT_CPY0_U_L, NBC_ANR_Y_ACT_CPY0_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPY1_L_L, NBC_ANR_Y_ACT_CPY1_L_U, NBC_ANR_Y_ACT_CPY1_U_L, NBC_ANR_Y_ACT_CPY1_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPY2_L_L, NBC_ANR_Y_ACT_CPY2_L_U, NBC_ANR_Y_ACT_CPY2_U_L, NBC_ANR_Y_ACT_CPY2_U_U, 4);
    MINT32 NBC_ANR_Y_ACT_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_CPY3_L_L, NBC_ANR_Y_ACT_CPY3_L_U, NBC_ANR_Y_ACT_CPY3_U_L, NBC_ANR_Y_ACT_CPY3_U_U, 4);
    MINT32 NBC_ANR_TBL_PRC		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_PRC_L_L, NBC_ANR_TBL_PRC_L_U, NBC_ANR_TBL_PRC_U_L, NBC_ANR_TBL_PRC_U_U, 5);
    MINT32 NBC_ANR_TABLE_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TABLE_EN_L_L, NBC_ANR_TABLE_EN_L_U, NBC_ANR_TABLE_EN_U_L, NBC_ANR_TABLE_EN_U_U, 5);
    MINT32 NBC_ANR_ENY		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ENY_L_L, NBC_ANR_ENY_L_U, NBC_ANR_ENY_U_L, NBC_ANR_ENY_U_U, 5);
    MINT32 NBC_ANR_ENC		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_ENC_L_L, NBC_ANR_ENC_L_U, NBC_ANR_ENC_U_L, NBC_ANR_ENC_U_U, 5);
    MINT32 NBC_ANR_C_SM_EDGE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SM_EDGE_L_L, NBC_ANR_C_SM_EDGE_L_U, NBC_ANR_C_SM_EDGE_U_L, NBC_ANR_C_SM_EDGE_U_U, 5);
    MINT32 NBC_ANR_FLT_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_FLT_C_L_L, NBC_ANR_FLT_C_L_U, NBC_ANR_FLT_C_U_L, NBC_ANR_FLT_C_U_U, 5);
    MINT32 NBC_ANR_IMPL_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_IMPL_MODE_L_L, NBC_ANR_IMPL_MODE_L_U, NBC_ANR_IMPL_MODE_U_L, NBC_ANR_IMPL_MODE_U_U, 5);
    MINT32 NBC_ANR_HF_BAL_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_HF_BAL_MODE_L_L, NBC_ANR_HF_BAL_MODE_L_U, NBC_ANR_HF_BAL_MODE_U_L, NBC_ANR_HF_BAL_MODE_U_U, 5);
    MINT32 NBC_ANR_Y_SCALE_SP0    = CalculateLUTSP(   0, NBC_ANR_Y_CPX1, NBC_ANR_Y_SCALE_CPY0, NBC_ANR_Y_SCALE_CPY1, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP0  = Convert2Pos(NBC_ANR_Y_SCALE_SP0,32);
    MINT32 NBC_ANR_Y_SCALE_SP1    = CalculateLUTSP(   NBC_ANR_Y_CPX1, NBC_ANR_Y_CPX2, NBC_ANR_Y_SCALE_CPY1, NBC_ANR_Y_SCALE_CPY2, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP1  = Convert2Pos(NBC_ANR_Y_SCALE_SP1,32);
    MINT32 NBC_ANR_Y_SCALE_SP2    = CalculateLUTSP(   NBC_ANR_Y_CPX2, NBC_ANR_Y_CPX3, NBC_ANR_Y_SCALE_CPY2, NBC_ANR_Y_SCALE_CPY3, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP2  = Convert2Pos(NBC_ANR_Y_SCALE_SP2,32);
    MINT32 NBC_ANR_Y_SCALE_SP3    = CalculateLUTSP(   NBC_ANR_Y_CPX3, NBC_ANR_Y_CPX4, NBC_ANR_Y_SCALE_CPY3, NBC_ANR_Y_SCALE_CPY4, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP3  = Convert2Pos(NBC_ANR_Y_SCALE_SP3,32);
    MINT32 NBC_ANR_Y_SCALE_SP4    = CalculateLUTSP(   NBC_ANR_Y_CPX4, NBC_ANR_Y_CPX5, NBC_ANR_Y_SCALE_CPY4, NBC_ANR_Y_SCALE_CPY5, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP4  = Convert2Pos(NBC_ANR_Y_SCALE_SP4,32);
    MINT32 NBC_ANR_Y_SCALE_SP5    = CalculateLUTSP(   NBC_ANR_Y_CPX5, NBC_ANR_Y_CPX6, NBC_ANR_Y_SCALE_CPY5, NBC_ANR_Y_SCALE_CPY6, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP5  = Convert2Pos(NBC_ANR_Y_SCALE_SP5,32);
    MINT32 NBC_ANR_Y_SCALE_SP6    = CalculateLUTSP(   NBC_ANR_Y_CPX6, NBC_ANR_Y_CPX7, NBC_ANR_Y_SCALE_CPY6, NBC_ANR_Y_SCALE_CPY7, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP6  = Convert2Pos(NBC_ANR_Y_SCALE_SP6,32);
    MINT32 NBC_ANR_Y_SCALE_SP7    = CalculateLUTSP(   NBC_ANR_Y_CPX7, NBC_ANR_Y_CPX8, NBC_ANR_Y_SCALE_CPY7, NBC_ANR_Y_SCALE_CPY8, 128, 15, -15);
    NBC_ANR_Y_SCALE_SP7  = Convert2Pos(NBC_ANR_Y_SCALE_SP7,32);
    MINT32 NBC_ANR_Y_SCALE_SP8_L_L  = rParam.rLowerIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8;
    MINT32 NBC_ANR_Y_SCALE_SP8_L_U  = rParam.rLowerIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8;
    MINT32 NBC_ANR_Y_SCALE_SP8_U_L  = rParam.rUpperIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8;
    MINT32 NBC_ANR_Y_SCALE_SP8_U_U  = rParam.rUpperIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8;
    NBC_ANR_Y_SCALE_SP8_L_L = Convert2Neg(NBC_ANR_Y_SCALE_SP8_L_L,32);
    NBC_ANR_Y_SCALE_SP8_L_U  = Convert2Neg(NBC_ANR_Y_SCALE_SP8_L_U,32);
    NBC_ANR_Y_SCALE_SP8_U_L  = Convert2Neg(NBC_ANR_Y_SCALE_SP8_U_L,32);
    NBC_ANR_Y_SCALE_SP8_U_U  = Convert2Neg(NBC_ANR_Y_SCALE_SP8_U_U,32);
    MINT32 NBC_ANR_Y_SCALE_SP8  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_SCALE_SP8_L_L, NBC_ANR_Y_SCALE_SP8_L_U, NBC_ANR_Y_SCALE_SP8_U_L, NBC_ANR_Y_SCALE_SP8_U_U, 4);
    NBC_ANR_Y_SCALE_SP8  = Convert2Pos(NBC_ANR_Y_SCALE_SP8,32);

    MINT32 NBC_ANR_SL2_SP0    = CalculateLUTSP(   0, NBC_ANR_SL2_X1, NBC_ANR_SL2_GAIN0, NBC_ANR_SL2_GAIN1, 128, 15, -15);
    NBC_ANR_SL2_SP0  = Convert2Pos(NBC_ANR_SL2_SP0,32);
    MINT32 NBC_ANR_SL2_SP1    = CalculateLUTSP(   NBC_ANR_SL2_X1, NBC_ANR_SL2_X2, NBC_ANR_SL2_GAIN1, NBC_ANR_SL2_GAIN2, 128, 15, -15);
    NBC_ANR_SL2_SP1  = Convert2Pos(NBC_ANR_SL2_SP1,32);
    MINT32 NBC_ANR_SL2_SP2    = CalculateLUTSP(   NBC_ANR_SL2_X2, NBC_ANR_SL2_X3, NBC_ANR_SL2_GAIN2, NBC_ANR_SL2_GAIN3, 128, 15, -15);
    NBC_ANR_SL2_SP2  = Convert2Pos(NBC_ANR_SL2_SP2,32);
    MINT32 NBC_ANR_SL2_SP3_L_L  = rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP3;
    MINT32 NBC_ANR_SL2_SP3_L_U  = rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP3;
    MINT32 NBC_ANR_SL2_SP3_U_L  = rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP3;
    MINT32 NBC_ANR_SL2_SP3_U_U  = rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP3;
    NBC_ANR_SL2_SP3_L_L = Convert2Neg(NBC_ANR_SL2_SP3_L_L,32);
    NBC_ANR_SL2_SP3_L_U  = Convert2Neg(NBC_ANR_SL2_SP3_L_U,32);
    NBC_ANR_SL2_SP3_U_L  = Convert2Neg(NBC_ANR_SL2_SP3_U_L,32);
    NBC_ANR_SL2_SP3_U_U  = Convert2Neg(NBC_ANR_SL2_SP3_U_U,32);
    MINT32 NBC_ANR_SL2_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_SL2_SP3_L_L, NBC_ANR_SL2_SP3_L_U, NBC_ANR_SL2_SP3_U_L, NBC_ANR_SL2_SP3_U_U, 4);
    NBC_ANR_SL2_SP3  = Convert2Pos(NBC_ANR_SL2_SP3,32);

        MINT32 NBC_ANR_C_SCALE_SP0    = CalculateLUTSP(   0, NBC_ANR_C_CPX1, NBC_ANR_C_SCALE_CPY0, NBC_ANR_C_SCALE_CPY1, 128, 15, -15);
    NBC_ANR_C_SCALE_SP0  = Convert2Pos(NBC_ANR_C_SCALE_SP0,32);
        MINT32 NBC_ANR_C_SCALE_SP1    = CalculateLUTSP(   NBC_ANR_C_CPX1, NBC_ANR_C_CPX2, NBC_ANR_C_SCALE_CPY1, NBC_ANR_C_SCALE_CPY2, 128, 15, -15);
    NBC_ANR_C_SCALE_SP1  = Convert2Pos(NBC_ANR_C_SCALE_SP1,32);
        MINT32 NBC_ANR_C_SCALE_SP2    = CalculateLUTSP(   NBC_ANR_C_CPX2, NBC_ANR_C_CPX3, NBC_ANR_C_SCALE_CPY2, NBC_ANR_C_SCALE_CPY3, 128, 15, -15);
    NBC_ANR_C_SCALE_SP2  = Convert2Pos(NBC_ANR_C_SCALE_SP2,32);
    MINT32 NBC_ANR_C_SCALE_SP3_L_L  = rParam.rLowerIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3;
    MINT32 NBC_ANR_C_SCALE_SP3_L_U  = rParam.rLowerIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3;
    MINT32 NBC_ANR_C_SCALE_SP3_U_L  = rParam.rUpperIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3;
    MINT32 NBC_ANR_C_SCALE_SP3_U_U  = rParam.rUpperIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3;
    NBC_ANR_C_SCALE_SP3_L_L = Convert2Neg(NBC_ANR_C_SCALE_SP3_L_L,32);
    NBC_ANR_C_SCALE_SP3_L_U = Convert2Neg(NBC_ANR_C_SCALE_SP3_L_U,32);
    NBC_ANR_C_SCALE_SP3_U_L = Convert2Neg(NBC_ANR_C_SCALE_SP3_U_L,32);
    NBC_ANR_C_SCALE_SP3_U_U = Convert2Neg(NBC_ANR_C_SCALE_SP3_U_U,32);
    MINT32 NBC_ANR_C_SCALE_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_C_SCALE_SP3_L_L, NBC_ANR_C_SCALE_SP3_L_U, NBC_ANR_C_SCALE_SP3_U_L, NBC_ANR_C_SCALE_SP3_U_U, 4);
    NBC_ANR_C_SCALE_SP3  = Convert2Pos(NBC_ANR_C_SCALE_SP3,32);

        MINT32 NBC_ANR_TBL_GAIN_SP0    = CalculateLUTSP(   0, NBC_ANR_TBL_CPX1, NBC_ANR_TBL_GAIN_CPY0, NBC_ANR_TBL_GAIN_CPY1, 128, 15, -15);
    NBC_ANR_TBL_GAIN_SP0  = Convert2Pos(NBC_ANR_TBL_GAIN_SP0,32);
        MINT32 NBC_ANR_TBL_GAIN_SP1    = CalculateLUTSP(   NBC_ANR_TBL_CPX1, NBC_ANR_TBL_CPX2, NBC_ANR_TBL_GAIN_CPY1, NBC_ANR_TBL_GAIN_CPY2, 128, 15, -15);
    NBC_ANR_TBL_GAIN_SP1  = Convert2Pos(NBC_ANR_TBL_GAIN_SP1,32);
        MINT32 NBC_ANR_TBL_GAIN_SP2    = CalculateLUTSP(   NBC_ANR_TBL_CPX2, NBC_ANR_TBL_CPX3, NBC_ANR_TBL_GAIN_CPY2, NBC_ANR_TBL_GAIN_CPY3, 128, 15, -15);
    NBC_ANR_TBL_GAIN_SP2  = Convert2Pos(NBC_ANR_TBL_GAIN_SP2,32);
    MINT32 NBC_ANR_TBL_GAIN_SP3_L_L  = rParam.rLowerIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3;
    MINT32 NBC_ANR_TBL_GAIN_SP3_L_U  = rParam.rLowerIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3;
    MINT32 NBC_ANR_TBL_GAIN_SP3_U_L  = rParam.rUpperIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3;
    MINT32 NBC_ANR_TBL_GAIN_SP3_U_U  = rParam.rUpperIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3;
    NBC_ANR_TBL_GAIN_SP3_L_L = Convert2Neg(NBC_ANR_TBL_GAIN_SP3_L_L,32);
    NBC_ANR_TBL_GAIN_SP3_L_U = Convert2Neg(NBC_ANR_TBL_GAIN_SP3_L_U,32);
    NBC_ANR_TBL_GAIN_SP3_U_L = Convert2Neg(NBC_ANR_TBL_GAIN_SP3_U_L,32);
    NBC_ANR_TBL_GAIN_SP3_U_U = Convert2Neg(NBC_ANR_TBL_GAIN_SP3_U_U,32);
    MINT32 NBC_ANR_TBL_GAIN_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_TBL_GAIN_SP3_L_L, NBC_ANR_TBL_GAIN_SP3_L_U, NBC_ANR_TBL_GAIN_SP3_U_L, NBC_ANR_TBL_GAIN_SP3_U_U, 4);
    NBC_ANR_TBL_GAIN_SP3  = Convert2Pos(NBC_ANR_TBL_GAIN_SP3,32);

    MINT32 NBC_ANR_Y_HF_ACT_SP0    = CalculateLUTSP(   0, NBC_ANR_Y_HF_ACT_X1, NBC_ANR_Y_HF_ACT_Y0, NBC_ANR_Y_HF_ACT_Y1, 8, 31, -31);
    NBC_ANR_Y_HF_ACT_SP0  = Convert2Pos(NBC_ANR_Y_HF_ACT_SP0,64);
    MINT32 NBC_ANR_Y_HF_ACT_SP1    = CalculateLUTSP(   NBC_ANR_Y_HF_ACT_X1, NBC_ANR_Y_HF_ACT_X2, NBC_ANR_Y_HF_ACT_Y1, NBC_ANR_Y_HF_ACT_Y2, 8, 31, -31);
    NBC_ANR_Y_HF_ACT_SP1  = Convert2Pos(NBC_ANR_Y_HF_ACT_SP1,64);
    MINT32 NBC_ANR_Y_HF_ACT_SP2    = CalculateLUTSP(   NBC_ANR_Y_HF_ACT_X2, NBC_ANR_Y_HF_ACT_X3, NBC_ANR_Y_HF_ACT_Y2, NBC_ANR_Y_HF_ACT_Y3, 8, 31, -31);
    NBC_ANR_Y_HF_ACT_SP2  = Convert2Pos(NBC_ANR_Y_HF_ACT_SP2,64);
    MINT32 NBC_ANR_Y_HF_ACT_SP3    = CalculateLUTSP(   NBC_ANR_Y_HF_ACT_X3, NBC_ANR_Y_HF_ACT_X4, NBC_ANR_Y_HF_ACT_Y3, NBC_ANR_Y_HF_ACT_Y4, 8, 31, -31);
    NBC_ANR_Y_HF_ACT_SP3  = Convert2Pos(NBC_ANR_Y_HF_ACT_SP3,64);
    MINT32 NBC_ANR_Y_HF_ACT_SP4_L_L  = rParam.rLowerIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4;
    MINT32 NBC_ANR_Y_HF_ACT_SP4_L_U  = rParam.rLowerIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4;
    MINT32 NBC_ANR_Y_HF_ACT_SP4_U_L  = rParam.rUpperIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4;
    MINT32 NBC_ANR_Y_HF_ACT_SP4_U_U  = rParam.rUpperIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4;
    NBC_ANR_Y_HF_ACT_SP4_L_L = Convert2Neg(NBC_ANR_Y_HF_ACT_SP4_L_L,64);
    NBC_ANR_Y_HF_ACT_SP4_L_U = Convert2Neg(NBC_ANR_Y_HF_ACT_SP4_L_U,64);
    NBC_ANR_Y_HF_ACT_SP4_U_L = Convert2Neg(NBC_ANR_Y_HF_ACT_SP4_U_L,64);
    NBC_ANR_Y_HF_ACT_SP4_U_U = Convert2Neg(NBC_ANR_Y_HF_ACT_SP4_U_U,64);
    MINT32 NBC_ANR_Y_HF_ACT_SP4  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_HF_ACT_SP4_L_L, NBC_ANR_Y_HF_ACT_SP4_L_U, NBC_ANR_Y_HF_ACT_SP4_U_L, NBC_ANR_Y_HF_ACT_SP4_U_U, 4);
    NBC_ANR_Y_HF_ACT_SP4  = Convert2Pos(NBC_ANR_Y_HF_ACT_SP4,64);

    MINT32 NBC_ANR_Y_HF_LUMA_SP0    = CalculateLUTSP(   0, NBC_ANR_Y_HF_LUMA_X1, NBC_ANR_Y_HF_LUMA_Y0, NBC_ANR_Y_HF_LUMA_Y1, 8, 31, 0);
    MINT32 NBC_ANR_Y_HF_LUMA_SP1    = CalculateLUTSP(   NBC_ANR_Y_HF_LUMA_X1, NBC_ANR_Y_HF_LUMA_X2, NBC_ANR_Y_HF_LUMA_Y0, NBC_ANR_Y_HF_LUMA_Y2, 8, 31, 0);
    MINT32 NBC_ANR_Y_ACT_SP0    = CalculateLUTSP(   0, NBC_ANR_Y_ACT_CPX1, NBC_ANR_Y_ACT_CPY0, NBC_ANR_Y_ACT_CPY1, 128, 31, -31);
    NBC_ANR_Y_ACT_SP0  = Convert2Pos(NBC_ANR_Y_ACT_SP0,64);
    MINT32 NBC_ANR_Y_ACT_SP1    = CalculateLUTSP(   NBC_ANR_Y_ACT_CPX1, NBC_ANR_Y_ACT_CPX2, NBC_ANR_Y_ACT_CPY0, NBC_ANR_Y_ACT_CPY2, 128, 31, -31);
    NBC_ANR_Y_ACT_SP1  = Convert2Pos(NBC_ANR_Y_ACT_SP1,64);
    MINT32 NBC_ANR_Y_ACT_SP2    = CalculateLUTSP(   NBC_ANR_Y_ACT_CPX2, NBC_ANR_Y_ACT_CPX3, NBC_ANR_Y_ACT_CPY0, NBC_ANR_Y_ACT_CPY3, 128, 31, -31);
    NBC_ANR_Y_ACT_SP2  = Convert2Pos(NBC_ANR_Y_ACT_SP2,64);
    MINT32 NBC_ANR_Y_ACT_SP3_L_L  = rParam.rLowerIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3;
    MINT32 NBC_ANR_Y_ACT_SP3_L_U  = rParam.rLowerIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3;
    MINT32 NBC_ANR_Y_ACT_SP3_U_L  = rParam.rUpperIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3;
    MINT32 NBC_ANR_Y_ACT_SP3_U_U  = rParam.rUpperIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3;
    NBC_ANR_Y_ACT_SP3_L_L = Convert2Neg(NBC_ANR_Y_ACT_SP3_L_L,64);
    NBC_ANR_Y_ACT_SP3_L_U = Convert2Neg(NBC_ANR_Y_ACT_SP3_L_U,64);
    NBC_ANR_Y_ACT_SP3_U_L = Convert2Neg(NBC_ANR_Y_ACT_SP3_U_L,64);
    NBC_ANR_Y_ACT_SP3_U_U = Convert2Neg(NBC_ANR_Y_ACT_SP3_U_U,64);
    MINT32 NBC_ANR_Y_ACT_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NBC_ANR_Y_ACT_SP3_L_L, NBC_ANR_Y_ACT_SP3_L_U, NBC_ANR_Y_ACT_SP3_U_L, NBC_ANR_Y_ACT_SP3_U_U, 4);
    NBC_ANR_Y_ACT_SP3  = Convert2Pos(NBC_ANR_Y_ACT_SP3,64);



    // assign interpolation result
    rSmoothANR.con1.bits.NBC_ANR_LTM_LINK       = NBC_ANR_LTM_LINK;
    rSmoothANR.yad2.bits.NBC_ANR_PTY_GAIN_TH       = NBC_ANR_PTY_GAIN_TH;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL       = NBC_ANR_Y_L0_RNG_RAT_SL;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL       = NBC_ANR_Y_L1_RNG_RAT_SL;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL       = NBC_ANR_Y_L2_RNG_RAT_SL;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL       = NBC_ANR_Y_L3_RNG_RAT_SL;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH       = NBC_ANR_Y_L0_RNG_RAT_TH;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH       = NBC_ANR_Y_L1_RNG_RAT_TH;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH       = NBC_ANR_Y_L2_RNG_RAT_TH;
    rSmoothANR.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH       = NBC_ANR_Y_L3_RNG_RAT_TH;
    rSmoothANR.con1.bits.NBC_ANR_Y_FLT0_IDX       = NBC_ANR_Y_FLT0_IDX;
    rSmoothANR.con1.bits.NBC_ANR_Y_FLT1_IDX       = NBC_ANR_Y_FLT1_IDX;
    rSmoothANR.con1.bits.NBC_ANR_Y_FLT2_IDX       = NBC_ANR_Y_FLT2_IDX;
    rSmoothANR.con1.bits.NBC_ANR_Y_FLT3_IDX       = NBC_ANR_Y_FLT3_IDX;
    rSmoothANR.yad1.bits.NBC_ANR_Y_SLOPE_H_TH       = NBC_ANR_Y_SLOPE_H_TH;
    rSmoothANR.yad1.bits.NBC_ANR_Y_SLOPE_V_TH       = NBC_ANR_Y_SLOPE_V_TH;
    rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG1       = NBC_ANR_C_V_RNG1;
    rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG2       = NBC_ANR_C_V_RNG2;
    rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG3       = NBC_ANR_C_V_RNG3;
    rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG4       = NBC_ANR_C_V_RNG4;
    rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG1       = NBC_ANR_C_H_RNG1;
    rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG2       = NBC_ANR_C_H_RNG2;
    rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG3       = NBC_ANR_C_H_RNG3;
    rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG4       = NBC_ANR_C_H_RNG4;
    rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX1       = NBC_ANR_Y_CPX1;
    rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX2       = NBC_ANR_Y_CPX2;
    rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX3       = NBC_ANR_Y_CPX3;
    rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX4       = NBC_ANR_Y_CPX4;
    rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX5       = NBC_ANR_Y_CPX5;
    rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX6       = NBC_ANR_Y_CPX6;
    rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX7       = NBC_ANR_Y_CPX7;
    rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX8       = NBC_ANR_Y_CPX8;
    rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0       = NBC_ANR_Y_SCALE_CPY0;
    rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1       = NBC_ANR_Y_SCALE_CPY1;
    rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2       = NBC_ANR_Y_SCALE_CPY2;
    rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3       = NBC_ANR_Y_SCALE_CPY3;
    rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4       = NBC_ANR_Y_SCALE_CPY4;
    rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5       = NBC_ANR_Y_SCALE_CPY5;
    rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6       = NBC_ANR_Y_SCALE_CPY6;
    rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7       = NBC_ANR_Y_SCALE_CPY7;
    rSmoothANR.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8       = NBC_ANR_Y_SCALE_CPY8;
    rSmoothANR.con1.bits.NBC_ANR_SL2_LINK       = NBC_ANR_SL2_LINK;
    rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X1       = NBC_ANR_SL2_X1;
    rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X2       = NBC_ANR_SL2_X2;
    rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X3       = NBC_ANR_SL2_X3;
    rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN0       = NBC_ANR_SL2_GAIN0;
    rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN1       = NBC_ANR_SL2_GAIN1;
    rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN2       = NBC_ANR_SL2_GAIN2;
    rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN3       = NBC_ANR_SL2_GAIN3;
    rSmoothANR.sl2.bits.NBC_ANR_SL2_SCALE_GAIN       = NBC_ANR_SL2_SCALE_GAIN;
    rSmoothANR.sl2.bits.NBC_ANR_SL2_C_GAIN       = NBC_ANR_SL2_C_GAIN;
    rSmoothANR.cad.bits.NBC_ANR_C_L_DIFF_TH       = NBC_ANR_C_L_DIFF_TH;
    rSmoothANR.con2.bits.NBC_ANR_C_SM_EDGE_TH       = NBC_ANR_C_SM_EDGE_TH;
    rSmoothANR.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH       = NBC_ANR_CEN_GAIN_HI_TH;
    rSmoothANR.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH       = NBC_ANR_CEN_GAIN_LO_TH;
    rSmoothANR.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF       = NBC_ANR_CEN_GAIN_HI_TH_LPF;
    rSmoothANR.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF       = NBC_ANR_CEN_GAIN_LO_TH_LPF;
    rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_TH       = NBC_ANR_Y_ACT_CEN_TH;
    rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN       = NBC_ANR_Y_ACT_CEN_GAIN;
    rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_OFT       = NBC_ANR_Y_ACT_CEN_OFT;
    rSmoothANR.yad2.bits.NBC_ANR_Y_VERT_SIGMA       = NBC_ANR_Y_VERT_SIGMA;
    rSmoothANR.yad2.bits.NBC_ANR_Y_VERT_ACT_TH       = NBC_ANR_Y_VERT_ACT_TH;
    rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX1       = NBC_ANR_C_CPX1;
    rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX2       = NBC_ANR_C_CPX2;
    rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX3       = NBC_ANR_C_CPX3;
    rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY0       = NBC_ANR_C_SCALE_CPY0;
    rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY1       = NBC_ANR_C_SCALE_CPY1;
    rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY2       = NBC_ANR_C_SCALE_CPY2;
    rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY3       = NBC_ANR_C_SCALE_CPY3;
    rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG4       = NBC_ANR_Y_L0_V_RNG4;
    rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG3       = NBC_ANR_Y_L0_V_RNG3;
    rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG2       = NBC_ANR_Y_L0_V_RNG2;
    rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG1       = NBC_ANR_Y_L0_V_RNG1;
    rSmoothANR.cad.bits.NBC_ANR_PTC_GAIN_TH       = NBC_ANR_PTC_GAIN_TH;
    rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG4       = NBC_ANR_Y_L1_V_RNG4;
    rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG3       = NBC_ANR_Y_L1_V_RNG3;
    rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG2       = NBC_ANR_Y_L1_V_RNG2;
    rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG1       = NBC_ANR_Y_L1_V_RNG1;
    rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG4       = NBC_ANR_Y_L2_V_RNG4;
    rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG3       = NBC_ANR_Y_L2_V_RNG3;
    rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG2       = NBC_ANR_Y_L2_V_RNG2;
    rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG1       = NBC_ANR_Y_L2_V_RNG1;
    rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG4       = NBC_ANR_Y_L3_V_RNG4;
    rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG3       = NBC_ANR_Y_L3_V_RNG3;
    rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG2       = NBC_ANR_Y_L3_V_RNG2;
    rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG1       = NBC_ANR_Y_L3_V_RNG1;
    rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG4       = NBC_ANR_Y_L0_H_RNG4;
    rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG3       = NBC_ANR_Y_L0_H_RNG3;
    rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG2       = NBC_ANR_Y_L0_H_RNG2;
    rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG1       = NBC_ANR_Y_L0_H_RNG1;
    rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG4       = NBC_ANR_Y_L1_H_RNG4;
    rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG3       = NBC_ANR_Y_L1_H_RNG3;
    rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG2       = NBC_ANR_Y_L1_H_RNG2;
    rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG1       = NBC_ANR_Y_L1_H_RNG1;
    rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG4       = NBC_ANR_Y_L2_H_RNG4;
    rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG3       = NBC_ANR_Y_L2_H_RNG3;
    rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG2       = NBC_ANR_Y_L2_H_RNG2;
    rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG1       = NBC_ANR_Y_L2_H_RNG1;
    rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX1       = NBC_ANR_TBL_CPX1;
    rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX2       = NBC_ANR_TBL_CPX2;
    rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX3       = NBC_ANR_TBL_CPX3;
    rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0       = NBC_ANR_TBL_GAIN_CPY0;
    rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1       = NBC_ANR_TBL_GAIN_CPY1;
    rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2       = NBC_ANR_TBL_GAIN_CPY2;
    rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3       = NBC_ANR_TBL_GAIN_CPY3;
    rSmoothANR.act1.bits.NBC_ANR_ACT_SL2_GAIN       = NBC_ANR_ACT_SL2_GAIN;
    rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_GAIN       = NBC_ANR_ACT_DIF_GAIN;
    rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_LO_TH       = NBC_ANR_ACT_DIF_LO_TH;
    rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_HI_TH       = NBC_ANR_ACT_DIF_HI_TH;
    rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG4       = NBC_ANR_Y_L3_H_RNG4;
    rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG3       = NBC_ANR_Y_L3_H_RNG3;
    rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG2       = NBC_ANR_Y_L3_H_RNG2;
    rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG1       = NBC_ANR_Y_L3_H_RNG1;
    rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1       = NBC_ANR_Y_HF_ACT_X1;
    rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2       = NBC_ANR_Y_HF_ACT_X2;
    rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3       = NBC_ANR_Y_HF_ACT_X3;
    rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4       = NBC_ANR_Y_HF_ACT_X4;
    rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0       = NBC_ANR_Y_HF_ACT_Y0;
    rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1       = NBC_ANR_Y_HF_ACT_Y1;
    rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2       = NBC_ANR_Y_HF_ACT_Y2;
    rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3       = NBC_ANR_Y_HF_ACT_Y3;
    rSmoothANR.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4       = NBC_ANR_Y_HF_ACT_Y4;
    rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1       = NBC_ANR_Y_HF_LUMA_X1;
    rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2       = NBC_ANR_Y_HF_LUMA_X2;
    rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0       = NBC_ANR_Y_HF_LUMA_Y0;
    rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1       = NBC_ANR_Y_HF_LUMA_Y1;
    rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2       = NBC_ANR_Y_HF_LUMA_Y2;
    rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2       = NBC_ANR_Y_HF_LUMA_SP2;
    rSmoothANR.actc.bits.NBC_ANR_C_DITH_U       = NBC_ANR_C_DITH_U;
    rSmoothANR.actc.bits.NBC_ANR_C_DITH_V       = NBC_ANR_C_DITH_V;
    rSmoothANR.actc.bits.NBC_ANR_ACT_BLD_BASE_C       = NBC_ANR_ACT_BLD_BASE_C;
    rSmoothANR.ylvl1.bits.NBC_ANR_Y_L0_HF_W       = NBC_ANR_Y_L0_HF_W;
    rSmoothANR.ylvl1.bits.NBC_ANR_Y_L1_HF_W       = NBC_ANR_Y_L1_HF_W;
    rSmoothANR.ylvl1.bits.NBC_ANR_Y_L2_HF_W       = NBC_ANR_Y_L2_HF_W;
    rSmoothANR.ylvl1.bits.NBC_ANR_Y_L3_HF_W       = NBC_ANR_Y_L3_HF_W;
    rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CLIP       = NBC_ANR_Y_HF_CLIP;
    rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL       = NBC_ANR_Y_HF_CORE_SL;
    rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH       = NBC_ANR_Y_HF_CORE_TH;
    rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX1       = NBC_ANR_Y_ACT_CPX1;
    rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX2       = NBC_ANR_Y_ACT_CPX2;
    rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX3       = NBC_ANR_Y_ACT_CPX3;
    rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY0       = NBC_ANR_Y_ACT_CPY0;
    rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY1       = NBC_ANR_Y_ACT_CPY1;
    rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY2       = NBC_ANR_Y_ACT_CPY2;
    rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY3       = NBC_ANR_Y_ACT_CPY3;
    rSmoothANR.con1.bits.NBC_ANR_TBL_PRC       = NBC_ANR_TBL_PRC;
    rSmoothANR.con1.bits.NBC_ANR_TABLE_EN       = NBC_ANR_TABLE_EN;
    rSmoothANR.con1.bits.NBC_ANR_ENY       = NBC_ANR_ENY;
    rSmoothANR.con1.bits.NBC_ANR_ENC       = NBC_ANR_ENC;
    rSmoothANR.con2.bits.NBC_ANR_C_SM_EDGE       = NBC_ANR_C_SM_EDGE;
    rSmoothANR.con2.bits.NBC_ANR_FLT_C       = NBC_ANR_FLT_C;
    rSmoothANR.con2.bits.NBC_ANR_IMPL_MODE       = NBC_ANR_IMPL_MODE;
    rSmoothANR.hf_cor.bits.NBC_ANR_HF_BAL_MODE       = NBC_ANR_HF_BAL_MODE;
    rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP0       = NBC_ANR_Y_SCALE_SP0;
    rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP1       = NBC_ANR_Y_SCALE_SP1;
    rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP2       = NBC_ANR_Y_SCALE_SP2;
    rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP3       = NBC_ANR_Y_SCALE_SP3;
    rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP4       = NBC_ANR_Y_SCALE_SP4;
    rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP5       = NBC_ANR_Y_SCALE_SP5;
    rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP6       = NBC_ANR_Y_SCALE_SP6;
    rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP7       = NBC_ANR_Y_SCALE_SP7;
    rSmoothANR.y4lut7.bits.NBC_ANR_Y_SCALE_SP8       = NBC_ANR_Y_SCALE_SP8;
    rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP0       = NBC_ANR_SL2_SP0;
    rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP1       = NBC_ANR_SL2_SP1;
    rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP2       = NBC_ANR_SL2_SP2;
    rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP3       = NBC_ANR_SL2_SP3;
    rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP0       = NBC_ANR_C_SCALE_SP0;
    rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP1       = NBC_ANR_C_SCALE_SP1;
    rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP2       = NBC_ANR_C_SCALE_SP2;
    rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP3       = NBC_ANR_C_SCALE_SP3;
    rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0       = NBC_ANR_TBL_GAIN_SP0;
    rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1       = NBC_ANR_TBL_GAIN_SP1;
    rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2       = NBC_ANR_TBL_GAIN_SP2;
    rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3       = NBC_ANR_TBL_GAIN_SP3;
    rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0       = NBC_ANR_Y_HF_ACT_SP0;
    rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1       = NBC_ANR_Y_HF_ACT_SP1;
    rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2       = NBC_ANR_Y_HF_ACT_SP2;
    rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3       = NBC_ANR_Y_HF_ACT_SP3;
    rSmoothANR.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4       = NBC_ANR_Y_HF_ACT_SP4;
    rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0       = NBC_ANR_Y_HF_LUMA_SP0;
    rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1       = NBC_ANR_Y_HF_LUMA_SP1;
    rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP0       = NBC_ANR_Y_ACT_SP0;
    rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP1       = NBC_ANR_Y_ACT_SP1;
    rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP2       = NBC_ANR_Y_ACT_SP2;
    rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP3       = NBC_ANR_Y_ACT_SP3;


    // log
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_LTM_LINK = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_LTM_LINK, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_LTM_LINK, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_LTM_LINK, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_LTM_LINK, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_LTM_LINK);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_PTY_GAIN_TH = %d, %d, %d, %d, %d", rSmoothANR.yad2.bits.NBC_ANR_PTY_GAIN_TH, rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH, rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH, rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH, rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_PTY_GAIN_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_RNG_RAT_SL = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_RNG_RAT_SL = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_RNG_RAT_SL = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_RNG_RAT_SL = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_RNG_RAT_TH = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L0_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_RNG_RAT_TH = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L1_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_RNG_RAT_TH = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L2_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_RNG_RAT_TH = %d, %d, %d, %d, %d", rSmoothANR.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH, rParam.rLowerIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH, rParam.rLowerIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH, rParam.rUpperIso_LowerZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH, rParam.rUpperIso_UpperZoom.ylvl0.bits.NBC_ANR_Y_L3_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_FLT0_IDX = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_Y_FLT0_IDX, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT0_IDX, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT0_IDX, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT0_IDX, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT0_IDX);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_FLT1_IDX = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_Y_FLT1_IDX, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT1_IDX, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT1_IDX, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT1_IDX, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT1_IDX);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_FLT2_IDX = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_Y_FLT2_IDX, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT2_IDX, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT2_IDX, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT2_IDX, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT2_IDX);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_FLT3_IDX = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_Y_FLT3_IDX, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT3_IDX, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT3_IDX, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_Y_FLT3_IDX, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_Y_FLT3_IDX);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SLOPE_H_TH = %d, %d, %d, %d, %d", rSmoothANR.yad1.bits.NBC_ANR_Y_SLOPE_H_TH, rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH, rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH, rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH, rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_H_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SLOPE_V_TH = %d, %d, %d, %d, %d", rSmoothANR.yad1.bits.NBC_ANR_Y_SLOPE_V_TH, rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH, rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH, rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH, rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_Y_SLOPE_V_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_V_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG1, rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG1, rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG1, rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG1, rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_V_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG2, rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG2, rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG2, rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG2, rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_V_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG3, rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG3, rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG3, rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG3, rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_V_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.ptcv.bits.NBC_ANR_C_V_RNG4, rParam.rLowerIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG4, rParam.rLowerIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG4, rParam.rUpperIso_LowerZoom.ptcv.bits.NBC_ANR_C_V_RNG4, rParam.rUpperIso_UpperZoom.ptcv.bits.NBC_ANR_C_V_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_H_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG1, rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG1, rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG1, rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG1, rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_H_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG2, rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG2, rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG2, rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG2, rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_H_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG3, rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG3, rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG3, rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG3, rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_H_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.ptch.bits.NBC_ANR_C_H_RNG4, rParam.rLowerIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG4, rParam.rLowerIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG4, rParam.rUpperIso_LowerZoom.ptch.bits.NBC_ANR_C_H_RNG4, rParam.rUpperIso_UpperZoom.ptch.bits.NBC_ANR_C_H_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX1 = %d, %d, %d, %d, %d", rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX1, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX1, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX1, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX1, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX2 = %d, %d, %d, %d, %d", rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX2, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX2, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX2, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX2, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX3 = %d, %d, %d, %d, %d", rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX3, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX3, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX3, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX3, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX4 = %d, %d, %d, %d, %d", rSmoothANR.y4lut1.bits.NBC_ANR_Y_CPX4, rParam.rLowerIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX4, rParam.rLowerIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX4, rParam.rUpperIso_LowerZoom.y4lut1.bits.NBC_ANR_Y_CPX4, rParam.rUpperIso_UpperZoom.y4lut1.bits.NBC_ANR_Y_CPX4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX5 = %d, %d, %d, %d, %d", rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX5, rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX5, rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX5, rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX5, rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX5);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX6 = %d, %d, %d, %d, %d", rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX6, rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX6, rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX6, rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX6, rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX6);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX7 = %d, %d, %d, %d, %d", rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX7, rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX7, rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX7, rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX7, rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX7);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_CPX8 = %d, %d, %d, %d, %d", rSmoothANR.y4lut4.bits.NBC_ANR_Y_CPX8, rParam.rLowerIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX8, rParam.rLowerIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX8, rParam.rUpperIso_LowerZoom.y4lut4.bits.NBC_ANR_Y_CPX8, rParam.rUpperIso_UpperZoom.y4lut4.bits.NBC_ANR_Y_CPX8);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY0 = %d, %d, %d, %d, %d", rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY1 = %d, %d, %d, %d, %d", rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY2 = %d, %d, %d, %d, %d", rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY3 = %d, %d, %d, %d, %d", rSmoothANR.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3, rParam.rLowerIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3, rParam.rLowerIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3, rParam.rUpperIso_LowerZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3, rParam.rUpperIso_UpperZoom.y4lut2.bits.NBC_ANR_Y_SCALE_CPY3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY4 = %d, %d, %d, %d, %d", rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4, rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4, rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4, rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4, rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY5 = %d, %d, %d, %d, %d", rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5, rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5, rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5, rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5, rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY5);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY6 = %d, %d, %d, %d, %d", rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6, rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6, rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6, rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6, rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY6);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY7 = %d, %d, %d, %d, %d", rSmoothANR.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7, rParam.rLowerIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7, rParam.rLowerIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7, rParam.rUpperIso_LowerZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7, rParam.rUpperIso_UpperZoom.y4lut5.bits.NBC_ANR_Y_SCALE_CPY7);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_CPY8 = %d, %d, %d, %d, %d", rSmoothANR.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8, rParam.rLowerIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8, rParam.rLowerIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8, rParam.rUpperIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8, rParam.rUpperIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_CPY8);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_LINK = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_SL2_LINK, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_SL2_LINK, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_SL2_LINK, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_SL2_LINK, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_SL2_LINK);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_X1 = %d, %d, %d, %d, %d", rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X1, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X1, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X1, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X1, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_X2 = %d, %d, %d, %d, %d", rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X2, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X2, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X2, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X2, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_X3 = %d, %d, %d, %d, %d", rSmoothANR.l4lut1.bits.NBC_ANR_SL2_X3, rParam.rLowerIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X3, rParam.rLowerIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X3, rParam.rUpperIso_LowerZoom.l4lut1.bits.NBC_ANR_SL2_X3, rParam.rUpperIso_UpperZoom.l4lut1.bits.NBC_ANR_SL2_X3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_GAIN0 = %d, %d, %d, %d, %d", rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN0, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_GAIN1 = %d, %d, %d, %d, %d", rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN1, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_GAIN2 = %d, %d, %d, %d, %d", rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN2, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_GAIN3 = %d, %d, %d, %d, %d", rSmoothANR.l4lut2.bits.NBC_ANR_SL2_GAIN3, rParam.rLowerIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3, rParam.rLowerIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3, rParam.rUpperIso_LowerZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3, rParam.rUpperIso_UpperZoom.l4lut2.bits.NBC_ANR_SL2_GAIN3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_SCALE_GAIN = %d, %d, %d, %d, %d", rSmoothANR.sl2.bits.NBC_ANR_SL2_SCALE_GAIN, rParam.rLowerIso_LowerZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN, rParam.rLowerIso_UpperZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN, rParam.rUpperIso_LowerZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN, rParam.rUpperIso_UpperZoom.sl2.bits.NBC_ANR_SL2_SCALE_GAIN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_C_GAIN = %d, %d, %d, %d, %d", rSmoothANR.sl2.bits.NBC_ANR_SL2_C_GAIN, rParam.rLowerIso_LowerZoom.sl2.bits.NBC_ANR_SL2_C_GAIN, rParam.rLowerIso_UpperZoom.sl2.bits.NBC_ANR_SL2_C_GAIN, rParam.rUpperIso_LowerZoom.sl2.bits.NBC_ANR_SL2_C_GAIN, rParam.rUpperIso_UpperZoom.sl2.bits.NBC_ANR_SL2_C_GAIN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_L_DIFF_TH = %d, %d, %d, %d, %d", rSmoothANR.cad.bits.NBC_ANR_C_L_DIFF_TH, rParam.rLowerIso_LowerZoom.cad.bits.NBC_ANR_C_L_DIFF_TH, rParam.rLowerIso_UpperZoom.cad.bits.NBC_ANR_C_L_DIFF_TH, rParam.rUpperIso_LowerZoom.cad.bits.NBC_ANR_C_L_DIFF_TH, rParam.rUpperIso_UpperZoom.cad.bits.NBC_ANR_C_L_DIFF_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SM_EDGE_TH = %d, %d, %d, %d, %d", rSmoothANR.con2.bits.NBC_ANR_C_SM_EDGE_TH, rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH, rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH, rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH, rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_CEN_GAIN_HI_TH = %d, %d, %d, %d, %d", rSmoothANR.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH, rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH, rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH, rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH, rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_HI_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_CEN_GAIN_LO_TH = %d, %d, %d, %d, %d", rSmoothANR.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH, rParam.rLowerIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH, rParam.rLowerIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH, rParam.rUpperIso_LowerZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH, rParam.rUpperIso_UpperZoom.yad1.bits.NBC_ANR_CEN_GAIN_LO_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_CEN_GAIN_HI_TH_LPF = %d, %d, %d, %d, %d", rSmoothANR.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF, rParam.rLowerIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF, rParam.rLowerIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF, rParam.rUpperIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF, rParam.rUpperIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_HI_TH_LPF);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_CEN_GAIN_LO_TH_LPF = %d, %d, %d, %d, %d", rSmoothANR.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF, rParam.rLowerIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF, rParam.rLowerIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF, rParam.rUpperIso_LowerZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF, rParam.rUpperIso_UpperZoom.ylad.bits.NBC_ANR_CEN_GAIN_LO_TH_LPF);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CEN_TH = %d, %d, %d, %d, %d", rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_TH, rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH, rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH, rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH, rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CEN_GAIN = %d, %d, %d, %d, %d", rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN, rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN, rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN, rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN, rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_GAIN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CEN_OFT = %d, %d, %d, %d, %d", rSmoothANR.act4.bits.NBC_ANR_Y_ACT_CEN_OFT, rParam.rLowerIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT, rParam.rLowerIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT, rParam.rUpperIso_LowerZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT, rParam.rUpperIso_UpperZoom.act4.bits.NBC_ANR_Y_ACT_CEN_OFT);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_VERT_SIGMA = %d, %d, %d, %d, %d", rSmoothANR.yad2.bits.NBC_ANR_Y_VERT_SIGMA, rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA, rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA, rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA, rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_SIGMA);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_VERT_ACT_TH = %d, %d, %d, %d, %d", rSmoothANR.yad2.bits.NBC_ANR_Y_VERT_ACT_TH, rParam.rLowerIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH, rParam.rLowerIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH, rParam.rUpperIso_LowerZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH, rParam.rUpperIso_UpperZoom.yad2.bits.NBC_ANR_Y_VERT_ACT_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_CPX1 = %d, %d, %d, %d, %d", rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX1, rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX1, rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX1, rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX1, rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_CPX2 = %d, %d, %d, %d, %d", rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX2, rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX2, rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX2, rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX2, rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_CPX3 = %d, %d, %d, %d, %d", rSmoothANR.c4lut1.bits.NBC_ANR_C_CPX3, rParam.rLowerIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX3, rParam.rLowerIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX3, rParam.rUpperIso_LowerZoom.c4lut1.bits.NBC_ANR_C_CPX3, rParam.rUpperIso_UpperZoom.c4lut1.bits.NBC_ANR_C_CPX3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_CPY0 = %d, %d, %d, %d, %d", rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY0, rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0, rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0, rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0, rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_CPY1 = %d, %d, %d, %d, %d", rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY1, rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1, rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1, rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1, rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_CPY2 = %d, %d, %d, %d, %d", rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY2, rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2, rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2, rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2, rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_CPY3 = %d, %d, %d, %d, %d", rSmoothANR.c4lut2.bits.NBC_ANR_C_SCALE_CPY3, rParam.rLowerIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3, rParam.rLowerIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3, rParam.rUpperIso_LowerZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3, rParam.rUpperIso_UpperZoom.c4lut2.bits.NBC_ANR_C_SCALE_CPY3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_V_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG4, rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4, rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4, rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4, rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_V_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG3, rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3, rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3, rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3, rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_V_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG2, rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2, rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2, rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2, rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_V_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty0v.bits.NBC_ANR_Y_L0_V_RNG1, rParam.rLowerIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1, rParam.rLowerIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1, rParam.rUpperIso_LowerZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1, rParam.rUpperIso_UpperZoom.pty0v.bits.NBC_ANR_Y_L0_V_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_PTC_GAIN_TH = %d, %d, %d, %d, %d", rSmoothANR.cad.bits.NBC_ANR_PTC_GAIN_TH, rParam.rLowerIso_LowerZoom.cad.bits.NBC_ANR_PTC_GAIN_TH, rParam.rLowerIso_UpperZoom.cad.bits.NBC_ANR_PTC_GAIN_TH, rParam.rUpperIso_LowerZoom.cad.bits.NBC_ANR_PTC_GAIN_TH, rParam.rUpperIso_UpperZoom.cad.bits.NBC_ANR_PTC_GAIN_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_V_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG4, rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4, rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4, rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4, rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_V_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG3, rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3, rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3, rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3, rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_V_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG2, rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2, rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2, rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2, rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_V_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty1v.bits.NBC_ANR_Y_L1_V_RNG1, rParam.rLowerIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1, rParam.rLowerIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1, rParam.rUpperIso_LowerZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1, rParam.rUpperIso_UpperZoom.pty1v.bits.NBC_ANR_Y_L1_V_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_V_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG4, rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4, rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4, rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4, rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_V_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG3, rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3, rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3, rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3, rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_V_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG2, rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2, rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2, rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2, rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_V_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty2v.bits.NBC_ANR_Y_L2_V_RNG1, rParam.rLowerIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1, rParam.rLowerIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1, rParam.rUpperIso_LowerZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1, rParam.rUpperIso_UpperZoom.pty2v.bits.NBC_ANR_Y_L2_V_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_V_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG4, rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4, rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4, rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4, rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_V_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG3, rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3, rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3, rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3, rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_V_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG2, rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2, rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2, rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2, rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_V_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty3v.bits.NBC_ANR_Y_L3_V_RNG1, rParam.rLowerIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1, rParam.rLowerIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1, rParam.rUpperIso_LowerZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1, rParam.rUpperIso_UpperZoom.pty3v.bits.NBC_ANR_Y_L3_V_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_H_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG4, rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4, rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4, rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4, rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_H_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG3, rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3, rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3, rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3, rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_H_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG2, rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2, rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2, rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2, rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_H_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty0h.bits.NBC_ANR_Y_L0_H_RNG1, rParam.rLowerIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1, rParam.rLowerIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1, rParam.rUpperIso_LowerZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1, rParam.rUpperIso_UpperZoom.pty0h.bits.NBC_ANR_Y_L0_H_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_H_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG4, rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4, rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4, rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4, rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_H_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG3, rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3, rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3, rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3, rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_H_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG2, rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2, rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2, rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2, rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_H_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty1h.bits.NBC_ANR_Y_L1_H_RNG1, rParam.rLowerIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1, rParam.rLowerIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1, rParam.rUpperIso_LowerZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1, rParam.rUpperIso_UpperZoom.pty1h.bits.NBC_ANR_Y_L1_H_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_H_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG4, rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4, rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4, rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4, rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_H_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG3, rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3, rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3, rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3, rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_H_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG2, rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2, rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2, rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2, rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_H_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty2h.bits.NBC_ANR_Y_L2_H_RNG1, rParam.rLowerIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1, rParam.rLowerIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1, rParam.rUpperIso_LowerZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1, rParam.rUpperIso_UpperZoom.pty2h.bits.NBC_ANR_Y_L2_H_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_CPX1 = %d, %d, %d, %d, %d", rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX1, rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX1, rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX1, rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX1, rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_CPX2 = %d, %d, %d, %d, %d", rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX2, rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX2, rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX2, rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX2, rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_CPX3 = %d, %d, %d, %d, %d", rSmoothANR.t4lut1.bits.NBC_ANR_TBL_CPX3, rParam.rLowerIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX3, rParam.rLowerIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX3, rParam.rUpperIso_LowerZoom.t4lut1.bits.NBC_ANR_TBL_CPX3, rParam.rUpperIso_UpperZoom.t4lut1.bits.NBC_ANR_TBL_CPX3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_CPY0 = %d, %d, %d, %d, %d", rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0, rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0, rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0, rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0, rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_CPY1 = %d, %d, %d, %d, %d", rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1, rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1, rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1, rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1, rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_CPY2 = %d, %d, %d, %d, %d", rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2, rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2, rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2, rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2, rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_CPY3 = %d, %d, %d, %d, %d", rSmoothANR.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3, rParam.rLowerIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3, rParam.rLowerIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3, rParam.rUpperIso_LowerZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3, rParam.rUpperIso_UpperZoom.t4lut2.bits.NBC_ANR_TBL_GAIN_CPY3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ACT_SL2_GAIN = %d, %d, %d, %d, %d", rSmoothANR.act1.bits.NBC_ANR_ACT_SL2_GAIN, rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN, rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN, rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN, rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_SL2_GAIN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ACT_DIF_GAIN = %d, %d, %d, %d, %d", rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_GAIN, rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN, rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN, rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN, rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_GAIN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ACT_DIF_LO_TH = %d, %d, %d, %d, %d", rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_LO_TH, rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH, rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH, rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH, rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_LO_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ACT_DIF_HI_TH = %d, %d, %d, %d, %d", rSmoothANR.act1.bits.NBC_ANR_ACT_DIF_HI_TH, rParam.rLowerIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH, rParam.rLowerIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH, rParam.rUpperIso_LowerZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH, rParam.rUpperIso_UpperZoom.act1.bits.NBC_ANR_ACT_DIF_HI_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_H_RNG4 = %d, %d, %d, %d, %d", rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG4, rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4, rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4, rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4, rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_H_RNG3 = %d, %d, %d, %d, %d", rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG3, rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3, rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3, rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3, rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_H_RNG2 = %d, %d, %d, %d, %d", rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG2, rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2, rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2, rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2, rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_H_RNG1 = %d, %d, %d, %d, %d", rSmoothANR.pty3h.bits.NBC_ANR_Y_L3_H_RNG1, rParam.rLowerIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1, rParam.rLowerIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1, rParam.rUpperIso_LowerZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1, rParam.rUpperIso_UpperZoom.pty3h.bits.NBC_ANR_Y_L3_H_RNG1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_X1 = %d, %d, %d, %d, %d", rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1, rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1, rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1, rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1, rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_X2 = %d, %d, %d, %d, %d", rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2, rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2, rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2, rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2, rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_X3 = %d, %d, %d, %d, %d", rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3, rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3, rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3, rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3, rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_X4 = %d, %d, %d, %d, %d", rSmoothANR.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4, rParam.rLowerIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4, rParam.rLowerIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4, rParam.rUpperIso_LowerZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4, rParam.rUpperIso_UpperZoom.hf_act0.bits.NBC_ANR_Y_HF_ACT_X4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_Y0 = %d, %d, %d, %d, %d", rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0, rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0, rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0, rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0, rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_Y1 = %d, %d, %d, %d, %d", rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1, rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1, rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1, rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1, rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_Y2 = %d, %d, %d, %d, %d", rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2, rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2, rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2, rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2, rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_Y3 = %d, %d, %d, %d, %d", rSmoothANR.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3, rParam.rLowerIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3, rParam.rLowerIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3, rParam.rUpperIso_LowerZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3, rParam.rUpperIso_UpperZoom.hf_act1.bits.NBC_ANR_Y_HF_ACT_Y3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_Y4 = %d, %d, %d, %d, %d", rSmoothANR.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4, rParam.rLowerIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4, rParam.rLowerIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4, rParam.rUpperIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4, rParam.rUpperIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_Y4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_X1 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1, rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1, rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1, rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1, rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_X2 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2, rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2, rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2, rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2, rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_X2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_Y0 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0, rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0, rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0, rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0, rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_Y1 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1, rParam.rLowerIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1, rParam.rLowerIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1, rParam.rUpperIso_LowerZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1, rParam.rUpperIso_UpperZoom.hf_luma0.bits.NBC_ANR_Y_HF_LUMA_Y1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_Y2 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2, rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2, rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2, rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2, rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_Y2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_SP2 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2, rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2, rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2, rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2, rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_DITH_U = %d, %d, %d, %d, %d", rSmoothANR.actc.bits.NBC_ANR_C_DITH_U, rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_U, rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_U, rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_U, rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_U);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_DITH_V = %d, %d, %d, %d, %d", rSmoothANR.actc.bits.NBC_ANR_C_DITH_V, rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_V, rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_V, rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_C_DITH_V, rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_C_DITH_V);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ACT_BLD_BASE_C = %d, %d, %d, %d, %d", rSmoothANR.actc.bits.NBC_ANR_ACT_BLD_BASE_C, rParam.rLowerIso_LowerZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C, rParam.rLowerIso_UpperZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C, rParam.rUpperIso_LowerZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C, rParam.rUpperIso_UpperZoom.actc.bits.NBC_ANR_ACT_BLD_BASE_C);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L0_HF_W = %d, %d, %d, %d, %d", rSmoothANR.ylvl1.bits.NBC_ANR_Y_L0_HF_W, rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W, rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W, rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W, rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L0_HF_W);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L1_HF_W = %d, %d, %d, %d, %d", rSmoothANR.ylvl1.bits.NBC_ANR_Y_L1_HF_W, rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W, rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W, rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W, rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L1_HF_W);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L2_HF_W = %d, %d, %d, %d, %d", rSmoothANR.ylvl1.bits.NBC_ANR_Y_L2_HF_W, rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W, rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W, rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W, rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L2_HF_W);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_L3_HF_W = %d, %d, %d, %d, %d", rSmoothANR.ylvl1.bits.NBC_ANR_Y_L3_HF_W, rParam.rLowerIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W, rParam.rLowerIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W, rParam.rUpperIso_LowerZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W, rParam.rUpperIso_UpperZoom.ylvl1.bits.NBC_ANR_Y_L3_HF_W);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_CLIP = %d, %d, %d, %d, %d", rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CLIP, rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP, rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP, rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP, rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CLIP);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_CORE_SL = %d, %d, %d, %d, %d", rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL, rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL, rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL, rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL, rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_SL);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_CORE_TH = %d, %d, %d, %d, %d", rSmoothANR.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH, rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH, rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH, rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH, rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_Y_HF_CORE_TH);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPX1 = %d, %d, %d, %d, %d", rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX1, rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1, rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1, rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1, rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPX2 = %d, %d, %d, %d, %d", rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX2, rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2, rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2, rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2, rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPX3 = %d, %d, %d, %d, %d", rSmoothANR.a4lut1.bits.NBC_ANR_Y_ACT_CPX3, rParam.rLowerIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3, rParam.rLowerIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3, rParam.rUpperIso_LowerZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3, rParam.rUpperIso_UpperZoom.a4lut1.bits.NBC_ANR_Y_ACT_CPX3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPY0 = %d, %d, %d, %d, %d", rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY0, rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0, rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0, rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0, rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPY1 = %d, %d, %d, %d, %d", rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY1, rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1, rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1, rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1, rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPY2 = %d, %d, %d, %d, %d", rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY2, rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2, rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2, rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2, rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_CPY3 = %d, %d, %d, %d, %d", rSmoothANR.a4lut2.bits.NBC_ANR_Y_ACT_CPY3, rParam.rLowerIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3, rParam.rLowerIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3, rParam.rUpperIso_LowerZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3, rParam.rUpperIso_UpperZoom.a4lut2.bits.NBC_ANR_Y_ACT_CPY3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_PRC = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_TBL_PRC, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_TBL_PRC, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_TBL_PRC, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_TBL_PRC, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_TBL_PRC);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TABLE_EN = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_TABLE_EN, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_TABLE_EN, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_TABLE_EN, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_TABLE_EN, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_TABLE_EN);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ENY = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_ENY, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_ENY, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_ENY, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_ENY, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_ENY);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_ENC = %d, %d, %d, %d, %d", rSmoothANR.con1.bits.NBC_ANR_ENC, rParam.rLowerIso_LowerZoom.con1.bits.NBC_ANR_ENC, rParam.rLowerIso_UpperZoom.con1.bits.NBC_ANR_ENC, rParam.rUpperIso_LowerZoom.con1.bits.NBC_ANR_ENC, rParam.rUpperIso_UpperZoom.con1.bits.NBC_ANR_ENC);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SM_EDGE = %d, %d, %d, %d, %d", rSmoothANR.con2.bits.NBC_ANR_C_SM_EDGE, rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE, rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE, rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_C_SM_EDGE, rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_C_SM_EDGE);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_FLT_C = %d, %d, %d, %d, %d", rSmoothANR.con2.bits.NBC_ANR_FLT_C, rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_FLT_C, rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_FLT_C, rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_FLT_C, rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_FLT_C);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_IMPL_MODE = %d, %d, %d, %d, %d", rSmoothANR.con2.bits.NBC_ANR_IMPL_MODE, rParam.rLowerIso_LowerZoom.con2.bits.NBC_ANR_IMPL_MODE, rParam.rLowerIso_UpperZoom.con2.bits.NBC_ANR_IMPL_MODE, rParam.rUpperIso_LowerZoom.con2.bits.NBC_ANR_IMPL_MODE, rParam.rUpperIso_UpperZoom.con2.bits.NBC_ANR_IMPL_MODE);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_HF_BAL_MODE = %d, %d, %d, %d, %d", rSmoothANR.hf_cor.bits.NBC_ANR_HF_BAL_MODE, rParam.rLowerIso_LowerZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE, rParam.rLowerIso_UpperZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE, rParam.rUpperIso_LowerZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE, rParam.rUpperIso_UpperZoom.hf_cor.bits.NBC_ANR_HF_BAL_MODE);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP0 = %d, %d, %d, %d, %d", rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP0, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP0, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP0, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP0, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP1 = %d, %d, %d, %d, %d", rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP1, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP1, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP1, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP1, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP2 = %d, %d, %d, %d, %d", rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP2, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP2, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP2, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP2, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP3 = %d, %d, %d, %d, %d", rSmoothANR.y4lut3.bits.NBC_ANR_Y_SCALE_SP3, rParam.rLowerIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP3, rParam.rLowerIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP3, rParam.rUpperIso_LowerZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP3, rParam.rUpperIso_UpperZoom.y4lut3.bits.NBC_ANR_Y_SCALE_SP3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP4 = %d, %d, %d, %d, %d", rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP4, rParam.rLowerIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP4, rParam.rLowerIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP4, rParam.rUpperIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP4, rParam.rUpperIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP5 = %d, %d, %d, %d, %d", rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP5, rParam.rLowerIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP5, rParam.rLowerIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP5, rParam.rUpperIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP5, rParam.rUpperIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP5);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP6 = %d, %d, %d, %d, %d", rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP6, rParam.rLowerIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP6, rParam.rLowerIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP6, rParam.rUpperIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP6, rParam.rUpperIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP6);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP7 = %d, %d, %d, %d, %d", rSmoothANR.y4lut6.bits.NBC_ANR_Y_SCALE_SP7, rParam.rLowerIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP7, rParam.rLowerIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP7, rParam.rUpperIso_LowerZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP7, rParam.rUpperIso_UpperZoom.y4lut6.bits.NBC_ANR_Y_SCALE_SP7);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_SCALE_SP8 = %d, %d, %d, %d, %d", rSmoothANR.y4lut7.bits.NBC_ANR_Y_SCALE_SP8, rParam.rLowerIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8, rParam.rLowerIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8, rParam.rUpperIso_LowerZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8, rParam.rUpperIso_UpperZoom.y4lut7.bits.NBC_ANR_Y_SCALE_SP8);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_SP0 = %d, %d, %d, %d, %d", rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP0, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP0, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP0, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP0, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_SP1 = %d, %d, %d, %d, %d", rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP1, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP1, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP1, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP1, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_SP2 = %d, %d, %d, %d, %d", rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP2, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP2, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP2, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP2, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_SL2_SP3 = %d, %d, %d, %d, %d", rSmoothANR.l4lut3.bits.NBC_ANR_SL2_SP3, rParam.rLowerIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP3, rParam.rLowerIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP3, rParam.rUpperIso_LowerZoom.l4lut3.bits.NBC_ANR_SL2_SP3, rParam.rUpperIso_UpperZoom.l4lut3.bits.NBC_ANR_SL2_SP3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_SP0 = %d, %d, %d, %d, %d", rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP0, rParam.rLowerIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP0, rParam.rLowerIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP0, rParam.rUpperIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP0, rParam.rUpperIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_SP1 = %d, %d, %d, %d, %d", rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP1, rParam.rLowerIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP1, rParam.rLowerIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP1, rParam.rUpperIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP1, rParam.rUpperIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_SP2 = %d, %d, %d, %d, %d", rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP2, rParam.rLowerIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP2, rParam.rLowerIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP2, rParam.rUpperIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP2, rParam.rUpperIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_C_SCALE_SP3 = %d, %d, %d, %d, %d", rSmoothANR.c4lut3.bits.NBC_ANR_C_SCALE_SP3, rParam.rLowerIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3, rParam.rLowerIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3, rParam.rUpperIso_LowerZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3, rParam.rUpperIso_UpperZoom.c4lut3.bits.NBC_ANR_C_SCALE_SP3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_SP0 = %d, %d, %d, %d, %d", rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0, rParam.rLowerIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0, rParam.rLowerIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0, rParam.rUpperIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0, rParam.rUpperIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_SP1 = %d, %d, %d, %d, %d", rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1, rParam.rLowerIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1, rParam.rLowerIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1, rParam.rUpperIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1, rParam.rUpperIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_SP2 = %d, %d, %d, %d, %d", rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2, rParam.rLowerIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2, rParam.rLowerIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2, rParam.rUpperIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2, rParam.rUpperIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_TBL_GAIN_SP3 = %d, %d, %d, %d, %d", rSmoothANR.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3, rParam.rLowerIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3, rParam.rLowerIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3, rParam.rUpperIso_LowerZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3, rParam.rUpperIso_UpperZoom.t4lut3.bits.NBC_ANR_TBL_GAIN_SP3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_SP0 = %d, %d, %d, %d, %d", rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0, rParam.rLowerIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0, rParam.rLowerIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0, rParam.rUpperIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0, rParam.rUpperIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_SP1 = %d, %d, %d, %d, %d", rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1, rParam.rLowerIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1, rParam.rLowerIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1, rParam.rUpperIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1, rParam.rUpperIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_SP2 = %d, %d, %d, %d, %d", rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2, rParam.rLowerIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2, rParam.rLowerIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2, rParam.rUpperIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2, rParam.rUpperIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_SP3 = %d, %d, %d, %d, %d", rSmoothANR.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3, rParam.rLowerIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3, rParam.rLowerIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3, rParam.rUpperIso_LowerZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3, rParam.rUpperIso_UpperZoom.hf_act3.bits.NBC_ANR_Y_HF_ACT_SP3);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_ACT_SP4 = %d, %d, %d, %d, %d", rSmoothANR.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4, rParam.rLowerIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4, rParam.rLowerIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4, rParam.rUpperIso_LowerZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4, rParam.rUpperIso_UpperZoom.hf_act2.bits.NBC_ANR_Y_HF_ACT_SP4);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_SP0 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0, rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0, rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0, rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0, rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_HF_LUMA_SP1 = %d, %d, %d, %d, %d", rSmoothANR.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1, rParam.rLowerIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1, rParam.rLowerIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1, rParam.rUpperIso_LowerZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1, rParam.rUpperIso_UpperZoom.hf_luma1.bits.NBC_ANR_Y_HF_LUMA_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_SP0 = %d, %d, %d, %d, %d", rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP0, rParam.rLowerIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP0, rParam.rLowerIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP0, rParam.rUpperIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP0, rParam.rUpperIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP0);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_SP1 = %d, %d, %d, %d, %d", rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP1, rParam.rLowerIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP1, rParam.rLowerIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP1, rParam.rUpperIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP1, rParam.rUpperIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP1);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_SP2 = %d, %d, %d, %d, %d", rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP2, rParam.rLowerIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP2, rParam.rLowerIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP2, rParam.rUpperIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP2, rParam.rUpperIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP2);
    INTER_LOG_IF(bSmoothANRDebug, "[S, L_L, L_U, U_L, U_U]NBC_ANR_Y_ACT_SP3 = %d, %d, %d, %d, %d", rSmoothANR.a4lut3.bits.NBC_ANR_Y_ACT_SP3, rParam.rLowerIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3, rParam.rLowerIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3, rParam.rUpperIso_LowerZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3, rParam.rUpperIso_UpperZoom.a4lut3.bits.NBC_ANR_Y_ACT_SP3);


}


MVOID SmoothBPC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BNR_BPC_T const& rUpperBPC,   // BPC settings for upper ISO
                ISP_NVRAM_BNR_BPC_T const& rLowerBPC,   // BPC settings for lower ISO
                ISP_NVRAM_BNR_BPC_T& rSmoothBPC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_bpc.enable", value, "0");
    MBOOL bSmoothBPCDebug = atoi(value);

    INTER_LOG_IF(bSmoothBPCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_BNR_OSC_COUNT       = rLowerBPC.con.bits.BNR_OSC_COUNT;
    MINT32 pre_BPC_EXC       = rLowerBPC.con.bits.BPC_EXC;
    MINT32 pre_BPC_CRC_MODE       = rLowerBPC.con.bits.BPC_CRC_MODE;
    MINT32 pre_BPC_CS_MODE       = rLowerBPC.con.bits.BPC_CS_MODE;
    MINT32 pre_BPC_DTC_MODE       = rLowerBPC.con.bits.BPC_DTC_MODE;
    MINT32 pre_BPC_LUT_EN       = rLowerBPC.con.bits.BPC_LUT_EN;
    MINT32 pre_BPC_EN       = rLowerBPC.con.bits.BPC_EN;
    MINT32 pre_BPC_BLD_SLP0       = rLowerBPC.th1.bits.BPC_BLD_SLP0;
    MINT32 pre_BPC_TH_Y       = rLowerBPC.th1.bits.BPC_TH_Y;
    MINT32 pre_BPC_TH_LWB       = rLowerBPC.th1.bits.BPC_TH_LWB;
    MINT32 pre_BPC_BLD1       = rLowerBPC.th2.bits.BPC_BLD1;
    MINT32 pre_BPC_BLD0       = rLowerBPC.th2.bits.BPC_BLD0;
    MINT32 pre_BPC_TH_UPB       = rLowerBPC.th2.bits.BPC_TH_UPB;
    MINT32 pre_BPC_TH_SLB       = rLowerBPC.th3.bits.BPC_TH_SLB;
    MINT32 pre_BPC_TH_SLA       = rLowerBPC.th3.bits.BPC_TH_SLA;
    MINT32 pre_BPC_TH_XB       = rLowerBPC.th3.bits.BPC_TH_XB;
    MINT32 pre_BPC_TH_XA       = rLowerBPC.th3.bits.BPC_TH_XA;
    MINT32 pre_BPC_DK_TH_SLB       = rLowerBPC.th4.bits.BPC_DK_TH_SLB;
    MINT32 pre_BPC_DK_TH_SLA       = rLowerBPC.th4.bits.BPC_DK_TH_SLA;
    MINT32 pre_BPC_DK_TH_XB       = rLowerBPC.th4.bits.BPC_DK_TH_XB;
    MINT32 pre_BPC_DK_TH_XA       = rLowerBPC.th4.bits.BPC_DK_TH_XA;
    MINT32 pre_BPC_NO_LV       = rLowerBPC.dtc.bits.BPC_NO_LV;
    MINT32 pre_BPC_TH_MUL       = rLowerBPC.dtc.bits.BPC_TH_MUL;
    MINT32 pre_BPC_CT_LV       = rLowerBPC.dtc.bits.BPC_CT_LV;
    MINT32 pre_BPC_CS_RNG       = rLowerBPC.dtc.bits.BPC_CS_RNG;
    MINT32 pre_BPC_RNG       = rLowerBPC.dtc.bits.BPC_RNG;
    MINT32 pre_BPC_DIR_TH2       = rLowerBPC.cor.bits.BPC_DIR_TH2;
    MINT32 pre_BPC_RANK_IDXG       = rLowerBPC.cor.bits.BPC_RANK_IDXG;
    MINT32 pre_BPC_RANK_IDXR       = rLowerBPC.cor.bits.BPC_RANK_IDXR;
    MINT32 pre_BPC_DIR_TH       = rLowerBPC.cor.bits.BPC_DIR_TH;
    MINT32 pre_BPC_DIR_MAX       = rLowerBPC.cor.bits.BPC_DIR_MAX;
    MINT32 pre_BPC_C_TH_Y       = rLowerBPC.th1_c.bits.BPC_C_TH_Y;
    MINT32 pre_BPC_C_TH_LWB       = rLowerBPC.th1_c.bits.BPC_C_TH_LWB;
    MINT32 pre_BPC_BLD_LWB       = rLowerBPC.th2_c.bits.BPC_BLD_LWB;
    MINT32 pre_BPC_RANK_IDXB       = rLowerBPC.th2_c.bits.BPC_RANK_IDXB;
    MINT32 pre_BPC_C_TH_UPB       = rLowerBPC.th2_c.bits.BPC_C_TH_UPB;
    MINT32 pre_BPC_C_TH_SLB       = rLowerBPC.th3_c.bits.BPC_C_TH_SLB;
    MINT32 pre_BPC_C_TH_SLA       = rLowerBPC.th3_c.bits.BPC_C_TH_SLA;
    MINT32 pre_BPC_C_TH_XB       = rLowerBPC.th3_c.bits.BPC_C_TH_XB;
    MINT32 pre_BPC_C_TH_XA       = rLowerBPC.th3_c.bits.BPC_C_TH_XA;
    MINT32 pre_BNR_LE_INV_CTL       = rLowerBPC.con.bits.BNR_LE_INV_CTL;
    MINT32 pre_BPC_BLD_MODE       = rLowerBPC.con.bits.BPC_BLD_MODE;
    MINT32 pre_BPC_AVG_MODE       = rLowerBPC.con.bits.BPC_AVG_MODE;
    MINT32 pos_BNR_OSC_COUNT       = rUpperBPC.con.bits.BNR_OSC_COUNT;
    MINT32 pos_BPC_EXC       = rUpperBPC.con.bits.BPC_EXC;
    MINT32 pos_BPC_CRC_MODE       = rUpperBPC.con.bits.BPC_CRC_MODE;
    MINT32 pos_BPC_CS_MODE       = rUpperBPC.con.bits.BPC_CS_MODE;
    MINT32 pos_BPC_DTC_MODE       = rUpperBPC.con.bits.BPC_DTC_MODE;
    MINT32 pos_BPC_LUT_EN       = rUpperBPC.con.bits.BPC_LUT_EN;
    MINT32 pos_BPC_EN       = rUpperBPC.con.bits.BPC_EN;
    MINT32 pos_BPC_BLD_SLP0       = rUpperBPC.th1.bits.BPC_BLD_SLP0;
    MINT32 pos_BPC_TH_Y       = rUpperBPC.th1.bits.BPC_TH_Y;
    MINT32 pos_BPC_TH_LWB       = rUpperBPC.th1.bits.BPC_TH_LWB;
    MINT32 pos_BPC_BLD1       = rUpperBPC.th2.bits.BPC_BLD1;
    MINT32 pos_BPC_BLD0       = rUpperBPC.th2.bits.BPC_BLD0;
    MINT32 pos_BPC_TH_UPB       = rUpperBPC.th2.bits.BPC_TH_UPB;
    MINT32 pos_BPC_TH_SLB       = rUpperBPC.th3.bits.BPC_TH_SLB;
    MINT32 pos_BPC_TH_SLA       = rUpperBPC.th3.bits.BPC_TH_SLA;
    MINT32 pos_BPC_TH_XB       = rUpperBPC.th3.bits.BPC_TH_XB;
    MINT32 pos_BPC_TH_XA       = rUpperBPC.th3.bits.BPC_TH_XA;
    MINT32 pos_BPC_DK_TH_SLB       = rUpperBPC.th4.bits.BPC_DK_TH_SLB;
    MINT32 pos_BPC_DK_TH_SLA       = rUpperBPC.th4.bits.BPC_DK_TH_SLA;
    MINT32 pos_BPC_DK_TH_XB       = rUpperBPC.th4.bits.BPC_DK_TH_XB;
    MINT32 pos_BPC_DK_TH_XA       = rUpperBPC.th4.bits.BPC_DK_TH_XA;
    MINT32 pos_BPC_NO_LV       = rUpperBPC.dtc.bits.BPC_NO_LV;
    MINT32 pos_BPC_TH_MUL       = rUpperBPC.dtc.bits.BPC_TH_MUL;
    MINT32 pos_BPC_CT_LV       = rUpperBPC.dtc.bits.BPC_CT_LV;
    MINT32 pos_BPC_CS_RNG       = rUpperBPC.dtc.bits.BPC_CS_RNG;
    MINT32 pos_BPC_RNG       = rUpperBPC.dtc.bits.BPC_RNG;
    MINT32 pos_BPC_DIR_TH2       = rUpperBPC.cor.bits.BPC_DIR_TH2;
    MINT32 pos_BPC_RANK_IDXG       = rUpperBPC.cor.bits.BPC_RANK_IDXG;
    MINT32 pos_BPC_RANK_IDXR       = rUpperBPC.cor.bits.BPC_RANK_IDXR;
    MINT32 pos_BPC_DIR_TH       = rUpperBPC.cor.bits.BPC_DIR_TH;
    MINT32 pos_BPC_DIR_MAX       = rUpperBPC.cor.bits.BPC_DIR_MAX;
    MINT32 pos_BPC_C_TH_Y       = rUpperBPC.th1_c.bits.BPC_C_TH_Y;
    MINT32 pos_BPC_C_TH_LWB       = rUpperBPC.th1_c.bits.BPC_C_TH_LWB;
    MINT32 pos_BPC_BLD_LWB       = rUpperBPC.th2_c.bits.BPC_BLD_LWB;
    MINT32 pos_BPC_RANK_IDXB       = rUpperBPC.th2_c.bits.BPC_RANK_IDXB;
    MINT32 pos_BPC_C_TH_UPB       = rUpperBPC.th2_c.bits.BPC_C_TH_UPB;
    MINT32 pos_BPC_C_TH_SLB       = rUpperBPC.th3_c.bits.BPC_C_TH_SLB;
    MINT32 pos_BPC_C_TH_SLA       = rUpperBPC.th3_c.bits.BPC_C_TH_SLA;
    MINT32 pos_BPC_C_TH_XB       = rUpperBPC.th3_c.bits.BPC_C_TH_XB;
    MINT32 pos_BPC_C_TH_XA       = rUpperBPC.th3_c.bits.BPC_C_TH_XA;
    MINT32 pos_BNR_LE_INV_CTL       = rUpperBPC.con.bits.BNR_LE_INV_CTL;
    MINT32 pos_BPC_BLD_MODE       = rUpperBPC.con.bits.BPC_BLD_MODE;
    MINT32 pos_BPC_AVG_MODE       = rUpperBPC.con.bits.BPC_AVG_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 BNR_OSC_COUNT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BNR_OSC_COUNT, pos_BNR_OSC_COUNT, 0);
    MINT32 BPC_EXC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_EXC, pos_BPC_EXC, 0);
    MINT32 BPC_CRC_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CRC_MODE, pos_BPC_CRC_MODE, 0);
    MINT32 BPC_CS_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CS_MODE, pos_BPC_CS_MODE, 0);
    MINT32 BPC_DTC_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DTC_MODE, pos_BPC_DTC_MODE, 0);
    MINT32 BPC_LUT_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_LUT_EN, pos_BPC_LUT_EN, 0);
    MINT32 BPC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_EN, pos_BPC_EN, 0);
    MINT32 BPC_BLD_SLP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BLD_SLP0, pos_BPC_BLD_SLP0, 0);
    MINT32 BPC_TH_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_Y, pos_BPC_TH_Y, 0);
    MINT32 BPC_TH_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_LWB, pos_BPC_TH_LWB, 0);
    MINT32 BPC_BLD1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BLD1, pos_BPC_BLD1, 0);
    MINT32 BPC_BLD0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BLD0, pos_BPC_BLD0, 0);
    MINT32 BPC_TH_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_UPB, pos_BPC_TH_UPB, 0);
    MINT32 BPC_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_SLB, pos_BPC_TH_SLB, 0);
    MINT32 BPC_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_SLA, pos_BPC_TH_SLA, 0);
    MINT32 BPC_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_XB, pos_BPC_TH_XB, 0);
    MINT32 BPC_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_XA, pos_BPC_TH_XA, 0);
    MINT32 BPC_DK_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DK_TH_SLB, pos_BPC_DK_TH_SLB, 0);
    MINT32 BPC_DK_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DK_TH_SLA, pos_BPC_DK_TH_SLA, 0);
    MINT32 BPC_DK_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DK_TH_XB, pos_BPC_DK_TH_XB, 0);
    MINT32 BPC_DK_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DK_TH_XA, pos_BPC_DK_TH_XA, 0);
    MINT32 BPC_NO_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_NO_LV, pos_BPC_NO_LV, 0);
    MINT32 BPC_TH_MUL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_TH_MUL, pos_BPC_TH_MUL, 0);
    MINT32 BPC_CT_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_LV, pos_BPC_CT_LV, 0);
    MINT32 BPC_CS_RNG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CS_RNG, pos_BPC_CS_RNG, 0);
    MINT32 BPC_RNG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_RNG, pos_BPC_RNG, 0);
    MINT32 BPC_DIR_TH2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DIR_TH2, pos_BPC_DIR_TH2, 0);
    MINT32 BPC_RANK_IDXG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_RANK_IDXG, pos_BPC_RANK_IDXG, 0);
    MINT32 BPC_RANK_IDXR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_RANK_IDXR, pos_BPC_RANK_IDXR, 0);
    MINT32 BPC_DIR_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DIR_TH, pos_BPC_DIR_TH, 0);
    MINT32 BPC_DIR_MAX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_DIR_MAX, pos_BPC_DIR_MAX, 0);
    MINT32 BPC_C_TH_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_Y, pos_BPC_C_TH_Y, 0);
    MINT32 BPC_C_TH_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_LWB, pos_BPC_C_TH_LWB, 0);
    MINT32 BPC_BLD_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BLD_LWB, pos_BPC_BLD_LWB, 0);
    MINT32 BPC_RANK_IDXB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_RANK_IDXB, pos_BPC_RANK_IDXB, 0);
    MINT32 BPC_C_TH_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_UPB, pos_BPC_C_TH_UPB, 0);
    MINT32 BPC_C_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_SLB, pos_BPC_C_TH_SLB, 0);
    MINT32 BPC_C_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_SLA, pos_BPC_C_TH_SLA, 0);
    MINT32 BPC_C_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_XB, pos_BPC_C_TH_XB, 0);
    MINT32 BPC_C_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_C_TH_XA, pos_BPC_C_TH_XA, 0);
    MINT32 BNR_LE_INV_CTL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BNR_LE_INV_CTL, pos_BNR_LE_INV_CTL, 1);
    MINT32 BPC_BLD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BLD_MODE, pos_BPC_BLD_MODE, 1);
    MINT32 BPC_AVG_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_AVG_MODE, pos_BPC_AVG_MODE, 1);


    // interpolation result assignment
    rSmoothBPC.con.bits.BNR_OSC_COUNT       = BNR_OSC_COUNT;
    rSmoothBPC.con.bits.BPC_EXC       = BPC_EXC;
    rSmoothBPC.con.bits.BPC_CRC_MODE       = BPC_CRC_MODE;
    rSmoothBPC.con.bits.BPC_CS_MODE       = BPC_CS_MODE;
    rSmoothBPC.con.bits.BPC_DTC_MODE       = BPC_DTC_MODE;
    rSmoothBPC.con.bits.BPC_LUT_EN       = BPC_LUT_EN;
    rSmoothBPC.con.bits.BPC_EN       = BPC_EN;
    rSmoothBPC.th1.bits.BPC_BLD_SLP0       = BPC_BLD_SLP0;
    rSmoothBPC.th1.bits.BPC_TH_Y       = BPC_TH_Y;
    rSmoothBPC.th1.bits.BPC_TH_LWB       = BPC_TH_LWB;
    rSmoothBPC.th2.bits.BPC_BLD1       = BPC_BLD1;
    rSmoothBPC.th2.bits.BPC_BLD0       = BPC_BLD0;
    rSmoothBPC.th2.bits.BPC_TH_UPB       = BPC_TH_UPB;
    rSmoothBPC.th3.bits.BPC_TH_SLB       = BPC_TH_SLB;
    rSmoothBPC.th3.bits.BPC_TH_SLA       = BPC_TH_SLA;
    rSmoothBPC.th3.bits.BPC_TH_XB       = BPC_TH_XB;
    rSmoothBPC.th3.bits.BPC_TH_XA       = BPC_TH_XA;
    rSmoothBPC.th4.bits.BPC_DK_TH_SLB       = BPC_DK_TH_SLB;
    rSmoothBPC.th4.bits.BPC_DK_TH_SLA       = BPC_DK_TH_SLA;
    rSmoothBPC.th4.bits.BPC_DK_TH_XB       = BPC_DK_TH_XB;
    rSmoothBPC.th4.bits.BPC_DK_TH_XA       = BPC_DK_TH_XA;
    rSmoothBPC.dtc.bits.BPC_NO_LV       = BPC_NO_LV;
    rSmoothBPC.dtc.bits.BPC_TH_MUL       = BPC_TH_MUL;
    rSmoothBPC.dtc.bits.BPC_CT_LV       = BPC_CT_LV;
    rSmoothBPC.dtc.bits.BPC_CS_RNG       = BPC_CS_RNG;
    rSmoothBPC.dtc.bits.BPC_RNG       = BPC_RNG;
    rSmoothBPC.cor.bits.BPC_DIR_TH2       = BPC_DIR_TH2;
    rSmoothBPC.cor.bits.BPC_RANK_IDXG       = BPC_RANK_IDXG;
    rSmoothBPC.cor.bits.BPC_RANK_IDXR       = BPC_RANK_IDXR;
    rSmoothBPC.cor.bits.BPC_DIR_TH       = BPC_DIR_TH;
    rSmoothBPC.cor.bits.BPC_DIR_MAX       = BPC_DIR_MAX;
    rSmoothBPC.th1_c.bits.BPC_C_TH_Y       = BPC_C_TH_Y;
    rSmoothBPC.th1_c.bits.BPC_C_TH_LWB       = BPC_C_TH_LWB;
    rSmoothBPC.th2_c.bits.BPC_BLD_LWB       = BPC_BLD_LWB;
    rSmoothBPC.th2_c.bits.BPC_RANK_IDXB       = BPC_RANK_IDXB;
    rSmoothBPC.th2_c.bits.BPC_C_TH_UPB       = BPC_C_TH_UPB;
    rSmoothBPC.th3_c.bits.BPC_C_TH_SLB       = BPC_C_TH_SLB;
    rSmoothBPC.th3_c.bits.BPC_C_TH_SLA       = BPC_C_TH_SLA;
    rSmoothBPC.th3_c.bits.BPC_C_TH_XB       = BPC_C_TH_XB;
    rSmoothBPC.th3_c.bits.BPC_C_TH_XA       = BPC_C_TH_XA;
    rSmoothBPC.con.bits.BNR_LE_INV_CTL       = BNR_LE_INV_CTL;
    rSmoothBPC.con.bits.BPC_BLD_MODE       = BPC_BLD_MODE;
    rSmoothBPC.con.bits.BPC_AVG_MODE       = BPC_AVG_MODE;


    // logging
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BNR_OSC_COUNT       = %d, %d, %d", rLowerBPC.con.bits.BNR_OSC_COUNT, rSmoothBPC.con.bits.BNR_OSC_COUNT, rUpperBPC.con.bits.BNR_OSC_COUNT);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_EXC       = %d, %d, %d", rLowerBPC.con.bits.BPC_EXC, rSmoothBPC.con.bits.BPC_EXC, rUpperBPC.con.bits.BPC_EXC);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_CRC_MODE       = %d, %d, %d", rLowerBPC.con.bits.BPC_CRC_MODE, rSmoothBPC.con.bits.BPC_CRC_MODE, rUpperBPC.con.bits.BPC_CRC_MODE);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_CS_MODE       = %d, %d, %d", rLowerBPC.con.bits.BPC_CS_MODE, rSmoothBPC.con.bits.BPC_CS_MODE, rUpperBPC.con.bits.BPC_CS_MODE);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DTC_MODE       = %d, %d, %d", rLowerBPC.con.bits.BPC_DTC_MODE, rSmoothBPC.con.bits.BPC_DTC_MODE, rUpperBPC.con.bits.BPC_DTC_MODE);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_LUT_EN       = %d, %d, %d", rLowerBPC.con.bits.BPC_LUT_EN, rSmoothBPC.con.bits.BPC_LUT_EN, rUpperBPC.con.bits.BPC_LUT_EN);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_EN       = %d, %d, %d", rLowerBPC.con.bits.BPC_EN, rSmoothBPC.con.bits.BPC_EN, rUpperBPC.con.bits.BPC_EN);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_BLD_SLP0       = %d, %d, %d", rLowerBPC.th1.bits.BPC_BLD_SLP0, rSmoothBPC.th1.bits.BPC_BLD_SLP0, rUpperBPC.th1.bits.BPC_BLD_SLP0);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_Y       = %d, %d, %d", rLowerBPC.th1.bits.BPC_TH_Y, rSmoothBPC.th1.bits.BPC_TH_Y, rUpperBPC.th1.bits.BPC_TH_Y);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_LWB       = %d, %d, %d", rLowerBPC.th1.bits.BPC_TH_LWB, rSmoothBPC.th1.bits.BPC_TH_LWB, rUpperBPC.th1.bits.BPC_TH_LWB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_BLD1       = %d, %d, %d", rLowerBPC.th2.bits.BPC_BLD1, rSmoothBPC.th2.bits.BPC_BLD1, rUpperBPC.th2.bits.BPC_BLD1);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_BLD0       = %d, %d, %d", rLowerBPC.th2.bits.BPC_BLD0, rSmoothBPC.th2.bits.BPC_BLD0, rUpperBPC.th2.bits.BPC_BLD0);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_UPB       = %d, %d, %d", rLowerBPC.th2.bits.BPC_TH_UPB, rSmoothBPC.th2.bits.BPC_TH_UPB, rUpperBPC.th2.bits.BPC_TH_UPB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_SLB       = %d, %d, %d", rLowerBPC.th3.bits.BPC_TH_SLB, rSmoothBPC.th3.bits.BPC_TH_SLB, rUpperBPC.th3.bits.BPC_TH_SLB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_SLA       = %d, %d, %d", rLowerBPC.th3.bits.BPC_TH_SLA, rSmoothBPC.th3.bits.BPC_TH_SLA, rUpperBPC.th3.bits.BPC_TH_SLA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_XB       = %d, %d, %d", rLowerBPC.th3.bits.BPC_TH_XB, rSmoothBPC.th3.bits.BPC_TH_XB, rUpperBPC.th3.bits.BPC_TH_XB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_XA       = %d, %d, %d", rLowerBPC.th3.bits.BPC_TH_XA, rSmoothBPC.th3.bits.BPC_TH_XA, rUpperBPC.th3.bits.BPC_TH_XA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DK_TH_SLB       = %d, %d, %d", rLowerBPC.th4.bits.BPC_DK_TH_SLB, rSmoothBPC.th4.bits.BPC_DK_TH_SLB, rUpperBPC.th4.bits.BPC_DK_TH_SLB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DK_TH_SLA       = %d, %d, %d", rLowerBPC.th4.bits.BPC_DK_TH_SLA, rSmoothBPC.th4.bits.BPC_DK_TH_SLA, rUpperBPC.th4.bits.BPC_DK_TH_SLA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DK_TH_XB       = %d, %d, %d", rLowerBPC.th4.bits.BPC_DK_TH_XB, rSmoothBPC.th4.bits.BPC_DK_TH_XB, rUpperBPC.th4.bits.BPC_DK_TH_XB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DK_TH_XA       = %d, %d, %d", rLowerBPC.th4.bits.BPC_DK_TH_XA, rSmoothBPC.th4.bits.BPC_DK_TH_XA, rUpperBPC.th4.bits.BPC_DK_TH_XA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_NO_LV       = %d, %d, %d", rLowerBPC.dtc.bits.BPC_NO_LV, rSmoothBPC.dtc.bits.BPC_NO_LV, rUpperBPC.dtc.bits.BPC_NO_LV);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_TH_MUL       = %d, %d, %d", rLowerBPC.dtc.bits.BPC_TH_MUL, rSmoothBPC.dtc.bits.BPC_TH_MUL, rUpperBPC.dtc.bits.BPC_TH_MUL);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_CT_LV       = %d, %d, %d", rLowerBPC.dtc.bits.BPC_CT_LV, rSmoothBPC.dtc.bits.BPC_CT_LV, rUpperBPC.dtc.bits.BPC_CT_LV);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_CS_RNG       = %d, %d, %d", rLowerBPC.dtc.bits.BPC_CS_RNG, rSmoothBPC.dtc.bits.BPC_CS_RNG, rUpperBPC.dtc.bits.BPC_CS_RNG);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_RNG       = %d, %d, %d", rLowerBPC.dtc.bits.BPC_RNG, rSmoothBPC.dtc.bits.BPC_RNG, rUpperBPC.dtc.bits.BPC_RNG);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DIR_TH2       = %d, %d, %d", rLowerBPC.cor.bits.BPC_DIR_TH2, rSmoothBPC.cor.bits.BPC_DIR_TH2, rUpperBPC.cor.bits.BPC_DIR_TH2);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_RANK_IDXG       = %d, %d, %d", rLowerBPC.cor.bits.BPC_RANK_IDXG, rSmoothBPC.cor.bits.BPC_RANK_IDXG, rUpperBPC.cor.bits.BPC_RANK_IDXG);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_RANK_IDXR       = %d, %d, %d", rLowerBPC.cor.bits.BPC_RANK_IDXR, rSmoothBPC.cor.bits.BPC_RANK_IDXR, rUpperBPC.cor.bits.BPC_RANK_IDXR);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DIR_TH       = %d, %d, %d", rLowerBPC.cor.bits.BPC_DIR_TH, rSmoothBPC.cor.bits.BPC_DIR_TH, rUpperBPC.cor.bits.BPC_DIR_TH);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_DIR_MAX       = %d, %d, %d", rLowerBPC.cor.bits.BPC_DIR_MAX, rSmoothBPC.cor.bits.BPC_DIR_MAX, rUpperBPC.cor.bits.BPC_DIR_MAX);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_Y       = %d, %d, %d", rLowerBPC.th1_c.bits.BPC_C_TH_Y, rSmoothBPC.th1_c.bits.BPC_C_TH_Y, rUpperBPC.th1_c.bits.BPC_C_TH_Y);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_LWB       = %d, %d, %d", rLowerBPC.th1_c.bits.BPC_C_TH_LWB, rSmoothBPC.th1_c.bits.BPC_C_TH_LWB, rUpperBPC.th1_c.bits.BPC_C_TH_LWB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_BLD_LWB       = %d, %d, %d", rLowerBPC.th2_c.bits.BPC_BLD_LWB, rSmoothBPC.th2_c.bits.BPC_BLD_LWB, rUpperBPC.th2_c.bits.BPC_BLD_LWB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_RANK_IDXB       = %d, %d, %d", rLowerBPC.th2_c.bits.BPC_RANK_IDXB, rSmoothBPC.th2_c.bits.BPC_RANK_IDXB, rUpperBPC.th2_c.bits.BPC_RANK_IDXB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_UPB       = %d, %d, %d", rLowerBPC.th2_c.bits.BPC_C_TH_UPB, rSmoothBPC.th2_c.bits.BPC_C_TH_UPB, rUpperBPC.th2_c.bits.BPC_C_TH_UPB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_SLB       = %d, %d, %d", rLowerBPC.th3_c.bits.BPC_C_TH_SLB, rSmoothBPC.th3_c.bits.BPC_C_TH_SLB, rUpperBPC.th3_c.bits.BPC_C_TH_SLB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_SLA       = %d, %d, %d", rLowerBPC.th3_c.bits.BPC_C_TH_SLA, rSmoothBPC.th3_c.bits.BPC_C_TH_SLA, rUpperBPC.th3_c.bits.BPC_C_TH_SLA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_XB       = %d, %d, %d", rLowerBPC.th3_c.bits.BPC_C_TH_XB, rSmoothBPC.th3_c.bits.BPC_C_TH_XB, rUpperBPC.th3_c.bits.BPC_C_TH_XB);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_C_TH_XA       = %d, %d, %d", rLowerBPC.th3_c.bits.BPC_C_TH_XA, rSmoothBPC.th3_c.bits.BPC_C_TH_XA, rUpperBPC.th3_c.bits.BPC_C_TH_XA);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BNR_LE_INV_CTL       = %d, %d, %d", rLowerBPC.con.bits.BNR_LE_INV_CTL, rSmoothBPC.con.bits.BNR_LE_INV_CTL, rUpperBPC.con.bits.BNR_LE_INV_CTL);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_BLD_MODE       = %d, %d, %d", rLowerBPC.con.bits.BPC_BLD_MODE, rSmoothBPC.con.bits.BPC_BLD_MODE, rUpperBPC.con.bits.BPC_BLD_MODE);
    INTER_LOG_IF(bSmoothBPCDebug, "[L,S,U]BPC_AVG_MODE       = %d, %d, %d", rLowerBPC.con.bits.BPC_AVG_MODE, rSmoothBPC.con.bits.BPC_AVG_MODE, rUpperBPC.con.bits.BPC_AVG_MODE);

}

MVOID SmoothCCR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_CCR_T const& rUpperCCR,   // CCR settings for upper ISO
                ISP_NVRAM_CCR_T const& rLowerCCR,   // CCR settings for lower ISO
                ISP_NVRAM_CCR_T& rSmoothCCR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ccr.enable", value, "0");
    MBOOL bSmoothCCRDebug = atoi(value);

    INTER_LOG_IF(bSmoothCCRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_NBC2_CCR_Y_CPX3       = rLowerCCR.con.bits.NBC2_CCR_Y_CPX3;
    MINT32 pre_NBC2_CCR_UV_GAIN2       = rLowerCCR.con.bits.NBC2_CCR_UV_GAIN2;
    MINT32 pre_NBC2_CCR_Y_CPY1       = rLowerCCR.ylut.bits.NBC2_CCR_Y_CPY1;
    MINT32 pre_NBC2_CCR_Y_CPX2       = rLowerCCR.ylut.bits.NBC2_CCR_Y_CPX2;
    MINT32 pre_NBC2_CCR_Y_CPX1       = rLowerCCR.ylut.bits.NBC2_CCR_Y_CPX1;
    MINT32 pre_NBC2_CCR_UV_GAIN1       = rLowerCCR.uvlut.bits.NBC2_CCR_UV_GAIN1;
    MINT32 pre_NBC2_CCR_UV_X3       = rLowerCCR.uvlut.bits.NBC2_CCR_UV_X3;
    MINT32 pre_NBC2_CCR_UV_X2       = rLowerCCR.uvlut.bits.NBC2_CCR_UV_X2;
    MINT32 pre_NBC2_CCR_UV_X1       = rLowerCCR.uvlut.bits.NBC2_CCR_UV_X1;
    MINT32 pre_NBC2_CCR_Y_CPY2       = rLowerCCR.ylut2.bits.NBC2_CCR_Y_CPY2;
    MINT32 pre_NBC2_CCR_Y_CPY0       = rLowerCCR.ylut2.bits.NBC2_CCR_Y_CPY0;
    MINT32 pre_NBC2_CCR_Y_SP2       = rLowerCCR.ylut2.bits.NBC2_CCR_Y_SP2;
    MINT32 pre_NBC2_CCR_CEN_V       = rLowerCCR.sat_ctrl.bits.NBC2_CCR_CEN_V;
    MINT32 pre_NBC2_CCR_CEN_U       = rLowerCCR.sat_ctrl.bits.NBC2_CCR_CEN_U;
    MINT32 pre_NBC2_CCR_UV_GAIN_SP2       = rLowerCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2;
    MINT32 pre_NBC2_CCR_HUE_X2       = rLowerCCR.hue1.bits.NBC2_CCR_HUE_X2;
    MINT32 pre_NBC2_CCR_HUE_X1       = rLowerCCR.hue1.bits.NBC2_CCR_HUE_X1;
    MINT32 pre_NBC2_CCR_HUE_X4       = rLowerCCR.hue2.bits.NBC2_CCR_HUE_X4;
    MINT32 pre_NBC2_CCR_HUE_X3       = rLowerCCR.hue2.bits.NBC2_CCR_HUE_X3;
    MINT32 pre_NBC2_CCR_HUE_GAIN2       = rLowerCCR.hue3.bits.NBC2_CCR_HUE_GAIN2;
    MINT32 pre_NBC2_CCR_HUE_GAIN1       = rLowerCCR.hue3.bits.NBC2_CCR_HUE_GAIN1;
    MINT32 pre_NBC2_CCR_SL2_X3       = rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X3;
    MINT32 pre_NBC2_CCR_SL2_X2       = rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X2;
    MINT32 pre_NBC2_CCR_SL2_X1       = rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X1;
    MINT32 pre_NBC2_CCR_SL2_GAIN3       = rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3;
    MINT32 pre_NBC2_CCR_SL2_GAIN2       = rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2;
    MINT32 pre_NBC2_CCR_SL2_GAIN1       = rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1;
    MINT32 pre_NBC2_CCR_SL2_GAIN0       = rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0;
    MINT32 pre_NBC2_CCR_SL2_SP3       = rLowerCCR.l4lut3.bits.NBC2_CCR_SL2_SP3;
    MINT32 pre_NBC2_CCR_UV_GAIN_MODE       = rLowerCCR.con.bits.NBC2_CCR_UV_GAIN_MODE;
    MINT32 pre_NBC2_CCR_OR_MODE       = rLowerCCR.con.bits.NBC2_CCR_OR_MODE;
    MINT32 pre_NBC2_CCR_SL2_MODE       = rLowerCCR.con.bits.NBC2_CCR_SL2_MODE;
    MINT32 pre_NBC2_CCR_SL2_LINK       = rLowerCCR.con.bits.NBC2_CCR_SL2_LINK;
    MINT32 pre_NBC2_CCR_EN       = rLowerCCR.con.bits.NBC2_CCR_EN;
    MINT32 pre_NBC2_CCR_MODE       = rLowerCCR.sat_ctrl.bits.NBC2_CCR_MODE;
    MINT32 pos_NBC2_CCR_Y_CPX3       = rUpperCCR.con.bits.NBC2_CCR_Y_CPX3;
    MINT32 pos_NBC2_CCR_UV_GAIN2       = rUpperCCR.con.bits.NBC2_CCR_UV_GAIN2;
    MINT32 pos_NBC2_CCR_Y_CPY1       = rUpperCCR.ylut.bits.NBC2_CCR_Y_CPY1;
    MINT32 pos_NBC2_CCR_Y_CPX2       = rUpperCCR.ylut.bits.NBC2_CCR_Y_CPX2;
    MINT32 pos_NBC2_CCR_Y_CPX1       = rUpperCCR.ylut.bits.NBC2_CCR_Y_CPX1;
    MINT32 pos_NBC2_CCR_UV_GAIN1       = rUpperCCR.uvlut.bits.NBC2_CCR_UV_GAIN1;
    MINT32 pos_NBC2_CCR_UV_X3       = rUpperCCR.uvlut.bits.NBC2_CCR_UV_X3;
    MINT32 pos_NBC2_CCR_UV_X2       = rUpperCCR.uvlut.bits.NBC2_CCR_UV_X2;
    MINT32 pos_NBC2_CCR_UV_X1       = rUpperCCR.uvlut.bits.NBC2_CCR_UV_X1;
    MINT32 pos_NBC2_CCR_Y_CPY2       = rUpperCCR.ylut2.bits.NBC2_CCR_Y_CPY2;
    MINT32 pos_NBC2_CCR_Y_CPY0       = rUpperCCR.ylut2.bits.NBC2_CCR_Y_CPY0;
    MINT32 pos_NBC2_CCR_Y_SP2       = rUpperCCR.ylut2.bits.NBC2_CCR_Y_SP2;
    MINT32 pos_NBC2_CCR_CEN_V       = rUpperCCR.sat_ctrl.bits.NBC2_CCR_CEN_V;
    MINT32 pos_NBC2_CCR_CEN_U       = rUpperCCR.sat_ctrl.bits.NBC2_CCR_CEN_U;
    MINT32 pos_NBC2_CCR_UV_GAIN_SP2       = rUpperCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2;
    MINT32 pos_NBC2_CCR_HUE_X2       = rUpperCCR.hue1.bits.NBC2_CCR_HUE_X2;
    MINT32 pos_NBC2_CCR_HUE_X1       = rUpperCCR.hue1.bits.NBC2_CCR_HUE_X1;
    MINT32 pos_NBC2_CCR_HUE_X4       = rUpperCCR.hue2.bits.NBC2_CCR_HUE_X4;
    MINT32 pos_NBC2_CCR_HUE_X3       = rUpperCCR.hue2.bits.NBC2_CCR_HUE_X3;
    MINT32 pos_NBC2_CCR_HUE_GAIN2       = rUpperCCR.hue3.bits.NBC2_CCR_HUE_GAIN2;
    MINT32 pos_NBC2_CCR_HUE_GAIN1       = rUpperCCR.hue3.bits.NBC2_CCR_HUE_GAIN1;
    MINT32 pos_NBC2_CCR_SL2_X3       = rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X3;
    MINT32 pos_NBC2_CCR_SL2_X2       = rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X2;
    MINT32 pos_NBC2_CCR_SL2_X1       = rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X1;
    MINT32 pos_NBC2_CCR_SL2_GAIN3       = rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3;
    MINT32 pos_NBC2_CCR_SL2_GAIN2       = rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2;
    MINT32 pos_NBC2_CCR_SL2_GAIN1       = rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1;
    MINT32 pos_NBC2_CCR_SL2_GAIN0       = rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0;
    MINT32 pos_NBC2_CCR_SL2_SP3       = rUpperCCR.l4lut3.bits.NBC2_CCR_SL2_SP3;
    MINT32 pos_NBC2_CCR_UV_GAIN_MODE       = rUpperCCR.con.bits.NBC2_CCR_UV_GAIN_MODE;
    MINT32 pos_NBC2_CCR_OR_MODE       = rUpperCCR.con.bits.NBC2_CCR_OR_MODE;
    MINT32 pos_NBC2_CCR_SL2_MODE       = rUpperCCR.con.bits.NBC2_CCR_SL2_MODE;
    MINT32 pos_NBC2_CCR_SL2_LINK       = rUpperCCR.con.bits.NBC2_CCR_SL2_LINK;
    MINT32 pos_NBC2_CCR_EN       = rUpperCCR.con.bits.NBC2_CCR_EN;
    MINT32 pos_NBC2_CCR_MODE       = rUpperCCR.sat_ctrl.bits.NBC2_CCR_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 NBC2_CCR_Y_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPX3, pos_NBC2_CCR_Y_CPX3, 0);
    MINT32 NBC2_CCR_UV_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_GAIN2, pos_NBC2_CCR_UV_GAIN2, 0);
    MINT32 NBC2_CCR_Y_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPY1, pos_NBC2_CCR_Y_CPY1, 0);
    MINT32 NBC2_CCR_Y_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPX2, pos_NBC2_CCR_Y_CPX2, 0);
    MINT32 NBC2_CCR_Y_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPX1, pos_NBC2_CCR_Y_CPX1, 0);
    MINT32 NBC2_CCR_UV_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_GAIN1, pos_NBC2_CCR_UV_GAIN1, 0);
    MINT32 NBC2_CCR_UV_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_X3, pos_NBC2_CCR_UV_X3, 0);
    MINT32 NBC2_CCR_UV_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_X2, pos_NBC2_CCR_UV_X2, 0);
    MINT32 NBC2_CCR_UV_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_X1, pos_NBC2_CCR_UV_X1, 0);
    MINT32 NBC2_CCR_Y_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPY2, pos_NBC2_CCR_Y_CPY2, 0);
    MINT32 NBC2_CCR_Y_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_CPY0, pos_NBC2_CCR_Y_CPY0, 0);
    MINT32 NBC2_CCR_Y_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_Y_SP2, pos_NBC2_CCR_Y_SP2, 0);
    MINT32 NBC2_CCR_CEN_V       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_CEN_V, pos_NBC2_CCR_CEN_V, 0);
    MINT32 NBC2_CCR_CEN_U       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_CEN_U, pos_NBC2_CCR_CEN_U, 0);
    MINT32 NBC2_CCR_UV_GAIN_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_GAIN_SP2, pos_NBC2_CCR_UV_GAIN_SP2, 0);
    MINT32 NBC2_CCR_HUE_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_X2, pos_NBC2_CCR_HUE_X2, 0);
    MINT32 NBC2_CCR_HUE_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_X1, pos_NBC2_CCR_HUE_X1, 0);
    MINT32 NBC2_CCR_HUE_X4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_X4, pos_NBC2_CCR_HUE_X4, 0);
    MINT32 NBC2_CCR_HUE_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_X3, pos_NBC2_CCR_HUE_X3, 0);
    MINT32 NBC2_CCR_HUE_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_GAIN2, pos_NBC2_CCR_HUE_GAIN2, 0);
    MINT32 NBC2_CCR_HUE_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_HUE_GAIN1, pos_NBC2_CCR_HUE_GAIN1, 0);
    MINT32 NBC2_CCR_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_X3, pos_NBC2_CCR_SL2_X3, 0);
    MINT32 NBC2_CCR_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_X2, pos_NBC2_CCR_SL2_X2, 0);
    MINT32 NBC2_CCR_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_X1, pos_NBC2_CCR_SL2_X1, 0);
    MINT32 NBC2_CCR_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_GAIN3, pos_NBC2_CCR_SL2_GAIN3, 0);
    MINT32 NBC2_CCR_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_GAIN2, pos_NBC2_CCR_SL2_GAIN2, 0);
    MINT32 NBC2_CCR_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_GAIN1, pos_NBC2_CCR_SL2_GAIN1, 0);
    MINT32 NBC2_CCR_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_GAIN0, pos_NBC2_CCR_SL2_GAIN0, 0);
    MINT32 NBC2_CCR_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_SP3, pos_NBC2_CCR_SL2_SP3, 0);
    MINT32 NBC2_CCR_UV_GAIN_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_UV_GAIN_MODE, pos_NBC2_CCR_UV_GAIN_MODE, 1);
    MINT32 NBC2_CCR_OR_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_OR_MODE, pos_NBC2_CCR_OR_MODE, 1);
    MINT32 NBC2_CCR_SL2_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_MODE, pos_NBC2_CCR_SL2_MODE, 1);
    MINT32 NBC2_CCR_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_SL2_LINK, pos_NBC2_CCR_SL2_LINK, 1);
    MINT32 NBC2_CCR_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_EN, pos_NBC2_CCR_EN, 1);
    MINT32 NBC2_CCR_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NBC2_CCR_MODE, pos_NBC2_CCR_MODE, 1);
    MINT32 NBC2_CCR_Y_SP1    = CalculateLUTSP(   NBC2_CCR_Y_CPX1, NBC2_CCR_Y_CPX2, NBC2_CCR_Y_CPY1, NBC2_CCR_Y_CPY2, 32, 127, 0);
    MINT32 NBC2_CCR_Y_SP0    = CalculateLUTSP(   0, NBC2_CCR_Y_CPX1, NBC2_CCR_Y_CPY0, NBC2_CCR_Y_CPY1, 32, 127, 0);
    MINT32 NBC2_CCR_UV_GAIN_SP1    = CalculateLUTSP(   NBC2_CCR_UV_X1, NBC2_CCR_UV_X2, NBC2_CCR_UV_GAIN1, NBC2_CCR_UV_GAIN2, 32, 1023, 0);
    MINT32 NBC2_CCR_HUE_SP2    = CalculateLUTSP(   NBC2_CCR_HUE_X3, NBC2_CCR_HUE_X4, NBC2_CCR_HUE_GAIN2, NBC2_CCR_HUE_GAIN1, 32, 128, -127);
    MINT32 NBC2_CCR_HUE_SP1    = CalculateLUTSP(   NBC2_CCR_HUE_X1, NBC2_CCR_HUE_X2, NBC2_CCR_HUE_GAIN1, NBC2_CCR_HUE_GAIN2, 32, 128, -127);
    MINT32 NBC2_CCR_SL2_SP2    = CalculateLUTSP(   NBC2_CCR_SL2_X2, NBC2_CCR_SL2_X3, NBC2_CCR_SL2_GAIN2, NBC2_CCR_SL2_GAIN3, 128, 31, -31);
    NBC2_CCR_SL2_SP2  = Convert2Pos(NBC2_CCR_SL2_SP2,64);
    MINT32 NBC2_CCR_SL2_SP1    = CalculateLUTSP(   NBC2_CCR_SL2_X1, NBC2_CCR_SL2_X2, NBC2_CCR_SL2_GAIN1, NBC2_CCR_SL2_GAIN2, 128, 31, -31);
    NBC2_CCR_SL2_SP1  = Convert2Pos(NBC2_CCR_SL2_SP1,64);
    MINT32 NBC2_CCR_SL2_SP0    = CalculateLUTSP(   0, NBC2_CCR_SL2_X1, NBC2_CCR_SL2_GAIN0, NBC2_CCR_SL2_GAIN1, 128, 31, -31);
    NBC2_CCR_SL2_SP0  = Convert2Pos(NBC2_CCR_SL2_SP0,64);


    // interpolation result assignment
    rSmoothCCR.con.bits.NBC2_CCR_Y_CPX3       = NBC2_CCR_Y_CPX3;
    rSmoothCCR.con.bits.NBC2_CCR_UV_GAIN2       = NBC2_CCR_UV_GAIN2;
    rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPY1       = NBC2_CCR_Y_CPY1;
    rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPX2       = NBC2_CCR_Y_CPX2;
    rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPX1       = NBC2_CCR_Y_CPX1;
    rSmoothCCR.uvlut.bits.NBC2_CCR_UV_GAIN1       = NBC2_CCR_UV_GAIN1;
    rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X3       = NBC2_CCR_UV_X3;
    rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X2       = NBC2_CCR_UV_X2;
    rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X1       = NBC2_CCR_UV_X1;
    rSmoothCCR.ylut2.bits.NBC2_CCR_Y_CPY2       = NBC2_CCR_Y_CPY2;
    rSmoothCCR.ylut2.bits.NBC2_CCR_Y_CPY0       = NBC2_CCR_Y_CPY0;
    rSmoothCCR.ylut2.bits.NBC2_CCR_Y_SP2       = NBC2_CCR_Y_SP2;
    rSmoothCCR.sat_ctrl.bits.NBC2_CCR_CEN_V       = NBC2_CCR_CEN_V;
    rSmoothCCR.sat_ctrl.bits.NBC2_CCR_CEN_U       = NBC2_CCR_CEN_U;
    rSmoothCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2       = NBC2_CCR_UV_GAIN_SP2;
    rSmoothCCR.hue1.bits.NBC2_CCR_HUE_X2       = NBC2_CCR_HUE_X2;
    rSmoothCCR.hue1.bits.NBC2_CCR_HUE_X1       = NBC2_CCR_HUE_X1;
    rSmoothCCR.hue2.bits.NBC2_CCR_HUE_X4       = NBC2_CCR_HUE_X4;
    rSmoothCCR.hue2.bits.NBC2_CCR_HUE_X3       = NBC2_CCR_HUE_X3;
    rSmoothCCR.hue3.bits.NBC2_CCR_HUE_GAIN2       = NBC2_CCR_HUE_GAIN2;
    rSmoothCCR.hue3.bits.NBC2_CCR_HUE_GAIN1       = NBC2_CCR_HUE_GAIN1;
    rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X3       = NBC2_CCR_SL2_X3;
    rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X2       = NBC2_CCR_SL2_X2;
    rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X1       = NBC2_CCR_SL2_X1;
    rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3       = NBC2_CCR_SL2_GAIN3;
    rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2       = NBC2_CCR_SL2_GAIN2;
    rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1       = NBC2_CCR_SL2_GAIN1;
    rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0       = NBC2_CCR_SL2_GAIN0;
    rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP3       = NBC2_CCR_SL2_SP3;
    rSmoothCCR.con.bits.NBC2_CCR_UV_GAIN_MODE       = NBC2_CCR_UV_GAIN_MODE;
    rSmoothCCR.con.bits.NBC2_CCR_OR_MODE       = NBC2_CCR_OR_MODE;
    rSmoothCCR.con.bits.NBC2_CCR_SL2_MODE       = NBC2_CCR_SL2_MODE;
    rSmoothCCR.con.bits.NBC2_CCR_SL2_LINK       = NBC2_CCR_SL2_LINK;
    rSmoothCCR.con.bits.NBC2_CCR_EN       = NBC2_CCR_EN;
    rSmoothCCR.sat_ctrl.bits.NBC2_CCR_MODE       = NBC2_CCR_MODE;
    rSmoothCCR.ylut.bits.NBC2_CCR_Y_SP1       = NBC2_CCR_Y_SP1;
    rSmoothCCR.ylut2.bits.NBC2_CCR_Y_SP0       = NBC2_CCR_Y_SP0;
    rSmoothCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP1       = NBC2_CCR_UV_GAIN_SP1;
    rSmoothCCR.hue3.bits.NBC2_CCR_HUE_SP2       = NBC2_CCR_HUE_SP2;
    rSmoothCCR.hue3.bits.NBC2_CCR_HUE_SP1       = NBC2_CCR_HUE_SP1;
    rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP2       = NBC2_CCR_SL2_SP2;
    rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP1       = NBC2_CCR_SL2_SP1;
    rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP0       = NBC2_CCR_SL2_SP0;


    // logging
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPX3       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_Y_CPX3, rSmoothCCR.con.bits.NBC2_CCR_Y_CPX3, rUpperCCR.con.bits.NBC2_CCR_Y_CPX3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_GAIN2       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_UV_GAIN2, rSmoothCCR.con.bits.NBC2_CCR_UV_GAIN2, rUpperCCR.con.bits.NBC2_CCR_UV_GAIN2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPY1       = %d, %d, %d", rLowerCCR.ylut.bits.NBC2_CCR_Y_CPY1, rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPY1, rUpperCCR.ylut.bits.NBC2_CCR_Y_CPY1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPX2       = %d, %d, %d", rLowerCCR.ylut.bits.NBC2_CCR_Y_CPX2, rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPX2, rUpperCCR.ylut.bits.NBC2_CCR_Y_CPX2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPX1       = %d, %d, %d", rLowerCCR.ylut.bits.NBC2_CCR_Y_CPX1, rSmoothCCR.ylut.bits.NBC2_CCR_Y_CPX1, rUpperCCR.ylut.bits.NBC2_CCR_Y_CPX1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_GAIN1       = %d, %d, %d", rLowerCCR.uvlut.bits.NBC2_CCR_UV_GAIN1, rSmoothCCR.uvlut.bits.NBC2_CCR_UV_GAIN1, rUpperCCR.uvlut.bits.NBC2_CCR_UV_GAIN1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_X3       = %d, %d, %d", rLowerCCR.uvlut.bits.NBC2_CCR_UV_X3, rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X3, rUpperCCR.uvlut.bits.NBC2_CCR_UV_X3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_X2       = %d, %d, %d", rLowerCCR.uvlut.bits.NBC2_CCR_UV_X2, rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X2, rUpperCCR.uvlut.bits.NBC2_CCR_UV_X2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_X1       = %d, %d, %d", rLowerCCR.uvlut.bits.NBC2_CCR_UV_X1, rSmoothCCR.uvlut.bits.NBC2_CCR_UV_X1, rUpperCCR.uvlut.bits.NBC2_CCR_UV_X1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPY2       = %d, %d, %d", rLowerCCR.ylut2.bits.NBC2_CCR_Y_CPY2, rSmoothCCR.ylut2.bits.NBC2_CCR_Y_CPY2, rUpperCCR.ylut2.bits.NBC2_CCR_Y_CPY2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_CPY0       = %d, %d, %d", rLowerCCR.ylut2.bits.NBC2_CCR_Y_CPY0, rSmoothCCR.ylut2.bits.NBC2_CCR_Y_CPY0, rUpperCCR.ylut2.bits.NBC2_CCR_Y_CPY0);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_SP2       = %d, %d, %d", rLowerCCR.ylut2.bits.NBC2_CCR_Y_SP2, rSmoothCCR.ylut2.bits.NBC2_CCR_Y_SP2, rUpperCCR.ylut2.bits.NBC2_CCR_Y_SP2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_CEN_V       = %d, %d, %d", rLowerCCR.sat_ctrl.bits.NBC2_CCR_CEN_V, rSmoothCCR.sat_ctrl.bits.NBC2_CCR_CEN_V, rUpperCCR.sat_ctrl.bits.NBC2_CCR_CEN_V);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_CEN_U       = %d, %d, %d", rLowerCCR.sat_ctrl.bits.NBC2_CCR_CEN_U, rSmoothCCR.sat_ctrl.bits.NBC2_CCR_CEN_U, rUpperCCR.sat_ctrl.bits.NBC2_CCR_CEN_U);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_GAIN_SP2       = %d, %d, %d", rLowerCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2, rSmoothCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2, rUpperCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_X2       = %d, %d, %d", rLowerCCR.hue1.bits.NBC2_CCR_HUE_X2, rSmoothCCR.hue1.bits.NBC2_CCR_HUE_X2, rUpperCCR.hue1.bits.NBC2_CCR_HUE_X2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_X1       = %d, %d, %d", rLowerCCR.hue1.bits.NBC2_CCR_HUE_X1, rSmoothCCR.hue1.bits.NBC2_CCR_HUE_X1, rUpperCCR.hue1.bits.NBC2_CCR_HUE_X1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_X4       = %d, %d, %d", rLowerCCR.hue2.bits.NBC2_CCR_HUE_X4, rSmoothCCR.hue2.bits.NBC2_CCR_HUE_X4, rUpperCCR.hue2.bits.NBC2_CCR_HUE_X4);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_X3       = %d, %d, %d", rLowerCCR.hue2.bits.NBC2_CCR_HUE_X3, rSmoothCCR.hue2.bits.NBC2_CCR_HUE_X3, rUpperCCR.hue2.bits.NBC2_CCR_HUE_X3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_GAIN2       = %d, %d, %d", rLowerCCR.hue3.bits.NBC2_CCR_HUE_GAIN2, rSmoothCCR.hue3.bits.NBC2_CCR_HUE_GAIN2, rUpperCCR.hue3.bits.NBC2_CCR_HUE_GAIN2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_GAIN1       = %d, %d, %d", rLowerCCR.hue3.bits.NBC2_CCR_HUE_GAIN1, rSmoothCCR.hue3.bits.NBC2_CCR_HUE_GAIN1, rUpperCCR.hue3.bits.NBC2_CCR_HUE_GAIN1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_X3       = %d, %d, %d", rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X3, rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X3, rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_X2       = %d, %d, %d", rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X2, rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X2, rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_X1       = %d, %d, %d", rLowerCCR.l4lut1.bits.NBC2_CCR_SL2_X1, rSmoothCCR.l4lut1.bits.NBC2_CCR_SL2_X1, rUpperCCR.l4lut1.bits.NBC2_CCR_SL2_X1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_GAIN3       = %d, %d, %d", rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3, rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3, rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_GAIN2       = %d, %d, %d", rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2, rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2, rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_GAIN1       = %d, %d, %d", rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1, rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1, rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_GAIN0       = %d, %d, %d", rLowerCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0, rSmoothCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0, rUpperCCR.l4lut2.bits.NBC2_CCR_SL2_GAIN0);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_SP3       = %d, %d, %d", rLowerCCR.l4lut3.bits.NBC2_CCR_SL2_SP3, rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP3, rUpperCCR.l4lut3.bits.NBC2_CCR_SL2_SP3);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_GAIN_MODE       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_UV_GAIN_MODE, rSmoothCCR.con.bits.NBC2_CCR_UV_GAIN_MODE, rUpperCCR.con.bits.NBC2_CCR_UV_GAIN_MODE);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_OR_MODE       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_OR_MODE, rSmoothCCR.con.bits.NBC2_CCR_OR_MODE, rUpperCCR.con.bits.NBC2_CCR_OR_MODE);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_MODE       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_SL2_MODE, rSmoothCCR.con.bits.NBC2_CCR_SL2_MODE, rUpperCCR.con.bits.NBC2_CCR_SL2_MODE);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_LINK       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_SL2_LINK, rSmoothCCR.con.bits.NBC2_CCR_SL2_LINK, rUpperCCR.con.bits.NBC2_CCR_SL2_LINK);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_EN       = %d, %d, %d", rLowerCCR.con.bits.NBC2_CCR_EN, rSmoothCCR.con.bits.NBC2_CCR_EN, rUpperCCR.con.bits.NBC2_CCR_EN);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_MODE       = %d, %d, %d", rLowerCCR.sat_ctrl.bits.NBC2_CCR_MODE, rSmoothCCR.sat_ctrl.bits.NBC2_CCR_MODE, rUpperCCR.sat_ctrl.bits.NBC2_CCR_MODE);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_SP1       = %d, %d, %d", rLowerCCR.ylut.bits.NBC2_CCR_Y_SP1, rSmoothCCR.ylut.bits.NBC2_CCR_Y_SP1, rUpperCCR.ylut.bits.NBC2_CCR_Y_SP1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_Y_SP0       = %d, %d, %d", rLowerCCR.ylut2.bits.NBC2_CCR_Y_SP0, rSmoothCCR.ylut2.bits.NBC2_CCR_Y_SP0, rUpperCCR.ylut2.bits.NBC2_CCR_Y_SP0);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_UV_GAIN_SP1       = %d, %d, %d", rLowerCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP1, rSmoothCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP1, rUpperCCR.uvlut_sp.bits.NBC2_CCR_UV_GAIN_SP1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_SP2       = %d, %d, %d", rLowerCCR.hue3.bits.NBC2_CCR_HUE_SP2, rSmoothCCR.hue3.bits.NBC2_CCR_HUE_SP2, rUpperCCR.hue3.bits.NBC2_CCR_HUE_SP2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_HUE_SP1       = %d, %d, %d", rLowerCCR.hue3.bits.NBC2_CCR_HUE_SP1, rSmoothCCR.hue3.bits.NBC2_CCR_HUE_SP1, rUpperCCR.hue3.bits.NBC2_CCR_HUE_SP1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_SP2       = %d, %d, %d", rLowerCCR.l4lut3.bits.NBC2_CCR_SL2_SP2, rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP2, rUpperCCR.l4lut3.bits.NBC2_CCR_SL2_SP2);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_SP1       = %d, %d, %d", rLowerCCR.l4lut3.bits.NBC2_CCR_SL2_SP1, rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP1, rUpperCCR.l4lut3.bits.NBC2_CCR_SL2_SP1);
    INTER_LOG_IF(bSmoothCCRDebug, "[L,S,U]NBC2_CCR_SL2_SP0       = %d, %d, %d", rLowerCCR.l4lut3.bits.NBC2_CCR_SL2_SP0, rSmoothCCR.l4lut3.bits.NBC2_CCR_SL2_SP0, rUpperCCR.l4lut3.bits.NBC2_CCR_SL2_SP0);

}

MVOID SmoothDBS(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_DBS_T const& rUpperDBS,   // DBS settings for upper ISO
                ISP_NVRAM_DBS_T const& rLowerDBS,   // DBS settings for lower ISO
                ISP_NVRAM_DBS_T& rSmoothDBS)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_dbs.enable", value, "0");
    MBOOL bSmoothDBSDebug = atoi(value);

    INTER_LOG_IF(bSmoothDBSDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_DBS_OFST       = rLowerDBS.sigma.bits.DBS_OFST;
    MINT32 pre_DBS_SL       = rLowerDBS.sigma.bits.DBS_SL;
    MINT32 pre_DBS_BIAS_Y0       = rLowerDBS.bstbl_0.bits.DBS_BIAS_Y0;
    MINT32 pre_DBS_BIAS_Y1       = rLowerDBS.bstbl_0.bits.DBS_BIAS_Y1;
    MINT32 pre_DBS_BIAS_Y2       = rLowerDBS.bstbl_0.bits.DBS_BIAS_Y2;
    MINT32 pre_DBS_BIAS_Y3       = rLowerDBS.bstbl_0.bits.DBS_BIAS_Y3;
    MINT32 pre_DBS_BIAS_Y4       = rLowerDBS.bstbl_1.bits.DBS_BIAS_Y4;
    MINT32 pre_DBS_BIAS_Y5       = rLowerDBS.bstbl_1.bits.DBS_BIAS_Y5;
    MINT32 pre_DBS_BIAS_Y6       = rLowerDBS.bstbl_1.bits.DBS_BIAS_Y6;
    MINT32 pre_DBS_BIAS_Y7       = rLowerDBS.bstbl_1.bits.DBS_BIAS_Y7;
    MINT32 pre_DBS_BIAS_Y8       = rLowerDBS.bstbl_2.bits.DBS_BIAS_Y8;
    MINT32 pre_DBS_BIAS_Y9       = rLowerDBS.bstbl_2.bits.DBS_BIAS_Y9;
    MINT32 pre_DBS_BIAS_Y10       = rLowerDBS.bstbl_2.bits.DBS_BIAS_Y10;
    MINT32 pre_DBS_BIAS_Y11       = rLowerDBS.bstbl_2.bits.DBS_BIAS_Y11;
    MINT32 pre_DBS_BIAS_Y12       = rLowerDBS.bstbl_3.bits.DBS_BIAS_Y12;
    MINT32 pre_DBS_BIAS_Y13       = rLowerDBS.bstbl_3.bits.DBS_BIAS_Y13;
    MINT32 pre_DBS_BIAS_Y14       = rLowerDBS.bstbl_3.bits.DBS_BIAS_Y14;
    MINT32 pre_DBS_SL_EN       = rLowerDBS.ctl.bits.DBS_SL_EN;
    MINT32 pre_DBS_LE_INV_CTL       = rLowerDBS.ctl.bits.DBS_LE_INV_CTL;
    MINT32 pre_DBS_EDGE       = rLowerDBS.ctl.bits.DBS_EDGE;
    MINT32 pre_DBS_MUL_B       = rLowerDBS.sigma_2.bits.DBS_MUL_B;
    MINT32 pre_DBS_MUL_GB       = rLowerDBS.sigma_2.bits.DBS_MUL_GB;
    MINT32 pre_DBS_MUL_GR       = rLowerDBS.sigma_2.bits.DBS_MUL_GR;
    MINT32 pre_DBS_MUL_R       = rLowerDBS.sigma_2.bits.DBS_MUL_R;
    MINT32 pre_DBS_YGN_B       = rLowerDBS.ygn.bits.DBS_YGN_B;
    MINT32 pre_DBS_YGN_GB       = rLowerDBS.ygn.bits.DBS_YGN_GB;
    MINT32 pre_DBS_YGN_GR       = rLowerDBS.ygn.bits.DBS_YGN_GR;
    MINT32 pre_DBS_YGN_R       = rLowerDBS.ygn.bits.DBS_YGN_R;
    MINT32 pre_DBS_SL_Y1       = rLowerDBS.sl_y12.bits.DBS_SL_Y1;
    MINT32 pre_DBS_SL_Y2       = rLowerDBS.sl_y12.bits.DBS_SL_Y2;
    MINT32 pre_DBS_SL_Y3       = rLowerDBS.sl_y34.bits.DBS_SL_Y3;
    MINT32 pre_DBS_SL_Y4       = rLowerDBS.sl_y34.bits.DBS_SL_Y4;
    MINT32 pre_DBS_SL_G1       = rLowerDBS.sl_g12.bits.DBS_SL_G1;
    MINT32 pre_DBS_SL_G2       = rLowerDBS.sl_g12.bits.DBS_SL_G2;
    MINT32 pre_DBS_SL_G3       = rLowerDBS.sl_g34.bits.DBS_SL_G3;
    MINT32 pre_DBS_SL_G4       = rLowerDBS.sl_g34.bits.DBS_SL_G4;
    MINT32 pos_DBS_OFST       = rUpperDBS.sigma.bits.DBS_OFST;
    MINT32 pos_DBS_SL       = rUpperDBS.sigma.bits.DBS_SL;
    MINT32 pos_DBS_BIAS_Y0       = rUpperDBS.bstbl_0.bits.DBS_BIAS_Y0;
    MINT32 pos_DBS_BIAS_Y1       = rUpperDBS.bstbl_0.bits.DBS_BIAS_Y1;
    MINT32 pos_DBS_BIAS_Y2       = rUpperDBS.bstbl_0.bits.DBS_BIAS_Y2;
    MINT32 pos_DBS_BIAS_Y3       = rUpperDBS.bstbl_0.bits.DBS_BIAS_Y3;
    MINT32 pos_DBS_BIAS_Y4       = rUpperDBS.bstbl_1.bits.DBS_BIAS_Y4;
    MINT32 pos_DBS_BIAS_Y5       = rUpperDBS.bstbl_1.bits.DBS_BIAS_Y5;
    MINT32 pos_DBS_BIAS_Y6       = rUpperDBS.bstbl_1.bits.DBS_BIAS_Y6;
    MINT32 pos_DBS_BIAS_Y7       = rUpperDBS.bstbl_1.bits.DBS_BIAS_Y7;
    MINT32 pos_DBS_BIAS_Y8       = rUpperDBS.bstbl_2.bits.DBS_BIAS_Y8;
    MINT32 pos_DBS_BIAS_Y9       = rUpperDBS.bstbl_2.bits.DBS_BIAS_Y9;
    MINT32 pos_DBS_BIAS_Y10       = rUpperDBS.bstbl_2.bits.DBS_BIAS_Y10;
    MINT32 pos_DBS_BIAS_Y11       = rUpperDBS.bstbl_2.bits.DBS_BIAS_Y11;
    MINT32 pos_DBS_BIAS_Y12       = rUpperDBS.bstbl_3.bits.DBS_BIAS_Y12;
    MINT32 pos_DBS_BIAS_Y13       = rUpperDBS.bstbl_3.bits.DBS_BIAS_Y13;
    MINT32 pos_DBS_BIAS_Y14       = rUpperDBS.bstbl_3.bits.DBS_BIAS_Y14;
    MINT32 pos_DBS_SL_EN       = rUpperDBS.ctl.bits.DBS_SL_EN;
    MINT32 pos_DBS_LE_INV_CTL       = rUpperDBS.ctl.bits.DBS_LE_INV_CTL;
    MINT32 pos_DBS_EDGE       = rUpperDBS.ctl.bits.DBS_EDGE;
    MINT32 pos_DBS_MUL_B       = rUpperDBS.sigma_2.bits.DBS_MUL_B;
    MINT32 pos_DBS_MUL_GB       = rUpperDBS.sigma_2.bits.DBS_MUL_GB;
    MINT32 pos_DBS_MUL_GR       = rUpperDBS.sigma_2.bits.DBS_MUL_GR;
    MINT32 pos_DBS_MUL_R       = rUpperDBS.sigma_2.bits.DBS_MUL_R;
    MINT32 pos_DBS_YGN_B       = rUpperDBS.ygn.bits.DBS_YGN_B;
    MINT32 pos_DBS_YGN_GB       = rUpperDBS.ygn.bits.DBS_YGN_GB;
    MINT32 pos_DBS_YGN_GR       = rUpperDBS.ygn.bits.DBS_YGN_GR;
    MINT32 pos_DBS_YGN_R       = rUpperDBS.ygn.bits.DBS_YGN_R;
    MINT32 pos_DBS_SL_Y1       = rUpperDBS.sl_y12.bits.DBS_SL_Y1;
    MINT32 pos_DBS_SL_Y2       = rUpperDBS.sl_y12.bits.DBS_SL_Y2;
    MINT32 pos_DBS_SL_Y3       = rUpperDBS.sl_y34.bits.DBS_SL_Y3;
    MINT32 pos_DBS_SL_Y4       = rUpperDBS.sl_y34.bits.DBS_SL_Y4;
    MINT32 pos_DBS_SL_G1       = rUpperDBS.sl_g12.bits.DBS_SL_G1;
    MINT32 pos_DBS_SL_G2       = rUpperDBS.sl_g12.bits.DBS_SL_G2;
    MINT32 pos_DBS_SL_G3       = rUpperDBS.sl_g34.bits.DBS_SL_G3;
    MINT32 pos_DBS_SL_G4       = rUpperDBS.sl_g34.bits.DBS_SL_G4;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 DBS_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_OFST, pos_DBS_OFST, 0);
    MINT32 DBS_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL, pos_DBS_SL, 0);
    MINT32 DBS_BIAS_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y0, pos_DBS_BIAS_Y0, 0);
    MINT32 DBS_BIAS_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y1, pos_DBS_BIAS_Y1, 0);
    MINT32 DBS_BIAS_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y2, pos_DBS_BIAS_Y2, 0);
    MINT32 DBS_BIAS_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y3, pos_DBS_BIAS_Y3, 0);
    MINT32 DBS_BIAS_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y4, pos_DBS_BIAS_Y4, 0);
    MINT32 DBS_BIAS_Y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y5, pos_DBS_BIAS_Y5, 0);
    MINT32 DBS_BIAS_Y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y6, pos_DBS_BIAS_Y6, 0);
    MINT32 DBS_BIAS_Y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y7, pos_DBS_BIAS_Y7, 0);
    MINT32 DBS_BIAS_Y8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y8, pos_DBS_BIAS_Y8, 0);
    MINT32 DBS_BIAS_Y9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y9, pos_DBS_BIAS_Y9, 0);
    MINT32 DBS_BIAS_Y10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y10, pos_DBS_BIAS_Y10, 0);
    MINT32 DBS_BIAS_Y11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y11, pos_DBS_BIAS_Y11, 0);
    MINT32 DBS_BIAS_Y12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y12, pos_DBS_BIAS_Y12, 0);
    MINT32 DBS_BIAS_Y13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y13, pos_DBS_BIAS_Y13, 0);
    MINT32 DBS_BIAS_Y14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_BIAS_Y14, pos_DBS_BIAS_Y14, 0);
    MINT32 DBS_SL_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_EN, pos_DBS_SL_EN, 0);
    MINT32 DBS_LE_INV_CTL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_LE_INV_CTL, pos_DBS_LE_INV_CTL, 0);
    MINT32 DBS_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_EDGE, pos_DBS_EDGE, 0);
    MINT32 DBS_MUL_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_MUL_B, pos_DBS_MUL_B, 0);
    MINT32 DBS_MUL_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_MUL_GB, pos_DBS_MUL_GB, 0);
    MINT32 DBS_MUL_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_MUL_GR, pos_DBS_MUL_GR, 0);
    MINT32 DBS_MUL_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_MUL_R, pos_DBS_MUL_R, 0);
    MINT32 DBS_YGN_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_YGN_B, pos_DBS_YGN_B, 0);
    MINT32 DBS_YGN_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_YGN_GB, pos_DBS_YGN_GB, 0);
    MINT32 DBS_YGN_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_YGN_GR, pos_DBS_YGN_GR, 0);
    MINT32 DBS_YGN_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_YGN_R, pos_DBS_YGN_R, 0);
    MINT32 DBS_SL_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_Y1, pos_DBS_SL_Y1, 0);
    MINT32 DBS_SL_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_Y2, pos_DBS_SL_Y2, 0);
    MINT32 DBS_SL_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_Y3, pos_DBS_SL_Y3, 0);
    MINT32 DBS_SL_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_Y4, pos_DBS_SL_Y4, 0);
    MINT32 DBS_SL_G1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_G1, pos_DBS_SL_G1, 0);
    MINT32 DBS_SL_G2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_G2, pos_DBS_SL_G2, 0);
    MINT32 DBS_SL_G3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_G3, pos_DBS_SL_G3, 0);
    MINT32 DBS_SL_G4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DBS_SL_G4, pos_DBS_SL_G4, 0);


    // interpolation result assignment
    rSmoothDBS.sigma.bits.DBS_OFST       = DBS_OFST;
    rSmoothDBS.sigma.bits.DBS_SL       = DBS_SL;
    rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y0       = DBS_BIAS_Y0;
    rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y1       = DBS_BIAS_Y1;
    rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y2       = DBS_BIAS_Y2;
    rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y3       = DBS_BIAS_Y3;
    rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y4       = DBS_BIAS_Y4;
    rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y5       = DBS_BIAS_Y5;
    rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y6       = DBS_BIAS_Y6;
    rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y7       = DBS_BIAS_Y7;
    rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y8       = DBS_BIAS_Y8;
    rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y9       = DBS_BIAS_Y9;
    rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y10       = DBS_BIAS_Y10;
    rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y11       = DBS_BIAS_Y11;
    rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y12       = DBS_BIAS_Y12;
    rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y13       = DBS_BIAS_Y13;
    rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y14       = DBS_BIAS_Y14;
    rSmoothDBS.ctl.bits.DBS_SL_EN       = DBS_SL_EN;
    rSmoothDBS.ctl.bits.DBS_LE_INV_CTL       = DBS_LE_INV_CTL;
    rSmoothDBS.ctl.bits.DBS_EDGE       = DBS_EDGE;
    rSmoothDBS.sigma_2.bits.DBS_MUL_B       = DBS_MUL_B;
    rSmoothDBS.sigma_2.bits.DBS_MUL_GB       = DBS_MUL_GB;
    rSmoothDBS.sigma_2.bits.DBS_MUL_GR       = DBS_MUL_GR;
    rSmoothDBS.sigma_2.bits.DBS_MUL_R       = DBS_MUL_R;
    rSmoothDBS.ygn.bits.DBS_YGN_B       = DBS_YGN_B;
    rSmoothDBS.ygn.bits.DBS_YGN_GB       = DBS_YGN_GB;
    rSmoothDBS.ygn.bits.DBS_YGN_GR       = DBS_YGN_GR;
    rSmoothDBS.ygn.bits.DBS_YGN_R       = DBS_YGN_R;
    rSmoothDBS.sl_y12.bits.DBS_SL_Y1       = DBS_SL_Y1;
    rSmoothDBS.sl_y12.bits.DBS_SL_Y2       = DBS_SL_Y2;
    rSmoothDBS.sl_y34.bits.DBS_SL_Y3       = DBS_SL_Y3;
    rSmoothDBS.sl_y34.bits.DBS_SL_Y4       = DBS_SL_Y4;
    rSmoothDBS.sl_g12.bits.DBS_SL_G1       = DBS_SL_G1;
    rSmoothDBS.sl_g12.bits.DBS_SL_G2       = DBS_SL_G2;
    rSmoothDBS.sl_g34.bits.DBS_SL_G3       = DBS_SL_G3;
    rSmoothDBS.sl_g34.bits.DBS_SL_G4       = DBS_SL_G4;


    // logging
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_OFST       = %d, %d, %d", rLowerDBS.sigma.bits.DBS_OFST, rSmoothDBS.sigma.bits.DBS_OFST, rUpperDBS.sigma.bits.DBS_OFST);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL       = %d, %d, %d", rLowerDBS.sigma.bits.DBS_SL, rSmoothDBS.sigma.bits.DBS_SL, rUpperDBS.sigma.bits.DBS_SL);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y0       = %d, %d, %d", rLowerDBS.bstbl_0.bits.DBS_BIAS_Y0, rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y0, rUpperDBS.bstbl_0.bits.DBS_BIAS_Y0);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y1       = %d, %d, %d", rLowerDBS.bstbl_0.bits.DBS_BIAS_Y1, rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y1, rUpperDBS.bstbl_0.bits.DBS_BIAS_Y1);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y2       = %d, %d, %d", rLowerDBS.bstbl_0.bits.DBS_BIAS_Y2, rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y2, rUpperDBS.bstbl_0.bits.DBS_BIAS_Y2);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y3       = %d, %d, %d", rLowerDBS.bstbl_0.bits.DBS_BIAS_Y3, rSmoothDBS.bstbl_0.bits.DBS_BIAS_Y3, rUpperDBS.bstbl_0.bits.DBS_BIAS_Y3);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y4       = %d, %d, %d", rLowerDBS.bstbl_1.bits.DBS_BIAS_Y4, rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y4, rUpperDBS.bstbl_1.bits.DBS_BIAS_Y4);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y5       = %d, %d, %d", rLowerDBS.bstbl_1.bits.DBS_BIAS_Y5, rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y5, rUpperDBS.bstbl_1.bits.DBS_BIAS_Y5);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y6       = %d, %d, %d", rLowerDBS.bstbl_1.bits.DBS_BIAS_Y6, rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y6, rUpperDBS.bstbl_1.bits.DBS_BIAS_Y6);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y7       = %d, %d, %d", rLowerDBS.bstbl_1.bits.DBS_BIAS_Y7, rSmoothDBS.bstbl_1.bits.DBS_BIAS_Y7, rUpperDBS.bstbl_1.bits.DBS_BIAS_Y7);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y8       = %d, %d, %d", rLowerDBS.bstbl_2.bits.DBS_BIAS_Y8, rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y8, rUpperDBS.bstbl_2.bits.DBS_BIAS_Y8);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y9       = %d, %d, %d", rLowerDBS.bstbl_2.bits.DBS_BIAS_Y9, rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y9, rUpperDBS.bstbl_2.bits.DBS_BIAS_Y9);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y10       = %d, %d, %d", rLowerDBS.bstbl_2.bits.DBS_BIAS_Y10, rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y10, rUpperDBS.bstbl_2.bits.DBS_BIAS_Y10);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y11       = %d, %d, %d", rLowerDBS.bstbl_2.bits.DBS_BIAS_Y11, rSmoothDBS.bstbl_2.bits.DBS_BIAS_Y11, rUpperDBS.bstbl_2.bits.DBS_BIAS_Y11);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y12       = %d, %d, %d", rLowerDBS.bstbl_3.bits.DBS_BIAS_Y12, rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y12, rUpperDBS.bstbl_3.bits.DBS_BIAS_Y12);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y13       = %d, %d, %d", rLowerDBS.bstbl_3.bits.DBS_BIAS_Y13, rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y13, rUpperDBS.bstbl_3.bits.DBS_BIAS_Y13);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_BIAS_Y14       = %d, %d, %d", rLowerDBS.bstbl_3.bits.DBS_BIAS_Y14, rSmoothDBS.bstbl_3.bits.DBS_BIAS_Y14, rUpperDBS.bstbl_3.bits.DBS_BIAS_Y14);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_EN       = %d, %d, %d", rLowerDBS.ctl.bits.DBS_SL_EN, rSmoothDBS.ctl.bits.DBS_SL_EN, rUpperDBS.ctl.bits.DBS_SL_EN);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_LE_INV_CTL       = %d, %d, %d", rLowerDBS.ctl.bits.DBS_LE_INV_CTL, rSmoothDBS.ctl.bits.DBS_LE_INV_CTL, rUpperDBS.ctl.bits.DBS_LE_INV_CTL);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_EDGE       = %d, %d, %d", rLowerDBS.ctl.bits.DBS_EDGE, rSmoothDBS.ctl.bits.DBS_EDGE, rUpperDBS.ctl.bits.DBS_EDGE);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_MUL_B       = %d, %d, %d", rLowerDBS.sigma_2.bits.DBS_MUL_B, rSmoothDBS.sigma_2.bits.DBS_MUL_B, rUpperDBS.sigma_2.bits.DBS_MUL_B);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_MUL_GB       = %d, %d, %d", rLowerDBS.sigma_2.bits.DBS_MUL_GB, rSmoothDBS.sigma_2.bits.DBS_MUL_GB, rUpperDBS.sigma_2.bits.DBS_MUL_GB);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_MUL_GR       = %d, %d, %d", rLowerDBS.sigma_2.bits.DBS_MUL_GR, rSmoothDBS.sigma_2.bits.DBS_MUL_GR, rUpperDBS.sigma_2.bits.DBS_MUL_GR);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_MUL_R       = %d, %d, %d", rLowerDBS.sigma_2.bits.DBS_MUL_R, rSmoothDBS.sigma_2.bits.DBS_MUL_R, rUpperDBS.sigma_2.bits.DBS_MUL_R);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_YGN_B       = %d, %d, %d", rLowerDBS.ygn.bits.DBS_YGN_B, rSmoothDBS.ygn.bits.DBS_YGN_B, rUpperDBS.ygn.bits.DBS_YGN_B);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_YGN_GB       = %d, %d, %d", rLowerDBS.ygn.bits.DBS_YGN_GB, rSmoothDBS.ygn.bits.DBS_YGN_GB, rUpperDBS.ygn.bits.DBS_YGN_GB);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_YGN_GR       = %d, %d, %d", rLowerDBS.ygn.bits.DBS_YGN_GR, rSmoothDBS.ygn.bits.DBS_YGN_GR, rUpperDBS.ygn.bits.DBS_YGN_GR);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_YGN_R       = %d, %d, %d", rLowerDBS.ygn.bits.DBS_YGN_R, rSmoothDBS.ygn.bits.DBS_YGN_R, rUpperDBS.ygn.bits.DBS_YGN_R);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_Y1       = %d, %d, %d", rLowerDBS.sl_y12.bits.DBS_SL_Y1, rSmoothDBS.sl_y12.bits.DBS_SL_Y1, rUpperDBS.sl_y12.bits.DBS_SL_Y1);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_Y2       = %d, %d, %d", rLowerDBS.sl_y12.bits.DBS_SL_Y2, rSmoothDBS.sl_y12.bits.DBS_SL_Y2, rUpperDBS.sl_y12.bits.DBS_SL_Y2);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_Y3       = %d, %d, %d", rLowerDBS.sl_y34.bits.DBS_SL_Y3, rSmoothDBS.sl_y34.bits.DBS_SL_Y3, rUpperDBS.sl_y34.bits.DBS_SL_Y3);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_Y4       = %d, %d, %d", rLowerDBS.sl_y34.bits.DBS_SL_Y4, rSmoothDBS.sl_y34.bits.DBS_SL_Y4, rUpperDBS.sl_y34.bits.DBS_SL_Y4);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_G1       = %d, %d, %d", rLowerDBS.sl_g12.bits.DBS_SL_G1, rSmoothDBS.sl_g12.bits.DBS_SL_G1, rUpperDBS.sl_g12.bits.DBS_SL_G1);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_G2       = %d, %d, %d", rLowerDBS.sl_g12.bits.DBS_SL_G2, rSmoothDBS.sl_g12.bits.DBS_SL_G2, rUpperDBS.sl_g12.bits.DBS_SL_G2);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_G3       = %d, %d, %d", rLowerDBS.sl_g34.bits.DBS_SL_G3, rSmoothDBS.sl_g34.bits.DBS_SL_G3, rUpperDBS.sl_g34.bits.DBS_SL_G3);
    INTER_LOG_IF(bSmoothDBSDebug, "[L,S,U]DBS_SL_G4       = %d, %d, %d", rLowerDBS.sl_g34.bits.DBS_SL_G4, rSmoothDBS.sl_g34.bits.DBS_SL_G4, rUpperDBS.sl_g34.bits.DBS_SL_G4);

}
MVOID SmoothEE(ISP_NVRAM_EE_INT_T const& rParam,   // EE settings
                ISP_NVRAM_EE_T& rSmoothEE)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ee.enable", value, "0");
    MBOOL bSmoothEEDebug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothEEDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothEEDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 SEEE_H1_DI_BLND_OFST_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST;
    MINT32 SEEE_H2_DI_BLND_OFST_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST;
    MINT32 SEEE_H3_DI_BLND_OFST_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST;
    MINT32 SEEE_H1_DI_BLND_SL_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL;
    MINT32 SEEE_H2_DI_BLND_SL_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL;
    MINT32 SEEE_H3_DI_BLND_SL_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL;
    MINT32 SEEE_HX_ISO_BLND_RAT_L_L		= rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT;
    MINT32 SEEE_H1_GN_L_L		= rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H1_GN;
    MINT32 SEEE_H2_GN_L_L		= rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H2_GN;
    MINT32 SEEE_H3_GN_L_L		= rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H3_GN;
    MINT32 SEEE_FLT_CORE_TH_L_L		= rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_FLT_CORE_TH;
    MINT32 SEEE_H1_FLT_CORE_TH_L_L		= rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH;
    MINT32 SEEE_H2_FLT_CORE_TH_L_L		= rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH;
    MINT32 SEEE_H3_FLT_CORE_TH_L_L		= rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH;
    MINT32 SEEE_LUMA_MOD_Y0_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0;
    MINT32 SEEE_LUMA_MOD_Y1_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1;
    MINT32 SEEE_LUMA_MOD_Y2_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2;
    MINT32 SEEE_LUMA_MOD_Y3_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3;
    MINT32 SEEE_LUMA_MOD_Y4_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4;
    MINT32 SEEE_LUMA_MOD_Y5_L_L		= rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5;
    MINT32 SEEE_LUMA_MOD_Y6_L_L		= rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6;
    MINT32 SEEE_SLNK_GN_Y1_L_L		= rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1;
    MINT32 SEEE_SLNK_GN_Y2_L_L		= rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2;
    MINT32 SEEE_RESP_SLNK_GN_RAT_L_L		= rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT;
    MINT32 SEEE_LUMA_MAXI_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MAXI;
    MINT32 SEEE_LUMA_MINI_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MINI;
    MINT32 SEEE_LUMA_CNTST_LV_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV;
    MINT32 SEEE_LUMA_LMT_DIFF_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF;
    MINT32 SEEE_CHR_MAXI_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MAXI;
    MINT32 SEEE_CHR_MINI_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MINI;
    MINT32 SEEE_CHR_CNTST_LV_L_L		= rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV;
    MINT32 SEEE_GLUT_X1_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_X1;
    MINT32 SEEE_GLUT_X2_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_X2;
    MINT32 SEEE_GLUT_X3_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_X3;
    MINT32 SEEE_GLUT_X4_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_X4;
    MINT32 SEEE_GLUT_Y1_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1;
    MINT32 SEEE_GLUT_Y2_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2;
    MINT32 SEEE_GLUT_Y3_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3;
    MINT32 SEEE_GLUT_Y4_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4;
    MINT32 SEEE_GLUT_TH_OVR_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR;
    MINT32 SEEE_GLUT_TH_UND_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND;
    MINT32 SEEE_GLUT_TH_MIN_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN;
    MINT32 SEEE_GLUT_SL_DEC_Y_L_L		= rParam.rLowerIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y;
    MINT32 SEEE_DOT_TH_L_L		= rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_TH;
    MINT32 SEEE_DOT_REDUC_AMNT_L_L		= rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT;
    MINT32 SEEE_OVRSH_CLIP_STR_L_L		= rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR;
    MINT32 SEEE_RESP_SMO_STR_L_L		= rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR;
    MINT32 SEEE_RESP_CLIP_LUMA_UPB_L_L		= rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB;
    MINT32 SEEE_RESP_CLIP_LUMA_LWB_L_L		= rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB;
    MINT32 SEEE_RESP_CLIP_LUMA_SPC_TH_L_L		= rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 SEEE_RESP_CLIP_L_L		= rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP;
    MINT32 SEEE_MASTER_GN_POS_L_L		= rParam.rLowerIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS;
    MINT32 SEEE_MASTER_GN_NEG_L_L		= rParam.rLowerIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG;
    MINT32 SEEE_ST_LB_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_LB;
    MINT32 SEEE_ST_UB_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_UB;
    MINT32 SEEE_ST_OFST_RESP_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP;
    MINT32 SEEE_ST_SL_RESP_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP;
    MINT32 SEEE_ST_OFST_CE_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE;
    MINT32 SEEE_ST_SL_CE_L_L		= rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_CE;
    MINT32 SEEE_CBOOST_EN_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN;
    MINT32 SEEE_CBOOST_GAIN_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN;
    MINT32 SEEE_CBOOST_LMT_L_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L;
    MINT32 SEEE_CBOOST_LMT_U_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U;
    MINT32 SEEE_CBOOST_YOFFSET_SEL_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL;
    MINT32 SEEE_CBOOST_YOFFSET_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET;
    MINT32 SEEE_CBOOST_YCONST_L_L		= rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST;
    MINT32 SEEE_PBC_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN;
    MINT32 SEEE_PBC1_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN;
    MINT32 SEEE_PBC1_RSLOPE_1_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1;
    MINT32 SEEE_PBC1_RSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE;
    MINT32 SEEE_PBC1_RADIUS_R_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R;
    MINT32 SEEE_PBC1_RADIUS_C_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C;
    MINT32 SEEE_PBC1_THETA_C_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C;
    MINT32 SEEE_PBC1_THETA_R_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R;
    MINT32 SEEE_PBC1_TSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE;
    MINT32 SEEE_PBC1_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN;
    MINT32 SEEE_PBC1_CONF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN;
    MINT32 SEEE_PBC1_EDGE_THR_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR;
    MINT32 SEEE_PBC1_EDGE_SLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE;
    MINT32 SEEE_PBC1_EDGE_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN;
    MINT32 SEEE_PBC1_LPF_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN;
    MINT32 SEEE_PBC1_LPF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN;
    MINT32 SEEE_PBC2_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN;
    MINT32 SEEE_PBC2_RSLOPE_1_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1;
    MINT32 SEEE_PBC2_RSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE;
    MINT32 SEEE_PBC2_RADIUS_R_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R;
    MINT32 SEEE_PBC2_RADIUS_C_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C;
    MINT32 SEEE_PBC2_THETA_C_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C;
    MINT32 SEEE_PBC2_THETA_R_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R;
    MINT32 SEEE_PBC2_TSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE;
    MINT32 SEEE_PBC2_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN;
    MINT32 SEEE_PBC2_CONF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN;
    MINT32 SEEE_PBC2_EDGE_THR_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR;
    MINT32 SEEE_PBC2_EDGE_SLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE;
    MINT32 SEEE_PBC2_EDGE_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN;
    MINT32 SEEE_PBC2_LPF_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN;
    MINT32 SEEE_PBC2_LPF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN;
    MINT32 SEEE_PBC3_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN;
    MINT32 SEEE_PBC3_RSLOPE_1_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1;
    MINT32 SEEE_PBC3_RSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE;
    MINT32 SEEE_PBC3_RADIUS_R_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R;
    MINT32 SEEE_PBC3_RADIUS_C_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C;
    MINT32 SEEE_PBC3_THETA_C_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C;
    MINT32 SEEE_PBC3_THETA_R_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R;
    MINT32 SEEE_PBC3_TSLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE;
    MINT32 SEEE_PBC3_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN;
    MINT32 SEEE_PBC3_CONF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN;
    MINT32 SEEE_PBC3_EDGE_THR_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR;
    MINT32 SEEE_PBC3_EDGE_SLOPE_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE;
    MINT32 SEEE_PBC3_EDGE_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN;
    MINT32 SEEE_PBC3_LPF_EN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN;
    MINT32 SEEE_PBC3_LPF_GAIN_L_L		= rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN;
    MINT32 SEEE_GLUT_LINK_EN_L_L		= rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN;

    MINT32 SEEE_H1_DI_BLND_OFST_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST;
    MINT32 SEEE_H2_DI_BLND_OFST_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST;
    MINT32 SEEE_H3_DI_BLND_OFST_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST;
    MINT32 SEEE_H1_DI_BLND_SL_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL;
    MINT32 SEEE_H2_DI_BLND_SL_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL;
    MINT32 SEEE_H3_DI_BLND_SL_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL;
    MINT32 SEEE_HX_ISO_BLND_RAT_L_U		= rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT;
    MINT32 SEEE_H1_GN_L_U		= rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H1_GN;
    MINT32 SEEE_H2_GN_L_U		= rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H2_GN;
    MINT32 SEEE_H3_GN_L_U		= rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H3_GN;
    MINT32 SEEE_FLT_CORE_TH_L_U		= rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_FLT_CORE_TH;
    MINT32 SEEE_H1_FLT_CORE_TH_L_U		= rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH;
    MINT32 SEEE_H2_FLT_CORE_TH_L_U		= rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH;
    MINT32 SEEE_H3_FLT_CORE_TH_L_U		= rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH;
    MINT32 SEEE_LUMA_MOD_Y0_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0;
    MINT32 SEEE_LUMA_MOD_Y1_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1;
    MINT32 SEEE_LUMA_MOD_Y2_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2;
    MINT32 SEEE_LUMA_MOD_Y3_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3;
    MINT32 SEEE_LUMA_MOD_Y4_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4;
    MINT32 SEEE_LUMA_MOD_Y5_L_U		= rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5;
    MINT32 SEEE_LUMA_MOD_Y6_L_U		= rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6;
    MINT32 SEEE_SLNK_GN_Y1_L_U		= rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1;
    MINT32 SEEE_SLNK_GN_Y2_L_U		= rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2;
    MINT32 SEEE_RESP_SLNK_GN_RAT_L_U		= rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT;
    MINT32 SEEE_LUMA_MAXI_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MAXI;
    MINT32 SEEE_LUMA_MINI_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MINI;
    MINT32 SEEE_LUMA_CNTST_LV_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV;
    MINT32 SEEE_LUMA_LMT_DIFF_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF;
    MINT32 SEEE_CHR_MAXI_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MAXI;
    MINT32 SEEE_CHR_MINI_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MINI;
    MINT32 SEEE_CHR_CNTST_LV_L_U		= rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV;
    MINT32 SEEE_GLUT_X1_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_X1;
    MINT32 SEEE_GLUT_X2_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_X2;
    MINT32 SEEE_GLUT_X3_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_X3;
    MINT32 SEEE_GLUT_X4_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_X4;
    MINT32 SEEE_GLUT_Y1_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1;
    MINT32 SEEE_GLUT_Y2_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2;
    MINT32 SEEE_GLUT_Y3_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3;
    MINT32 SEEE_GLUT_Y4_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4;
    MINT32 SEEE_GLUT_TH_OVR_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR;
    MINT32 SEEE_GLUT_TH_UND_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND;
    MINT32 SEEE_GLUT_TH_MIN_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN;
    MINT32 SEEE_GLUT_SL_DEC_Y_L_U		= rParam.rLowerIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y;
    MINT32 SEEE_DOT_TH_L_U		= rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_TH;
    MINT32 SEEE_DOT_REDUC_AMNT_L_U		= rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT;
    MINT32 SEEE_OVRSH_CLIP_STR_L_U		= rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR;
    MINT32 SEEE_RESP_SMO_STR_L_U		= rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR;
    MINT32 SEEE_RESP_CLIP_LUMA_UPB_L_U		= rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB;
    MINT32 SEEE_RESP_CLIP_LUMA_LWB_L_U		= rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB;
    MINT32 SEEE_RESP_CLIP_LUMA_SPC_TH_L_U		= rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 SEEE_RESP_CLIP_L_U		= rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP;
    MINT32 SEEE_MASTER_GN_POS_L_U		= rParam.rLowerIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS;
    MINT32 SEEE_MASTER_GN_NEG_L_U		= rParam.rLowerIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG;
    MINT32 SEEE_ST_LB_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_LB;
    MINT32 SEEE_ST_UB_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_UB;
    MINT32 SEEE_ST_OFST_RESP_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP;
    MINT32 SEEE_ST_SL_RESP_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP;
    MINT32 SEEE_ST_OFST_CE_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE;
    MINT32 SEEE_ST_SL_CE_L_U		= rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_CE;
    MINT32 SEEE_CBOOST_EN_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN;
    MINT32 SEEE_CBOOST_GAIN_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN;
    MINT32 SEEE_CBOOST_LMT_L_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L;
    MINT32 SEEE_CBOOST_LMT_U_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U;
    MINT32 SEEE_CBOOST_YOFFSET_SEL_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL;
    MINT32 SEEE_CBOOST_YOFFSET_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET;
    MINT32 SEEE_CBOOST_YCONST_L_U		= rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST;
    MINT32 SEEE_PBC_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN;
    MINT32 SEEE_PBC1_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN;
    MINT32 SEEE_PBC1_RSLOPE_1_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1;
    MINT32 SEEE_PBC1_RSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE;
    MINT32 SEEE_PBC1_RADIUS_R_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R;
    MINT32 SEEE_PBC1_RADIUS_C_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C;
    MINT32 SEEE_PBC1_THETA_C_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C;
    MINT32 SEEE_PBC1_THETA_R_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R;
    MINT32 SEEE_PBC1_TSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE;
    MINT32 SEEE_PBC1_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN;
    MINT32 SEEE_PBC1_CONF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN;
    MINT32 SEEE_PBC1_EDGE_THR_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR;
    MINT32 SEEE_PBC1_EDGE_SLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE;
    MINT32 SEEE_PBC1_EDGE_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN;
    MINT32 SEEE_PBC1_LPF_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN;
    MINT32 SEEE_PBC1_LPF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN;
    MINT32 SEEE_PBC2_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN;
    MINT32 SEEE_PBC2_RSLOPE_1_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1;
    MINT32 SEEE_PBC2_RSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE;
    MINT32 SEEE_PBC2_RADIUS_R_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R;
    MINT32 SEEE_PBC2_RADIUS_C_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C;
    MINT32 SEEE_PBC2_THETA_C_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C;
    MINT32 SEEE_PBC2_THETA_R_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R;
    MINT32 SEEE_PBC2_TSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE;
    MINT32 SEEE_PBC2_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN;
    MINT32 SEEE_PBC2_CONF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN;
    MINT32 SEEE_PBC2_EDGE_THR_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR;
    MINT32 SEEE_PBC2_EDGE_SLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE;
    MINT32 SEEE_PBC2_EDGE_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN;
    MINT32 SEEE_PBC2_LPF_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN;
    MINT32 SEEE_PBC2_LPF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN;
    MINT32 SEEE_PBC3_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN;
    MINT32 SEEE_PBC3_RSLOPE_1_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1;
    MINT32 SEEE_PBC3_RSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE;
    MINT32 SEEE_PBC3_RADIUS_R_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R;
    MINT32 SEEE_PBC3_RADIUS_C_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C;
    MINT32 SEEE_PBC3_THETA_C_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C;
    MINT32 SEEE_PBC3_THETA_R_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R;
    MINT32 SEEE_PBC3_TSLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE;
    MINT32 SEEE_PBC3_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN;
    MINT32 SEEE_PBC3_CONF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN;
    MINT32 SEEE_PBC3_EDGE_THR_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR;
    MINT32 SEEE_PBC3_EDGE_SLOPE_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE;
    MINT32 SEEE_PBC3_EDGE_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN;
    MINT32 SEEE_PBC3_LPF_EN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN;
    MINT32 SEEE_PBC3_LPF_GAIN_L_U		= rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN;
    MINT32 SEEE_GLUT_LINK_EN_L_U		= rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN;

    MINT32 SEEE_H1_DI_BLND_OFST_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST;
    MINT32 SEEE_H2_DI_BLND_OFST_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST;
    MINT32 SEEE_H3_DI_BLND_OFST_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST;
    MINT32 SEEE_H1_DI_BLND_SL_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL;
    MINT32 SEEE_H2_DI_BLND_SL_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL;
    MINT32 SEEE_H3_DI_BLND_SL_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL;
    MINT32 SEEE_HX_ISO_BLND_RAT_U_L		= rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT;
    MINT32 SEEE_H1_GN_U_L		= rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H1_GN;
    MINT32 SEEE_H2_GN_U_L		= rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H2_GN;
    MINT32 SEEE_H3_GN_U_L		= rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H3_GN;
    MINT32 SEEE_FLT_CORE_TH_U_L		= rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_FLT_CORE_TH;
    MINT32 SEEE_H1_FLT_CORE_TH_U_L		= rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH;
    MINT32 SEEE_H2_FLT_CORE_TH_U_L		= rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH;
    MINT32 SEEE_H3_FLT_CORE_TH_U_L		= rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH;
    MINT32 SEEE_LUMA_MOD_Y0_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0;
    MINT32 SEEE_LUMA_MOD_Y1_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1;
    MINT32 SEEE_LUMA_MOD_Y2_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2;
    MINT32 SEEE_LUMA_MOD_Y3_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3;
    MINT32 SEEE_LUMA_MOD_Y4_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4;
    MINT32 SEEE_LUMA_MOD_Y5_U_L		= rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5;
    MINT32 SEEE_LUMA_MOD_Y6_U_L		= rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6;
    MINT32 SEEE_SLNK_GN_Y1_U_L		= rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1;
    MINT32 SEEE_SLNK_GN_Y2_U_L		= rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2;
    MINT32 SEEE_RESP_SLNK_GN_RAT_U_L		= rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT;
    MINT32 SEEE_LUMA_MAXI_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MAXI;
    MINT32 SEEE_LUMA_MINI_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MINI;
    MINT32 SEEE_LUMA_CNTST_LV_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV;
    MINT32 SEEE_LUMA_LMT_DIFF_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF;
    MINT32 SEEE_CHR_MAXI_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MAXI;
    MINT32 SEEE_CHR_MINI_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MINI;
    MINT32 SEEE_CHR_CNTST_LV_U_L		= rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV;
    MINT32 SEEE_GLUT_X1_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_X1;
    MINT32 SEEE_GLUT_X2_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_X2;
    MINT32 SEEE_GLUT_X3_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_X3;
    MINT32 SEEE_GLUT_X4_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_X4;
    MINT32 SEEE_GLUT_Y1_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1;
    MINT32 SEEE_GLUT_Y2_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2;
    MINT32 SEEE_GLUT_Y3_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3;
    MINT32 SEEE_GLUT_Y4_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4;
    MINT32 SEEE_GLUT_TH_OVR_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR;
    MINT32 SEEE_GLUT_TH_UND_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND;
    MINT32 SEEE_GLUT_TH_MIN_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN;
    MINT32 SEEE_GLUT_SL_DEC_Y_U_L		= rParam.rUpperIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y;
    MINT32 SEEE_DOT_TH_U_L		= rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_TH;
    MINT32 SEEE_DOT_REDUC_AMNT_U_L		= rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT;
    MINT32 SEEE_OVRSH_CLIP_STR_U_L		= rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR;
    MINT32 SEEE_RESP_SMO_STR_U_L		= rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR;
    MINT32 SEEE_RESP_CLIP_LUMA_UPB_U_L		= rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB;
    MINT32 SEEE_RESP_CLIP_LUMA_LWB_U_L		= rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB;
    MINT32 SEEE_RESP_CLIP_LUMA_SPC_TH_U_L		= rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 SEEE_RESP_CLIP_U_L		= rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP;
    MINT32 SEEE_MASTER_GN_POS_U_L		= rParam.rUpperIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS;
    MINT32 SEEE_MASTER_GN_NEG_U_L		= rParam.rUpperIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG;
    MINT32 SEEE_ST_LB_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_LB;
    MINT32 SEEE_ST_UB_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_UB;
    MINT32 SEEE_ST_OFST_RESP_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP;
    MINT32 SEEE_ST_SL_RESP_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP;
    MINT32 SEEE_ST_OFST_CE_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE;
    MINT32 SEEE_ST_SL_CE_U_L		= rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_CE;
    MINT32 SEEE_CBOOST_EN_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN;
    MINT32 SEEE_CBOOST_GAIN_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN;
    MINT32 SEEE_CBOOST_LMT_L_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L;
    MINT32 SEEE_CBOOST_LMT_U_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U;
    MINT32 SEEE_CBOOST_YOFFSET_SEL_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL;
    MINT32 SEEE_CBOOST_YOFFSET_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET;
    MINT32 SEEE_CBOOST_YCONST_U_L		= rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST;
    MINT32 SEEE_PBC_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN;
    MINT32 SEEE_PBC1_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN;
    MINT32 SEEE_PBC1_RSLOPE_1_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1;
    MINT32 SEEE_PBC1_RSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE;
    MINT32 SEEE_PBC1_RADIUS_R_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R;
    MINT32 SEEE_PBC1_RADIUS_C_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C;
    MINT32 SEEE_PBC1_THETA_C_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C;
    MINT32 SEEE_PBC1_THETA_R_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R;
    MINT32 SEEE_PBC1_TSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE;
    MINT32 SEEE_PBC1_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN;
    MINT32 SEEE_PBC1_CONF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN;
    MINT32 SEEE_PBC1_EDGE_THR_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR;
    MINT32 SEEE_PBC1_EDGE_SLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE;
    MINT32 SEEE_PBC1_EDGE_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN;
    MINT32 SEEE_PBC1_LPF_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN;
    MINT32 SEEE_PBC1_LPF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN;
    MINT32 SEEE_PBC2_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN;
    MINT32 SEEE_PBC2_RSLOPE_1_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1;
    MINT32 SEEE_PBC2_RSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE;
    MINT32 SEEE_PBC2_RADIUS_R_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R;
    MINT32 SEEE_PBC2_RADIUS_C_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C;
    MINT32 SEEE_PBC2_THETA_C_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C;
    MINT32 SEEE_PBC2_THETA_R_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R;
    MINT32 SEEE_PBC2_TSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE;
    MINT32 SEEE_PBC2_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN;
    MINT32 SEEE_PBC2_CONF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN;
    MINT32 SEEE_PBC2_EDGE_THR_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR;
    MINT32 SEEE_PBC2_EDGE_SLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE;
    MINT32 SEEE_PBC2_EDGE_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN;
    MINT32 SEEE_PBC2_LPF_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN;
    MINT32 SEEE_PBC2_LPF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN;
    MINT32 SEEE_PBC3_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN;
    MINT32 SEEE_PBC3_RSLOPE_1_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1;
    MINT32 SEEE_PBC3_RSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE;
    MINT32 SEEE_PBC3_RADIUS_R_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R;
    MINT32 SEEE_PBC3_RADIUS_C_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C;
    MINT32 SEEE_PBC3_THETA_C_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C;
    MINT32 SEEE_PBC3_THETA_R_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R;
    MINT32 SEEE_PBC3_TSLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE;
    MINT32 SEEE_PBC3_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN;
    MINT32 SEEE_PBC3_CONF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN;
    MINT32 SEEE_PBC3_EDGE_THR_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR;
    MINT32 SEEE_PBC3_EDGE_SLOPE_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE;
    MINT32 SEEE_PBC3_EDGE_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN;
    MINT32 SEEE_PBC3_LPF_EN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN;
    MINT32 SEEE_PBC3_LPF_GAIN_U_L		= rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN;
    MINT32 SEEE_GLUT_LINK_EN_U_L		= rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN;

    MINT32 SEEE_H1_DI_BLND_OFST_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST;
    MINT32 SEEE_H2_DI_BLND_OFST_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST;
    MINT32 SEEE_H3_DI_BLND_OFST_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST;
    MINT32 SEEE_H1_DI_BLND_SL_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL;
    MINT32 SEEE_H2_DI_BLND_SL_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL;
    MINT32 SEEE_H3_DI_BLND_SL_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL;
    MINT32 SEEE_HX_ISO_BLND_RAT_U_U		= rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT;
    MINT32 SEEE_H1_GN_U_U		= rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H1_GN;
    MINT32 SEEE_H2_GN_U_U		= rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H2_GN;
    MINT32 SEEE_H3_GN_U_U		= rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H3_GN;
    MINT32 SEEE_FLT_CORE_TH_U_U		= rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_FLT_CORE_TH;
    MINT32 SEEE_H1_FLT_CORE_TH_U_U		= rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH;
    MINT32 SEEE_H2_FLT_CORE_TH_U_U		= rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH;
    MINT32 SEEE_H3_FLT_CORE_TH_U_U		= rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH;
    MINT32 SEEE_LUMA_MOD_Y0_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0;
    MINT32 SEEE_LUMA_MOD_Y1_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1;
    MINT32 SEEE_LUMA_MOD_Y2_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2;
    MINT32 SEEE_LUMA_MOD_Y3_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3;
    MINT32 SEEE_LUMA_MOD_Y4_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4;
    MINT32 SEEE_LUMA_MOD_Y5_U_U		= rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5;
    MINT32 SEEE_LUMA_MOD_Y6_U_U		= rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6;
    MINT32 SEEE_SLNK_GN_Y1_U_U		= rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1;
    MINT32 SEEE_SLNK_GN_Y2_U_U		= rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2;
    MINT32 SEEE_RESP_SLNK_GN_RAT_U_U		= rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT;
    MINT32 SEEE_LUMA_MAXI_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MAXI;
    MINT32 SEEE_LUMA_MINI_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MINI;
    MINT32 SEEE_LUMA_CNTST_LV_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV;
    MINT32 SEEE_LUMA_LMT_DIFF_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF;
    MINT32 SEEE_CHR_MAXI_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MAXI;
    MINT32 SEEE_CHR_MINI_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MINI;
    MINT32 SEEE_CHR_CNTST_LV_U_U		= rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV;
    MINT32 SEEE_GLUT_X1_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_X1;
    MINT32 SEEE_GLUT_X2_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_X2;
    MINT32 SEEE_GLUT_X3_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_X3;
    MINT32 SEEE_GLUT_X4_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_X4;
    MINT32 SEEE_GLUT_Y1_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1;
    MINT32 SEEE_GLUT_Y2_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2;
    MINT32 SEEE_GLUT_Y3_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3;
    MINT32 SEEE_GLUT_Y4_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4;
    MINT32 SEEE_GLUT_TH_OVR_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR;
    MINT32 SEEE_GLUT_TH_UND_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND;
    MINT32 SEEE_GLUT_TH_MIN_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN;
    MINT32 SEEE_GLUT_SL_DEC_Y_U_U		= rParam.rUpperIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y;
    MINT32 SEEE_DOT_TH_U_U		= rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_TH;
    MINT32 SEEE_DOT_REDUC_AMNT_U_U		= rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT;
    MINT32 SEEE_OVRSH_CLIP_STR_U_U		= rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR;
    MINT32 SEEE_RESP_SMO_STR_U_U		= rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR;
    MINT32 SEEE_RESP_CLIP_LUMA_UPB_U_U		= rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB;
    MINT32 SEEE_RESP_CLIP_LUMA_LWB_U_U		= rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB;
    MINT32 SEEE_RESP_CLIP_LUMA_SPC_TH_U_U		= rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 SEEE_RESP_CLIP_U_U		= rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP;
    MINT32 SEEE_MASTER_GN_POS_U_U		= rParam.rUpperIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS;
    MINT32 SEEE_MASTER_GN_NEG_U_U		= rParam.rUpperIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG;
    MINT32 SEEE_ST_LB_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_LB;
    MINT32 SEEE_ST_UB_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_UB;
    MINT32 SEEE_ST_OFST_RESP_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP;
    MINT32 SEEE_ST_SL_RESP_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP;
    MINT32 SEEE_ST_OFST_CE_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE;
    MINT32 SEEE_ST_SL_CE_U_U		= rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_CE;
    MINT32 SEEE_CBOOST_EN_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN;
    MINT32 SEEE_CBOOST_GAIN_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN;
    MINT32 SEEE_CBOOST_LMT_L_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L;
    MINT32 SEEE_CBOOST_LMT_U_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U;
    MINT32 SEEE_CBOOST_YOFFSET_SEL_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL;
    MINT32 SEEE_CBOOST_YOFFSET_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET;
    MINT32 SEEE_CBOOST_YCONST_U_U		= rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST;
    MINT32 SEEE_PBC_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN;
    MINT32 SEEE_PBC1_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN;
    MINT32 SEEE_PBC1_RSLOPE_1_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1;
    MINT32 SEEE_PBC1_RSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE;
    MINT32 SEEE_PBC1_RADIUS_R_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R;
    MINT32 SEEE_PBC1_RADIUS_C_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C;
    MINT32 SEEE_PBC1_THETA_C_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C;
    MINT32 SEEE_PBC1_THETA_R_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R;
    MINT32 SEEE_PBC1_TSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE;
    MINT32 SEEE_PBC1_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN;
    MINT32 SEEE_PBC1_CONF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN;
    MINT32 SEEE_PBC1_EDGE_THR_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR;
    MINT32 SEEE_PBC1_EDGE_SLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE;
    MINT32 SEEE_PBC1_EDGE_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN;
    MINT32 SEEE_PBC1_LPF_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN;
    MINT32 SEEE_PBC1_LPF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN;
    MINT32 SEEE_PBC2_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN;
    MINT32 SEEE_PBC2_RSLOPE_1_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1;
    MINT32 SEEE_PBC2_RSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE;
    MINT32 SEEE_PBC2_RADIUS_R_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R;
    MINT32 SEEE_PBC2_RADIUS_C_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C;
    MINT32 SEEE_PBC2_THETA_C_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C;
    MINT32 SEEE_PBC2_THETA_R_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R;
    MINT32 SEEE_PBC2_TSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE;
    MINT32 SEEE_PBC2_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN;
    MINT32 SEEE_PBC2_CONF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN;
    MINT32 SEEE_PBC2_EDGE_THR_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR;
    MINT32 SEEE_PBC2_EDGE_SLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE;
    MINT32 SEEE_PBC2_EDGE_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN;
    MINT32 SEEE_PBC2_LPF_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN;
    MINT32 SEEE_PBC2_LPF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN;
    MINT32 SEEE_PBC3_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN;
    MINT32 SEEE_PBC3_RSLOPE_1_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1;
    MINT32 SEEE_PBC3_RSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE;
    MINT32 SEEE_PBC3_RADIUS_R_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R;
    MINT32 SEEE_PBC3_RADIUS_C_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C;
    MINT32 SEEE_PBC3_THETA_C_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C;
    MINT32 SEEE_PBC3_THETA_R_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R;
    MINT32 SEEE_PBC3_TSLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE;
    MINT32 SEEE_PBC3_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN;
    MINT32 SEEE_PBC3_CONF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN;
    MINT32 SEEE_PBC3_EDGE_THR_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR;
    MINT32 SEEE_PBC3_EDGE_SLOPE_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE;
    MINT32 SEEE_PBC3_EDGE_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN;
    MINT32 SEEE_PBC3_LPF_EN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN;
    MINT32 SEEE_PBC3_LPF_GAIN_U_U		= rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN;
    MINT32 SEEE_GLUT_LINK_EN_U_U		= rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN;


    // interpolation core
    MINT32 SEEE_H1_DI_BLND_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H1_DI_BLND_OFST_L_L, SEEE_H1_DI_BLND_OFST_L_U, SEEE_H1_DI_BLND_OFST_U_L, SEEE_H1_DI_BLND_OFST_U_U, 4);
    MINT32 SEEE_H2_DI_BLND_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H2_DI_BLND_OFST_L_L, SEEE_H2_DI_BLND_OFST_L_U, SEEE_H2_DI_BLND_OFST_U_L, SEEE_H2_DI_BLND_OFST_U_U, 4);
    MINT32 SEEE_H3_DI_BLND_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H3_DI_BLND_OFST_L_L, SEEE_H3_DI_BLND_OFST_L_U, SEEE_H3_DI_BLND_OFST_U_L, SEEE_H3_DI_BLND_OFST_U_U, 4);
    MINT32 SEEE_H1_DI_BLND_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H1_DI_BLND_SL_L_L, SEEE_H1_DI_BLND_SL_L_U, SEEE_H1_DI_BLND_SL_U_L, SEEE_H1_DI_BLND_SL_U_U, 4);
    MINT32 SEEE_H2_DI_BLND_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H2_DI_BLND_SL_L_L, SEEE_H2_DI_BLND_SL_L_U, SEEE_H2_DI_BLND_SL_U_L, SEEE_H2_DI_BLND_SL_U_U, 4);
    MINT32 SEEE_H3_DI_BLND_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H3_DI_BLND_SL_L_L, SEEE_H3_DI_BLND_SL_L_U, SEEE_H3_DI_BLND_SL_U_L, SEEE_H3_DI_BLND_SL_U_U, 4);
    MINT32 SEEE_HX_ISO_BLND_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_HX_ISO_BLND_RAT_L_L, SEEE_HX_ISO_BLND_RAT_L_U, SEEE_HX_ISO_BLND_RAT_U_L, SEEE_HX_ISO_BLND_RAT_U_U, 4);
    MINT32 SEEE_H1_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H1_GN_L_L, SEEE_H1_GN_L_U, SEEE_H1_GN_U_L, SEEE_H1_GN_U_U, 4);
    MINT32 SEEE_H2_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H2_GN_L_L, SEEE_H2_GN_L_U, SEEE_H2_GN_U_L, SEEE_H2_GN_U_U, 4);
    MINT32 SEEE_H3_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H3_GN_L_L, SEEE_H3_GN_L_U, SEEE_H3_GN_U_L, SEEE_H3_GN_U_U, 4);
    MINT32 SEEE_FLT_CORE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_FLT_CORE_TH_L_L, SEEE_FLT_CORE_TH_L_U, SEEE_FLT_CORE_TH_U_L, SEEE_FLT_CORE_TH_U_U, 4);
    MINT32 SEEE_H1_FLT_CORE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H1_FLT_CORE_TH_L_L, SEEE_H1_FLT_CORE_TH_L_U, SEEE_H1_FLT_CORE_TH_U_L, SEEE_H1_FLT_CORE_TH_U_U, 4);
    MINT32 SEEE_H2_FLT_CORE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H2_FLT_CORE_TH_L_L, SEEE_H2_FLT_CORE_TH_L_U, SEEE_H2_FLT_CORE_TH_U_L, SEEE_H2_FLT_CORE_TH_U_U, 4);
    MINT32 SEEE_H3_FLT_CORE_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_H3_FLT_CORE_TH_L_L, SEEE_H3_FLT_CORE_TH_L_U, SEEE_H3_FLT_CORE_TH_U_L, SEEE_H3_FLT_CORE_TH_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y0_L_L, SEEE_LUMA_MOD_Y0_L_U, SEEE_LUMA_MOD_Y0_U_L, SEEE_LUMA_MOD_Y0_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y1_L_L, SEEE_LUMA_MOD_Y1_L_U, SEEE_LUMA_MOD_Y1_U_L, SEEE_LUMA_MOD_Y1_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y2_L_L, SEEE_LUMA_MOD_Y2_L_U, SEEE_LUMA_MOD_Y2_U_L, SEEE_LUMA_MOD_Y2_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y3_L_L, SEEE_LUMA_MOD_Y3_L_U, SEEE_LUMA_MOD_Y3_U_L, SEEE_LUMA_MOD_Y3_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y4_L_L, SEEE_LUMA_MOD_Y4_L_U, SEEE_LUMA_MOD_Y4_U_L, SEEE_LUMA_MOD_Y4_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y5_L_L, SEEE_LUMA_MOD_Y5_L_U, SEEE_LUMA_MOD_Y5_U_L, SEEE_LUMA_MOD_Y5_U_U, 4);
    MINT32 SEEE_LUMA_MOD_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MOD_Y6_L_L, SEEE_LUMA_MOD_Y6_L_U, SEEE_LUMA_MOD_Y6_U_L, SEEE_LUMA_MOD_Y6_U_U, 4);
    MINT32 SEEE_SLNK_GN_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_SLNK_GN_Y1_L_L, SEEE_SLNK_GN_Y1_L_U, SEEE_SLNK_GN_Y1_U_L, SEEE_SLNK_GN_Y1_U_U, 4);
    MINT32 SEEE_SLNK_GN_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_SLNK_GN_Y2_L_L, SEEE_SLNK_GN_Y2_L_U, SEEE_SLNK_GN_Y2_U_L, SEEE_SLNK_GN_Y2_U_U, 4);
    MINT32 SEEE_RESP_SLNK_GN_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_SLNK_GN_RAT_L_L, SEEE_RESP_SLNK_GN_RAT_L_U, SEEE_RESP_SLNK_GN_RAT_U_L, SEEE_RESP_SLNK_GN_RAT_U_U, 4);
    MINT32 SEEE_LUMA_MAXI		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MAXI_L_L, SEEE_LUMA_MAXI_L_U, SEEE_LUMA_MAXI_U_L, SEEE_LUMA_MAXI_U_U, 4);
    MINT32 SEEE_LUMA_MINI		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_MINI_L_L, SEEE_LUMA_MINI_L_U, SEEE_LUMA_MINI_U_L, SEEE_LUMA_MINI_U_U, 4);
    MINT32 SEEE_LUMA_CNTST_LV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_CNTST_LV_L_L, SEEE_LUMA_CNTST_LV_L_U, SEEE_LUMA_CNTST_LV_U_L, SEEE_LUMA_CNTST_LV_U_U, 4);
    MINT32 SEEE_LUMA_LMT_DIFF		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_LUMA_LMT_DIFF_L_L, SEEE_LUMA_LMT_DIFF_L_U, SEEE_LUMA_LMT_DIFF_U_L, SEEE_LUMA_LMT_DIFF_U_U, 4);
    MINT32 SEEE_CHR_MAXI		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CHR_MAXI_L_L, SEEE_CHR_MAXI_L_U, SEEE_CHR_MAXI_U_L, SEEE_CHR_MAXI_U_U, 4);
    MINT32 SEEE_CHR_MINI		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CHR_MINI_L_L, SEEE_CHR_MINI_L_U, SEEE_CHR_MINI_U_L, SEEE_CHR_MINI_U_U, 4);
    MINT32 SEEE_CHR_CNTST_LV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CHR_CNTST_LV_L_L, SEEE_CHR_CNTST_LV_L_U, SEEE_CHR_CNTST_LV_U_L, SEEE_CHR_CNTST_LV_U_U, 4);
    MINT32 SEEE_GLUT_X1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_X1_L_L, SEEE_GLUT_X1_L_U, SEEE_GLUT_X1_U_L, SEEE_GLUT_X1_U_U, 4);
    MINT32 SEEE_GLUT_X2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_X2_L_L, SEEE_GLUT_X2_L_U, SEEE_GLUT_X2_U_L, SEEE_GLUT_X2_U_U, 4);
    MINT32 SEEE_GLUT_X3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_X3_L_L, SEEE_GLUT_X3_L_U, SEEE_GLUT_X3_U_L, SEEE_GLUT_X3_U_U, 4);
    MINT32 SEEE_GLUT_X4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_X4_L_L, SEEE_GLUT_X4_L_U, SEEE_GLUT_X4_U_L, SEEE_GLUT_X4_U_U, 4);
    MINT32 SEEE_GLUT_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_Y1_L_L, SEEE_GLUT_Y1_L_U, SEEE_GLUT_Y1_U_L, SEEE_GLUT_Y1_U_U, 4);
    MINT32 SEEE_GLUT_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_Y2_L_L, SEEE_GLUT_Y2_L_U, SEEE_GLUT_Y2_U_L, SEEE_GLUT_Y2_U_U, 4);
    MINT32 SEEE_GLUT_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_Y3_L_L, SEEE_GLUT_Y3_L_U, SEEE_GLUT_Y3_U_L, SEEE_GLUT_Y3_U_U, 4);
    MINT32 SEEE_GLUT_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_Y4_L_L, SEEE_GLUT_Y4_L_U, SEEE_GLUT_Y4_U_L, SEEE_GLUT_Y4_U_U, 4);
    MINT32 SEEE_GLUT_TH_OVR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_TH_OVR_L_L, SEEE_GLUT_TH_OVR_L_U, SEEE_GLUT_TH_OVR_U_L, SEEE_GLUT_TH_OVR_U_U, 4);
    MINT32 SEEE_GLUT_TH_UND		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_TH_UND_L_L, SEEE_GLUT_TH_UND_L_U, SEEE_GLUT_TH_UND_U_L, SEEE_GLUT_TH_UND_U_U, 4);
    MINT32 SEEE_GLUT_TH_MIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_TH_MIN_L_L, SEEE_GLUT_TH_MIN_L_U, SEEE_GLUT_TH_MIN_U_L, SEEE_GLUT_TH_MIN_U_U, 4);
    MINT32 SEEE_GLUT_SL_DEC_Y		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_SL_DEC_Y_L_L, SEEE_GLUT_SL_DEC_Y_L_U, SEEE_GLUT_SL_DEC_Y_U_L, SEEE_GLUT_SL_DEC_Y_U_U, 4);
    MINT32 SEEE_DOT_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_DOT_TH_L_L, SEEE_DOT_TH_L_U, SEEE_DOT_TH_U_L, SEEE_DOT_TH_U_U, 4);
    MINT32 SEEE_DOT_REDUC_AMNT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_DOT_REDUC_AMNT_L_L, SEEE_DOT_REDUC_AMNT_L_U, SEEE_DOT_REDUC_AMNT_U_L, SEEE_DOT_REDUC_AMNT_U_U, 4);
    MINT32 SEEE_OVRSH_CLIP_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_OVRSH_CLIP_STR_L_L, SEEE_OVRSH_CLIP_STR_L_U, SEEE_OVRSH_CLIP_STR_U_L, SEEE_OVRSH_CLIP_STR_U_U, 4);
    MINT32 SEEE_RESP_SMO_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_SMO_STR_L_L, SEEE_RESP_SMO_STR_L_U, SEEE_RESP_SMO_STR_U_L, SEEE_RESP_SMO_STR_U_U, 4);
    MINT32 SEEE_RESP_CLIP_LUMA_UPB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_CLIP_LUMA_UPB_L_L, SEEE_RESP_CLIP_LUMA_UPB_L_U, SEEE_RESP_CLIP_LUMA_UPB_U_L, SEEE_RESP_CLIP_LUMA_UPB_U_U, 4);
    MINT32 SEEE_RESP_CLIP_LUMA_LWB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_CLIP_LUMA_LWB_L_L, SEEE_RESP_CLIP_LUMA_LWB_L_U, SEEE_RESP_CLIP_LUMA_LWB_U_L, SEEE_RESP_CLIP_LUMA_LWB_U_U, 4);
    MINT32 SEEE_RESP_CLIP_LUMA_SPC_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_CLIP_LUMA_SPC_TH_L_L, SEEE_RESP_CLIP_LUMA_SPC_TH_L_U, SEEE_RESP_CLIP_LUMA_SPC_TH_U_L, SEEE_RESP_CLIP_LUMA_SPC_TH_U_U, 4);
    MINT32 SEEE_RESP_CLIP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_RESP_CLIP_L_L, SEEE_RESP_CLIP_L_U, SEEE_RESP_CLIP_U_L, SEEE_RESP_CLIP_U_U, 4);
    MINT32 SEEE_MASTER_GN_POS		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_MASTER_GN_POS_L_L, SEEE_MASTER_GN_POS_L_U, SEEE_MASTER_GN_POS_U_L, SEEE_MASTER_GN_POS_U_U, 4);
    MINT32 SEEE_MASTER_GN_NEG		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_MASTER_GN_NEG_L_L, SEEE_MASTER_GN_NEG_L_U, SEEE_MASTER_GN_NEG_U_L, SEEE_MASTER_GN_NEG_U_U, 4);
    MINT32 SEEE_ST_LB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_LB_L_L, SEEE_ST_LB_L_U, SEEE_ST_LB_U_L, SEEE_ST_LB_U_U, 4);
    MINT32 SEEE_ST_UB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_UB_L_L, SEEE_ST_UB_L_U, SEEE_ST_UB_U_L, SEEE_ST_UB_U_U, 4);
    MINT32 SEEE_ST_OFST_RESP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_OFST_RESP_L_L, SEEE_ST_OFST_RESP_L_U, SEEE_ST_OFST_RESP_U_L, SEEE_ST_OFST_RESP_U_U, 4);
    MINT32 SEEE_ST_SL_RESP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_SL_RESP_L_L, SEEE_ST_SL_RESP_L_U, SEEE_ST_SL_RESP_U_L, SEEE_ST_SL_RESP_U_U, 4);
    MINT32 SEEE_ST_OFST_CE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_OFST_CE_L_L, SEEE_ST_OFST_CE_L_U, SEEE_ST_OFST_CE_U_L, SEEE_ST_OFST_CE_U_U, 4);
    MINT32 SEEE_ST_SL_CE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_ST_SL_CE_L_L, SEEE_ST_SL_CE_L_U, SEEE_ST_SL_CE_U_L, SEEE_ST_SL_CE_U_U, 4);
    MINT32 SEEE_CBOOST_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_EN_L_L, SEEE_CBOOST_EN_L_U, SEEE_CBOOST_EN_U_L, SEEE_CBOOST_EN_U_U, 4);
    MINT32 SEEE_CBOOST_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_GAIN_L_L, SEEE_CBOOST_GAIN_L_U, SEEE_CBOOST_GAIN_U_L, SEEE_CBOOST_GAIN_U_U, 4);
    MINT32 SEEE_CBOOST_LMT_L		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_LMT_L_L_L, SEEE_CBOOST_LMT_L_L_U, SEEE_CBOOST_LMT_L_U_L, SEEE_CBOOST_LMT_L_U_U, 4);
    MINT32 SEEE_CBOOST_LMT_U		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_LMT_U_L_L, SEEE_CBOOST_LMT_U_L_U, SEEE_CBOOST_LMT_U_U_L, SEEE_CBOOST_LMT_U_U_U, 4);
    MINT32 SEEE_CBOOST_YOFFSET_SEL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_YOFFSET_SEL_L_L, SEEE_CBOOST_YOFFSET_SEL_L_U, SEEE_CBOOST_YOFFSET_SEL_U_L, SEEE_CBOOST_YOFFSET_SEL_U_U, 4);
    MINT32 SEEE_CBOOST_YOFFSET		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_YOFFSET_L_L, SEEE_CBOOST_YOFFSET_L_U, SEEE_CBOOST_YOFFSET_U_L, SEEE_CBOOST_YOFFSET_U_U, 4);
    MINT32 SEEE_CBOOST_YCONST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_CBOOST_YCONST_L_L, SEEE_CBOOST_YCONST_L_U, SEEE_CBOOST_YCONST_U_L, SEEE_CBOOST_YCONST_U_U, 4);
    MINT32 SEEE_PBC_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC_EN_L_L, SEEE_PBC_EN_L_U, SEEE_PBC_EN_U_L, SEEE_PBC_EN_U_U, 4);
    MINT32 SEEE_PBC1_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_EN_L_L, SEEE_PBC1_EN_L_U, SEEE_PBC1_EN_U_L, SEEE_PBC1_EN_U_U, 4);
    MINT32 SEEE_PBC1_RSLOPE_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_RSLOPE_1_L_L, SEEE_PBC1_RSLOPE_1_L_U, SEEE_PBC1_RSLOPE_1_U_L, SEEE_PBC1_RSLOPE_1_U_U, 4);
    MINT32 SEEE_PBC1_RSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_RSLOPE_L_L, SEEE_PBC1_RSLOPE_L_U, SEEE_PBC1_RSLOPE_U_L, SEEE_PBC1_RSLOPE_U_U, 4);
    MINT32 SEEE_PBC1_RADIUS_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_RADIUS_R_L_L, SEEE_PBC1_RADIUS_R_L_U, SEEE_PBC1_RADIUS_R_U_L, SEEE_PBC1_RADIUS_R_U_U, 4);
    MINT32 SEEE_PBC1_RADIUS_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_RADIUS_C_L_L, SEEE_PBC1_RADIUS_C_L_U, SEEE_PBC1_RADIUS_C_U_L, SEEE_PBC1_RADIUS_C_U_U, 4);
    MINT32 SEEE_PBC1_THETA_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_THETA_C_L_L, SEEE_PBC1_THETA_C_L_U, SEEE_PBC1_THETA_C_U_L, SEEE_PBC1_THETA_C_U_U, 4);
    MINT32 SEEE_PBC1_THETA_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_THETA_R_L_L, SEEE_PBC1_THETA_R_L_U, SEEE_PBC1_THETA_R_U_L, SEEE_PBC1_THETA_R_U_U, 4);
    MINT32 SEEE_PBC1_TSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_TSLOPE_L_L, SEEE_PBC1_TSLOPE_L_U, SEEE_PBC1_TSLOPE_U_L, SEEE_PBC1_TSLOPE_U_U, 4);
    MINT32 SEEE_PBC1_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_GAIN_L_L, SEEE_PBC1_GAIN_L_U, SEEE_PBC1_GAIN_U_L, SEEE_PBC1_GAIN_U_U, 4);
    MINT32 SEEE_PBC1_CONF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_CONF_GAIN_L_L, SEEE_PBC1_CONF_GAIN_L_U, SEEE_PBC1_CONF_GAIN_U_L, SEEE_PBC1_CONF_GAIN_U_U, 4);
    MINT32 SEEE_PBC1_EDGE_THR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_EDGE_THR_L_L, SEEE_PBC1_EDGE_THR_L_U, SEEE_PBC1_EDGE_THR_U_L, SEEE_PBC1_EDGE_THR_U_U, 4);
    MINT32 SEEE_PBC1_EDGE_SLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_EDGE_SLOPE_L_L, SEEE_PBC1_EDGE_SLOPE_L_U, SEEE_PBC1_EDGE_SLOPE_U_L, SEEE_PBC1_EDGE_SLOPE_U_U, 4);
    MINT32 SEEE_PBC1_EDGE_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_EDGE_EN_L_L, SEEE_PBC1_EDGE_EN_L_U, SEEE_PBC1_EDGE_EN_U_L, SEEE_PBC1_EDGE_EN_U_U, 4);
    MINT32 SEEE_PBC1_LPF_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_LPF_EN_L_L, SEEE_PBC1_LPF_EN_L_U, SEEE_PBC1_LPF_EN_U_L, SEEE_PBC1_LPF_EN_U_U, 4);
    MINT32 SEEE_PBC1_LPF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC1_LPF_GAIN_L_L, SEEE_PBC1_LPF_GAIN_L_U, SEEE_PBC1_LPF_GAIN_U_L, SEEE_PBC1_LPF_GAIN_U_U, 4);
    MINT32 SEEE_PBC2_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_EN_L_L, SEEE_PBC2_EN_L_U, SEEE_PBC2_EN_U_L, SEEE_PBC2_EN_U_U, 4);
    MINT32 SEEE_PBC2_RSLOPE_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_RSLOPE_1_L_L, SEEE_PBC2_RSLOPE_1_L_U, SEEE_PBC2_RSLOPE_1_U_L, SEEE_PBC2_RSLOPE_1_U_U, 4);
    MINT32 SEEE_PBC2_RSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_RSLOPE_L_L, SEEE_PBC2_RSLOPE_L_U, SEEE_PBC2_RSLOPE_U_L, SEEE_PBC2_RSLOPE_U_U, 4);
    MINT32 SEEE_PBC2_RADIUS_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_RADIUS_R_L_L, SEEE_PBC2_RADIUS_R_L_U, SEEE_PBC2_RADIUS_R_U_L, SEEE_PBC2_RADIUS_R_U_U, 4);
    MINT32 SEEE_PBC2_RADIUS_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_RADIUS_C_L_L, SEEE_PBC2_RADIUS_C_L_U, SEEE_PBC2_RADIUS_C_U_L, SEEE_PBC2_RADIUS_C_U_U, 4);
    MINT32 SEEE_PBC2_THETA_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_THETA_C_L_L, SEEE_PBC2_THETA_C_L_U, SEEE_PBC2_THETA_C_U_L, SEEE_PBC2_THETA_C_U_U, 4);
    MINT32 SEEE_PBC2_THETA_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_THETA_R_L_L, SEEE_PBC2_THETA_R_L_U, SEEE_PBC2_THETA_R_U_L, SEEE_PBC2_THETA_R_U_U, 4);
    MINT32 SEEE_PBC2_TSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_TSLOPE_L_L, SEEE_PBC2_TSLOPE_L_U, SEEE_PBC2_TSLOPE_U_L, SEEE_PBC2_TSLOPE_U_U, 4);
    MINT32 SEEE_PBC2_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_GAIN_L_L, SEEE_PBC2_GAIN_L_U, SEEE_PBC2_GAIN_U_L, SEEE_PBC2_GAIN_U_U, 4);
    MINT32 SEEE_PBC2_CONF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_CONF_GAIN_L_L, SEEE_PBC2_CONF_GAIN_L_U, SEEE_PBC2_CONF_GAIN_U_L, SEEE_PBC2_CONF_GAIN_U_U, 4);
    MINT32 SEEE_PBC2_EDGE_THR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_EDGE_THR_L_L, SEEE_PBC2_EDGE_THR_L_U, SEEE_PBC2_EDGE_THR_U_L, SEEE_PBC2_EDGE_THR_U_U, 4);
    MINT32 SEEE_PBC2_EDGE_SLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_EDGE_SLOPE_L_L, SEEE_PBC2_EDGE_SLOPE_L_U, SEEE_PBC2_EDGE_SLOPE_U_L, SEEE_PBC2_EDGE_SLOPE_U_U, 4);
    MINT32 SEEE_PBC2_EDGE_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_EDGE_EN_L_L, SEEE_PBC2_EDGE_EN_L_U, SEEE_PBC2_EDGE_EN_U_L, SEEE_PBC2_EDGE_EN_U_U, 4);
    MINT32 SEEE_PBC2_LPF_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_LPF_EN_L_L, SEEE_PBC2_LPF_EN_L_U, SEEE_PBC2_LPF_EN_U_L, SEEE_PBC2_LPF_EN_U_U, 4);
    MINT32 SEEE_PBC2_LPF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC2_LPF_GAIN_L_L, SEEE_PBC2_LPF_GAIN_L_U, SEEE_PBC2_LPF_GAIN_U_L, SEEE_PBC2_LPF_GAIN_U_U, 4);
    MINT32 SEEE_PBC3_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_EN_L_L, SEEE_PBC3_EN_L_U, SEEE_PBC3_EN_U_L, SEEE_PBC3_EN_U_U, 4);
    MINT32 SEEE_PBC3_RSLOPE_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_RSLOPE_1_L_L, SEEE_PBC3_RSLOPE_1_L_U, SEEE_PBC3_RSLOPE_1_U_L, SEEE_PBC3_RSLOPE_1_U_U, 4);
    MINT32 SEEE_PBC3_RSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_RSLOPE_L_L, SEEE_PBC3_RSLOPE_L_U, SEEE_PBC3_RSLOPE_U_L, SEEE_PBC3_RSLOPE_U_U, 4);
    MINT32 SEEE_PBC3_RADIUS_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_RADIUS_R_L_L, SEEE_PBC3_RADIUS_R_L_U, SEEE_PBC3_RADIUS_R_U_L, SEEE_PBC3_RADIUS_R_U_U, 4);
    MINT32 SEEE_PBC3_RADIUS_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_RADIUS_C_L_L, SEEE_PBC3_RADIUS_C_L_U, SEEE_PBC3_RADIUS_C_U_L, SEEE_PBC3_RADIUS_C_U_U, 4);
    MINT32 SEEE_PBC3_THETA_C		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_THETA_C_L_L, SEEE_PBC3_THETA_C_L_U, SEEE_PBC3_THETA_C_U_L, SEEE_PBC3_THETA_C_U_U, 4);
    MINT32 SEEE_PBC3_THETA_R		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_THETA_R_L_L, SEEE_PBC3_THETA_R_L_U, SEEE_PBC3_THETA_R_U_L, SEEE_PBC3_THETA_R_U_U, 4);
    MINT32 SEEE_PBC3_TSLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_TSLOPE_L_L, SEEE_PBC3_TSLOPE_L_U, SEEE_PBC3_TSLOPE_U_L, SEEE_PBC3_TSLOPE_U_U, 4);
    MINT32 SEEE_PBC3_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_GAIN_L_L, SEEE_PBC3_GAIN_L_U, SEEE_PBC3_GAIN_U_L, SEEE_PBC3_GAIN_U_U, 4);
    MINT32 SEEE_PBC3_CONF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_CONF_GAIN_L_L, SEEE_PBC3_CONF_GAIN_L_U, SEEE_PBC3_CONF_GAIN_U_L, SEEE_PBC3_CONF_GAIN_U_U, 4);
    MINT32 SEEE_PBC3_EDGE_THR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_EDGE_THR_L_L, SEEE_PBC3_EDGE_THR_L_U, SEEE_PBC3_EDGE_THR_U_L, SEEE_PBC3_EDGE_THR_U_U, 4);
    MINT32 SEEE_PBC3_EDGE_SLOPE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_EDGE_SLOPE_L_L, SEEE_PBC3_EDGE_SLOPE_L_U, SEEE_PBC3_EDGE_SLOPE_U_L, SEEE_PBC3_EDGE_SLOPE_U_U, 4);
    MINT32 SEEE_PBC3_EDGE_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_EDGE_EN_L_L, SEEE_PBC3_EDGE_EN_L_U, SEEE_PBC3_EDGE_EN_U_L, SEEE_PBC3_EDGE_EN_U_U, 4);
    MINT32 SEEE_PBC3_LPF_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_LPF_EN_L_L, SEEE_PBC3_LPF_EN_L_U, SEEE_PBC3_LPF_EN_U_L, SEEE_PBC3_LPF_EN_U_U, 4);
    MINT32 SEEE_PBC3_LPF_GAIN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_PBC3_LPF_GAIN_L_L, SEEE_PBC3_LPF_GAIN_L_U, SEEE_PBC3_LPF_GAIN_U_L, SEEE_PBC3_LPF_GAIN_U_U, 4);
    MINT32 SEEE_GLUT_LINK_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_LINK_EN_L_L, SEEE_GLUT_LINK_EN_L_U, SEEE_GLUT_LINK_EN_U_L, SEEE_GLUT_LINK_EN_U_U, 5);
    //  To calculate S5, we need to find Y5 first.
    //  Y5 is not a real register. So we use (X4, Y4) and S5 to evaluate (255, Y5) for pre-ISO and post-ISO setting.
    //  Then we get the interpolated Y5.
    MINT32 SEEE_GLUT_S5_L_L                  = rParam.rLowerIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_S5;
    MINT32 SEEE_GLUT_S5_L_U                  = rParam.rLowerIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_S5;
    MINT32 SEEE_GLUT_S5_U_L                  = rParam.rUpperIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_S5;
    MINT32 SEEE_GLUT_S5_U_U                  = rParam.rUpperIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_S5;
    //  Negative value for slope
    SEEE_GLUT_S5_L_L = (SEEE_GLUT_S5_L_L > 127) ? (SEEE_GLUT_S5_L_L - 256) : SEEE_GLUT_S5_L_L;
    SEEE_GLUT_S5_L_U = (SEEE_GLUT_S5_L_U > 127) ? (SEEE_GLUT_S5_L_U - 256) : SEEE_GLUT_S5_L_U;
    SEEE_GLUT_S5_U_L = (SEEE_GLUT_S5_U_L > 127) ? (SEEE_GLUT_S5_U_L - 256) : SEEE_GLUT_S5_U_L;
    SEEE_GLUT_S5_U_U = (SEEE_GLUT_S5_U_U > 127) ? (SEEE_GLUT_S5_U_U - 256) : SEEE_GLUT_S5_U_U;
    MINT32 S5_L_L_sign       = (SEEE_GLUT_S5_L_L >= 0) ? 1 : -1;
    MINT32 SEEE_GLUT_Y5_L_L  = SEEE_GLUT_Y4_L_L + (SEEE_GLUT_S5_L_L * (255 - SEEE_GLUT_X4_L_L) + 8 * S5_L_L_sign) / 16;

 MINT32 S5_L_U_sign       = (SEEE_GLUT_S5_L_U >= 0) ? 1 : -1;
    MINT32 SEEE_GLUT_Y5_L_U  = SEEE_GLUT_Y4_L_U + (SEEE_GLUT_S5_L_U * (255 - SEEE_GLUT_X4_L_U) + 8 * S5_L_U_sign) / 16;

 MINT32 S5_U_L_sign       = (SEEE_GLUT_S5_U_L >= 0) ? 1 : -1;
    MINT32 SEEE_GLUT_Y5_U_L  = SEEE_GLUT_Y4_U_L + (SEEE_GLUT_S5_U_L * (255 - SEEE_GLUT_X4_U_L) + 8 * S5_U_L_sign) / 16;

 MINT32 S5_U_U_sign       = (SEEE_GLUT_S5_U_U >= 0) ? 1 : -1;
    MINT32 SEEE_GLUT_Y5_U_U  = SEEE_GLUT_Y4_U_U + (SEEE_GLUT_S5_U_U * (255 - SEEE_GLUT_X4_U_U) + 8 * S5_U_U_sign) / 16;

    MINT32 SEEE_GLUT_Y5            = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, SEEE_GLUT_Y5_L_L, SEEE_GLUT_Y5_L_U, SEEE_GLUT_Y5_U_L, SEEE_GLUT_Y5_U_U,0);

    MINT32 SEEE_GLUT_S1;
    MINT32 SEEE_GLUT_S2;
    MINT32 SEEE_GLUT_S3;
    MINT32 SEEE_GLUT_S4;
    MINT32 SEEE_GLUT_S5;
    //  Due to slope can not be interpolated for most cases, they need to be re-calculated.
    if(SEEE_GLUT_X1 == 0){
        SEEE_GLUT_S1 = 0;
    }
    else{
        MINT32 S1 = (MINT32)((double)(SEEE_GLUT_Y1 << 4) / (double)SEEE_GLUT_X1 + 0.5);
        SEEE_GLUT_S1 = (S1 > 127) ? 127 : S1;
    }

    if((SEEE_GLUT_Y2 - SEEE_GLUT_Y1) > 0){
        MINT32 S2 = (MINT32)((double)((SEEE_GLUT_Y2 - SEEE_GLUT_Y1) << 4) / (double)(SEEE_GLUT_X2 - SEEE_GLUT_X1) + 0.5);
        SEEE_GLUT_S2 = (S2 > 127) ? 127 : S2;
    }
    else{
        MINT32 S2 = (MINT32)((double)((SEEE_GLUT_Y2 - SEEE_GLUT_Y1) << 4) / (double)(SEEE_GLUT_X2 - SEEE_GLUT_X1) - 0.5);
        SEEE_GLUT_S2 = (S2 < -128) ? -128 : S2;
    }

    if((SEEE_GLUT_Y3 - SEEE_GLUT_Y2) > 0){
        MINT32 S3 = (MINT32)((double)((SEEE_GLUT_Y3 - SEEE_GLUT_Y2) << 4) / (double)(SEEE_GLUT_X3 - SEEE_GLUT_X2) + 0.5);
        SEEE_GLUT_S3 = (S3 > 127) ? 127 : S3;
    }
    else{
        MINT32 S3 = (MINT32)((double)((SEEE_GLUT_Y3 - SEEE_GLUT_Y2) << 4) / (double)(SEEE_GLUT_X3 - SEEE_GLUT_X2) - 0.5);
        SEEE_GLUT_S3 = (S3 < -128) ? -128 : S3;
    }

    if((SEEE_GLUT_Y4 - SEEE_GLUT_Y3) > 0){
        MINT32 S4 = (MINT32)((double)((SEEE_GLUT_Y4 - SEEE_GLUT_Y3) << 4) / (double)(SEEE_GLUT_X4 - SEEE_GLUT_X3) + 0.5);
        SEEE_GLUT_S4 = (S4 > 127) ? 127 : S4;
    }
    else{
        MINT32 S4 = (MINT32)((double)((SEEE_GLUT_Y4 - SEEE_GLUT_Y3) << 4) / (double)(SEEE_GLUT_X4 - SEEE_GLUT_X3) - 0.5);
        SEEE_GLUT_S4 = (S4 < -128) ? -128 : S4;
    }

    if((SEEE_GLUT_Y5 - SEEE_GLUT_Y4) > 0){
        MINT32 S5 = (MINT32)((double)((SEEE_GLUT_Y5 - SEEE_GLUT_Y4) << 4) / (double)(255 - SEEE_GLUT_X4) + 0.5);
        SEEE_GLUT_S5 = (S5 > 127) ? 127 : S5;
    }
    else{
        MINT32 S5 = (MINT32)((double)((SEEE_GLUT_Y5 - SEEE_GLUT_Y4) << 4) / (double)(255 - SEEE_GLUT_X4) - 0.5);
        SEEE_GLUT_S5 = (S5 < -128) ? -128 : S5;
    }

 // negative conversion

 SEEE_GLUT_S1 = (SEEE_GLUT_S1 < 0) ? (SEEE_GLUT_S1 + 256) : SEEE_GLUT_S1;
 SEEE_GLUT_S2 = (SEEE_GLUT_S2 < 0) ? (SEEE_GLUT_S2 + 256) : SEEE_GLUT_S2;
 SEEE_GLUT_S3 = (SEEE_GLUT_S3 < 0) ? (SEEE_GLUT_S3 + 256) : SEEE_GLUT_S3;
 SEEE_GLUT_S4 = (SEEE_GLUT_S4 < 0) ? (SEEE_GLUT_S4 + 256) : SEEE_GLUT_S4;
 SEEE_GLUT_S5 = (SEEE_GLUT_S5 < 0) ? (SEEE_GLUT_S5 + 256) : SEEE_GLUT_S5;


    // assign interpolation result
    rSmoothEE.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST       = SEEE_H1_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST       = SEEE_H2_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST       = SEEE_H3_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL       = SEEE_H1_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL       = SEEE_H2_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL       = SEEE_H3_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT       = SEEE_HX_ISO_BLND_RAT;
    rSmoothEE.gn_ctrl_1.bits.SEEE_H1_GN       = SEEE_H1_GN;
    rSmoothEE.gn_ctrl_1.bits.SEEE_H2_GN       = SEEE_H2_GN;
    rSmoothEE.gn_ctrl_1.bits.SEEE_H3_GN       = SEEE_H3_GN;
    rSmoothEE.core_ctrl.bits.SEEE_FLT_CORE_TH       = SEEE_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.SEEE_H1_FLT_CORE_TH       = SEEE_H1_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.SEEE_H2_FLT_CORE_TH       = SEEE_H2_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.SEEE_H3_FLT_CORE_TH       = SEEE_H3_FLT_CORE_TH;
    rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0       = SEEE_LUMA_MOD_Y0;
    rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1       = SEEE_LUMA_MOD_Y1;
    rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2       = SEEE_LUMA_MOD_Y2;
    rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3       = SEEE_LUMA_MOD_Y3;
    rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4       = SEEE_LUMA_MOD_Y4;
    rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5       = SEEE_LUMA_MOD_Y5;
    rSmoothEE.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6       = SEEE_LUMA_MOD_Y6;
    rSmoothEE.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1       = SEEE_SLNK_GN_Y1;
    rSmoothEE.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2       = SEEE_SLNK_GN_Y2;
    rSmoothEE.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT       = SEEE_RESP_SLNK_GN_RAT;
    rSmoothEE.ct_ctrl.bits.SEEE_LUMA_MAXI       = SEEE_LUMA_MAXI;
    rSmoothEE.ct_ctrl.bits.SEEE_LUMA_MINI       = SEEE_LUMA_MINI;
    rSmoothEE.ct_ctrl.bits.SEEE_LUMA_CNTST_LV       = SEEE_LUMA_CNTST_LV;
    rSmoothEE.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF       = SEEE_LUMA_LMT_DIFF;
    rSmoothEE.ct_ctrl.bits.SEEE_CHR_MAXI       = SEEE_CHR_MAXI;
    rSmoothEE.ct_ctrl.bits.SEEE_CHR_MINI       = SEEE_CHR_MINI;
    rSmoothEE.ct_ctrl.bits.SEEE_CHR_CNTST_LV       = SEEE_CHR_CNTST_LV;
    rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_X1       = SEEE_GLUT_X1;
    rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_X2       = SEEE_GLUT_X2;
    rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_X3       = SEEE_GLUT_X3;
    rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_X4       = SEEE_GLUT_X4;
    rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_Y1       = SEEE_GLUT_Y1;
    rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_Y2       = SEEE_GLUT_Y2;
    rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_Y3       = SEEE_GLUT_Y3;
    rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_Y4       = SEEE_GLUT_Y4;
    rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR       = SEEE_GLUT_TH_OVR;
    rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_UND       = SEEE_GLUT_TH_UND;
    rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN       = SEEE_GLUT_TH_MIN;
    rSmoothEE.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y       = SEEE_GLUT_SL_DEC_Y;
    rSmoothEE.artifact_ctrl.bits.SEEE_DOT_TH       = SEEE_DOT_TH;
    rSmoothEE.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT       = SEEE_DOT_REDUC_AMNT;
    rSmoothEE.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR       = SEEE_OVRSH_CLIP_STR;
    rSmoothEE.artifact_ctrl.bits.SEEE_RESP_SMO_STR       = SEEE_RESP_SMO_STR;
    rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB       = SEEE_RESP_CLIP_LUMA_UPB;
    rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB       = SEEE_RESP_CLIP_LUMA_LWB;
    rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH       = SEEE_RESP_CLIP_LUMA_SPC_TH;
    rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP       = SEEE_RESP_CLIP;
    rSmoothEE.gn_ctrl_2.bits.SEEE_MASTER_GN_POS       = SEEE_MASTER_GN_POS;
    rSmoothEE.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG       = SEEE_MASTER_GN_NEG;
    rSmoothEE.st_ctrl_1.bits.SEEE_ST_LB       = SEEE_ST_LB;
    rSmoothEE.st_ctrl_1.bits.SEEE_ST_UB       = SEEE_ST_UB;
    rSmoothEE.st_ctrl_2.bits.SEEE_ST_OFST_RESP       = SEEE_ST_OFST_RESP;
    rSmoothEE.st_ctrl_2.bits.SEEE_ST_SL_RESP       = SEEE_ST_SL_RESP;
    rSmoothEE.st_ctrl_2.bits.SEEE_ST_OFST_CE       = SEEE_ST_OFST_CE;
    rSmoothEE.st_ctrl_2.bits.SEEE_ST_SL_CE       = SEEE_ST_SL_CE;
    rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_EN       = SEEE_CBOOST_EN;
    rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN       = SEEE_CBOOST_GAIN;
    rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L       = SEEE_CBOOST_LMT_L;
    rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U       = SEEE_CBOOST_LMT_U;
    rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL       = SEEE_CBOOST_YOFFSET_SEL;
    rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET       = SEEE_CBOOST_YOFFSET;
    rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST       = SEEE_CBOOST_YCONST;
    rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC_EN       = SEEE_PBC_EN;
    rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_EN       = SEEE_PBC1_EN;
    rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1       = SEEE_PBC1_RSLOPE_1;
    rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE       = SEEE_PBC1_RSLOPE;
    rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R       = SEEE_PBC1_RADIUS_R;
    rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C       = SEEE_PBC1_RADIUS_C;
    rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C       = SEEE_PBC1_THETA_C;
    rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R       = SEEE_PBC1_THETA_R;
    rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE       = SEEE_PBC1_TSLOPE;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN       = SEEE_PBC1_GAIN;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN       = SEEE_PBC1_CONF_GAIN;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR       = SEEE_PBC1_EDGE_THR;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE       = SEEE_PBC1_EDGE_SLOPE;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN       = SEEE_PBC1_EDGE_EN;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN       = SEEE_PBC1_LPF_EN;
    rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN       = SEEE_PBC1_LPF_GAIN;
    rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_EN       = SEEE_PBC2_EN;
    rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1       = SEEE_PBC2_RSLOPE_1;
    rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE       = SEEE_PBC2_RSLOPE;
    rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R       = SEEE_PBC2_RADIUS_R;
    rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C       = SEEE_PBC2_RADIUS_C;
    rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C       = SEEE_PBC2_THETA_C;
    rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R       = SEEE_PBC2_THETA_R;
    rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE       = SEEE_PBC2_TSLOPE;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN       = SEEE_PBC2_GAIN;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN       = SEEE_PBC2_CONF_GAIN;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR       = SEEE_PBC2_EDGE_THR;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE       = SEEE_PBC2_EDGE_SLOPE;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN       = SEEE_PBC2_EDGE_EN;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN       = SEEE_PBC2_LPF_EN;
    rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN       = SEEE_PBC2_LPF_GAIN;
    rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_EN       = SEEE_PBC3_EN;
    rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1       = SEEE_PBC3_RSLOPE_1;
    rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE       = SEEE_PBC3_RSLOPE;
    rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R       = SEEE_PBC3_RADIUS_R;
    rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C       = SEEE_PBC3_RADIUS_C;
    rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C       = SEEE_PBC3_THETA_C;
    rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R       = SEEE_PBC3_THETA_R;
    rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE       = SEEE_PBC3_TSLOPE;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN       = SEEE_PBC3_GAIN;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN       = SEEE_PBC3_CONF_GAIN;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR       = SEEE_PBC3_EDGE_THR;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE       = SEEE_PBC3_EDGE_SLOPE;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN       = SEEE_PBC3_EDGE_EN;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN       = SEEE_PBC3_LPF_EN;
    rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN       = SEEE_PBC3_LPF_GAIN;
    rSmoothEE.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN       = SEEE_GLUT_LINK_EN;
    rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_S1       = SEEE_GLUT_S1;
    rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_S2       = SEEE_GLUT_S2;
    rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_S3       = SEEE_GLUT_S3;
    rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_S4       = SEEE_GLUT_S4;
    rSmoothEE.glut_ctrl_5.bits.SEEE_GLUT_S5       = SEEE_GLUT_S5;


    // log
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H1_DI_BLND_OFST = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST, rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST, rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST, rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST, rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H1_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H2_DI_BLND_OFST = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST, rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST, rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST, rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST, rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H2_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H3_DI_BLND_OFST = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST, rParam.rLowerIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST, rParam.rLowerIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST, rParam.rUpperIso_LowerZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST, rParam.rUpperIso_UpperZoom.blnd_ctrl_1.bits.SEEE_H3_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H1_DI_BLND_SL = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL, rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL, rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL, rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL, rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H1_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H2_DI_BLND_SL = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL, rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL, rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL, rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL, rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H2_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H3_DI_BLND_SL = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL, rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL, rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL, rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL, rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_H3_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_HX_ISO_BLND_RAT = %d, %d, %d, %d, %d", rSmoothEE.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT, rParam.rLowerIso_LowerZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT, rParam.rLowerIso_UpperZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT, rParam.rUpperIso_LowerZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT, rParam.rUpperIso_UpperZoom.blnd_ctrl_2.bits.SEEE_HX_ISO_BLND_RAT);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H1_GN = %d, %d, %d, %d, %d", rSmoothEE.gn_ctrl_1.bits.SEEE_H1_GN, rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H1_GN, rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H1_GN, rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H1_GN, rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H1_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H2_GN = %d, %d, %d, %d, %d", rSmoothEE.gn_ctrl_1.bits.SEEE_H2_GN, rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H2_GN, rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H2_GN, rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H2_GN, rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H2_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H3_GN = %d, %d, %d, %d, %d", rSmoothEE.gn_ctrl_1.bits.SEEE_H3_GN, rParam.rLowerIso_LowerZoom.gn_ctrl_1.bits.SEEE_H3_GN, rParam.rLowerIso_UpperZoom.gn_ctrl_1.bits.SEEE_H3_GN, rParam.rUpperIso_LowerZoom.gn_ctrl_1.bits.SEEE_H3_GN, rParam.rUpperIso_UpperZoom.gn_ctrl_1.bits.SEEE_H3_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_FLT_CORE_TH = %d, %d, %d, %d, %d", rSmoothEE.core_ctrl.bits.SEEE_FLT_CORE_TH, rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_FLT_CORE_TH, rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_FLT_CORE_TH, rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_FLT_CORE_TH, rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H1_FLT_CORE_TH = %d, %d, %d, %d, %d", rSmoothEE.core_ctrl.bits.SEEE_H1_FLT_CORE_TH, rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH, rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH, rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH, rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H1_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H2_FLT_CORE_TH = %d, %d, %d, %d, %d", rSmoothEE.core_ctrl.bits.SEEE_H2_FLT_CORE_TH, rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH, rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH, rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH, rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H2_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_H3_FLT_CORE_TH = %d, %d, %d, %d, %d", rSmoothEE.core_ctrl.bits.SEEE_H3_FLT_CORE_TH, rParam.rLowerIso_LowerZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH, rParam.rLowerIso_UpperZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH, rParam.rUpperIso_LowerZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH, rParam.rUpperIso_UpperZoom.core_ctrl.bits.SEEE_H3_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y0 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0, rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0, rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0, rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0, rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y0);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y1 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1, rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1, rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1, rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1, rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y2 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2, rParam.rLowerIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2, rParam.rLowerIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2, rParam.rUpperIso_LowerZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2, rParam.rUpperIso_UpperZoom.luma_ctrl_1.bits.SEEE_LUMA_MOD_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y3 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3, rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3, rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3, rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3, rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y3);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y4 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4, rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4, rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4, rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4, rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y4);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y5 = %d, %d, %d, %d, %d", rSmoothEE.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5, rParam.rLowerIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5, rParam.rLowerIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5, rParam.rUpperIso_LowerZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5, rParam.rUpperIso_UpperZoom.luma_ctrl_2.bits.SEEE_LUMA_MOD_Y5);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MOD_Y6 = %d, %d, %d, %d, %d", rSmoothEE.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6, rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6, rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6, rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6, rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_LUMA_MOD_Y6);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_SLNK_GN_Y1 = %d, %d, %d, %d, %d", rSmoothEE.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1, rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1, rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1, rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1, rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_SLNK_GN_Y2 = %d, %d, %d, %d, %d", rSmoothEE.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2, rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2, rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2, rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2, rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_SLNK_GN_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_SLNK_GN_RAT = %d, %d, %d, %d, %d", rSmoothEE.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT, rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT, rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT, rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT, rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_RESP_SLNK_GN_RAT);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MAXI = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_LUMA_MAXI, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MAXI, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MAXI, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MAXI, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MAXI);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_MINI = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_LUMA_MINI, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MINI, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MINI, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_MINI, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_MINI);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_CNTST_LV = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_LUMA_CNTST_LV, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_CNTST_LV);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_LUMA_LMT_DIFF = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_LUMA_LMT_DIFF);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CHR_MAXI = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_CHR_MAXI, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MAXI, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MAXI, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MAXI, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MAXI);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CHR_MINI = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_CHR_MINI, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MINI, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MINI, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_MINI, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_MINI);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CHR_CNTST_LV = %d, %d, %d, %d, %d", rSmoothEE.ct_ctrl.bits.SEEE_CHR_CNTST_LV, rParam.rLowerIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV, rParam.rLowerIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV, rParam.rUpperIso_LowerZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV, rParam.rUpperIso_UpperZoom.ct_ctrl.bits.SEEE_CHR_CNTST_LV);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_X1 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_X1, rParam.rLowerIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_X1, rParam.rLowerIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_X1, rParam.rUpperIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_X1, rParam.rUpperIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_X1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_X2 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_X2, rParam.rLowerIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_X2, rParam.rLowerIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_X2, rParam.rUpperIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_X2, rParam.rUpperIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_X2);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_X3 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_X3, rParam.rLowerIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_X3, rParam.rLowerIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_X3, rParam.rUpperIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_X3, rParam.rUpperIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_X3);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_X4 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_X4, rParam.rLowerIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_X4, rParam.rLowerIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_X4, rParam.rUpperIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_X4, rParam.rUpperIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_X4);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_Y1 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_Y1, rParam.rLowerIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1, rParam.rLowerIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1, rParam.rUpperIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1, rParam.rUpperIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_Y2 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_Y2, rParam.rLowerIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2, rParam.rLowerIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2, rParam.rUpperIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2, rParam.rUpperIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_Y3 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_Y3, rParam.rLowerIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3, rParam.rLowerIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3, rParam.rUpperIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3, rParam.rUpperIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_Y3);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_Y4 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_Y4, rParam.rLowerIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4, rParam.rLowerIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4, rParam.rUpperIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4, rParam.rUpperIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_Y4);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_TH_OVR = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR, rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR, rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR, rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR, rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_OVR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_TH_UND = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_UND, rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND, rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND, rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND, rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_UND);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_TH_MIN = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN, rParam.rLowerIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN, rParam.rLowerIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN, rParam.rUpperIso_LowerZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN, rParam.rUpperIso_UpperZoom.glut_ctrl_6.bits.SEEE_GLUT_TH_MIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_SL_DEC_Y = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y, rParam.rLowerIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y, rParam.rLowerIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y, rParam.rUpperIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y, rParam.rUpperIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_SL_DEC_Y);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_DOT_TH = %d, %d, %d, %d, %d", rSmoothEE.artifact_ctrl.bits.SEEE_DOT_TH, rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_TH, rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_TH, rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_TH, rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_DOT_REDUC_AMNT = %d, %d, %d, %d, %d", rSmoothEE.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT, rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT, rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT, rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT, rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_DOT_REDUC_AMNT);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_OVRSH_CLIP_STR = %d, %d, %d, %d, %d", rSmoothEE.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR, rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR, rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR, rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR, rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_OVRSH_CLIP_STR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_SMO_STR = %d, %d, %d, %d, %d", rSmoothEE.artifact_ctrl.bits.SEEE_RESP_SMO_STR, rParam.rLowerIso_LowerZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR, rParam.rLowerIso_UpperZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR, rParam.rUpperIso_LowerZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR, rParam.rUpperIso_UpperZoom.artifact_ctrl.bits.SEEE_RESP_SMO_STR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_CLIP_LUMA_UPB = %d, %d, %d, %d, %d", rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB, rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB, rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB, rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB, rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_UPB);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_CLIP_LUMA_LWB = %d, %d, %d, %d, %d", rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB, rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB, rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB, rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB, rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_LWB);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_CLIP_LUMA_SPC_TH = %d, %d, %d, %d, %d", rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH, rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH, rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH, rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH, rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP_LUMA_SPC_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_RESP_CLIP = %d, %d, %d, %d, %d", rSmoothEE.clip_ctrl.bits.SEEE_RESP_CLIP, rParam.rLowerIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP, rParam.rLowerIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP, rParam.rUpperIso_LowerZoom.clip_ctrl.bits.SEEE_RESP_CLIP, rParam.rUpperIso_UpperZoom.clip_ctrl.bits.SEEE_RESP_CLIP);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_MASTER_GN_POS = %d, %d, %d, %d, %d", rSmoothEE.gn_ctrl_2.bits.SEEE_MASTER_GN_POS, rParam.rLowerIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS, rParam.rLowerIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS, rParam.rUpperIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS, rParam.rUpperIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_POS);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_MASTER_GN_NEG = %d, %d, %d, %d, %d", rSmoothEE.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG, rParam.rLowerIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG, rParam.rLowerIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG, rParam.rUpperIso_LowerZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG, rParam.rUpperIso_UpperZoom.gn_ctrl_2.bits.SEEE_MASTER_GN_NEG);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_LB = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_1.bits.SEEE_ST_LB, rParam.rLowerIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_LB, rParam.rLowerIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_LB, rParam.rUpperIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_LB, rParam.rUpperIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_LB);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_UB = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_1.bits.SEEE_ST_UB, rParam.rLowerIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_UB, rParam.rLowerIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_UB, rParam.rUpperIso_LowerZoom.st_ctrl_1.bits.SEEE_ST_UB, rParam.rUpperIso_UpperZoom.st_ctrl_1.bits.SEEE_ST_UB);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_OFST_RESP = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_2.bits.SEEE_ST_OFST_RESP, rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP, rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP, rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP, rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_RESP);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_SL_RESP = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_2.bits.SEEE_ST_SL_RESP, rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP, rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP, rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP, rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_RESP);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_OFST_CE = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_2.bits.SEEE_ST_OFST_CE, rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE, rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE, rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE, rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_OFST_CE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_ST_SL_CE = %d, %d, %d, %d, %d", rSmoothEE.st_ctrl_2.bits.SEEE_ST_SL_CE, rParam.rLowerIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_CE, rParam.rLowerIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_CE, rParam.rUpperIso_LowerZoom.st_ctrl_2.bits.SEEE_ST_SL_CE, rParam.rUpperIso_UpperZoom.st_ctrl_2.bits.SEEE_ST_SL_CE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_EN = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_EN, rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN, rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN, rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN, rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_GAIN = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN, rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN, rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN, rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN, rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_LMT_L = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L, rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L, rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L, rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L, rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_L);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_LMT_U = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U, rParam.rLowerIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U, rParam.rLowerIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U, rParam.rUpperIso_LowerZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U, rParam.rUpperIso_UpperZoom.cboost_ctrl_1.bits.SEEE_CBOOST_LMT_U);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_YOFFSET_SEL = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL, rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL, rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL, rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL, rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET_SEL);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_YOFFSET = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET, rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET, rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET, rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET, rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YOFFSET);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_CBOOST_YCONST = %d, %d, %d, %d, %d", rSmoothEE.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST, rParam.rLowerIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST, rParam.rLowerIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST, rParam.rUpperIso_LowerZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST, rParam.rUpperIso_UpperZoom.cboost_ctrl_2.bits.SEEE_CBOOST_YCONST);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC_EN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_EN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_RSLOPE_1 = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1, rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1, rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1, rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1, rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE_1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_RSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE, rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE, rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE, rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE, rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_RADIUS_R = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R, rParam.rLowerIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R, rParam.rLowerIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R, rParam.rUpperIso_LowerZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R, rParam.rUpperIso_UpperZoom.pbc1_ctrl_1.bits.SEEE_PBC1_RADIUS_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_RADIUS_C = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C, rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C, rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C, rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C, rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_RADIUS_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_THETA_C = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C, rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C, rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C, rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C, rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_THETA_R = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R, rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R, rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R, rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R, rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_THETA_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_TSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE, rParam.rLowerIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE, rParam.rLowerIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE, rParam.rUpperIso_LowerZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE, rParam.rUpperIso_UpperZoom.pbc1_ctrl_2.bits.SEEE_PBC1_TSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_CONF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_EDGE_THR = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_EDGE_SLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_EDGE_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_LPF_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC1_LPF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN, rParam.rLowerIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN, rParam.rLowerIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN, rParam.rUpperIso_LowerZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN, rParam.rUpperIso_UpperZoom.pbc1_ctrl_3.bits.SEEE_PBC1_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_EN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_RSLOPE_1 = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1, rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1, rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1, rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1, rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE_1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_RSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE, rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE, rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE, rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE, rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_RADIUS_R = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R, rParam.rLowerIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R, rParam.rLowerIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R, rParam.rUpperIso_LowerZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R, rParam.rUpperIso_UpperZoom.pbc2_ctrl_1.bits.SEEE_PBC2_RADIUS_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_RADIUS_C = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C, rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C, rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C, rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C, rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_RADIUS_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_THETA_C = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C, rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C, rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C, rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C, rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_THETA_R = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R, rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R, rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R, rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R, rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_THETA_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_TSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE, rParam.rLowerIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE, rParam.rLowerIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE, rParam.rUpperIso_LowerZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE, rParam.rUpperIso_UpperZoom.pbc2_ctrl_2.bits.SEEE_PBC2_TSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_CONF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_EDGE_THR = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_EDGE_SLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_EDGE_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_LPF_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC2_LPF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN, rParam.rLowerIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN, rParam.rLowerIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN, rParam.rUpperIso_LowerZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN, rParam.rUpperIso_UpperZoom.pbc2_ctrl_3.bits.SEEE_PBC2_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_EN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_RSLOPE_1 = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1, rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1, rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1, rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1, rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE_1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_RSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE, rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE, rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE, rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE, rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_RADIUS_R = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R, rParam.rLowerIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R, rParam.rLowerIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R, rParam.rUpperIso_LowerZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R, rParam.rUpperIso_UpperZoom.pbc3_ctrl_1.bits.SEEE_PBC3_RADIUS_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_RADIUS_C = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C, rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C, rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C, rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C, rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_RADIUS_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_THETA_C = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C, rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C, rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C, rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C, rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_C);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_THETA_R = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R, rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R, rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R, rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R, rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_THETA_R);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_TSLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE, rParam.rLowerIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE, rParam.rLowerIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE, rParam.rUpperIso_LowerZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE, rParam.rUpperIso_UpperZoom.pbc3_ctrl_2.bits.SEEE_PBC3_TSLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_CONF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_EDGE_THR = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_EDGE_SLOPE = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_EDGE_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_LPF_EN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_PBC3_LPF_GAIN = %d, %d, %d, %d, %d", rSmoothEE.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN, rParam.rLowerIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN, rParam.rLowerIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN, rParam.rUpperIso_LowerZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN, rParam.rUpperIso_UpperZoom.pbc3_ctrl_3.bits.SEEE_PBC3_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_LINK_EN = %d, %d, %d, %d, %d", rSmoothEE.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN, rParam.rLowerIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN, rParam.rLowerIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN, rParam.rUpperIso_LowerZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN, rParam.rUpperIso_UpperZoom.luma_slnk_ctrl.bits.SEEE_GLUT_LINK_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_S1 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_1.bits.SEEE_GLUT_S1, rParam.rLowerIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_S1, rParam.rLowerIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_S1, rParam.rUpperIso_LowerZoom.glut_ctrl_1.bits.SEEE_GLUT_S1, rParam.rUpperIso_UpperZoom.glut_ctrl_1.bits.SEEE_GLUT_S1);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_S2 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_2.bits.SEEE_GLUT_S2, rParam.rLowerIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_S2, rParam.rLowerIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_S2, rParam.rUpperIso_LowerZoom.glut_ctrl_2.bits.SEEE_GLUT_S2, rParam.rUpperIso_UpperZoom.glut_ctrl_2.bits.SEEE_GLUT_S2);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_S3 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_3.bits.SEEE_GLUT_S3, rParam.rLowerIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_S3, rParam.rLowerIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_S3, rParam.rUpperIso_LowerZoom.glut_ctrl_3.bits.SEEE_GLUT_S3, rParam.rUpperIso_UpperZoom.glut_ctrl_3.bits.SEEE_GLUT_S3);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_S4 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_4.bits.SEEE_GLUT_S4, rParam.rLowerIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_S4, rParam.rLowerIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_S4, rParam.rUpperIso_LowerZoom.glut_ctrl_4.bits.SEEE_GLUT_S4, rParam.rUpperIso_UpperZoom.glut_ctrl_4.bits.SEEE_GLUT_S4);
    INTER_LOG_IF(bSmoothEEDebug, "[S, L_L, L_U, U_L, U_U]SEEE_GLUT_S5 = %d, %d, %d, %d, %d", rSmoothEE.glut_ctrl_5.bits.SEEE_GLUT_S5, rParam.rLowerIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_S5, rParam.rLowerIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_S5, rParam.rUpperIso_LowerZoom.glut_ctrl_5.bits.SEEE_GLUT_S5, rParam.rUpperIso_UpperZoom.glut_ctrl_5.bits.SEEE_GLUT_S5);


}

MVOID SmoothHFG(ISP_NVRAM_HFG_INT_T const& rParam,   // HFG settings
                ISP_NVRAM_HFG_T& rSmoothHFG)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_hfg.enable", value, "0");
    MBOOL bSmoothHFGDebug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothHFGDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothHFGDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 DIP_HFC_STD_L_L		= rParam.rLowerIso_LowerZoom.con_0.bits.DIP_HFC_STD;
    MINT32 HFC_LUMA_CPX1_L_L		= rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX1;
    MINT32 HFC_LUMA_CPX2_L_L		= rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX2;
    MINT32 HFC_LUMA_CPX3_L_L		= rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX3;
    MINT32 HFC_LUMA_CPY0_L_L		= rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY0;
    MINT32 HFC_LUMA_CPY1_L_L		= rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY1;
    MINT32 HFC_LUMA_CPY2_L_L		= rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY2;
    MINT32 HFC_LUMA_CPY3_L_L		= rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY3;
    MINT32 HFC_LCE_CPX1_L_L		= rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX1;
    MINT32 HFC_LCE_CPX2_L_L		= rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX2;
    MINT32 HFC_LCE_CPX3_L_L		= rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX3;
    MINT32 HFC_LCE_CPY0_L_L		= rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY0;
    MINT32 HFC_LCE_CPY1_L_L		= rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY1;
    MINT32 HFC_LCE_CPY2_L_L		= rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY2;
    MINT32 HFC_LCE_CPY3_L_L		= rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY3;
    MINT32 HFC_LCE_LINK_EN_L_L		= rParam.rLowerIso_LowerZoom.con_0.bits.HFC_LCE_LINK_EN;

    MINT32 DIP_HFC_STD_L_U		= rParam.rLowerIso_UpperZoom.con_0.bits.DIP_HFC_STD;
    MINT32 HFC_LUMA_CPX1_L_U		= rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX1;
    MINT32 HFC_LUMA_CPX2_L_U		= rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX2;
    MINT32 HFC_LUMA_CPX3_L_U		= rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX3;
    MINT32 HFC_LUMA_CPY0_L_U		= rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY0;
    MINT32 HFC_LUMA_CPY1_L_U		= rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY1;
    MINT32 HFC_LUMA_CPY2_L_U		= rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY2;
    MINT32 HFC_LUMA_CPY3_L_U		= rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY3;
    MINT32 HFC_LCE_CPX1_L_U		= rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX1;
    MINT32 HFC_LCE_CPX2_L_U		= rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX2;
    MINT32 HFC_LCE_CPX3_L_U		= rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX3;
    MINT32 HFC_LCE_CPY0_L_U		= rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY0;
    MINT32 HFC_LCE_CPY1_L_U		= rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY1;
    MINT32 HFC_LCE_CPY2_L_U		= rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY2;
    MINT32 HFC_LCE_CPY3_L_U		= rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY3;
    MINT32 HFC_LCE_LINK_EN_L_U		= rParam.rLowerIso_UpperZoom.con_0.bits.HFC_LCE_LINK_EN;

    MINT32 DIP_HFC_STD_U_L		= rParam.rUpperIso_LowerZoom.con_0.bits.DIP_HFC_STD;
    MINT32 HFC_LUMA_CPX1_U_L		= rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX1;
    MINT32 HFC_LUMA_CPX2_U_L		= rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX2;
    MINT32 HFC_LUMA_CPX3_U_L		= rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX3;
    MINT32 HFC_LUMA_CPY0_U_L		= rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY0;
    MINT32 HFC_LUMA_CPY1_U_L		= rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY1;
    MINT32 HFC_LUMA_CPY2_U_L		= rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY2;
    MINT32 HFC_LUMA_CPY3_U_L		= rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY3;
    MINT32 HFC_LCE_CPX1_U_L		= rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX1;
    MINT32 HFC_LCE_CPX2_U_L		= rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX2;
    MINT32 HFC_LCE_CPX3_U_L		= rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX3;
    MINT32 HFC_LCE_CPY0_U_L		= rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY0;
    MINT32 HFC_LCE_CPY1_U_L		= rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY1;
    MINT32 HFC_LCE_CPY2_U_L		= rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY2;
    MINT32 HFC_LCE_CPY3_U_L		= rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY3;
    MINT32 HFC_LCE_LINK_EN_U_L		= rParam.rUpperIso_LowerZoom.con_0.bits.HFC_LCE_LINK_EN;

    MINT32 DIP_HFC_STD_U_U		= rParam.rUpperIso_UpperZoom.con_0.bits.DIP_HFC_STD;
    MINT32 HFC_LUMA_CPX1_U_U		= rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX1;
    MINT32 HFC_LUMA_CPX2_U_U		= rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX2;
    MINT32 HFC_LUMA_CPX3_U_U		= rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX3;
    MINT32 HFC_LUMA_CPY0_U_U		= rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY0;
    MINT32 HFC_LUMA_CPY1_U_U		= rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY1;
    MINT32 HFC_LUMA_CPY2_U_U		= rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY2;
    MINT32 HFC_LUMA_CPY3_U_U		= rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY3;
    MINT32 HFC_LCE_CPX1_U_U		= rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX1;
    MINT32 HFC_LCE_CPX2_U_U		= rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX2;
    MINT32 HFC_LCE_CPX3_U_U		= rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX3;
    MINT32 HFC_LCE_CPY0_U_U		= rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY0;
    MINT32 HFC_LCE_CPY1_U_U		= rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY1;
    MINT32 HFC_LCE_CPY2_U_U		= rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY2;
    MINT32 HFC_LCE_CPY3_U_U		= rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY3;
    MINT32 HFC_LCE_LINK_EN_U_U		= rParam.rUpperIso_UpperZoom.con_0.bits.HFC_LCE_LINK_EN;


    // interpolation core
    MINT32 DIP_HFC_STD		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, DIP_HFC_STD_L_L, DIP_HFC_STD_L_U, DIP_HFC_STD_U_L, DIP_HFC_STD_U_U, 4);
    MINT32 HFC_LUMA_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPX1_L_L, HFC_LUMA_CPX1_L_U, HFC_LUMA_CPX1_U_L, HFC_LUMA_CPX1_U_U, 4);
    MINT32 HFC_LUMA_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPX2_L_L, HFC_LUMA_CPX2_L_U, HFC_LUMA_CPX2_U_L, HFC_LUMA_CPX2_U_U, 4);
    MINT32 HFC_LUMA_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPX3_L_L, HFC_LUMA_CPX3_L_U, HFC_LUMA_CPX3_U_L, HFC_LUMA_CPX3_U_U, 4);
    MINT32 HFC_LUMA_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPY0_L_L, HFC_LUMA_CPY0_L_U, HFC_LUMA_CPY0_U_L, HFC_LUMA_CPY0_U_U, 4);
    MINT32 HFC_LUMA_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPY1_L_L, HFC_LUMA_CPY1_L_U, HFC_LUMA_CPY1_U_L, HFC_LUMA_CPY1_U_U, 4);
    MINT32 HFC_LUMA_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPY2_L_L, HFC_LUMA_CPY2_L_U, HFC_LUMA_CPY2_U_L, HFC_LUMA_CPY2_U_U, 4);
    MINT32 HFC_LUMA_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_CPY3_L_L, HFC_LUMA_CPY3_L_U, HFC_LUMA_CPY3_U_L, HFC_LUMA_CPY3_U_U, 4);
    MINT32 HFC_LCE_CPX1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPX1_L_L, HFC_LCE_CPX1_L_U, HFC_LCE_CPX1_U_L, HFC_LCE_CPX1_U_U, 4);
    MINT32 HFC_LCE_CPX2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPX2_L_L, HFC_LCE_CPX2_L_U, HFC_LCE_CPX2_U_L, HFC_LCE_CPX2_U_U, 4);
    MINT32 HFC_LCE_CPX3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPX3_L_L, HFC_LCE_CPX3_L_U, HFC_LCE_CPX3_U_L, HFC_LCE_CPX3_U_U, 4);
    MINT32 HFC_LCE_CPY0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPY0_L_L, HFC_LCE_CPY0_L_U, HFC_LCE_CPY0_U_L, HFC_LCE_CPY0_U_U, 4);
    MINT32 HFC_LCE_CPY1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPY1_L_L, HFC_LCE_CPY1_L_U, HFC_LCE_CPY1_U_L, HFC_LCE_CPY1_U_U, 4);
    MINT32 HFC_LCE_CPY2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPY2_L_L, HFC_LCE_CPY2_L_U, HFC_LCE_CPY2_U_L, HFC_LCE_CPY2_U_U, 4);
    MINT32 HFC_LCE_CPY3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_CPY3_L_L, HFC_LCE_CPY3_L_U, HFC_LCE_CPY3_U_L, HFC_LCE_CPY3_U_U, 4);
    MINT32 HFC_LCE_LINK_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_LINK_EN_L_L, HFC_LCE_LINK_EN_L_U, HFC_LCE_LINK_EN_U_L, HFC_LCE_LINK_EN_U_U, 5);
    MINT32 HFC_LUMA_SP0    = CalculateLUTSP(   0, HFC_LUMA_CPX1, HFC_LUMA_CPY0, HFC_LUMA_CPY1, 64, 15, -15);
    HFC_LUMA_SP0  = Convert2Pos(HFC_LUMA_SP0,32);
    MINT32 HFC_LUMA_SP1    = CalculateLUTSP(   HFC_LUMA_CPX1, HFC_LUMA_CPX2, HFC_LUMA_CPY1, HFC_LUMA_CPY2, 64, 15, -15);
    HFC_LUMA_SP1  = Convert2Pos(HFC_LUMA_SP1,32);
    MINT32 HFC_LUMA_SP2    = CalculateLUTSP(   HFC_LUMA_CPX2, HFC_LUMA_CPX3, HFC_LUMA_CPY2, HFC_LUMA_CPY3, 64, 15, -15);
    HFC_LUMA_SP2  = Convert2Pos(HFC_LUMA_SP2,32);
     MINT32 HFC_LUMA_SP3_L_L  = rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LUMA_SP3_L_U  = rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LUMA_SP3_U_L  = rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LUMA_SP3_U_U  = rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3;
    HFC_LUMA_SP3_L_L = Convert2Neg(HFC_LUMA_SP3_L_L,32);
    HFC_LUMA_SP3_L_U = Convert2Neg(HFC_LUMA_SP3_L_U,32);
    HFC_LUMA_SP3_U_L = Convert2Neg(HFC_LUMA_SP3_U_L,32);
    HFC_LUMA_SP3_U_U = Convert2Neg(HFC_LUMA_SP3_U_U,32);
    MINT32 HFC_LUMA_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LUMA_SP3_L_L, HFC_LUMA_SP3_L_U, HFC_LUMA_SP3_U_L, HFC_LUMA_SP3_U_U, 4);
    HFC_LUMA_SP3  = Convert2Pos(HFC_LUMA_SP3,32);

    MINT32 HFC_LCE_SP0    = CalculateLUTSP(   0, HFC_LCE_CPX1, HFC_LCE_CPY0, HFC_LCE_CPY1, 64, 15, -15);
    HFC_LCE_SP0  = Convert2Pos(HFC_LCE_SP0,32);
    MINT32 HFC_LCE_SP1    = CalculateLUTSP(   HFC_LCE_CPX1, HFC_LCE_CPX2, HFC_LCE_CPY1, HFC_LCE_CPY2, 64, 15, -15);
    HFC_LCE_SP1  = Convert2Pos(HFC_LCE_SP1,32);
    MINT32 HFC_LCE_SP2    = CalculateLUTSP(   HFC_LCE_CPX2, HFC_LCE_CPX3, HFC_LCE_CPY2, HFC_LCE_CPY3, 64, 15, -15);
    HFC_LCE_SP2  = Convert2Pos(HFC_LCE_SP2,32);
     MINT32 HFC_LCE_SP3_L_L  = rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LCE_SP3_L_U  = rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LCE_SP3_U_L  = rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3;
    MINT32 HFC_LCE_SP3_U_U  = rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3;
    HFC_LCE_SP3_L_L = Convert2Neg(HFC_LCE_SP3_L_L,32);
    HFC_LCE_SP3_L_U = Convert2Neg(HFC_LCE_SP3_L_U,32);
    HFC_LCE_SP3_U_L = Convert2Neg(HFC_LCE_SP3_U_L,32);
    HFC_LCE_SP3_U_U = Convert2Neg(HFC_LCE_SP3_U_U,32);
    MINT32 HFC_LCE_SP3  = InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, HFC_LCE_SP3_L_L, HFC_LCE_SP3_L_U, HFC_LCE_SP3_U_L, HFC_LCE_SP3_U_U, 4);
    HFC_LCE_SP3  = Convert2Pos(HFC_LCE_SP3,32);



    // assign interpolation result
    rSmoothHFG.con_0.bits.DIP_HFC_STD       = DIP_HFC_STD;
    rSmoothHFG.luma_0.bits.HFC_LUMA_CPX1       = HFC_LUMA_CPX1;
    rSmoothHFG.luma_0.bits.HFC_LUMA_CPX2       = HFC_LUMA_CPX2;
    rSmoothHFG.luma_0.bits.HFC_LUMA_CPX3       = HFC_LUMA_CPX3;
    rSmoothHFG.luma_1.bits.HFC_LUMA_CPY0       = HFC_LUMA_CPY0;
    rSmoothHFG.luma_1.bits.HFC_LUMA_CPY1       = HFC_LUMA_CPY1;
    rSmoothHFG.luma_1.bits.HFC_LUMA_CPY2       = HFC_LUMA_CPY2;
    rSmoothHFG.luma_1.bits.HFC_LUMA_CPY3       = HFC_LUMA_CPY3;
    rSmoothHFG.lce_0.bits.HFC_LCE_CPX1       = HFC_LCE_CPX1;
    rSmoothHFG.lce_0.bits.HFC_LCE_CPX2       = HFC_LCE_CPX2;
    rSmoothHFG.lce_0.bits.HFC_LCE_CPX3       = HFC_LCE_CPX3;
    rSmoothHFG.lce_1.bits.HFC_LCE_CPY0       = HFC_LCE_CPY0;
    rSmoothHFG.lce_1.bits.HFC_LCE_CPY1       = HFC_LCE_CPY1;
    rSmoothHFG.lce_1.bits.HFC_LCE_CPY2       = HFC_LCE_CPY2;
    rSmoothHFG.lce_1.bits.HFC_LCE_CPY3       = HFC_LCE_CPY3;
    rSmoothHFG.con_0.bits.HFC_LCE_LINK_EN       = HFC_LCE_LINK_EN;
    rSmoothHFG.luma_2.bits.HFC_LUMA_SP0       = HFC_LUMA_SP0;
    rSmoothHFG.luma_2.bits.HFC_LUMA_SP1       = HFC_LUMA_SP1;
    rSmoothHFG.luma_2.bits.HFC_LUMA_SP2       = HFC_LUMA_SP2;
    rSmoothHFG.luma_2.bits.HFC_LUMA_SP3       = HFC_LUMA_SP3;
    rSmoothHFG.lce_2.bits.HFC_LCE_SP0       = HFC_LCE_SP0;
    rSmoothHFG.lce_2.bits.HFC_LCE_SP1       = HFC_LCE_SP1;
    rSmoothHFG.lce_2.bits.HFC_LCE_SP2       = HFC_LCE_SP2;
    rSmoothHFG.lce_2.bits.HFC_LCE_SP3       = HFC_LCE_SP3;


    // log
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]DIP_HFC_STD = %d, %d, %d, %d, %d", rSmoothHFG.con_0.bits.DIP_HFC_STD, rParam.rLowerIso_LowerZoom.con_0.bits.DIP_HFC_STD, rParam.rLowerIso_UpperZoom.con_0.bits.DIP_HFC_STD, rParam.rUpperIso_LowerZoom.con_0.bits.DIP_HFC_STD, rParam.rUpperIso_UpperZoom.con_0.bits.DIP_HFC_STD);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPX1 = %d, %d, %d, %d, %d", rSmoothHFG.luma_0.bits.HFC_LUMA_CPX1, rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX1, rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX1, rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX1, rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPX2 = %d, %d, %d, %d, %d", rSmoothHFG.luma_0.bits.HFC_LUMA_CPX2, rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX2, rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX2, rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX2, rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPX3 = %d, %d, %d, %d, %d", rSmoothHFG.luma_0.bits.HFC_LUMA_CPX3, rParam.rLowerIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX3, rParam.rLowerIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX3, rParam.rUpperIso_LowerZoom.luma_0.bits.HFC_LUMA_CPX3, rParam.rUpperIso_UpperZoom.luma_0.bits.HFC_LUMA_CPX3);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPY0 = %d, %d, %d, %d, %d", rSmoothHFG.luma_1.bits.HFC_LUMA_CPY0, rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY0, rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY0, rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY0, rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY0);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPY1 = %d, %d, %d, %d, %d", rSmoothHFG.luma_1.bits.HFC_LUMA_CPY1, rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY1, rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY1, rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY1, rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPY2 = %d, %d, %d, %d, %d", rSmoothHFG.luma_1.bits.HFC_LUMA_CPY2, rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY2, rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY2, rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY2, rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_CPY3 = %d, %d, %d, %d, %d", rSmoothHFG.luma_1.bits.HFC_LUMA_CPY3, rParam.rLowerIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY3, rParam.rLowerIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY3, rParam.rUpperIso_LowerZoom.luma_1.bits.HFC_LUMA_CPY3, rParam.rUpperIso_UpperZoom.luma_1.bits.HFC_LUMA_CPY3);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPX1 = %d, %d, %d, %d, %d", rSmoothHFG.lce_0.bits.HFC_LCE_CPX1, rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX1, rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX1, rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX1, rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPX2 = %d, %d, %d, %d, %d", rSmoothHFG.lce_0.bits.HFC_LCE_CPX2, rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX2, rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX2, rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX2, rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPX3 = %d, %d, %d, %d, %d", rSmoothHFG.lce_0.bits.HFC_LCE_CPX3, rParam.rLowerIso_LowerZoom.lce_0.bits.HFC_LCE_CPX3, rParam.rLowerIso_UpperZoom.lce_0.bits.HFC_LCE_CPX3, rParam.rUpperIso_LowerZoom.lce_0.bits.HFC_LCE_CPX3, rParam.rUpperIso_UpperZoom.lce_0.bits.HFC_LCE_CPX3);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPY0 = %d, %d, %d, %d, %d", rSmoothHFG.lce_1.bits.HFC_LCE_CPY0, rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY0, rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY0, rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY0, rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY0);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPY1 = %d, %d, %d, %d, %d", rSmoothHFG.lce_1.bits.HFC_LCE_CPY1, rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY1, rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY1, rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY1, rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPY2 = %d, %d, %d, %d, %d", rSmoothHFG.lce_1.bits.HFC_LCE_CPY2, rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY2, rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY2, rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY2, rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_CPY3 = %d, %d, %d, %d, %d", rSmoothHFG.lce_1.bits.HFC_LCE_CPY3, rParam.rLowerIso_LowerZoom.lce_1.bits.HFC_LCE_CPY3, rParam.rLowerIso_UpperZoom.lce_1.bits.HFC_LCE_CPY3, rParam.rUpperIso_LowerZoom.lce_1.bits.HFC_LCE_CPY3, rParam.rUpperIso_UpperZoom.lce_1.bits.HFC_LCE_CPY3);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_LINK_EN = %d, %d, %d, %d, %d", rSmoothHFG.con_0.bits.HFC_LCE_LINK_EN, rParam.rLowerIso_LowerZoom.con_0.bits.HFC_LCE_LINK_EN, rParam.rLowerIso_UpperZoom.con_0.bits.HFC_LCE_LINK_EN, rParam.rUpperIso_LowerZoom.con_0.bits.HFC_LCE_LINK_EN, rParam.rUpperIso_UpperZoom.con_0.bits.HFC_LCE_LINK_EN);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_SP0 = %d, %d, %d, %d, %d", rSmoothHFG.luma_2.bits.HFC_LUMA_SP0, rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP0, rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP0, rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP0, rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP0);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_SP1 = %d, %d, %d, %d, %d", rSmoothHFG.luma_2.bits.HFC_LUMA_SP1, rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP1, rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP1, rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP1, rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_SP2 = %d, %d, %d, %d, %d", rSmoothHFG.luma_2.bits.HFC_LUMA_SP2, rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP2, rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP2, rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP2, rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LUMA_SP3 = %d, %d, %d, %d, %d", rSmoothHFG.luma_2.bits.HFC_LUMA_SP3, rParam.rLowerIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3, rParam.rLowerIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3, rParam.rUpperIso_LowerZoom.luma_2.bits.HFC_LUMA_SP3, rParam.rUpperIso_UpperZoom.luma_2.bits.HFC_LUMA_SP3);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_SP0 = %d, %d, %d, %d, %d", rSmoothHFG.lce_2.bits.HFC_LCE_SP0, rParam.rLowerIso_LowerZoom.lce_2.bits.HFC_LCE_SP0, rParam.rLowerIso_UpperZoom.lce_2.bits.HFC_LCE_SP0, rParam.rUpperIso_LowerZoom.lce_2.bits.HFC_LCE_SP0, rParam.rUpperIso_UpperZoom.lce_2.bits.HFC_LCE_SP0);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_SP1 = %d, %d, %d, %d, %d", rSmoothHFG.lce_2.bits.HFC_LCE_SP1, rParam.rLowerIso_LowerZoom.lce_2.bits.HFC_LCE_SP1, rParam.rLowerIso_UpperZoom.lce_2.bits.HFC_LCE_SP1, rParam.rUpperIso_LowerZoom.lce_2.bits.HFC_LCE_SP1, rParam.rUpperIso_UpperZoom.lce_2.bits.HFC_LCE_SP1);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_SP2 = %d, %d, %d, %d, %d", rSmoothHFG.lce_2.bits.HFC_LCE_SP2, rParam.rLowerIso_LowerZoom.lce_2.bits.HFC_LCE_SP2, rParam.rLowerIso_UpperZoom.lce_2.bits.HFC_LCE_SP2, rParam.rUpperIso_LowerZoom.lce_2.bits.HFC_LCE_SP2, rParam.rUpperIso_UpperZoom.lce_2.bits.HFC_LCE_SP2);
    INTER_LOG_IF(bSmoothHFGDebug, "[S, L_L, L_U, U_L, U_U]HFC_LCE_SP3 = %d, %d, %d, %d, %d", rSmoothHFG.lce_2.bits.HFC_LCE_SP3, rParam.rLowerIso_LowerZoom.lce_2.bits.HFC_LCE_SP3, rParam.rLowerIso_UpperZoom.lce_2.bits.HFC_LCE_SP3, rParam.rUpperIso_LowerZoom.lce_2.bits.HFC_LCE_SP3, rParam.rUpperIso_UpperZoom.lce_2.bits.HFC_LCE_SP3);


}


MVOID SmoothMFB(ISP_NVRAM_MFB_INT_T const& rParam,   // MFB settings
                ISP_NVRAM_MFB_T& rSmoothMFB)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_mfb.enable", value, "0");
    MBOOL bSmoothMFBDebug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothMFBDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothMFBDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 BLD_LL_FLT_MODE_L_L		= rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_MODE;
    MINT32 BLD_LL_FLT_WT_MODE1_L_L		= rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1;
    MINT32 BLD_LL_TH2_L_L		= rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_TH2;
    MINT32 BLD_LL_TH1_L_L		= rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_TH1;
    MINT32 BLD_LL_DT1_L_L		= rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_DT1;
    MINT32 BLD_LL_MAX_WT_L_L		= rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_MAX_WT;
    MINT32 BLD_MBD_MAX_WT_L_L		= rParam.rLowerIso_LowerZoom.mbd_con0.bits.BLD_MBD_MAX_WT;
    MINT32 BLD_MBD_YL1_THL_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0;
    MINT32 BLD_MBD_YL1_THL_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1;
    MINT32 BLD_MBD_YL1_THL_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2;
    MINT32 BLD_MBD_YL1_THL_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3;
    MINT32 BLD_MBD_YL1_THL_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4;
    MINT32 BLD_MBD_YL1_THH_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0;
    MINT32 BLD_MBD_YL1_THH_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1;
    MINT32 BLD_MBD_YL1_THH_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2;
    MINT32 BLD_MBD_YL1_THH_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3;
    MINT32 BLD_MBD_YL1_THH_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4;
    MINT32 BLD_MBD_YL2_THL_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0;
    MINT32 BLD_MBD_YL2_THL_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1;
    MINT32 BLD_MBD_YL2_THL_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2;
    MINT32 BLD_MBD_YL2_THL_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3;
    MINT32 BLD_MBD_YL2_THL_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4;
    MINT32 BLD_MBD_YL2_THH_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0;
    MINT32 BLD_MBD_YL2_THH_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1;
    MINT32 BLD_MBD_YL2_THH_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2;
    MINT32 BLD_MBD_YL2_THH_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3;
    MINT32 BLD_MBD_YL2_THH_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4;
    MINT32 BLD_MBD_YL3_THL_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0;
    MINT32 BLD_MBD_YL3_THL_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1;
    MINT32 BLD_MBD_YL3_THL_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2;
    MINT32 BLD_MBD_YL3_THL_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3;
    MINT32 BLD_MBD_YL3_THL_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4;
    MINT32 BLD_MBD_YL3_THH_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0;
    MINT32 BLD_MBD_YL3_THH_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1;
    MINT32 BLD_MBD_YL3_THH_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2;
    MINT32 BLD_MBD_YL3_THH_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3;
    MINT32 BLD_MBD_YL3_THH_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4;
    MINT32 BLD_MBD_CL1_THL_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0;
    MINT32 BLD_MBD_CL1_THL_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1;
    MINT32 BLD_MBD_CL1_THL_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2;
    MINT32 BLD_MBD_CL1_THL_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3;
    MINT32 BLD_MBD_CL1_THL_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4;
    MINT32 BLD_MBD_CL1_THH_0_L_L		= rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0;
    MINT32 BLD_MBD_CL1_THH_1_L_L		= rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1;
    MINT32 BLD_MBD_CL1_THH_2_L_L		= rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2;
    MINT32 BLD_MBD_CL1_THH_3_L_L		= rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3;
    MINT32 BLD_MBD_CL1_THH_4_L_L		= rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4;
    MINT32 BLD_LL_FLT_WT_MODE2_L_L		= rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2;
    MINT32 BLD_LL_CLIP_TH1_L_L		= rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH1;
    MINT32 BLD_LL_CLIP_TH2_L_L		= rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH2;

    MINT32 BLD_LL_FLT_MODE_L_U		= rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_MODE;
    MINT32 BLD_LL_FLT_WT_MODE1_L_U		= rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1;
    MINT32 BLD_LL_TH2_L_U		= rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_TH2;
    MINT32 BLD_LL_TH1_L_U		= rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_TH1;
    MINT32 BLD_LL_DT1_L_U		= rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_DT1;
    MINT32 BLD_LL_MAX_WT_L_U		= rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_MAX_WT;
    MINT32 BLD_MBD_MAX_WT_L_U		= rParam.rLowerIso_UpperZoom.mbd_con0.bits.BLD_MBD_MAX_WT;
    MINT32 BLD_MBD_YL1_THL_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0;
    MINT32 BLD_MBD_YL1_THL_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1;
    MINT32 BLD_MBD_YL1_THL_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2;
    MINT32 BLD_MBD_YL1_THL_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3;
    MINT32 BLD_MBD_YL1_THL_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4;
    MINT32 BLD_MBD_YL1_THH_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0;
    MINT32 BLD_MBD_YL1_THH_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1;
    MINT32 BLD_MBD_YL1_THH_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2;
    MINT32 BLD_MBD_YL1_THH_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3;
    MINT32 BLD_MBD_YL1_THH_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4;
    MINT32 BLD_MBD_YL2_THL_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0;
    MINT32 BLD_MBD_YL2_THL_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1;
    MINT32 BLD_MBD_YL2_THL_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2;
    MINT32 BLD_MBD_YL2_THL_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3;
    MINT32 BLD_MBD_YL2_THL_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4;
    MINT32 BLD_MBD_YL2_THH_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0;
    MINT32 BLD_MBD_YL2_THH_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1;
    MINT32 BLD_MBD_YL2_THH_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2;
    MINT32 BLD_MBD_YL2_THH_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3;
    MINT32 BLD_MBD_YL2_THH_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4;
    MINT32 BLD_MBD_YL3_THL_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0;
    MINT32 BLD_MBD_YL3_THL_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1;
    MINT32 BLD_MBD_YL3_THL_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2;
    MINT32 BLD_MBD_YL3_THL_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3;
    MINT32 BLD_MBD_YL3_THL_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4;
    MINT32 BLD_MBD_YL3_THH_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0;
    MINT32 BLD_MBD_YL3_THH_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1;
    MINT32 BLD_MBD_YL3_THH_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2;
    MINT32 BLD_MBD_YL3_THH_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3;
    MINT32 BLD_MBD_YL3_THH_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4;
    MINT32 BLD_MBD_CL1_THL_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0;
    MINT32 BLD_MBD_CL1_THL_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1;
    MINT32 BLD_MBD_CL1_THL_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2;
    MINT32 BLD_MBD_CL1_THL_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3;
    MINT32 BLD_MBD_CL1_THL_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4;
    MINT32 BLD_MBD_CL1_THH_0_L_U		= rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0;
    MINT32 BLD_MBD_CL1_THH_1_L_U		= rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1;
    MINT32 BLD_MBD_CL1_THH_2_L_U		= rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2;
    MINT32 BLD_MBD_CL1_THH_3_L_U		= rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3;
    MINT32 BLD_MBD_CL1_THH_4_L_U		= rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4;
    MINT32 BLD_LL_FLT_WT_MODE2_L_U		= rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2;
    MINT32 BLD_LL_CLIP_TH1_L_U		= rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH1;
    MINT32 BLD_LL_CLIP_TH2_L_U		= rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH2;

    MINT32 BLD_LL_FLT_MODE_U_L		= rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_MODE;
    MINT32 BLD_LL_FLT_WT_MODE1_U_L		= rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1;
    MINT32 BLD_LL_TH2_U_L		= rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_TH2;
    MINT32 BLD_LL_TH1_U_L		= rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_TH1;
    MINT32 BLD_LL_DT1_U_L		= rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_DT1;
    MINT32 BLD_LL_MAX_WT_U_L		= rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_MAX_WT;
    MINT32 BLD_MBD_MAX_WT_U_L		= rParam.rUpperIso_LowerZoom.mbd_con0.bits.BLD_MBD_MAX_WT;
    MINT32 BLD_MBD_YL1_THL_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0;
    MINT32 BLD_MBD_YL1_THL_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1;
    MINT32 BLD_MBD_YL1_THL_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2;
    MINT32 BLD_MBD_YL1_THL_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3;
    MINT32 BLD_MBD_YL1_THL_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4;
    MINT32 BLD_MBD_YL1_THH_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0;
    MINT32 BLD_MBD_YL1_THH_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1;
    MINT32 BLD_MBD_YL1_THH_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2;
    MINT32 BLD_MBD_YL1_THH_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3;
    MINT32 BLD_MBD_YL1_THH_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4;
    MINT32 BLD_MBD_YL2_THL_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0;
    MINT32 BLD_MBD_YL2_THL_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1;
    MINT32 BLD_MBD_YL2_THL_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2;
    MINT32 BLD_MBD_YL2_THL_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3;
    MINT32 BLD_MBD_YL2_THL_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4;
    MINT32 BLD_MBD_YL2_THH_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0;
    MINT32 BLD_MBD_YL2_THH_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1;
    MINT32 BLD_MBD_YL2_THH_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2;
    MINT32 BLD_MBD_YL2_THH_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3;
    MINT32 BLD_MBD_YL2_THH_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4;
    MINT32 BLD_MBD_YL3_THL_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0;
    MINT32 BLD_MBD_YL3_THL_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1;
    MINT32 BLD_MBD_YL3_THL_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2;
    MINT32 BLD_MBD_YL3_THL_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3;
    MINT32 BLD_MBD_YL3_THL_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4;
    MINT32 BLD_MBD_YL3_THH_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0;
    MINT32 BLD_MBD_YL3_THH_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1;
    MINT32 BLD_MBD_YL3_THH_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2;
    MINT32 BLD_MBD_YL3_THH_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3;
    MINT32 BLD_MBD_YL3_THH_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4;
    MINT32 BLD_MBD_CL1_THL_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0;
    MINT32 BLD_MBD_CL1_THL_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1;
    MINT32 BLD_MBD_CL1_THL_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2;
    MINT32 BLD_MBD_CL1_THL_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3;
    MINT32 BLD_MBD_CL1_THL_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4;
    MINT32 BLD_MBD_CL1_THH_0_U_L		= rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0;
    MINT32 BLD_MBD_CL1_THH_1_U_L		= rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1;
    MINT32 BLD_MBD_CL1_THH_2_U_L		= rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2;
    MINT32 BLD_MBD_CL1_THH_3_U_L		= rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3;
    MINT32 BLD_MBD_CL1_THH_4_U_L		= rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4;
    MINT32 BLD_LL_FLT_WT_MODE2_U_L		= rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2;
    MINT32 BLD_LL_CLIP_TH1_U_L		= rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH1;
    MINT32 BLD_LL_CLIP_TH2_U_L		= rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH2;

    MINT32 BLD_LL_FLT_MODE_U_U		= rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_MODE;
    MINT32 BLD_LL_FLT_WT_MODE1_U_U		= rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1;
    MINT32 BLD_LL_TH2_U_U		= rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_TH2;
    MINT32 BLD_LL_TH1_U_U		= rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_TH1;
    MINT32 BLD_LL_DT1_U_U		= rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_DT1;
    MINT32 BLD_LL_MAX_WT_U_U		= rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_MAX_WT;
    MINT32 BLD_MBD_MAX_WT_U_U		= rParam.rUpperIso_UpperZoom.mbd_con0.bits.BLD_MBD_MAX_WT;
    MINT32 BLD_MBD_YL1_THL_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0;
    MINT32 BLD_MBD_YL1_THL_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1;
    MINT32 BLD_MBD_YL1_THL_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2;
    MINT32 BLD_MBD_YL1_THL_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3;
    MINT32 BLD_MBD_YL1_THL_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4;
    MINT32 BLD_MBD_YL1_THH_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0;
    MINT32 BLD_MBD_YL1_THH_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1;
    MINT32 BLD_MBD_YL1_THH_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2;
    MINT32 BLD_MBD_YL1_THH_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3;
    MINT32 BLD_MBD_YL1_THH_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4;
    MINT32 BLD_MBD_YL2_THL_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0;
    MINT32 BLD_MBD_YL2_THL_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1;
    MINT32 BLD_MBD_YL2_THL_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2;
    MINT32 BLD_MBD_YL2_THL_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3;
    MINT32 BLD_MBD_YL2_THL_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4;
    MINT32 BLD_MBD_YL2_THH_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0;
    MINT32 BLD_MBD_YL2_THH_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1;
    MINT32 BLD_MBD_YL2_THH_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2;
    MINT32 BLD_MBD_YL2_THH_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3;
    MINT32 BLD_MBD_YL2_THH_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4;
    MINT32 BLD_MBD_YL3_THL_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0;
    MINT32 BLD_MBD_YL3_THL_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1;
    MINT32 BLD_MBD_YL3_THL_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2;
    MINT32 BLD_MBD_YL3_THL_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3;
    MINT32 BLD_MBD_YL3_THL_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4;
    MINT32 BLD_MBD_YL3_THH_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0;
    MINT32 BLD_MBD_YL3_THH_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1;
    MINT32 BLD_MBD_YL3_THH_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2;
    MINT32 BLD_MBD_YL3_THH_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3;
    MINT32 BLD_MBD_YL3_THH_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4;
    MINT32 BLD_MBD_CL1_THL_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0;
    MINT32 BLD_MBD_CL1_THL_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1;
    MINT32 BLD_MBD_CL1_THL_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2;
    MINT32 BLD_MBD_CL1_THL_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3;
    MINT32 BLD_MBD_CL1_THL_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4;
    MINT32 BLD_MBD_CL1_THH_0_U_U		= rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0;
    MINT32 BLD_MBD_CL1_THH_1_U_U		= rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1;
    MINT32 BLD_MBD_CL1_THH_2_U_U		= rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2;
    MINT32 BLD_MBD_CL1_THH_3_U_U		= rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3;
    MINT32 BLD_MBD_CL1_THH_4_U_U		= rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4;
    MINT32 BLD_LL_FLT_WT_MODE2_U_U		= rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2;
    MINT32 BLD_LL_CLIP_TH1_U_U		= rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH1;
    MINT32 BLD_LL_CLIP_TH2_U_U		= rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH2;


    // interpolation core
    MINT32 BLD_LL_FLT_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_FLT_MODE_L_L, BLD_LL_FLT_MODE_L_U, BLD_LL_FLT_MODE_U_L, BLD_LL_FLT_MODE_U_U, 4);
    MINT32 BLD_LL_FLT_WT_MODE1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_FLT_WT_MODE1_L_L, BLD_LL_FLT_WT_MODE1_L_U, BLD_LL_FLT_WT_MODE1_U_L, BLD_LL_FLT_WT_MODE1_U_U, 4);
    MINT32 BLD_LL_TH2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_TH2_L_L, BLD_LL_TH2_L_U, BLD_LL_TH2_U_L, BLD_LL_TH2_U_U, 4);
    MINT32 BLD_LL_TH1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_TH1_L_L, BLD_LL_TH1_L_U, BLD_LL_TH1_U_L, BLD_LL_TH1_U_U, 4);
    MINT32 BLD_LL_DT1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_DT1_L_L, BLD_LL_DT1_L_U, BLD_LL_DT1_U_L, BLD_LL_DT1_U_U, 4);
    MINT32 BLD_LL_MAX_WT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_MAX_WT_L_L, BLD_LL_MAX_WT_L_U, BLD_LL_MAX_WT_U_L, BLD_LL_MAX_WT_U_U, 4);
    MINT32 BLD_MBD_MAX_WT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_MAX_WT_L_L, BLD_MBD_MAX_WT_L_U, BLD_MBD_MAX_WT_U_L, BLD_MBD_MAX_WT_U_U, 4);
    MINT32 BLD_MBD_YL1_THL_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THL_0_L_L, BLD_MBD_YL1_THL_0_L_U, BLD_MBD_YL1_THL_0_U_L, BLD_MBD_YL1_THL_0_U_U, 4);
    MINT32 BLD_MBD_YL1_THL_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THL_1_L_L, BLD_MBD_YL1_THL_1_L_U, BLD_MBD_YL1_THL_1_U_L, BLD_MBD_YL1_THL_1_U_U, 4);
    MINT32 BLD_MBD_YL1_THL_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THL_2_L_L, BLD_MBD_YL1_THL_2_L_U, BLD_MBD_YL1_THL_2_U_L, BLD_MBD_YL1_THL_2_U_U, 4);
    MINT32 BLD_MBD_YL1_THL_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THL_3_L_L, BLD_MBD_YL1_THL_3_L_U, BLD_MBD_YL1_THL_3_U_L, BLD_MBD_YL1_THL_3_U_U, 4);
    MINT32 BLD_MBD_YL1_THL_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THL_4_L_L, BLD_MBD_YL1_THL_4_L_U, BLD_MBD_YL1_THL_4_U_L, BLD_MBD_YL1_THL_4_U_U, 4);
    MINT32 BLD_MBD_YL1_THH_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THH_0_L_L, BLD_MBD_YL1_THH_0_L_U, BLD_MBD_YL1_THH_0_U_L, BLD_MBD_YL1_THH_0_U_U, 4);
    MINT32 BLD_MBD_YL1_THH_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THH_1_L_L, BLD_MBD_YL1_THH_1_L_U, BLD_MBD_YL1_THH_1_U_L, BLD_MBD_YL1_THH_1_U_U, 4);
    MINT32 BLD_MBD_YL1_THH_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THH_2_L_L, BLD_MBD_YL1_THH_2_L_U, BLD_MBD_YL1_THH_2_U_L, BLD_MBD_YL1_THH_2_U_U, 4);
    MINT32 BLD_MBD_YL1_THH_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THH_3_L_L, BLD_MBD_YL1_THH_3_L_U, BLD_MBD_YL1_THH_3_U_L, BLD_MBD_YL1_THH_3_U_U, 4);
    MINT32 BLD_MBD_YL1_THH_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL1_THH_4_L_L, BLD_MBD_YL1_THH_4_L_U, BLD_MBD_YL1_THH_4_U_L, BLD_MBD_YL1_THH_4_U_U, 4);
    MINT32 BLD_MBD_YL2_THL_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THL_0_L_L, BLD_MBD_YL2_THL_0_L_U, BLD_MBD_YL2_THL_0_U_L, BLD_MBD_YL2_THL_0_U_U, 4);
    MINT32 BLD_MBD_YL2_THL_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THL_1_L_L, BLD_MBD_YL2_THL_1_L_U, BLD_MBD_YL2_THL_1_U_L, BLD_MBD_YL2_THL_1_U_U, 4);
    MINT32 BLD_MBD_YL2_THL_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THL_2_L_L, BLD_MBD_YL2_THL_2_L_U, BLD_MBD_YL2_THL_2_U_L, BLD_MBD_YL2_THL_2_U_U, 4);
    MINT32 BLD_MBD_YL2_THL_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THL_3_L_L, BLD_MBD_YL2_THL_3_L_U, BLD_MBD_YL2_THL_3_U_L, BLD_MBD_YL2_THL_3_U_U, 4);
    MINT32 BLD_MBD_YL2_THL_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THL_4_L_L, BLD_MBD_YL2_THL_4_L_U, BLD_MBD_YL2_THL_4_U_L, BLD_MBD_YL2_THL_4_U_U, 4);
    MINT32 BLD_MBD_YL2_THH_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THH_0_L_L, BLD_MBD_YL2_THH_0_L_U, BLD_MBD_YL2_THH_0_U_L, BLD_MBD_YL2_THH_0_U_U, 4);
    MINT32 BLD_MBD_YL2_THH_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THH_1_L_L, BLD_MBD_YL2_THH_1_L_U, BLD_MBD_YL2_THH_1_U_L, BLD_MBD_YL2_THH_1_U_U, 4);
    MINT32 BLD_MBD_YL2_THH_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THH_2_L_L, BLD_MBD_YL2_THH_2_L_U, BLD_MBD_YL2_THH_2_U_L, BLD_MBD_YL2_THH_2_U_U, 4);
    MINT32 BLD_MBD_YL2_THH_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THH_3_L_L, BLD_MBD_YL2_THH_3_L_U, BLD_MBD_YL2_THH_3_U_L, BLD_MBD_YL2_THH_3_U_U, 4);
    MINT32 BLD_MBD_YL2_THH_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL2_THH_4_L_L, BLD_MBD_YL2_THH_4_L_U, BLD_MBD_YL2_THH_4_U_L, BLD_MBD_YL2_THH_4_U_U, 4);
    MINT32 BLD_MBD_YL3_THL_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THL_0_L_L, BLD_MBD_YL3_THL_0_L_U, BLD_MBD_YL3_THL_0_U_L, BLD_MBD_YL3_THL_0_U_U, 4);
    MINT32 BLD_MBD_YL3_THL_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THL_1_L_L, BLD_MBD_YL3_THL_1_L_U, BLD_MBD_YL3_THL_1_U_L, BLD_MBD_YL3_THL_1_U_U, 4);
    MINT32 BLD_MBD_YL3_THL_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THL_2_L_L, BLD_MBD_YL3_THL_2_L_U, BLD_MBD_YL3_THL_2_U_L, BLD_MBD_YL3_THL_2_U_U, 4);
    MINT32 BLD_MBD_YL3_THL_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THL_3_L_L, BLD_MBD_YL3_THL_3_L_U, BLD_MBD_YL3_THL_3_U_L, BLD_MBD_YL3_THL_3_U_U, 4);
    MINT32 BLD_MBD_YL3_THL_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THL_4_L_L, BLD_MBD_YL3_THL_4_L_U, BLD_MBD_YL3_THL_4_U_L, BLD_MBD_YL3_THL_4_U_U, 4);
    MINT32 BLD_MBD_YL3_THH_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THH_0_L_L, BLD_MBD_YL3_THH_0_L_U, BLD_MBD_YL3_THH_0_U_L, BLD_MBD_YL3_THH_0_U_U, 4);
    MINT32 BLD_MBD_YL3_THH_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THH_1_L_L, BLD_MBD_YL3_THH_1_L_U, BLD_MBD_YL3_THH_1_U_L, BLD_MBD_YL3_THH_1_U_U, 4);
    MINT32 BLD_MBD_YL3_THH_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THH_2_L_L, BLD_MBD_YL3_THH_2_L_U, BLD_MBD_YL3_THH_2_U_L, BLD_MBD_YL3_THH_2_U_U, 4);
    MINT32 BLD_MBD_YL3_THH_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THH_3_L_L, BLD_MBD_YL3_THH_3_L_U, BLD_MBD_YL3_THH_3_U_L, BLD_MBD_YL3_THH_3_U_U, 4);
    MINT32 BLD_MBD_YL3_THH_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_YL3_THH_4_L_L, BLD_MBD_YL3_THH_4_L_U, BLD_MBD_YL3_THH_4_U_L, BLD_MBD_YL3_THH_4_U_U, 4);
    MINT32 BLD_MBD_CL1_THL_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THL_0_L_L, BLD_MBD_CL1_THL_0_L_U, BLD_MBD_CL1_THL_0_U_L, BLD_MBD_CL1_THL_0_U_U, 4);
    MINT32 BLD_MBD_CL1_THL_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THL_1_L_L, BLD_MBD_CL1_THL_1_L_U, BLD_MBD_CL1_THL_1_U_L, BLD_MBD_CL1_THL_1_U_U, 4);
    MINT32 BLD_MBD_CL1_THL_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THL_2_L_L, BLD_MBD_CL1_THL_2_L_U, BLD_MBD_CL1_THL_2_U_L, BLD_MBD_CL1_THL_2_U_U, 4);
    MINT32 BLD_MBD_CL1_THL_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THL_3_L_L, BLD_MBD_CL1_THL_3_L_U, BLD_MBD_CL1_THL_3_U_L, BLD_MBD_CL1_THL_3_U_U, 4);
    MINT32 BLD_MBD_CL1_THL_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THL_4_L_L, BLD_MBD_CL1_THL_4_L_U, BLD_MBD_CL1_THL_4_U_L, BLD_MBD_CL1_THL_4_U_U, 4);
    MINT32 BLD_MBD_CL1_THH_0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THH_0_L_L, BLD_MBD_CL1_THH_0_L_U, BLD_MBD_CL1_THH_0_U_L, BLD_MBD_CL1_THH_0_U_U, 4);
    MINT32 BLD_MBD_CL1_THH_1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THH_1_L_L, BLD_MBD_CL1_THH_1_L_U, BLD_MBD_CL1_THH_1_U_L, BLD_MBD_CL1_THH_1_U_U, 4);
    MINT32 BLD_MBD_CL1_THH_2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THH_2_L_L, BLD_MBD_CL1_THH_2_L_U, BLD_MBD_CL1_THH_2_U_L, BLD_MBD_CL1_THH_2_U_U, 4);
    MINT32 BLD_MBD_CL1_THH_3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THH_3_L_L, BLD_MBD_CL1_THH_3_L_U, BLD_MBD_CL1_THH_3_U_L, BLD_MBD_CL1_THH_3_U_U, 4);
    MINT32 BLD_MBD_CL1_THH_4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_MBD_CL1_THH_4_L_L, BLD_MBD_CL1_THH_4_L_U, BLD_MBD_CL1_THH_4_U_L, BLD_MBD_CL1_THH_4_U_U, 4);
    MINT32 BLD_LL_FLT_WT_MODE2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_FLT_WT_MODE2_L_L, BLD_LL_FLT_WT_MODE2_L_U, BLD_LL_FLT_WT_MODE2_U_L, BLD_LL_FLT_WT_MODE2_U_U, 5);
    MINT32 BLD_LL_CLIP_TH1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_CLIP_TH1_L_L, BLD_LL_CLIP_TH1_L_U, BLD_LL_CLIP_TH1_U_L, BLD_LL_CLIP_TH1_U_U, 5);
    MINT32 BLD_LL_CLIP_TH2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, BLD_LL_CLIP_TH2_L_L, BLD_LL_CLIP_TH2_L_U, BLD_LL_CLIP_TH2_U_L, BLD_LL_CLIP_TH2_U_U, 5);


    // assign interpolation result
    rSmoothMFB.ll_con1.bits.BLD_LL_FLT_MODE       = BLD_LL_FLT_MODE;
    rSmoothMFB.ll_con1.bits.BLD_LL_FLT_WT_MODE1       = BLD_LL_FLT_WT_MODE1;
    rSmoothMFB.ll_con2.bits.BLD_LL_TH2       = BLD_LL_TH2;
    rSmoothMFB.ll_con2.bits.BLD_LL_TH1       = BLD_LL_TH1;
    rSmoothMFB.ll_con2.bits.BLD_LL_DT1       = BLD_LL_DT1;
    rSmoothMFB.ll_con2.bits.BLD_LL_MAX_WT       = BLD_LL_MAX_WT;
    rSmoothMFB.mbd_con0.bits.BLD_MBD_MAX_WT       = BLD_MBD_MAX_WT;
    rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_0       = BLD_MBD_YL1_THL_0;
    rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_1       = BLD_MBD_YL1_THL_1;
    rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_2       = BLD_MBD_YL1_THL_2;
    rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_3       = BLD_MBD_YL1_THL_3;
    rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THL_4       = BLD_MBD_YL1_THL_4;
    rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_0       = BLD_MBD_YL1_THH_0;
    rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_1       = BLD_MBD_YL1_THH_1;
    rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_2       = BLD_MBD_YL1_THH_2;
    rSmoothMFB.mbd_con3.bits.BLD_MBD_YL1_THH_3       = BLD_MBD_YL1_THH_3;
    rSmoothMFB.mbd_con3.bits.BLD_MBD_YL1_THH_4       = BLD_MBD_YL1_THH_4;
    rSmoothMFB.mbd_con3.bits.BLD_MBD_YL2_THL_0       = BLD_MBD_YL2_THL_0;
    rSmoothMFB.mbd_con3.bits.BLD_MBD_YL2_THL_1       = BLD_MBD_YL2_THL_1;
    rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_2       = BLD_MBD_YL2_THL_2;
    rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_3       = BLD_MBD_YL2_THL_3;
    rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_4       = BLD_MBD_YL2_THL_4;
    rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THH_0       = BLD_MBD_YL2_THH_0;
    rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_1       = BLD_MBD_YL2_THH_1;
    rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_2       = BLD_MBD_YL2_THH_2;
    rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_3       = BLD_MBD_YL2_THH_3;
    rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_4       = BLD_MBD_YL2_THH_4;
    rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_0       = BLD_MBD_YL3_THL_0;
    rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_1       = BLD_MBD_YL3_THL_1;
    rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_2       = BLD_MBD_YL3_THL_2;
    rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_3       = BLD_MBD_YL3_THL_3;
    rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THL_4       = BLD_MBD_YL3_THL_4;
    rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_0       = BLD_MBD_YL3_THH_0;
    rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_1       = BLD_MBD_YL3_THH_1;
    rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_2       = BLD_MBD_YL3_THH_2;
    rSmoothMFB.mbd_con8.bits.BLD_MBD_YL3_THH_3       = BLD_MBD_YL3_THH_3;
    rSmoothMFB.mbd_con8.bits.BLD_MBD_YL3_THH_4       = BLD_MBD_YL3_THH_4;
    rSmoothMFB.mbd_con8.bits.BLD_MBD_CL1_THL_0       = BLD_MBD_CL1_THL_0;
    rSmoothMFB.mbd_con8.bits.BLD_MBD_CL1_THL_1       = BLD_MBD_CL1_THL_1;
    rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_2       = BLD_MBD_CL1_THL_2;
    rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_3       = BLD_MBD_CL1_THL_3;
    rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_4       = BLD_MBD_CL1_THL_4;
    rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THH_0       = BLD_MBD_CL1_THH_0;
    rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_1       = BLD_MBD_CL1_THH_1;
    rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_2       = BLD_MBD_CL1_THH_2;
    rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_3       = BLD_MBD_CL1_THH_3;
    rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_4       = BLD_MBD_CL1_THH_4;
    rSmoothMFB.ll_con1.bits.BLD_LL_FLT_WT_MODE2       = BLD_LL_FLT_WT_MODE2;
    rSmoothMFB.ll_con1.bits.BLD_LL_CLIP_TH1       = BLD_LL_CLIP_TH1;
    rSmoothMFB.ll_con1.bits.BLD_LL_CLIP_TH2       = BLD_LL_CLIP_TH2;


    // log
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_FLT_MODE = %d, %d, %d, %d, %d", rSmoothMFB.ll_con1.bits.BLD_LL_FLT_MODE, rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_MODE, rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_MODE, rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_MODE, rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_MODE);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_FLT_WT_MODE1 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con1.bits.BLD_LL_FLT_WT_MODE1, rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1, rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1, rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1, rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_TH2 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con2.bits.BLD_LL_TH2, rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_TH2, rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_TH2, rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_TH2, rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_TH2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_TH1 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con2.bits.BLD_LL_TH1, rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_TH1, rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_TH1, rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_TH1, rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_TH1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_DT1 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con2.bits.BLD_LL_DT1, rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_DT1, rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_DT1, rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_DT1, rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_DT1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_MAX_WT = %d, %d, %d, %d, %d", rSmoothMFB.ll_con2.bits.BLD_LL_MAX_WT, rParam.rLowerIso_LowerZoom.ll_con2.bits.BLD_LL_MAX_WT, rParam.rLowerIso_UpperZoom.ll_con2.bits.BLD_LL_MAX_WT, rParam.rUpperIso_LowerZoom.ll_con2.bits.BLD_LL_MAX_WT, rParam.rUpperIso_UpperZoom.ll_con2.bits.BLD_LL_MAX_WT);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_MAX_WT = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con0.bits.BLD_MBD_MAX_WT, rParam.rLowerIso_LowerZoom.mbd_con0.bits.BLD_MBD_MAX_WT, rParam.rLowerIso_UpperZoom.mbd_con0.bits.BLD_MBD_MAX_WT, rParam.rUpperIso_LowerZoom.mbd_con0.bits.BLD_MBD_MAX_WT, rParam.rUpperIso_UpperZoom.mbd_con0.bits.BLD_MBD_MAX_WT);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THL_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_0, rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0, rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0, rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0, rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THL_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_1, rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1, rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1, rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1, rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THL_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_2, rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2, rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2, rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2, rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THL_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con1.bits.BLD_MBD_YL1_THL_3, rParam.rLowerIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3, rParam.rLowerIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3, rParam.rUpperIso_LowerZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3, rParam.rUpperIso_UpperZoom.mbd_con1.bits.BLD_MBD_YL1_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THL_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THL_4, rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4, rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4, rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4, rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THH_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_0, rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0, rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0, rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0, rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THH_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_1, rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1, rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1, rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1, rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THH_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con2.bits.BLD_MBD_YL1_THH_2, rParam.rLowerIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2, rParam.rLowerIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2, rParam.rUpperIso_LowerZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2, rParam.rUpperIso_UpperZoom.mbd_con2.bits.BLD_MBD_YL1_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THH_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con3.bits.BLD_MBD_YL1_THH_3, rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3, rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3, rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3, rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL1_THH_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con3.bits.BLD_MBD_YL1_THH_4, rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4, rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4, rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4, rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL1_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THL_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con3.bits.BLD_MBD_YL2_THL_0, rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0, rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0, rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0, rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THL_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con3.bits.BLD_MBD_YL2_THL_1, rParam.rLowerIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1, rParam.rLowerIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1, rParam.rUpperIso_LowerZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1, rParam.rUpperIso_UpperZoom.mbd_con3.bits.BLD_MBD_YL2_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THL_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_2, rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2, rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2, rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2, rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THL_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_3, rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3, rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3, rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3, rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THL_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THL_4, rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4, rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4, rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4, rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THH_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con4.bits.BLD_MBD_YL2_THH_0, rParam.rLowerIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0, rParam.rLowerIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0, rParam.rUpperIso_LowerZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0, rParam.rUpperIso_UpperZoom.mbd_con4.bits.BLD_MBD_YL2_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THH_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_1, rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1, rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1, rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1, rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THH_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_2, rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2, rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2, rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2, rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THH_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_3, rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3, rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3, rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3, rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL2_THH_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con5.bits.BLD_MBD_YL2_THH_4, rParam.rLowerIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4, rParam.rLowerIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4, rParam.rUpperIso_LowerZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4, rParam.rUpperIso_UpperZoom.mbd_con5.bits.BLD_MBD_YL2_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THL_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_0, rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0, rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0, rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0, rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THL_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_1, rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1, rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1, rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1, rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THL_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_2, rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2, rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2, rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2, rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THL_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con6.bits.BLD_MBD_YL3_THL_3, rParam.rLowerIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3, rParam.rLowerIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3, rParam.rUpperIso_LowerZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3, rParam.rUpperIso_UpperZoom.mbd_con6.bits.BLD_MBD_YL3_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THL_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THL_4, rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4, rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4, rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4, rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THH_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_0, rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0, rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0, rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0, rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THH_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_1, rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1, rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1, rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1, rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THH_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con7.bits.BLD_MBD_YL3_THH_2, rParam.rLowerIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2, rParam.rLowerIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2, rParam.rUpperIso_LowerZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2, rParam.rUpperIso_UpperZoom.mbd_con7.bits.BLD_MBD_YL3_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THH_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con8.bits.BLD_MBD_YL3_THH_3, rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3, rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3, rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3, rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_YL3_THH_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con8.bits.BLD_MBD_YL3_THH_4, rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4, rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4, rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4, rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_YL3_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THL_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con8.bits.BLD_MBD_CL1_THL_0, rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0, rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0, rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0, rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THL_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con8.bits.BLD_MBD_CL1_THL_1, rParam.rLowerIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1, rParam.rLowerIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1, rParam.rUpperIso_LowerZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1, rParam.rUpperIso_UpperZoom.mbd_con8.bits.BLD_MBD_CL1_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THL_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_2, rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2, rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2, rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2, rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THL_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_3, rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3, rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3, rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3, rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THL_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THL_4, rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4, rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4, rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4, rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THH_0 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con9.bits.BLD_MBD_CL1_THH_0, rParam.rLowerIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0, rParam.rLowerIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0, rParam.rUpperIso_LowerZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0, rParam.rUpperIso_UpperZoom.mbd_con9.bits.BLD_MBD_CL1_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THH_1 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_1, rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1, rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1, rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1, rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THH_2 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_2, rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2, rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2, rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2, rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THH_3 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_3, rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3, rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3, rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3, rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_MBD_CL1_THH_4 = %d, %d, %d, %d, %d", rSmoothMFB.mbd_con10.bits.BLD_MBD_CL1_THH_4, rParam.rLowerIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4, rParam.rLowerIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4, rParam.rUpperIso_LowerZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4, rParam.rUpperIso_UpperZoom.mbd_con10.bits.BLD_MBD_CL1_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_FLT_WT_MODE2 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con1.bits.BLD_LL_FLT_WT_MODE2, rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2, rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2, rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2, rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_FLT_WT_MODE2);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_CLIP_TH1 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con1.bits.BLD_LL_CLIP_TH1, rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH1, rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH1, rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH1, rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH1);
    INTER_LOG_IF(bSmoothMFBDebug, "[S, L_L, L_U, U_L, U_U]BLD_LL_CLIP_TH2 = %d, %d, %d, %d, %d", rSmoothMFB.ll_con1.bits.BLD_LL_CLIP_TH2, rParam.rLowerIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH2, rParam.rLowerIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH2, rParam.rUpperIso_LowerZoom.ll_con1.bits.BLD_LL_CLIP_TH2, rParam.rUpperIso_UpperZoom.ll_con1.bits.BLD_LL_CLIP_TH2);


}
MVOID SmoothMIXER3(ISP_NVRAM_MIXER3_INT_T const& rParam,   // MIXER3 settings
                ISP_NVRAM_MIXER3_T& rSmoothMIXER3)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_mixer3.enable", value, "0");
    MBOOL bSmoothMIXER3Debug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothMIXER3Debug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothMIXER3Debug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 MIX3_M0_L_L		= rParam.rLowerIso_LowerZoom.ctrl_1.bits.MIX3_M0;
    MINT32 MIX3_B1_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_B1;
    MINT32 MIX3_B0_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_B0;
    MINT32 MIX3_WT_SEL_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_WT_SEL;
    MINT32 MIX3_UV_DEFAULT_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_UV_DEFAULT;
    MINT32 MIX3_UV_EN_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_UV_EN;
    MINT32 MIX3_Y_DEFAULT_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_Y_DEFAULT;
    MINT32 MIX3_Y_EN_L_L		= rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_Y_EN;

    MINT32 MIX3_M0_L_U		= rParam.rLowerIso_UpperZoom.ctrl_1.bits.MIX3_M0;
    MINT32 MIX3_B1_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_B1;
    MINT32 MIX3_B0_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_B0;
    MINT32 MIX3_WT_SEL_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_WT_SEL;
    MINT32 MIX3_UV_DEFAULT_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_UV_DEFAULT;
    MINT32 MIX3_UV_EN_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_UV_EN;
    MINT32 MIX3_Y_DEFAULT_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_Y_DEFAULT;
    MINT32 MIX3_Y_EN_L_U		= rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_Y_EN;

    MINT32 MIX3_M0_U_L		= rParam.rUpperIso_LowerZoom.ctrl_1.bits.MIX3_M0;
    MINT32 MIX3_B1_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_B1;
    MINT32 MIX3_B0_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_B0;
    MINT32 MIX3_WT_SEL_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_WT_SEL;
    MINT32 MIX3_UV_DEFAULT_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_UV_DEFAULT;
    MINT32 MIX3_UV_EN_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_UV_EN;
    MINT32 MIX3_Y_DEFAULT_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_Y_DEFAULT;
    MINT32 MIX3_Y_EN_U_L		= rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_Y_EN;

    MINT32 MIX3_M0_U_U		= rParam.rUpperIso_UpperZoom.ctrl_1.bits.MIX3_M0;
    MINT32 MIX3_B1_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_B1;
    MINT32 MIX3_B0_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_B0;
    MINT32 MIX3_WT_SEL_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_WT_SEL;
    MINT32 MIX3_UV_DEFAULT_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_UV_DEFAULT;
    MINT32 MIX3_UV_EN_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_UV_EN;
    MINT32 MIX3_Y_DEFAULT_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_Y_DEFAULT;
    MINT32 MIX3_Y_EN_U_U		= rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_Y_EN;


    // interpolation core
    MINT32 MIX3_M0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_M0_L_L, MIX3_M0_L_U, MIX3_M0_U_L, MIX3_M0_U_U, 4);
    MINT32 MIX3_B1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_B1_L_L, MIX3_B1_L_U, MIX3_B1_U_L, MIX3_B1_U_U, 4);
    MINT32 MIX3_B0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_B0_L_L, MIX3_B0_L_U, MIX3_B0_U_L, MIX3_B0_U_U, 4);
    MINT32 MIX3_WT_SEL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_WT_SEL_L_L, MIX3_WT_SEL_L_U, MIX3_WT_SEL_U_L, MIX3_WT_SEL_U_U, 4);
    MINT32 MIX3_UV_DEFAULT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_UV_DEFAULT_L_L, MIX3_UV_DEFAULT_L_U, MIX3_UV_DEFAULT_U_L, MIX3_UV_DEFAULT_U_U, 5);
    MINT32 MIX3_UV_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_UV_EN_L_L, MIX3_UV_EN_L_U, MIX3_UV_EN_U_L, MIX3_UV_EN_U_U, 5);
    MINT32 MIX3_Y_DEFAULT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_Y_DEFAULT_L_L, MIX3_Y_DEFAULT_L_U, MIX3_Y_DEFAULT_U_L, MIX3_Y_DEFAULT_U_U, 5);
    MINT32 MIX3_Y_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, MIX3_Y_EN_L_L, MIX3_Y_EN_L_U, MIX3_Y_EN_U_L, MIX3_Y_EN_U_U, 5);
     MINT32 MIX3_DT =     rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_DT;//use low ISO Low Zoom
    MINT32 MIX3_M1 =     rParam.rLowerIso_LowerZoom.ctrl_1.bits.MIX3_M1; //use low ISO Low Zoom
    MINT32 MIX3_M0_cal;
    if(MIX3_DT == 0)
    {MIX3_M0_cal = 0;}
    else
    {MIX3_M0_cal = MIX3_M1 - (256 / MIX3_DT) - 1;}
    MIX3_M0_cal = CLIP(MIX3_M0_cal,32,255);
    MIX3_M0 = (MIX3_M0 > MIX3_M0_cal) ? MIX3_M0 : MIX3_M0_cal;


    // assign interpolation result
    rSmoothMIXER3.ctrl_1.bits.MIX3_M0       = MIX3_M0;
    rSmoothMIXER3.ctrl_0.bits.MIX3_B1       = MIX3_B1;
    rSmoothMIXER3.ctrl_0.bits.MIX3_B0       = MIX3_B0;
    rSmoothMIXER3.ctrl_0.bits.MIX3_WT_SEL       = MIX3_WT_SEL;
    rSmoothMIXER3.ctrl_0.bits.MIX3_UV_DEFAULT       = MIX3_UV_DEFAULT;
    rSmoothMIXER3.ctrl_0.bits.MIX3_UV_EN       = MIX3_UV_EN;
    rSmoothMIXER3.ctrl_0.bits.MIX3_Y_DEFAULT       = MIX3_Y_DEFAULT;
    rSmoothMIXER3.ctrl_0.bits.MIX3_Y_EN       = MIX3_Y_EN;
    rSmoothMIXER3.ctrl_1.bits.MIX3_M1       = MIX3_M1;
    rSmoothMIXER3.ctrl_0.bits.MIX3_DT       = MIX3_DT;


    // log
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_M0 = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_1.bits.MIX3_M0, rParam.rLowerIso_LowerZoom.ctrl_1.bits.MIX3_M0, rParam.rLowerIso_UpperZoom.ctrl_1.bits.MIX3_M0, rParam.rUpperIso_LowerZoom.ctrl_1.bits.MIX3_M0, rParam.rUpperIso_UpperZoom.ctrl_1.bits.MIX3_M0);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_B1 = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_B1, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_B1, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_B1, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_B1, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_B1);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_B0 = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_B0, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_B0, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_B0, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_B0, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_B0);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_WT_SEL = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_WT_SEL, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_WT_SEL, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_WT_SEL, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_WT_SEL, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_WT_SEL);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_UV_DEFAULT = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_UV_DEFAULT, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_UV_DEFAULT, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_UV_DEFAULT, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_UV_DEFAULT, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_UV_DEFAULT);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_UV_EN = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_UV_EN, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_UV_EN, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_UV_EN, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_UV_EN, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_UV_EN);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_Y_DEFAULT = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_Y_DEFAULT, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_Y_DEFAULT, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_Y_DEFAULT, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_Y_DEFAULT, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_Y_DEFAULT);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_Y_EN = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_Y_EN, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_Y_EN, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_Y_EN, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_Y_EN, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_Y_EN);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_M1 = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_1.bits.MIX3_M1, rParam.rLowerIso_LowerZoom.ctrl_1.bits.MIX3_M1, rParam.rLowerIso_UpperZoom.ctrl_1.bits.MIX3_M1, rParam.rUpperIso_LowerZoom.ctrl_1.bits.MIX3_M1, rParam.rUpperIso_UpperZoom.ctrl_1.bits.MIX3_M1);
    INTER_LOG_IF(bSmoothMIXER3Debug, "[S, L_L, L_U, U_L, U_U]MIX3_DT = %d, %d, %d, %d, %d", rSmoothMIXER3.ctrl_0.bits.MIX3_DT, rParam.rLowerIso_LowerZoom.ctrl_0.bits.MIX3_DT, rParam.rLowerIso_UpperZoom.ctrl_0.bits.MIX3_DT, rParam.rUpperIso_LowerZoom.ctrl_0.bits.MIX3_DT, rParam.rUpperIso_UpperZoom.ctrl_0.bits.MIX3_DT);


}

MVOID SmoothNR1(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BNR_NR1_T const& rUpperNR1,   // NR1 settings for upper ISO
                ISP_NVRAM_BNR_NR1_T const& rLowerNR1,   // NR1 settings for lower ISO
                ISP_NVRAM_BNR_NR1_T& rSmoothNR1)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_nr1.enable", value, "0");
    MBOOL bSmoothNR1Debug = atoi(value);

    INTER_LOG_IF(bSmoothNR1Debug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_NR1_CT_EN       = rLowerNR1.con.bits.NR1_CT_EN;
    MINT32 pre_NR1_CT_DIV       = rLowerNR1.ct_con.bits.NR1_CT_DIV;
    MINT32 pre_NR1_CT_SLOPE       = rLowerNR1.ct_con.bits.NR1_CT_SLOPE;
    MINT32 pre_NR1_MBND       = rLowerNR1.ct_con.bits.NR1_MBND;
    MINT32 pre_NR1_CT_THRD       = rLowerNR1.ct_con.bits.NR1_CT_THRD;
    MINT32 pre_NR1_CT_MD2       = rLowerNR1.ct_con.bits.NR1_CT_MD2;
    MINT32 pre_NR1_CT_MD       = rLowerNR1.ct_con.bits.NR1_CT_MD;
    MINT32 pre_NR1_CT_LWB       = rLowerNR1.ct_con2.bits.NR1_CT_LWB;
    MINT32 pre_NR1_CT_UPB       = rLowerNR1.ct_con2.bits.NR1_CT_UPB;
    MINT32 pre_NR1_CT_LSP       = rLowerNR1.ct_con3.bits.NR1_CT_LSP;
    MINT32 pre_NR1_CT_USP       = rLowerNR1.ct_con3.bits.NR1_CT_USP;
    MINT32 pos_NR1_CT_EN       = rUpperNR1.con.bits.NR1_CT_EN;
    MINT32 pos_NR1_CT_DIV       = rUpperNR1.ct_con.bits.NR1_CT_DIV;
    MINT32 pos_NR1_CT_SLOPE       = rUpperNR1.ct_con.bits.NR1_CT_SLOPE;
    MINT32 pos_NR1_MBND       = rUpperNR1.ct_con.bits.NR1_MBND;
    MINT32 pos_NR1_CT_THRD       = rUpperNR1.ct_con.bits.NR1_CT_THRD;
    MINT32 pos_NR1_CT_MD2       = rUpperNR1.ct_con.bits.NR1_CT_MD2;
    MINT32 pos_NR1_CT_MD       = rUpperNR1.ct_con.bits.NR1_CT_MD;
    MINT32 pos_NR1_CT_LWB       = rUpperNR1.ct_con2.bits.NR1_CT_LWB;
    MINT32 pos_NR1_CT_UPB       = rUpperNR1.ct_con2.bits.NR1_CT_UPB;
    MINT32 pos_NR1_CT_LSP       = rUpperNR1.ct_con3.bits.NR1_CT_LSP;
    MINT32 pos_NR1_CT_USP       = rUpperNR1.ct_con3.bits.NR1_CT_USP;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 NR1_CT_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_EN, pos_NR1_CT_EN, 0);
    MINT32 NR1_CT_DIV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_DIV, pos_NR1_CT_DIV, 0);
    MINT32 NR1_CT_SLOPE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_SLOPE, pos_NR1_CT_SLOPE, 0);
    MINT32 NR1_MBND       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_MBND, pos_NR1_MBND, 0);
    MINT32 NR1_CT_THRD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_THRD, pos_NR1_CT_THRD, 0);
    MINT32 NR1_CT_MD2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_MD2, pos_NR1_CT_MD2, 0);
    MINT32 NR1_CT_MD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_MD, pos_NR1_CT_MD, 0);
    MINT32 NR1_CT_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_LWB, pos_NR1_CT_LWB, 0);
    MINT32 NR1_CT_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_UPB, pos_NR1_CT_UPB, 0);
    MINT32 NR1_CT_LSP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_LSP, pos_NR1_CT_LSP, 0);
    MINT32 NR1_CT_USP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR1_CT_USP, pos_NR1_CT_USP, 0);


    // interpolation result assignment
    rSmoothNR1.con.bits.NR1_CT_EN       = NR1_CT_EN;
    rSmoothNR1.ct_con.bits.NR1_CT_DIV       = NR1_CT_DIV;
    rSmoothNR1.ct_con.bits.NR1_CT_SLOPE       = NR1_CT_SLOPE;
    rSmoothNR1.ct_con.bits.NR1_MBND       = NR1_MBND;
    rSmoothNR1.ct_con.bits.NR1_CT_THRD       = NR1_CT_THRD;
    rSmoothNR1.ct_con.bits.NR1_CT_MD2       = NR1_CT_MD2;
    rSmoothNR1.ct_con.bits.NR1_CT_MD       = NR1_CT_MD;
    rSmoothNR1.ct_con2.bits.NR1_CT_LWB       = NR1_CT_LWB;
    rSmoothNR1.ct_con2.bits.NR1_CT_UPB       = NR1_CT_UPB;
    rSmoothNR1.ct_con3.bits.NR1_CT_LSP       = NR1_CT_LSP;
    rSmoothNR1.ct_con3.bits.NR1_CT_USP       = NR1_CT_USP;


    // logging
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_EN       = %d, %d, %d", rLowerNR1.con.bits.NR1_CT_EN, rSmoothNR1.con.bits.NR1_CT_EN, rUpperNR1.con.bits.NR1_CT_EN);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_DIV       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_CT_DIV, rSmoothNR1.ct_con.bits.NR1_CT_DIV, rUpperNR1.ct_con.bits.NR1_CT_DIV);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_SLOPE       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_CT_SLOPE, rSmoothNR1.ct_con.bits.NR1_CT_SLOPE, rUpperNR1.ct_con.bits.NR1_CT_SLOPE);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_MBND       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_MBND, rSmoothNR1.ct_con.bits.NR1_MBND, rUpperNR1.ct_con.bits.NR1_MBND);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_THRD       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_CT_THRD, rSmoothNR1.ct_con.bits.NR1_CT_THRD, rUpperNR1.ct_con.bits.NR1_CT_THRD);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_MD2       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_CT_MD2, rSmoothNR1.ct_con.bits.NR1_CT_MD2, rUpperNR1.ct_con.bits.NR1_CT_MD2);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_MD       = %d, %d, %d", rLowerNR1.ct_con.bits.NR1_CT_MD, rSmoothNR1.ct_con.bits.NR1_CT_MD, rUpperNR1.ct_con.bits.NR1_CT_MD);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_LWB       = %d, %d, %d", rLowerNR1.ct_con2.bits.NR1_CT_LWB, rSmoothNR1.ct_con2.bits.NR1_CT_LWB, rUpperNR1.ct_con2.bits.NR1_CT_LWB);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_UPB       = %d, %d, %d", rLowerNR1.ct_con2.bits.NR1_CT_UPB, rSmoothNR1.ct_con2.bits.NR1_CT_UPB, rUpperNR1.ct_con2.bits.NR1_CT_UPB);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_LSP       = %d, %d, %d", rLowerNR1.ct_con3.bits.NR1_CT_LSP, rSmoothNR1.ct_con3.bits.NR1_CT_LSP, rUpperNR1.ct_con3.bits.NR1_CT_LSP);
    INTER_LOG_IF(bSmoothNR1Debug, "[L,S,U]NR1_CT_USP       = %d, %d, %d", rLowerNR1.ct_con3.bits.NR1_CT_USP, rSmoothNR1.ct_con3.bits.NR1_CT_USP, rUpperNR1.ct_con3.bits.NR1_CT_USP);

}

MVOID SmoothNR3D(ISP_NVRAM_NR3D_INT_T const& rParam,   // EE settings
                ISP_NVRAM_NR3D_T& rSmoothNR3D,
               ISP_NR3D_SMOOTH_INFO_T const& rNR3D_SW_Params)  // Output

{

	char value[PROPERTY_VALUE_MAX] = {'\0'};
		property_get("vendor.debug.smooth_nr3d.enable", value, "0");
		MBOOL bSmoothNR3DDebug = atoi(value);

		static MINT32 bmCount = 0;
	    bmCount++;

	    MINT32 u4MAX_GMV = rNR3D_SW_Params.M_Info.MAX_GMV;
	    u4MAX_GMV = 32;

		MINT32 u4RealISO	= rParam.u4RealISO;
		MINT32 u4UpperISO	= rParam.u4UpperISO;
		MINT32 u4LowerISO	= rParam.u4LowerISO;
		MINT32 fRealZoom	= rParam.i4ZoomRatio_x100;
		MINT32 fUpperZoom	= rParam.u4UpperZoom;
		MINT32 fLowerZoom	= rParam.u4LowerZoom;

	    if (bSmoothNR3DDebug>=2 && bmCount % 33 == 0)
	    {
		    INTER_LOG_IF(bSmoothNR3DDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
		    INTER_LOG_IF(bSmoothNR3DDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);
	    }

		// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

		double RATIO_ISO_lo = 0;
		double RATIO_ISO_up = 0;
		double RATIO_Zoom_lo = 0;
		double RATIO_Zoom_up = 0;

		//protection for out-of-bound

		if (u4RealISO <= u4LowerISO)
		{
			RATIO_ISO_lo = 1;
		}
		else if(u4RealISO >= u4UpperISO)
		{
			RATIO_ISO_lo = 0;
		}
		else
		{
			RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
		}

		RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

		if (fRealZoom <= fLowerZoom)
		{
			RATIO_Zoom_lo = 1;
		}
		else if(fRealZoom >= fUpperZoom)
		{
			RATIO_Zoom_lo = 0;
		}
		else
		{
			RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
		}

		RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

		double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
		double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
		double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
		double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

		// assign 4-corner values for interpolation
		MINT32 NR3D_BLEND_RATIO_BLKY_L_L		= rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY;
		MINT32 NR3D_BLEND_RATIO_DE_L_L		= rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE;
		MINT32 NR3D_BLEND_RATIO_TXTR_L_L		= rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR;
		MINT32 NR3D_BLEND_RATIO_MV_L_L		= rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV;
		MINT32 NR3D_FLT_STR_MAX_L_L 	= rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX;
		MINT32 NR3D_Q_NL_L_L		= rParam.rLowerIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_NL;
		MINT32 NR3D_Q_SP_L_L		= rParam.rLowerIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_SP;
		MINT32 NR3D_BDI_THR_L_L 	= rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_BDI_THR;
		MINT32 NR3D_MV_PEN_W_L_L		= rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_W;
		MINT32 NR3D_MV_PEN_THR_L_L		= rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR;
		MINT32 NR3D_SMALL_SAD_THR_L_L		= rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR;
		MINT32 NR3D_Q_BLKY_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0;
		MINT32 NR3D_Q_BLKY_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1;
		MINT32 NR3D_Q_BLKY_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2;
		MINT32 NR3D_Q_BLKY_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3;
		MINT32 NR3D_Q_BLKY_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4;
		MINT32 NR3D_Q_BLKY_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5;
		MINT32 NR3D_Q_BLKY_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6;
		MINT32 NR3D_Q_BLKY_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7;
		MINT32 NR3D_Q_BLKC_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0;
		MINT32 NR3D_Q_BLKC_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1;
		MINT32 NR3D_Q_BLKC_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2;
		MINT32 NR3D_Q_BLKC_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3;
		MINT32 NR3D_Q_BLKC_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4;
		MINT32 NR3D_Q_BLKC_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5;
		MINT32 NR3D_Q_BLKC_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6;
		MINT32 NR3D_Q_BLKC_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7;
		MINT32 NR3D_Q_DETXTR_LVL_Y0_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0;
		MINT32 NR3D_Q_DETXTR_LVL_Y1_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1;
		MINT32 NR3D_Q_DETXTR_LVL_Y2_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2;
		MINT32 NR3D_Q_DETXTR_LVL_Y3_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3;
		MINT32 NR3D_Q_DETXTR_LVL_Y4_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4;
		MINT32 NR3D_Q_DETXTR_LVL_Y5_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5;
		MINT32 NR3D_Q_DETXTR_LVL_Y6_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6;
		MINT32 NR3D_Q_DETXTR_LVL_Y7_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7;
		MINT32 NR3D_Q_DE1_BASE_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0;
		MINT32 NR3D_Q_DE1_BASE_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1;
		MINT32 NR3D_Q_DE1_BASE_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2;
		MINT32 NR3D_Q_DE1_BASE_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3;
		MINT32 NR3D_Q_DE1_BASE_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4;
		MINT32 NR3D_Q_DE1_BASE_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5;
		MINT32 NR3D_Q_DE1_BASE_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6;
		MINT32 NR3D_Q_DE1_BASE_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7;
		MINT32 NR3D_Q_MV_Y0_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0;
		MINT32 NR3D_Q_MV_Y1_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1;
		MINT32 NR3D_Q_MV_Y2_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2;
		MINT32 NR3D_Q_MV_Y3_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3;
		MINT32 NR3D_Q_MV_Y4_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4;
		MINT32 NR3D_Q_MV_Y5_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5;
		MINT32 NR3D_Q_MV_Y6_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6;
		MINT32 NR3D_Q_MV_Y7_L_L 	= rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7;
		MINT32 NR3D_Q_WVAR_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0;
		MINT32 NR3D_Q_WVAR_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1;
		MINT32 NR3D_Q_WVAR_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2;
		MINT32 NR3D_Q_WVAR_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3;
		MINT32 NR3D_Q_WVAR_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4;
		MINT32 NR3D_Q_WVAR_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5;
		MINT32 NR3D_Q_WVAR_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6;
		MINT32 NR3D_Q_WVAR_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7;
		MINT32 NR3D_Q_WSM_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0;
		MINT32 NR3D_Q_WSM_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1;
		MINT32 NR3D_Q_WSM_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2;
		MINT32 NR3D_Q_WSM_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3;
		MINT32 NR3D_Q_WSM_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4;
		MINT32 NR3D_Q_WSM_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5;
		MINT32 NR3D_Q_WSM_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6;
		MINT32 NR3D_Q_WSM_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7;
		MINT32 NR3D_Q_SDL_Y0_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0;
		MINT32 NR3D_Q_SDL_Y1_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1;
		MINT32 NR3D_Q_SDL_Y2_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2;
		MINT32 NR3D_Q_SDL_Y3_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3;
		MINT32 NR3D_Q_SDL_Y4_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4;
		MINT32 NR3D_Q_SDL_Y5_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5;
		MINT32 NR3D_Q_SDL_Y6_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6;
		MINT32 NR3D_Q_SDL_Y7_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7;
		MINT32 NR3D_Q_SDL_Y8_L_L		= rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8;
		MINT32 NR3D_R2C_VAL1_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1;
		MINT32 NR3D_R2C_VAL2_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2;
		MINT32 NR3D_R2C_VAL3_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3;
		MINT32 NR3D_R2C_VAL4_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4;
		MINT32 NR3D_R2CENC_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2CENC;
		MINT32 NR3D_R2C_TXTR_THR1_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1;
		MINT32 NR3D_R2C_TXTR_THR2_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2;
		MINT32 NR3D_R2C_TXTR_THR3_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3;
		MINT32 NR3D_R2C_TXTR_THR4_L_L		= rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4;
		MINT32 NR3D_R2C_TXTR_THROFF_L_L 	= rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF;
		MINT32 NR3D_SL2_OFF_L_L 	= rParam.rLowerIso_LowerZoom.on_con.bits.NR3D_SL2_OFF;
		MINT32 NR3D_TNR_Y_EN_L_L		= rParam.rLowerIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN;
		MINT32 NR3D_TNR_C_EN_L_L		= rParam.rLowerIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN;

		MINT32 NR3D_BLEND_RATIO_BLKY_L_U		= rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY;
		MINT32 NR3D_BLEND_RATIO_DE_L_U		= rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE;
		MINT32 NR3D_BLEND_RATIO_TXTR_L_U		= rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR;
		MINT32 NR3D_BLEND_RATIO_MV_L_U		= rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV;
		MINT32 NR3D_FLT_STR_MAX_L_U 	= rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX;
		MINT32 NR3D_Q_NL_L_U		= rParam.rLowerIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_NL;
		MINT32 NR3D_Q_SP_L_U		= rParam.rLowerIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_SP;
		MINT32 NR3D_BDI_THR_L_U 	= rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_BDI_THR;
		MINT32 NR3D_MV_PEN_W_L_U		= rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_W;
		MINT32 NR3D_MV_PEN_THR_L_U		= rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR;
		MINT32 NR3D_SMALL_SAD_THR_L_U		= rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR;
		MINT32 NR3D_Q_BLKY_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0;
		MINT32 NR3D_Q_BLKY_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1;
		MINT32 NR3D_Q_BLKY_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2;
		MINT32 NR3D_Q_BLKY_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3;
		MINT32 NR3D_Q_BLKY_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4;
		MINT32 NR3D_Q_BLKY_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5;
		MINT32 NR3D_Q_BLKY_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6;
		MINT32 NR3D_Q_BLKY_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7;
		MINT32 NR3D_Q_BLKC_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0;
		MINT32 NR3D_Q_BLKC_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1;
		MINT32 NR3D_Q_BLKC_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2;
		MINT32 NR3D_Q_BLKC_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3;
		MINT32 NR3D_Q_BLKC_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4;
		MINT32 NR3D_Q_BLKC_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5;
		MINT32 NR3D_Q_BLKC_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6;
		MINT32 NR3D_Q_BLKC_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7;
		MINT32 NR3D_Q_DETXTR_LVL_Y0_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0;
		MINT32 NR3D_Q_DETXTR_LVL_Y1_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1;
		MINT32 NR3D_Q_DETXTR_LVL_Y2_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2;
		MINT32 NR3D_Q_DETXTR_LVL_Y3_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3;
		MINT32 NR3D_Q_DETXTR_LVL_Y4_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4;
		MINT32 NR3D_Q_DETXTR_LVL_Y5_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5;
		MINT32 NR3D_Q_DETXTR_LVL_Y6_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6;
		MINT32 NR3D_Q_DETXTR_LVL_Y7_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7;
		MINT32 NR3D_Q_DE1_BASE_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0;
		MINT32 NR3D_Q_DE1_BASE_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1;
		MINT32 NR3D_Q_DE1_BASE_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2;
		MINT32 NR3D_Q_DE1_BASE_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3;
		MINT32 NR3D_Q_DE1_BASE_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4;
		MINT32 NR3D_Q_DE1_BASE_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5;
		MINT32 NR3D_Q_DE1_BASE_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6;
		MINT32 NR3D_Q_DE1_BASE_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7;
		MINT32 NR3D_Q_MV_Y0_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0;
		MINT32 NR3D_Q_MV_Y1_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1;
		MINT32 NR3D_Q_MV_Y2_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2;
		MINT32 NR3D_Q_MV_Y3_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3;
		MINT32 NR3D_Q_MV_Y4_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4;
		MINT32 NR3D_Q_MV_Y5_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5;
		MINT32 NR3D_Q_MV_Y6_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6;
		MINT32 NR3D_Q_MV_Y7_L_U 	= rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7;
		MINT32 NR3D_Q_WVAR_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0;
		MINT32 NR3D_Q_WVAR_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1;
		MINT32 NR3D_Q_WVAR_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2;
		MINT32 NR3D_Q_WVAR_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3;
		MINT32 NR3D_Q_WVAR_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4;
		MINT32 NR3D_Q_WVAR_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5;
		MINT32 NR3D_Q_WVAR_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6;
		MINT32 NR3D_Q_WVAR_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7;
		MINT32 NR3D_Q_WSM_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0;
		MINT32 NR3D_Q_WSM_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1;
		MINT32 NR3D_Q_WSM_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2;
		MINT32 NR3D_Q_WSM_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3;
		MINT32 NR3D_Q_WSM_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4;
		MINT32 NR3D_Q_WSM_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5;
		MINT32 NR3D_Q_WSM_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6;
		MINT32 NR3D_Q_WSM_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7;
		MINT32 NR3D_Q_SDL_Y0_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0;
		MINT32 NR3D_Q_SDL_Y1_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1;
		MINT32 NR3D_Q_SDL_Y2_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2;
		MINT32 NR3D_Q_SDL_Y3_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3;
		MINT32 NR3D_Q_SDL_Y4_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4;
		MINT32 NR3D_Q_SDL_Y5_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5;
		MINT32 NR3D_Q_SDL_Y6_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6;
		MINT32 NR3D_Q_SDL_Y7_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7;
		MINT32 NR3D_Q_SDL_Y8_L_U		= rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8;
		MINT32 NR3D_R2C_VAL1_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1;
		MINT32 NR3D_R2C_VAL2_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2;
		MINT32 NR3D_R2C_VAL3_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3;
		MINT32 NR3D_R2C_VAL4_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4;
		MINT32 NR3D_R2CENC_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2CENC;
		MINT32 NR3D_R2C_TXTR_THR1_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1;
		MINT32 NR3D_R2C_TXTR_THR2_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2;
		MINT32 NR3D_R2C_TXTR_THR3_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3;
		MINT32 NR3D_R2C_TXTR_THR4_L_U		= rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4;
		MINT32 NR3D_R2C_TXTR_THROFF_L_U 	= rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF;
		MINT32 NR3D_SL2_OFF_L_U 	= rParam.rLowerIso_UpperZoom.on_con.bits.NR3D_SL2_OFF;
		MINT32 NR3D_TNR_Y_EN_L_U		= rParam.rLowerIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN;
		MINT32 NR3D_TNR_C_EN_L_U		= rParam.rLowerIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN;

		MINT32 NR3D_BLEND_RATIO_BLKY_U_L		= rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY;
		MINT32 NR3D_BLEND_RATIO_DE_U_L		= rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE;
		MINT32 NR3D_BLEND_RATIO_TXTR_U_L		= rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR;
		MINT32 NR3D_BLEND_RATIO_MV_U_L		= rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV;
		MINT32 NR3D_FLT_STR_MAX_U_L 	= rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX;
		MINT32 NR3D_Q_NL_U_L		= rParam.rUpperIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_NL;
		MINT32 NR3D_Q_SP_U_L		= rParam.rUpperIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_SP;
		MINT32 NR3D_BDI_THR_U_L 	= rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_BDI_THR;
		MINT32 NR3D_MV_PEN_W_U_L		= rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_W;
		MINT32 NR3D_MV_PEN_THR_U_L		= rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR;
		MINT32 NR3D_SMALL_SAD_THR_U_L		= rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR;
		MINT32 NR3D_Q_BLKY_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0;
		MINT32 NR3D_Q_BLKY_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1;
		MINT32 NR3D_Q_BLKY_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2;
		MINT32 NR3D_Q_BLKY_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3;
		MINT32 NR3D_Q_BLKY_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4;
		MINT32 NR3D_Q_BLKY_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5;
		MINT32 NR3D_Q_BLKY_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6;
		MINT32 NR3D_Q_BLKY_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7;
		MINT32 NR3D_Q_BLKC_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0;
		MINT32 NR3D_Q_BLKC_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1;
		MINT32 NR3D_Q_BLKC_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2;
		MINT32 NR3D_Q_BLKC_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3;
		MINT32 NR3D_Q_BLKC_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4;
		MINT32 NR3D_Q_BLKC_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5;
		MINT32 NR3D_Q_BLKC_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6;
		MINT32 NR3D_Q_BLKC_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7;
		MINT32 NR3D_Q_DETXTR_LVL_Y0_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0;
		MINT32 NR3D_Q_DETXTR_LVL_Y1_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1;
		MINT32 NR3D_Q_DETXTR_LVL_Y2_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2;
		MINT32 NR3D_Q_DETXTR_LVL_Y3_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3;
		MINT32 NR3D_Q_DETXTR_LVL_Y4_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4;
		MINT32 NR3D_Q_DETXTR_LVL_Y5_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5;
		MINT32 NR3D_Q_DETXTR_LVL_Y6_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6;
		MINT32 NR3D_Q_DETXTR_LVL_Y7_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7;
		MINT32 NR3D_Q_DE1_BASE_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0;
		MINT32 NR3D_Q_DE1_BASE_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1;
		MINT32 NR3D_Q_DE1_BASE_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2;
		MINT32 NR3D_Q_DE1_BASE_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3;
		MINT32 NR3D_Q_DE1_BASE_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4;
		MINT32 NR3D_Q_DE1_BASE_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5;
		MINT32 NR3D_Q_DE1_BASE_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6;
		MINT32 NR3D_Q_DE1_BASE_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7;
		MINT32 NR3D_Q_MV_Y0_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0;
		MINT32 NR3D_Q_MV_Y1_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1;
		MINT32 NR3D_Q_MV_Y2_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2;
		MINT32 NR3D_Q_MV_Y3_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3;
		MINT32 NR3D_Q_MV_Y4_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4;
		MINT32 NR3D_Q_MV_Y5_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5;
		MINT32 NR3D_Q_MV_Y6_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6;
		MINT32 NR3D_Q_MV_Y7_U_L 	= rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7;
		MINT32 NR3D_Q_WVAR_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0;
		MINT32 NR3D_Q_WVAR_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1;
		MINT32 NR3D_Q_WVAR_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2;
		MINT32 NR3D_Q_WVAR_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3;
		MINT32 NR3D_Q_WVAR_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4;
		MINT32 NR3D_Q_WVAR_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5;
		MINT32 NR3D_Q_WVAR_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6;
		MINT32 NR3D_Q_WVAR_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7;
		MINT32 NR3D_Q_WSM_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0;
		MINT32 NR3D_Q_WSM_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1;
		MINT32 NR3D_Q_WSM_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2;
		MINT32 NR3D_Q_WSM_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3;
		MINT32 NR3D_Q_WSM_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4;
		MINT32 NR3D_Q_WSM_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5;
		MINT32 NR3D_Q_WSM_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6;
		MINT32 NR3D_Q_WSM_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7;
		MINT32 NR3D_Q_SDL_Y0_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0;
		MINT32 NR3D_Q_SDL_Y1_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1;
		MINT32 NR3D_Q_SDL_Y2_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2;
		MINT32 NR3D_Q_SDL_Y3_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3;
		MINT32 NR3D_Q_SDL_Y4_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4;
		MINT32 NR3D_Q_SDL_Y5_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5;
		MINT32 NR3D_Q_SDL_Y6_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6;
		MINT32 NR3D_Q_SDL_Y7_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7;
		MINT32 NR3D_Q_SDL_Y8_U_L		= rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8;
		MINT32 NR3D_R2C_VAL1_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1;
		MINT32 NR3D_R2C_VAL2_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2;
		MINT32 NR3D_R2C_VAL3_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3;
		MINT32 NR3D_R2C_VAL4_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4;
		MINT32 NR3D_R2CENC_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2CENC;
		MINT32 NR3D_R2C_TXTR_THR1_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1;
		MINT32 NR3D_R2C_TXTR_THR2_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2;
		MINT32 NR3D_R2C_TXTR_THR3_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3;
		MINT32 NR3D_R2C_TXTR_THR4_U_L		= rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4;
		MINT32 NR3D_R2C_TXTR_THROFF_U_L 	= rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF;
		MINT32 NR3D_SL2_OFF_U_L 	= rParam.rUpperIso_LowerZoom.on_con.bits.NR3D_SL2_OFF;
		MINT32 NR3D_TNR_Y_EN_U_L		= rParam.rUpperIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN;
		MINT32 NR3D_TNR_C_EN_U_L		= rParam.rUpperIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN;

		MINT32 NR3D_BLEND_RATIO_BLKY_U_U		= rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY;
		MINT32 NR3D_BLEND_RATIO_DE_U_U		= rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE;
		MINT32 NR3D_BLEND_RATIO_TXTR_U_U		= rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR;
		MINT32 NR3D_BLEND_RATIO_MV_U_U		= rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV;
		MINT32 NR3D_FLT_STR_MAX_U_U 	= rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX;
		MINT32 NR3D_Q_NL_U_U		= rParam.rUpperIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_NL;
		MINT32 NR3D_Q_SP_U_U		= rParam.rUpperIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_SP;
		MINT32 NR3D_BDI_THR_U_U 	= rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_BDI_THR;
		MINT32 NR3D_MV_PEN_W_U_U		= rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_W;
		MINT32 NR3D_MV_PEN_THR_U_U		= rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR;
		MINT32 NR3D_SMALL_SAD_THR_U_U		= rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR;
		MINT32 NR3D_Q_BLKY_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0;
		MINT32 NR3D_Q_BLKY_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1;
		MINT32 NR3D_Q_BLKY_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2;
		MINT32 NR3D_Q_BLKY_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3;
		MINT32 NR3D_Q_BLKY_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4;
		MINT32 NR3D_Q_BLKY_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5;
		MINT32 NR3D_Q_BLKY_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6;
		MINT32 NR3D_Q_BLKY_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7;
		MINT32 NR3D_Q_BLKC_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0;
		MINT32 NR3D_Q_BLKC_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1;
		MINT32 NR3D_Q_BLKC_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2;
		MINT32 NR3D_Q_BLKC_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3;
		MINT32 NR3D_Q_BLKC_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4;
		MINT32 NR3D_Q_BLKC_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5;
		MINT32 NR3D_Q_BLKC_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6;
		MINT32 NR3D_Q_BLKC_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7;
		MINT32 NR3D_Q_DETXTR_LVL_Y0_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0;
		MINT32 NR3D_Q_DETXTR_LVL_Y1_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1;
		MINT32 NR3D_Q_DETXTR_LVL_Y2_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2;
		MINT32 NR3D_Q_DETXTR_LVL_Y3_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3;
		MINT32 NR3D_Q_DETXTR_LVL_Y4_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4;
		MINT32 NR3D_Q_DETXTR_LVL_Y5_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5;
		MINT32 NR3D_Q_DETXTR_LVL_Y6_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6;
		MINT32 NR3D_Q_DETXTR_LVL_Y7_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7;
		MINT32 NR3D_Q_DE1_BASE_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0;
		MINT32 NR3D_Q_DE1_BASE_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1;
		MINT32 NR3D_Q_DE1_BASE_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2;
		MINT32 NR3D_Q_DE1_BASE_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3;
		MINT32 NR3D_Q_DE1_BASE_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4;
		MINT32 NR3D_Q_DE1_BASE_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5;
		MINT32 NR3D_Q_DE1_BASE_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6;
		MINT32 NR3D_Q_DE1_BASE_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6;
		MINT32 NR3D_Q_DE2TXTR_BASE_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7;
		MINT32 NR3D_Q_MV_Y0_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0;
		MINT32 NR3D_Q_MV_Y1_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1;
		MINT32 NR3D_Q_MV_Y2_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2;
		MINT32 NR3D_Q_MV_Y3_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3;
		MINT32 NR3D_Q_MV_Y4_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4;
		MINT32 NR3D_Q_MV_Y5_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5;
		MINT32 NR3D_Q_MV_Y6_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6;
		MINT32 NR3D_Q_MV_Y7_U_U 	= rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7;
		MINT32 NR3D_Q_WVAR_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0;
		MINT32 NR3D_Q_WVAR_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1;
		MINT32 NR3D_Q_WVAR_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2;
		MINT32 NR3D_Q_WVAR_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3;
		MINT32 NR3D_Q_WVAR_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4;
		MINT32 NR3D_Q_WVAR_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5;
		MINT32 NR3D_Q_WVAR_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6;
		MINT32 NR3D_Q_WVAR_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7;
		MINT32 NR3D_Q_WSM_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0;
		MINT32 NR3D_Q_WSM_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1;
		MINT32 NR3D_Q_WSM_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2;
		MINT32 NR3D_Q_WSM_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3;
		MINT32 NR3D_Q_WSM_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4;
		MINT32 NR3D_Q_WSM_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5;
		MINT32 NR3D_Q_WSM_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6;
		MINT32 NR3D_Q_WSM_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7;
		MINT32 NR3D_Q_SDL_Y0_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0;
		MINT32 NR3D_Q_SDL_Y1_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1;
		MINT32 NR3D_Q_SDL_Y2_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2;
		MINT32 NR3D_Q_SDL_Y3_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3;
		MINT32 NR3D_Q_SDL_Y4_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4;
		MINT32 NR3D_Q_SDL_Y5_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5;
		MINT32 NR3D_Q_SDL_Y6_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6;
		MINT32 NR3D_Q_SDL_Y7_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7;
		MINT32 NR3D_Q_SDL_Y8_U_U		= rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8;
		MINT32 NR3D_R2C_VAL1_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1;
		MINT32 NR3D_R2C_VAL2_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2;
		MINT32 NR3D_R2C_VAL3_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3;
		MINT32 NR3D_R2C_VAL4_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4;
		MINT32 NR3D_R2CENC_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2CENC;
		MINT32 NR3D_R2C_TXTR_THR1_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1;
		MINT32 NR3D_R2C_TXTR_THR2_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2;
		MINT32 NR3D_R2C_TXTR_THR3_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3;
		MINT32 NR3D_R2C_TXTR_THR4_U_U		= rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4;
		MINT32 NR3D_R2C_TXTR_THROFF_U_U 	= rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF;
		MINT32 NR3D_SL2_OFF_U_U 	= rParam.rUpperIso_UpperZoom.on_con.bits.NR3D_SL2_OFF;
		MINT32 NR3D_TNR_Y_EN_U_U		= rParam.rUpperIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN;
		MINT32 NR3D_TNR_C_EN_U_U		= rParam.rUpperIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN;


		// interpolation core
		MINT32 NR3D_BLEND_RATIO_BLKY		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_BLEND_RATIO_BLKY_L_L, NR3D_BLEND_RATIO_BLKY_L_U, NR3D_BLEND_RATIO_BLKY_U_L, NR3D_BLEND_RATIO_BLKY_U_U, 4);
		MINT32 NR3D_BLEND_RATIO_DE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_BLEND_RATIO_DE_L_L, NR3D_BLEND_RATIO_DE_L_U, NR3D_BLEND_RATIO_DE_U_L, NR3D_BLEND_RATIO_DE_U_U, 4);
		MINT32 NR3D_BLEND_RATIO_TXTR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_BLEND_RATIO_TXTR_L_L, NR3D_BLEND_RATIO_TXTR_L_U, NR3D_BLEND_RATIO_TXTR_U_L, NR3D_BLEND_RATIO_TXTR_U_U, 4);
		MINT32 NR3D_BLEND_RATIO_MV		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_BLEND_RATIO_MV_L_L, NR3D_BLEND_RATIO_MV_L_U, NR3D_BLEND_RATIO_MV_U_L, NR3D_BLEND_RATIO_MV_U_U, 4);
		MINT32 NR3D_FLT_STR_MAX 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_FLT_STR_MAX_L_L, NR3D_FLT_STR_MAX_L_U, NR3D_FLT_STR_MAX_U_L, NR3D_FLT_STR_MAX_U_U, 4);
		MINT32 NR3D_Q_NL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_NL_L_L, NR3D_Q_NL_L_U, NR3D_Q_NL_U_L, NR3D_Q_NL_U_U, 4);
		MINT32 NR3D_Q_SP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SP_L_L, NR3D_Q_SP_L_U, NR3D_Q_SP_U_L, NR3D_Q_SP_U_U, 4);
		MINT32 NR3D_BDI_THR 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_BDI_THR_L_L, NR3D_BDI_THR_L_U, NR3D_BDI_THR_U_L, NR3D_BDI_THR_U_U, 4);
		MINT32 NR3D_MV_PEN_W		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_MV_PEN_W_L_L, NR3D_MV_PEN_W_L_U, NR3D_MV_PEN_W_U_L, NR3D_MV_PEN_W_U_U, 4);
		MINT32 NR3D_MV_PEN_THR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_MV_PEN_THR_L_L, NR3D_MV_PEN_THR_L_U, NR3D_MV_PEN_THR_U_L, NR3D_MV_PEN_THR_U_U, 4);
		MINT32 NR3D_SMALL_SAD_THR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_SMALL_SAD_THR_L_L, NR3D_SMALL_SAD_THR_L_U, NR3D_SMALL_SAD_THR_U_L, NR3D_SMALL_SAD_THR_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y0_L_L, NR3D_Q_BLKY_Y0_L_U, NR3D_Q_BLKY_Y0_U_L, NR3D_Q_BLKY_Y0_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y1_L_L, NR3D_Q_BLKY_Y1_L_U, NR3D_Q_BLKY_Y1_U_L, NR3D_Q_BLKY_Y1_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y2_L_L, NR3D_Q_BLKY_Y2_L_U, NR3D_Q_BLKY_Y2_U_L, NR3D_Q_BLKY_Y2_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y3_L_L, NR3D_Q_BLKY_Y3_L_U, NR3D_Q_BLKY_Y3_U_L, NR3D_Q_BLKY_Y3_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y4_L_L, NR3D_Q_BLKY_Y4_L_U, NR3D_Q_BLKY_Y4_U_L, NR3D_Q_BLKY_Y4_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y5_L_L, NR3D_Q_BLKY_Y5_L_U, NR3D_Q_BLKY_Y5_U_L, NR3D_Q_BLKY_Y5_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y6_L_L, NR3D_Q_BLKY_Y6_L_U, NR3D_Q_BLKY_Y6_U_L, NR3D_Q_BLKY_Y6_U_U, 4);
		MINT32 NR3D_Q_BLKY_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKY_Y7_L_L, NR3D_Q_BLKY_Y7_L_U, NR3D_Q_BLKY_Y7_U_L, NR3D_Q_BLKY_Y7_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y0_L_L, NR3D_Q_BLKC_Y0_L_U, NR3D_Q_BLKC_Y0_U_L, NR3D_Q_BLKC_Y0_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y1_L_L, NR3D_Q_BLKC_Y1_L_U, NR3D_Q_BLKC_Y1_U_L, NR3D_Q_BLKC_Y1_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y2_L_L, NR3D_Q_BLKC_Y2_L_U, NR3D_Q_BLKC_Y2_U_L, NR3D_Q_BLKC_Y2_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y3_L_L, NR3D_Q_BLKC_Y3_L_U, NR3D_Q_BLKC_Y3_U_L, NR3D_Q_BLKC_Y3_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y4_L_L, NR3D_Q_BLKC_Y4_L_U, NR3D_Q_BLKC_Y4_U_L, NR3D_Q_BLKC_Y4_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y5_L_L, NR3D_Q_BLKC_Y5_L_U, NR3D_Q_BLKC_Y5_U_L, NR3D_Q_BLKC_Y5_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y6_L_L, NR3D_Q_BLKC_Y6_L_U, NR3D_Q_BLKC_Y6_U_L, NR3D_Q_BLKC_Y6_U_U, 4);
		MINT32 NR3D_Q_BLKC_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_BLKC_Y7_L_L, NR3D_Q_BLKC_Y7_L_U, NR3D_Q_BLKC_Y7_U_L, NR3D_Q_BLKC_Y7_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y0 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y0_L_L, NR3D_Q_DETXTR_LVL_Y0_L_U, NR3D_Q_DETXTR_LVL_Y0_U_L, NR3D_Q_DETXTR_LVL_Y0_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y1 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y1_L_L, NR3D_Q_DETXTR_LVL_Y1_L_U, NR3D_Q_DETXTR_LVL_Y1_U_L, NR3D_Q_DETXTR_LVL_Y1_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y2 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y2_L_L, NR3D_Q_DETXTR_LVL_Y2_L_U, NR3D_Q_DETXTR_LVL_Y2_U_L, NR3D_Q_DETXTR_LVL_Y2_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y3 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y3_L_L, NR3D_Q_DETXTR_LVL_Y3_L_U, NR3D_Q_DETXTR_LVL_Y3_U_L, NR3D_Q_DETXTR_LVL_Y3_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y4 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y4_L_L, NR3D_Q_DETXTR_LVL_Y4_L_U, NR3D_Q_DETXTR_LVL_Y4_U_L, NR3D_Q_DETXTR_LVL_Y4_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y5 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y5_L_L, NR3D_Q_DETXTR_LVL_Y5_L_U, NR3D_Q_DETXTR_LVL_Y5_U_L, NR3D_Q_DETXTR_LVL_Y5_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y6 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y6_L_L, NR3D_Q_DETXTR_LVL_Y6_L_U, NR3D_Q_DETXTR_LVL_Y6_U_L, NR3D_Q_DETXTR_LVL_Y6_U_U, 4);
		MINT32 NR3D_Q_DETXTR_LVL_Y7 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DETXTR_LVL_Y7_L_L, NR3D_Q_DETXTR_LVL_Y7_L_U, NR3D_Q_DETXTR_LVL_Y7_U_L, NR3D_Q_DETXTR_LVL_Y7_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y0_L_L, NR3D_Q_DE1_BASE_Y0_L_U, NR3D_Q_DE1_BASE_Y0_U_L, NR3D_Q_DE1_BASE_Y0_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y1_L_L, NR3D_Q_DE1_BASE_Y1_L_U, NR3D_Q_DE1_BASE_Y1_U_L, NR3D_Q_DE1_BASE_Y1_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y2_L_L, NR3D_Q_DE1_BASE_Y2_L_U, NR3D_Q_DE1_BASE_Y2_U_L, NR3D_Q_DE1_BASE_Y2_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y3_L_L, NR3D_Q_DE1_BASE_Y3_L_U, NR3D_Q_DE1_BASE_Y3_U_L, NR3D_Q_DE1_BASE_Y3_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y4_L_L, NR3D_Q_DE1_BASE_Y4_L_U, NR3D_Q_DE1_BASE_Y4_U_L, NR3D_Q_DE1_BASE_Y4_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y5_L_L, NR3D_Q_DE1_BASE_Y5_L_U, NR3D_Q_DE1_BASE_Y5_U_L, NR3D_Q_DE1_BASE_Y5_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y6_L_L, NR3D_Q_DE1_BASE_Y6_L_U, NR3D_Q_DE1_BASE_Y6_U_L, NR3D_Q_DE1_BASE_Y6_U_U, 4);
		MINT32 NR3D_Q_DE1_BASE_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE1_BASE_Y7_L_L, NR3D_Q_DE1_BASE_Y7_L_U, NR3D_Q_DE1_BASE_Y7_U_L, NR3D_Q_DE1_BASE_Y7_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y0_L_L, NR3D_Q_DE2TXTR_BASE_Y0_L_U, NR3D_Q_DE2TXTR_BASE_Y0_U_L, NR3D_Q_DE2TXTR_BASE_Y0_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y1_L_L, NR3D_Q_DE2TXTR_BASE_Y1_L_U, NR3D_Q_DE2TXTR_BASE_Y1_U_L, NR3D_Q_DE2TXTR_BASE_Y1_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y2_L_L, NR3D_Q_DE2TXTR_BASE_Y2_L_U, NR3D_Q_DE2TXTR_BASE_Y2_U_L, NR3D_Q_DE2TXTR_BASE_Y2_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y3_L_L, NR3D_Q_DE2TXTR_BASE_Y3_L_U, NR3D_Q_DE2TXTR_BASE_Y3_U_L, NR3D_Q_DE2TXTR_BASE_Y3_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y4_L_L, NR3D_Q_DE2TXTR_BASE_Y4_L_U, NR3D_Q_DE2TXTR_BASE_Y4_U_L, NR3D_Q_DE2TXTR_BASE_Y4_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y5_L_L, NR3D_Q_DE2TXTR_BASE_Y5_L_U, NR3D_Q_DE2TXTR_BASE_Y5_U_L, NR3D_Q_DE2TXTR_BASE_Y5_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y6_L_L, NR3D_Q_DE2TXTR_BASE_Y6_L_U, NR3D_Q_DE2TXTR_BASE_Y6_U_L, NR3D_Q_DE2TXTR_BASE_Y6_U_U, 4);
		MINT32 NR3D_Q_DE2TXTR_BASE_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_DE2TXTR_BASE_Y7_L_L, NR3D_Q_DE2TXTR_BASE_Y7_L_U, NR3D_Q_DE2TXTR_BASE_Y7_U_L, NR3D_Q_DE2TXTR_BASE_Y7_U_U, 4);
		MINT32 NR3D_Q_MV_Y0 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y0_L_L, NR3D_Q_MV_Y0_L_U, NR3D_Q_MV_Y0_U_L, NR3D_Q_MV_Y0_U_U, 4);
		MINT32 NR3D_Q_MV_Y1 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y1_L_L, NR3D_Q_MV_Y1_L_U, NR3D_Q_MV_Y1_U_L, NR3D_Q_MV_Y1_U_U, 4);
		MINT32 NR3D_Q_MV_Y2 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y2_L_L, NR3D_Q_MV_Y2_L_U, NR3D_Q_MV_Y2_U_L, NR3D_Q_MV_Y2_U_U, 4);
		MINT32 NR3D_Q_MV_Y3 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y3_L_L, NR3D_Q_MV_Y3_L_U, NR3D_Q_MV_Y3_U_L, NR3D_Q_MV_Y3_U_U, 4);
		MINT32 NR3D_Q_MV_Y4 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y4_L_L, NR3D_Q_MV_Y4_L_U, NR3D_Q_MV_Y4_U_L, NR3D_Q_MV_Y4_U_U, 4);
		MINT32 NR3D_Q_MV_Y5 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y5_L_L, NR3D_Q_MV_Y5_L_U, NR3D_Q_MV_Y5_U_L, NR3D_Q_MV_Y5_U_U, 4);
		MINT32 NR3D_Q_MV_Y6 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y6_L_L, NR3D_Q_MV_Y6_L_U, NR3D_Q_MV_Y6_U_L, NR3D_Q_MV_Y6_U_U, 4);
		MINT32 NR3D_Q_MV_Y7 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_MV_Y7_L_L, NR3D_Q_MV_Y7_L_U, NR3D_Q_MV_Y7_U_L, NR3D_Q_MV_Y7_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y0_L_L, NR3D_Q_WVAR_Y0_L_U, NR3D_Q_WVAR_Y0_U_L, NR3D_Q_WVAR_Y0_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y1_L_L, NR3D_Q_WVAR_Y1_L_U, NR3D_Q_WVAR_Y1_U_L, NR3D_Q_WVAR_Y1_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y2_L_L, NR3D_Q_WVAR_Y2_L_U, NR3D_Q_WVAR_Y2_U_L, NR3D_Q_WVAR_Y2_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y3_L_L, NR3D_Q_WVAR_Y3_L_U, NR3D_Q_WVAR_Y3_U_L, NR3D_Q_WVAR_Y3_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y4_L_L, NR3D_Q_WVAR_Y4_L_U, NR3D_Q_WVAR_Y4_U_L, NR3D_Q_WVAR_Y4_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y5_L_L, NR3D_Q_WVAR_Y5_L_U, NR3D_Q_WVAR_Y5_U_L, NR3D_Q_WVAR_Y5_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y6_L_L, NR3D_Q_WVAR_Y6_L_U, NR3D_Q_WVAR_Y6_U_L, NR3D_Q_WVAR_Y6_U_U, 4);
		MINT32 NR3D_Q_WVAR_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WVAR_Y7_L_L, NR3D_Q_WVAR_Y7_L_U, NR3D_Q_WVAR_Y7_U_L, NR3D_Q_WVAR_Y7_U_U, 4);
		MINT32 NR3D_Q_WSM_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y0_L_L, NR3D_Q_WSM_Y0_L_U, NR3D_Q_WSM_Y0_U_L, NR3D_Q_WSM_Y0_U_U, 4);
		MINT32 NR3D_Q_WSM_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y1_L_L, NR3D_Q_WSM_Y1_L_U, NR3D_Q_WSM_Y1_U_L, NR3D_Q_WSM_Y1_U_U, 4);
		MINT32 NR3D_Q_WSM_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y2_L_L, NR3D_Q_WSM_Y2_L_U, NR3D_Q_WSM_Y2_U_L, NR3D_Q_WSM_Y2_U_U, 4);
		MINT32 NR3D_Q_WSM_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y3_L_L, NR3D_Q_WSM_Y3_L_U, NR3D_Q_WSM_Y3_U_L, NR3D_Q_WSM_Y3_U_U, 4);
		MINT32 NR3D_Q_WSM_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y4_L_L, NR3D_Q_WSM_Y4_L_U, NR3D_Q_WSM_Y4_U_L, NR3D_Q_WSM_Y4_U_U, 4);
		MINT32 NR3D_Q_WSM_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y5_L_L, NR3D_Q_WSM_Y5_L_U, NR3D_Q_WSM_Y5_U_L, NR3D_Q_WSM_Y5_U_U, 4);
		MINT32 NR3D_Q_WSM_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y6_L_L, NR3D_Q_WSM_Y6_L_U, NR3D_Q_WSM_Y6_U_L, NR3D_Q_WSM_Y6_U_U, 4);
		MINT32 NR3D_Q_WSM_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_WSM_Y7_L_L, NR3D_Q_WSM_Y7_L_U, NR3D_Q_WSM_Y7_U_L, NR3D_Q_WSM_Y7_U_U, 4);
		MINT32 NR3D_Q_SDL_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y0_L_L, NR3D_Q_SDL_Y0_L_U, NR3D_Q_SDL_Y0_U_L, NR3D_Q_SDL_Y0_U_U, 4);
		MINT32 NR3D_Q_SDL_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y1_L_L, NR3D_Q_SDL_Y1_L_U, NR3D_Q_SDL_Y1_U_L, NR3D_Q_SDL_Y1_U_U, 4);
		MINT32 NR3D_Q_SDL_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y2_L_L, NR3D_Q_SDL_Y2_L_U, NR3D_Q_SDL_Y2_U_L, NR3D_Q_SDL_Y2_U_U, 4);
		MINT32 NR3D_Q_SDL_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y3_L_L, NR3D_Q_SDL_Y3_L_U, NR3D_Q_SDL_Y3_U_L, NR3D_Q_SDL_Y3_U_U, 4);
		MINT32 NR3D_Q_SDL_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y4_L_L, NR3D_Q_SDL_Y4_L_U, NR3D_Q_SDL_Y4_U_L, NR3D_Q_SDL_Y4_U_U, 4);
		MINT32 NR3D_Q_SDL_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y5_L_L, NR3D_Q_SDL_Y5_L_U, NR3D_Q_SDL_Y5_U_L, NR3D_Q_SDL_Y5_U_U, 4);
		MINT32 NR3D_Q_SDL_Y6		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y6_L_L, NR3D_Q_SDL_Y6_L_U, NR3D_Q_SDL_Y6_U_L, NR3D_Q_SDL_Y6_U_U, 4);
		MINT32 NR3D_Q_SDL_Y7		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y7_L_L, NR3D_Q_SDL_Y7_L_U, NR3D_Q_SDL_Y7_U_L, NR3D_Q_SDL_Y7_U_U, 4);
		MINT32 NR3D_Q_SDL_Y8		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_Q_SDL_Y8_L_L, NR3D_Q_SDL_Y8_L_U, NR3D_Q_SDL_Y8_U_L, NR3D_Q_SDL_Y8_U_U, 4);
		MINT32 NR3D_R2C_VAL1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_VAL1_L_L, NR3D_R2C_VAL1_L_U, NR3D_R2C_VAL1_U_L, NR3D_R2C_VAL1_U_U, 4);
		MINT32 NR3D_R2C_VAL2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_VAL2_L_L, NR3D_R2C_VAL2_L_U, NR3D_R2C_VAL2_U_L, NR3D_R2C_VAL2_U_U, 4);
		MINT32 NR3D_R2C_VAL3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_VAL3_L_L, NR3D_R2C_VAL3_L_U, NR3D_R2C_VAL3_U_L, NR3D_R2C_VAL3_U_U, 4);
		MINT32 NR3D_R2C_VAL4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_VAL4_L_L, NR3D_R2C_VAL4_L_U, NR3D_R2C_VAL4_U_L, NR3D_R2C_VAL4_U_U, 4);
		MINT32 NR3D_R2CENC		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2CENC_L_L, NR3D_R2CENC_L_U, NR3D_R2CENC_U_L, NR3D_R2CENC_U_U, 4);
		MINT32 NR3D_R2C_TXTR_THR1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_TXTR_THR1_L_L, NR3D_R2C_TXTR_THR1_L_U, NR3D_R2C_TXTR_THR1_U_L, NR3D_R2C_TXTR_THR1_U_U, 4);
		MINT32 NR3D_R2C_TXTR_THR2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_TXTR_THR2_L_L, NR3D_R2C_TXTR_THR2_L_U, NR3D_R2C_TXTR_THR2_U_L, NR3D_R2C_TXTR_THR2_U_U, 4);
		MINT32 NR3D_R2C_TXTR_THR3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_TXTR_THR3_L_L, NR3D_R2C_TXTR_THR3_L_U, NR3D_R2C_TXTR_THR3_U_L, NR3D_R2C_TXTR_THR3_U_U, 4);
		MINT32 NR3D_R2C_TXTR_THR4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_TXTR_THR4_L_L, NR3D_R2C_TXTR_THR4_L_U, NR3D_R2C_TXTR_THR4_U_L, NR3D_R2C_TXTR_THR4_U_U, 4);
		MINT32 NR3D_R2C_TXTR_THROFF 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_R2C_TXTR_THROFF_L_L, NR3D_R2C_TXTR_THROFF_L_U, NR3D_R2C_TXTR_THROFF_U_L, NR3D_R2C_TXTR_THROFF_U_U, 4);
		MINT32 NR3D_SL2_OFF 	= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_SL2_OFF_L_L, NR3D_SL2_OFF_L_U, NR3D_SL2_OFF_U_L, NR3D_SL2_OFF_U_U, 5);
		MINT32 NR3D_TNR_Y_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_TNR_Y_EN_L_L, NR3D_TNR_Y_EN_L_U, NR3D_TNR_Y_EN_U_L, NR3D_TNR_Y_EN_U_U, 5);
		MINT32 NR3D_TNR_C_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, NR3D_TNR_C_EN_L_L, NR3D_TNR_C_EN_L_U, NR3D_TNR_C_EN_U_L, NR3D_TNR_C_EN_U_U, 5);


		// assign interpolation result
		rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY		= NR3D_BLEND_RATIO_BLKY;
		rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE 	  = NR3D_BLEND_RATIO_DE;
		rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR		= NR3D_BLEND_RATIO_TXTR;
		rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV 	  = NR3D_BLEND_RATIO_MV;
		rSmoothNR3D.tnr_flt_config.bits.NR3D_FLT_STR_MAX	   = NR3D_FLT_STR_MAX;
		rSmoothNR3D.tnr_fb_info1.bits.NR3D_Q_NL 	  = NR3D_Q_NL;
		rSmoothNR3D.tnr_fb_info1.bits.NR3D_Q_SP 	  = NR3D_Q_SP;
		rSmoothNR3D.tnr_thr_1.bits.NR3D_BDI_THR 	  = NR3D_BDI_THR;
		rSmoothNR3D.tnr_thr_1.bits.NR3D_MV_PEN_W	   = NR3D_MV_PEN_W;
		rSmoothNR3D.tnr_thr_1.bits.NR3D_MV_PEN_THR		 = NR3D_MV_PEN_THR;
		rSmoothNR3D.tnr_thr_1.bits.NR3D_SMALL_SAD_THR		= NR3D_SMALL_SAD_THR;
		rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y0 	  = NR3D_Q_BLKY_Y0;
		rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y1 	  = NR3D_Q_BLKY_Y1;
		rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y2 	  = NR3D_Q_BLKY_Y2;
		rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y3 	  = NR3D_Q_BLKY_Y3;
		rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y4 	  = NR3D_Q_BLKY_Y4;
		rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y5 	  = NR3D_Q_BLKY_Y5;
		rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y6 	  = NR3D_Q_BLKY_Y6;
		rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y7 	  = NR3D_Q_BLKY_Y7;
		rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKC_Y0 	  = NR3D_Q_BLKC_Y0;
		rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKC_Y1 	  = NR3D_Q_BLKC_Y1;
		rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y2 	  = NR3D_Q_BLKC_Y2;
		rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y3 	  = NR3D_Q_BLKC_Y3;
		rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y4 	  = NR3D_Q_BLKC_Y4;
		rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y5 	  = NR3D_Q_BLKC_Y5;
		rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y6 	  = NR3D_Q_BLKC_Y6;
		rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_BLKC_Y7 	  = NR3D_Q_BLKC_Y7;
		rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0		= NR3D_Q_DETXTR_LVL_Y0;
		rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1		= NR3D_Q_DETXTR_LVL_Y1;
		rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2		= NR3D_Q_DETXTR_LVL_Y2;
		rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3		= NR3D_Q_DETXTR_LVL_Y3;
		rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4		= NR3D_Q_DETXTR_LVL_Y4;
		rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5		= NR3D_Q_DETXTR_LVL_Y5;
		rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6		= NR3D_Q_DETXTR_LVL_Y6;
		rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7		= NR3D_Q_DETXTR_LVL_Y7;
		rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0 	  = NR3D_Q_DE1_BASE_Y0;
		rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1 	  = NR3D_Q_DE1_BASE_Y1;
		rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2 	  = NR3D_Q_DE1_BASE_Y2;
		rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3 	  = NR3D_Q_DE1_BASE_Y3;
		rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4 	  = NR3D_Q_DE1_BASE_Y4;
		rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5 	  = NR3D_Q_DE1_BASE_Y5;
		rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6 	  = NR3D_Q_DE1_BASE_Y6;
		rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7 	  = NR3D_Q_DE1_BASE_Y7;
		rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0 	  = NR3D_Q_DE2TXTR_BASE_Y0;
		rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1 	  = NR3D_Q_DE2TXTR_BASE_Y1;
		rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2 	  = NR3D_Q_DE2TXTR_BASE_Y2;
		rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3 	  = NR3D_Q_DE2TXTR_BASE_Y3;
		rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4 	  = NR3D_Q_DE2TXTR_BASE_Y4;
		rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5 	  = NR3D_Q_DE2TXTR_BASE_Y5;
		rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6 	  = NR3D_Q_DE2TXTR_BASE_Y6;
		rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7 	  = NR3D_Q_DE2TXTR_BASE_Y7;
		rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y0		= NR3D_Q_MV_Y0;
		rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y1		= NR3D_Q_MV_Y1;
		rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y2		= NR3D_Q_MV_Y2;
		rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y3		= NR3D_Q_MV_Y3;
		rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y4		= NR3D_Q_MV_Y4;
		rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y5		 = NR3D_Q_MV_Y5;
		rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y6		 = NR3D_Q_MV_Y6;
		rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y7		 = NR3D_Q_MV_Y7;
		rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_WVAR_Y0	   = NR3D_Q_WVAR_Y0;
		rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_WVAR_Y1	   = NR3D_Q_WVAR_Y1;
		rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y2	   = NR3D_Q_WVAR_Y2;
		rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y3	   = NR3D_Q_WVAR_Y3;
		rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y4	   = NR3D_Q_WVAR_Y4;
		rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y5	   = NR3D_Q_WVAR_Y5;
		rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y6	   = NR3D_Q_WVAR_Y6;
		rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WVAR_Y7	   = NR3D_Q_WVAR_Y7;
		rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y0 	  = NR3D_Q_WSM_Y0;
		rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y1 	  = NR3D_Q_WSM_Y1;
		rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y2 	  = NR3D_Q_WSM_Y2;
		rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y3 	  = NR3D_Q_WSM_Y3;
		rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y4 	  = NR3D_Q_WSM_Y4;
		rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y5 	  = NR3D_Q_WSM_Y5;
		rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y6 	  = NR3D_Q_WSM_Y6;
		rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y7 	  = NR3D_Q_WSM_Y7;
		rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y0 	  = NR3D_Q_SDL_Y0;
		rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y1 	  = NR3D_Q_SDL_Y1;
		rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y2 	  = NR3D_Q_SDL_Y2;
		rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y3 	  = NR3D_Q_SDL_Y3;
		rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y4 	  = NR3D_Q_SDL_Y4;
		rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y5 	  = NR3D_Q_SDL_Y5;
		rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y6 	  = NR3D_Q_SDL_Y6;
		rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y7 	  = NR3D_Q_SDL_Y7;
		rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y8 	  = NR3D_Q_SDL_Y8;
		rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL1	   = NR3D_R2C_VAL1;
		rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL2	   = NR3D_R2C_VAL2;
		rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL3	   = NR3D_R2C_VAL3;
		rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL4	   = NR3D_R2C_VAL4;
		rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2CENC		 = NR3D_R2CENC;
		rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1		= NR3D_R2C_TXTR_THR1;
		rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2		= NR3D_R2C_TXTR_THR2;
		rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3		= NR3D_R2C_TXTR_THR3;
		rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4		= NR3D_R2C_TXTR_THR4;
		rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF 	  = NR3D_R2C_TXTR_THROFF;
		rSmoothNR3D.on_con.bits.NR3D_SL2_OFF	   = NR3D_SL2_OFF;
		rSmoothNR3D.tnr_tnr_enable.bits.NR3D_TNR_Y_EN		= NR3D_TNR_Y_EN;
		rSmoothNR3D.tnr_tnr_enable.bits.NR3D_TNR_C_EN		= NR3D_TNR_C_EN;


		// log
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_BLEND_RATIO_BLKY = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY, rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY, rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY, rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY, rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_BLKY);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_BLEND_RATIO_DE = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE, rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE, rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE, rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE, rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_DE);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_BLEND_RATIO_TXTR = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR, rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR, rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR, rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR, rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_TXTR);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_BLEND_RATIO_MV = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV, rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV, rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV, rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV, rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_BLEND_RATIO_MV);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_FLT_STR_MAX = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_flt_config.bits.NR3D_FLT_STR_MAX, rParam.rLowerIso_LowerZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX, rParam.rLowerIso_UpperZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX, rParam.rUpperIso_LowerZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX, rParam.rUpperIso_UpperZoom.tnr_flt_config.bits.NR3D_FLT_STR_MAX);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_NL = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_fb_info1.bits.NR3D_Q_NL, rParam.rLowerIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_NL, rParam.rLowerIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_NL, rParam.rUpperIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_NL, rParam.rUpperIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_NL);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SP = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_fb_info1.bits.NR3D_Q_SP, rParam.rLowerIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_SP, rParam.rLowerIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_SP, rParam.rUpperIso_LowerZoom.tnr_fb_info1.bits.NR3D_Q_SP, rParam.rUpperIso_UpperZoom.tnr_fb_info1.bits.NR3D_Q_SP);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_BDI_THR = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_thr_1.bits.NR3D_BDI_THR, rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_BDI_THR, rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_BDI_THR, rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_BDI_THR, rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_BDI_THR);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_MV_PEN_W = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_thr_1.bits.NR3D_MV_PEN_W, rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_W, rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_W, rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_W, rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_W);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_MV_PEN_THR = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_thr_1.bits.NR3D_MV_PEN_THR, rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR, rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR, rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR, rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_MV_PEN_THR);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_SMALL_SAD_THR = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_thr_1.bits.NR3D_SMALL_SAD_THR, rParam.rLowerIso_LowerZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR, rParam.rLowerIso_UpperZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR, rParam.rUpperIso_LowerZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR, rParam.rUpperIso_UpperZoom.tnr_thr_1.bits.NR3D_SMALL_SAD_THR);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_1.bits.NR3D_Q_BLKY_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_1.bits.NR3D_Q_BLKY_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKY_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKY_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKY_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKC_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_2.bits.NR3D_Q_BLKC_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_2.bits.NR3D_Q_BLKC_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_3.bits.NR3D_Q_BLKC_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_3.bits.NR3D_Q_BLKC_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_BLKC_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_BLKC_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_BLKC_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_4.bits.NR3D_Q_DETXTR_LVL_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DETXTR_LVL_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DETXTR_LVL_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_5.bits.NR3D_Q_DE1_BASE_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_6.bits.NR3D_Q_DE1_BASE_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE1_BASE_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE1_BASE_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_7.bits.NR3D_Q_DE2TXTR_BASE_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_DE2TXTR_BASE_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_8.bits.NR3D_Q_DE2TXTR_BASE_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_9.bits.NR3D_Q_MV_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_9.bits.NR3D_Q_MV_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_MV_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_MV_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_MV_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_WVAR_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_10.bits.NR3D_Q_WVAR_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_10.bits.NR3D_Q_WVAR_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_11.bits.NR3D_Q_WVAR_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_11.bits.NR3D_Q_WVAR_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WVAR_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WVAR_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WVAR_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_12.bits.NR3D_Q_WSM_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_12.bits.NR3D_Q_WSM_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_WSM_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_13.bits.NR3D_Q_WSM_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_13.bits.NR3D_Q_WSM_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y0 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y0, rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0, rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0, rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0, rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y0);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y1, rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1, rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1, rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1, rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y2, rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2, rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2, rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2, rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y3, rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3, rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3, rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3, rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_14.bits.NR3D_Q_SDL_Y4, rParam.rLowerIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4, rParam.rLowerIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4, rParam.rUpperIso_LowerZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4, rParam.rUpperIso_UpperZoom.tnr_curve_14.bits.NR3D_Q_SDL_Y4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y5 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y5, rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5, rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5, rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5, rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y5);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y6 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y6, rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6, rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6, rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6, rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y6);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y7 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y7, rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7, rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7, rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7, rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y7);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_Q_SDL_Y8 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_curve_15.bits.NR3D_Q_SDL_Y8, rParam.rLowerIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8, rParam.rLowerIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8, rParam.rUpperIso_LowerZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8, rParam.rUpperIso_UpperZoom.tnr_curve_15.bits.NR3D_Q_SDL_Y8);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_VAL1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL1, rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1, rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1, rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1, rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_VAL2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL2, rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2, rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2, rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2, rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_VAL3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL3, rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3, rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3, rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3, rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_VAL4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2C_VAL4, rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4, rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4, rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4, rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2C_VAL4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2CENC = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_1.bits.NR3D_R2CENC, rParam.rLowerIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2CENC, rParam.rLowerIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2CENC, rParam.rUpperIso_LowerZoom.tnr_r2c_1.bits.NR3D_R2CENC, rParam.rUpperIso_UpperZoom.tnr_r2c_1.bits.NR3D_R2CENC);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_TXTR_THR1 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1, rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1, rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1, rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1, rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR1);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_TXTR_THR2 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2, rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2, rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2, rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2, rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR2);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_TXTR_THR3 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3, rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3, rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3, rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3, rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR3);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_TXTR_THR4 = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4, rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4, rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4, rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4, rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THR4);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_R2C_TXTR_THROFF = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF, rParam.rLowerIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF, rParam.rLowerIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF, rParam.rUpperIso_LowerZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF, rParam.rUpperIso_UpperZoom.tnr_r2c_2.bits.NR3D_R2C_TXTR_THROFF);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_SL2_OFF = %d, %d, %d, %d, %d", rSmoothNR3D.on_con.bits.NR3D_SL2_OFF, rParam.rLowerIso_LowerZoom.on_con.bits.NR3D_SL2_OFF, rParam.rLowerIso_UpperZoom.on_con.bits.NR3D_SL2_OFF, rParam.rUpperIso_LowerZoom.on_con.bits.NR3D_SL2_OFF, rParam.rUpperIso_UpperZoom.on_con.bits.NR3D_SL2_OFF);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_TNR_Y_EN = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_tnr_enable.bits.NR3D_TNR_Y_EN, rParam.rLowerIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN, rParam.rLowerIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN, rParam.rUpperIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN, rParam.rUpperIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_Y_EN);
		INTER_LOG_IF(bSmoothNR3DDebug, "[S, L_L, L_U, U_L, U_U]NR3D_TNR_C_EN = %d, %d, %d, %d, %d", rSmoothNR3D.tnr_tnr_enable.bits.NR3D_TNR_C_EN, rParam.rLowerIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN, rParam.rLowerIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN, rParam.rUpperIso_LowerZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN, rParam.rUpperIso_UpperZoom.tnr_tnr_enable.bits.NR3D_TNR_C_EN);


}
MVOID SmoothOBC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_OBC_T const& rUpperOBC,   // OBC settings for upper ISO
                ISP_NVRAM_OBC_T const& rLowerOBC,   // OBC settings for lower ISO
                ISP_NVRAM_OBC_T& rSmoothOBC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_obc.enable", value, "0");
    MBOOL bSmoothOBCDebug = atoi(value);

    INTER_LOG_IF(bSmoothOBCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_OBC_OFST_R       = rLowerOBC.offst3.bits.OBC_OFST_R;
    MINT32 pre_OBC_OFST_GR       = rLowerOBC.offst1.bits.OBC_OFST_GR;
    MINT32 pre_OBC_OFST_GB       = rLowerOBC.offst2.bits.OBC_OFST_GB;
    MINT32 pre_OBC_OFST_B       = rLowerOBC.offst0.bits.OBC_OFST_B;
    MINT32 pre_OBC_GAIN_R       = rLowerOBC.gain3.bits.OBC_GAIN_R;
    MINT32 pre_OBC_GAIN_GR       = rLowerOBC.gain1.bits.OBC_GAIN_GR;
    MINT32 pre_OBC_GAIN_GB       = rLowerOBC.gain2.bits.OBC_GAIN_GB;
    MINT32 pre_OBC_GAIN_B       = rLowerOBC.gain0.bits.OBC_GAIN_B;
    MINT32 pos_OBC_OFST_R       = rUpperOBC.offst3.bits.OBC_OFST_R;
    MINT32 pos_OBC_OFST_GR       = rUpperOBC.offst1.bits.OBC_OFST_GR;
    MINT32 pos_OBC_OFST_GB       = rUpperOBC.offst2.bits.OBC_OFST_GB;
    MINT32 pos_OBC_OFST_B       = rUpperOBC.offst0.bits.OBC_OFST_B;
    MINT32 pos_OBC_GAIN_R       = rUpperOBC.gain3.bits.OBC_GAIN_R;
    MINT32 pos_OBC_GAIN_GR       = rUpperOBC.gain1.bits.OBC_GAIN_GR;
    MINT32 pos_OBC_GAIN_GB       = rUpperOBC.gain2.bits.OBC_GAIN_GB;
    MINT32 pos_OBC_GAIN_B       = rUpperOBC.gain0.bits.OBC_GAIN_B;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 OBC_OFST_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_R, pos_OBC_OFST_R, 0);
    MINT32 OBC_OFST_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_GR, pos_OBC_OFST_GR, 0);
    MINT32 OBC_OFST_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_GB, pos_OBC_OFST_GB, 0);
    MINT32 OBC_OFST_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_B, pos_OBC_OFST_B, 0);
    MINT32 OBC_GAIN_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_GAIN_R, pos_OBC_GAIN_R, 0);
    MINT32 OBC_GAIN_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_GAIN_GR, pos_OBC_GAIN_GR, 0);
    MINT32 OBC_GAIN_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_GAIN_GB, pos_OBC_GAIN_GB, 0);
    MINT32 OBC_GAIN_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_GAIN_B, pos_OBC_GAIN_B, 0);


    // interpolation result assignment
    rSmoothOBC.offst3.bits.OBC_OFST_R       = OBC_OFST_R;
    rSmoothOBC.offst1.bits.OBC_OFST_GR       = OBC_OFST_GR;
    rSmoothOBC.offst2.bits.OBC_OFST_GB       = OBC_OFST_GB;
    rSmoothOBC.offst0.bits.OBC_OFST_B       = OBC_OFST_B;
    rSmoothOBC.gain3.bits.OBC_GAIN_R       = OBC_GAIN_R;
    rSmoothOBC.gain1.bits.OBC_GAIN_GR       = OBC_GAIN_GR;
    rSmoothOBC.gain2.bits.OBC_GAIN_GB       = OBC_GAIN_GB;
    rSmoothOBC.gain0.bits.OBC_GAIN_B       = OBC_GAIN_B;


    // logging
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_R       = %d, %d, %d", rLowerOBC.offst3.bits.OBC_OFST_R, rSmoothOBC.offst3.bits.OBC_OFST_R, rUpperOBC.offst3.bits.OBC_OFST_R);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_GR       = %d, %d, %d", rLowerOBC.offst1.bits.OBC_OFST_GR, rSmoothOBC.offst1.bits.OBC_OFST_GR, rUpperOBC.offst1.bits.OBC_OFST_GR);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_GB       = %d, %d, %d", rLowerOBC.offst2.bits.OBC_OFST_GB, rSmoothOBC.offst2.bits.OBC_OFST_GB, rUpperOBC.offst2.bits.OBC_OFST_GB);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_B       = %d, %d, %d", rLowerOBC.offst0.bits.OBC_OFST_B, rSmoothOBC.offst0.bits.OBC_OFST_B, rUpperOBC.offst0.bits.OBC_OFST_B);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_GAIN_R       = %d, %d, %d", rLowerOBC.gain3.bits.OBC_GAIN_R, rSmoothOBC.gain3.bits.OBC_GAIN_R, rUpperOBC.gain3.bits.OBC_GAIN_R);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_GAIN_GR       = %d, %d, %d", rLowerOBC.gain1.bits.OBC_GAIN_GR, rSmoothOBC.gain1.bits.OBC_GAIN_GR, rUpperOBC.gain1.bits.OBC_GAIN_GR);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_GAIN_GB       = %d, %d, %d", rLowerOBC.gain2.bits.OBC_GAIN_GB, rSmoothOBC.gain2.bits.OBC_GAIN_GB, rUpperOBC.gain2.bits.OBC_GAIN_GB);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_GAIN_B       = %d, %d, %d", rLowerOBC.gain0.bits.OBC_GAIN_B, rSmoothOBC.gain0.bits.OBC_GAIN_B, rUpperOBC.gain0.bits.OBC_GAIN_B);

}

MVOID SmoothPDC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BNR_PDC_T const& rUpperPDC,   // PDC settings for upper ISO
                ISP_NVRAM_BNR_PDC_T const& rLowerPDC,   // PDC settings for lower ISO
                ISP_NVRAM_BNR_PDC_T& rSmoothPDC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_pdc.enable", value, "0");
    MBOOL bSmoothPDCDebug = atoi(value);

    INTER_LOG_IF(bSmoothPDCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_PDC_GCF_L10       = rLowerPDC.gain_l0.bits.PDC_GCF_L10;
    MINT32 pre_PDC_GCF_L00       = rLowerPDC.gain_l0.bits.PDC_GCF_L00;
    MINT32 pre_PDC_GCF_L20       = rLowerPDC.gain_l1.bits.PDC_GCF_L20;
    MINT32 pre_PDC_GCF_L01       = rLowerPDC.gain_l1.bits.PDC_GCF_L01;
    MINT32 pre_PDC_GCF_L02       = rLowerPDC.gain_l2.bits.PDC_GCF_L02;
    MINT32 pre_PDC_GCF_L11       = rLowerPDC.gain_l2.bits.PDC_GCF_L11;
    MINT32 pre_PDC_GCF_L21       = rLowerPDC.gain_l3.bits.PDC_GCF_L21;
    MINT32 pre_PDC_GCF_L30       = rLowerPDC.gain_l3.bits.PDC_GCF_L30;
    MINT32 pre_PDC_GCF_L03       = rLowerPDC.gain_l4.bits.PDC_GCF_L03;
    MINT32 pre_PDC_GCF_L12       = rLowerPDC.gain_l4.bits.PDC_GCF_L12;
    MINT32 pre_PDC_GCF_R10       = rLowerPDC.gain_r0.bits.PDC_GCF_R10;
    MINT32 pre_PDC_GCF_R00       = rLowerPDC.gain_r0.bits.PDC_GCF_R00;
    MINT32 pre_PDC_GCF_R20       = rLowerPDC.gain_r1.bits.PDC_GCF_R20;
    MINT32 pre_PDC_GCF_R01       = rLowerPDC.gain_r1.bits.PDC_GCF_R01;
    MINT32 pre_PDC_GCF_R02       = rLowerPDC.gain_r2.bits.PDC_GCF_R02;
    MINT32 pre_PDC_GCF_R11       = rLowerPDC.gain_r2.bits.PDC_GCF_R11;
    MINT32 pre_PDC_GCF_R21       = rLowerPDC.gain_r3.bits.PDC_GCF_R21;
    MINT32 pre_PDC_GCF_R30       = rLowerPDC.gain_r3.bits.PDC_GCF_R30;
    MINT32 pre_PDC_GCF_R03       = rLowerPDC.gain_r4.bits.PDC_GCF_R03;
    MINT32 pre_PDC_GCF_R12       = rLowerPDC.gain_r4.bits.PDC_GCF_R12;
    MINT32 pre_PDC_BTH       = rLowerPDC.th_gb.bits.PDC_BTH;
    MINT32 pre_PDC_GTH       = rLowerPDC.th_gb.bits.PDC_GTH;
    MINT32 pre_PDC_ATH       = rLowerPDC.th_ia.bits.PDC_ATH;
    MINT32 pre_PDC_ITH       = rLowerPDC.th_ia.bits.PDC_ITH;
    MINT32 pre_PDC_DTH       = rLowerPDC.th_hd.bits.PDC_DTH;
    MINT32 pre_PDC_NTH       = rLowerPDC.th_hd.bits.PDC_NTH;
    MINT32 pre_PDC_GCF_NORM       = rLowerPDC.sl.bits.PDC_GCF_NORM;
    MINT32 pre_PDC_ASL       = rLowerPDC.sl.bits.PDC_ASL;
    MINT32 pre_PDC_ISL       = rLowerPDC.sl.bits.PDC_ISL;
    MINT32 pre_PDC_BSL       = rLowerPDC.sl.bits.PDC_BSL;
    MINT32 pre_PDC_GSL       = rLowerPDC.sl.bits.PDC_GSL;
    MINT32 pre_PDC_CT       = rLowerPDC.con.bits.PDC_CT;
    MINT32 pre_PDC_EN       = rLowerPDC.con.bits.PDC_EN;
    MINT32 pos_PDC_GCF_L10       = rUpperPDC.gain_l0.bits.PDC_GCF_L10;
    MINT32 pos_PDC_GCF_L00       = rUpperPDC.gain_l0.bits.PDC_GCF_L00;
    MINT32 pos_PDC_GCF_L20       = rUpperPDC.gain_l1.bits.PDC_GCF_L20;
    MINT32 pos_PDC_GCF_L01       = rUpperPDC.gain_l1.bits.PDC_GCF_L01;
    MINT32 pos_PDC_GCF_L02       = rUpperPDC.gain_l2.bits.PDC_GCF_L02;
    MINT32 pos_PDC_GCF_L11       = rUpperPDC.gain_l2.bits.PDC_GCF_L11;
    MINT32 pos_PDC_GCF_L21       = rUpperPDC.gain_l3.bits.PDC_GCF_L21;
    MINT32 pos_PDC_GCF_L30       = rUpperPDC.gain_l3.bits.PDC_GCF_L30;
    MINT32 pos_PDC_GCF_L03       = rUpperPDC.gain_l4.bits.PDC_GCF_L03;
    MINT32 pos_PDC_GCF_L12       = rUpperPDC.gain_l4.bits.PDC_GCF_L12;
    MINT32 pos_PDC_GCF_R10       = rUpperPDC.gain_r0.bits.PDC_GCF_R10;
    MINT32 pos_PDC_GCF_R00       = rUpperPDC.gain_r0.bits.PDC_GCF_R00;
    MINT32 pos_PDC_GCF_R20       = rUpperPDC.gain_r1.bits.PDC_GCF_R20;
    MINT32 pos_PDC_GCF_R01       = rUpperPDC.gain_r1.bits.PDC_GCF_R01;
    MINT32 pos_PDC_GCF_R02       = rUpperPDC.gain_r2.bits.PDC_GCF_R02;
    MINT32 pos_PDC_GCF_R11       = rUpperPDC.gain_r2.bits.PDC_GCF_R11;
    MINT32 pos_PDC_GCF_R21       = rUpperPDC.gain_r3.bits.PDC_GCF_R21;
    MINT32 pos_PDC_GCF_R30       = rUpperPDC.gain_r3.bits.PDC_GCF_R30;
    MINT32 pos_PDC_GCF_R03       = rUpperPDC.gain_r4.bits.PDC_GCF_R03;
    MINT32 pos_PDC_GCF_R12       = rUpperPDC.gain_r4.bits.PDC_GCF_R12;
    MINT32 pos_PDC_BTH       = rUpperPDC.th_gb.bits.PDC_BTH;
    MINT32 pos_PDC_GTH       = rUpperPDC.th_gb.bits.PDC_GTH;
    MINT32 pos_PDC_ATH       = rUpperPDC.th_ia.bits.PDC_ATH;
    MINT32 pos_PDC_ITH       = rUpperPDC.th_ia.bits.PDC_ITH;
    MINT32 pos_PDC_DTH       = rUpperPDC.th_hd.bits.PDC_DTH;
    MINT32 pos_PDC_NTH       = rUpperPDC.th_hd.bits.PDC_NTH;
    MINT32 pos_PDC_GCF_NORM       = rUpperPDC.sl.bits.PDC_GCF_NORM;
    MINT32 pos_PDC_ASL       = rUpperPDC.sl.bits.PDC_ASL;
    MINT32 pos_PDC_ISL       = rUpperPDC.sl.bits.PDC_ISL;
    MINT32 pos_PDC_BSL       = rUpperPDC.sl.bits.PDC_BSL;
    MINT32 pos_PDC_GSL       = rUpperPDC.sl.bits.PDC_GSL;
    MINT32 pos_PDC_CT       = rUpperPDC.con.bits.PDC_CT;
    MINT32 pos_PDC_EN       = rUpperPDC.con.bits.PDC_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 PDC_GCF_L10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L10, pos_PDC_GCF_L10, 0);
    MINT32 PDC_GCF_L00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L00, pos_PDC_GCF_L00, 0);
    MINT32 PDC_GCF_L20       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L20, pos_PDC_GCF_L20, 0);
    MINT32 PDC_GCF_L01       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L01, pos_PDC_GCF_L01, 0);
    MINT32 PDC_GCF_L02       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L02, pos_PDC_GCF_L02, 0);
    MINT32 PDC_GCF_L11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L11, pos_PDC_GCF_L11, 0);
    MINT32 PDC_GCF_L21       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L21, pos_PDC_GCF_L21, 0);
    MINT32 PDC_GCF_L30       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L30, pos_PDC_GCF_L30, 0);
    MINT32 PDC_GCF_L03       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L03, pos_PDC_GCF_L03, 0);
    MINT32 PDC_GCF_L12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_L12, pos_PDC_GCF_L12, 0);
    MINT32 PDC_GCF_R10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R10, pos_PDC_GCF_R10, 0);
    MINT32 PDC_GCF_R00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R00, pos_PDC_GCF_R00, 0);
    MINT32 PDC_GCF_R20       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R20, pos_PDC_GCF_R20, 0);
    MINT32 PDC_GCF_R01       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R01, pos_PDC_GCF_R01, 0);
    MINT32 PDC_GCF_R02       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R02, pos_PDC_GCF_R02, 0);
    MINT32 PDC_GCF_R11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R11, pos_PDC_GCF_R11, 0);
    MINT32 PDC_GCF_R21       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R21, pos_PDC_GCF_R21, 0);
    MINT32 PDC_GCF_R30       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R30, pos_PDC_GCF_R30, 0);
    MINT32 PDC_GCF_R03       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R03, pos_PDC_GCF_R03, 0);
    MINT32 PDC_GCF_R12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_R12, pos_PDC_GCF_R12, 0);
    MINT32 PDC_BTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_BTH, pos_PDC_BTH, 0);
    MINT32 PDC_GTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GTH, pos_PDC_GTH, 0);
    MINT32 PDC_ATH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_ATH, pos_PDC_ATH, 0);
    MINT32 PDC_ITH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_ITH, pos_PDC_ITH, 0);
    MINT32 PDC_DTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_DTH, pos_PDC_DTH, 0);
    MINT32 PDC_NTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_NTH, pos_PDC_NTH, 0);
    MINT32 PDC_GCF_NORM       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GCF_NORM, pos_PDC_GCF_NORM, 0);
    MINT32 PDC_ASL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_ASL, pos_PDC_ASL, 0);
    MINT32 PDC_ISL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_ISL, pos_PDC_ISL, 0);
    MINT32 PDC_BSL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_BSL, pos_PDC_BSL, 0);
    MINT32 PDC_GSL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_GSL, pos_PDC_GSL, 0);
    MINT32 PDC_CT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_CT, pos_PDC_CT, 1);
    MINT32 PDC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_PDC_EN, pos_PDC_EN, 1);


    // interpolation result assignment
    rSmoothPDC.gain_l0.bits.PDC_GCF_L10       = PDC_GCF_L10;
    rSmoothPDC.gain_l0.bits.PDC_GCF_L00       = PDC_GCF_L00;
    rSmoothPDC.gain_l1.bits.PDC_GCF_L20       = PDC_GCF_L20;
    rSmoothPDC.gain_l1.bits.PDC_GCF_L01       = PDC_GCF_L01;
    rSmoothPDC.gain_l2.bits.PDC_GCF_L02       = PDC_GCF_L02;
    rSmoothPDC.gain_l2.bits.PDC_GCF_L11       = PDC_GCF_L11;
    rSmoothPDC.gain_l3.bits.PDC_GCF_L21       = PDC_GCF_L21;
    rSmoothPDC.gain_l3.bits.PDC_GCF_L30       = PDC_GCF_L30;
    rSmoothPDC.gain_l4.bits.PDC_GCF_L03       = PDC_GCF_L03;
    rSmoothPDC.gain_l4.bits.PDC_GCF_L12       = PDC_GCF_L12;
    rSmoothPDC.gain_r0.bits.PDC_GCF_R10       = PDC_GCF_R10;
    rSmoothPDC.gain_r0.bits.PDC_GCF_R00       = PDC_GCF_R00;
    rSmoothPDC.gain_r1.bits.PDC_GCF_R20       = PDC_GCF_R20;
    rSmoothPDC.gain_r1.bits.PDC_GCF_R01       = PDC_GCF_R01;
    rSmoothPDC.gain_r2.bits.PDC_GCF_R02       = PDC_GCF_R02;
    rSmoothPDC.gain_r2.bits.PDC_GCF_R11       = PDC_GCF_R11;
    rSmoothPDC.gain_r3.bits.PDC_GCF_R21       = PDC_GCF_R21;
    rSmoothPDC.gain_r3.bits.PDC_GCF_R30       = PDC_GCF_R30;
    rSmoothPDC.gain_r4.bits.PDC_GCF_R03       = PDC_GCF_R03;
    rSmoothPDC.gain_r4.bits.PDC_GCF_R12       = PDC_GCF_R12;
    rSmoothPDC.th_gb.bits.PDC_BTH       = PDC_BTH;
    rSmoothPDC.th_gb.bits.PDC_GTH       = PDC_GTH;
    rSmoothPDC.th_ia.bits.PDC_ATH       = PDC_ATH;
    rSmoothPDC.th_ia.bits.PDC_ITH       = PDC_ITH;
    rSmoothPDC.th_hd.bits.PDC_DTH       = PDC_DTH;
    rSmoothPDC.th_hd.bits.PDC_NTH       = PDC_NTH;
    rSmoothPDC.sl.bits.PDC_GCF_NORM       = PDC_GCF_NORM;
    rSmoothPDC.sl.bits.PDC_ASL       = PDC_ASL;
    rSmoothPDC.sl.bits.PDC_ISL       = PDC_ISL;
    rSmoothPDC.sl.bits.PDC_BSL       = PDC_BSL;
    rSmoothPDC.sl.bits.PDC_GSL       = PDC_GSL;
    rSmoothPDC.con.bits.PDC_CT       = PDC_CT;
    rSmoothPDC.con.bits.PDC_EN       = PDC_EN;


    // logging
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L10       = %d, %d, %d", rLowerPDC.gain_l0.bits.PDC_GCF_L10, rSmoothPDC.gain_l0.bits.PDC_GCF_L10, rUpperPDC.gain_l0.bits.PDC_GCF_L10);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L00       = %d, %d, %d", rLowerPDC.gain_l0.bits.PDC_GCF_L00, rSmoothPDC.gain_l0.bits.PDC_GCF_L00, rUpperPDC.gain_l0.bits.PDC_GCF_L00);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L20       = %d, %d, %d", rLowerPDC.gain_l1.bits.PDC_GCF_L20, rSmoothPDC.gain_l1.bits.PDC_GCF_L20, rUpperPDC.gain_l1.bits.PDC_GCF_L20);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L01       = %d, %d, %d", rLowerPDC.gain_l1.bits.PDC_GCF_L01, rSmoothPDC.gain_l1.bits.PDC_GCF_L01, rUpperPDC.gain_l1.bits.PDC_GCF_L01);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L02       = %d, %d, %d", rLowerPDC.gain_l2.bits.PDC_GCF_L02, rSmoothPDC.gain_l2.bits.PDC_GCF_L02, rUpperPDC.gain_l2.bits.PDC_GCF_L02);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L11       = %d, %d, %d", rLowerPDC.gain_l2.bits.PDC_GCF_L11, rSmoothPDC.gain_l2.bits.PDC_GCF_L11, rUpperPDC.gain_l2.bits.PDC_GCF_L11);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L21       = %d, %d, %d", rLowerPDC.gain_l3.bits.PDC_GCF_L21, rSmoothPDC.gain_l3.bits.PDC_GCF_L21, rUpperPDC.gain_l3.bits.PDC_GCF_L21);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L30       = %d, %d, %d", rLowerPDC.gain_l3.bits.PDC_GCF_L30, rSmoothPDC.gain_l3.bits.PDC_GCF_L30, rUpperPDC.gain_l3.bits.PDC_GCF_L30);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L03       = %d, %d, %d", rLowerPDC.gain_l4.bits.PDC_GCF_L03, rSmoothPDC.gain_l4.bits.PDC_GCF_L03, rUpperPDC.gain_l4.bits.PDC_GCF_L03);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_L12       = %d, %d, %d", rLowerPDC.gain_l4.bits.PDC_GCF_L12, rSmoothPDC.gain_l4.bits.PDC_GCF_L12, rUpperPDC.gain_l4.bits.PDC_GCF_L12);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R10       = %d, %d, %d", rLowerPDC.gain_r0.bits.PDC_GCF_R10, rSmoothPDC.gain_r0.bits.PDC_GCF_R10, rUpperPDC.gain_r0.bits.PDC_GCF_R10);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R00       = %d, %d, %d", rLowerPDC.gain_r0.bits.PDC_GCF_R00, rSmoothPDC.gain_r0.bits.PDC_GCF_R00, rUpperPDC.gain_r0.bits.PDC_GCF_R00);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R20       = %d, %d, %d", rLowerPDC.gain_r1.bits.PDC_GCF_R20, rSmoothPDC.gain_r1.bits.PDC_GCF_R20, rUpperPDC.gain_r1.bits.PDC_GCF_R20);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R01       = %d, %d, %d", rLowerPDC.gain_r1.bits.PDC_GCF_R01, rSmoothPDC.gain_r1.bits.PDC_GCF_R01, rUpperPDC.gain_r1.bits.PDC_GCF_R01);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R02       = %d, %d, %d", rLowerPDC.gain_r2.bits.PDC_GCF_R02, rSmoothPDC.gain_r2.bits.PDC_GCF_R02, rUpperPDC.gain_r2.bits.PDC_GCF_R02);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R11       = %d, %d, %d", rLowerPDC.gain_r2.bits.PDC_GCF_R11, rSmoothPDC.gain_r2.bits.PDC_GCF_R11, rUpperPDC.gain_r2.bits.PDC_GCF_R11);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R21       = %d, %d, %d", rLowerPDC.gain_r3.bits.PDC_GCF_R21, rSmoothPDC.gain_r3.bits.PDC_GCF_R21, rUpperPDC.gain_r3.bits.PDC_GCF_R21);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R30       = %d, %d, %d", rLowerPDC.gain_r3.bits.PDC_GCF_R30, rSmoothPDC.gain_r3.bits.PDC_GCF_R30, rUpperPDC.gain_r3.bits.PDC_GCF_R30);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R03       = %d, %d, %d", rLowerPDC.gain_r4.bits.PDC_GCF_R03, rSmoothPDC.gain_r4.bits.PDC_GCF_R03, rUpperPDC.gain_r4.bits.PDC_GCF_R03);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_R12       = %d, %d, %d", rLowerPDC.gain_r4.bits.PDC_GCF_R12, rSmoothPDC.gain_r4.bits.PDC_GCF_R12, rUpperPDC.gain_r4.bits.PDC_GCF_R12);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_BTH       = %d, %d, %d", rLowerPDC.th_gb.bits.PDC_BTH, rSmoothPDC.th_gb.bits.PDC_BTH, rUpperPDC.th_gb.bits.PDC_BTH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GTH       = %d, %d, %d", rLowerPDC.th_gb.bits.PDC_GTH, rSmoothPDC.th_gb.bits.PDC_GTH, rUpperPDC.th_gb.bits.PDC_GTH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_ATH       = %d, %d, %d", rLowerPDC.th_ia.bits.PDC_ATH, rSmoothPDC.th_ia.bits.PDC_ATH, rUpperPDC.th_ia.bits.PDC_ATH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_ITH       = %d, %d, %d", rLowerPDC.th_ia.bits.PDC_ITH, rSmoothPDC.th_ia.bits.PDC_ITH, rUpperPDC.th_ia.bits.PDC_ITH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_DTH       = %d, %d, %d", rLowerPDC.th_hd.bits.PDC_DTH, rSmoothPDC.th_hd.bits.PDC_DTH, rUpperPDC.th_hd.bits.PDC_DTH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_NTH       = %d, %d, %d", rLowerPDC.th_hd.bits.PDC_NTH, rSmoothPDC.th_hd.bits.PDC_NTH, rUpperPDC.th_hd.bits.PDC_NTH);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GCF_NORM       = %d, %d, %d", rLowerPDC.sl.bits.PDC_GCF_NORM, rSmoothPDC.sl.bits.PDC_GCF_NORM, rUpperPDC.sl.bits.PDC_GCF_NORM);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_ASL       = %d, %d, %d", rLowerPDC.sl.bits.PDC_ASL, rSmoothPDC.sl.bits.PDC_ASL, rUpperPDC.sl.bits.PDC_ASL);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_ISL       = %d, %d, %d", rLowerPDC.sl.bits.PDC_ISL, rSmoothPDC.sl.bits.PDC_ISL, rUpperPDC.sl.bits.PDC_ISL);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_BSL       = %d, %d, %d", rLowerPDC.sl.bits.PDC_BSL, rSmoothPDC.sl.bits.PDC_BSL, rUpperPDC.sl.bits.PDC_BSL);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_GSL       = %d, %d, %d", rLowerPDC.sl.bits.PDC_GSL, rSmoothPDC.sl.bits.PDC_GSL, rUpperPDC.sl.bits.PDC_GSL);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_CT       = %d, %d, %d", rLowerPDC.con.bits.PDC_CT, rSmoothPDC.con.bits.PDC_CT, rUpperPDC.con.bits.PDC_CT);
    INTER_LOG_IF(bSmoothPDCDebug, "[L,S,U]PDC_EN       = %d, %d, %d", rLowerPDC.con.bits.PDC_EN, rSmoothPDC.con.bits.PDC_EN, rUpperPDC.con.bits.PDC_EN);

}

MVOID SmoothRMM(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_RMM_T const& rUpperRMM,   // RMM settings for upper ISO
                ISP_NVRAM_RMM_T const& rLowerRMM,   // RMM settings for lower ISO
                ISP_NVRAM_RMM_T& rSmoothRMM)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_rmm.enable", value, "0");
    MBOOL bSmoothRMMDebug = atoi(value);

    INTER_LOG_IF(bSmoothRMMDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_RMM_OSC_TH       = rLowerRMM.osc.bits.RMM_OSC_TH;
    MINT32 pre_RMM_SEDIR_SL       = rLowerRMM.osc.bits.RMM_SEDIR_SL;
    MINT32 pre_RMM_SEBLD_WD       = rLowerRMM.osc.bits.RMM_SEBLD_WD;
    MINT32 pre_RMM_LEBLD_WD       = rLowerRMM.osc.bits.RMM_LEBLD_WD;
    MINT32 pre_RMM_LE_INV_CTL       = rLowerRMM.osc.bits.RMM_LE_INV_CTL;
    MINT32 pre_RMM_MO_EDGE       = rLowerRMM.mc.bits.RMM_MO_EDGE;
    MINT32 pre_RMM_MO_EN       = rLowerRMM.mc.bits.RMM_MO_EN;
    MINT32 pre_RMM_MOBLD_FT       = rLowerRMM.mc.bits.RMM_MOBLD_FT;
    MINT32 pre_RMM_MOTH_RATIO       = rLowerRMM.mc.bits.RMM_MOTH_RATIO;
    MINT32 pre_RMM_HORI_ADDWT       = rLowerRMM.mc.bits.RMM_HORI_ADDWT;
    MINT32 pre_RMM_MOSE_TH       = rLowerRMM.mc2.bits.RMM_MOSE_TH;
    MINT32 pre_RMM_MOSE_BLDWD       = rLowerRMM.mc2.bits.RMM_MOSE_BLDWD;
    MINT32 pre_RMM_MASE_RATIO       = rLowerRMM.ma.bits.RMM_MASE_RATIO;
    MINT32 pre_RMM_OSBLD_WD       = rLowerRMM.ma.bits.RMM_OSBLD_WD;
    MINT32 pre_RMM_MASE_BLDWD       = rLowerRMM.ma.bits.RMM_MASE_BLDWD;
    MINT32 pre_RMM_SENOS_LEFAC       = rLowerRMM.ma.bits.RMM_SENOS_LEFAC;
    MINT32 pre_RMM_SEYOS_LEFAC       = rLowerRMM.ma.bits.RMM_SEYOS_LEFAC;
    MINT32 pre_RMM_PSHOR_SEEN       = rLowerRMM.tune.bits.RMM_PSHOR_SEEN;
    MINT32 pre_RMM_PS_BLUR       = rLowerRMM.tune.bits.RMM_PS_BLUR;
    MINT32 pre_RMM_OSC_REPEN       = rLowerRMM.tune.bits.RMM_OSC_REPEN;
    MINT32 pre_RMM_SOFT_TH_EN       = rLowerRMM.tune.bits.RMM_SOFT_TH_EN;
    MINT32 pre_RMM_LE_LOWPA_EN       = rLowerRMM.tune.bits.RMM_LE_LOWPA_EN;
    MINT32 pre_RMM_SE_LOWPA_EN       = rLowerRMM.tune.bits.RMM_SE_LOWPA_EN;
    MINT32 pre_RMM_PSSEC_ONLY       = rLowerRMM.tune.bits.RMM_PSSEC_ONLY;
    MINT32 pre_RMM_OSCLE_ONLY       = rLowerRMM.tune.bits.RMM_OSCLE_ONLY;
    MINT32 pre_RMM_PS_TH       = rLowerRMM.tune.bits.RMM_PS_TH;
    MINT32 pre_RMM_MOLE_DIREN       = rLowerRMM.tune.bits.RMM_MOLE_DIREN;
    MINT32 pre_RMM_MOSE_DIREN       = rLowerRMM.tune.bits.RMM_MOSE_DIREN;
    MINT32 pre_RMM_MO_2DBLD_EN       = rLowerRMM.tune.bits.RMM_MO_2DBLD_EN;
    MINT32 pre_RMM_OSC_IDX       = rLowerRMM.ridx.bits.RMM_OSC_IDX;
    MINT32 pre_RMM_PS_IDX       = rLowerRMM.ridx.bits.RMM_PS_IDX;
    MINT32 pre_RMM_MOSE_IDX       = rLowerRMM.ridx.bits.RMM_MOSE_IDX;
    MINT32 pos_RMM_OSC_TH       = rUpperRMM.osc.bits.RMM_OSC_TH;
    MINT32 pos_RMM_SEDIR_SL       = rUpperRMM.osc.bits.RMM_SEDIR_SL;
    MINT32 pos_RMM_SEBLD_WD       = rUpperRMM.osc.bits.RMM_SEBLD_WD;
    MINT32 pos_RMM_LEBLD_WD       = rUpperRMM.osc.bits.RMM_LEBLD_WD;
    MINT32 pos_RMM_LE_INV_CTL       = rUpperRMM.osc.bits.RMM_LE_INV_CTL;
    MINT32 pos_RMM_MO_EDGE       = rUpperRMM.mc.bits.RMM_MO_EDGE;
    MINT32 pos_RMM_MO_EN       = rUpperRMM.mc.bits.RMM_MO_EN;
    MINT32 pos_RMM_MOBLD_FT       = rUpperRMM.mc.bits.RMM_MOBLD_FT;
    MINT32 pos_RMM_MOTH_RATIO       = rUpperRMM.mc.bits.RMM_MOTH_RATIO;
    MINT32 pos_RMM_HORI_ADDWT       = rUpperRMM.mc.bits.RMM_HORI_ADDWT;
    MINT32 pos_RMM_MOSE_TH       = rUpperRMM.mc2.bits.RMM_MOSE_TH;
    MINT32 pos_RMM_MOSE_BLDWD       = rUpperRMM.mc2.bits.RMM_MOSE_BLDWD;
    MINT32 pos_RMM_MASE_RATIO       = rUpperRMM.ma.bits.RMM_MASE_RATIO;
    MINT32 pos_RMM_OSBLD_WD       = rUpperRMM.ma.bits.RMM_OSBLD_WD;
    MINT32 pos_RMM_MASE_BLDWD       = rUpperRMM.ma.bits.RMM_MASE_BLDWD;
    MINT32 pos_RMM_SENOS_LEFAC       = rUpperRMM.ma.bits.RMM_SENOS_LEFAC;
    MINT32 pos_RMM_SEYOS_LEFAC       = rUpperRMM.ma.bits.RMM_SEYOS_LEFAC;
    MINT32 pos_RMM_PSHOR_SEEN       = rUpperRMM.tune.bits.RMM_PSHOR_SEEN;
    MINT32 pos_RMM_PS_BLUR       = rUpperRMM.tune.bits.RMM_PS_BLUR;
    MINT32 pos_RMM_OSC_REPEN       = rUpperRMM.tune.bits.RMM_OSC_REPEN;
    MINT32 pos_RMM_SOFT_TH_EN       = rUpperRMM.tune.bits.RMM_SOFT_TH_EN;
    MINT32 pos_RMM_LE_LOWPA_EN       = rUpperRMM.tune.bits.RMM_LE_LOWPA_EN;
    MINT32 pos_RMM_SE_LOWPA_EN       = rUpperRMM.tune.bits.RMM_SE_LOWPA_EN;
    MINT32 pos_RMM_PSSEC_ONLY       = rUpperRMM.tune.bits.RMM_PSSEC_ONLY;
    MINT32 pos_RMM_OSCLE_ONLY       = rUpperRMM.tune.bits.RMM_OSCLE_ONLY;
    MINT32 pos_RMM_PS_TH       = rUpperRMM.tune.bits.RMM_PS_TH;
    MINT32 pos_RMM_MOLE_DIREN       = rUpperRMM.tune.bits.RMM_MOLE_DIREN;
    MINT32 pos_RMM_MOSE_DIREN       = rUpperRMM.tune.bits.RMM_MOSE_DIREN;
    MINT32 pos_RMM_MO_2DBLD_EN       = rUpperRMM.tune.bits.RMM_MO_2DBLD_EN;
    MINT32 pos_RMM_OSC_IDX       = rUpperRMM.ridx.bits.RMM_OSC_IDX;
    MINT32 pos_RMM_PS_IDX       = rUpperRMM.ridx.bits.RMM_PS_IDX;
    MINT32 pos_RMM_MOSE_IDX       = rUpperRMM.ridx.bits.RMM_MOSE_IDX;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 RMM_OSC_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_OSC_TH, pos_RMM_OSC_TH, 0);
    MINT32 RMM_SEDIR_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SEDIR_SL, pos_RMM_SEDIR_SL, 0);
    MINT32 RMM_SEBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SEBLD_WD, pos_RMM_SEBLD_WD, 0);
    MINT32 RMM_LEBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_LEBLD_WD, pos_RMM_LEBLD_WD, 0);
    MINT32 RMM_LE_INV_CTL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_LE_INV_CTL, pos_RMM_LE_INV_CTL, 0);
    MINT32 RMM_MO_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MO_EDGE, pos_RMM_MO_EDGE, 0);
    MINT32 RMM_MO_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MO_EN, pos_RMM_MO_EN, 0);
    MINT32 RMM_MOBLD_FT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOBLD_FT, pos_RMM_MOBLD_FT, 0);
    MINT32 RMM_MOTH_RATIO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOTH_RATIO, pos_RMM_MOTH_RATIO, 0);
    MINT32 RMM_HORI_ADDWT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_HORI_ADDWT, pos_RMM_HORI_ADDWT, 0);
    MINT32 RMM_MOSE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOSE_TH, pos_RMM_MOSE_TH, 0);
    MINT32 RMM_MOSE_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOSE_BLDWD, pos_RMM_MOSE_BLDWD, 0);
    MINT32 RMM_MASE_RATIO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MASE_RATIO, pos_RMM_MASE_RATIO, 0);
    MINT32 RMM_OSBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_OSBLD_WD, pos_RMM_OSBLD_WD, 0);
    MINT32 RMM_MASE_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MASE_BLDWD, pos_RMM_MASE_BLDWD, 0);
    MINT32 RMM_SENOS_LEFAC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SENOS_LEFAC, pos_RMM_SENOS_LEFAC, 0);
    MINT32 RMM_SEYOS_LEFAC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SEYOS_LEFAC, pos_RMM_SEYOS_LEFAC, 0);
    MINT32 RMM_PSHOR_SEEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_PSHOR_SEEN, pos_RMM_PSHOR_SEEN, 0);
    MINT32 RMM_PS_BLUR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_PS_BLUR, pos_RMM_PS_BLUR, 0);
    MINT32 RMM_OSC_REPEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_OSC_REPEN, pos_RMM_OSC_REPEN, 0);
    MINT32 RMM_SOFT_TH_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SOFT_TH_EN, pos_RMM_SOFT_TH_EN, 0);
    MINT32 RMM_LE_LOWPA_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_LE_LOWPA_EN, pos_RMM_LE_LOWPA_EN, 0);
    MINT32 RMM_SE_LOWPA_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_SE_LOWPA_EN, pos_RMM_SE_LOWPA_EN, 0);
    MINT32 RMM_PSSEC_ONLY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_PSSEC_ONLY, pos_RMM_PSSEC_ONLY, 0);
    MINT32 RMM_OSCLE_ONLY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_OSCLE_ONLY, pos_RMM_OSCLE_ONLY, 0);
    MINT32 RMM_PS_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_PS_TH, pos_RMM_PS_TH, 0);
    MINT32 RMM_MOLE_DIREN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOLE_DIREN, pos_RMM_MOLE_DIREN, 0);
    MINT32 RMM_MOSE_DIREN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOSE_DIREN, pos_RMM_MOSE_DIREN, 0);
    MINT32 RMM_MO_2DBLD_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MO_2DBLD_EN, pos_RMM_MO_2DBLD_EN, 0);
    MINT32 RMM_OSC_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_OSC_IDX, pos_RMM_OSC_IDX, 0);
    MINT32 RMM_PS_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_PS_IDX, pos_RMM_PS_IDX, 0);
    MINT32 RMM_MOSE_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RMM_MOSE_IDX, pos_RMM_MOSE_IDX, 0);


    // interpolation result assignment
    rSmoothRMM.osc.bits.RMM_OSC_TH       = RMM_OSC_TH;
    rSmoothRMM.osc.bits.RMM_SEDIR_SL       = RMM_SEDIR_SL;
    rSmoothRMM.osc.bits.RMM_SEBLD_WD       = RMM_SEBLD_WD;
    rSmoothRMM.osc.bits.RMM_LEBLD_WD       = RMM_LEBLD_WD;
    rSmoothRMM.osc.bits.RMM_LE_INV_CTL       = RMM_LE_INV_CTL;
    rSmoothRMM.mc.bits.RMM_MO_EDGE       = RMM_MO_EDGE;
    rSmoothRMM.mc.bits.RMM_MO_EN       = RMM_MO_EN;
    rSmoothRMM.mc.bits.RMM_MOBLD_FT       = RMM_MOBLD_FT;
    rSmoothRMM.mc.bits.RMM_MOTH_RATIO       = RMM_MOTH_RATIO;
    rSmoothRMM.mc.bits.RMM_HORI_ADDWT       = RMM_HORI_ADDWT;
    rSmoothRMM.mc2.bits.RMM_MOSE_TH       = RMM_MOSE_TH;
    rSmoothRMM.mc2.bits.RMM_MOSE_BLDWD       = RMM_MOSE_BLDWD;
    rSmoothRMM.ma.bits.RMM_MASE_RATIO       = RMM_MASE_RATIO;
    rSmoothRMM.ma.bits.RMM_OSBLD_WD       = RMM_OSBLD_WD;
    rSmoothRMM.ma.bits.RMM_MASE_BLDWD       = RMM_MASE_BLDWD;
    rSmoothRMM.ma.bits.RMM_SENOS_LEFAC       = RMM_SENOS_LEFAC;
    rSmoothRMM.ma.bits.RMM_SEYOS_LEFAC       = RMM_SEYOS_LEFAC;
    rSmoothRMM.tune.bits.RMM_PSHOR_SEEN       = RMM_PSHOR_SEEN;
    rSmoothRMM.tune.bits.RMM_PS_BLUR       = RMM_PS_BLUR;
    rSmoothRMM.tune.bits.RMM_OSC_REPEN       = RMM_OSC_REPEN;
    rSmoothRMM.tune.bits.RMM_SOFT_TH_EN       = RMM_SOFT_TH_EN;
    rSmoothRMM.tune.bits.RMM_LE_LOWPA_EN       = RMM_LE_LOWPA_EN;
    rSmoothRMM.tune.bits.RMM_SE_LOWPA_EN       = RMM_SE_LOWPA_EN;
    rSmoothRMM.tune.bits.RMM_PSSEC_ONLY       = RMM_PSSEC_ONLY;
    rSmoothRMM.tune.bits.RMM_OSCLE_ONLY       = RMM_OSCLE_ONLY;
    rSmoothRMM.tune.bits.RMM_PS_TH       = RMM_PS_TH;
    rSmoothRMM.tune.bits.RMM_MOLE_DIREN       = RMM_MOLE_DIREN;
    rSmoothRMM.tune.bits.RMM_MOSE_DIREN       = RMM_MOSE_DIREN;
    rSmoothRMM.tune.bits.RMM_MO_2DBLD_EN       = RMM_MO_2DBLD_EN;
    rSmoothRMM.ridx.bits.RMM_OSC_IDX       = RMM_OSC_IDX;
    rSmoothRMM.ridx.bits.RMM_PS_IDX       = RMM_PS_IDX;
    rSmoothRMM.ridx.bits.RMM_MOSE_IDX       = RMM_MOSE_IDX;


    // logging
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_OSC_TH       = %d, %d, %d", rLowerRMM.osc.bits.RMM_OSC_TH, rSmoothRMM.osc.bits.RMM_OSC_TH, rUpperRMM.osc.bits.RMM_OSC_TH);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SEDIR_SL       = %d, %d, %d", rLowerRMM.osc.bits.RMM_SEDIR_SL, rSmoothRMM.osc.bits.RMM_SEDIR_SL, rUpperRMM.osc.bits.RMM_SEDIR_SL);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SEBLD_WD       = %d, %d, %d", rLowerRMM.osc.bits.RMM_SEBLD_WD, rSmoothRMM.osc.bits.RMM_SEBLD_WD, rUpperRMM.osc.bits.RMM_SEBLD_WD);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_LEBLD_WD       = %d, %d, %d", rLowerRMM.osc.bits.RMM_LEBLD_WD, rSmoothRMM.osc.bits.RMM_LEBLD_WD, rUpperRMM.osc.bits.RMM_LEBLD_WD);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_LE_INV_CTL       = %d, %d, %d", rLowerRMM.osc.bits.RMM_LE_INV_CTL, rSmoothRMM.osc.bits.RMM_LE_INV_CTL, rUpperRMM.osc.bits.RMM_LE_INV_CTL);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MO_EDGE       = %d, %d, %d", rLowerRMM.mc.bits.RMM_MO_EDGE, rSmoothRMM.mc.bits.RMM_MO_EDGE, rUpperRMM.mc.bits.RMM_MO_EDGE);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MO_EN       = %d, %d, %d", rLowerRMM.mc.bits.RMM_MO_EN, rSmoothRMM.mc.bits.RMM_MO_EN, rUpperRMM.mc.bits.RMM_MO_EN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOBLD_FT       = %d, %d, %d", rLowerRMM.mc.bits.RMM_MOBLD_FT, rSmoothRMM.mc.bits.RMM_MOBLD_FT, rUpperRMM.mc.bits.RMM_MOBLD_FT);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOTH_RATIO       = %d, %d, %d", rLowerRMM.mc.bits.RMM_MOTH_RATIO, rSmoothRMM.mc.bits.RMM_MOTH_RATIO, rUpperRMM.mc.bits.RMM_MOTH_RATIO);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_HORI_ADDWT       = %d, %d, %d", rLowerRMM.mc.bits.RMM_HORI_ADDWT, rSmoothRMM.mc.bits.RMM_HORI_ADDWT, rUpperRMM.mc.bits.RMM_HORI_ADDWT);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOSE_TH       = %d, %d, %d", rLowerRMM.mc2.bits.RMM_MOSE_TH, rSmoothRMM.mc2.bits.RMM_MOSE_TH, rUpperRMM.mc2.bits.RMM_MOSE_TH);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOSE_BLDWD       = %d, %d, %d", rLowerRMM.mc2.bits.RMM_MOSE_BLDWD, rSmoothRMM.mc2.bits.RMM_MOSE_BLDWD, rUpperRMM.mc2.bits.RMM_MOSE_BLDWD);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MASE_RATIO       = %d, %d, %d", rLowerRMM.ma.bits.RMM_MASE_RATIO, rSmoothRMM.ma.bits.RMM_MASE_RATIO, rUpperRMM.ma.bits.RMM_MASE_RATIO);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_OSBLD_WD       = %d, %d, %d", rLowerRMM.ma.bits.RMM_OSBLD_WD, rSmoothRMM.ma.bits.RMM_OSBLD_WD, rUpperRMM.ma.bits.RMM_OSBLD_WD);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MASE_BLDWD       = %d, %d, %d", rLowerRMM.ma.bits.RMM_MASE_BLDWD, rSmoothRMM.ma.bits.RMM_MASE_BLDWD, rUpperRMM.ma.bits.RMM_MASE_BLDWD);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SENOS_LEFAC       = %d, %d, %d", rLowerRMM.ma.bits.RMM_SENOS_LEFAC, rSmoothRMM.ma.bits.RMM_SENOS_LEFAC, rUpperRMM.ma.bits.RMM_SENOS_LEFAC);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SEYOS_LEFAC       = %d, %d, %d", rLowerRMM.ma.bits.RMM_SEYOS_LEFAC, rSmoothRMM.ma.bits.RMM_SEYOS_LEFAC, rUpperRMM.ma.bits.RMM_SEYOS_LEFAC);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_PSHOR_SEEN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_PSHOR_SEEN, rSmoothRMM.tune.bits.RMM_PSHOR_SEEN, rUpperRMM.tune.bits.RMM_PSHOR_SEEN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_PS_BLUR       = %d, %d, %d", rLowerRMM.tune.bits.RMM_PS_BLUR, rSmoothRMM.tune.bits.RMM_PS_BLUR, rUpperRMM.tune.bits.RMM_PS_BLUR);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_OSC_REPEN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_OSC_REPEN, rSmoothRMM.tune.bits.RMM_OSC_REPEN, rUpperRMM.tune.bits.RMM_OSC_REPEN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SOFT_TH_EN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_SOFT_TH_EN, rSmoothRMM.tune.bits.RMM_SOFT_TH_EN, rUpperRMM.tune.bits.RMM_SOFT_TH_EN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_LE_LOWPA_EN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_LE_LOWPA_EN, rSmoothRMM.tune.bits.RMM_LE_LOWPA_EN, rUpperRMM.tune.bits.RMM_LE_LOWPA_EN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_SE_LOWPA_EN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_SE_LOWPA_EN, rSmoothRMM.tune.bits.RMM_SE_LOWPA_EN, rUpperRMM.tune.bits.RMM_SE_LOWPA_EN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_PSSEC_ONLY       = %d, %d, %d", rLowerRMM.tune.bits.RMM_PSSEC_ONLY, rSmoothRMM.tune.bits.RMM_PSSEC_ONLY, rUpperRMM.tune.bits.RMM_PSSEC_ONLY);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_OSCLE_ONLY       = %d, %d, %d", rLowerRMM.tune.bits.RMM_OSCLE_ONLY, rSmoothRMM.tune.bits.RMM_OSCLE_ONLY, rUpperRMM.tune.bits.RMM_OSCLE_ONLY);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_PS_TH       = %d, %d, %d", rLowerRMM.tune.bits.RMM_PS_TH, rSmoothRMM.tune.bits.RMM_PS_TH, rUpperRMM.tune.bits.RMM_PS_TH);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOLE_DIREN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_MOLE_DIREN, rSmoothRMM.tune.bits.RMM_MOLE_DIREN, rUpperRMM.tune.bits.RMM_MOLE_DIREN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOSE_DIREN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_MOSE_DIREN, rSmoothRMM.tune.bits.RMM_MOSE_DIREN, rUpperRMM.tune.bits.RMM_MOSE_DIREN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MO_2DBLD_EN       = %d, %d, %d", rLowerRMM.tune.bits.RMM_MO_2DBLD_EN, rSmoothRMM.tune.bits.RMM_MO_2DBLD_EN, rUpperRMM.tune.bits.RMM_MO_2DBLD_EN);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_OSC_IDX       = %d, %d, %d", rLowerRMM.ridx.bits.RMM_OSC_IDX, rSmoothRMM.ridx.bits.RMM_OSC_IDX, rUpperRMM.ridx.bits.RMM_OSC_IDX);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_PS_IDX       = %d, %d, %d", rLowerRMM.ridx.bits.RMM_PS_IDX, rSmoothRMM.ridx.bits.RMM_PS_IDX, rUpperRMM.ridx.bits.RMM_PS_IDX);
    INTER_LOG_IF(bSmoothRMMDebug, "[L,S,U]RMM_MOSE_IDX       = %d, %d, %d", rLowerRMM.ridx.bits.RMM_MOSE_IDX, rSmoothRMM.ridx.bits.RMM_MOSE_IDX, rUpperRMM.ridx.bits.RMM_MOSE_IDX);

}

MVOID SmoothRNR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_RNR_T const& rUpperRNR,   // RNR settings for upper ISO
                ISP_NVRAM_RNR_T const& rLowerRNR,   // RNR settings for lower ISO
                ISP_NVRAM_RNR_T& rSmoothRNR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_rnr.enable", value, "0");
    MBOOL bSmoothRNRDebug = atoi(value);

    INTER_LOG_IF(bSmoothRNRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_RNR_EPS       = rLowerRNR.con1.bits.RNR_EPS;
    MINT32 pre_RNR_RAT       = rLowerRNR.con1.bits.RNR_RAT;
    MINT32 pre_RNR_VC0_B       = rLowerRNR.vc0.bits.RNR_VC0_B;
    MINT32 pre_RNR_VC0_G       = rLowerRNR.vc0.bits.RNR_VC0_G;
    MINT32 pre_RNR_VC0_R       = rLowerRNR.vc0.bits.RNR_VC0_R;
    MINT32 pre_RNR_VC1_B       = rLowerRNR.vc1.bits.RNR_VC1_B;
    MINT32 pre_RNR_VC1_G       = rLowerRNR.vc1.bits.RNR_VC1_G;
    MINT32 pre_RNR_VC1_R       = rLowerRNR.vc1.bits.RNR_VC1_R;
    MINT32 pre_RNR_RNG4       = rLowerRNR.rng.bits.RNR_RNG4;
    MINT32 pre_RNR_RNG3       = rLowerRNR.rng.bits.RNR_RNG3;
    MINT32 pre_RNR_RNG2       = rLowerRNR.rng.bits.RNR_RNG2;
    MINT32 pre_RNR_RNG1       = rLowerRNR.rng.bits.RNR_RNG1;
    MINT32 pre_RNR_CTHL       = rLowerRNR.con2.bits.RNR_CTHL;
    MINT32 pre_RNR_CTHR       = rLowerRNR.con2.bits.RNR_CTHR;
    MINT32 pre_RNR_RAD       = rLowerRNR.con2.bits.RNR_RAD;
    MINT32 pre_RNR_PRF_RAT       = rLowerRNR.con2.bits.RNR_PRF_RAT;
    MINT32 pre_RNR_MED_RAT       = rLowerRNR.con2.bits.RNR_MED_RAT;
    MINT32 pre_RNR_INT_OFST       = rLowerRNR.con3.bits.RNR_INT_OFST;
    MINT32 pre_RNR_LLP_RAT       = rLowerRNR.con3.bits.RNR_LLP_RAT;
    MINT32 pre_RNR_GD_RAT       = rLowerRNR.con3.bits.RNR_GD_RAT;
    MINT32 pre_RNR_FL_MODE       = rLowerRNR.con3.bits.RNR_FL_MODE;
    MINT32 pre_RNR_SL_Y1       = rLowerRNR.sl.bits.RNR_SL_Y1;
    MINT32 pre_RNR_SL_Y2       = rLowerRNR.sl.bits.RNR_SL_Y2;
    MINT32 pre_RNR_SL_EN       = rLowerRNR.sl.bits.RNR_SL_EN;
    MINT32 pre_RNR_STH_C1       = rLowerRNR.ssl_sth.bits.RNR_STH_C1;
    MINT32 pre_RNR_SSL_C1       = rLowerRNR.ssl_sth.bits.RNR_SSL_C1;
    MINT32 pre_RNR_STH_C2       = rLowerRNR.ssl_sth.bits.RNR_STH_C2;
    MINT32 pre_RNR_SSL_C2       = rLowerRNR.ssl_sth.bits.RNR_SSL_C2;
    MINT32 pos_RNR_EPS       = rUpperRNR.con1.bits.RNR_EPS;
    MINT32 pos_RNR_RAT       = rUpperRNR.con1.bits.RNR_RAT;
    MINT32 pos_RNR_VC0_B       = rUpperRNR.vc0.bits.RNR_VC0_B;
    MINT32 pos_RNR_VC0_G       = rUpperRNR.vc0.bits.RNR_VC0_G;
    MINT32 pos_RNR_VC0_R       = rUpperRNR.vc0.bits.RNR_VC0_R;
    MINT32 pos_RNR_VC1_B       = rUpperRNR.vc1.bits.RNR_VC1_B;
    MINT32 pos_RNR_VC1_G       = rUpperRNR.vc1.bits.RNR_VC1_G;
    MINT32 pos_RNR_VC1_R       = rUpperRNR.vc1.bits.RNR_VC1_R;
    MINT32 pos_RNR_RNG4       = rUpperRNR.rng.bits.RNR_RNG4;
    MINT32 pos_RNR_RNG3       = rUpperRNR.rng.bits.RNR_RNG3;
    MINT32 pos_RNR_RNG2       = rUpperRNR.rng.bits.RNR_RNG2;
    MINT32 pos_RNR_RNG1       = rUpperRNR.rng.bits.RNR_RNG1;
    MINT32 pos_RNR_CTHL       = rUpperRNR.con2.bits.RNR_CTHL;
    MINT32 pos_RNR_CTHR       = rUpperRNR.con2.bits.RNR_CTHR;
    MINT32 pos_RNR_RAD       = rUpperRNR.con2.bits.RNR_RAD;
    MINT32 pos_RNR_PRF_RAT       = rUpperRNR.con2.bits.RNR_PRF_RAT;
    MINT32 pos_RNR_MED_RAT       = rUpperRNR.con2.bits.RNR_MED_RAT;
    MINT32 pos_RNR_INT_OFST       = rUpperRNR.con3.bits.RNR_INT_OFST;
    MINT32 pos_RNR_LLP_RAT       = rUpperRNR.con3.bits.RNR_LLP_RAT;
    MINT32 pos_RNR_GD_RAT       = rUpperRNR.con3.bits.RNR_GD_RAT;
    MINT32 pos_RNR_FL_MODE       = rUpperRNR.con3.bits.RNR_FL_MODE;
    MINT32 pos_RNR_SL_Y1       = rUpperRNR.sl.bits.RNR_SL_Y1;
    MINT32 pos_RNR_SL_Y2       = rUpperRNR.sl.bits.RNR_SL_Y2;
    MINT32 pos_RNR_SL_EN       = rUpperRNR.sl.bits.RNR_SL_EN;
    MINT32 pos_RNR_STH_C1       = rUpperRNR.ssl_sth.bits.RNR_STH_C1;
    MINT32 pos_RNR_SSL_C1       = rUpperRNR.ssl_sth.bits.RNR_SSL_C1;
    MINT32 pos_RNR_STH_C2       = rUpperRNR.ssl_sth.bits.RNR_STH_C2;
    MINT32 pos_RNR_SSL_C2       = rUpperRNR.ssl_sth.bits.RNR_SSL_C2;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 RNR_EPS       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_EPS, pos_RNR_EPS, 0);
    MINT32 RNR_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RAT, pos_RNR_RAT, 0);
    MINT32 RNR_VC0_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC0_B, pos_RNR_VC0_B, 0);
    MINT32 RNR_VC0_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC0_G, pos_RNR_VC0_G, 0);
    MINT32 RNR_VC0_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC0_R, pos_RNR_VC0_R, 0);
    MINT32 RNR_VC1_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC1_B, pos_RNR_VC1_B, 0);
    MINT32 RNR_VC1_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC1_G, pos_RNR_VC1_G, 0);
    MINT32 RNR_VC1_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_VC1_R, pos_RNR_VC1_R, 0);
    MINT32 RNR_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RNG4, pos_RNR_RNG4, 0);
    MINT32 RNR_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RNG3, pos_RNR_RNG3, 0);
    MINT32 RNR_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RNG2, pos_RNR_RNG2, 0);
    MINT32 RNR_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RNG1, pos_RNR_RNG1, 0);
    MINT32 RNR_CTHL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_CTHL, pos_RNR_CTHL, 0);
    MINT32 RNR_CTHR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_CTHR, pos_RNR_CTHR, 0);
    MINT32 RNR_RAD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_RAD, pos_RNR_RAD, 0);
    MINT32 RNR_PRF_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_PRF_RAT, pos_RNR_PRF_RAT, 0);
    MINT32 RNR_MED_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_MED_RAT, pos_RNR_MED_RAT, 0);
    MINT32 RNR_INT_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_INT_OFST, pos_RNR_INT_OFST, 0);
    MINT32 RNR_LLP_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_LLP_RAT, pos_RNR_LLP_RAT, 0);
    MINT32 RNR_GD_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_GD_RAT, pos_RNR_GD_RAT, 0);
    MINT32 RNR_FL_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_FL_MODE, pos_RNR_FL_MODE, 0);
    MINT32 RNR_SL_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_SL_Y1, pos_RNR_SL_Y1, 0);
    MINT32 RNR_SL_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_SL_Y2, pos_RNR_SL_Y2, 0);
    MINT32 RNR_SL_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_SL_EN, pos_RNR_SL_EN, 0);
    MINT32 RNR_STH_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_STH_C1, pos_RNR_STH_C1, 0);
    MINT32 RNR_SSL_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_SSL_C1, pos_RNR_SSL_C1, 0);
    MINT32 RNR_STH_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_STH_C2, pos_RNR_STH_C2, 0);
    MINT32 RNR_SSL_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RNR_SSL_C2, pos_RNR_SSL_C2, 0);


    // interpolation result assignment
    rSmoothRNR.con1.bits.RNR_EPS       = RNR_EPS;
    rSmoothRNR.con1.bits.RNR_RAT       = RNR_RAT;
    rSmoothRNR.vc0.bits.RNR_VC0_B       = RNR_VC0_B;
    rSmoothRNR.vc0.bits.RNR_VC0_G       = RNR_VC0_G;
    rSmoothRNR.vc0.bits.RNR_VC0_R       = RNR_VC0_R;
    rSmoothRNR.vc1.bits.RNR_VC1_B       = RNR_VC1_B;
    rSmoothRNR.vc1.bits.RNR_VC1_G       = RNR_VC1_G;
    rSmoothRNR.vc1.bits.RNR_VC1_R       = RNR_VC1_R;
    rSmoothRNR.rng.bits.RNR_RNG4       = RNR_RNG4;
    rSmoothRNR.rng.bits.RNR_RNG3       = RNR_RNG3;
    rSmoothRNR.rng.bits.RNR_RNG2       = RNR_RNG2;
    rSmoothRNR.rng.bits.RNR_RNG1       = RNR_RNG1;
    rSmoothRNR.con2.bits.RNR_CTHL       = RNR_CTHL;
    rSmoothRNR.con2.bits.RNR_CTHR       = RNR_CTHR;
    rSmoothRNR.con2.bits.RNR_RAD       = RNR_RAD;
    rSmoothRNR.con2.bits.RNR_PRF_RAT       = RNR_PRF_RAT;
    rSmoothRNR.con2.bits.RNR_MED_RAT       = RNR_MED_RAT;
    rSmoothRNR.con3.bits.RNR_INT_OFST       = RNR_INT_OFST;
    rSmoothRNR.con3.bits.RNR_LLP_RAT       = RNR_LLP_RAT;
    rSmoothRNR.con3.bits.RNR_GD_RAT       = RNR_GD_RAT;
    rSmoothRNR.con3.bits.RNR_FL_MODE       = RNR_FL_MODE;
    rSmoothRNR.sl.bits.RNR_SL_Y1       = RNR_SL_Y1;
    rSmoothRNR.sl.bits.RNR_SL_Y2       = RNR_SL_Y2;
    rSmoothRNR.sl.bits.RNR_SL_EN       = RNR_SL_EN;
    rSmoothRNR.ssl_sth.bits.RNR_STH_C1       = RNR_STH_C1;
    rSmoothRNR.ssl_sth.bits.RNR_SSL_C1       = RNR_SSL_C1;
    rSmoothRNR.ssl_sth.bits.RNR_STH_C2       = RNR_STH_C2;
    rSmoothRNR.ssl_sth.bits.RNR_SSL_C2       = RNR_SSL_C2;


    // logging
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_EPS       = %d, %d, %d", rLowerRNR.con1.bits.RNR_EPS, rSmoothRNR.con1.bits.RNR_EPS, rUpperRNR.con1.bits.RNR_EPS);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RAT       = %d, %d, %d", rLowerRNR.con1.bits.RNR_RAT, rSmoothRNR.con1.bits.RNR_RAT, rUpperRNR.con1.bits.RNR_RAT);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC0_B       = %d, %d, %d", rLowerRNR.vc0.bits.RNR_VC0_B, rSmoothRNR.vc0.bits.RNR_VC0_B, rUpperRNR.vc0.bits.RNR_VC0_B);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC0_G       = %d, %d, %d", rLowerRNR.vc0.bits.RNR_VC0_G, rSmoothRNR.vc0.bits.RNR_VC0_G, rUpperRNR.vc0.bits.RNR_VC0_G);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC0_R       = %d, %d, %d", rLowerRNR.vc0.bits.RNR_VC0_R, rSmoothRNR.vc0.bits.RNR_VC0_R, rUpperRNR.vc0.bits.RNR_VC0_R);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC1_B       = %d, %d, %d", rLowerRNR.vc1.bits.RNR_VC1_B, rSmoothRNR.vc1.bits.RNR_VC1_B, rUpperRNR.vc1.bits.RNR_VC1_B);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC1_G       = %d, %d, %d", rLowerRNR.vc1.bits.RNR_VC1_G, rSmoothRNR.vc1.bits.RNR_VC1_G, rUpperRNR.vc1.bits.RNR_VC1_G);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_VC1_R       = %d, %d, %d", rLowerRNR.vc1.bits.RNR_VC1_R, rSmoothRNR.vc1.bits.RNR_VC1_R, rUpperRNR.vc1.bits.RNR_VC1_R);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RNG4       = %d, %d, %d", rLowerRNR.rng.bits.RNR_RNG4, rSmoothRNR.rng.bits.RNR_RNG4, rUpperRNR.rng.bits.RNR_RNG4);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RNG3       = %d, %d, %d", rLowerRNR.rng.bits.RNR_RNG3, rSmoothRNR.rng.bits.RNR_RNG3, rUpperRNR.rng.bits.RNR_RNG3);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RNG2       = %d, %d, %d", rLowerRNR.rng.bits.RNR_RNG2, rSmoothRNR.rng.bits.RNR_RNG2, rUpperRNR.rng.bits.RNR_RNG2);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RNG1       = %d, %d, %d", rLowerRNR.rng.bits.RNR_RNG1, rSmoothRNR.rng.bits.RNR_RNG1, rUpperRNR.rng.bits.RNR_RNG1);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_CTHL       = %d, %d, %d", rLowerRNR.con2.bits.RNR_CTHL, rSmoothRNR.con2.bits.RNR_CTHL, rUpperRNR.con2.bits.RNR_CTHL);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_CTHR       = %d, %d, %d", rLowerRNR.con2.bits.RNR_CTHR, rSmoothRNR.con2.bits.RNR_CTHR, rUpperRNR.con2.bits.RNR_CTHR);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_RAD       = %d, %d, %d", rLowerRNR.con2.bits.RNR_RAD, rSmoothRNR.con2.bits.RNR_RAD, rUpperRNR.con2.bits.RNR_RAD);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_PRF_RAT       = %d, %d, %d", rLowerRNR.con2.bits.RNR_PRF_RAT, rSmoothRNR.con2.bits.RNR_PRF_RAT, rUpperRNR.con2.bits.RNR_PRF_RAT);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_MED_RAT       = %d, %d, %d", rLowerRNR.con2.bits.RNR_MED_RAT, rSmoothRNR.con2.bits.RNR_MED_RAT, rUpperRNR.con2.bits.RNR_MED_RAT);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_INT_OFST       = %d, %d, %d", rLowerRNR.con3.bits.RNR_INT_OFST, rSmoothRNR.con3.bits.RNR_INT_OFST, rUpperRNR.con3.bits.RNR_INT_OFST);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_LLP_RAT       = %d, %d, %d", rLowerRNR.con3.bits.RNR_LLP_RAT, rSmoothRNR.con3.bits.RNR_LLP_RAT, rUpperRNR.con3.bits.RNR_LLP_RAT);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_GD_RAT       = %d, %d, %d", rLowerRNR.con3.bits.RNR_GD_RAT, rSmoothRNR.con3.bits.RNR_GD_RAT, rUpperRNR.con3.bits.RNR_GD_RAT);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_FL_MODE       = %d, %d, %d", rLowerRNR.con3.bits.RNR_FL_MODE, rSmoothRNR.con3.bits.RNR_FL_MODE, rUpperRNR.con3.bits.RNR_FL_MODE);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_SL_Y1       = %d, %d, %d", rLowerRNR.sl.bits.RNR_SL_Y1, rSmoothRNR.sl.bits.RNR_SL_Y1, rUpperRNR.sl.bits.RNR_SL_Y1);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_SL_Y2       = %d, %d, %d", rLowerRNR.sl.bits.RNR_SL_Y2, rSmoothRNR.sl.bits.RNR_SL_Y2, rUpperRNR.sl.bits.RNR_SL_Y2);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_SL_EN       = %d, %d, %d", rLowerRNR.sl.bits.RNR_SL_EN, rSmoothRNR.sl.bits.RNR_SL_EN, rUpperRNR.sl.bits.RNR_SL_EN);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_STH_C1       = %d, %d, %d", rLowerRNR.ssl_sth.bits.RNR_STH_C1, rSmoothRNR.ssl_sth.bits.RNR_STH_C1, rUpperRNR.ssl_sth.bits.RNR_STH_C1);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_SSL_C1       = %d, %d, %d", rLowerRNR.ssl_sth.bits.RNR_SSL_C1, rSmoothRNR.ssl_sth.bits.RNR_SSL_C1, rUpperRNR.ssl_sth.bits.RNR_SSL_C1);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_STH_C2       = %d, %d, %d", rLowerRNR.ssl_sth.bits.RNR_STH_C2, rSmoothRNR.ssl_sth.bits.RNR_STH_C2, rUpperRNR.ssl_sth.bits.RNR_STH_C2);
    INTER_LOG_IF(bSmoothRNRDebug, "[L,S,U]RNR_SSL_C2       = %d, %d, %d", rLowerRNR.ssl_sth.bits.RNR_SSL_C2, rSmoothRNR.ssl_sth.bits.RNR_SSL_C2, rUpperRNR.ssl_sth.bits.RNR_SSL_C2);

}

MVOID SmoothUDM(ISP_NVRAM_UDM_INT_T const& rParam,   // UDM settings
                ISP_NVRAM_UDM_T& rSmoothUDM)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_udm.enable", value, "0");
    MBOOL bSmoothUDMDebug = atoi(value);

	MINT32 u4RealISO    = rParam.u4RealISO;
	MINT32 u4UpperISO   = rParam.u4UpperISO;
	MINT32 u4LowerISO   = rParam.u4LowerISO;
	MINT32 fRealZoom    = rParam.i4ZoomRatio_x100;
	MINT32 fUpperZoom   = rParam.u4UpperZoom;
	MINT32 fLowerZoom   = rParam.u4LowerZoom;

	INTER_LOG_IF(bSmoothUDMDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);
	INTER_LOG_IF(bSmoothUDMDebug,"[%s()] u4RealZoom: %d, u4UpperZoom = %d, u4LowerZoom = %d\n", __FUNCTION__, fRealZoom, fUpperZoom, fLowerZoom);

	// _L_L = Low ISO Low Zoom, _L_U = Low ISO Up Zoom, _U_L = Up ISO Low Zoom, _U_U = Up ISO Up Zoom

	double RATIO_ISO_lo = 0;
	double RATIO_ISO_up = 0;
	double RATIO_Zoom_lo = 0;
	double RATIO_Zoom_up = 0;

    //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

	if (fRealZoom <= fLowerZoom)
    {
        RATIO_Zoom_lo = 1;
    }
	else if(fRealZoom >= fUpperZoom)
	{
		RATIO_Zoom_lo = 0;
	}
	else
	{
		RATIO_Zoom_lo = (double)(fUpperZoom - fRealZoom) / (double)(fUpperZoom - fLowerZoom);
	}

	RATIO_Zoom_up = 1.0 - RATIO_Zoom_lo;

	double RATIO_L_L = (double)(RATIO_ISO_lo * RATIO_Zoom_lo);
	double RATIO_L_U = (double)(RATIO_ISO_lo * RATIO_Zoom_up);
	double RATIO_U_L = (double)(RATIO_ISO_up * RATIO_Zoom_lo);
	double RATIO_U_U = (double)(RATIO_ISO_up * RATIO_Zoom_up);

    // assign 4-corner values for interpolation
    MINT32 UDM_BYP_L_L		= rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_BYP;
    MINT32 UDM_CD_KNL_L_L		= rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CD_KNL;
    MINT32 UDM_CDG_RAT_L_L		= rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_RAT;
    MINT32 UDM_CDG_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_OFST;
    MINT32 UDM_CDG_SL_L_L		= rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_SL;
    MINT32 UDM_INT_LTH_L_L		= rParam.rLowerIso_LowerZoom.int_ctl.bits.UDM_INT_LTH;
    MINT32 UDM_INT_CDTH_L_L		= rParam.rLowerIso_LowerZoom.int_ctl.bits.UDM_INT_CDTH;
    MINT32 UDM_P1_LWB_L_L		= rParam.rLowerIso_LowerZoom.p1_act.bits.UDM_P1_LWB;
    MINT32 UDM_P1_UPB_L_L		= rParam.rLowerIso_LowerZoom.p1_act.bits.UDM_P1_UPB;
    MINT32 UDM_P1_BLD_L_L		= rParam.rLowerIso_LowerZoom.est_ctl.bits.UDM_P1_BLD;
    MINT32 UDM_P2_CLIP_L_L		= rParam.rLowerIso_LowerZoom.est_ctl.bits.UDM_P2_CLIP;
    MINT32 UDM_CD_SLC_L_L		= rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_CD_SLC;
    MINT32 UDM_CD_SLL_L_L		= rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_CD_SLL;
    MINT32 UDM_DN_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_DN_OFST;
    MINT32 UDM_HL_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_HL_OFST;
    MINT32 UDM_L0_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_L0_OFST;
    MINT32 UDM_L0_SL_L_L		= rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_L0_SL;
    MINT32 UDM_L1_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L1_OFST;
    MINT32 UDM_L1_SL_L_L		= rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L1_SL;
    MINT32 UDM_L2_OFST_L_L		= rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L2_OFST;
    MINT32 UDM_L2_SL_L_L		= rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L2_SL;
    MINT32 UDM_LM_Y0_L_L		= rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y0;
    MINT32 UDM_LM_Y1_L_L		= rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y1;
    MINT32 UDM_LM_Y2_L_L		= rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y2;
    MINT32 UDM_LM_Y3_L_L		= rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y3;
    MINT32 UDM_LM_Y4_L_L		= rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y4;
    MINT32 UDM_LM_Y5_L_L		= rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y5;
    MINT32 UDM_SL_EN_L_L		= rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_EN;
    MINT32 UDM_SL_Y1_L_L		= rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_Y1;
    MINT32 UDM_SL_Y2_L_L		= rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_Y2;
    MINT32 UDM_SL_HR_L_L		= rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_HR;
    MINT32 UDM_HT_GN1_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN1;
    MINT32 UDM_HT_GN2_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN2;
    MINT32 UDM_HD_GN1_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN1;
    MINT32 UDM_HD_GN2_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN2;
    MINT32 UDM_HD_GN3_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl2.bits.UDM_HD_GN3;
    MINT32 UDM_HFRB_GN_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl2.bits.UDM_HFRB_GN;
    MINT32 UDM_HA_STR_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_HA_STR;
    MINT32 UDM_H1_GN_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H1_GN;
    MINT32 UDM_H2_GN_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H2_GN;
    MINT32 UDM_H3_GN_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H3_GN;
    MINT32 UDM_HI_RAT_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_HI_RAT;
    MINT32 UDM_H1_LWB_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H1_LWB;
    MINT32 UDM_H2_LWB_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H2_LWB;
    MINT32 UDM_H3_LWB_L_L		= rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_H3_LWB;
    MINT32 UDM_H1_UPB_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H1_UPB;
    MINT32 UDM_H2_UPB_L_L		= rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H2_UPB;
    MINT32 UDM_H3_UPB_L_L		= rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_H3_UPB;
    MINT32 UDM_HSLR_L_L		= rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_HSLR;
    MINT32 UDM_HSLL_L_L		= rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_HSLL;
    MINT32 UDM_CORE_TH1_L_L		= rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_CORE_TH1;
    MINT32 UDM_CORE_TH2_L_L		= rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_CORE_TH2;
    MINT32 UDM_OV_TH_L_L		= rParam.rLowerIso_LowerZoom.clip.bits.UDM_OV_TH;
    MINT32 UDM_UN_TH_L_L		= rParam.rLowerIso_LowerZoom.clip.bits.UDM_UN_TH;
    MINT32 UDM_CLIP_TH_L_L		= rParam.rLowerIso_LowerZoom.clip.bits.UDM_CLIP_TH;
    MINT32 UDM_HNEG_GN_L_L		= rParam.rLowerIso_LowerZoom.ee.bits.UDM_HNEG_GN;
    MINT32 UDM_HPOS_GN_L_L		= rParam.rLowerIso_LowerZoom.ee.bits.UDM_HPOS_GN;
    MINT32 UDM_N0_STR_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N0_STR;
    MINT32 UDM_N1_STR_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N1_STR;
    MINT32 UDM_N2_STR_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N2_STR;
    MINT32 UDM_N0_OFST_L_L		= rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N0_OFST;
    MINT32 UDM_N1_OFST_L_L		= rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N1_OFST;
    MINT32 UDM_N2_OFST_L_L		= rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N2_OFST;
    MINT32 UDM_NSL_L_L		= rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_NSL;
    MINT32 UDM_NGR_L_L		= rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_NGR;
    MINT32 UDM_XTK_RAT_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_RAT;
    MINT32 UDM_XTK_OFST_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_OFST;
    MINT32 UDM_XTK_SL_L_L		= rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_SL;
    MINT32 UDM_FL_MODE_L_L		= rParam.rLowerIso_LowerZoom.dsb.bits.UDM_FL_MODE;
    MINT32 UDM_SL_RAT_L_L		= rParam.rLowerIso_LowerZoom.dsb.bits.UDM_SL_RAT;
    MINT32 UDM_SC_RAT_L_L		= rParam.rLowerIso_LowerZoom.dsb.bits.UDM_SC_RAT;
    MINT32 UDM_LR_RAT_L_L		= rParam.rLowerIso_LowerZoom.lr_rat.bits.UDM_LR_RAT;

    MINT32 UDM_BYP_L_U		= rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_BYP;
    MINT32 UDM_CD_KNL_L_U		= rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CD_KNL;
    MINT32 UDM_CDG_RAT_L_U		= rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_RAT;
    MINT32 UDM_CDG_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_OFST;
    MINT32 UDM_CDG_SL_L_U		= rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_SL;
    MINT32 UDM_INT_LTH_L_U		= rParam.rLowerIso_UpperZoom.int_ctl.bits.UDM_INT_LTH;
    MINT32 UDM_INT_CDTH_L_U		= rParam.rLowerIso_UpperZoom.int_ctl.bits.UDM_INT_CDTH;
    MINT32 UDM_P1_LWB_L_U		= rParam.rLowerIso_UpperZoom.p1_act.bits.UDM_P1_LWB;
    MINT32 UDM_P1_UPB_L_U		= rParam.rLowerIso_UpperZoom.p1_act.bits.UDM_P1_UPB;
    MINT32 UDM_P1_BLD_L_U		= rParam.rLowerIso_UpperZoom.est_ctl.bits.UDM_P1_BLD;
    MINT32 UDM_P2_CLIP_L_U		= rParam.rLowerIso_UpperZoom.est_ctl.bits.UDM_P2_CLIP;
    MINT32 UDM_CD_SLC_L_U		= rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_CD_SLC;
    MINT32 UDM_CD_SLL_L_U		= rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_CD_SLL;
    MINT32 UDM_DN_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_DN_OFST;
    MINT32 UDM_HL_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_HL_OFST;
    MINT32 UDM_L0_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_L0_OFST;
    MINT32 UDM_L0_SL_L_U		= rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_L0_SL;
    MINT32 UDM_L1_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L1_OFST;
    MINT32 UDM_L1_SL_L_U		= rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L1_SL;
    MINT32 UDM_L2_OFST_L_U		= rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L2_OFST;
    MINT32 UDM_L2_SL_L_U		= rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L2_SL;
    MINT32 UDM_LM_Y0_L_U		= rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y0;
    MINT32 UDM_LM_Y1_L_U		= rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y1;
    MINT32 UDM_LM_Y2_L_U		= rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y2;
    MINT32 UDM_LM_Y3_L_U		= rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y3;
    MINT32 UDM_LM_Y4_L_U		= rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y4;
    MINT32 UDM_LM_Y5_L_U		= rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y5;
    MINT32 UDM_SL_EN_L_U		= rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_EN;
    MINT32 UDM_SL_Y1_L_U		= rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_Y1;
    MINT32 UDM_SL_Y2_L_U		= rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_Y2;
    MINT32 UDM_SL_HR_L_U		= rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_HR;
    MINT32 UDM_HT_GN1_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN1;
    MINT32 UDM_HT_GN2_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN2;
    MINT32 UDM_HD_GN1_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN1;
    MINT32 UDM_HD_GN2_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN2;
    MINT32 UDM_HD_GN3_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl2.bits.UDM_HD_GN3;
    MINT32 UDM_HFRB_GN_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl2.bits.UDM_HFRB_GN;
    MINT32 UDM_HA_STR_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_HA_STR;
    MINT32 UDM_H1_GN_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H1_GN;
    MINT32 UDM_H2_GN_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H2_GN;
    MINT32 UDM_H3_GN_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H3_GN;
    MINT32 UDM_HI_RAT_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_HI_RAT;
    MINT32 UDM_H1_LWB_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H1_LWB;
    MINT32 UDM_H2_LWB_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H2_LWB;
    MINT32 UDM_H3_LWB_L_U		= rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_H3_LWB;
    MINT32 UDM_H1_UPB_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H1_UPB;
    MINT32 UDM_H2_UPB_L_U		= rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H2_UPB;
    MINT32 UDM_H3_UPB_L_U		= rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_H3_UPB;
    MINT32 UDM_HSLR_L_U		= rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_HSLR;
    MINT32 UDM_HSLL_L_U		= rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_HSLL;
    MINT32 UDM_CORE_TH1_L_U		= rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_CORE_TH1;
    MINT32 UDM_CORE_TH2_L_U		= rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_CORE_TH2;
    MINT32 UDM_OV_TH_L_U		= rParam.rLowerIso_UpperZoom.clip.bits.UDM_OV_TH;
    MINT32 UDM_UN_TH_L_U		= rParam.rLowerIso_UpperZoom.clip.bits.UDM_UN_TH;
    MINT32 UDM_CLIP_TH_L_U		= rParam.rLowerIso_UpperZoom.clip.bits.UDM_CLIP_TH;
    MINT32 UDM_HNEG_GN_L_U		= rParam.rLowerIso_UpperZoom.ee.bits.UDM_HNEG_GN;
    MINT32 UDM_HPOS_GN_L_U		= rParam.rLowerIso_UpperZoom.ee.bits.UDM_HPOS_GN;
    MINT32 UDM_N0_STR_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N0_STR;
    MINT32 UDM_N1_STR_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N1_STR;
    MINT32 UDM_N2_STR_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N2_STR;
    MINT32 UDM_N0_OFST_L_U		= rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N0_OFST;
    MINT32 UDM_N1_OFST_L_U		= rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N1_OFST;
    MINT32 UDM_N2_OFST_L_U		= rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N2_OFST;
    MINT32 UDM_NSL_L_U		= rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_NSL;
    MINT32 UDM_NGR_L_U		= rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_NGR;
    MINT32 UDM_XTK_RAT_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_RAT;
    MINT32 UDM_XTK_OFST_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_OFST;
    MINT32 UDM_XTK_SL_L_U		= rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_SL;
    MINT32 UDM_FL_MODE_L_U		= rParam.rLowerIso_UpperZoom.dsb.bits.UDM_FL_MODE;
    MINT32 UDM_SL_RAT_L_U		= rParam.rLowerIso_UpperZoom.dsb.bits.UDM_SL_RAT;
    MINT32 UDM_SC_RAT_L_U		= rParam.rLowerIso_UpperZoom.dsb.bits.UDM_SC_RAT;
    MINT32 UDM_LR_RAT_L_U		= rParam.rLowerIso_UpperZoom.lr_rat.bits.UDM_LR_RAT;

    MINT32 UDM_BYP_U_L		= rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_BYP;
    MINT32 UDM_CD_KNL_U_L		= rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CD_KNL;
    MINT32 UDM_CDG_RAT_U_L		= rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_RAT;
    MINT32 UDM_CDG_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_OFST;
    MINT32 UDM_CDG_SL_U_L		= rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_SL;
    MINT32 UDM_INT_LTH_U_L		= rParam.rUpperIso_LowerZoom.int_ctl.bits.UDM_INT_LTH;
    MINT32 UDM_INT_CDTH_U_L		= rParam.rUpperIso_LowerZoom.int_ctl.bits.UDM_INT_CDTH;
    MINT32 UDM_P1_LWB_U_L		= rParam.rUpperIso_LowerZoom.p1_act.bits.UDM_P1_LWB;
    MINT32 UDM_P1_UPB_U_L		= rParam.rUpperIso_LowerZoom.p1_act.bits.UDM_P1_UPB;
    MINT32 UDM_P1_BLD_U_L		= rParam.rUpperIso_LowerZoom.est_ctl.bits.UDM_P1_BLD;
    MINT32 UDM_P2_CLIP_U_L		= rParam.rUpperIso_LowerZoom.est_ctl.bits.UDM_P2_CLIP;
    MINT32 UDM_CD_SLC_U_L		= rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_CD_SLC;
    MINT32 UDM_CD_SLL_U_L		= rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_CD_SLL;
    MINT32 UDM_DN_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_DN_OFST;
    MINT32 UDM_HL_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_HL_OFST;
    MINT32 UDM_L0_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_L0_OFST;
    MINT32 UDM_L0_SL_U_L		= rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_L0_SL;
    MINT32 UDM_L1_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L1_OFST;
    MINT32 UDM_L1_SL_U_L		= rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L1_SL;
    MINT32 UDM_L2_OFST_U_L		= rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L2_OFST;
    MINT32 UDM_L2_SL_U_L		= rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L2_SL;
    MINT32 UDM_LM_Y0_U_L		= rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y0;
    MINT32 UDM_LM_Y1_U_L		= rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y1;
    MINT32 UDM_LM_Y2_U_L		= rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y2;
    MINT32 UDM_LM_Y3_U_L		= rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y3;
    MINT32 UDM_LM_Y4_U_L		= rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y4;
    MINT32 UDM_LM_Y5_U_L		= rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y5;
    MINT32 UDM_SL_EN_U_L		= rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_EN;
    MINT32 UDM_SL_Y1_U_L		= rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_Y1;
    MINT32 UDM_SL_Y2_U_L		= rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_Y2;
    MINT32 UDM_SL_HR_U_L		= rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_HR;
    MINT32 UDM_HT_GN1_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN1;
    MINT32 UDM_HT_GN2_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN2;
    MINT32 UDM_HD_GN1_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN1;
    MINT32 UDM_HD_GN2_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN2;
    MINT32 UDM_HD_GN3_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl2.bits.UDM_HD_GN3;
    MINT32 UDM_HFRB_GN_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl2.bits.UDM_HFRB_GN;
    MINT32 UDM_HA_STR_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_HA_STR;
    MINT32 UDM_H1_GN_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H1_GN;
    MINT32 UDM_H2_GN_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H2_GN;
    MINT32 UDM_H3_GN_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H3_GN;
    MINT32 UDM_HI_RAT_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_HI_RAT;
    MINT32 UDM_H1_LWB_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H1_LWB;
    MINT32 UDM_H2_LWB_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H2_LWB;
    MINT32 UDM_H3_LWB_U_L		= rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_H3_LWB;
    MINT32 UDM_H1_UPB_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H1_UPB;
    MINT32 UDM_H2_UPB_U_L		= rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H2_UPB;
    MINT32 UDM_H3_UPB_U_L		= rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_H3_UPB;
    MINT32 UDM_HSLR_U_L		= rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_HSLR;
    MINT32 UDM_HSLL_U_L		= rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_HSLL;
    MINT32 UDM_CORE_TH1_U_L		= rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_CORE_TH1;
    MINT32 UDM_CORE_TH2_U_L		= rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_CORE_TH2;
    MINT32 UDM_OV_TH_U_L		= rParam.rUpperIso_LowerZoom.clip.bits.UDM_OV_TH;
    MINT32 UDM_UN_TH_U_L		= rParam.rUpperIso_LowerZoom.clip.bits.UDM_UN_TH;
    MINT32 UDM_CLIP_TH_U_L		= rParam.rUpperIso_LowerZoom.clip.bits.UDM_CLIP_TH;
    MINT32 UDM_HNEG_GN_U_L		= rParam.rUpperIso_LowerZoom.ee.bits.UDM_HNEG_GN;
    MINT32 UDM_HPOS_GN_U_L		= rParam.rUpperIso_LowerZoom.ee.bits.UDM_HPOS_GN;
    MINT32 UDM_N0_STR_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N0_STR;
    MINT32 UDM_N1_STR_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N1_STR;
    MINT32 UDM_N2_STR_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N2_STR;
    MINT32 UDM_N0_OFST_U_L		= rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N0_OFST;
    MINT32 UDM_N1_OFST_U_L		= rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N1_OFST;
    MINT32 UDM_N2_OFST_U_L		= rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N2_OFST;
    MINT32 UDM_NSL_U_L		= rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_NSL;
    MINT32 UDM_NGR_U_L		= rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_NGR;
    MINT32 UDM_XTK_RAT_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_RAT;
    MINT32 UDM_XTK_OFST_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_OFST;
    MINT32 UDM_XTK_SL_U_L		= rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_SL;
    MINT32 UDM_FL_MODE_U_L		= rParam.rUpperIso_LowerZoom.dsb.bits.UDM_FL_MODE;
    MINT32 UDM_SL_RAT_U_L		= rParam.rUpperIso_LowerZoom.dsb.bits.UDM_SL_RAT;
    MINT32 UDM_SC_RAT_U_L		= rParam.rUpperIso_LowerZoom.dsb.bits.UDM_SC_RAT;
    MINT32 UDM_LR_RAT_U_L		= rParam.rUpperIso_LowerZoom.lr_rat.bits.UDM_LR_RAT;

    MINT32 UDM_BYP_U_U		= rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_BYP;
    MINT32 UDM_CD_KNL_U_U		= rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CD_KNL;
    MINT32 UDM_CDG_RAT_U_U		= rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_RAT;
    MINT32 UDM_CDG_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_OFST;
    MINT32 UDM_CDG_SL_U_U		= rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_SL;
    MINT32 UDM_INT_LTH_U_U		= rParam.rUpperIso_UpperZoom.int_ctl.bits.UDM_INT_LTH;
    MINT32 UDM_INT_CDTH_U_U		= rParam.rUpperIso_UpperZoom.int_ctl.bits.UDM_INT_CDTH;
    MINT32 UDM_P1_LWB_U_U		= rParam.rUpperIso_UpperZoom.p1_act.bits.UDM_P1_LWB;
    MINT32 UDM_P1_UPB_U_U		= rParam.rUpperIso_UpperZoom.p1_act.bits.UDM_P1_UPB;
    MINT32 UDM_P1_BLD_U_U		= rParam.rUpperIso_UpperZoom.est_ctl.bits.UDM_P1_BLD;
    MINT32 UDM_P2_CLIP_U_U		= rParam.rUpperIso_UpperZoom.est_ctl.bits.UDM_P2_CLIP;
    MINT32 UDM_CD_SLC_U_U		= rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_CD_SLC;
    MINT32 UDM_CD_SLL_U_U		= rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_CD_SLL;
    MINT32 UDM_DN_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_DN_OFST;
    MINT32 UDM_HL_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_HL_OFST;
    MINT32 UDM_L0_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_L0_OFST;
    MINT32 UDM_L0_SL_U_U		= rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_L0_SL;
    MINT32 UDM_L1_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L1_OFST;
    MINT32 UDM_L1_SL_U_U		= rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L1_SL;
    MINT32 UDM_L2_OFST_U_U		= rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L2_OFST;
    MINT32 UDM_L2_SL_U_U		= rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L2_SL;
    MINT32 UDM_LM_Y0_U_U		= rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y0;
    MINT32 UDM_LM_Y1_U_U		= rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y1;
    MINT32 UDM_LM_Y2_U_U		= rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y2;
    MINT32 UDM_LM_Y3_U_U		= rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y3;
    MINT32 UDM_LM_Y4_U_U		= rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y4;
    MINT32 UDM_LM_Y5_U_U		= rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y5;
    MINT32 UDM_SL_EN_U_U		= rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_EN;
    MINT32 UDM_SL_Y1_U_U		= rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_Y1;
    MINT32 UDM_SL_Y2_U_U		= rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_Y2;
    MINT32 UDM_SL_HR_U_U		= rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_HR;
    MINT32 UDM_HT_GN1_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN1;
    MINT32 UDM_HT_GN2_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN2;
    MINT32 UDM_HD_GN1_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN1;
    MINT32 UDM_HD_GN2_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN2;
    MINT32 UDM_HD_GN3_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl2.bits.UDM_HD_GN3;
    MINT32 UDM_HFRB_GN_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl2.bits.UDM_HFRB_GN;
    MINT32 UDM_HA_STR_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_HA_STR;
    MINT32 UDM_H1_GN_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H1_GN;
    MINT32 UDM_H2_GN_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H2_GN;
    MINT32 UDM_H3_GN_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H3_GN;
    MINT32 UDM_HI_RAT_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_HI_RAT;
    MINT32 UDM_H1_LWB_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H1_LWB;
    MINT32 UDM_H2_LWB_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H2_LWB;
    MINT32 UDM_H3_LWB_U_U		= rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_H3_LWB;
    MINT32 UDM_H1_UPB_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H1_UPB;
    MINT32 UDM_H2_UPB_U_U		= rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H2_UPB;
    MINT32 UDM_H3_UPB_U_U		= rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_H3_UPB;
    MINT32 UDM_HSLR_U_U		= rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_HSLR;
    MINT32 UDM_HSLL_U_U		= rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_HSLL;
    MINT32 UDM_CORE_TH1_U_U		= rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_CORE_TH1;
    MINT32 UDM_CORE_TH2_U_U		= rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_CORE_TH2;
    MINT32 UDM_OV_TH_U_U		= rParam.rUpperIso_UpperZoom.clip.bits.UDM_OV_TH;
    MINT32 UDM_UN_TH_U_U		= rParam.rUpperIso_UpperZoom.clip.bits.UDM_UN_TH;
    MINT32 UDM_CLIP_TH_U_U		= rParam.rUpperIso_UpperZoom.clip.bits.UDM_CLIP_TH;
    MINT32 UDM_HNEG_GN_U_U		= rParam.rUpperIso_UpperZoom.ee.bits.UDM_HNEG_GN;
    MINT32 UDM_HPOS_GN_U_U		= rParam.rUpperIso_UpperZoom.ee.bits.UDM_HPOS_GN;
    MINT32 UDM_N0_STR_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N0_STR;
    MINT32 UDM_N1_STR_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N1_STR;
    MINT32 UDM_N2_STR_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N2_STR;
    MINT32 UDM_N0_OFST_U_U		= rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N0_OFST;
    MINT32 UDM_N1_OFST_U_U		= rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N1_OFST;
    MINT32 UDM_N2_OFST_U_U		= rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N2_OFST;
    MINT32 UDM_NSL_U_U		= rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_NSL;
    MINT32 UDM_NGR_U_U		= rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_NGR;
    MINT32 UDM_XTK_RAT_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_RAT;
    MINT32 UDM_XTK_OFST_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_OFST;
    MINT32 UDM_XTK_SL_U_U		= rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_SL;
    MINT32 UDM_FL_MODE_U_U		= rParam.rUpperIso_UpperZoom.dsb.bits.UDM_FL_MODE;
    MINT32 UDM_SL_RAT_U_U		= rParam.rUpperIso_UpperZoom.dsb.bits.UDM_SL_RAT;
    MINT32 UDM_SC_RAT_U_U		= rParam.rUpperIso_UpperZoom.dsb.bits.UDM_SC_RAT;
    MINT32 UDM_LR_RAT_U_U		= rParam.rUpperIso_UpperZoom.lr_rat.bits.UDM_LR_RAT;


    // interpolation core
    MINT32 UDM_BYP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_BYP_L_L, UDM_BYP_L_U, UDM_BYP_U_L, UDM_BYP_U_U, 4);
    MINT32 UDM_CD_KNL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CD_KNL_L_L, UDM_CD_KNL_L_U, UDM_CD_KNL_U_L, UDM_CD_KNL_U_U, 4);
    MINT32 UDM_CDG_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CDG_RAT_L_L, UDM_CDG_RAT_L_U, UDM_CDG_RAT_U_L, UDM_CDG_RAT_U_U, 4);
    MINT32 UDM_CDG_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CDG_OFST_L_L, UDM_CDG_OFST_L_U, UDM_CDG_OFST_U_L, UDM_CDG_OFST_U_U, 4);
    MINT32 UDM_CDG_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CDG_SL_L_L, UDM_CDG_SL_L_U, UDM_CDG_SL_U_L, UDM_CDG_SL_U_U, 4);
    MINT32 UDM_INT_LTH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_INT_LTH_L_L, UDM_INT_LTH_L_U, UDM_INT_LTH_U_L, UDM_INT_LTH_U_U, 4);
    MINT32 UDM_INT_CDTH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_INT_CDTH_L_L, UDM_INT_CDTH_L_U, UDM_INT_CDTH_U_L, UDM_INT_CDTH_U_U, 4);
    MINT32 UDM_P1_LWB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_P1_LWB_L_L, UDM_P1_LWB_L_U, UDM_P1_LWB_U_L, UDM_P1_LWB_U_U, 4);
    MINT32 UDM_P1_UPB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_P1_UPB_L_L, UDM_P1_UPB_L_U, UDM_P1_UPB_U_L, UDM_P1_UPB_U_U, 4);
    MINT32 UDM_P1_BLD		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_P1_BLD_L_L, UDM_P1_BLD_L_U, UDM_P1_BLD_U_L, UDM_P1_BLD_U_U, 4);
    MINT32 UDM_P2_CLIP		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_P2_CLIP_L_L, UDM_P2_CLIP_L_U, UDM_P2_CLIP_U_L, UDM_P2_CLIP_U_U, 4);
    MINT32 UDM_CD_SLC		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CD_SLC_L_L, UDM_CD_SLC_L_U, UDM_CD_SLC_U_L, UDM_CD_SLC_U_U, 4);
    MINT32 UDM_CD_SLL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CD_SLL_L_L, UDM_CD_SLL_L_U, UDM_CD_SLL_U_L, UDM_CD_SLL_U_U, 4);
    MINT32 UDM_DN_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_DN_OFST_L_L, UDM_DN_OFST_L_U, UDM_DN_OFST_U_L, UDM_DN_OFST_U_U, 4);
    MINT32 UDM_HL_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HL_OFST_L_L, UDM_HL_OFST_L_U, UDM_HL_OFST_U_L, UDM_HL_OFST_U_U, 4);
    MINT32 UDM_L0_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L0_OFST_L_L, UDM_L0_OFST_L_U, UDM_L0_OFST_U_L, UDM_L0_OFST_U_U, 4);
    MINT32 UDM_L0_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L0_SL_L_L, UDM_L0_SL_L_U, UDM_L0_SL_U_L, UDM_L0_SL_U_U, 4);
    MINT32 UDM_L1_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L1_OFST_L_L, UDM_L1_OFST_L_U, UDM_L1_OFST_U_L, UDM_L1_OFST_U_U, 4);
    MINT32 UDM_L1_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L1_SL_L_L, UDM_L1_SL_L_U, UDM_L1_SL_U_L, UDM_L1_SL_U_U, 4);
    MINT32 UDM_L2_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L2_OFST_L_L, UDM_L2_OFST_L_U, UDM_L2_OFST_U_L, UDM_L2_OFST_U_U, 4);
    MINT32 UDM_L2_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_L2_SL_L_L, UDM_L2_SL_L_U, UDM_L2_SL_U_L, UDM_L2_SL_U_U, 4);
    MINT32 UDM_LM_Y0		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y0_L_L, UDM_LM_Y0_L_U, UDM_LM_Y0_U_L, UDM_LM_Y0_U_U, 4);
    MINT32 UDM_LM_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y1_L_L, UDM_LM_Y1_L_U, UDM_LM_Y1_U_L, UDM_LM_Y1_U_U, 4);
    MINT32 UDM_LM_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y2_L_L, UDM_LM_Y2_L_U, UDM_LM_Y2_U_L, UDM_LM_Y2_U_U, 4);
    MINT32 UDM_LM_Y3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y3_L_L, UDM_LM_Y3_L_U, UDM_LM_Y3_U_L, UDM_LM_Y3_U_U, 4);
    MINT32 UDM_LM_Y4		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y4_L_L, UDM_LM_Y4_L_U, UDM_LM_Y4_U_L, UDM_LM_Y4_U_U, 4);
    MINT32 UDM_LM_Y5		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LM_Y5_L_L, UDM_LM_Y5_L_U, UDM_LM_Y5_U_L, UDM_LM_Y5_U_U, 4);
    MINT32 UDM_SL_EN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SL_EN_L_L, UDM_SL_EN_L_U, UDM_SL_EN_U_L, UDM_SL_EN_U_U, 4);
    MINT32 UDM_SL_Y1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SL_Y1_L_L, UDM_SL_Y1_L_U, UDM_SL_Y1_U_L, UDM_SL_Y1_U_U, 4);
    MINT32 UDM_SL_Y2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SL_Y2_L_L, UDM_SL_Y2_L_U, UDM_SL_Y2_U_L, UDM_SL_Y2_U_U, 4);
    MINT32 UDM_SL_HR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SL_HR_L_L, UDM_SL_HR_L_U, UDM_SL_HR_U_L, UDM_SL_HR_U_U, 4);
    MINT32 UDM_HT_GN1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HT_GN1_L_L, UDM_HT_GN1_L_U, UDM_HT_GN1_U_L, UDM_HT_GN1_U_U, 4);
    MINT32 UDM_HT_GN2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HT_GN2_L_L, UDM_HT_GN2_L_U, UDM_HT_GN2_U_L, UDM_HT_GN2_U_U, 4);
    MINT32 UDM_HD_GN1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HD_GN1_L_L, UDM_HD_GN1_L_U, UDM_HD_GN1_U_L, UDM_HD_GN1_U_U, 4);
    MINT32 UDM_HD_GN2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HD_GN2_L_L, UDM_HD_GN2_L_U, UDM_HD_GN2_U_L, UDM_HD_GN2_U_U, 4);
    MINT32 UDM_HD_GN3		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HD_GN3_L_L, UDM_HD_GN3_L_U, UDM_HD_GN3_U_L, UDM_HD_GN3_U_U, 4);
    MINT32 UDM_HFRB_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HFRB_GN_L_L, UDM_HFRB_GN_L_U, UDM_HFRB_GN_U_L, UDM_HFRB_GN_U_U, 4);
    MINT32 UDM_HA_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HA_STR_L_L, UDM_HA_STR_L_U, UDM_HA_STR_U_L, UDM_HA_STR_U_U, 4);
    MINT32 UDM_H1_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H1_GN_L_L, UDM_H1_GN_L_U, UDM_H1_GN_U_L, UDM_H1_GN_U_U, 4);
    MINT32 UDM_H2_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H2_GN_L_L, UDM_H2_GN_L_U, UDM_H2_GN_U_L, UDM_H2_GN_U_U, 4);
    MINT32 UDM_H3_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H3_GN_L_L, UDM_H3_GN_L_U, UDM_H3_GN_U_L, UDM_H3_GN_U_U, 4);
    MINT32 UDM_HI_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HI_RAT_L_L, UDM_HI_RAT_L_U, UDM_HI_RAT_U_L, UDM_HI_RAT_U_U, 4);
    MINT32 UDM_H1_LWB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H1_LWB_L_L, UDM_H1_LWB_L_U, UDM_H1_LWB_U_L, UDM_H1_LWB_U_U, 4);
    MINT32 UDM_H2_LWB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H2_LWB_L_L, UDM_H2_LWB_L_U, UDM_H2_LWB_U_L, UDM_H2_LWB_U_U, 4);
    MINT32 UDM_H3_LWB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H3_LWB_L_L, UDM_H3_LWB_L_U, UDM_H3_LWB_U_L, UDM_H3_LWB_U_U, 4);
    MINT32 UDM_H1_UPB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H1_UPB_L_L, UDM_H1_UPB_L_U, UDM_H1_UPB_U_L, UDM_H1_UPB_U_U, 4);
    MINT32 UDM_H2_UPB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H2_UPB_L_L, UDM_H2_UPB_L_U, UDM_H2_UPB_U_L, UDM_H2_UPB_U_U, 4);
    MINT32 UDM_H3_UPB		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_H3_UPB_L_L, UDM_H3_UPB_L_U, UDM_H3_UPB_U_L, UDM_H3_UPB_U_U, 4);
    MINT32 UDM_HSLR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HSLR_L_L, UDM_HSLR_L_U, UDM_HSLR_U_L, UDM_HSLR_U_U, 4);
    MINT32 UDM_HSLL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HSLL_L_L, UDM_HSLL_L_U, UDM_HSLL_U_L, UDM_HSLL_U_U, 4);
    MINT32 UDM_CORE_TH1		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CORE_TH1_L_L, UDM_CORE_TH1_L_U, UDM_CORE_TH1_U_L, UDM_CORE_TH1_U_U, 4);
    MINT32 UDM_CORE_TH2		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CORE_TH2_L_L, UDM_CORE_TH2_L_U, UDM_CORE_TH2_U_L, UDM_CORE_TH2_U_U, 4);
    MINT32 UDM_OV_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_OV_TH_L_L, UDM_OV_TH_L_U, UDM_OV_TH_U_L, UDM_OV_TH_U_U, 4);
    MINT32 UDM_UN_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_UN_TH_L_L, UDM_UN_TH_L_U, UDM_UN_TH_U_L, UDM_UN_TH_U_U, 4);
    MINT32 UDM_CLIP_TH		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_CLIP_TH_L_L, UDM_CLIP_TH_L_U, UDM_CLIP_TH_U_L, UDM_CLIP_TH_U_U, 4);
    MINT32 UDM_HNEG_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HNEG_GN_L_L, UDM_HNEG_GN_L_U, UDM_HNEG_GN_U_L, UDM_HNEG_GN_U_U, 4);
    MINT32 UDM_HPOS_GN		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_HPOS_GN_L_L, UDM_HPOS_GN_L_U, UDM_HPOS_GN_U_L, UDM_HPOS_GN_U_U, 4);
    MINT32 UDM_N0_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N0_STR_L_L, UDM_N0_STR_L_U, UDM_N0_STR_U_L, UDM_N0_STR_U_U, 4);
    MINT32 UDM_N1_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N1_STR_L_L, UDM_N1_STR_L_U, UDM_N1_STR_U_L, UDM_N1_STR_U_U, 4);
    MINT32 UDM_N2_STR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N2_STR_L_L, UDM_N2_STR_L_U, UDM_N2_STR_U_L, UDM_N2_STR_U_U, 4);
    MINT32 UDM_N0_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N0_OFST_L_L, UDM_N0_OFST_L_U, UDM_N0_OFST_U_L, UDM_N0_OFST_U_U, 4);
    MINT32 UDM_N1_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N1_OFST_L_L, UDM_N1_OFST_L_U, UDM_N1_OFST_U_L, UDM_N1_OFST_U_U, 4);
    MINT32 UDM_N2_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_N2_OFST_L_L, UDM_N2_OFST_L_U, UDM_N2_OFST_U_L, UDM_N2_OFST_U_U, 4);
    MINT32 UDM_NSL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_NSL_L_L, UDM_NSL_L_U, UDM_NSL_U_L, UDM_NSL_U_U, 4);
    MINT32 UDM_NGR		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_NGR_L_L, UDM_NGR_L_U, UDM_NGR_U_L, UDM_NGR_U_U, 4);
    MINT32 UDM_XTK_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_XTK_RAT_L_L, UDM_XTK_RAT_L_U, UDM_XTK_RAT_U_L, UDM_XTK_RAT_U_U, 4);
    MINT32 UDM_XTK_OFST		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_XTK_OFST_L_L, UDM_XTK_OFST_L_U, UDM_XTK_OFST_U_L, UDM_XTK_OFST_U_U, 4);
    MINT32 UDM_XTK_SL		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_XTK_SL_L_L, UDM_XTK_SL_L_U, UDM_XTK_SL_U_L, UDM_XTK_SL_U_U, 4);
    MINT32 UDM_FL_MODE		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_FL_MODE_L_L, UDM_FL_MODE_L_U, UDM_FL_MODE_U_L, UDM_FL_MODE_U_U, 4);
    MINT32 UDM_SL_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SL_RAT_L_L, UDM_SL_RAT_L_U, UDM_SL_RAT_U_L, UDM_SL_RAT_U_U, 4);
    MINT32 UDM_SC_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_SC_RAT_L_L, UDM_SC_RAT_L_U, UDM_SC_RAT_U_L, UDM_SC_RAT_U_U, 4);
    MINT32 UDM_LR_RAT		= InterParam_2D(RATIO_L_L, RATIO_L_U, RATIO_U_L, RATIO_U_U, UDM_LR_RAT_L_L, UDM_LR_RAT_L_U, UDM_LR_RAT_U_L, UDM_LR_RAT_U_U, 4);


    // assign interpolation result
    rSmoothUDM.intp_crs.bits.UDM_BYP       = UDM_BYP;
    rSmoothUDM.intp_crs.bits.UDM_CD_KNL       = UDM_CD_KNL;
    rSmoothUDM.intp_crs.bits.UDM_CDG_RAT       = UDM_CDG_RAT;
    rSmoothUDM.intp_crs.bits.UDM_CDG_OFST       = UDM_CDG_OFST;
    rSmoothUDM.intp_crs.bits.UDM_CDG_SL       = UDM_CDG_SL;
    rSmoothUDM.int_ctl.bits.UDM_INT_LTH       = UDM_INT_LTH;
    rSmoothUDM.int_ctl.bits.UDM_INT_CDTH       = UDM_INT_CDTH;
    rSmoothUDM.p1_act.bits.UDM_P1_LWB       = UDM_P1_LWB;
    rSmoothUDM.p1_act.bits.UDM_P1_UPB       = UDM_P1_UPB;
    rSmoothUDM.est_ctl.bits.UDM_P1_BLD       = UDM_P1_BLD;
    rSmoothUDM.est_ctl.bits.UDM_P2_CLIP       = UDM_P2_CLIP;
    rSmoothUDM.intp_nat.bits.UDM_CD_SLC       = UDM_CD_SLC;
    rSmoothUDM.intp_nat.bits.UDM_CD_SLL       = UDM_CD_SLL;
    rSmoothUDM.intp_aug.bits.UDM_DN_OFST       = UDM_DN_OFST;
    rSmoothUDM.intp_nat.bits.UDM_HL_OFST       = UDM_HL_OFST;
    rSmoothUDM.intp_nat.bits.UDM_L0_OFST       = UDM_L0_OFST;
    rSmoothUDM.intp_nat.bits.UDM_L0_SL       = UDM_L0_SL;
    rSmoothUDM.intp_aug.bits.UDM_L1_OFST       = UDM_L1_OFST;
    rSmoothUDM.intp_aug.bits.UDM_L1_SL       = UDM_L1_SL;
    rSmoothUDM.intp_aug.bits.UDM_L2_OFST       = UDM_L2_OFST;
    rSmoothUDM.intp_aug.bits.UDM_L2_SL       = UDM_L2_SL;
    rSmoothUDM.luma_lut1.bits.UDM_LM_Y0       = UDM_LM_Y0;
    rSmoothUDM.luma_lut1.bits.UDM_LM_Y1       = UDM_LM_Y1;
    rSmoothUDM.luma_lut1.bits.UDM_LM_Y2       = UDM_LM_Y2;
    rSmoothUDM.luma_lut2.bits.UDM_LM_Y3       = UDM_LM_Y3;
    rSmoothUDM.luma_lut2.bits.UDM_LM_Y4       = UDM_LM_Y4;
    rSmoothUDM.luma_lut2.bits.UDM_LM_Y5       = UDM_LM_Y5;
    rSmoothUDM.sl_ctl.bits.UDM_SL_EN       = UDM_SL_EN;
    rSmoothUDM.sl_ctl.bits.UDM_SL_Y1       = UDM_SL_Y1;
    rSmoothUDM.sl_ctl.bits.UDM_SL_Y2       = UDM_SL_Y2;
    rSmoothUDM.sl_ctl.bits.UDM_SL_HR       = UDM_SL_HR;
    rSmoothUDM.hftd_ctl.bits.UDM_HT_GN1       = UDM_HT_GN1;
    rSmoothUDM.hftd_ctl.bits.UDM_HT_GN2       = UDM_HT_GN2;
    rSmoothUDM.hftd_ctl.bits.UDM_HD_GN1       = UDM_HD_GN1;
    rSmoothUDM.hftd_ctl.bits.UDM_HD_GN2       = UDM_HD_GN2;
    rSmoothUDM.hftd_ctl2.bits.UDM_HD_GN3       = UDM_HD_GN3;
    rSmoothUDM.hftd_ctl2.bits.UDM_HFRB_GN       = UDM_HFRB_GN;
    rSmoothUDM.hf_str.bits.UDM_HA_STR       = UDM_HA_STR;
    rSmoothUDM.hf_str.bits.UDM_H1_GN       = UDM_H1_GN;
    rSmoothUDM.hf_str.bits.UDM_H2_GN       = UDM_H2_GN;
    rSmoothUDM.hf_str.bits.UDM_H3_GN       = UDM_H3_GN;
    rSmoothUDM.hf_str.bits.UDM_HI_RAT       = UDM_HI_RAT;
    rSmoothUDM.hf_act1.bits.UDM_H1_LWB       = UDM_H1_LWB;
    rSmoothUDM.hf_act1.bits.UDM_H2_LWB       = UDM_H2_LWB;
    rSmoothUDM.hf_act2.bits.UDM_H3_LWB       = UDM_H3_LWB;
    rSmoothUDM.hf_act1.bits.UDM_H1_UPB       = UDM_H1_UPB;
    rSmoothUDM.hf_act1.bits.UDM_H2_UPB       = UDM_H2_UPB;
    rSmoothUDM.hf_act2.bits.UDM_H3_UPB       = UDM_H3_UPB;
    rSmoothUDM.hf_act2.bits.UDM_HSLR       = UDM_HSLR;
    rSmoothUDM.hf_act2.bits.UDM_HSLL       = UDM_HSLL;
    rSmoothUDM.hftd_ctl.bits.UDM_CORE_TH1       = UDM_CORE_TH1;
    rSmoothUDM.hf_str.bits.UDM_CORE_TH2       = UDM_CORE_TH2;
    rSmoothUDM.clip.bits.UDM_OV_TH       = UDM_OV_TH;
    rSmoothUDM.clip.bits.UDM_UN_TH       = UDM_UN_TH;
    rSmoothUDM.clip.bits.UDM_CLIP_TH       = UDM_CLIP_TH;
    rSmoothUDM.ee.bits.UDM_HNEG_GN       = UDM_HNEG_GN;
    rSmoothUDM.ee.bits.UDM_HPOS_GN       = UDM_HPOS_GN;
    rSmoothUDM.nr_str.bits.UDM_N0_STR       = UDM_N0_STR;
    rSmoothUDM.nr_str.bits.UDM_N1_STR       = UDM_N1_STR;
    rSmoothUDM.nr_str.bits.UDM_N2_STR       = UDM_N2_STR;
    rSmoothUDM.nr_act.bits.UDM_N0_OFST       = UDM_N0_OFST;
    rSmoothUDM.nr_act.bits.UDM_N1_OFST       = UDM_N1_OFST;
    rSmoothUDM.nr_act.bits.UDM_N2_OFST       = UDM_N2_OFST;
    rSmoothUDM.nr_act.bits.UDM_NSL       = UDM_NSL;
    rSmoothUDM.nr_act.bits.UDM_NGR       = UDM_NGR;
    rSmoothUDM.nr_str.bits.UDM_XTK_RAT       = UDM_XTK_RAT;
    rSmoothUDM.nr_str.bits.UDM_XTK_OFST       = UDM_XTK_OFST;
    rSmoothUDM.nr_str.bits.UDM_XTK_SL       = UDM_XTK_SL;
    rSmoothUDM.dsb.bits.UDM_FL_MODE       = UDM_FL_MODE;
    rSmoothUDM.dsb.bits.UDM_SL_RAT       = UDM_SL_RAT;
    rSmoothUDM.dsb.bits.UDM_SC_RAT       = UDM_SC_RAT;
    rSmoothUDM.lr_rat.bits.UDM_LR_RAT       = UDM_LR_RAT;


    // log
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_BYP = %d, %d, %d, %d, %d", rSmoothUDM.intp_crs.bits.UDM_BYP, rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_BYP, rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_BYP, rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_BYP, rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_BYP);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CD_KNL = %d, %d, %d, %d, %d", rSmoothUDM.intp_crs.bits.UDM_CD_KNL, rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CD_KNL, rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CD_KNL, rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CD_KNL, rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CD_KNL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CDG_RAT = %d, %d, %d, %d, %d", rSmoothUDM.intp_crs.bits.UDM_CDG_RAT, rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_RAT, rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_RAT, rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_RAT, rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_RAT);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CDG_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_crs.bits.UDM_CDG_OFST, rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_OFST, rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_OFST, rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_OFST, rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CDG_SL = %d, %d, %d, %d, %d", rSmoothUDM.intp_crs.bits.UDM_CDG_SL, rParam.rLowerIso_LowerZoom.intp_crs.bits.UDM_CDG_SL, rParam.rLowerIso_UpperZoom.intp_crs.bits.UDM_CDG_SL, rParam.rUpperIso_LowerZoom.intp_crs.bits.UDM_CDG_SL, rParam.rUpperIso_UpperZoom.intp_crs.bits.UDM_CDG_SL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_INT_LTH = %d, %d, %d, %d, %d", rSmoothUDM.int_ctl.bits.UDM_INT_LTH, rParam.rLowerIso_LowerZoom.int_ctl.bits.UDM_INT_LTH, rParam.rLowerIso_UpperZoom.int_ctl.bits.UDM_INT_LTH, rParam.rUpperIso_LowerZoom.int_ctl.bits.UDM_INT_LTH, rParam.rUpperIso_UpperZoom.int_ctl.bits.UDM_INT_LTH);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_INT_CDTH = %d, %d, %d, %d, %d", rSmoothUDM.int_ctl.bits.UDM_INT_CDTH, rParam.rLowerIso_LowerZoom.int_ctl.bits.UDM_INT_CDTH, rParam.rLowerIso_UpperZoom.int_ctl.bits.UDM_INT_CDTH, rParam.rUpperIso_LowerZoom.int_ctl.bits.UDM_INT_CDTH, rParam.rUpperIso_UpperZoom.int_ctl.bits.UDM_INT_CDTH);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_P1_LWB = %d, %d, %d, %d, %d", rSmoothUDM.p1_act.bits.UDM_P1_LWB, rParam.rLowerIso_LowerZoom.p1_act.bits.UDM_P1_LWB, rParam.rLowerIso_UpperZoom.p1_act.bits.UDM_P1_LWB, rParam.rUpperIso_LowerZoom.p1_act.bits.UDM_P1_LWB, rParam.rUpperIso_UpperZoom.p1_act.bits.UDM_P1_LWB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_P1_UPB = %d, %d, %d, %d, %d", rSmoothUDM.p1_act.bits.UDM_P1_UPB, rParam.rLowerIso_LowerZoom.p1_act.bits.UDM_P1_UPB, rParam.rLowerIso_UpperZoom.p1_act.bits.UDM_P1_UPB, rParam.rUpperIso_LowerZoom.p1_act.bits.UDM_P1_UPB, rParam.rUpperIso_UpperZoom.p1_act.bits.UDM_P1_UPB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_P1_BLD = %d, %d, %d, %d, %d", rSmoothUDM.est_ctl.bits.UDM_P1_BLD, rParam.rLowerIso_LowerZoom.est_ctl.bits.UDM_P1_BLD, rParam.rLowerIso_UpperZoom.est_ctl.bits.UDM_P1_BLD, rParam.rUpperIso_LowerZoom.est_ctl.bits.UDM_P1_BLD, rParam.rUpperIso_UpperZoom.est_ctl.bits.UDM_P1_BLD);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_P2_CLIP = %d, %d, %d, %d, %d", rSmoothUDM.est_ctl.bits.UDM_P2_CLIP, rParam.rLowerIso_LowerZoom.est_ctl.bits.UDM_P2_CLIP, rParam.rLowerIso_UpperZoom.est_ctl.bits.UDM_P2_CLIP, rParam.rUpperIso_LowerZoom.est_ctl.bits.UDM_P2_CLIP, rParam.rUpperIso_UpperZoom.est_ctl.bits.UDM_P2_CLIP);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CD_SLC = %d, %d, %d, %d, %d", rSmoothUDM.intp_nat.bits.UDM_CD_SLC, rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_CD_SLC, rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_CD_SLC, rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_CD_SLC, rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_CD_SLC);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CD_SLL = %d, %d, %d, %d, %d", rSmoothUDM.intp_nat.bits.UDM_CD_SLL, rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_CD_SLL, rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_CD_SLL, rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_CD_SLL, rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_CD_SLL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_DN_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_aug.bits.UDM_DN_OFST, rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_DN_OFST, rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_DN_OFST, rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_DN_OFST, rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_DN_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HL_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_nat.bits.UDM_HL_OFST, rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_HL_OFST, rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_HL_OFST, rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_HL_OFST, rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_HL_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L0_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_nat.bits.UDM_L0_OFST, rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_L0_OFST, rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_L0_OFST, rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_L0_OFST, rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_L0_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L0_SL = %d, %d, %d, %d, %d", rSmoothUDM.intp_nat.bits.UDM_L0_SL, rParam.rLowerIso_LowerZoom.intp_nat.bits.UDM_L0_SL, rParam.rLowerIso_UpperZoom.intp_nat.bits.UDM_L0_SL, rParam.rUpperIso_LowerZoom.intp_nat.bits.UDM_L0_SL, rParam.rUpperIso_UpperZoom.intp_nat.bits.UDM_L0_SL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L1_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_aug.bits.UDM_L1_OFST, rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L1_OFST, rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L1_OFST, rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L1_OFST, rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L1_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L1_SL = %d, %d, %d, %d, %d", rSmoothUDM.intp_aug.bits.UDM_L1_SL, rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L1_SL, rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L1_SL, rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L1_SL, rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L1_SL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L2_OFST = %d, %d, %d, %d, %d", rSmoothUDM.intp_aug.bits.UDM_L2_OFST, rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L2_OFST, rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L2_OFST, rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L2_OFST, rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L2_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_L2_SL = %d, %d, %d, %d, %d", rSmoothUDM.intp_aug.bits.UDM_L2_SL, rParam.rLowerIso_LowerZoom.intp_aug.bits.UDM_L2_SL, rParam.rLowerIso_UpperZoom.intp_aug.bits.UDM_L2_SL, rParam.rUpperIso_LowerZoom.intp_aug.bits.UDM_L2_SL, rParam.rUpperIso_UpperZoom.intp_aug.bits.UDM_L2_SL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y0 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut1.bits.UDM_LM_Y0, rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y0, rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y0, rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y0, rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y0);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y1 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut1.bits.UDM_LM_Y1, rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y1, rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y1, rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y1, rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y1);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y2 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut1.bits.UDM_LM_Y2, rParam.rLowerIso_LowerZoom.luma_lut1.bits.UDM_LM_Y2, rParam.rLowerIso_UpperZoom.luma_lut1.bits.UDM_LM_Y2, rParam.rUpperIso_LowerZoom.luma_lut1.bits.UDM_LM_Y2, rParam.rUpperIso_UpperZoom.luma_lut1.bits.UDM_LM_Y2);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y3 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut2.bits.UDM_LM_Y3, rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y3, rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y3, rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y3, rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y3);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y4 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut2.bits.UDM_LM_Y4, rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y4, rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y4, rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y4, rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y4);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LM_Y5 = %d, %d, %d, %d, %d", rSmoothUDM.luma_lut2.bits.UDM_LM_Y5, rParam.rLowerIso_LowerZoom.luma_lut2.bits.UDM_LM_Y5, rParam.rLowerIso_UpperZoom.luma_lut2.bits.UDM_LM_Y5, rParam.rUpperIso_LowerZoom.luma_lut2.bits.UDM_LM_Y5, rParam.rUpperIso_UpperZoom.luma_lut2.bits.UDM_LM_Y5);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SL_EN = %d, %d, %d, %d, %d", rSmoothUDM.sl_ctl.bits.UDM_SL_EN, rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_EN, rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_EN, rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_EN, rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_EN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SL_Y1 = %d, %d, %d, %d, %d", rSmoothUDM.sl_ctl.bits.UDM_SL_Y1, rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_Y1, rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_Y1, rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_Y1, rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_Y1);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SL_Y2 = %d, %d, %d, %d, %d", rSmoothUDM.sl_ctl.bits.UDM_SL_Y2, rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_Y2, rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_Y2, rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_Y2, rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_Y2);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SL_HR = %d, %d, %d, %d, %d", rSmoothUDM.sl_ctl.bits.UDM_SL_HR, rParam.rLowerIso_LowerZoom.sl_ctl.bits.UDM_SL_HR, rParam.rLowerIso_UpperZoom.sl_ctl.bits.UDM_SL_HR, rParam.rUpperIso_LowerZoom.sl_ctl.bits.UDM_SL_HR, rParam.rUpperIso_UpperZoom.sl_ctl.bits.UDM_SL_HR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HT_GN1 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl.bits.UDM_HT_GN1, rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN1, rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN1, rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN1, rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN1);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HT_GN2 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl.bits.UDM_HT_GN2, rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN2, rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN2, rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HT_GN2, rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HT_GN2);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HD_GN1 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl.bits.UDM_HD_GN1, rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN1, rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN1, rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN1, rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN1);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HD_GN2 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl.bits.UDM_HD_GN2, rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN2, rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN2, rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_HD_GN2, rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_HD_GN2);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HD_GN3 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl2.bits.UDM_HD_GN3, rParam.rLowerIso_LowerZoom.hftd_ctl2.bits.UDM_HD_GN3, rParam.rLowerIso_UpperZoom.hftd_ctl2.bits.UDM_HD_GN3, rParam.rUpperIso_LowerZoom.hftd_ctl2.bits.UDM_HD_GN3, rParam.rUpperIso_UpperZoom.hftd_ctl2.bits.UDM_HD_GN3);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HFRB_GN = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl2.bits.UDM_HFRB_GN, rParam.rLowerIso_LowerZoom.hftd_ctl2.bits.UDM_HFRB_GN, rParam.rLowerIso_UpperZoom.hftd_ctl2.bits.UDM_HFRB_GN, rParam.rUpperIso_LowerZoom.hftd_ctl2.bits.UDM_HFRB_GN, rParam.rUpperIso_UpperZoom.hftd_ctl2.bits.UDM_HFRB_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HA_STR = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_HA_STR, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_HA_STR, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_HA_STR, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_HA_STR, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_HA_STR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H1_GN = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_H1_GN, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H1_GN, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H1_GN, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H1_GN, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H1_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H2_GN = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_H2_GN, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H2_GN, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H2_GN, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H2_GN, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H2_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H3_GN = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_H3_GN, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_H3_GN, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_H3_GN, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_H3_GN, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_H3_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HI_RAT = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_HI_RAT, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_HI_RAT, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_HI_RAT, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_HI_RAT, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_HI_RAT);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H1_LWB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act1.bits.UDM_H1_LWB, rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H1_LWB, rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H1_LWB, rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H1_LWB, rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H1_LWB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H2_LWB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act1.bits.UDM_H2_LWB, rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H2_LWB, rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H2_LWB, rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H2_LWB, rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H2_LWB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H3_LWB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act2.bits.UDM_H3_LWB, rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_H3_LWB, rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_H3_LWB, rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_H3_LWB, rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_H3_LWB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H1_UPB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act1.bits.UDM_H1_UPB, rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H1_UPB, rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H1_UPB, rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H1_UPB, rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H1_UPB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H2_UPB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act1.bits.UDM_H2_UPB, rParam.rLowerIso_LowerZoom.hf_act1.bits.UDM_H2_UPB, rParam.rLowerIso_UpperZoom.hf_act1.bits.UDM_H2_UPB, rParam.rUpperIso_LowerZoom.hf_act1.bits.UDM_H2_UPB, rParam.rUpperIso_UpperZoom.hf_act1.bits.UDM_H2_UPB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_H3_UPB = %d, %d, %d, %d, %d", rSmoothUDM.hf_act2.bits.UDM_H3_UPB, rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_H3_UPB, rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_H3_UPB, rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_H3_UPB, rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_H3_UPB);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HSLR = %d, %d, %d, %d, %d", rSmoothUDM.hf_act2.bits.UDM_HSLR, rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_HSLR, rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_HSLR, rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_HSLR, rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_HSLR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HSLL = %d, %d, %d, %d, %d", rSmoothUDM.hf_act2.bits.UDM_HSLL, rParam.rLowerIso_LowerZoom.hf_act2.bits.UDM_HSLL, rParam.rLowerIso_UpperZoom.hf_act2.bits.UDM_HSLL, rParam.rUpperIso_LowerZoom.hf_act2.bits.UDM_HSLL, rParam.rUpperIso_UpperZoom.hf_act2.bits.UDM_HSLL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CORE_TH1 = %d, %d, %d, %d, %d", rSmoothUDM.hftd_ctl.bits.UDM_CORE_TH1, rParam.rLowerIso_LowerZoom.hftd_ctl.bits.UDM_CORE_TH1, rParam.rLowerIso_UpperZoom.hftd_ctl.bits.UDM_CORE_TH1, rParam.rUpperIso_LowerZoom.hftd_ctl.bits.UDM_CORE_TH1, rParam.rUpperIso_UpperZoom.hftd_ctl.bits.UDM_CORE_TH1);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CORE_TH2 = %d, %d, %d, %d, %d", rSmoothUDM.hf_str.bits.UDM_CORE_TH2, rParam.rLowerIso_LowerZoom.hf_str.bits.UDM_CORE_TH2, rParam.rLowerIso_UpperZoom.hf_str.bits.UDM_CORE_TH2, rParam.rUpperIso_LowerZoom.hf_str.bits.UDM_CORE_TH2, rParam.rUpperIso_UpperZoom.hf_str.bits.UDM_CORE_TH2);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_OV_TH = %d, %d, %d, %d, %d", rSmoothUDM.clip.bits.UDM_OV_TH, rParam.rLowerIso_LowerZoom.clip.bits.UDM_OV_TH, rParam.rLowerIso_UpperZoom.clip.bits.UDM_OV_TH, rParam.rUpperIso_LowerZoom.clip.bits.UDM_OV_TH, rParam.rUpperIso_UpperZoom.clip.bits.UDM_OV_TH);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_UN_TH = %d, %d, %d, %d, %d", rSmoothUDM.clip.bits.UDM_UN_TH, rParam.rLowerIso_LowerZoom.clip.bits.UDM_UN_TH, rParam.rLowerIso_UpperZoom.clip.bits.UDM_UN_TH, rParam.rUpperIso_LowerZoom.clip.bits.UDM_UN_TH, rParam.rUpperIso_UpperZoom.clip.bits.UDM_UN_TH);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_CLIP_TH = %d, %d, %d, %d, %d", rSmoothUDM.clip.bits.UDM_CLIP_TH, rParam.rLowerIso_LowerZoom.clip.bits.UDM_CLIP_TH, rParam.rLowerIso_UpperZoom.clip.bits.UDM_CLIP_TH, rParam.rUpperIso_LowerZoom.clip.bits.UDM_CLIP_TH, rParam.rUpperIso_UpperZoom.clip.bits.UDM_CLIP_TH);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HNEG_GN = %d, %d, %d, %d, %d", rSmoothUDM.ee.bits.UDM_HNEG_GN, rParam.rLowerIso_LowerZoom.ee.bits.UDM_HNEG_GN, rParam.rLowerIso_UpperZoom.ee.bits.UDM_HNEG_GN, rParam.rUpperIso_LowerZoom.ee.bits.UDM_HNEG_GN, rParam.rUpperIso_UpperZoom.ee.bits.UDM_HNEG_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_HPOS_GN = %d, %d, %d, %d, %d", rSmoothUDM.ee.bits.UDM_HPOS_GN, rParam.rLowerIso_LowerZoom.ee.bits.UDM_HPOS_GN, rParam.rLowerIso_UpperZoom.ee.bits.UDM_HPOS_GN, rParam.rUpperIso_LowerZoom.ee.bits.UDM_HPOS_GN, rParam.rUpperIso_UpperZoom.ee.bits.UDM_HPOS_GN);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N0_STR = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_N0_STR, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N0_STR, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N0_STR, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N0_STR, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N0_STR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N1_STR = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_N1_STR, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N1_STR, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N1_STR, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N1_STR, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N1_STR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N2_STR = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_N2_STR, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_N2_STR, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_N2_STR, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_N2_STR, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_N2_STR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N0_OFST = %d, %d, %d, %d, %d", rSmoothUDM.nr_act.bits.UDM_N0_OFST, rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N0_OFST, rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N0_OFST, rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N0_OFST, rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N0_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N1_OFST = %d, %d, %d, %d, %d", rSmoothUDM.nr_act.bits.UDM_N1_OFST, rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N1_OFST, rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N1_OFST, rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N1_OFST, rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N1_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_N2_OFST = %d, %d, %d, %d, %d", rSmoothUDM.nr_act.bits.UDM_N2_OFST, rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_N2_OFST, rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_N2_OFST, rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_N2_OFST, rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_N2_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_NSL = %d, %d, %d, %d, %d", rSmoothUDM.nr_act.bits.UDM_NSL, rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_NSL, rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_NSL, rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_NSL, rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_NSL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_NGR = %d, %d, %d, %d, %d", rSmoothUDM.nr_act.bits.UDM_NGR, rParam.rLowerIso_LowerZoom.nr_act.bits.UDM_NGR, rParam.rLowerIso_UpperZoom.nr_act.bits.UDM_NGR, rParam.rUpperIso_LowerZoom.nr_act.bits.UDM_NGR, rParam.rUpperIso_UpperZoom.nr_act.bits.UDM_NGR);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_XTK_RAT = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_XTK_RAT, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_RAT, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_RAT, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_RAT, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_RAT);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_XTK_OFST = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_XTK_OFST, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_OFST, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_OFST, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_OFST, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_OFST);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_XTK_SL = %d, %d, %d, %d, %d", rSmoothUDM.nr_str.bits.UDM_XTK_SL, rParam.rLowerIso_LowerZoom.nr_str.bits.UDM_XTK_SL, rParam.rLowerIso_UpperZoom.nr_str.bits.UDM_XTK_SL, rParam.rUpperIso_LowerZoom.nr_str.bits.UDM_XTK_SL, rParam.rUpperIso_UpperZoom.nr_str.bits.UDM_XTK_SL);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_FL_MODE = %d, %d, %d, %d, %d", rSmoothUDM.dsb.bits.UDM_FL_MODE, rParam.rLowerIso_LowerZoom.dsb.bits.UDM_FL_MODE, rParam.rLowerIso_UpperZoom.dsb.bits.UDM_FL_MODE, rParam.rUpperIso_LowerZoom.dsb.bits.UDM_FL_MODE, rParam.rUpperIso_UpperZoom.dsb.bits.UDM_FL_MODE);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SL_RAT = %d, %d, %d, %d, %d", rSmoothUDM.dsb.bits.UDM_SL_RAT, rParam.rLowerIso_LowerZoom.dsb.bits.UDM_SL_RAT, rParam.rLowerIso_UpperZoom.dsb.bits.UDM_SL_RAT, rParam.rUpperIso_LowerZoom.dsb.bits.UDM_SL_RAT, rParam.rUpperIso_UpperZoom.dsb.bits.UDM_SL_RAT);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_SC_RAT = %d, %d, %d, %d, %d", rSmoothUDM.dsb.bits.UDM_SC_RAT, rParam.rLowerIso_LowerZoom.dsb.bits.UDM_SC_RAT, rParam.rLowerIso_UpperZoom.dsb.bits.UDM_SC_RAT, rParam.rUpperIso_LowerZoom.dsb.bits.UDM_SC_RAT, rParam.rUpperIso_UpperZoom.dsb.bits.UDM_SC_RAT);
    INTER_LOG_IF(bSmoothUDMDebug, "[S, L_L, L_U, U_L, U_U]UDM_LR_RAT = %d, %d, %d, %d, %d", rSmoothUDM.lr_rat.bits.UDM_LR_RAT, rParam.rLowerIso_LowerZoom.lr_rat.bits.UDM_LR_RAT, rParam.rLowerIso_UpperZoom.lr_rat.bits.UDM_LR_RAT, rParam.rUpperIso_LowerZoom.lr_rat.bits.UDM_LR_RAT, rParam.rUpperIso_UpperZoom.lr_rat.bits.UDM_LR_RAT);


}

MVOID ANRTuningGen(CAMERA_TUNING_FD_INFO_T const& rFdInfo,
	                    ISP_NVRAM_FD_ANR_T const& FD_ANR,
                          ANRTblTuning_T ANR_Tuning[5])
{
    for(int i = 0; i < rFdInfo.FaceNum; i++)
    {
        ANR_Tuning[i].Y_Mean = rFdInfo.YUVsts[i][0];
		ANR_Tuning[i].U_Mean = rFdInfo.YUVsts[i][1];
		ANR_Tuning[i].V_Mean = rFdInfo.YUVsts[i][2];


		switch(i)
        {
		    case 0 :
				ANR_Tuning[i].Y_Range = FD_ANR.u4Range_W1_Y;
				ANR_Tuning[i].U_Range = FD_ANR.u4Range_W1_U;
				ANR_Tuning[i].V_Range = FD_ANR.u4Range_W1_V;
				ANR_Tuning[i].Y_Gain = FD_ANR.u4Gain_W1_Y / 10;
				ANR_Tuning[i].U_Gain = FD_ANR.u4Gain_W1_U / 10;
				ANR_Tuning[i].V_Gain = FD_ANR.u4Gain_W1_V / 10;
			    break;
			case 1 :
				ANR_Tuning[i].Y_Range = FD_ANR.u4Range_W2_Y;
				ANR_Tuning[i].U_Range = FD_ANR.u4Range_W2_U;
				ANR_Tuning[i].V_Range = FD_ANR.u4Range_W2_V;
				ANR_Tuning[i].Y_Gain = FD_ANR.u4Gain_W2_Y / 10;
				ANR_Tuning[i].U_Gain = FD_ANR.u4Gain_W2_U / 10;
				ANR_Tuning[i].V_Gain = FD_ANR.u4Gain_W2_V / 10;
			    break;
			case 2 :
				ANR_Tuning[i].Y_Range = FD_ANR.u4Range_W3_Y;
				ANR_Tuning[i].U_Range = FD_ANR.u4Range_W3_U;
				ANR_Tuning[i].V_Range = FD_ANR.u4Range_W3_V;
				ANR_Tuning[i].Y_Gain = FD_ANR.u4Gain_W3_Y / 10;
				ANR_Tuning[i].U_Gain = FD_ANR.u4Gain_W3_U / 10;
				ANR_Tuning[i].V_Gain = FD_ANR.u4Gain_W3_V / 10;
			    break;
			case 3 :
				ANR_Tuning[i].Y_Range = FD_ANR.u4Range_W4_Y;
				ANR_Tuning[i].U_Range = FD_ANR.u4Range_W4_U;
				ANR_Tuning[i].V_Range = FD_ANR.u4Range_W4_V;
				ANR_Tuning[i].Y_Gain = FD_ANR.u4Gain_W4_Y / 10;
				ANR_Tuning[i].U_Gain = FD_ANR.u4Gain_W4_U / 10;
				ANR_Tuning[i].V_Gain = FD_ANR.u4Gain_W4_V / 10;
			    break;
			case 4 :
				ANR_Tuning[i].Y_Range = FD_ANR.u4Range_W5_Y;
				ANR_Tuning[i].U_Range = FD_ANR.u4Range_W5_U;
				ANR_Tuning[i].V_Range = FD_ANR.u4Range_W5_V;
				ANR_Tuning[i].Y_Gain = FD_ANR.u4Gain_W5_Y / 10;
				ANR_Tuning[i].U_Gain = FD_ANR.u4Gain_W5_U / 10;
				ANR_Tuning[i].V_Gain = FD_ANR.u4Gain_W5_V / 10;
			    break;
			default :
				break;
        }
    }


}

MVOID ANRTBL_YUV8x8x8(ISP_NVRAM_ANR_LUT_T Anr_Tbl,
                          ANRTbl8x8x8_T& ANR8x8x8)
{
    for(int i = 0; i < 8; i++)
	{

		for(int j = 0; j < 8; j++)
			{

				for(int k = 0; k < 4; k++)
					{
					    ANR8x8x8.Y[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_Y0;
					    ANR8x8x8.U[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_U0;
						ANR8x8x8.V[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_V0;
						ANR8x8x8.Y[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_Y1;
					    ANR8x8x8.U[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_U1;
						ANR8x8x8.V[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_V1;

					}
			}
	}
}

MVOID YUV8x8x8_ANRTBL(ANRTbl8x8x8_T ANR8x8x8,
                          ISP_NVRAM_ANR_LUT_T& Anr_Tbl)
{
    for(int i = 0; i < 8; i++)
	{

		for(int j = 0; j < 8; j++)
			{

				for(int k = 0; k < 4; k++)
					{
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_Y0 = ANR8x8x8.Y[i][j][k*2];
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_U0 = ANR8x8x8.U[i][j][k*2];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_V0 = ANR8x8x8.V[i][j][k*2];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_Y1 = ANR8x8x8.Y[i][j][k*2+1];
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_U1 = ANR8x8x8.U[i][j][k*2+1];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.ANR_TBL_V1 = ANR8x8x8.V[i][j][k*2+1];

					}
			}
	}
}


MVOID ANRTablePBC(MINT32 FaceNum, MINT32 Precision,
	                      ANRTblTuning_T ANR_Tuning[5],
                          ANRTbl8x8x8_T& ANR8x8x8)
{
    float y_range = 0;
	float u_range = 0;
	float v_range = 0;
	float y_range2 = 0;
	float u_range2 = 0;
	float v_range2 = 0;
	float y_step = 32;
	float uv_step = (Precision) ? 16 : 32;
	float uv_start = (Precision) ? 64 : 0;

	float Hue = 0;

	for (int i = 0; i < FaceNum; i++)
    {
        //apply on skin color only
        Hue =  ((MINT32)((atan2((double)(ANR_Tuning[i].V_Mean-128),(double)(ANR_Tuning[i].U_Mean-128)) * 180 / PI)+360)%360);

		if((Hue < 90) || (Hue > 160))
		{continue;}

		y_range = ANR_Tuning[i].Y_Range;
		u_range = ANR_Tuning[i].U_Range;
		v_range = ANR_Tuning[i].V_Range;

		y_range2 = y_range * y_range * 2;
		u_range2 = u_range * u_range * 2;
		v_range2 = v_range * v_range * 2;

		for (int y_idx = 0; y_idx < 8; y_idx++)
        {
            for (int u_idx = 0; u_idx < 8; u_idx++)
            {
                for (int v_idx = 0; v_idx < 8; v_idx++)
                {
                    float y = y_step / 2 + y_idx * y_step;
                    float u = uv_start + uv_step / 2 + u_idx * uv_step;
                    float v = uv_start + uv_step / 2 + v_idx * uv_step;
                    float diff_y = ANR_Tuning[i].Y_Mean- y;
                    float diff_u = ANR_Tuning[i].U_Mean- u;
                    float diff_v = ANR_Tuning[i].V_Mean- v;
                    //float diff_sum = diff_r * diff_r + diff_g * diff_g + diff_b * diff_b;
                    float weight_y = exp(-(diff_y * diff_y) / y_range2);
                    float weight_u = exp(-(diff_u * diff_u) / u_range2);
                    float weight_v = exp(-(diff_v * diff_v) / v_range2);
                    float weight = weight_y * weight_u * weight_v;

                    float ori_y_std = ANR8x8x8.Y[y_idx][u_idx][v_idx];
                    float ori_u_std = ANR8x8x8.U[y_idx][u_idx][v_idx];
                    float ori_v_std = ANR8x8x8.V[y_idx][u_idx][v_idx];

                    float new_y_std = ori_y_std * (1 - weight) + ori_y_std * ANR_Tuning[i].Y_Gain* weight + 0.5;
                    float new_u_std = ori_u_std * (1 - weight) + ori_u_std * ANR_Tuning[i].U_Gain* weight + 0.5;
                    float new_v_std = ori_v_std * (1 - weight) + ori_v_std * ANR_Tuning[i].V_Gain* weight + 0.5;

					new_y_std = Clip(new_y_std, 31, 0);
					new_u_std = Clip(new_u_std, 31, 0);
					new_v_std = Clip(new_v_std, 31, 0);

                    ANR8x8x8.Y[y_idx][u_idx][v_idx] = new_y_std;
                    ANR8x8x8.U[y_idx][u_idx][v_idx] = new_u_std;
                    ANR8x8x8.V[y_idx][u_idx][v_idx] = new_v_std;
                }
            }
		}
    }
}

MVOID InterParam_FD_ANR_TBL(double Ratio_Up, double Ratio_Lo,
	                      ISP_NVRAM_FD_ANR_T FD_Para_Up, ISP_NVRAM_FD_ANR_T FD_Para_Lo,
                          ISP_NVRAM_FD_ANR_T& FD_Para)
{


	FD_Para.u4FD_ANR_LUT_Enable = FD_Para_Up.u4FD_ANR_LUT_Enable * Ratio_Up + FD_Para_Lo.u4FD_ANR_LUT_Enable * Ratio_Lo + 0.5;
	FD_Para.u4Range_W1_Y = FD_Para_Up.u4Range_W1_Y * Ratio_Up + FD_Para_Lo.u4Range_W1_Y * Ratio_Lo + 0.5;
	FD_Para.u4Range_W1_U = FD_Para_Up.u4Range_W1_U * Ratio_Up + FD_Para_Lo.u4Range_W1_U * Ratio_Lo + 0.5;
	FD_Para.u4Range_W1_V = FD_Para_Up.u4Range_W1_V * Ratio_Up + FD_Para_Lo.u4Range_W1_V * Ratio_Lo + 0.5;
	FD_Para.u4W1_enable = FD_Para_Up.u4W1_enable * Ratio_Up + FD_Para_Lo.u4W1_enable * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W1_Y = FD_Para_Up.u4Gain_W1_Y * Ratio_Up + FD_Para_Lo.u4Gain_W1_Y * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W1_U = FD_Para_Up.u4Gain_W1_U * Ratio_Up + FD_Para_Lo.u4Gain_W1_U * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W1_V = FD_Para_Up.u4Gain_W1_V * Ratio_Up + FD_Para_Lo.u4Gain_W1_V * Ratio_Lo + 0.5;

	FD_Para.u4Range_W2_Y = FD_Para_Up.u4Range_W2_Y * Ratio_Up + FD_Para_Lo.u4Range_W2_Y * Ratio_Lo + 0.5;
	FD_Para.u4Range_W2_U = FD_Para_Up.u4Range_W2_U * Ratio_Up + FD_Para_Lo.u4Range_W2_U * Ratio_Lo + 0.5;
	FD_Para.u4Range_W2_V = FD_Para_Up.u4Range_W2_V * Ratio_Up + FD_Para_Lo.u4Range_W2_V * Ratio_Lo + 0.5;
	FD_Para.u4W2_enable = FD_Para_Up.u4W2_enable * Ratio_Up + FD_Para_Lo.u4W2_enable * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W2_Y = FD_Para_Up.u4Gain_W2_Y * Ratio_Up + FD_Para_Lo.u4Gain_W2_Y * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W2_U = FD_Para_Up.u4Gain_W2_U * Ratio_Up + FD_Para_Lo.u4Gain_W2_U * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W2_V = FD_Para_Up.u4Gain_W2_V * Ratio_Up + FD_Para_Lo.u4Gain_W2_V * Ratio_Lo + 0.5;

	FD_Para.u4Range_W3_Y = FD_Para_Up.u4Range_W3_Y * Ratio_Up + FD_Para_Lo.u4Range_W3_Y * Ratio_Lo + 0.5;
	FD_Para.u4Range_W3_U = FD_Para_Up.u4Range_W3_U * Ratio_Up + FD_Para_Lo.u4Range_W3_U * Ratio_Lo + 0.5;
	FD_Para.u4Range_W3_V = FD_Para_Up.u4Range_W3_V * Ratio_Up + FD_Para_Lo.u4Range_W3_V * Ratio_Lo + 0.5;
	FD_Para.u4W3_enable = FD_Para_Up.u4W3_enable * Ratio_Up + FD_Para_Lo.u4W3_enable * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W3_Y = FD_Para_Up.u4Gain_W3_Y * Ratio_Up + FD_Para_Lo.u4Gain_W3_Y * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W3_U = FD_Para_Up.u4Gain_W3_U * Ratio_Up + FD_Para_Lo.u4Gain_W3_U * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W3_V = FD_Para_Up.u4Gain_W3_V * Ratio_Up + FD_Para_Lo.u4Gain_W3_V * Ratio_Lo + 0.5;

	FD_Para.u4Range_W4_Y = FD_Para_Up.u4Range_W4_Y * Ratio_Up + FD_Para_Lo.u4Range_W4_Y * Ratio_Lo + 0.5;
	FD_Para.u4Range_W4_U = FD_Para_Up.u4Range_W4_U * Ratio_Up + FD_Para_Lo.u4Range_W4_U * Ratio_Lo + 0.5;
	FD_Para.u4Range_W4_V = FD_Para_Up.u4Range_W4_V * Ratio_Up + FD_Para_Lo.u4Range_W4_V * Ratio_Lo + 0.5;
	FD_Para.u4W4_enable = FD_Para_Up.u4W4_enable * Ratio_Up + FD_Para_Lo.u4W4_enable * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W4_Y = FD_Para_Up.u4Gain_W4_Y * Ratio_Up + FD_Para_Lo.u4Gain_W4_Y * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W4_U = FD_Para_Up.u4Gain_W4_U * Ratio_Up + FD_Para_Lo.u4Gain_W4_U * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W4_V = FD_Para_Up.u4Gain_W4_V * Ratio_Up + FD_Para_Lo.u4Gain_W4_V * Ratio_Lo + 0.5;

	FD_Para.u4Range_W5_Y = FD_Para_Up.u4Range_W5_Y * Ratio_Up + FD_Para_Lo.u4Range_W5_Y * Ratio_Lo + 0.5;
	FD_Para.u4Range_W5_U = FD_Para_Up.u4Range_W5_U * Ratio_Up + FD_Para_Lo.u4Range_W5_U * Ratio_Lo + 0.5;
	FD_Para.u4Range_W5_V = FD_Para_Up.u4Range_W5_V * Ratio_Up + FD_Para_Lo.u4Range_W5_V * Ratio_Lo + 0.5;
	FD_Para.u4W5_enable = FD_Para_Up.u4W5_enable * Ratio_Up + FD_Para_Lo.u4W5_enable * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W5_Y = FD_Para_Up.u4Gain_W5_Y * Ratio_Up + FD_Para_Lo.u4Gain_W5_Y * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W5_U = FD_Para_Up.u4Gain_W5_U * Ratio_Up + FD_Para_Lo.u4Gain_W5_U * Ratio_Lo + 0.5;
	FD_Para.u4Gain_W5_V = FD_Para_Up.u4Gain_W5_V * Ratio_Up + FD_Para_Lo.u4Gain_W5_V * Ratio_Lo + 0.5;

	FD_Para.u4Backup_0 = FD_Para_Up.u4Backup_0 * Ratio_Up + FD_Para_Lo.u4Backup_0 * Ratio_Lo + 0.5;
	FD_Para.u4Backup_1 = FD_Para_Up.u4Backup_1 * Ratio_Up + FD_Para_Lo.u4Backup_1 * Ratio_Lo + 0.5;
	FD_Para.u4Backup_2 = FD_Para_Up.u4Backup_2 * Ratio_Up + FD_Para_Lo.u4Backup_2 * Ratio_Lo + 0.5;






}

MVOID FD_ANR_TBL(MINT32 u4RealLV,  // Real LV
               MINT32 u4UpperLV, // Upper LV
               MINT32 u4LowerLV, // Lower LV
               ISP_NVRAM_FD_ANR_T const& rUpperFD_ANR,   // NR1 settings for upper LV
               ISP_NVRAM_FD_ANR_T const& rLowerFD_ANR,   // NR1 settings for lower LV
               CAMERA_TUNING_FD_INFO_T const& rFdInfo,
               ISP_NVRAM_ANR_LUT_T& rSmoothANR_TBL)  // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FD_ANR_TBL.enable", value, "0");
    MBOOL bFDANRDebug = atoi(value);


	MINT32 u4FaceNum = rFdInfo.FaceNum;

	MINT32 u4precision = 1;

	INTER_LOG_IF(bFDANRDebug,"[%s()] u4FaceNum: %d\n", __FUNCTION__, u4FaceNum);

	if(u4FaceNum == 0)
	{return;}

    for(int i = 0; i < u4FaceNum; i++)
	{
	INTER_LOG_IF(bFDANRDebug,"[%s()] faceIdx : %d, Ymean: %d, Umean: %d, Vmean: %d, Y5: %d, Y95: %d, Gender: %d\n", __FUNCTION__, i, rFdInfo.YUVsts[i][0], rFdInfo.YUVsts[i][1], rFdInfo.YUVsts[i][2], rFdInfo.YUVsts[i][3], rFdInfo.YUVsts[i][4], rFdInfo.fld_GenderLabel[i] );
	}

	static ISP_NVRAM_FD_ANR_T FD_Para;
	ANRTbl8x8x8_T ANR8x8x8;
	ANRTblTuning_T ANR_Tuning[5];


	////FD Para interpolation////

	double RATIO_LV_lo = 0;
	double RATIO_LV_up = 0;

	if (u4RealLV <= u4LowerLV)
    {
        RATIO_LV_lo = 1;
    }
	else if(u4RealLV >= u4UpperLV)
	{
		RATIO_LV_lo = 0;
	}
	else
	{
		RATIO_LV_lo = (double)(u4UpperLV - u4RealLV) / (double)(u4UpperLV - u4LowerLV);
	}

	RATIO_LV_up = 1.0 - RATIO_LV_lo;

	InterParam_FD_ANR_TBL(RATIO_LV_up, RATIO_LV_lo, rUpperFD_ANR, rLowerFD_ANR, FD_Para);



	INTER_LOG_IF(bFDANRDebug,"[%s()] u4RealLV: %d, u4UpperLV = %d, u4LowerLV = %d\n", __FUNCTION__, u4RealLV, u4UpperLV, u4LowerLV);
	INTER_LOG_IF(bFDANRDebug,"[%s()] RATIO_LV_up = %f, RATIO_LV_lo = %f\n", __FUNCTION__, RATIO_LV_up, RATIO_LV_lo);

	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para: u4FD_ANR_LUT_Enable: %d, u4Range_W1_Y: %d, u4Range_W1_U: %d, u4Range_W1_V: %d, u4Gain_W1_Y: %d, u4Gain_W1_U: %d, u4Gain_W1_V: %d\n",
		                        __FUNCTION__, FD_Para.u4FD_ANR_LUT_Enable,
		                                      FD_Para.u4Range_W1_Y, FD_Para.u4Range_W1_U, FD_Para.u4Range_W1_V,
		                                      FD_Para.u4Gain_W1_Y, FD_Para.u4Gain_W1_U, FD_Para.u4Gain_W1_V);

	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para:  u4Range_W2_Y: %d, u4Range_W2_U: %d, u4Range_W2_V: %d, u4Gain_W2_Y: %d, u4Gain_W2_U: %d, u4Gain_W2_V: %d\n",
		                        __FUNCTION__, FD_Para.u4Range_W2_Y, FD_Para.u4Range_W2_U, FD_Para.u4Range_W2_V,
		                                      FD_Para.u4Gain_W2_Y, FD_Para.u4Gain_W2_U, FD_Para.u4Gain_W2_V);
	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para:  u4Range_W3_Y: %d, u4Range_W3_U: %d, u4Range_W3_V: %d, u4Gain_W3_Y: %d, u4Gain_W3_U: %d, u4Gain_W3_V: %d\n",
		                        __FUNCTION__, FD_Para.u4Range_W3_Y, FD_Para.u4Range_W3_U, FD_Para.u4Range_W3_V,
		                                      FD_Para.u4Gain_W3_Y, FD_Para.u4Gain_W3_U, FD_Para.u4Gain_W3_V);
	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para:  u4Range_W4_Y: %d, u4Range_W4_U: %d, u4Range_W4_V: %d, u4Gain_W4_Y: %d, u4Gain_W4_U: %d, u4Gain_W4_V: %d\n",
		                        __FUNCTION__, FD_Para.u4Range_W4_Y, FD_Para.u4Range_W4_U, FD_Para.u4Range_W4_V,
		                                      FD_Para.u4Gain_W4_Y, FD_Para.u4Gain_W4_U, FD_Para.u4Gain_W4_V);
	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para:  u4Range_W5_Y: %d, u4Range_W5_U: %d, u4Range_W5_V: %d, u4Gain_W5_Y: %d, u4Gain_W5_U: %d, u4Gain_W5_V: %d\n",
		                        __FUNCTION__, FD_Para.u4Range_W5_Y, FD_Para.u4Range_W5_U, FD_Para.u4Range_W5_V,
		                                      FD_Para.u4Gain_W5_Y, FD_Para.u4Gain_W5_U, FD_Para.u4Gain_W5_V);

	INTER_LOG_IF(bFDANRDebug,"[%s()] FD_Para:  u4Backup_0: %d, u4Backup_1: %d, u4Backup_2: %d\n",
		                        __FUNCTION__, FD_Para.u4Backup_0, FD_Para.u4Backup_1, FD_Para.u4Backup_2);


	if(FD_Para.u4FD_ANR_LUT_Enable== 0)
	{return;}


	//Gain for diffrent Gender

	if(rFdInfo.fld_GenderLabel[0] == 1) //Male
	{
		FD_Para.u4Gain_W1_Y = FD_Para.u4Gain_W1_Y * FD_Para.u4Backup_0 / 10;
	}
	else if(rFdInfo.fld_GenderLabel[0] == 2) //Female
	{
		FD_Para.u4Gain_W1_Y = FD_Para.u4Gain_W1_Y * FD_Para.u4Backup_1 / 10;
	}

	u4FaceNum = 1;

    ANRTuningGen(rFdInfo, FD_Para, ANR_Tuning);
	ANRTBL_YUV8x8x8(rSmoothANR_TBL, ANR8x8x8);
	ANRTablePBC(u4FaceNum, u4precision, ANR_Tuning, ANR8x8x8);
	YUV8x8x8_ANRTBL(ANR8x8x8, rSmoothANR_TBL);

}


MVOID SmoothANR_TBL(MINT32 u4RealLV,  // Real LV
               MINT32 u4UpperLV, // Upper LV
               MINT32 u4LowerLV, // Lower LV
               ISP_NVRAM_FD_ANR_T const (& rUpperFD_ANR),   // NR1 settings for upper LV
               ISP_NVRAM_FD_ANR_T const (& rLowerFD_ANR),   // NR1 settings for lower LV
               CAMERA_TUNING_FD_INFO_T const& rFdInfo,
               ISP_NVRAM_ANR_LUT_T const& rUpperANR_TBL, // ANR1 TBL for upper LV
               ISP_NVRAM_ANR_LUT_T const& rLowerANR_TBL,   // ANR1 TBL for lower LV
               ISP_NVRAM_ANR_LUT_T& rSmoothANR_TBL) // Output
{



	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_anrtbl.enable", value, "0");
    MUINT32 u4SmoothANRTbldebug = atoi(value);

	INTER_LOG_IF(u4SmoothANRTbldebug,"[%s()] u4RealLV: %d, u4UpperLV = %d, u4LowerLV = %d\n", __FUNCTION__, u4RealLV, u4UpperLV, u4LowerLV);

	    // interpolation initial


    double RATIO_LV_lo = 0;
    double RATIO_LV_up = 0;

        //protection for out-of-bound

    if (u4RealLV <= u4LowerLV)
    {
        RATIO_LV_lo = 1;
    }
	else if(u4RealLV >= u4UpperLV)
	{
		RATIO_LV_lo = 0;
	}
	else
	{
		RATIO_LV_lo = (double)(u4UpperLV - u4RealLV) / (double)(u4UpperLV - u4LowerLV);
	}

	RATIO_LV_up = 1.0 - RATIO_LV_lo;


	for(int i = 0; i < ANR_HW_TBL_NUM; ++i){

		rSmoothANR_TBL.lut[i].bits.ANR_TBL_Y0 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_Y0, rUpperANR_TBL.lut[i].bits.ANR_TBL_Y0, 0);
		rSmoothANR_TBL.lut[i].bits.ANR_TBL_U0 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_U0, rUpperANR_TBL.lut[i].bits.ANR_TBL_U0, 0);
		rSmoothANR_TBL.lut[i].bits.ANR_TBL_V0 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_V0, rUpperANR_TBL.lut[i].bits.ANR_TBL_V0, 0);
		rSmoothANR_TBL.lut[i].bits.ANR_TBL_Y1 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_Y1, rUpperANR_TBL.lut[i].bits.ANR_TBL_Y1, 0);
		rSmoothANR_TBL.lut[i].bits.ANR_TBL_U1 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_U1, rUpperANR_TBL.lut[i].bits.ANR_TBL_U1, 0);
		rSmoothANR_TBL.lut[i].bits.ANR_TBL_V1 =  InterParam_1D(RATIO_LV_lo, RATIO_LV_up, rLowerANR_TBL.lut[i].bits.ANR_TBL_V1, rUpperANR_TBL.lut[i].bits.ANR_TBL_V1, 0);

		rSmoothANR_TBL.lut[i].bits.rsv_12 = 0;
		rSmoothANR_TBL.lut[i].bits.rsv_28 = 0;

	}

	FD_ANR_TBL(u4RealLV, u4UpperLV, u4LowerLV, rUpperFD_ANR, rLowerFD_ANR, rFdInfo, rSmoothANR_TBL);



}
// ===========================================================================================

MINT32 InterParam_SWNR(MINT32 ISO, MINT32 ISOpre, MINT32 ISOpos, MINT32 PARAMpre, MINT32 PARAMpos, MINT32 Method) {
    MINT32 InterPARAM = 0;

    if(ISOpre == ISOpos) {
        //    To prevent someone sets different PARAMpre and PARAMpos
        return (MINT32)((PARAMpre + PARAMpos + 1) / 2);
    }

    switch(Method) {
    case 1:
        if(abs(ISO - ISOpre) > abs(ISOpos - ISO)) {
            InterPARAM = PARAMpos;
        }
        else{
            InterPARAM = PARAMpre;
        }
        break;
    case 0:
    default:
        double RATIOpre = (double)(ISOpos - ISO) / (double)(ISOpos - ISOpre);
        double RATIOpos = 1.0 - (double)(RATIOpre);
        InterPARAM = (MINT32)(RATIOpre * PARAMpre + RATIOpos * PARAMpos + 0.5);
        break;
    }

    return InterPARAM;
}


MVOID SmoothNR2(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                NR_PARAM const& rUpper, // settings for upper ISO
                NR_PARAM const& rLower,   // settings for lower ISO
                NR_PARAM& rSmooth // Output
                )
{

#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    //
    Inter(NR_K      , 0);
    Inter(NR_S      , 0);
    Inter(NR_SD     , 0);
    Inter(NR_BLD_W  , 0);
    Inter(NR_BLD_TH , 0);
    Inter(NR_SMTH   , 0);
    Inter(NR_NTRL_TH_1_Y   , 0);
    Inter(NR_NTRL_TH_2_Y   , 0);
    Inter(NR_NTRL_TH_1_UV   , 0);
    Inter(NR_NTRL_TH_2_UV   , 0);
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(NR_K);
        DumpParam(NR_S);
        DumpParam(NR_SD);
        DumpParam(NR_BLD_W);
        DumpParam(NR_BLD_TH);
        DumpParam(NR_SMTH);
        DumpParam(NR_NTRL_TH_1_Y);
        DumpParam(NR_NTRL_TH_2_Y);
        DumpParam(NR_NTRL_TH_1_UV);
        DumpParam(NR_NTRL_TH_2_UV);
#undef DumpParam
    }

}

MVOID SmoothSWHFG(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                HFG_PARAM const& rUpper, // settings for upper ISO
                HFG_PARAM const& rLower,   // settings for lower ISO
                HFG_PARAM& rSmooth) // Output
{
#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    MINT32 HFG_inter_method = 0;
    if (rLower.HFG_ENABLE != rUpper.HFG_ENABLE) // HFG_ENABLE
        HFG_inter_method = 1;

    Inter(HFG_ENABLE      , HFG_inter_method);
    Inter(HFG_SD0         , HFG_inter_method);
    Inter(HFG_SD1         , HFG_inter_method);
    Inter(HFG_SD2         , HFG_inter_method);
    Inter(HFG_TX_S        , HFG_inter_method);
    Inter(HFG_LCE_LINK_EN , HFG_inter_method);
    Inter(HFG_LUMA_CPX1   , HFG_inter_method);
    Inter(HFG_LUMA_CPX2   , HFG_inter_method);
    Inter(HFG_LUMA_CPX3   , HFG_inter_method);
    Inter(HFG_LUMA_CPY0   , HFG_inter_method);
    Inter(HFG_LUMA_CPY1   , HFG_inter_method);
    Inter(HFG_LUMA_CPY2   , HFG_inter_method);
    Inter(HFG_LUMA_CPY3   , HFG_inter_method);
    Inter(HFG_LUMA_SP0    , HFG_inter_method);
    Inter(HFG_LUMA_SP1    , HFG_inter_method);
    Inter(HFG_LUMA_SP2    , HFG_inter_method);
    Inter(HFG_LUMA_SP3    , HFG_inter_method);
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(HFG_ENABLE);
        DumpParam(HFG_GSD);
        DumpParam(HFG_SD0);
        DumpParam(HFG_SD1);
        DumpParam(HFG_SD2);
        DumpParam(HFG_TX_S);
        DumpParam(HFG_LCE_LINK_EN);
        DumpParam(HFG_LUMA_CPX1);
        DumpParam(HFG_LUMA_CPX2);
        DumpParam(HFG_LUMA_CPX3);
        DumpParam(HFG_LUMA_CPY0);
        DumpParam(HFG_LUMA_CPY1);
        DumpParam(HFG_LUMA_CPY2);
        DumpParam(HFG_LUMA_CPY3);
        DumpParam(HFG_LUMA_SP0);
        DumpParam(HFG_LUMA_SP1);
        DumpParam(HFG_LUMA_SP2);
        DumpParam(HFG_LUMA_SP3);
#undef DumpParam
    }
}

MVOID SmoothSWCCR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                CCR_PARAM const& rUpper, // settings for upper ISO
                CCR_PARAM const& rLower,   // settings for lower ISO
                CCR_PARAM& rSmooth) // Output
{
#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    //
    // SWCCR part
    MINT32 CCR_inter_method = 0;
    if (rLower.CCR_ENABLE != rUpper.CCR_ENABLE)
        CCR_inter_method = 1;

    Inter(CCR_ENABLE             , CCR_inter_method);
    Inter(CCR_CEN_U              , CCR_inter_method);
    Inter(CCR_CEN_V              , CCR_inter_method);
    Inter(CCR_Y_CPX1             , CCR_inter_method);
    Inter(CCR_Y_CPX2             , CCR_inter_method);
    Inter(CCR_Y_CPY1             , CCR_inter_method);
    Inter(CCR_UV_X1              , CCR_inter_method);
    Inter(CCR_UV_X2              , CCR_inter_method);
    Inter(CCR_UV_X3              , CCR_inter_method);
    Inter(CCR_UV_GAIN1           , CCR_inter_method);
    Inter(CCR_UV_GAIN2           , CCR_inter_method);
    Inter(CCR_Y_CPX3             , CCR_inter_method);
    Inter(CCR_Y_CPY0             , CCR_inter_method);
    Inter(CCR_Y_CPY2             , CCR_inter_method);
    Inter(CCR_UV_GAIN_MODE       , CCR_inter_method);
    Inter(CCR_MODE               , CCR_inter_method);
    Inter(CCR_OR_MODE            , CCR_inter_method);
    Inter(CCR_HUE_X1             , CCR_inter_method);
    Inter(CCR_HUE_X2             , CCR_inter_method);
    Inter(CCR_HUE_X3             , CCR_inter_method);
    Inter(CCR_HUE_X4             , CCR_inter_method);
    Inter(CCR_HUE_GAIN1          , CCR_inter_method);
    Inter(CCR_HUE_GAIN2          , CCR_inter_method);
    Inter(CCR_Y_SP2              , CCR_inter_method);
    Inter(CCR_UV_GAIN_SP2        , CCR_inter_method);

    //    Slope parameters update
    MINT32 CCR_Y_SP0;
    MINT32 CCR_Y_SP1;
    MINT32 CCR_UV_GAIN_SP1;
    MINT32 CCR_HUE_SP1;
    MINT32 CCR_HUE_SP2;

    //CCR_Y_SP0
    if(rSmooth.CCR_Y_CPX1 == 0)
        CCR_Y_SP0 = 0;
    else
    {
        MINT32 Y_SP0 = (MINT32)(32 * (double)(rSmooth.CCR_Y_CPY1-rSmooth.CCR_Y_CPY0)/(double)rSmooth.CCR_Y_CPX1+0.5);
        CCR_Y_SP0 = (Y_SP0>127)?127:Y_SP0;
    }

    //CCR_Y_SP1
    if(rSmooth.CCR_Y_CPX2 == 0)
        CCR_Y_SP1 = 0;
    else
    {
        MINT32 Y_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_Y_CPY2-rSmooth.CCR_Y_CPY1)/(double)(rSmooth.CCR_Y_CPX2 - rSmooth.CCR_Y_CPX1)+0.5);
        CCR_Y_SP1 = (Y_SP1>127)?127:Y_SP1;
    }

    //CCR_UV_GAIN_SP1
    if(rSmooth.CCR_UV_X2 == rSmooth.CCR_UV_X1)
        CCR_UV_GAIN_SP1 = 0;
    else
    {
        MINT32 UV_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_UV_GAIN1-rSmooth.CCR_UV_GAIN2)/(double)(rSmooth.CCR_UV_X2-rSmooth.CCR_UV_X1)+0.5);
        CCR_UV_GAIN_SP1 = (UV_SP1>1023)?1023:UV_SP1;
    }

    //CCR_HUE_SP1
    if(rSmooth.CCR_HUE_X1 == rSmooth.CCR_HUE_X2)
        CCR_HUE_SP1 = (rSmooth.CCR_HUE_GAIN1>rSmooth.CCR_HUE_GAIN2)?-128:127;
    else
    {
        MINT32 HUE_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_HUE_GAIN2-rSmooth.CCR_HUE_GAIN1)/(double)(rSmooth.CCR_HUE_X2-rSmooth.CCR_HUE_X1));
        CCR_HUE_SP1 = (HUE_SP1>127)?127:(HUE_SP1<-128)?-128:HUE_SP1;
    }

    //CCR_HUE_SP2
    if(rSmooth.CCR_HUE_X3 == rSmooth.CCR_HUE_X4)
        CCR_HUE_SP2 = (rSmooth.CCR_HUE_GAIN1>rSmooth.CCR_HUE_GAIN2)?127:-128;
    else
    {
        MINT32 HUE_SP2 = (MINT32)(32 * (double)(rSmooth.CCR_HUE_GAIN1-rSmooth.CCR_HUE_GAIN2)/(double)(rSmooth.CCR_HUE_X4-rSmooth.CCR_HUE_X3));
        CCR_HUE_SP2 = (HUE_SP2>127)?127:(HUE_SP2<-128)?-128:HUE_SP2;
    }

    rSmooth.CCR_Y_SP0       = CCR_Y_SP0;
    rSmooth.CCR_Y_SP1       = CCR_Y_SP1;
    rSmooth.CCR_UV_GAIN_SP1 = CCR_UV_GAIN_SP1;
    rSmooth.CCR_HUE_SP1     = CCR_HUE_SP1;
    rSmooth.CCR_HUE_SP2     = CCR_HUE_SP2;
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(CCR_ENABLE);
        DumpParam(CCR_CEN_U);
        DumpParam(CCR_CEN_V);
        DumpParam(CCR_Y_CPX1);
        DumpParam(CCR_Y_CPX2);
        DumpParam(CCR_Y_CPY1);
        DumpParam(CCR_Y_SP1);
        DumpParam(CCR_UV_X1);
        DumpParam(CCR_UV_X2);
        DumpParam(CCR_UV_X3);
        DumpParam(CCR_UV_GAIN1);
        DumpParam(CCR_UV_GAIN2);
        DumpParam(CCR_UV_GAIN_SP1);
        DumpParam(CCR_UV_GAIN_SP2);
        DumpParam(CCR_Y_CPX3);
        DumpParam(CCR_Y_CPY0);
        DumpParam(CCR_Y_CPY2);
        DumpParam(CCR_Y_SP0);
        DumpParam(CCR_Y_SP2);
        DumpParam(CCR_UV_GAIN_MODE);
        DumpParam(CCR_MODE);
        DumpParam(CCR_OR_MODE);
        DumpParam(CCR_HUE_X1);
        DumpParam(CCR_HUE_X2);
        DumpParam(CCR_HUE_X3);
        DumpParam(CCR_HUE_X4);
        DumpParam(CCR_HUE_SP1);
        DumpParam(CCR_HUE_SP2);
        DumpParam(CCR_HUE_GAIN1);
        DumpParam(CCR_HUE_GAIN2);
#undef DumpParam
    }
}


MVOID SmoothFSWNR(MUINT32 u4RealISO, // Real ISO
               MUINT32 u4UpperISO, // Upper ISO
               MUINT32 u4LowerISO, // Lower ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT const& rUpper, // settings for upper ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT const& rLower,   // settings for lower ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT& rSmooth)  // Output
{
#if MTK_CAM_NEW_NVRAM_SUPPORT
    SmoothNR2(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.NR, rLower.NR, rSmooth.NR);
    SmoothSWHFG(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.HFG, rLower.HFG, rSmooth.HFG);
    SmoothSWCCR(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.CCR, rLower.CCR, rSmooth.CCR);
#endif
}

MVOID SmoothNBC_LTM_SW(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NBC_LTM_SW_PARAM_T const& rUpperNBC_LTM_SW,   // ABF settings for upper ISO
                ISP_NBC_LTM_SW_PARAM_T const& rLowerNBC_LTM_SW,   // ABF settings for lower ISO
                ISP_NBC_LTM_SW_PARAM_T& rSmoothNBC_LTM_SW)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_nbc_ltm_sw.enable", value, "0");
    MBOOL bSmoothNBCLTMDebug = atoi(value);

    INTER_LOG_IF(bSmoothNBCLTMDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MUINT32 pre_TC_LINK_STR       = rLowerNBC_LTM_SW.TC_LINK_STR;
	MUINT32 pre_CE_LINK_STR       = rLowerNBC_LTM_SW.CE_LINK_STR;
	MUINT32 pre_GAIN_CLIP_HI       = rLowerNBC_LTM_SW.GAIN_CLIP_HI;
	MUINT32 pre_GAIN_CLIP_LO       = rLowerNBC_LTM_SW.GAIN_CLIP_LO;
	MUINT32 pre_GAMMA_SMOOTH       = rLowerNBC_LTM_SW.GAMMA_SMOOTH;
	MUINT32 pre_P50_GAIN       = rLowerNBC_LTM_SW.P50_GAIN;
	MUINT32 pre_P250_GAIN       = rLowerNBC_LTM_SW.P250_GAIN;
	MUINT32 pre_P500_GAIN       = rLowerNBC_LTM_SW.P500_GAIN;
	MUINT32 pre_P750_GAIN       = rLowerNBC_LTM_SW.P750_GAIN;
	MUINT32 pre_P950_GAIN       = rLowerNBC_LTM_SW.P950_GAIN;
	MUINT32 pre_RSV1       = rLowerNBC_LTM_SW.RSV1;
	MUINT32 pre_RSV2       = rLowerNBC_LTM_SW.RSV2;
	MUINT32 pre_RSV3       = rLowerNBC_LTM_SW.RSV3;
	MUINT32 pre_RSV4       = rLowerNBC_LTM_SW.RSV4;
	MUINT32 pre_RSV5       = rLowerNBC_LTM_SW.RSV5;
	MUINT32 pre_RSV6       = rLowerNBC_LTM_SW.RSV6;
	MUINT32 pre_RSV7       = rLowerNBC_LTM_SW.RSV7;
	MUINT32 pre_RSV8       = rLowerNBC_LTM_SW.RSV8;

	MUINT32 pos_TC_LINK_STR       = rUpperNBC_LTM_SW.TC_LINK_STR;
	MUINT32 pos_CE_LINK_STR       = rUpperNBC_LTM_SW.CE_LINK_STR;
	MUINT32 pos_GAIN_CLIP_HI       = rUpperNBC_LTM_SW.GAIN_CLIP_HI;
	MUINT32 pos_GAIN_CLIP_LO       = rUpperNBC_LTM_SW.GAIN_CLIP_LO;
	MUINT32 pos_GAMMA_SMOOTH       = rUpperNBC_LTM_SW.GAMMA_SMOOTH;
	MUINT32 pos_P50_GAIN       = rUpperNBC_LTM_SW.P50_GAIN;
	MUINT32 pos_P250_GAIN       = rUpperNBC_LTM_SW.P250_GAIN;
	MUINT32 pos_P500_GAIN       = rUpperNBC_LTM_SW.P500_GAIN;
	MUINT32 pos_P750_GAIN       = rUpperNBC_LTM_SW.P750_GAIN;
	MUINT32 pos_P950_GAIN       = rUpperNBC_LTM_SW.P950_GAIN;
	MUINT32 pos_RSV1       = rUpperNBC_LTM_SW.RSV1;
	MUINT32 pos_RSV2       = rUpperNBC_LTM_SW.RSV2;
	MUINT32 pos_RSV3       = rUpperNBC_LTM_SW.RSV3;
	MUINT32 pos_RSV4       = rUpperNBC_LTM_SW.RSV4;
	MUINT32 pos_RSV5       = rUpperNBC_LTM_SW.RSV5;
	MUINT32 pos_RSV6       = rUpperNBC_LTM_SW.RSV6;
	MUINT32 pos_RSV7       = rUpperNBC_LTM_SW.RSV7;
	MUINT32 pos_RSV8       = rUpperNBC_LTM_SW.RSV8;

	// interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MUINT32 TC_LINK_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TC_LINK_STR, pos_TC_LINK_STR, 0);
	MUINT32 CE_LINK_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CE_LINK_STR, pos_CE_LINK_STR, 0);
	MUINT32 GAIN_CLIP_HI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAIN_CLIP_HI, pos_GAIN_CLIP_HI, 0);
	MUINT32 GAIN_CLIP_LO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAIN_CLIP_LO, pos_GAIN_CLIP_LO, 0);
	MUINT32 GAMMA_SMOOTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAMMA_SMOOTH, pos_GAMMA_SMOOTH, 0);
	MUINT32 P50_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P50_GAIN, pos_P50_GAIN, 0);
	MUINT32 P250_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P250_GAIN, pos_P250_GAIN, 0);
	MUINT32 P500_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P500_GAIN, pos_P500_GAIN, 0);
	MUINT32 P750_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P750_GAIN, pos_P750_GAIN, 0);
	MUINT32 P950_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P950_GAIN, pos_P950_GAIN, 0);
	MUINT32 RSV1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV1, pos_RSV1, 0);
	MUINT32 RSV2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV2, pos_RSV2, 0);
	MUINT32 RSV3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV3, pos_RSV3, 0);
	MUINT32 RSV4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV4, pos_RSV4, 0);
	MUINT32 RSV5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV5, pos_RSV5, 0);
	MUINT32 RSV6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV6, pos_RSV6, 0);
	MUINT32 RSV7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV7, pos_RSV7, 0);
	MUINT32 RSV8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_RSV8, pos_RSV8, 0);

	// interpolation result assignment
    rSmoothNBC_LTM_SW.TC_LINK_STR       = TC_LINK_STR;
	rSmoothNBC_LTM_SW.CE_LINK_STR       = CE_LINK_STR;
	rSmoothNBC_LTM_SW.GAIN_CLIP_HI       = GAIN_CLIP_HI;
	rSmoothNBC_LTM_SW.GAIN_CLIP_LO       = GAIN_CLIP_LO;
	rSmoothNBC_LTM_SW.GAMMA_SMOOTH       = GAMMA_SMOOTH;
	rSmoothNBC_LTM_SW.P50_GAIN       = P50_GAIN;
	rSmoothNBC_LTM_SW.P250_GAIN       = P250_GAIN;
	rSmoothNBC_LTM_SW.P500_GAIN       = P500_GAIN;
	rSmoothNBC_LTM_SW.P750_GAIN       = P750_GAIN;
	rSmoothNBC_LTM_SW.P950_GAIN       = P950_GAIN;
	rSmoothNBC_LTM_SW.RSV1       = RSV1;
	rSmoothNBC_LTM_SW.RSV2       = RSV2;
	rSmoothNBC_LTM_SW.RSV3       = RSV3;
	rSmoothNBC_LTM_SW.RSV4       = RSV4;
	rSmoothNBC_LTM_SW.RSV5       = RSV5;
	rSmoothNBC_LTM_SW.RSV6       = RSV6;
	rSmoothNBC_LTM_SW.RSV7       = RSV7;
	rSmoothNBC_LTM_SW.RSV8       = RSV8;

	// logging
    INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]TC_LINK_STR       = %d, %d, %d", rSmoothNBC_LTM_SW.TC_LINK_STR, rLowerNBC_LTM_SW.TC_LINK_STR, rUpperNBC_LTM_SW.TC_LINK_STR);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]CE_LINK_STR       = %d, %d, %d", rSmoothNBC_LTM_SW.CE_LINK_STR, rLowerNBC_LTM_SW.CE_LINK_STR, rUpperNBC_LTM_SW.CE_LINK_STR);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]GAIN_CLIP_HI       = %d, %d, %d", rSmoothNBC_LTM_SW.GAIN_CLIP_HI, rLowerNBC_LTM_SW.GAIN_CLIP_HI, rUpperNBC_LTM_SW.GAIN_CLIP_HI);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]GAIN_CLIP_LO       = %d, %d, %d", rSmoothNBC_LTM_SW.GAIN_CLIP_LO, rLowerNBC_LTM_SW.GAIN_CLIP_LO, rUpperNBC_LTM_SW.GAIN_CLIP_LO);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]GAMMA_SMOOTH       = %d, %d, %d", rSmoothNBC_LTM_SW.GAMMA_SMOOTH, rLowerNBC_LTM_SW.GAMMA_SMOOTH, rUpperNBC_LTM_SW.GAMMA_SMOOTH);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]P50_GAIN       = %d, %d, %d", rSmoothNBC_LTM_SW.P50_GAIN, rLowerNBC_LTM_SW.P50_GAIN, rUpperNBC_LTM_SW.P50_GAIN);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]P250_GAIN       = %d, %d, %d", rSmoothNBC_LTM_SW.P250_GAIN, rLowerNBC_LTM_SW.P250_GAIN, rUpperNBC_LTM_SW.P250_GAIN);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]P500_GAIN       = %d, %d, %d", rSmoothNBC_LTM_SW.P500_GAIN, rLowerNBC_LTM_SW.P500_GAIN, rUpperNBC_LTM_SW.P500_GAIN);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]P750_GAIN       = %d, %d, %d", rSmoothNBC_LTM_SW.P750_GAIN, rLowerNBC_LTM_SW.P750_GAIN, rUpperNBC_LTM_SW.P750_GAIN);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]P950_GAIN       = %d, %d, %d", rSmoothNBC_LTM_SW.P950_GAIN, rLowerNBC_LTM_SW.P950_GAIN, rUpperNBC_LTM_SW.P950_GAIN);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV1       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV1, rLowerNBC_LTM_SW.RSV1, rUpperNBC_LTM_SW.RSV1);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV2       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV2, rLowerNBC_LTM_SW.RSV2, rUpperNBC_LTM_SW.RSV2);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV3       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV3, rLowerNBC_LTM_SW.RSV3, rUpperNBC_LTM_SW.RSV3);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV4       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV4, rLowerNBC_LTM_SW.RSV4, rUpperNBC_LTM_SW.RSV4);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV5       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV5, rLowerNBC_LTM_SW.RSV5, rUpperNBC_LTM_SW.RSV5);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV6       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV6, rLowerNBC_LTM_SW.RSV6, rUpperNBC_LTM_SW.RSV6);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV7       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV7, rLowerNBC_LTM_SW.RSV7, rUpperNBC_LTM_SW.RSV7);
	INTER_LOG_IF(bSmoothNBCLTMDebug, "[L,S,U]RSV8       = %d, %d, %d", rSmoothNBC_LTM_SW.RSV8, rLowerNBC_LTM_SW.RSV8, rUpperNBC_LTM_SW.RSV8);

}

MVOID GenGammaCurve(MINT32 gamma_enc[GGM_TABLE_SIZE], MINT32 gamma_full[4096], MINT32 GGM_END_VAR)
{
	//  DECODE zone encoded gamma table here.
	MINT32 p = 0;

	for(int j = 0; j < 4096; j++) {                  // Decode 4096 point
		//  Start 1-st zone.  1-st zone = 512 point
		if(j < 512) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[j >> 3] & 0x03ff;
			MINT32 wk3 = gamma_enc[(j >> 3) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * (j % 8)) << 1);
		}
		//  Start 2-nd zone
		else if(j < 1024) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[64 + ((j - 512) >> 4)] & 0x03ff;
			MINT32 wk3 = gamma_enc[64 + ((j - 512) >> 4) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + (wk2 * ((j - 512) % 16));
		}
		//  Start 3-rd zone
		else if(j < 2048) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[96 + ((j - 1024) >> 5)] & 0x03ff;
			MINT32 wk3 = gamma_enc[96 + ((j - 1024) >> 5) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 1024) % 32) + 1) >> 1);
		}
		//  Start 4-th zone
		else if(j < 4064) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[128 + ((j - 2048) >> 5)] & 0x03ff;
			MINT32 wk3 = gamma_enc[128 + ((j - 2048) >> 5) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 2048) % 32) + 1) >> 1);
		}
		else if(j < 4096) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[128 + ((j - 2048) >> 5)] & 0x03ff;
			MINT32 wk3 = GGM_END_VAR;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 2048) % 32) + 1) >> 1);
		}
		gamma_full[j] = ((gamma_full[j] + 8) >> 4);
	}

    /*
	if (debug_en)
    {
		//  Finally check correctness of a decoded table entry.
		//  Check all the entry is within 10bit value.
		for(int j = 0; j < 4096; j++){
			if((gamma_full[j] > (1023<<4)) || (gamma_full[j] < 0))
				printf("Illegal Gamma Table Data.(Position = %d , Value = %d)\n", j, gamma_full[j]);
		}
    }
    */
}

MVOID SmoothGammaCurve(MINT32 gamma_full_src[4096], MINT32 gamma_full_dst[4096], MINT32 smooth_size)
{
	MINT32 moving_size = 2 * smooth_size;

	MINT32 gamma_full_acc[4096] = { 0 };
	MINT32 sum = 0;
	for (int i = 0; i < 4096; i++)
	{
		sum += gamma_full_src[i];
		gamma_full_acc[i] = sum;
	}

	memcpy(gamma_full_dst, gamma_full_src, 4096 * sizeof(MINT32));
	int i_start = smooth_size;
	int i_end = 4096 - smooth_size;

	if (16 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 16) >> 5;
		}
	}
	else if (32 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 32) >> 6;
		}
	}
	else if (64 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 64) >> 7;
		}
	}
	else
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];
			MINT32 count = max_idx - min_idx;

			gamma_full_dst[i] = (2 * sum + count) / (2 * count);
		}
	}


}

MVOID ApplyGCE(MINT32 gamma_full_src[4096], MINT32 gamma_full_dst[4096], MINT32 GCE_Curve_P[8], MINT32 GCE_Curve_O[8])
{

	MINT32 GCE_Ratio[7] ={0};
	for (int i = 0; i < 7; i++)
	{
	    GCE_Curve_P[i + 1]  = MAX(GCE_Curve_P[i + 1], GCE_Curve_P[i] + 1);
		GCE_Curve_O[i + 1]  = MAX(GCE_Curve_O[i + 1], GCE_Curve_O[i] + 1);

		GCE_Ratio[i] = (2 * 1024 * (GCE_Curve_O[i + 1] - GCE_Curve_O[i]) / (GCE_Curve_P[i + 1] - GCE_Curve_P[i]) + 1) >> 1;
	}

	for (int i = 0; i < 4096; i++)
	{
		MINT32 v_in = i;
		MINT32 log_v = LOG10_TBL[v_in];
		MINT32 log_v2 = 0;

		log_v = MAX(log_v, GCE_Curve_P[0]);

		if      (log_v <= GCE_Curve_P[1]) log_v2 = (((log_v - GCE_Curve_P[0]) * GCE_Ratio[0] + 512) >> 10) + GCE_Curve_O[0];
		else if (log_v <= GCE_Curve_P[2]) log_v2 = (((log_v - GCE_Curve_P[1]) * GCE_Ratio[1] + 512) >> 10) + GCE_Curve_O[1];
		else if (log_v <= GCE_Curve_P[3]) log_v2 = (((log_v - GCE_Curve_P[2]) * GCE_Ratio[2] + 512) >> 10) + GCE_Curve_O[2];
		else if (log_v <= GCE_Curve_P[4]) log_v2 = (((log_v - GCE_Curve_P[3]) * GCE_Ratio[3] + 512) >> 10) + GCE_Curve_O[3];
		else if (log_v <= GCE_Curve_P[5]) log_v2 = (((log_v - GCE_Curve_P[4]) * GCE_Ratio[4] + 512) >> 10) + GCE_Curve_O[4];
		else if (log_v <= GCE_Curve_P[6]) log_v2 = (((log_v - GCE_Curve_P[5]) * GCE_Ratio[5] + 512) >> 10) + GCE_Curve_O[5];
		else                              log_v2 = (((log_v - GCE_Curve_P[6]) * GCE_Ratio[6] + 512) >> 10) + GCE_Curve_O[6];

        log_v2 = CLIP(log_v2, 0, 3699);
		MINT32 v_out = (log_v == log_v2) ? v_in : EXP10_TBL[log_v2];

		gamma_full_dst[i] = gamma_full_src[v_out];
	}
}

MVOID Calculate_NBC_LTM( MBOOL GCE_EN, MBOOL LCE_EN,
                      ISP_NVRAM_GGM_LUT_T const& GGM,
                      MUINT32 GGM_END_VAR,
                      ISP_NVRAM_LCE_T const& LCE_Param,
                      ISP_NVRAM_ANR_LUT_T& ANR_TBL,
                      ISP_NBC_LTM_SW_PARAM_T const & SW_Param,
                      MUINT16& rVer,
                      ISP_NVRAM_ANR_LTM_T& rOutANR_LTM)
{
      // version
	  rVer = g_FW_NBC_Ver;

    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.fw_nbc.enable", value, "0");
    MBOOL bFWNBCDebug = atoi(value);

    INTER_LOG_IF(bFWNBCDebug,"[Calculate_NBC_LTM start\n");
    INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_EN: %d, LCE_EN = %d, GGM_END_VAR = %d\n", __FUNCTION__, GCE_EN, LCE_EN, GGM_END_VAR);


	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S0	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S1	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S2	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S3	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S4	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S5	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S6	   = 0;

	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P0_S4		   = 0;
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P1_S4		   = 88;
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P50_S4 	   = 123;
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P250_S4	   = 155;
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P500_S4	   = 196;
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P750_S4	   = 208;
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P950_S4	   = 217;
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P999_S4	   = 230;

	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O0_S4		   = 0;
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O1_S4		   = 88;
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O50_S4 	   = 123;
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O250_S4	   = 155;
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O500_S4	   = 196;
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O750_S4	   = 208;
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O950_S4	   = 217;
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O999_S4	   = 230;

	  rOutANR_LTM.ltm_luts1.bits.NBC_ANR_LTM_SP0		   = 256;
	  rOutANR_LTM.ltm_luts1.bits.NBC_ANR_LTM_SP1		   = 256;
	  rOutANR_LTM.ltm_luts2.bits.NBC_ANR_LTM_SP2		   = 256;
	  rOutANR_LTM.ltm_luts2.bits.NBC_ANR_LTM_SP3		   = 256;
	  rOutANR_LTM.ltm_luts3.bits.NBC_ANR_LTM_SP4		   = 256;
	  rOutANR_LTM.ltm_luts3.bits.NBC_ANR_LTM_SP5		   = 256;
	  rOutANR_LTM.ltm_luts4.bits.NBC_ANR_LTM_SP6		   = 256;

	  if (!LCE_EN)
	  {
		   return;
	  }

	MINT32 Gamma_R[GGM_TABLE_SIZE] ={0};
	MINT32 Gamma_G[GGM_TABLE_SIZE] ={0};
	MINT32 Gamma_B[GGM_TABLE_SIZE] ={0};
	MINT32 LCE_Curve_P[8] ={0};
	MINT32 LCE_Curve_O[8] ={0};
	MINT32 GCE_Curve_P[8] ={0};
	MINT32 GCE_Curve_O[8] ={0};
	MINT32 NBC_Curve_P[8] ={0};
	MINT32 NBC_Curve_O[8] ={0};
	MINT32 NBC_Curve_SP[7] ={0};

	   //Parsing Gamma
	   for (int i = 0; i < GGM_TABLE_SIZE; i++)
	   {
		Gamma_R[i] = (MINT32)GGM.lut[i].GGM_R;
		Gamma_G[i] = (MINT32)GGM.lut[i].GGM_G;
		Gamma_B[i] = (MINT32)GGM.lut[i].GGM_B;
	   }

	   //Parsing GCE & LCE curve
	LCE_Curve_P[0] = (MINT32)LCE_Param.tm_para7.bits.LCE_TC_P0;
	LCE_Curve_P[1] = (MINT32)LCE_Param.tm_para1.bits.LCE_TC_P1;
	LCE_Curve_P[2] = (MINT32)LCE_Param.tm_para2.bits.LCE_TC_P50;
	LCE_Curve_P[3] = (MINT32)LCE_Param.tm_para7.bits.LCE_TC_P250;
	LCE_Curve_P[4] = (MINT32)LCE_Param.tm_para2.bits.LCE_TC_P500;
	LCE_Curve_P[5] = (MINT32)LCE_Param.tm_para9.bits.LCE_TC_P750;
	LCE_Curve_P[6] = (MINT32)LCE_Param.tm_para3.bits.LCE_TC_P950;
	LCE_Curve_P[7] = (MINT32)LCE_Param.tm_para3.bits.LCE_TC_P999;

	LCE_Curve_O[0] = (MINT32)LCE_Param.tm_para8.bits.LCE_TC_O0;
	LCE_Curve_O[1] = (MINT32)LCE_Param.tm_para4.bits.LCE_TC_O1;
	LCE_Curve_O[2] = (MINT32)LCE_Param.tm_para4.bits.LCE_TC_O50;
	LCE_Curve_O[3] = (MINT32)LCE_Param.tm_para8.bits.LCE_TC_O250;
	LCE_Curve_O[4] = (MINT32)LCE_Param.tm_para5.bits.LCE_TC_O500;
	LCE_Curve_O[5] = (MINT32)LCE_Param.tm_para9.bits.LCE_TC_O750;
	LCE_Curve_O[6] = (MINT32)LCE_Param.tm_para5.bits.LCE_TC_O950;
	LCE_Curve_O[7] = (MINT32)LCE_Param.tm_para6.bits.LCE_TC_O999;

	GCE_Curve_P[0] = (MINT32)LCE_Param.hlr_para5.bits.LCE_HLR_TC_P0;
	GCE_Curve_P[1] = (MINT32)LCE_Param.hlr_para0.bits.LCE_HLR_TC_P1;
	GCE_Curve_P[2] = (MINT32)LCE_Param.hlr_para0.bits.LCE_HLR_TC_P50;
	GCE_Curve_P[3] = (MINT32)LCE_Param.hlr_para5.bits.LCE_HLR_TC_P250;
	GCE_Curve_P[4] = (MINT32)LCE_Param.hlr_para1.bits.LCE_HLR_TC_P500;
	GCE_Curve_P[5] = (MINT32)LCE_Param.hlr_para7.bits.LCE_HLR_TC_P750;
	GCE_Curve_P[6] = (MINT32)LCE_Param.hlr_para1.bits.LCE_HLR_TC_P950;
	GCE_Curve_P[7] = (MINT32)LCE_Param.hlr_para2.bits.LCE_HLR_TC_P999;

	GCE_Curve_O[0] = (MINT32)LCE_Param.hlr_para6.bits.LCE_HLR_TC_O0;
	GCE_Curve_O[1] = (MINT32)LCE_Param.hlr_para2.bits.LCE_HLR_TC_O1;
	GCE_Curve_O[2] = (MINT32)LCE_Param.hlr_para3.bits.LCE_HLR_TC_O50;
	GCE_Curve_O[3] = (MINT32)LCE_Param.hlr_para6.bits.LCE_HLR_TC_O250;
	GCE_Curve_O[4] = (MINT32)LCE_Param.hlr_para3.bits.LCE_HLR_TC_O500;
	GCE_Curve_O[5] = (MINT32)LCE_Param.hlr_para7.bits.LCE_HLR_TC_O750;
	GCE_Curve_O[6] = (MINT32)LCE_Param.hlr_para4.bits.LCE_HLR_TC_O950;
	GCE_Curve_O[7] = (MINT32)LCE_Param.hlr_para4.bits.LCE_HLR_TC_O999;

	MINT32 LCE_CEN_MAX_SLOPE = (MINT32)LCE_Param.tm_para1.bits.LCE_CEN_MAX_SLP;

	MINT32 TC_LINK_STR  = (MINT32)SW_Param.TC_LINK_STR;
	MINT32 CE_LINK_STR  = (MINT32)SW_Param.CE_LINK_STR;
	MINT32 GAIN_CLIP_HI = (MINT32)SW_Param.GAIN_CLIP_HI;
	MINT32 GAIN_CLIP_LO = (MINT32)SW_Param.GAIN_CLIP_LO;
	MINT32 GAMMA_SMOOTH = (MINT32)SW_Param.GAMMA_SMOOTH;
	MINT32 P50_GAIN     = (MINT32)SW_Param.P50_GAIN;
	MINT32 P250_GAIN    = (MINT32)SW_Param.P250_GAIN;
	MINT32 P500_GAIN    = (MINT32)SW_Param.P500_GAIN;
	MINT32 P750_GAIN    = (MINT32)SW_Param.P750_GAIN;
	MINT32 P950_GAIN    = (MINT32)SW_Param.P950_GAIN;
	MINT32 P1_GAIN      = (MINT32)SW_Param.RSV1;         // use RSV1 for P1_Gain
	MINT32 DCE_LINK_STR = (MINT32)SW_Param.RSV2;         // use RSV2 for DCE_LINK_STR
	MINT32 DCE_GAIN_HI  = (MINT32)(SW_Param.RSV3 << 4);         // use RSV3 for DCE_GAIN_HI
	MINT32 DCE_GAIN_LO  = (MINT32)(SW_Param.RSV4 << 4);         // use RSV4 for DCE_GAIN_LO
	MINT32 TC_LINK_STR_LUMA = (MINT32)SW_Param.RSV5;         // use RSV5 for TC_LINK_STR_LUMA
	MINT32 RSV6         = (MINT32)SW_Param.RSV6;
	MINT32 RSV7         = (MINT32)SW_Param.RSV7;
	MINT32 RSV8         = (MINT32)SW_Param.RSV8;

    for (int i = 0; i < 8; i++)
    {
	    INTER_LOG_IF(bFWNBCDebug,"[%s()] LCE_Curve_P[%d]: %d\n", __FUNCTION__, i, LCE_Curve_P[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] LCE_Curve_O[%d]: %d\n", __FUNCTION__, i, LCE_Curve_O[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_Curve_P[%d]: %d\n", __FUNCTION__, i, GCE_Curve_P[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_Curve_O[%d]: %d\n", __FUNCTION__, i, GCE_Curve_O[i]);
    }

	MBOOL fgLCE_Normal = 1;
	MBOOL fgGCE_Normal = 1;

	//Check LCE & GCE
	   for (int i = 0; i < 7; i++)
	   {
		   if(LCE_Curve_P[i+1] < LCE_Curve_P[i])
		   {
		       fgLCE_Normal = 0;
		   }

		   if(LCE_Curve_O[i+1] < LCE_Curve_O[i])
		   {
		       fgLCE_Normal = 0;
		   }

		   if(GCE_Curve_P[i+1] < GCE_Curve_P[i])
		   {
		       fgGCE_Normal = 0;
		   }

		   if(GCE_Curve_O[i+1] < GCE_Curve_O[i])
		   {
		       fgGCE_Normal = 0;
		   }
	   }

	   if(fgLCE_Normal == 0)
	{
		return;
	}

	   if((fgGCE_Normal == 0) && GCE_EN)
	{
		return;
	}

	MINT32 Gamma_G_Full_tmp[4096] ={0};
	MINT32 Gamma_G_Full[4096] ={0};
	MINT32 Gamma_G_Full_GCE[4096] ={0};
	   GenGammaCurve(Gamma_G, Gamma_G_Full_tmp, GGM_END_VAR);

	SmoothGammaCurve(Gamma_G_Full_tmp, Gamma_G_Full, GAMMA_SMOOTH);

	   if (GCE_EN)
	   {
		   ApplyGCE(Gamma_G_Full, Gamma_G_Full_GCE, GCE_Curve_P, GCE_Curve_O);
	   }
	   else
	   {
		memcpy(Gamma_G_Full_GCE, Gamma_G_Full, sizeof(MINT32) * 4096);
	   }

	const MINT32 range = 32;

	GAIN_CLIP_HI = CLIP(GAIN_CLIP_HI, 0, 4095);
	GAIN_CLIP_LO = CLIP(GAIN_CLIP_LO, 0, 4095);

	const MINT32 GAIN_CLIP_HI_log = LOG10_TBL[GAIN_CLIP_HI] - LOG10_TBL[16];
	const MINT32 GAIN_CLIP_LO_log = LOG10_TBL[GAIN_CLIP_LO] - LOG10_TBL[16];

	   const float CONT_GAIN_LF = 0.4f; // Model that LCE only enhance noise in 3x5 to 50x50 band

	   MINT32 linear_P[8] = {0};
	   MINT32 linear_O[8] = {0};

	const MINT32 INT_PRC = 256;

	CE_LINK_STR = CLIP(CE_LINK_STR, 0, 32);

	   const float contrast_gain = 1.f + CONT_GAIN_LF * CE_LINK_STR * (LCE_CEN_MAX_SLOPE - 64.f) / 64.f / 16.f;

	   for (int i = 0; i < 8; i++)
	   {
		   MINT32 lce_p = MIN(LCE_Curve_P[i], 3699);
		   MINT32 lce_o = MIN(LCE_Curve_O[i], 3699);

		   linear_P[i] = EXP10_TBL[lce_p];
		   linear_O[i] = EXP10_TBL[lce_o];

		   float lce_Gain = (linear_P[i] > 0) ? (float)linear_O[i] / linear_P[i] : 1.f;

		   MINT32 range_x = range;

		   MINT32 i1 = linear_P[i] + 1;
		   float range_y0 = -((i1 * (powf((float)MAX(i1 - range, 0) / i1, contrast_gain))) - i1);
		   float range_y1 = (i1 * (powf((float)MIN(i1 + range, 4095) / i1, contrast_gain))) - i1;
		   range_y0 *= lce_Gain;
		   range_y1 *= lce_Gain;

		MINT32 range_y0i = (MINT32)(range_y0 + 0.5f);
		MINT32 range_y1i = (MINT32)(range_y1 + 0.5f);

		   MINT32 x0 = MAX(linear_P[i] - range_x, 0);
		   MINT32 x1 = MIN(linear_P[i] + range_x, 4095);
		   MINT32 y0 = MAX(linear_O[i] - range_y0i, 0);
		   MINT32 y1 = MIN(linear_O[i] + range_y1i, 4095);

		   MINT32 ggm_x0 = Gamma_G_Full[x0];
		   MINT32 ggm_x1 = Gamma_G_Full[x1];
		   MINT32 ggm_y0 = Gamma_G_Full[y0];
		   MINT32 ggm_y1 = Gamma_G_Full[y1];

		   MINT32 dx = ggm_x1 - ggm_x0;
		   MINT32 dy = ggm_y1 - ggm_y0;

		   MINT32 log_noise_gain = 0;
		   if (dx > 0 && dy > 0)
		   {
			   dx = MIN(dx, 4095);
			   dy = MIN(dy, 4095);
			   log_noise_gain = LOG10_TBL[dy - 1] - LOG10_TBL[dx - 1];
		   }

		   INTER_LOG_IF(bFWNBCDebug,"[%s()] Linear: (%d, %d), (%d, %d)\n", __FUNCTION__, x0, x1, y0, y1);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] GGM: (%d, %d), (%d, %d)\n", __FUNCTION__, ggm_x0, ggm_x1, ggm_y0, ggm_y1);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] log_noise_gain %d\n", __FUNCTION__, log_noise_gain);

		log_noise_gain = log_noise_gain * TC_LINK_STR / 16;

		   INTER_LOG_IF(bFWNBCDebug,"[%s()] log_noise_gain_before_clip: %d\n", __FUNCTION__, log_noise_gain);
		log_noise_gain = CLIP(log_noise_gain, GAIN_CLIP_LO_log, GAIN_CLIP_HI_log);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GAIN_CLIP_LO_log: %d\n", __FUNCTION__, GAIN_CLIP_LO_log);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GAIN_CLIP_HI_log: %d\n", __FUNCTION__, GAIN_CLIP_HI_log);

		   NBC_Curve_P[i] = LCE_Curve_P[i];
		NBC_Curve_O[i] = (MINT32)(log_noise_gain + LCE_Curve_P[i] + 0.5);
		NBC_Curve_O[i] = NBC_Curve_O[i] + (LCE_Curve_O[i] - LCE_Curve_P[i]) * TC_LINK_STR_LUMA / 16;
	   }

	MINT32 p1_gain = MIN(P1_GAIN, 255);
	MINT32 p50_gain = MIN(P50_GAIN, 255);
	MINT32 p250_gain = MIN(P250_GAIN, 255);
	MINT32 p500_gain = MIN(P500_GAIN, 255);
	MINT32 p750_gain = MIN(P750_GAIN, 255);
	MINT32 p950_gain = MIN(P950_GAIN, 255);

	   NBC_Curve_O[1] = NBC_Curve_P[1] + (NBC_Curve_O[1] - NBC_Curve_P[1]) * p1_gain   / 16;
	   NBC_Curve_O[2] = NBC_Curve_P[2] + (NBC_Curve_O[2] - NBC_Curve_P[2]) * p50_gain  / 16;
	   NBC_Curve_O[3] = NBC_Curve_P[3] + (NBC_Curve_O[3] - NBC_Curve_P[3]) * p250_gain / 16;
	   NBC_Curve_O[4] = NBC_Curve_P[4] + (NBC_Curve_O[4] - NBC_Curve_P[4]) * p500_gain / 16;
	   NBC_Curve_O[5] = NBC_Curve_P[5] + (NBC_Curve_O[5] - NBC_Curve_P[5]) * p750_gain / 16;
	   NBC_Curve_O[6] = NBC_Curve_P[6] + (NBC_Curve_O[6] - NBC_Curve_P[6]) * p950_gain / 16;
	   
       ////O0 should <= O1 & O7 should >= O6
       NBC_Curve_O[0] = MIN(NBC_Curve_O[0], NBC_Curve_O[1]);
	   NBC_Curve_O[7] = MAX(NBC_Curve_O[6], NBC_Curve_O[7]);


	   //////////////////////////////////////////////
	   // Convert curve from 12 to 8
	   for (int i = 0; i < 8; i++)
	   {
		   NBC_Curve_P[i] = (NBC_Curve_P[i] + 8) >> 4;
		   NBC_Curve_O[i] = (NBC_Curve_O[i] + 8) >> 4;

		   NBC_Curve_P[i] = CLIP(NBC_Curve_P[i], 0, 255);
		   NBC_Curve_O[i] = CLIP(NBC_Curve_O[i], 0, 255);
	   }


	   //////////////////////////////////////////////
	   // Calculate slope
	   for (int i = 0; i < 7; i++)
	   {
		   if (NBC_Curve_P[i+1] > NBC_Curve_P[i])
		   {
			MINT32 slope = (MINT32)((double)(((MINT32)NBC_Curve_O[i+1] - (MINT32)NBC_Curve_O[i]) * 256) / (NBC_Curve_P[i+1] - NBC_Curve_P[i]) + 0.5);

			   NBC_Curve_SP[i] = CLIP(slope, -4096, 4095);
		   }
		   else
		   {
			   NBC_Curve_SP[i] = 0;
		   }
	   }


	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S0	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S1	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S2	   = 0;
	  rOutANR_LTM.ltm_gain1.bits.NBC_ANR_LTM_GAIN_S3	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S4	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S5	   = 0;
	  rOutANR_LTM.ltm_gain2.bits.NBC_ANR_LTM_GAIN_S6	   = 0;

	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P0_S4		   = NBC_Curve_P[0];
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P1_S4		   = NBC_Curve_P[1];
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P50_S4 	   = NBC_Curve_P[2];
	  rOutANR_LTM.ltm_lutp1.bits.NBC_ANR_LTM_P250_S4	   = NBC_Curve_P[3];
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P500_S4	   = NBC_Curve_P[4];
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P750_S4	   = NBC_Curve_P[5];
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P950_S4	   = NBC_Curve_P[6];
	  rOutANR_LTM.ltm_lutp2.bits.NBC_ANR_LTM_P999_S4	   = NBC_Curve_P[7];

	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O0_S4		   = NBC_Curve_O[0];
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O1_S4		   = NBC_Curve_O[1];
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O50_S4 	   = NBC_Curve_O[2];
	  rOutANR_LTM.ltm_luto1.bits.NBC_ANR_LTM_O250_S4	   = NBC_Curve_O[3];
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O500_S4	   = NBC_Curve_O[4];
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O750_S4	   = NBC_Curve_O[5];
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O950_S4	   = NBC_Curve_O[6];
	  rOutANR_LTM.ltm_luto2.bits.NBC_ANR_LTM_O999_S4	   = NBC_Curve_O[7];

	  rOutANR_LTM.ltm_luts1.bits.NBC_ANR_LTM_SP0		   = NBC_Curve_SP[0];
	  rOutANR_LTM.ltm_luts1.bits.NBC_ANR_LTM_SP1		   = NBC_Curve_SP[1];
	  rOutANR_LTM.ltm_luts2.bits.NBC_ANR_LTM_SP2		   = NBC_Curve_SP[2];
	  rOutANR_LTM.ltm_luts2.bits.NBC_ANR_LTM_SP3		   = NBC_Curve_SP[3];
	  rOutANR_LTM.ltm_luts3.bits.NBC_ANR_LTM_SP4		   = NBC_Curve_SP[4];
	  rOutANR_LTM.ltm_luts3.bits.NBC_ANR_LTM_SP5		   = NBC_Curve_SP[5];
	  rOutANR_LTM.ltm_luts4.bits.NBC_ANR_LTM_SP6		   = NBC_Curve_SP[6];	 
      
      // DCE NR Link
	  ANRTbl8x8x8_T ANR8x8x8;
	  ANRTBL_YUV8x8x8(ANR_TBL, ANR8x8x8);

	  int DCE_Gain[8] = { 0 };
	  int DCE_Gain_tune[8] = { 0 };
	  if (GCE_EN)
	  {
	      // Gamma_G_Full
	      // Gamma_G_Full_GCE
	      int Table_Y_val[8] = { 16, 48, 80, 112, 144, 176, 208, 240 };
	      int Table_idx[8] = { 0 };

	      int tmp_idx = 0;
	      for (int i = 0; i < 4096; i++)
	      {
	          int curr_table_y_val = Table_Y_val[tmp_idx] * 4;
	          if (Gamma_G_Full_GCE[i] < curr_table_y_val)
	          {
	              Table_idx[tmp_idx] = i;
	          }


	          if (Gamma_G_Full_GCE[MIN(i + 1, 4095)] >= curr_table_y_val)
	          {
	              tmp_idx++;
	          }

	          if (tmp_idx >= 8)
	              break;
	      }

	      const int GCE_RANGE = 8;
	      for (int i = 0; i < 8; i++)
	      {
	          int curr_idx = Table_idx[i];
	          int low_i = MAX(curr_idx - GCE_RANGE, 0);
	          int high_i = MIN(curr_idx + GCE_RANGE, 4095);
	          int diff_ori = MAX(Gamma_G_Full[high_i] - Gamma_G_Full[low_i], 1);
	          int diff_dce = MAX(Gamma_G_Full_GCE[high_i] - Gamma_G_Full_GCE[low_i], 1);
	          DCE_Gain[i] = (256 * diff_dce + (diff_ori/2)) / diff_ori;
	      }

	      for (int y_idx = 0; y_idx < 8; y_idx++)
	      {
			int curr_DCE_Gain = 256 + (((DCE_Gain[y_idx] - 256) * DCE_LINK_STR + 8) >> 4); // use RSV2 for DCE_LINK_STR
	          curr_DCE_Gain = CLIP(curr_DCE_Gain, DCE_GAIN_LO, DCE_GAIN_HI);

	          DCE_Gain_tune[y_idx] = curr_DCE_Gain;
	          for (int u_idx = 0; u_idx < 8; u_idx++)
	          {
	              for (int v_idx = 0; v_idx < 8; v_idx++)
	              {
	                  ANR8x8x8.Y[y_idx][u_idx][v_idx] = (ANR8x8x8.Y[y_idx][u_idx][v_idx] * curr_DCE_Gain + 128) >> 8;
	                  ANR8x8x8.Y[y_idx][u_idx][v_idx] = CLIP(ANR8x8x8.Y[y_idx][u_idx][v_idx], 0, 31);
	              }
	          }
	      }
	  }

      YUV8x8x8_ANRTBL(ANR8x8x8, ANR_TBL);
      INTER_LOG_IF(bFWNBCDebug,"[Calculate_NBC_LTM end\n"); 
}

//************************************************************
// Smooth COLOR
//************************************************************
typedef struct
{
    MBOOL bIsInitial;
    MBOOL bIsCapture;
    MBOOL bEnableLSP;
    MUINT32 u4LVRatio;
    MUINT32 u4LVOfst;
    MUINT32 u4RealMired;
    MUINT32 u4UpperMired;
    MUINT32 u4LowerMired;
    MINT32 i4RealLV;
    MINT32 i4UpperLV;
    MINT32 i4LowerLV;
    MUINT32 u4LumStep;
    MUINT32 u4SatStep;
    MUINT32 u4HueStep;
    MUINT32 u4OutdoorBase;
    MUINT32 u4OutdoorRatio;
    MUINT32 u4OutdoorStep;
} ISP_SMOOTH_COLOR_PARAM_T;

MBOOL IsMiredBoundary(MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired)
{
    if (i4UpperMired == i4LowerMired || i4RealMired == 0 || i4UpperMired == 0 || i4LowerMired == 0) // Mired Boundary
        return MTRUE;
    else
        return MFALSE;

}

MBOOL IsLVBoundary(MINT32 i4RealLV, MINT32 i4UpperLV, MINT32 i4LowerLV)
{
    if (i4UpperLV == i4LowerLV) // LV Boundary
        return MTRUE;
    else
        return MFALSE;

}

MUINT32 IIR(MUINT32 current, MUINT32 target, MUINT32 step)
{
    MINT32 delta = current - target;
    if (abs(delta) > step)
    {
        if (current > target)
        {
            current = current - step;
        }
        else if (current < target)
        {
            current = current + step;
        }
    }
    else
    {
        current = target;
    }

    return current;
}

MINT32 InterParamByMired(MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired, MINT32 i4ParamUpperMired, MINT32 i4ParamLowerMired)
{
    MINT32 i4ParamRealMired = 0;
    MINT32 i4HalfMired = (i4LowerMired - i4UpperMired)>>1; // for rounding, Note : LowerCT < RealCT < UpperCT => LowerMired > RealMired > UpperMired

    if (IsMiredBoundary(i4RealMired, i4UpperMired, i4LowerMired))
    {
        i4ParamRealMired = i4ParamUpperMired;
    }
    else
    {
    	if (i4ParamLowerMired < i4ParamUpperMired)
			i4ParamRealMired = i4ParamUpperMired - ((i4ParamUpperMired - i4ParamLowerMired)*(i4RealMired - i4UpperMired) + i4HalfMired)/(i4LowerMired - i4UpperMired);
		else
        	i4ParamRealMired = i4ParamUpperMired + ((i4ParamLowerMired - i4ParamUpperMired)*(i4RealMired - i4UpperMired) + i4HalfMired)/(i4LowerMired - i4UpperMired);
    }

    return i4ParamRealMired;
}

MINT32 InterParamByLV(MINT32 i4RealLV, MINT32 i4UpperLV, MINT32 i4LowerLV, MINT32 i4ParamUpperLV, MINT32 i4ParamLowerLV)
{
    MINT32 i4ParamRealLV = 0;
    MINT32 i4HalfLV = (i4UpperLV - i4LowerLV)>>1; // for rounding

    if (IsLVBoundary(i4RealLV, i4UpperLV, i4LowerLV))
    {
        i4ParamRealLV = i4ParamLowerLV;
    }
    else
    {
    	if (i4ParamUpperLV < i4ParamLowerLV)
        	i4ParamRealLV = i4ParamLowerLV - ((i4ParamLowerLV - i4ParamUpperLV)*(i4RealLV - i4LowerLV) + i4HalfLV)/(i4UpperLV - i4LowerLV);
		else
        	i4ParamRealLV = i4ParamLowerLV + ((i4ParamUpperLV - i4ParamLowerLV)*(i4RealLV - i4LowerLV) + i4HalfLV)/(i4UpperLV - i4LowerLV);
    }

    return i4ParamRealLV;
}


MINT32 InterParam_Color(MINT32 i4RealLV   , MINT32 i4UpperLV   , MINT32 i4LowerLV   ,
                        MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired,
                        MINT32 i4ParamLvLoMiredLo, MINT32 i4ParamLvLoMiredUp,
                        MINT32 i4ParamLvUpMiredLo, MINT32 i4ParamLvUpMiredUp)
{
    MINT32 i4ParamRealMiredUpperLV = 0;
    MINT32 i4ParamRealMiredLowerLV = 0;
    MINT32 i4ParamRealMiredRealLV  = 0;

    i4ParamRealMiredLowerLV = InterParamByMired(i4RealMired, i4UpperMired, i4LowerMired, i4ParamLvLoMiredUp, i4ParamLvLoMiredLo);
    i4ParamRealMiredUpperLV = InterParamByMired(i4RealMired, i4UpperMired, i4LowerMired, i4ParamLvUpMiredUp, i4ParamLvUpMiredLo);

    i4ParamRealMiredRealLV  = InterParamByLV(i4RealLV, i4UpperLV, i4LowerLV, i4ParamRealMiredUpperLV, i4ParamRealMiredLowerLV);

    return i4ParamRealMiredRealLV;
}

MVOID InterParamGlobal( ISP_SMOOTH_COLOR_PARAM_T& rParam,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                        ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                        MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.global", cLogLevel, "0");
    MINT32 LVMiredDumpGlobal = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()]  u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 lum_speed    = rParam.u4LumStep;
    MUINT32 sat_speed    = rParam.u4SatStep;

    // Global Saturation/Brightness/Contrast
    MUINT32 Final_bri = rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS;
    MUINT32 Final_con = rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_G_CONTRAST;
    MUINT32 Final_sat = rSmoothCOLOR_TBL.g_pic_adj_main_2.bits.COLOR_G_SATURATION;

    MUINT32 u4SaturationLvLoMiredLo = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_2.bits.COLOR_G_SATURATION;
    MUINT32 u4SaturationLvLoMiredUp = rTBL_LV_Lo_CT_Up.g_pic_adj_main_2.bits.COLOR_G_SATURATION;
    MUINT32 u4SaturationLvUpMiredLo = rTBL_LV_Up_CT_Lo.g_pic_adj_main_2.bits.COLOR_G_SATURATION;
    MUINT32 u4SaturationLvUpMiredUp = rTBL_LV_Up_CT_Up.g_pic_adj_main_2.bits.COLOR_G_SATURATION;

    MUINT32 u4BrightnessLvLoMiredLo = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS;
    MUINT32 u4BrightnessLvLoMiredUp = rTBL_LV_Lo_CT_Up.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS;
    MUINT32 u4BrightnessLvUpMiredLo = rTBL_LV_Up_CT_Lo.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS;
    MUINT32 u4BrightnessLvUpMiredUp = rTBL_LV_Up_CT_Up.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS;

    MUINT32 u4ContrastLvLoMiredLo   = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_1.bits.COLOR_G_CONTRAST;
    MUINT32 u4ContrastLvLoMiredUp   = rTBL_LV_Lo_CT_Up.g_pic_adj_main_1.bits.COLOR_G_CONTRAST;
    MUINT32 u4ContrastLvUpMiredLo   = rTBL_LV_Up_CT_Lo.g_pic_adj_main_1.bits.COLOR_G_CONTRAST;
    MUINT32 u4ContrastLvUpMiredUp   = rTBL_LV_Up_CT_Up.g_pic_adj_main_1.bits.COLOR_G_CONTRAST;

    UINT32 G_Saturation = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4SaturationLvLoMiredLo, u4SaturationLvLoMiredUp, u4SaturationLvUpMiredLo, u4SaturationLvUpMiredUp);
    UINT32 G_Brightness = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4BrightnessLvLoMiredLo, u4BrightnessLvLoMiredUp, u4BrightnessLvUpMiredLo, u4BrightnessLvUpMiredUp);
    UINT32 G_Contrast   = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4ContrastLvLoMiredLo  , u4ContrastLvLoMiredUp  , u4ContrastLvUpMiredLo  , u4ContrastLvUpMiredUp  );

    if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
    {
        Final_bri = G_Brightness;
        Final_con = G_Contrast;
        Final_sat = G_Saturation;
    }
    else
    {
        Final_bri = IIR(Final_bri, G_Brightness, lum_speed);
        Final_con = IIR(Final_con, G_Contrast  , lum_speed);
        Final_sat = IIR(Final_sat, G_Saturation, sat_speed);
    }

    rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS = Final_bri;
    rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_G_CONTRAST   = Final_con;
    rSmoothCOLOR_TBL.g_pic_adj_main_2.bits.COLOR_G_SATURATION = Final_sat;

    if (LVMiredDumpGlobal == 1)
    {
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Lower, Mired Lower)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvLoMiredLo, u4ContrastLvLoMiredLo, u4SaturationLvLoMiredLo);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Lower, Mired Upper)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvLoMiredUp, u4ContrastLvLoMiredUp, u4SaturationLvLoMiredUp);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Upper, Mired Lower) B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvUpMiredLo, u4ContrastLvUpMiredLo, u4SaturationLvUpMiredLo);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Upper, Mired Upper) B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvUpMiredUp, u4ContrastLvUpMiredUp, u4SaturationLvUpMiredUp);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (Target)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, G_Brightness, G_Contrast, G_Saturation);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (Final )  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, Final_bri, Final_con, Final_sat);
    }
}


MVOID InterParamPartialY(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.lum", cLogLevel, "0");
    MINT32 LVMiredDumpPartialY = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 y_slope_LvLoMiredLo[16] = {0};
    MUINT32 y_slope_LvLoMiredUp[16] = {0};
    MUINT32 y_slope_LvUpMiredLo[16] = {0};
    MUINT32 y_slope_LvUpMiredUp[16] = {0};
    MUINT32 y_slope[16] = {0};
    MUINT32 Final_y_slope[16] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4LumStep;

    Final_y_slope[0]  = rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0;
    Final_y_slope[1]  = rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1;
    Final_y_slope[2]  = rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2;
    Final_y_slope[3]  = rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3;
    Final_y_slope[4]  = rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4;
    Final_y_slope[5]  = rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5;
    Final_y_slope[6]  = rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6;
    Final_y_slope[7]  = rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7;
    Final_y_slope[8]  = rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8;
    Final_y_slope[9]  = rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9;
    Final_y_slope[10] = rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10;
    Final_y_slope[11] = rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11;
    Final_y_slope[12] = rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12;
    Final_y_slope[13] = rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13;
    Final_y_slope[14] = rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14;
    Final_y_slope[15] = rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15;

    y_slope_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0;
    y_slope_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1;
    y_slope_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2;
    y_slope_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3;
    y_slope_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4;
    y_slope_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5;
    y_slope_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6;
    y_slope_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7;
    y_slope_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8;
    y_slope_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9;
    y_slope_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10;
    y_slope_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11;
    y_slope_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12;
    y_slope_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13;
    y_slope_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14;
    y_slope_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15;

    y_slope_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0;
    y_slope_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1;
    y_slope_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2;
    y_slope_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3;
    y_slope_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4;
    y_slope_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5;
    y_slope_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6;
    y_slope_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7;
    y_slope_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8;
    y_slope_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9;
    y_slope_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10;
    y_slope_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11;
    y_slope_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12;
    y_slope_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13;
    y_slope_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14;
    y_slope_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15;

    y_slope_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0;
    y_slope_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1;
    y_slope_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2;
    y_slope_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3;
    y_slope_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4;
    y_slope_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5;
    y_slope_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6;
    y_slope_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7;
    y_slope_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8;
    y_slope_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9;
    y_slope_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10;
    y_slope_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11;
    y_slope_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12;
    y_slope_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13;
    y_slope_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14;
    y_slope_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15;

    y_slope_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0;
    y_slope_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1;
    y_slope_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2;
    y_slope_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3;
    y_slope_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4;
    y_slope_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5;
    y_slope_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6;
    y_slope_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7;
    y_slope_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8;
    y_slope_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9;
    y_slope_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10;
    y_slope_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11;
    y_slope_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12;
    y_slope_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13;
    y_slope_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14;
    y_slope_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15;

    for (i = 0; i < (sizeof(y_slope)/sizeof(MUINT32)); i++)
    {
        y_slope[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, y_slope_LvLoMiredLo[i], y_slope_LvLoMiredUp[i], y_slope_LvUpMiredLo[i], y_slope_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
            Final_y_slope[i] = y_slope[i];
        else
            Final_y_slope[i] = IIR(Final_y_slope[i], y_slope[i], u4Step);
    }

    rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0    = Final_y_slope[0];
    rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1    = Final_y_slope[1];
    rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2    = Final_y_slope[2];
    rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3    = Final_y_slope[3];
    rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4    = Final_y_slope[4];
    rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5    = Final_y_slope[5];
    rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6    = Final_y_slope[6];
    rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7    = Final_y_slope[7];
    rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8    = Final_y_slope[8];
    rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9    = Final_y_slope[9];
    rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10 = Final_y_slope[10];
    rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11 = Final_y_slope[11];
    rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12 = Final_y_slope[12];
    rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13 = Final_y_slope[13];
    rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14 = Final_y_slope[14];
    rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15 = Final_y_slope[15];

    if (LVMiredDumpPartialY == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvLoMiredLo[0] , y_slope_LvLoMiredLo[1] , y_slope_LvLoMiredLo[2] , y_slope_LvLoMiredLo[3] ,
                    y_slope_LvLoMiredLo[4] , y_slope_LvLoMiredLo[5] , y_slope_LvLoMiredLo[6] , y_slope_LvLoMiredLo[7] ,
                    y_slope_LvLoMiredLo[8] , y_slope_LvLoMiredLo[9] , y_slope_LvLoMiredLo[10], y_slope_LvLoMiredLo[11],
                    y_slope_LvLoMiredLo[12], y_slope_LvLoMiredLo[13], y_slope_LvLoMiredLo[14], y_slope_LvLoMiredLo[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Lower, Mired Upper: %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvLoMiredUp[0] , y_slope_LvLoMiredUp[1] , y_slope_LvLoMiredUp[2] , y_slope_LvLoMiredUp[3] ,
                    y_slope_LvLoMiredUp[4] , y_slope_LvLoMiredUp[5] , y_slope_LvLoMiredUp[6] , y_slope_LvLoMiredUp[7] ,
                    y_slope_LvLoMiredUp[8] , y_slope_LvLoMiredUp[9] , y_slope_LvLoMiredUp[10], y_slope_LvLoMiredUp[11],
                    y_slope_LvLoMiredUp[12], y_slope_LvLoMiredUp[13], y_slope_LvLoMiredUp[14], y_slope_LvLoMiredUp[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvUpMiredLo[0] , y_slope_LvUpMiredLo[1] , y_slope_LvUpMiredLo[2] , y_slope_LvUpMiredLo[3] ,
                    y_slope_LvUpMiredLo[4] , y_slope_LvUpMiredLo[5] , y_slope_LvUpMiredLo[6] , y_slope_LvUpMiredLo[7] ,
                    y_slope_LvUpMiredLo[8] , y_slope_LvUpMiredLo[9] , y_slope_LvUpMiredLo[10], y_slope_LvUpMiredLo[11],
                    y_slope_LvUpMiredLo[12], y_slope_LvUpMiredLo[13], y_slope_LvUpMiredLo[14], y_slope_LvUpMiredLo[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Upper, Mired Upper: %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvUpMiredUp[0] , y_slope_LvUpMiredUp[1] , y_slope_LvUpMiredUp[2] , y_slope_LvUpMiredUp[3] ,
                    y_slope_LvUpMiredUp[4] , y_slope_LvUpMiredUp[5] , y_slope_LvUpMiredUp[6] , y_slope_LvUpMiredUp[7] ,
                    y_slope_LvUpMiredUp[8] , y_slope_LvUpMiredUp[9] , y_slope_LvUpMiredUp[10], y_slope_LvUpMiredUp[11],
                    y_slope_LvUpMiredUp[12], y_slope_LvUpMiredUp[13], y_slope_LvUpMiredUp[14], y_slope_LvUpMiredUp[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope[0] , y_slope[1] , y_slope[2] , y_slope[3] ,
                    y_slope[4] , y_slope[5] , y_slope[6] , y_slope[7] ,
                    y_slope[8] , y_slope[9] , y_slope[10], y_slope[11],
                    y_slope[12], y_slope[13], y_slope[14], y_slope[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    Final_y_slope[0] , Final_y_slope[1] , Final_y_slope[2] , Final_y_slope[3] ,
                    Final_y_slope[4] , Final_y_slope[5] , Final_y_slope[6] , Final_y_slope[7] ,
                    Final_y_slope[8] , Final_y_slope[9] , Final_y_slope[10], Final_y_slope[11],
                    Final_y_slope[12], Final_y_slope[13], Final_y_slope[14], Final_y_slope[15]);
    }
}

MVOID InterParamPartialH(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.hue", cLogLevel, "0");
    MINT32 LVMiredDumpPartialH = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 hue2hue_LvLoMiredLo[20] = {0};
    MUINT32 hue2hue_LvLoMiredUp[20] = {0};
    MUINT32 hue2hue_LvUpMiredLo[20] = {0};
    MUINT32 hue2hue_LvUpMiredUp[20] = {0};
    MUINT32 hue2hue[20] = {0};
    MUINT32 Final_hue2hue[20] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4HueStep;

    Final_hue2hue[0]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0;
    Final_hue2hue[1]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1;
    Final_hue2hue[2]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2;
    Final_hue2hue[3]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3;
    Final_hue2hue[4]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4;
    Final_hue2hue[5]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5;
    Final_hue2hue[6]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6;
    Final_hue2hue[7]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7;
    Final_hue2hue[8]  = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8;
    Final_hue2hue[9]  = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9;
    Final_hue2hue[10] = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10;
    Final_hue2hue[11] = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11;
    Final_hue2hue[12] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12;
    Final_hue2hue[13] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13;
    Final_hue2hue[14] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14;
    Final_hue2hue[15] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15;
    Final_hue2hue[16] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16;
    Final_hue2hue[17] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17;
    Final_hue2hue[18] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18;
    Final_hue2hue[19] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19;

    hue2hue_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0;
    hue2hue_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1;
    hue2hue_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2;
    hue2hue_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3;
    hue2hue_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4;
    hue2hue_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5;
    hue2hue_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6;
    hue2hue_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7;
    hue2hue_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8;
    hue2hue_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9;
    hue2hue_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10;
    hue2hue_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11;
    hue2hue_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12;
    hue2hue_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13;
    hue2hue_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14;
    hue2hue_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15;
    hue2hue_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16;
    hue2hue_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17;
    hue2hue_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18;
    hue2hue_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19;

    hue2hue_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0;
    hue2hue_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1;
    hue2hue_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2;
    hue2hue_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3;
    hue2hue_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4;
    hue2hue_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5;
    hue2hue_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6;
    hue2hue_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7;
    hue2hue_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8;
    hue2hue_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9;
    hue2hue_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10;
    hue2hue_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11;
    hue2hue_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12;
    hue2hue_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13;
    hue2hue_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14;
    hue2hue_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15;
    hue2hue_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16;
    hue2hue_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17;
    hue2hue_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18;
    hue2hue_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19;

    hue2hue_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0;
    hue2hue_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1;
    hue2hue_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2;
    hue2hue_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3;
    hue2hue_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4;
    hue2hue_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5;
    hue2hue_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6;
    hue2hue_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7;
    hue2hue_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8;
    hue2hue_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9;
    hue2hue_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10;
    hue2hue_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11;
    hue2hue_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12;
    hue2hue_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13;
    hue2hue_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14;
    hue2hue_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15;
    hue2hue_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16;
    hue2hue_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17;
    hue2hue_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18;
    hue2hue_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19;

    hue2hue_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0;
    hue2hue_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1;
    hue2hue_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2;
    hue2hue_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3;
    hue2hue_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4;
    hue2hue_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5;
    hue2hue_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6;
    hue2hue_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7;
    hue2hue_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8;
    hue2hue_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9;
    hue2hue_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10;
    hue2hue_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11;
    hue2hue_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12;
    hue2hue_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13;
    hue2hue_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14;
    hue2hue_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15;
    hue2hue_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16;
    hue2hue_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17;
    hue2hue_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18;
    hue2hue_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19;

    for (i = 0; i < (sizeof(hue2hue)/sizeof(MUINT32)); i++)
    {
        hue2hue[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, hue2hue_LvLoMiredLo[i], hue2hue_LvLoMiredUp[i], hue2hue_LvUpMiredLo[i], hue2hue_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_hue2hue[i] = hue2hue[i];
        else
            Final_hue2hue[i] = IIR(Final_hue2hue[i], hue2hue[i], u4Step);
    }

    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0  = Final_hue2hue[0];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1  = Final_hue2hue[1];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2  = Final_hue2hue[2];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3  = Final_hue2hue[3];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4  = Final_hue2hue[4];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5  = Final_hue2hue[5];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6  = Final_hue2hue[6];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7  = Final_hue2hue[7];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8  = Final_hue2hue[8];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9  = Final_hue2hue[9];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10 = Final_hue2hue[10];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11 = Final_hue2hue[11];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12 = Final_hue2hue[12];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13 = Final_hue2hue[13];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14 = Final_hue2hue[14];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15 = Final_hue2hue[15];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16 = Final_hue2hue[16];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17 = Final_hue2hue[17];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18 = Final_hue2hue[18];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19 = Final_hue2hue[19];

    if (LVMiredDumpPartialH == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvLoMiredLo[0] , hue2hue_LvLoMiredLo[1] , hue2hue_LvLoMiredLo[2] , hue2hue_LvLoMiredLo[3] ,
                hue2hue_LvLoMiredLo[4] , hue2hue_LvLoMiredLo[5] , hue2hue_LvLoMiredLo[6] , hue2hue_LvLoMiredLo[7] ,
                hue2hue_LvLoMiredLo[8] , hue2hue_LvLoMiredLo[9] , hue2hue_LvLoMiredLo[10], hue2hue_LvLoMiredLo[11],
                hue2hue_LvLoMiredLo[12], hue2hue_LvLoMiredLo[13], hue2hue_LvLoMiredLo[14], hue2hue_LvLoMiredLo[15],
                hue2hue_LvLoMiredLo[16], hue2hue_LvLoMiredLo[17], hue2hue_LvLoMiredLo[18], hue2hue_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvLoMiredUp[0] , hue2hue_LvLoMiredUp[1] , hue2hue_LvLoMiredUp[2] , hue2hue_LvLoMiredUp[3] ,
                hue2hue_LvLoMiredUp[4] , hue2hue_LvLoMiredUp[5] , hue2hue_LvLoMiredUp[6] , hue2hue_LvLoMiredUp[7] ,
                hue2hue_LvLoMiredUp[8] , hue2hue_LvLoMiredUp[9] , hue2hue_LvLoMiredUp[10], hue2hue_LvLoMiredUp[11],
                hue2hue_LvLoMiredUp[12], hue2hue_LvLoMiredUp[13], hue2hue_LvLoMiredUp[14], hue2hue_LvLoMiredUp[15],
                hue2hue_LvLoMiredUp[16], hue2hue_LvLoMiredUp[17], hue2hue_LvLoMiredUp[18], hue2hue_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvUpMiredLo[0] , hue2hue_LvUpMiredLo[1] , hue2hue_LvUpMiredLo[2] , hue2hue_LvUpMiredLo[3] ,
                hue2hue_LvUpMiredLo[4] , hue2hue_LvUpMiredLo[5] , hue2hue_LvUpMiredLo[6] , hue2hue_LvUpMiredLo[7] ,
                hue2hue_LvUpMiredLo[8] , hue2hue_LvUpMiredLo[9] , hue2hue_LvUpMiredLo[10], hue2hue_LvUpMiredLo[11],
                hue2hue_LvUpMiredLo[12], hue2hue_LvUpMiredLo[13], hue2hue_LvUpMiredLo[14], hue2hue_LvUpMiredLo[15],
                hue2hue_LvUpMiredLo[16], hue2hue_LvUpMiredLo[17], hue2hue_LvUpMiredLo[18], hue2hue_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvUpMiredUp[0] , hue2hue_LvUpMiredUp[1] , hue2hue_LvUpMiredUp[2] , hue2hue_LvUpMiredUp[3] ,
                hue2hue_LvUpMiredUp[4] , hue2hue_LvUpMiredUp[5] , hue2hue_LvUpMiredUp[6] , hue2hue_LvUpMiredUp[7] ,
                hue2hue_LvUpMiredUp[8] , hue2hue_LvUpMiredUp[9] , hue2hue_LvUpMiredUp[10], hue2hue_LvUpMiredUp[11],
                hue2hue_LvUpMiredUp[12], hue2hue_LvUpMiredUp[13], hue2hue_LvUpMiredUp[14], hue2hue_LvUpMiredUp[15],
                hue2hue_LvUpMiredUp[16], hue2hue_LvUpMiredUp[17], hue2hue_LvUpMiredUp[18], hue2hue_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue[0] , hue2hue[1] , hue2hue[2] , hue2hue[3] ,
                hue2hue[4] , hue2hue[5] , hue2hue[6] , hue2hue[7] ,
                hue2hue[8] , hue2hue[9] , hue2hue[10], hue2hue[11],
                hue2hue[12], hue2hue[13], hue2hue[14], hue2hue[15],
                hue2hue[16], hue2hue[17], hue2hue[18], hue2hue[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_hue2hue[0] , Final_hue2hue[1] , Final_hue2hue[2] , Final_hue2hue[3] ,
                Final_hue2hue[4] , Final_hue2hue[5] , Final_hue2hue[6] , Final_hue2hue[7] ,
                Final_hue2hue[8] , Final_hue2hue[9] , Final_hue2hue[10], Final_hue2hue[11],
                Final_hue2hue[12], Final_hue2hue[13], Final_hue2hue[14], Final_hue2hue[15],
                Final_hue2hue[16], Final_hue2hue[17], Final_hue2hue[18], Final_hue2hue[19]);
    }
}

MVOID InterParamPartialS( ISP_SMOOTH_COLOR_PARAM_T& rParam,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                          ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                          MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.sat", cLogLevel, "0");
    MINT32 LVMiredDumpPartialS = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;

    // Partial Saturation, point 1
    MUINT32 point1_LvLoMiredLo[20] = {0};
    MUINT32 point1_LvLoMiredUp[20] = {0};
    MUINT32 point1_LvUpMiredLo[20] = {0};
    MUINT32 point1_LvUpMiredUp[20] = {0};
    MUINT32 point1[20] = {0};
    MUINT32 Final_point1[20] = {0};

    // Partial Saturation, point 2
    MUINT32 point2_LvLoMiredLo[20] = {0};
    MUINT32 point2_LvLoMiredUp[20] = {0};
    MUINT32 point2_LvUpMiredLo[20] = {0};
    MUINT32 point2_LvUpMiredUp[20] = {0};
    MUINT32 point2[20] = {0};
    MUINT32 Final_point2[20] = {0};

    // Partial Saturation, point 3 is the MaxS of each Hue : 0 -> (gain1) -> point1 -> (gain2) -> point2 -> (gain3) -> point3
    MUINT32 point3[20] = {120, 114, 126, 121, 120, 126, 128, 118, 113, 112, 117, 126, 120, 114, 126, 121, 120, 128, 113, 117};

    // Partial Saturation, gain 1 : output1 = point1*gain1/128
    MUINT32 gain1_LvLoMiredLo[20] = {0};
    MUINT32 gain1_LvLoMiredUp[20] = {0};
    MUINT32 gain1_LvUpMiredLo[20] = {0};
    MUINT32 gain1_LvUpMiredUp[20] = {0};
    MUINT32 gain1[20] = {0};
    MUINT32 Final_gain1[20] ={0};

    // Partial Saturation, gain 2 : output2 = output1 + (point2 - point1)*gain2/128
    MUINT32 gain2_LvLoMiredLo[20] = {0};
    MUINT32 gain2_LvLoMiredUp[20] = {0};
    MUINT32 gain2_LvUpMiredLo[20] = {0};
    MUINT32 gain2_LvUpMiredUp[20] = {0};
    MUINT32 gain2[20] = {0};
    MUINT32 Final_gain2[20] ={0};

    // Partial Saturation, gain 3 : output3 = output2 + (point3 - point2)*gain3/128 = point3 (to avoid over-saturation)
    MUINT32 gain3_LvLoMiredLo[20] = {0};
    MUINT32 gain3_LvLoMiredUp[20] = {0};
    MUINT32 gain3_LvUpMiredLo[20] = {0};
    MUINT32 gain3_LvUpMiredUp[20] = {0};
    MUINT32 gain3[20] = {0};
    MUINT32 Final_gain3[20] ={0};

    // output1 = point1*gain1/128
    MUINT32 output1_LvLoMiredLo[20] = {0};
    MUINT32 output1_LvLoMiredUp[20] = {0};
    MUINT32 output1_LvUpMiredLo[20] = {0};
    MUINT32 output1_LvUpMiredUp[20] = {0};
    MUINT32 output1[20] = {0};

    // output2 = output1 + (point2 - point1)*gain2/128
    MUINT32 output2_LvLoMiredLo[20] = {0};
    MUINT32 output2_LvLoMiredUp[20] = {0};
    MUINT32 output2_LvUpMiredLo[20] = {0};
    MUINT32 output2_LvUpMiredUp[20] = {0};
    MUINT32 output2[20] = {0};

    // output3 = output2 + (point3 - point2)*gain3/128 = point3 (to avoid over-saturation)
    MUINT32 output3[20] = {0};


    Final_point1[0] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0;
    Final_point1[1] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1;
    Final_point1[2] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2;
    Final_point1[3] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3;
    Final_point1[4] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4;
    Final_point1[5] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5;
    Final_point1[6] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6;
    Final_point1[7] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7;
    Final_point1[8] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8;
    Final_point1[9] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9;
    Final_point1[10] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10;
    Final_point1[11] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11;
    Final_point1[12] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12;
    Final_point1[13] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13;
    Final_point1[14] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14;
    Final_point1[15] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15;
    Final_point1[16] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16;
    Final_point1[17] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17;
    Final_point1[18] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18;
    Final_point1[19] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19;

    point1_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0;
    point1_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1;
    point1_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2;
    point1_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3;
    point1_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4;
    point1_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5;
    point1_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6;
    point1_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7;
    point1_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8;
    point1_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9;
    point1_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10;
    point1_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11;
    point1_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12;
    point1_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13;
    point1_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14;
    point1_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15;
    point1_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16;
    point1_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17;
    point1_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18;
    point1_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19;

    point1_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0;
    point1_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1;
    point1_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2;
    point1_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3;
    point1_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4;
    point1_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5;
    point1_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6;
    point1_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7;
    point1_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8;
    point1_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9;
    point1_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10;
    point1_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11;
    point1_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12;
    point1_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13;
    point1_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14;
    point1_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15;
    point1_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16;
    point1_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17;
    point1_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18;
    point1_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19;

    point1_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0;
    point1_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1;
    point1_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2;
    point1_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3;
    point1_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4;
    point1_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5;
    point1_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6;
    point1_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7;
    point1_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8;
    point1_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9;
    point1_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10;
    point1_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11;
    point1_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12;
    point1_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13;
    point1_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14;
    point1_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15;
    point1_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16;
    point1_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17;
    point1_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18;
    point1_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19;

    point1_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0;
    point1_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1;
    point1_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2;
    point1_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3;
    point1_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4;
    point1_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5;
    point1_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6;
    point1_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7;
    point1_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8;
    point1_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9;
    point1_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10;
    point1_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11;
    point1_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12;
    point1_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13;
    point1_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14;
    point1_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15;
    point1_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16;
    point1_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17;
    point1_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18;
    point1_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19;


    Final_point2[0] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0;
    Final_point2[1] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1;
    Final_point2[2] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2;
    Final_point2[3] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3;
    Final_point2[4] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4;
    Final_point2[5] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5;
    Final_point2[6] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6;
    Final_point2[7] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7;
    Final_point2[8] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8;
    Final_point2[9] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9;
    Final_point2[10] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10;
    Final_point2[11] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11;
    Final_point2[12] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12;
    Final_point2[13] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13;
    Final_point2[14] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14;
    Final_point2[15] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15;
    Final_point2[16] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16;
    Final_point2[17] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17;
    Final_point2[18] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18;
    Final_point2[19] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19;

    point2_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0;
    point2_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1;
    point2_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2;
    point2_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3;
    point2_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4;
    point2_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5;
    point2_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6;
    point2_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7;
    point2_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8;
    point2_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9;
    point2_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10;
    point2_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11;
    point2_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12;
    point2_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13;
    point2_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14;
    point2_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15;
    point2_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16;
    point2_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17;
    point2_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18;
    point2_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19;

    point2_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0;
    point2_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1;
    point2_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2;
    point2_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3;
    point2_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4;
    point2_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5;
    point2_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6;
    point2_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7;
    point2_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8;
    point2_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9;
    point2_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10;
    point2_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11;
    point2_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12;
    point2_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13;
    point2_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14;
    point2_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15;
    point2_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16;
    point2_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17;
    point2_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18;
    point2_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19;

    point2_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0;
    point2_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1;
    point2_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2;
    point2_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3;
    point2_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4;
    point2_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5;
    point2_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6;
    point2_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7;
    point2_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8;
    point2_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9;
    point2_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10;
    point2_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11;
    point2_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12;
    point2_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13;
    point2_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14;
    point2_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15;
    point2_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16;
    point2_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17;
    point2_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18;
    point2_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19;

    point2_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0;
    point2_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1;
    point2_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2;
    point2_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3;
    point2_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4;
    point2_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5;
    point2_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6;
    point2_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7;
    point2_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8;
    point2_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9;
    point2_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10;
    point2_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11;
    point2_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12;
    point2_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13;
    point2_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14;
    point2_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15;
    point2_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16;
    point2_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17;
    point2_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18;
    point2_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19;


    Final_gain1[0]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0;
    Final_gain1[1]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1;
    Final_gain1[2]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2;
    Final_gain1[3]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3;
    Final_gain1[4]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4;
    Final_gain1[5]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5;
    Final_gain1[6]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6;
    Final_gain1[7]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7;
    Final_gain1[8]  = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8;
    Final_gain1[9]  = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9;
    Final_gain1[10] = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10;
    Final_gain1[11] = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11;
    Final_gain1[12] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12;
    Final_gain1[13] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13;
    Final_gain1[14] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14;
    Final_gain1[15] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15;
    Final_gain1[16] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16;
    Final_gain1[17] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17;
    Final_gain1[18] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18;
    Final_gain1[19] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19;

    gain1_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0;
    gain1_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1;
    gain1_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2;
    gain1_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3;
    gain1_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4;
    gain1_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5;
    gain1_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6;
    gain1_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7;
    gain1_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8;
    gain1_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9;
    gain1_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10;
    gain1_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11;
    gain1_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12;
    gain1_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13;
    gain1_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14;
    gain1_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15;
    gain1_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16;
    gain1_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17;
    gain1_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18;
    gain1_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19;

    gain1_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0;
    gain1_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1;
    gain1_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2;
    gain1_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3;
    gain1_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4;
    gain1_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5;
    gain1_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6;
    gain1_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7;
    gain1_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8;
    gain1_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9;
    gain1_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10;
    gain1_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11;
    gain1_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12;
    gain1_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13;
    gain1_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14;
    gain1_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15;
    gain1_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16;
    gain1_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17;
    gain1_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18;
    gain1_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19;

    gain1_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0;
    gain1_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1;
    gain1_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2;
    gain1_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3;
    gain1_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4;
    gain1_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5;
    gain1_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6;
    gain1_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7;
    gain1_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8;
    gain1_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9;
    gain1_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10;
    gain1_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11;
    gain1_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12;
    gain1_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13;
    gain1_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14;
    gain1_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15;
    gain1_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16;
    gain1_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17;
    gain1_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18;
    gain1_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19;

    gain1_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0;
    gain1_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1;
    gain1_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2;
    gain1_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3;
    gain1_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4;
    gain1_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5;
    gain1_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6;
    gain1_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7;
    gain1_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8;
    gain1_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9;
    gain1_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10;
    gain1_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11;
    gain1_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12;
    gain1_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13;
    gain1_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14;
    gain1_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15;
    gain1_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16;
    gain1_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17;
    gain1_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18;
    gain1_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19;

    Final_gain2[0] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0;
    Final_gain2[1] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1;
    Final_gain2[2] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2;
    Final_gain2[3] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3;
    Final_gain2[4] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4;
    Final_gain2[5] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5;
    Final_gain2[6] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6;
    Final_gain2[7] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7;
    Final_gain2[8] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8;
    Final_gain2[9] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9;
    Final_gain2[10] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10;
    Final_gain2[11] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11;
    Final_gain2[12] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12;
    Final_gain2[13] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13;
    Final_gain2[14] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14;
    Final_gain2[15] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15;
    Final_gain2[16] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16;
    Final_gain2[17] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17;
    Final_gain2[18] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18;
    Final_gain2[19] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19;

    gain2_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0;
    gain2_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1;
    gain2_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2;
    gain2_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3;
    gain2_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4;
    gain2_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5;
    gain2_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6;
    gain2_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7;
    gain2_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8;
    gain2_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9;
    gain2_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10;
    gain2_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11;
    gain2_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12;
    gain2_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13;
    gain2_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14;
    gain2_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15;
    gain2_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16;
    gain2_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17;
    gain2_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18;
    gain2_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19;

    gain2_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0;
    gain2_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1;
    gain2_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2;
    gain2_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3;
    gain2_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4;
    gain2_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5;
    gain2_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6;
    gain2_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7;
    gain2_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8;
    gain2_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9;
    gain2_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10;
    gain2_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11;
    gain2_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12;
    gain2_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13;
    gain2_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14;
    gain2_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15;
    gain2_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16;
    gain2_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17;
    gain2_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18;
    gain2_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19;

    gain2_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0;
    gain2_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1;
    gain2_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2;
    gain2_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3;
    gain2_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4;
    gain2_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5;
    gain2_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6;
    gain2_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7;
    gain2_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8;
    gain2_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9;
    gain2_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10;
    gain2_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11;
    gain2_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12;
    gain2_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13;
    gain2_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14;
    gain2_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15;
    gain2_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16;
    gain2_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17;
    gain2_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18;
    gain2_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19;

    gain2_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0;
    gain2_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1;
    gain2_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2;
    gain2_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3;
    gain2_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4;
    gain2_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5;
    gain2_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6;
    gain2_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7;
    gain2_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8;
    gain2_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9;
    gain2_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10;
    gain2_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11;
    gain2_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12;
    gain2_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13;
    gain2_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14;
    gain2_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15;
    gain2_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16;
    gain2_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17;
    gain2_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18;
    gain2_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19;

    Final_gain3[0]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0;
    Final_gain3[1]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1;
    Final_gain3[2]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2;
    Final_gain3[3]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3;
    Final_gain3[4]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4;
    Final_gain3[5]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5;
    Final_gain3[6]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6;
    Final_gain3[7]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7;
    Final_gain3[8]  = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8;
    Final_gain3[9]  = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9;
    Final_gain3[10] = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10;
    Final_gain3[11] = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11;
    Final_gain3[12] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12;
    Final_gain3[13] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13;
    Final_gain3[14] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14;
    Final_gain3[15] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15;
    Final_gain3[16] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16;
    Final_gain3[17] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17;
    Final_gain3[18] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18;
    Final_gain3[19] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19;

    gain3_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0;
    gain3_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1;
    gain3_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2;
    gain3_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3;
    gain3_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4;
    gain3_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5;
    gain3_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6;
    gain3_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7;
    gain3_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8;
    gain3_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9;
    gain3_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10;
    gain3_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11;
    gain3_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12;
    gain3_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13;
    gain3_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14;
    gain3_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15;
    gain3_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16;
    gain3_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17;
    gain3_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18;
    gain3_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19;

    gain3_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0;
    gain3_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1;
    gain3_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2;
    gain3_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3;
    gain3_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4;
    gain3_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5;
    gain3_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6;
    gain3_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7;
    gain3_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8;
    gain3_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9;
    gain3_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10;
    gain3_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11;
    gain3_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12;
    gain3_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13;
    gain3_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14;
    gain3_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15;
    gain3_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16;
    gain3_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17;
    gain3_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18;
    gain3_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19;

    gain3_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0;
    gain3_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1;
    gain3_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2;
    gain3_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3;
    gain3_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4;
    gain3_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5;
    gain3_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6;
    gain3_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7;
    gain3_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8;
    gain3_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9;
    gain3_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10;
    gain3_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11;
    gain3_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12;
    gain3_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13;
    gain3_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14;
    gain3_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15;
    gain3_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16;
    gain3_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17;
    gain3_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18;
    gain3_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19;

    gain3_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0;
    gain3_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1;
    gain3_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2;
    gain3_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3;
    gain3_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4;
    gain3_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5;
    gain3_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6;
    gain3_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7;
    gain3_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8;
    gain3_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9;
    gain3_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10;
    gain3_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11;
    gain3_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12;
    gain3_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13;
    gain3_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14;
    gain3_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15;
    gain3_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16;
    gain3_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17;
    gain3_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18;
    gain3_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19;

    for (i = 0; i < 20; i++)
    {
        point1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, point1_LvLoMiredLo[i], point1_LvLoMiredUp[i], point1_LvUpMiredLo[i], point1_LvUpMiredUp[i]);
        point2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, point2_LvLoMiredLo[i], point2_LvLoMiredUp[i], point2_LvUpMiredLo[i], point2_LvUpMiredUp[i]);
        // output1 = point1*gain1/128

        // step1 : get 4 table output1 = point1*gain1/128, then interpolate unique output1
        output1_LvLoMiredLo[i] = (point1_LvLoMiredLo[i]*gain1_LvLoMiredLo[i] + 64) >> 7;
        output1_LvLoMiredUp[i] = (point1_LvLoMiredUp[i]*gain1_LvLoMiredUp[i] + 64) >> 7;
        output1_LvUpMiredLo[i] = (point1_LvUpMiredLo[i]*gain1_LvUpMiredLo[i] + 64) >> 7;
        output1_LvUpMiredUp[i] = (point1_LvUpMiredUp[i]*gain1_LvUpMiredUp[i] + 64) >> 7;
        output1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, output1_LvLoMiredLo[i], output1_LvLoMiredUp[i], output1_LvUpMiredLo[i], output1_LvUpMiredUp[i]);

        // step2 : get 4 table output2 = output1 + (point2-point1)*gain2/128, then interpolate unique output2
        output2_LvLoMiredLo[i] = output1_LvLoMiredLo[i] + (((point2_LvLoMiredLo[i] - point1_LvLoMiredLo[i])*gain2_LvLoMiredLo[i] + 64) >> 7);
        output2_LvLoMiredUp[i] = output1_LvLoMiredUp[i] + (((point2_LvLoMiredUp[i] - point1_LvLoMiredUp[i])*gain2_LvLoMiredUp[i] + 64) >> 7);
        output2_LvUpMiredLo[i] = output1_LvUpMiredLo[i] + (((point2_LvUpMiredLo[i] - point1_LvUpMiredLo[i])*gain2_LvUpMiredLo[i] + 64) >> 7);
        output2_LvUpMiredUp[i] = output1_LvUpMiredUp[i] + (((point2_LvUpMiredUp[i] - point1_LvUpMiredUp[i])*gain2_LvUpMiredUp[i] + 64) >> 7);
        output2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, output2_LvLoMiredLo[i], output2_LvLoMiredUp[i], output2_LvUpMiredLo[i], output2_LvUpMiredUp[i]);

        // step3 : unique output3 = point3 (to avoid over-saturation)
        output3[i] = point3[i];

        // step4 : find gain1 from output1 = point1*gain1/128 => gain1 = output1*128/point1
        if (point1[i] == 0)
        {
            gain1[i] = 128;
        }
        else
        {
            gain1[i] = ((output1[i] << 7) + (point1[i] >> 1))/point1[i]; // (point1[i] >> 1) for rounding
        }

        // step5 : find gain2 from output2 = output1 + (point2-point1)*gain2/128 => gain2 = (output2-output1)*128/(point2-point1)
        if ((point2[i] - point1[i]) == 0)
        {
            gain2[i] = 128;
        }
        else if (output2[i] < output1[i])
        {
            gain2[i] = 0;
        }
        else
        {
            gain2[i] = (((output2[i]-output1[i]) << 7) + ((point2[i] - point1[i]) >> 1))/(point2[i] - point1[i]); // ((point2[i] - point1[i]) >> 1) for rounding
        }

        // step6 : find gain3 from output3 = output2 + (point3-point2)*gain3/128 => gain3 = (output3-output2)*128/(point3-point2)
        if ((point3[i] - point2[i]) == 0)
        {
            gain3[i] = 128;
        }
        else if (output3[i] < output2[i])
        {
            gain3[i] = 0;
        }
        else
        {
            gain3[i] = (((output3[i]-output2[i]) << 7) + ((point3[i] - point2[i]) >> 1))/(point3[i] - point2[i]); // ((point3[i] - point2[i]) >> 1) for rounding
        }

        gain1[i] = ClipInt32(gain1[i], 255, 0);
        gain2[i] = ClipInt32(gain2[i], 255, 0);
        gain3[i] = ClipInt32(gain3[i], 255, 0);

        if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
        {
            Final_point1[i] = point1[i];
            Final_point2[i] = point2[i];
            Final_gain1[i] = gain1[i];
            Final_gain2[i] = gain2[i];
            Final_gain3[i] = gain3[i];
        }
        else
        {
            Final_point1[i] = IIR(Final_point1[i], point1[i], u4Step);
            Final_point2[i] = IIR(Final_point2[i], point2[i], u4Step);
            Final_gain1[i] = IIR(Final_gain1[i], gain1[i], u4Step);
            Final_gain2[i] = IIR(Final_gain2[i], gain2[i], u4Step);
            Final_gain3[i] = IIR(Final_gain3[i], gain3[i], u4Step);
        }
    }

    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0  = Final_point1[0];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1  = Final_point1[1];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2  = Final_point1[2];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3  = Final_point1[3];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4  = Final_point1[4];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5  = Final_point1[5];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6  = Final_point1[6];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7  = Final_point1[7];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8  = Final_point1[8];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9  = Final_point1[9];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10 = Final_point1[10];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11 = Final_point1[11];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12 = Final_point1[12];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13 = Final_point1[13];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14 = Final_point1[14];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15 = Final_point1[15];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16 = Final_point1[16];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17 = Final_point1[17];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18 = Final_point1[18];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19 = Final_point1[19];


    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0  = Final_point2[0];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1  = Final_point2[1];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2  = Final_point2[2];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3  = Final_point2[3];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4  = Final_point2[4];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5  = Final_point2[5];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6  = Final_point2[6];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7  = Final_point2[7];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8  = Final_point2[8];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9  = Final_point2[9];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10 = Final_point2[10];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11 = Final_point2[11];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12 = Final_point2[12];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13 = Final_point2[13];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14 = Final_point2[14];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15 = Final_point2[15];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16 = Final_point2[16];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17 = Final_point2[17];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18 = Final_point2[18];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19 = Final_point2[19];

    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0  = Final_gain1[0];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1  = Final_gain1[1];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2  = Final_gain1[2];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3  = Final_gain1[3];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4  = Final_gain1[4];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5  = Final_gain1[5];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6  = Final_gain1[6];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7  = Final_gain1[7];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8  = Final_gain1[8];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9  = Final_gain1[9];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10 = Final_gain1[10];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11 = Final_gain1[11];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12 = Final_gain1[12];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13 = Final_gain1[13];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14 = Final_gain1[14];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15 = Final_gain1[15];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16 = Final_gain1[16];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17 = Final_gain1[17];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18 = Final_gain1[18];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19 = Final_gain1[19];


    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0  = Final_gain2[0];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1  = Final_gain2[1];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2  = Final_gain2[2];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3  = Final_gain2[3];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4  = Final_gain2[4];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5  = Final_gain2[5];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6  = Final_gain2[6];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7  = Final_gain2[7];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8  = Final_gain2[8];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9  = Final_gain2[9];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10 = Final_gain2[10];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11 = Final_gain2[11];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12 = Final_gain2[12];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13 = Final_gain2[13];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14 = Final_gain2[14];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15 = Final_gain2[15];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16 = Final_gain2[16];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17 = Final_gain2[17];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18 = Final_gain2[18];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19 = Final_gain2[19];

    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0  = Final_gain3[0];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1  = Final_gain3[1];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2  = Final_gain3[2];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3  = Final_gain3[3];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4  = Final_gain3[4];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5  = Final_gain3[5];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6  = Final_gain3[6];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7  = Final_gain3[7];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8  = Final_gain3[8];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9  = Final_gain3[9];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10 = Final_gain3[10];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11 = Final_gain3[11];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12 = Final_gain3[12];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13 = Final_gain3[13];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14 = Final_gain3[14];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15 = Final_gain3[15];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16 = Final_gain3[16];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17 = Final_gain3[17];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18 = Final_gain3[18];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19 = Final_gain3[19];

    if (LVMiredDumpPartialS == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvLoMiredLo[0] , point1_LvLoMiredLo[1] , point1_LvLoMiredLo[2] , point1_LvLoMiredLo[3] ,
                                     point1_LvLoMiredLo[4] , point1_LvLoMiredLo[5] , point1_LvLoMiredLo[6] , point1_LvLoMiredLo[7] ,
                                     point1_LvLoMiredLo[8] , point1_LvLoMiredLo[9] , point1_LvLoMiredLo[10], point1_LvLoMiredLo[11],
                                     point1_LvLoMiredLo[12], point1_LvLoMiredLo[13], point1_LvLoMiredLo[14], point1_LvLoMiredLo[15],
                                     point1_LvLoMiredLo[16], point1_LvLoMiredLo[17], point1_LvLoMiredLo[18], point1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvLoMiredUp[0] , point1_LvLoMiredUp[1] , point1_LvLoMiredUp[2] , point1_LvLoMiredUp[3] ,
                                     point1_LvLoMiredUp[4] , point1_LvLoMiredUp[5] , point1_LvLoMiredUp[6] , point1_LvLoMiredUp[7] ,
                                     point1_LvLoMiredUp[8] , point1_LvLoMiredUp[9] , point1_LvLoMiredUp[10], point1_LvLoMiredUp[11],
                                     point1_LvLoMiredUp[12], point1_LvLoMiredUp[13], point1_LvLoMiredUp[14], point1_LvLoMiredUp[15],
                                     point1_LvLoMiredUp[16], point1_LvLoMiredUp[17], point1_LvLoMiredUp[18], point1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvUpMiredLo[0] , point1_LvUpMiredLo[1] , point1_LvUpMiredLo[2] , point1_LvUpMiredLo[3] ,
                                     point1_LvUpMiredLo[4] , point1_LvUpMiredLo[5] , point1_LvUpMiredLo[6] , point1_LvUpMiredLo[7] ,
                                     point1_LvUpMiredLo[8] , point1_LvUpMiredLo[9] , point1_LvUpMiredLo[10], point1_LvUpMiredLo[11],
                                     point1_LvUpMiredLo[12], point1_LvUpMiredLo[13], point1_LvUpMiredLo[14], point1_LvUpMiredLo[15],
                                     point1_LvUpMiredLo[16], point1_LvUpMiredLo[17], point1_LvUpMiredLo[18], point1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvUpMiredUp[0] , point1_LvUpMiredUp[1] , point1_LvUpMiredUp[2] , point1_LvUpMiredUp[3] ,
                                     point1_LvUpMiredUp[4] , point1_LvUpMiredUp[5] , point1_LvUpMiredUp[6] , point1_LvUpMiredUp[7] ,
                                     point1_LvUpMiredUp[8] , point1_LvUpMiredUp[9] , point1_LvUpMiredUp[10], point1_LvUpMiredUp[11],
                                     point1_LvUpMiredUp[12], point1_LvUpMiredUp[13], point1_LvUpMiredUp[14], point1_LvUpMiredUp[15],
                                     point1_LvUpMiredUp[16], point1_LvUpMiredUp[17], point1_LvUpMiredUp[18], point1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvLoMiredLo[0] , point2_LvLoMiredLo[1] , point2_LvLoMiredLo[2] , point2_LvLoMiredLo[3] ,
                                     point2_LvLoMiredLo[4] , point2_LvLoMiredLo[5] , point2_LvLoMiredLo[6] , point2_LvLoMiredLo[7] ,
                                     point2_LvLoMiredLo[8] , point2_LvLoMiredLo[9] , point2_LvLoMiredLo[10], point2_LvLoMiredLo[11],
                                     point2_LvLoMiredLo[12], point2_LvLoMiredLo[13], point2_LvLoMiredLo[14], point2_LvLoMiredLo[15],
                                     point2_LvLoMiredLo[16], point2_LvLoMiredLo[17], point2_LvLoMiredLo[18], point2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvLoMiredUp[0] , point2_LvLoMiredUp[1] , point2_LvLoMiredUp[2] , point2_LvLoMiredUp[3] ,
                                     point2_LvLoMiredUp[4] , point2_LvLoMiredUp[5] , point2_LvLoMiredUp[6] , point2_LvLoMiredUp[7] ,
                                     point2_LvLoMiredUp[8] , point2_LvLoMiredUp[9] , point2_LvLoMiredUp[10], point2_LvLoMiredUp[11],
                                     point2_LvLoMiredUp[12], point2_LvLoMiredUp[13], point2_LvLoMiredUp[14], point2_LvLoMiredUp[15],
                                     point2_LvLoMiredUp[16], point2_LvLoMiredUp[17], point2_LvLoMiredUp[18], point2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvUpMiredLo[0] , point2_LvUpMiredLo[1] , point2_LvUpMiredLo[2] , point2_LvUpMiredLo[3] ,
                                     point2_LvUpMiredLo[4] , point2_LvUpMiredLo[5] , point2_LvUpMiredLo[6] , point2_LvUpMiredLo[7] ,
                                     point2_LvUpMiredLo[8] , point2_LvUpMiredLo[9] , point2_LvUpMiredLo[10], point2_LvUpMiredLo[11],
                                     point2_LvUpMiredLo[12], point2_LvUpMiredLo[13], point2_LvUpMiredLo[14], point2_LvUpMiredLo[15],
                                     point2_LvUpMiredLo[16], point2_LvUpMiredLo[17], point2_LvUpMiredLo[18], point2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvUpMiredUp[0] , point2_LvUpMiredUp[1] , point2_LvUpMiredUp[2] , point2_LvUpMiredUp[3] ,
                                     point2_LvUpMiredUp[4] , point2_LvUpMiredUp[5] , point2_LvUpMiredUp[6] , point2_LvUpMiredUp[7] ,
                                     point2_LvUpMiredUp[8] , point2_LvUpMiredUp[9] , point2_LvUpMiredUp[10], point2_LvUpMiredUp[11],
                                     point2_LvUpMiredUp[12], point2_LvUpMiredUp[13], point2_LvUpMiredUp[14], point2_LvUpMiredUp[15],
                                     point2_LvUpMiredUp[16], point2_LvUpMiredUp[17], point2_LvUpMiredUp[18], point2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvLoMiredLo[0] , gain1_LvLoMiredLo[1] , gain1_LvLoMiredLo[2] , gain1_LvLoMiredLo[3] ,
                                     gain1_LvLoMiredLo[4] , gain1_LvLoMiredLo[5] , gain1_LvLoMiredLo[6] , gain1_LvLoMiredLo[7] ,
                                     gain1_LvLoMiredLo[8] , gain1_LvLoMiredLo[9] , gain1_LvLoMiredLo[10], gain1_LvLoMiredLo[11],
                                     gain1_LvLoMiredLo[12], gain1_LvLoMiredLo[13], gain1_LvLoMiredLo[14], gain1_LvLoMiredLo[15],
                                     gain1_LvLoMiredLo[16], gain1_LvLoMiredLo[17], gain1_LvLoMiredLo[18], gain1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvLoMiredUp[0] , gain1_LvLoMiredUp[1] , gain1_LvLoMiredUp[2] , gain1_LvLoMiredUp[3] ,
                                     gain1_LvLoMiredUp[4] , gain1_LvLoMiredUp[5] , gain1_LvLoMiredUp[6] , gain1_LvLoMiredUp[7] ,
                                     gain1_LvLoMiredUp[8] , gain1_LvLoMiredUp[9] , gain1_LvLoMiredUp[10], gain1_LvLoMiredUp[11],
                                     gain1_LvLoMiredUp[12], gain1_LvLoMiredUp[13], gain1_LvLoMiredUp[14], gain1_LvLoMiredUp[15],
                                     gain1_LvLoMiredUp[16], gain1_LvLoMiredUp[17], gain1_LvLoMiredUp[18], gain1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvUpMiredLo[0] , gain1_LvUpMiredLo[1] , gain1_LvUpMiredLo[2] , gain1_LvUpMiredLo[3] ,
                                     gain1_LvUpMiredLo[4] , gain1_LvUpMiredLo[5] , gain1_LvUpMiredLo[6] , gain1_LvUpMiredLo[7] ,
                                     gain1_LvUpMiredLo[8] , gain1_LvUpMiredLo[9] , gain1_LvUpMiredLo[10], gain1_LvUpMiredLo[11],
                                     gain1_LvUpMiredLo[12], gain1_LvUpMiredLo[13], gain1_LvUpMiredLo[14], gain1_LvUpMiredLo[15],
                                     gain1_LvUpMiredLo[16], gain1_LvUpMiredLo[17], gain1_LvUpMiredLo[18], gain1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvUpMiredUp[0] , gain1_LvUpMiredUp[1] , gain1_LvUpMiredUp[2] , gain1_LvUpMiredUp[3] ,
                                     gain1_LvUpMiredUp[4] , gain1_LvUpMiredUp[5] , gain1_LvUpMiredUp[6] , gain1_LvUpMiredUp[7] ,
                                     gain1_LvUpMiredUp[8] , gain1_LvUpMiredUp[9] , gain1_LvUpMiredUp[10], gain1_LvUpMiredUp[11],
                                     gain1_LvUpMiredUp[12], gain1_LvUpMiredUp[13], gain1_LvUpMiredUp[14], gain1_LvUpMiredUp[15],
                                     gain1_LvUpMiredUp[16], gain1_LvUpMiredUp[17], gain1_LvUpMiredUp[18], gain1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvLoMiredLo[0] , gain2_LvLoMiredLo[1] , gain2_LvLoMiredLo[2] , gain2_LvLoMiredLo[3] ,
                                     gain2_LvLoMiredLo[4] , gain2_LvLoMiredLo[5] , gain2_LvLoMiredLo[6] , gain2_LvLoMiredLo[7] ,
                                     gain2_LvLoMiredLo[8] , gain2_LvLoMiredLo[9] , gain2_LvLoMiredLo[10], gain2_LvLoMiredLo[11],
                                     gain2_LvLoMiredLo[12], gain2_LvLoMiredLo[13], gain2_LvLoMiredLo[14], gain2_LvLoMiredLo[15],
                                     gain2_LvLoMiredLo[16], gain2_LvLoMiredLo[17], gain2_LvLoMiredLo[18], gain2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvLoMiredUp[0] , gain2_LvLoMiredUp[1] , gain2_LvLoMiredUp[2] , gain2_LvLoMiredUp[3] ,
                                     gain2_LvLoMiredUp[4] , gain2_LvLoMiredUp[5] , gain2_LvLoMiredUp[6] , gain2_LvLoMiredUp[7] ,
                                     gain2_LvLoMiredUp[8] , gain2_LvLoMiredUp[9] , gain2_LvLoMiredUp[10], gain2_LvLoMiredUp[11],
                                     gain2_LvLoMiredUp[12], gain2_LvLoMiredUp[13], gain2_LvLoMiredUp[14], gain2_LvLoMiredUp[15],
                                     gain2_LvLoMiredUp[16], gain2_LvLoMiredUp[17], gain2_LvLoMiredUp[18], gain2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvUpMiredLo[0] , gain2_LvUpMiredLo[1] , gain2_LvUpMiredLo[2] , gain2_LvUpMiredLo[3] ,
                                     gain2_LvUpMiredLo[4] , gain2_LvUpMiredLo[5] , gain2_LvUpMiredLo[6] , gain2_LvUpMiredLo[7] ,
                                     gain2_LvUpMiredLo[8] , gain2_LvUpMiredLo[9] , gain2_LvUpMiredLo[10], gain2_LvUpMiredLo[11],
                                     gain2_LvUpMiredLo[12], gain2_LvUpMiredLo[13], gain2_LvUpMiredLo[14], gain2_LvUpMiredLo[15],
                                     gain2_LvUpMiredLo[16], gain2_LvUpMiredLo[17], gain2_LvUpMiredLo[18], gain2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvUpMiredUp[0] , gain2_LvUpMiredUp[1] , gain2_LvUpMiredUp[2] , gain2_LvUpMiredUp[3] ,
                                     gain2_LvUpMiredUp[4] , gain2_LvUpMiredUp[5] , gain2_LvUpMiredUp[6] , gain2_LvUpMiredUp[7] ,
                                     gain2_LvUpMiredUp[8] , gain2_LvUpMiredUp[9] , gain2_LvUpMiredUp[10], gain2_LvUpMiredUp[11],
                                     gain2_LvUpMiredUp[12], gain2_LvUpMiredUp[13], gain2_LvUpMiredUp[14], gain2_LvUpMiredUp[15],
                                     gain2_LvUpMiredUp[16], gain2_LvUpMiredUp[17], gain2_LvUpMiredUp[18], gain2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvLoMiredLo[0] , gain3_LvLoMiredLo[1] , gain3_LvLoMiredLo[2] , gain3_LvLoMiredLo[3] ,
                                     gain3_LvLoMiredLo[4] , gain3_LvLoMiredLo[5] , gain3_LvLoMiredLo[6] , gain3_LvLoMiredLo[7] ,
                                     gain3_LvLoMiredLo[8] , gain3_LvLoMiredLo[9] , gain3_LvLoMiredLo[10], gain3_LvLoMiredLo[11],
                                     gain3_LvLoMiredLo[12], gain3_LvLoMiredLo[13], gain3_LvLoMiredLo[14], gain3_LvLoMiredLo[15],
                                     gain3_LvLoMiredLo[16], gain3_LvLoMiredLo[17], gain3_LvLoMiredLo[18], gain3_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvLoMiredUp[0] , gain3_LvLoMiredUp[1] , gain3_LvLoMiredUp[2] , gain3_LvLoMiredUp[3] ,
                                     gain3_LvLoMiredUp[4] , gain3_LvLoMiredUp[5] , gain3_LvLoMiredUp[6] , gain3_LvLoMiredUp[7] ,
                                     gain3_LvLoMiredUp[8] , gain3_LvLoMiredUp[9] , gain3_LvLoMiredUp[10], gain3_LvLoMiredUp[11],
                                     gain3_LvLoMiredUp[12], gain3_LvLoMiredUp[13], gain3_LvLoMiredUp[14], gain3_LvLoMiredUp[15],
                                     gain3_LvLoMiredUp[16], gain3_LvLoMiredUp[17], gain3_LvLoMiredUp[18], gain3_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvUpMiredLo[0] , gain3_LvUpMiredLo[1] , gain3_LvUpMiredLo[2] , gain3_LvUpMiredLo[3] ,
                                     gain3_LvUpMiredLo[4] , gain3_LvUpMiredLo[5] , gain3_LvUpMiredLo[6] , gain3_LvUpMiredLo[7] ,
                                     gain3_LvUpMiredLo[8] , gain3_LvUpMiredLo[9] , gain3_LvUpMiredLo[10], gain3_LvUpMiredLo[11],
                                     gain3_LvUpMiredLo[12], gain3_LvUpMiredLo[13], gain3_LvUpMiredLo[14], gain3_LvUpMiredLo[15],
                                     gain3_LvUpMiredLo[16], gain3_LvUpMiredLo[17], gain3_LvUpMiredLo[18], gain3_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvUpMiredUp[0] , gain3_LvUpMiredUp[1] , gain3_LvUpMiredUp[2] , gain3_LvUpMiredUp[3] ,
                                     gain3_LvUpMiredUp[4] , gain3_LvUpMiredUp[5] , gain3_LvUpMiredUp[6] , gain3_LvUpMiredUp[7] ,
                                     gain3_LvUpMiredUp[8] , gain3_LvUpMiredUp[9] , gain3_LvUpMiredUp[10], gain3_LvUpMiredUp[11],
                                     gain3_LvUpMiredUp[12], gain3_LvUpMiredUp[13], gain3_LvUpMiredUp[14], gain3_LvUpMiredUp[15],
                                     gain3_LvUpMiredUp[16], gain3_LvUpMiredUp[17], gain3_LvUpMiredUp[18], gain3_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvLoMiredLo[0] , output1_LvLoMiredLo[1] , output1_LvLoMiredLo[2] , output1_LvLoMiredLo[3] ,
                                    output1_LvLoMiredLo[4] , output1_LvLoMiredLo[5] , output1_LvLoMiredLo[6] , output1_LvLoMiredLo[7] ,
                                    output1_LvLoMiredLo[8] , output1_LvLoMiredLo[9] , output1_LvLoMiredLo[10], output1_LvLoMiredLo[11],
                                    output1_LvLoMiredLo[12], output1_LvLoMiredLo[13], output1_LvLoMiredLo[14], output1_LvLoMiredLo[15],
                                    output1_LvLoMiredLo[16], output1_LvLoMiredLo[17], output1_LvLoMiredLo[18], output1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvLoMiredUp[0] , output1_LvLoMiredUp[1] , output1_LvLoMiredUp[2] , output1_LvLoMiredUp[3] ,
                                    output1_LvLoMiredUp[4] , output1_LvLoMiredUp[5] , output1_LvLoMiredUp[6] , output1_LvLoMiredUp[7] ,
                                    output1_LvLoMiredUp[8] , output1_LvLoMiredUp[9] , output1_LvLoMiredUp[10], output1_LvLoMiredUp[11],
                                    output1_LvLoMiredUp[12], output1_LvLoMiredUp[13], output1_LvLoMiredUp[14], output1_LvLoMiredUp[15],
                                    output1_LvLoMiredUp[16], output1_LvLoMiredUp[17], output1_LvLoMiredUp[18], output1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvUpMiredLo[0] , output1_LvUpMiredLo[1] , output1_LvUpMiredLo[2] , output1_LvUpMiredLo[3] ,
                                    output1_LvUpMiredLo[4] , output1_LvUpMiredLo[5] , output1_LvUpMiredLo[6] , output1_LvUpMiredLo[7] ,
                                    output1_LvUpMiredLo[8] , output1_LvUpMiredLo[9] , output1_LvUpMiredLo[10], output1_LvUpMiredLo[11],
                                    output1_LvUpMiredLo[12], output1_LvUpMiredLo[13], output1_LvUpMiredLo[14], output1_LvUpMiredLo[15],
                                    output1_LvUpMiredLo[16], output1_LvUpMiredLo[17], output1_LvUpMiredLo[18], output1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvUpMiredUp[0] , output1_LvUpMiredUp[1] , output1_LvUpMiredUp[2] , output1_LvUpMiredUp[3] ,
                                    output1_LvUpMiredUp[4] , output1_LvUpMiredUp[5] , output1_LvUpMiredUp[6] , output1_LvUpMiredUp[7] ,
                                    output1_LvUpMiredUp[8] , output1_LvUpMiredUp[9] , output1_LvUpMiredUp[10], output1_LvUpMiredUp[11],
                                    output1_LvUpMiredUp[12], output1_LvUpMiredUp[13], output1_LvUpMiredUp[14], output1_LvUpMiredUp[15],
                                    output1_LvUpMiredUp[16], output1_LvUpMiredUp[17], output1_LvUpMiredUp[18], output1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvLoMiredLo[0] , output2_LvLoMiredLo[1] , output2_LvLoMiredLo[2] , output2_LvLoMiredLo[3] ,
                                    output2_LvLoMiredLo[4] , output2_LvLoMiredLo[5] , output2_LvLoMiredLo[6] , output2_LvLoMiredLo[7] ,
                                    output2_LvLoMiredLo[8] , output2_LvLoMiredLo[9] , output2_LvLoMiredLo[10], output2_LvLoMiredLo[11],
                                    output2_LvLoMiredLo[12], output2_LvLoMiredLo[13], output2_LvLoMiredLo[14], output2_LvLoMiredLo[15],
                                    output2_LvLoMiredLo[16], output2_LvLoMiredLo[17], output2_LvLoMiredLo[18], output2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvLoMiredUp[0] , output2_LvLoMiredUp[1] , output2_LvLoMiredUp[2] , output2_LvLoMiredUp[3] ,
                                    output2_LvLoMiredUp[4] , output2_LvLoMiredUp[5] , output2_LvLoMiredUp[6] , output2_LvLoMiredUp[7] ,
                                    output2_LvLoMiredUp[8] , output2_LvLoMiredUp[9] , output2_LvLoMiredUp[10], output2_LvLoMiredUp[11],
                                    output2_LvLoMiredUp[12], output2_LvLoMiredUp[13], output2_LvLoMiredUp[14], output2_LvLoMiredUp[15],
                                    output2_LvLoMiredUp[16], output2_LvLoMiredUp[17], output2_LvLoMiredUp[18], output2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvUpMiredLo[0] , output2_LvUpMiredLo[1] , output2_LvUpMiredLo[2] , output2_LvUpMiredLo[3] ,
                                    output2_LvUpMiredLo[4] , output2_LvUpMiredLo[5] , output2_LvUpMiredLo[6] , output2_LvUpMiredLo[7] ,
                                    output2_LvUpMiredLo[8] , output2_LvUpMiredLo[9] , output2_LvUpMiredLo[10], output2_LvUpMiredLo[11],
                                    output2_LvUpMiredLo[12], output2_LvUpMiredLo[13], output2_LvUpMiredLo[14], output2_LvUpMiredLo[15],
                                    output2_LvUpMiredLo[16], output2_LvUpMiredLo[17], output2_LvUpMiredLo[18], output2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvUpMiredUp[0] , output2_LvUpMiredUp[1] , output2_LvUpMiredUp[2] , output2_LvUpMiredUp[3] ,
                                    output2_LvUpMiredUp[4] , output2_LvUpMiredUp[5] , output2_LvUpMiredUp[6] , output2_LvUpMiredUp[7] ,
                                    output2_LvUpMiredUp[8] , output2_LvUpMiredUp[9] , output2_LvUpMiredUp[10], output2_LvUpMiredUp[11],
                                    output2_LvUpMiredUp[12], output2_LvUpMiredUp[13], output2_LvUpMiredUp[14], output2_LvUpMiredUp[15],
                                    output2_LvUpMiredUp[16], output2_LvUpMiredUp[17], output2_LvUpMiredUp[18], output2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1[0] , point1[1] , point1[2] , point1[3] ,
                                     point1[4] , point1[5] , point1[6] , point1[7] ,
                                     point1[8] , point1[9] , point1[10], point1[11],
                                     point1[12], point1[13], point1[14], point1[15],
                                     point1[16], point1[17], point1[18], point1[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_point1[0] , Final_point1[1] , Final_point1[2] , Final_point1[3] ,
                                     Final_point1[4] , Final_point1[5] , Final_point1[6] , Final_point1[7] ,
                                     Final_point1[8] , Final_point1[9] , Final_point1[10], Final_point1[11],
                                     Final_point1[12], Final_point1[13], Final_point1[14], Final_point1[15],
                                     Final_point1[16], Final_point1[17], Final_point1[18], Final_point1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2[0] , point2[1] , point2[2] , point2[3] ,
                                     point2[4] , point2[5] , point2[6] , point2[7] ,
                                     point2[8] , point2[9] , point2[10], point2[11],
                                     point2[12], point2[13], point2[14], point2[15],
                                     point2[16], point2[17], point2[18], point2[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_point2[0] , Final_point2[1] , Final_point2[2] , Final_point2[3] ,
                                     Final_point2[4] , Final_point2[5] , Final_point2[6] , Final_point2[7] ,
                                     Final_point2[8] , Final_point2[9] , Final_point2[10], Final_point2[11],
                                     Final_point2[12], Final_point2[13], Final_point2[14], Final_point2[15],
                                     Final_point2[16], Final_point2[17], Final_point2[18], Final_point2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1[0] , output1[1] , output1[2] , output1[3] ,
                                    output1[4] , output1[5] , output1[6] , output1[7] ,
                                    output1[8] , output1[9] , output1[10], output1[11],
                                    output1[12], output1[13], output1[14], output1[15],
                                    output1[16], output1[17], output1[18], output1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2[0] , output2[1] , output2[2] , output2[3] ,
                                    output2[4] , output2[5] , output2[6] , output2[7] ,
                                    output2[8] , output2[9] , output2[10], output2[11],
                                    output2[12], output2[13], output2[14], output2[15],
                                    output2[16], output2[17], output2[18], output2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1[0] , gain1[1] , gain1[2] , gain1[3] ,
                                     gain1[4] , gain1[5] , gain1[6] , gain1[7] ,
                                     gain1[8] , gain1[9] , gain1[10], gain1[11],
                                     gain1[12], gain1[13], gain1[14], gain1[15],
                                     gain1[16], gain1[17], gain1[18], gain1[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain1[0] , Final_gain1[1] , Final_gain1[2] , Final_gain1[3] ,
                                     Final_gain1[4] , Final_gain1[5] , Final_gain1[6] , Final_gain1[7] ,
                                     Final_gain1[8] , Final_gain1[9] , Final_gain1[10], Final_gain1[11],
                                     Final_gain1[12], Final_gain1[13], Final_gain1[14], Final_gain1[15],
                                     Final_gain1[16], Final_gain1[17], Final_gain1[18], Final_gain1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2[0] , gain2[1] , gain2[2] , gain2[3] ,
                                     gain2[4] , gain2[5] , gain2[6] , gain2[7] ,
                                     gain2[8] , gain2[9] , gain2[10], gain2[11],
                                     gain2[12], gain2[13], gain2[14], gain2[15],
                                     gain2[16], gain2[17], gain2[18], gain2[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain2[0] , Final_gain2[1] , Final_gain2[2] , Final_gain2[3] ,
                                     Final_gain2[4] , Final_gain2[5] , Final_gain2[6] , Final_gain2[7] ,
                                     Final_gain2[8] , Final_gain2[9] , Final_gain2[10], Final_gain2[11],
                                     Final_gain2[12], Final_gain2[13], Final_gain2[14], Final_gain2[15],
                                     Final_gain2[16], Final_gain2[17], Final_gain2[18], Final_gain2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3[0] , gain3[1] , gain3[2] , gain3[3] ,
                                     gain3[4] , gain3[5] , gain3[6] , gain3[7] ,
                                     gain3[8] , gain3[9] , gain3[10], gain3[11],
                                     gain3[12], gain3[13], gain3[14], gain3[15],
                                     gain3[16], gain3[17], gain3[18], gain3[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain3[0] , Final_gain3[1] , Final_gain3[2] , Final_gain3[3] ,
                                     Final_gain3[4] , Final_gain3[5] , Final_gain3[6] , Final_gain3[7] ,
                                     Final_gain3[8] , Final_gain3[9] , Final_gain3[10], Final_gain3[11],
                                     Final_gain3[12], Final_gain3[13], Final_gain3[14], Final_gain3[15],
                                     Final_gain3[16], Final_gain3[17], Final_gain3[18], Final_gain3[19]);

    }
}

MVOID InterParamSGainByY(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.sgy", cLogLevel, "0");
    MINT32 LVMiredDumpSGainByY = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 SGainByY000_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY000_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY000_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY000_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY000[20] = {0};
    MUINT32 Final_SGainByY000[20] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;


    Final_SGainByY000[0]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0;
    Final_SGainByY000[1]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1;
    Final_SGainByY000[2]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2;
    Final_SGainByY000[3]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3;
    Final_SGainByY000[4]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4;
    Final_SGainByY000[5]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5;
    Final_SGainByY000[6]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6;
    Final_SGainByY000[7]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7;
    Final_SGainByY000[8]  = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8;
    Final_SGainByY000[9]  = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9;
    Final_SGainByY000[10] = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10;
    Final_SGainByY000[11] = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11;
    Final_SGainByY000[12] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12;
    Final_SGainByY000[13] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13;
    Final_SGainByY000[14] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14;
    Final_SGainByY000[15] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15;
    Final_SGainByY000[16] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16;
    Final_SGainByY000[17] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17;
    Final_SGainByY000[18] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18;
    Final_SGainByY000[19] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19;

    SGainByY000_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0;
    SGainByY000_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1;
    SGainByY000_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2;
    SGainByY000_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3;
    SGainByY000_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4;
    SGainByY000_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5;
    SGainByY000_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6;
    SGainByY000_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7;
    SGainByY000_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8;
    SGainByY000_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9;
    SGainByY000_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10;
    SGainByY000_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11;
    SGainByY000_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12;
    SGainByY000_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13;
    SGainByY000_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14;
    SGainByY000_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15;
    SGainByY000_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16;
    SGainByY000_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17;
    SGainByY000_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18;
    SGainByY000_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19;

    SGainByY000_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0;
    SGainByY000_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1;
    SGainByY000_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2;
    SGainByY000_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3;
    SGainByY000_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4;
    SGainByY000_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5;
    SGainByY000_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6;
    SGainByY000_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7;
    SGainByY000_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8;
    SGainByY000_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9;
    SGainByY000_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10;
    SGainByY000_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11;
    SGainByY000_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12;
    SGainByY000_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13;
    SGainByY000_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14;
    SGainByY000_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15;
    SGainByY000_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16;
    SGainByY000_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17;
    SGainByY000_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18;
    SGainByY000_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19;

    SGainByY000_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0;
    SGainByY000_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1;
    SGainByY000_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2;
    SGainByY000_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3;
    SGainByY000_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4;
    SGainByY000_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5;
    SGainByY000_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6;
    SGainByY000_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7;
    SGainByY000_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8;
    SGainByY000_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9;
    SGainByY000_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10;
    SGainByY000_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11;
    SGainByY000_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12;
    SGainByY000_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13;
    SGainByY000_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14;
    SGainByY000_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15;
    SGainByY000_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16;
    SGainByY000_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17;
    SGainByY000_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18;
    SGainByY000_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19;

    SGainByY000_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0;
    SGainByY000_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1;
    SGainByY000_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2;
    SGainByY000_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3;
    SGainByY000_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4;
    SGainByY000_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5;
    SGainByY000_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6;
    SGainByY000_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7;
    SGainByY000_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8;
    SGainByY000_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9;
    SGainByY000_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10;
    SGainByY000_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11;
    SGainByY000_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12;
    SGainByY000_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13;
    SGainByY000_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14;
    SGainByY000_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15;
    SGainByY000_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16;
    SGainByY000_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17;
    SGainByY000_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18;
    SGainByY000_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19;

    for (i = 0; i < (sizeof(SGainByY000)/sizeof(MUINT32)); i++)
    {
        SGainByY000[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY000_LvLoMiredLo[i], SGainByY000_LvLoMiredUp[i], SGainByY000_LvUpMiredLo[i], SGainByY000_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY000[i] = SGainByY000[i];
        else
            Final_SGainByY000[i] = IIR(Final_SGainByY000[i], SGainByY000[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0  = Final_SGainByY000[0];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1  = Final_SGainByY000[1];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2  = Final_SGainByY000[2];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3  = Final_SGainByY000[3];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4  = Final_SGainByY000[4];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5  = Final_SGainByY000[5];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6  = Final_SGainByY000[6];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7  = Final_SGainByY000[7];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8  = Final_SGainByY000[8];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9  = Final_SGainByY000[9];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10 = Final_SGainByY000[10];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11 = Final_SGainByY000[11];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12 = Final_SGainByY000[12];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13 = Final_SGainByY000[13];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14 = Final_SGainByY000[14];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15 = Final_SGainByY000[15];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16 = Final_SGainByY000[16];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17 = Final_SGainByY000[17];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18 = Final_SGainByY000[18];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19 = Final_SGainByY000[19];

    // Saturation gain by Y64
    MUINT32 SGainByY064_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY064_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY064_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY064_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY064[20] = {0};
    MUINT32 Final_SGainByY064[20] = {0};

    Final_SGainByY064[0]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0;
    Final_SGainByY064[1]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1;
    Final_SGainByY064[2]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2;
    Final_SGainByY064[3]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3;
    Final_SGainByY064[4]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4;
    Final_SGainByY064[5]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5;
    Final_SGainByY064[6]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6;
    Final_SGainByY064[7]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7;
    Final_SGainByY064[8]  = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8;
    Final_SGainByY064[9]  = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9;
    Final_SGainByY064[10] = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10;
    Final_SGainByY064[11] = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11;
    Final_SGainByY064[12] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12;
    Final_SGainByY064[13] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13;
    Final_SGainByY064[14] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14;
    Final_SGainByY064[15] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15;
    Final_SGainByY064[16] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16;
    Final_SGainByY064[17] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17;
    Final_SGainByY064[18] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18;
    Final_SGainByY064[19] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19;

    SGainByY064_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0;
    SGainByY064_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1;
    SGainByY064_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2;
    SGainByY064_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3;
    SGainByY064_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4;
    SGainByY064_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5;
    SGainByY064_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6;
    SGainByY064_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7;
    SGainByY064_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8;
    SGainByY064_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9;
    SGainByY064_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10;
    SGainByY064_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11;
    SGainByY064_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12;
    SGainByY064_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13;
    SGainByY064_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14;
    SGainByY064_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15;
    SGainByY064_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16;
    SGainByY064_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17;
    SGainByY064_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18;
    SGainByY064_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19;

    SGainByY064_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0;
    SGainByY064_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1;
    SGainByY064_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2;
    SGainByY064_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3;
    SGainByY064_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4;
    SGainByY064_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5;
    SGainByY064_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6;
    SGainByY064_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7;
    SGainByY064_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8;
    SGainByY064_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9;
    SGainByY064_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10;
    SGainByY064_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11;
    SGainByY064_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12;
    SGainByY064_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13;
    SGainByY064_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14;
    SGainByY064_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15;
    SGainByY064_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16;
    SGainByY064_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17;
    SGainByY064_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18;
    SGainByY064_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19;

    SGainByY064_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0;
    SGainByY064_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1;
    SGainByY064_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2;
    SGainByY064_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3;
    SGainByY064_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4;
    SGainByY064_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5;
    SGainByY064_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6;
    SGainByY064_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7;
    SGainByY064_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8;
    SGainByY064_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9;
    SGainByY064_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10;
    SGainByY064_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11;
    SGainByY064_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12;
    SGainByY064_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13;
    SGainByY064_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14;
    SGainByY064_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15;
    SGainByY064_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16;
    SGainByY064_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17;
    SGainByY064_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18;
    SGainByY064_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19;

    SGainByY064_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0;
    SGainByY064_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1;
    SGainByY064_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2;
    SGainByY064_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3;
    SGainByY064_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4;
    SGainByY064_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5;
    SGainByY064_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6;
    SGainByY064_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7;
    SGainByY064_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8;
    SGainByY064_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9;
    SGainByY064_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10;
    SGainByY064_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11;
    SGainByY064_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12;
    SGainByY064_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13;
    SGainByY064_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14;
    SGainByY064_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15;
    SGainByY064_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16;
    SGainByY064_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17;
    SGainByY064_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18;
    SGainByY064_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19;

    for (i = 0; i < (sizeof(SGainByY064)/sizeof(MUINT32)); i++)
    {
        SGainByY064[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY064_LvLoMiredLo[i], SGainByY064_LvLoMiredUp[i], SGainByY064_LvUpMiredLo[i], SGainByY064_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY064[i] = SGainByY064[i];
        else
            Final_SGainByY064[i] = IIR(Final_SGainByY064[i], SGainByY064[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0  = Final_SGainByY064[0];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1  = Final_SGainByY064[1];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2  = Final_SGainByY064[2];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3  = Final_SGainByY064[3];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4  = Final_SGainByY064[4];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5  = Final_SGainByY064[5];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6  = Final_SGainByY064[6];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7  = Final_SGainByY064[7];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8  = Final_SGainByY064[8];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9  = Final_SGainByY064[9];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10 = Final_SGainByY064[10];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11 = Final_SGainByY064[11];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12 = Final_SGainByY064[12];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13 = Final_SGainByY064[13];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14 = Final_SGainByY064[14];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15 = Final_SGainByY064[15];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16 = Final_SGainByY064[16];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17 = Final_SGainByY064[17];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18 = Final_SGainByY064[18];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19 = Final_SGainByY064[19];

    // Saturation gain by Y128
    MUINT32 SGainByY128_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY128_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY128_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY128_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY128[20] = {0};
    MUINT32 Final_SGainByY128[20] = {0};

    Final_SGainByY128[0]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0;
    Final_SGainByY128[1]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1;
    Final_SGainByY128[2]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2;
    Final_SGainByY128[3]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3;
    Final_SGainByY128[4]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4;
    Final_SGainByY128[5]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5;
    Final_SGainByY128[6]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6;
    Final_SGainByY128[7]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7;
    Final_SGainByY128[8]  = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8;
    Final_SGainByY128[9]  = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9;
    Final_SGainByY128[10] = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10;
    Final_SGainByY128[11] = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11;
    Final_SGainByY128[12] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12;
    Final_SGainByY128[13] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13;
    Final_SGainByY128[14] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14;
    Final_SGainByY128[15] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15;
    Final_SGainByY128[16] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16;
    Final_SGainByY128[17] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17;
    Final_SGainByY128[18] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18;
    Final_SGainByY128[19] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19;

    SGainByY128_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0;
    SGainByY128_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1;
    SGainByY128_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2;
    SGainByY128_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3;
    SGainByY128_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4;
    SGainByY128_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5;
    SGainByY128_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6;
    SGainByY128_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7;
    SGainByY128_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8;
    SGainByY128_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9;
    SGainByY128_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10;
    SGainByY128_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11;
    SGainByY128_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12;
    SGainByY128_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13;
    SGainByY128_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14;
    SGainByY128_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15;
    SGainByY128_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16;
    SGainByY128_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17;
    SGainByY128_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18;
    SGainByY128_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19;

    SGainByY128_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0;
    SGainByY128_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1;
    SGainByY128_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2;
    SGainByY128_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3;
    SGainByY128_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4;
    SGainByY128_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5;
    SGainByY128_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6;
    SGainByY128_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7;
    SGainByY128_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8;
    SGainByY128_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9;
    SGainByY128_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10;
    SGainByY128_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11;
    SGainByY128_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12;
    SGainByY128_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13;
    SGainByY128_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14;
    SGainByY128_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15;
    SGainByY128_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16;
    SGainByY128_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17;
    SGainByY128_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18;
    SGainByY128_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19;

    SGainByY128_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0;
    SGainByY128_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1;
    SGainByY128_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2;
    SGainByY128_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3;
    SGainByY128_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4;
    SGainByY128_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5;
    SGainByY128_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6;
    SGainByY128_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7;
    SGainByY128_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8;
    SGainByY128_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9;
    SGainByY128_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10;
    SGainByY128_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11;
    SGainByY128_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12;
    SGainByY128_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13;
    SGainByY128_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14;
    SGainByY128_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15;
    SGainByY128_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16;
    SGainByY128_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17;
    SGainByY128_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18;
    SGainByY128_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19;

    SGainByY128_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0;
    SGainByY128_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1;
    SGainByY128_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2;
    SGainByY128_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3;
    SGainByY128_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4;
    SGainByY128_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5;
    SGainByY128_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6;
    SGainByY128_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7;
    SGainByY128_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8;
    SGainByY128_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9;
    SGainByY128_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10;
    SGainByY128_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11;
    SGainByY128_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12;
    SGainByY128_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13;
    SGainByY128_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14;
    SGainByY128_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15;
    SGainByY128_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16;
    SGainByY128_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17;
    SGainByY128_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18;
    SGainByY128_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19;

    for (i = 0; i < (sizeof(SGainByY128)/sizeof(MUINT32)); i++)
    {
        SGainByY128[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY128_LvLoMiredLo[i], SGainByY128_LvLoMiredUp[i], SGainByY128_LvUpMiredLo[i], SGainByY128_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY128[i] = SGainByY128[i];
        else
            Final_SGainByY128[i] = IIR(Final_SGainByY128[i], SGainByY128[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0  = Final_SGainByY128[0];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1  = Final_SGainByY128[1];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2  = Final_SGainByY128[2];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3  = Final_SGainByY128[3];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4  = Final_SGainByY128[4];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5  = Final_SGainByY128[5];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6  = Final_SGainByY128[6];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7  = Final_SGainByY128[7];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8  = Final_SGainByY128[8];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9  = Final_SGainByY128[9];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10 = Final_SGainByY128[10];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11 = Final_SGainByY128[11];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12 = Final_SGainByY128[12];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13 = Final_SGainByY128[13];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14 = Final_SGainByY128[14];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15 = Final_SGainByY128[15];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16 = Final_SGainByY128[16];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17 = Final_SGainByY128[17];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18 = Final_SGainByY128[18];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19 = Final_SGainByY128[19];

    // Saturation gain by Y192
    MUINT32 SGainByY192_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY192_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY192_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY192_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY192[20] = {0};
    MUINT32 Final_SGainByY192[20] = {0};

    Final_SGainByY192[0]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0;
    Final_SGainByY192[1]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1;
    Final_SGainByY192[2]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2;
    Final_SGainByY192[3]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3;
    Final_SGainByY192[4]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4;
    Final_SGainByY192[5]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5;
    Final_SGainByY192[6]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6;
    Final_SGainByY192[7]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7;
    Final_SGainByY192[8]  = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8;
    Final_SGainByY192[9]  = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9;
    Final_SGainByY192[10] = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10;
    Final_SGainByY192[11] = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11;
    Final_SGainByY192[12] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12;
    Final_SGainByY192[13] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13;
    Final_SGainByY192[14] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14;
    Final_SGainByY192[15] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15;
    Final_SGainByY192[16] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16;
    Final_SGainByY192[17] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17;
    Final_SGainByY192[18] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18;
    Final_SGainByY192[19] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19;

    SGainByY192_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0;
    SGainByY192_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1;
    SGainByY192_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2;
    SGainByY192_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3;
    SGainByY192_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4;
    SGainByY192_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5;
    SGainByY192_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6;
    SGainByY192_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7;
    SGainByY192_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8;
    SGainByY192_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9;
    SGainByY192_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10;
    SGainByY192_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11;
    SGainByY192_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12;
    SGainByY192_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13;
    SGainByY192_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14;
    SGainByY192_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15;
    SGainByY192_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16;
    SGainByY192_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17;
    SGainByY192_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18;
    SGainByY192_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19;

    SGainByY192_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0;
    SGainByY192_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1;
    SGainByY192_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2;
    SGainByY192_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3;
    SGainByY192_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4;
    SGainByY192_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5;
    SGainByY192_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6;
    SGainByY192_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7;
    SGainByY192_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8;
    SGainByY192_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9;
    SGainByY192_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10;
    SGainByY192_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11;
    SGainByY192_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12;
    SGainByY192_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13;
    SGainByY192_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14;
    SGainByY192_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15;
    SGainByY192_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16;
    SGainByY192_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17;
    SGainByY192_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18;
    SGainByY192_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19;

    SGainByY192_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0;
    SGainByY192_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1;
    SGainByY192_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2;
    SGainByY192_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3;
    SGainByY192_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4;
    SGainByY192_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5;
    SGainByY192_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6;
    SGainByY192_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7;
    SGainByY192_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8;
    SGainByY192_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9;
    SGainByY192_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10;
    SGainByY192_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11;
    SGainByY192_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12;
    SGainByY192_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13;
    SGainByY192_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14;
    SGainByY192_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15;
    SGainByY192_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16;
    SGainByY192_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17;
    SGainByY192_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18;
    SGainByY192_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19;

    SGainByY192_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0;
    SGainByY192_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1;
    SGainByY192_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2;
    SGainByY192_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3;
    SGainByY192_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4;
    SGainByY192_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5;
    SGainByY192_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6;
    SGainByY192_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7;
    SGainByY192_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8;
    SGainByY192_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9;
    SGainByY192_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10;
    SGainByY192_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11;
    SGainByY192_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12;
    SGainByY192_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13;
    SGainByY192_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14;
    SGainByY192_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15;
    SGainByY192_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16;
    SGainByY192_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17;
    SGainByY192_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18;
    SGainByY192_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19;

    for (i = 0; i < (sizeof(SGainByY192)/sizeof(MUINT32)); i++)
    {
        SGainByY192[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY192_LvLoMiredLo[i], SGainByY192_LvLoMiredUp[i], SGainByY192_LvUpMiredLo[i], SGainByY192_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY192[i] = SGainByY192[i];
        else
            Final_SGainByY192[i] = IIR(Final_SGainByY192[i], SGainByY192[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0  = Final_SGainByY192[0];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1  = Final_SGainByY192[1];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2  = Final_SGainByY192[2];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3  = Final_SGainByY192[3];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4  = Final_SGainByY192[4];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5  = Final_SGainByY192[5];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6  = Final_SGainByY192[6];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7  = Final_SGainByY192[7];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8  = Final_SGainByY192[8];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9  = Final_SGainByY192[9];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10 = Final_SGainByY192[10];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11 = Final_SGainByY192[11];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12 = Final_SGainByY192[12];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13 = Final_SGainByY192[13];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14 = Final_SGainByY192[14];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15 = Final_SGainByY192[15];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16 = Final_SGainByY192[16];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17 = Final_SGainByY192[17];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18 = Final_SGainByY192[18];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19 = Final_SGainByY192[19];

    // Saturation gain by Y256
    MUINT32 SGainByY256_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY256_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY256_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY256_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY256[20] = {0};
    MUINT32 Final_SGainByY256[20] = {0};

    Final_SGainByY256[0]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0;
    Final_SGainByY256[1]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1;
    Final_SGainByY256[2]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2;
    Final_SGainByY256[3]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3;
    Final_SGainByY256[4]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4;
    Final_SGainByY256[5]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5;
    Final_SGainByY256[6]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6;
    Final_SGainByY256[7]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7;
    Final_SGainByY256[8]  = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8;
    Final_SGainByY256[9]  = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9;
    Final_SGainByY256[10] = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10;
    Final_SGainByY256[11] = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11;
    Final_SGainByY256[12] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12;
    Final_SGainByY256[13] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13;
    Final_SGainByY256[14] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14;
    Final_SGainByY256[15] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15;
    Final_SGainByY256[16] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16;
    Final_SGainByY256[17] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17;
    Final_SGainByY256[18] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18;
    Final_SGainByY256[19] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19;

    SGainByY256_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0;
    SGainByY256_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1;
    SGainByY256_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2;
    SGainByY256_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3;
    SGainByY256_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4;
    SGainByY256_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5;
    SGainByY256_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6;
    SGainByY256_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7;
    SGainByY256_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8;
    SGainByY256_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9;
    SGainByY256_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10;
    SGainByY256_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11;
    SGainByY256_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12;
    SGainByY256_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13;
    SGainByY256_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14;
    SGainByY256_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15;
    SGainByY256_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16;
    SGainByY256_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17;
    SGainByY256_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18;
    SGainByY256_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19;

    SGainByY256_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0;
    SGainByY256_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1;
    SGainByY256_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2;
    SGainByY256_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3;
    SGainByY256_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4;
    SGainByY256_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5;
    SGainByY256_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6;
    SGainByY256_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7;
    SGainByY256_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8;
    SGainByY256_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9;
    SGainByY256_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10;
    SGainByY256_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11;
    SGainByY256_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12;
    SGainByY256_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13;
    SGainByY256_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14;
    SGainByY256_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15;
    SGainByY256_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16;
    SGainByY256_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17;
    SGainByY256_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18;
    SGainByY256_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19;

    SGainByY256_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0;
    SGainByY256_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1;
    SGainByY256_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2;
    SGainByY256_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3;
    SGainByY256_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4;
    SGainByY256_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5;
    SGainByY256_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6;
    SGainByY256_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7;
    SGainByY256_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8;
    SGainByY256_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9;
    SGainByY256_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10;
    SGainByY256_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11;
    SGainByY256_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12;
    SGainByY256_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13;
    SGainByY256_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14;
    SGainByY256_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15;
    SGainByY256_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16;
    SGainByY256_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17;
    SGainByY256_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18;
    SGainByY256_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19;

    SGainByY256_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0;
    SGainByY256_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1;
    SGainByY256_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2;
    SGainByY256_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3;
    SGainByY256_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4;
    SGainByY256_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5;
    SGainByY256_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6;
    SGainByY256_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7;
    SGainByY256_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8;
    SGainByY256_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9;
    SGainByY256_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10;
    SGainByY256_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11;
    SGainByY256_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12;
    SGainByY256_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13;
    SGainByY256_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14;
    SGainByY256_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15;
    SGainByY256_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16;
    SGainByY256_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17;
    SGainByY256_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18;
    SGainByY256_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19;

    for (i = 0; i < (sizeof(SGainByY256)/sizeof(MUINT32)); i++)
    {
        SGainByY256[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY256_LvLoMiredLo[i], SGainByY256_LvLoMiredUp[i], SGainByY256_LvUpMiredLo[i], SGainByY256_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY256[i] = SGainByY256[i];
        else
            Final_SGainByY256[i] = IIR(Final_SGainByY256[i], SGainByY256[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0  = Final_SGainByY256[0];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1  = Final_SGainByY256[1];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2  = Final_SGainByY256[2];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3  = Final_SGainByY256[3];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4  = Final_SGainByY256[4];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5  = Final_SGainByY256[5];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6  = Final_SGainByY256[6];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7  = Final_SGainByY256[7];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8  = Final_SGainByY256[8];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9  = Final_SGainByY256[9];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10 = Final_SGainByY256[10];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11 = Final_SGainByY256[11];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12 = Final_SGainByY256[12];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13 = Final_SGainByY256[13];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14 = Final_SGainByY256[14];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15 = Final_SGainByY256[15];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16 = Final_SGainByY256[16];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17 = Final_SGainByY256[17];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18 = Final_SGainByY256[18];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19 = Final_SGainByY256[19];

    if (LVMiredDumpSGainByY == 1)
    {
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvLoMiredLo[0] , SGainByY000_LvLoMiredLo[1] , SGainByY000_LvLoMiredLo[2] , SGainByY000_LvLoMiredLo[3] ,
                SGainByY000_LvLoMiredLo[4] , SGainByY000_LvLoMiredLo[5] , SGainByY000_LvLoMiredLo[6] , SGainByY000_LvLoMiredLo[7] ,
                SGainByY000_LvLoMiredLo[8] , SGainByY000_LvLoMiredLo[9] , SGainByY000_LvLoMiredLo[10], SGainByY000_LvLoMiredLo[11],
                SGainByY000_LvLoMiredLo[12], SGainByY000_LvLoMiredLo[13], SGainByY000_LvLoMiredLo[14], SGainByY000_LvLoMiredLo[15],
                SGainByY000_LvLoMiredLo[16], SGainByY000_LvLoMiredLo[17], SGainByY000_LvLoMiredLo[18], SGainByY000_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvLoMiredUp[0] , SGainByY000_LvLoMiredUp[1] , SGainByY000_LvLoMiredUp[2] , SGainByY000_LvLoMiredUp[3] ,
                SGainByY000_LvLoMiredUp[4] , SGainByY000_LvLoMiredUp[5] , SGainByY000_LvLoMiredUp[6] , SGainByY000_LvLoMiredUp[7] ,
                SGainByY000_LvLoMiredUp[8] , SGainByY000_LvLoMiredUp[9] , SGainByY000_LvLoMiredUp[10], SGainByY000_LvLoMiredUp[11],
                SGainByY000_LvLoMiredUp[12], SGainByY000_LvLoMiredUp[13], SGainByY000_LvLoMiredUp[14], SGainByY000_LvLoMiredUp[15],
                SGainByY000_LvLoMiredUp[16], SGainByY000_LvLoMiredUp[17], SGainByY000_LvLoMiredUp[18], SGainByY000_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvUpMiredLo[0] , SGainByY000_LvUpMiredLo[1] , SGainByY000_LvUpMiredLo[2] , SGainByY000_LvUpMiredLo[3] ,
                SGainByY000_LvUpMiredLo[4] , SGainByY000_LvUpMiredLo[5] , SGainByY000_LvUpMiredLo[6] , SGainByY000_LvUpMiredLo[7] ,
                SGainByY000_LvUpMiredLo[8] , SGainByY000_LvUpMiredLo[9] , SGainByY000_LvUpMiredLo[10], SGainByY000_LvUpMiredLo[11],
                SGainByY000_LvUpMiredLo[12], SGainByY000_LvUpMiredLo[13], SGainByY000_LvUpMiredLo[14], SGainByY000_LvUpMiredLo[15],
                SGainByY000_LvUpMiredLo[16], SGainByY000_LvUpMiredLo[17], SGainByY000_LvUpMiredLo[18], SGainByY000_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvUpMiredUp[0] , SGainByY000_LvUpMiredUp[1] , SGainByY000_LvUpMiredUp[2] , SGainByY000_LvUpMiredUp[3] ,
                SGainByY000_LvUpMiredUp[4] , SGainByY000_LvUpMiredUp[5] , SGainByY000_LvUpMiredUp[6] , SGainByY000_LvUpMiredUp[7] ,
                SGainByY000_LvUpMiredUp[8] , SGainByY000_LvUpMiredUp[9] , SGainByY000_LvUpMiredUp[10], SGainByY000_LvUpMiredUp[11],
                SGainByY000_LvUpMiredUp[12], SGainByY000_LvUpMiredUp[13], SGainByY000_LvUpMiredUp[14], SGainByY000_LvUpMiredUp[15],
                SGainByY000_LvUpMiredUp[16], SGainByY000_LvUpMiredUp[17], SGainByY000_LvUpMiredUp[18], SGainByY000_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000[0] , SGainByY000[1] , SGainByY000[2] , SGainByY000[3] ,
                SGainByY000[4] , SGainByY000[5] , SGainByY000[6] , SGainByY000[7] ,
                SGainByY000[8] , SGainByY000[9] , SGainByY000[10], SGainByY000[11],
                SGainByY000[12], SGainByY000[13], SGainByY000[14], SGainByY000[15],
                SGainByY000[16], SGainByY000[17], SGainByY000[18], SGainByY000[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY000[0] , Final_SGainByY000[1] , Final_SGainByY000[2] , Final_SGainByY000[3] ,
                Final_SGainByY000[4] , Final_SGainByY000[5] , Final_SGainByY000[6] , Final_SGainByY000[7] ,
                Final_SGainByY000[8] , Final_SGainByY000[9] , Final_SGainByY000[10], Final_SGainByY000[11],
                Final_SGainByY000[12], Final_SGainByY000[13], Final_SGainByY000[14], Final_SGainByY000[15],
                Final_SGainByY000[16], Final_SGainByY000[17], Final_SGainByY000[18], Final_SGainByY000[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvLoMiredLo[0] , SGainByY064_LvLoMiredLo[1] , SGainByY064_LvLoMiredLo[2] , SGainByY064_LvLoMiredLo[3] ,
                SGainByY064_LvLoMiredLo[4] , SGainByY064_LvLoMiredLo[5] , SGainByY064_LvLoMiredLo[6] , SGainByY064_LvLoMiredLo[7] ,
                SGainByY064_LvLoMiredLo[8] , SGainByY064_LvLoMiredLo[9] , SGainByY064_LvLoMiredLo[10], SGainByY064_LvLoMiredLo[11],
                SGainByY064_LvLoMiredLo[12], SGainByY064_LvLoMiredLo[13], SGainByY064_LvLoMiredLo[14], SGainByY064_LvLoMiredLo[15],
                SGainByY064_LvLoMiredLo[16], SGainByY064_LvLoMiredLo[17], SGainByY064_LvLoMiredLo[18], SGainByY064_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvLoMiredUp[0] , SGainByY064_LvLoMiredUp[1] , SGainByY064_LvLoMiredUp[2] , SGainByY064_LvLoMiredUp[3] ,
                SGainByY064_LvLoMiredUp[4] , SGainByY064_LvLoMiredUp[5] , SGainByY064_LvLoMiredUp[6] , SGainByY064_LvLoMiredUp[7] ,
                SGainByY064_LvLoMiredUp[8] , SGainByY064_LvLoMiredUp[9] , SGainByY064_LvLoMiredUp[10], SGainByY064_LvLoMiredUp[11],
                SGainByY064_LvLoMiredUp[12], SGainByY064_LvLoMiredUp[13], SGainByY064_LvLoMiredUp[14], SGainByY064_LvLoMiredUp[15],
                SGainByY064_LvLoMiredUp[16], SGainByY064_LvLoMiredUp[17], SGainByY064_LvLoMiredUp[18], SGainByY064_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvUpMiredLo[0] , SGainByY064_LvUpMiredLo[1] , SGainByY064_LvUpMiredLo[2] , SGainByY064_LvUpMiredLo[3] ,
                SGainByY064_LvUpMiredLo[4] , SGainByY064_LvUpMiredLo[5] , SGainByY064_LvUpMiredLo[6] , SGainByY064_LvUpMiredLo[7] ,
                SGainByY064_LvUpMiredLo[8] , SGainByY064_LvUpMiredLo[9] , SGainByY064_LvUpMiredLo[10], SGainByY064_LvUpMiredLo[11],
                SGainByY064_LvUpMiredLo[12], SGainByY064_LvUpMiredLo[13], SGainByY064_LvUpMiredLo[14], SGainByY064_LvUpMiredLo[15],
                SGainByY064_LvUpMiredLo[16], SGainByY064_LvUpMiredLo[17], SGainByY064_LvUpMiredLo[18], SGainByY064_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvUpMiredUp[0] , SGainByY064_LvUpMiredUp[1] , SGainByY064_LvUpMiredUp[2] , SGainByY064_LvUpMiredUp[3] ,
                SGainByY064_LvUpMiredUp[4] , SGainByY064_LvUpMiredUp[5] , SGainByY064_LvUpMiredUp[6] , SGainByY064_LvUpMiredUp[7] ,
                SGainByY064_LvUpMiredUp[8] , SGainByY064_LvUpMiredUp[9] , SGainByY064_LvUpMiredUp[10], SGainByY064_LvUpMiredUp[11],
                SGainByY064_LvUpMiredUp[12], SGainByY064_LvUpMiredUp[13], SGainByY064_LvUpMiredUp[14], SGainByY064_LvUpMiredUp[15],
                SGainByY064_LvUpMiredUp[16], SGainByY064_LvUpMiredUp[17], SGainByY064_LvUpMiredUp[18], SGainByY064_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064[0] , SGainByY064[1] , SGainByY064[2] , SGainByY064[3] ,
                SGainByY064[4] , SGainByY064[5] , SGainByY064[6] , SGainByY064[7] ,
                SGainByY064[8] , SGainByY064[9] , SGainByY064[10], SGainByY064[11],
                SGainByY064[12], SGainByY064[13], SGainByY064[14], SGainByY064[15],
                SGainByY064[16], SGainByY064[17], SGainByY064[18], SGainByY064[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY064[0] , Final_SGainByY064[1] , Final_SGainByY064[2] , Final_SGainByY064[3] ,
                Final_SGainByY064[4] , Final_SGainByY064[5] , Final_SGainByY064[6] , Final_SGainByY064[7] ,
                Final_SGainByY064[8] , Final_SGainByY064[9] , Final_SGainByY064[10], Final_SGainByY064[11],
                Final_SGainByY064[12], Final_SGainByY064[13], Final_SGainByY064[14], Final_SGainByY064[15],
                Final_SGainByY064[16], Final_SGainByY064[17], Final_SGainByY064[18], Final_SGainByY064[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvLoMiredLo[0] , SGainByY128_LvLoMiredLo[1] , SGainByY128_LvLoMiredLo[2] , SGainByY128_LvLoMiredLo[3] ,
                SGainByY128_LvLoMiredLo[4] , SGainByY128_LvLoMiredLo[5] , SGainByY128_LvLoMiredLo[6] , SGainByY128_LvLoMiredLo[7] ,
                SGainByY128_LvLoMiredLo[8] , SGainByY128_LvLoMiredLo[9] , SGainByY128_LvLoMiredLo[10], SGainByY128_LvLoMiredLo[11],
                SGainByY128_LvLoMiredLo[12], SGainByY128_LvLoMiredLo[13], SGainByY128_LvLoMiredLo[14], SGainByY128_LvLoMiredLo[15],
                SGainByY128_LvLoMiredLo[16], SGainByY128_LvLoMiredLo[17], SGainByY128_LvLoMiredLo[18], SGainByY128_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvLoMiredUp[0] , SGainByY128_LvLoMiredUp[1] , SGainByY128_LvLoMiredUp[2] , SGainByY128_LvLoMiredUp[3] ,
                SGainByY128_LvLoMiredUp[4] , SGainByY128_LvLoMiredUp[5] , SGainByY128_LvLoMiredUp[6] , SGainByY128_LvLoMiredUp[7] ,
                SGainByY128_LvLoMiredUp[8] , SGainByY128_LvLoMiredUp[9] , SGainByY128_LvLoMiredUp[10], SGainByY128_LvLoMiredUp[11],
                SGainByY128_LvLoMiredUp[12], SGainByY128_LvLoMiredUp[13], SGainByY128_LvLoMiredUp[14], SGainByY128_LvLoMiredUp[15],
                SGainByY128_LvLoMiredUp[16], SGainByY128_LvLoMiredUp[17], SGainByY128_LvLoMiredUp[18], SGainByY128_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvUpMiredLo[0] , SGainByY128_LvUpMiredLo[1] , SGainByY128_LvUpMiredLo[2] , SGainByY128_LvUpMiredLo[3] ,
                SGainByY128_LvUpMiredLo[4] , SGainByY128_LvUpMiredLo[5] , SGainByY128_LvUpMiredLo[6] , SGainByY128_LvUpMiredLo[7] ,
                SGainByY128_LvUpMiredLo[8] , SGainByY128_LvUpMiredLo[9] , SGainByY128_LvUpMiredLo[10], SGainByY128_LvUpMiredLo[11],
                SGainByY128_LvUpMiredLo[12], SGainByY128_LvUpMiredLo[13], SGainByY128_LvUpMiredLo[14], SGainByY128_LvUpMiredLo[15],
                SGainByY128_LvUpMiredLo[16], SGainByY128_LvUpMiredLo[17], SGainByY128_LvUpMiredLo[18], SGainByY128_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvUpMiredUp[0] , SGainByY128_LvUpMiredUp[1] , SGainByY128_LvUpMiredUp[2] , SGainByY128_LvUpMiredUp[3] ,
                SGainByY128_LvUpMiredUp[4] , SGainByY128_LvUpMiredUp[5] , SGainByY128_LvUpMiredUp[6] , SGainByY128_LvUpMiredUp[7] ,
                SGainByY128_LvUpMiredUp[8] , SGainByY128_LvUpMiredUp[9] , SGainByY128_LvUpMiredUp[10], SGainByY128_LvUpMiredUp[11],
                SGainByY128_LvUpMiredUp[12], SGainByY128_LvUpMiredUp[13], SGainByY128_LvUpMiredUp[14], SGainByY128_LvUpMiredUp[15],
                SGainByY128_LvUpMiredUp[16], SGainByY128_LvUpMiredUp[17], SGainByY128_LvUpMiredUp[18], SGainByY128_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128[0] , SGainByY128[1] , SGainByY128[2] , SGainByY128[3] ,
                SGainByY128[4] , SGainByY128[5] , SGainByY128[6] , SGainByY128[7] ,
                SGainByY128[8] , SGainByY128[9] , SGainByY128[10], SGainByY128[11],
                SGainByY128[12], SGainByY128[13], SGainByY128[14], SGainByY128[15],
                SGainByY128[16], SGainByY128[17], SGainByY128[18], SGainByY128[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY128[0] , Final_SGainByY128[1] , Final_SGainByY128[2] , Final_SGainByY128[3] ,
                Final_SGainByY128[4] , Final_SGainByY128[5] , Final_SGainByY128[6] , Final_SGainByY128[7] ,
                Final_SGainByY128[8] , Final_SGainByY128[9] , Final_SGainByY128[10], Final_SGainByY128[11],
                Final_SGainByY128[12], Final_SGainByY128[13], Final_SGainByY128[14], Final_SGainByY128[15],
                Final_SGainByY128[16], Final_SGainByY128[17], Final_SGainByY128[18], Final_SGainByY128[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvLoMiredLo[0] , SGainByY192_LvLoMiredLo[1] , SGainByY192_LvLoMiredLo[2] , SGainByY192_LvLoMiredLo[3] ,
                SGainByY192_LvLoMiredLo[4] , SGainByY192_LvLoMiredLo[5] , SGainByY192_LvLoMiredLo[6] , SGainByY192_LvLoMiredLo[7] ,
                SGainByY192_LvLoMiredLo[8] , SGainByY192_LvLoMiredLo[9] , SGainByY192_LvLoMiredLo[10], SGainByY192_LvLoMiredLo[11],
                SGainByY192_LvLoMiredLo[12], SGainByY192_LvLoMiredLo[13], SGainByY192_LvLoMiredLo[14], SGainByY192_LvLoMiredLo[15],
                SGainByY192_LvLoMiredLo[16], SGainByY192_LvLoMiredLo[17], SGainByY192_LvLoMiredLo[18], SGainByY192_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvLoMiredUp[0] , SGainByY192_LvLoMiredUp[1] , SGainByY192_LvLoMiredUp[2] , SGainByY192_LvLoMiredUp[3] ,
                SGainByY192_LvLoMiredUp[4] , SGainByY192_LvLoMiredUp[5] , SGainByY192_LvLoMiredUp[6] , SGainByY192_LvLoMiredUp[7] ,
                SGainByY192_LvLoMiredUp[8] , SGainByY192_LvLoMiredUp[9] , SGainByY192_LvLoMiredUp[10], SGainByY192_LvLoMiredUp[11],
                SGainByY192_LvLoMiredUp[12], SGainByY192_LvLoMiredUp[13], SGainByY192_LvLoMiredUp[14], SGainByY192_LvLoMiredUp[15],
                SGainByY192_LvLoMiredUp[16], SGainByY192_LvLoMiredUp[17], SGainByY192_LvLoMiredUp[18], SGainByY192_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvUpMiredLo[0] , SGainByY192_LvUpMiredLo[1] , SGainByY192_LvUpMiredLo[2] , SGainByY192_LvUpMiredLo[3] ,
                SGainByY192_LvUpMiredLo[4] , SGainByY192_LvUpMiredLo[5] , SGainByY192_LvUpMiredLo[6] , SGainByY192_LvUpMiredLo[7] ,
                SGainByY192_LvUpMiredLo[8] , SGainByY192_LvUpMiredLo[9] , SGainByY192_LvUpMiredLo[10], SGainByY192_LvUpMiredLo[11],
                SGainByY192_LvUpMiredLo[12], SGainByY192_LvUpMiredLo[13], SGainByY192_LvUpMiredLo[14], SGainByY192_LvUpMiredLo[15],
                SGainByY192_LvUpMiredLo[16], SGainByY192_LvUpMiredLo[17], SGainByY192_LvUpMiredLo[18], SGainByY192_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvUpMiredUp[0] , SGainByY192_LvUpMiredUp[1] , SGainByY192_LvUpMiredUp[2] , SGainByY192_LvUpMiredUp[3] ,
                SGainByY192_LvUpMiredUp[4] , SGainByY192_LvUpMiredUp[5] , SGainByY192_LvUpMiredUp[6] , SGainByY192_LvUpMiredUp[7] ,
                SGainByY192_LvUpMiredUp[8] , SGainByY192_LvUpMiredUp[9] , SGainByY192_LvUpMiredUp[10], SGainByY192_LvUpMiredUp[11],
                SGainByY192_LvUpMiredUp[12], SGainByY192_LvUpMiredUp[13], SGainByY192_LvUpMiredUp[14], SGainByY192_LvUpMiredUp[15],
                SGainByY192_LvUpMiredUp[16], SGainByY192_LvUpMiredUp[17], SGainByY192_LvUpMiredUp[18], SGainByY192_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192[0] , SGainByY192[1] , SGainByY192[2] , SGainByY192[3] ,
                SGainByY192[4] , SGainByY192[5] , SGainByY192[6] , SGainByY192[7] ,
                SGainByY192[8] , SGainByY192[9] , SGainByY192[10], SGainByY192[11],
                SGainByY192[12], SGainByY192[13], SGainByY192[14], SGainByY192[15],
                SGainByY192[16], SGainByY192[17], SGainByY192[18], SGainByY192[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY192[0] , Final_SGainByY192[1] , Final_SGainByY192[2] , Final_SGainByY192[3] ,
                Final_SGainByY192[4] , Final_SGainByY192[5] , Final_SGainByY192[6] , Final_SGainByY192[7] ,
                Final_SGainByY192[8] , Final_SGainByY192[9] , Final_SGainByY192[10], Final_SGainByY192[11],
                Final_SGainByY192[12], Final_SGainByY192[13], Final_SGainByY192[14], Final_SGainByY192[15],
                Final_SGainByY192[16], Final_SGainByY192[17], Final_SGainByY192[18], Final_SGainByY192[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvLoMiredLo[0] , SGainByY256_LvLoMiredLo[1] , SGainByY256_LvLoMiredLo[2] , SGainByY256_LvLoMiredLo[3] ,
                SGainByY256_LvLoMiredLo[4] , SGainByY256_LvLoMiredLo[5] , SGainByY256_LvLoMiredLo[6] , SGainByY256_LvLoMiredLo[7] ,
                SGainByY256_LvLoMiredLo[8] , SGainByY256_LvLoMiredLo[9] , SGainByY256_LvLoMiredLo[10], SGainByY256_LvLoMiredLo[11],
                SGainByY256_LvLoMiredLo[12], SGainByY256_LvLoMiredLo[13], SGainByY256_LvLoMiredLo[14], SGainByY256_LvLoMiredLo[15],
                SGainByY256_LvLoMiredLo[16], SGainByY256_LvLoMiredLo[17], SGainByY256_LvLoMiredLo[18], SGainByY256_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvLoMiredUp[0] , SGainByY256_LvLoMiredUp[1] , SGainByY256_LvLoMiredUp[2] , SGainByY256_LvLoMiredUp[3] ,
                SGainByY256_LvLoMiredUp[4] , SGainByY256_LvLoMiredUp[5] , SGainByY256_LvLoMiredUp[6] , SGainByY256_LvLoMiredUp[7] ,
                SGainByY256_LvLoMiredUp[8] , SGainByY256_LvLoMiredUp[9] , SGainByY256_LvLoMiredUp[10], SGainByY256_LvLoMiredUp[11],
                SGainByY256_LvLoMiredUp[12], SGainByY256_LvLoMiredUp[13], SGainByY256_LvLoMiredUp[14], SGainByY256_LvLoMiredUp[15],
                SGainByY256_LvLoMiredUp[16], SGainByY256_LvLoMiredUp[17], SGainByY256_LvLoMiredUp[18], SGainByY256_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvUpMiredLo[0] , SGainByY256_LvUpMiredLo[1] , SGainByY256_LvUpMiredLo[2] , SGainByY256_LvUpMiredLo[3] ,
                SGainByY256_LvUpMiredLo[4] , SGainByY256_LvUpMiredLo[5] , SGainByY256_LvUpMiredLo[6] , SGainByY256_LvUpMiredLo[7] ,
                SGainByY256_LvUpMiredLo[8] , SGainByY256_LvUpMiredLo[9] , SGainByY256_LvUpMiredLo[10], SGainByY256_LvUpMiredLo[11],
                SGainByY256_LvUpMiredLo[12], SGainByY256_LvUpMiredLo[13], SGainByY256_LvUpMiredLo[14], SGainByY256_LvUpMiredLo[15],
                SGainByY256_LvUpMiredLo[16], SGainByY256_LvUpMiredLo[17], SGainByY256_LvUpMiredLo[18], SGainByY256_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvUpMiredUp[0] , SGainByY256_LvUpMiredUp[1] , SGainByY256_LvUpMiredUp[2] , SGainByY256_LvUpMiredUp[3] ,
                SGainByY256_LvUpMiredUp[4] , SGainByY256_LvUpMiredUp[5] , SGainByY256_LvUpMiredUp[6] , SGainByY256_LvUpMiredUp[7] ,
                SGainByY256_LvUpMiredUp[8] , SGainByY256_LvUpMiredUp[9] , SGainByY256_LvUpMiredUp[10], SGainByY256_LvUpMiredUp[11],
                SGainByY256_LvUpMiredUp[12], SGainByY256_LvUpMiredUp[13], SGainByY256_LvUpMiredUp[14], SGainByY256_LvUpMiredUp[15],
                SGainByY256_LvUpMiredUp[16], SGainByY256_LvUpMiredUp[17], SGainByY256_LvUpMiredUp[18], SGainByY256_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256[0] , SGainByY256[1] , SGainByY256[2] , SGainByY256[3] ,
                SGainByY256[4] , SGainByY256[5] , SGainByY256[6] , SGainByY256[7] ,
                SGainByY256[8] , SGainByY256[9] , SGainByY256[10], SGainByY256[11],
                SGainByY256[12], SGainByY256[13], SGainByY256[14], SGainByY256[15],
                SGainByY256[16], SGainByY256[17], SGainByY256[18], SGainByY256[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY256[0] , Final_SGainByY256[1] , Final_SGainByY256[2] , Final_SGainByY256[3] ,
                Final_SGainByY256[4] , Final_SGainByY256[5] , Final_SGainByY256[6] , Final_SGainByY256[7] ,
                Final_SGainByY256[8] , Final_SGainByY256[9] , Final_SGainByY256[10], Final_SGainByY256[11],
                Final_SGainByY256[12], Final_SGainByY256[13], Final_SGainByY256[14], Final_SGainByY256[15],
                Final_SGainByY256[16], Final_SGainByY256[17], Final_SGainByY256[18], Final_SGainByY256[19]);

    }
}

MVOID InterParamLSP(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.lsp", cLogLevel, "0");
    MINT32 LVMiredDumpLSP = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpLSP, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 LSP1_LvLoMiredLo[4] = {0};
    MUINT32 LSP1_LvLoMiredUp[4] = {0};
    MUINT32 LSP1_LvUpMiredLo[4] = {0};
    MUINT32 LSP1_LvUpMiredUp[4] = {0};
    MUINT32 LSP1[4] = {0};
    MUINT32 Final_LSP1[4] = {0};

    MBOOL   IsCapture    = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;


    Final_LSP1[0] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_STH;
    Final_LSP1[1] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_YTH;
    Final_LSP1[2] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE;
    Final_LSP1[3] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE;

    LSP1_LvLoMiredLo[0] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_STH;
    LSP1_LvLoMiredLo[1] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_YTH;
    LSP1_LvLoMiredLo[2] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE;
    LSP1_LvLoMiredLo[3] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE;

    LSP1_LvLoMiredUp[0] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_STH;
    LSP1_LvLoMiredUp[1] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_YTH;
    LSP1_LvLoMiredUp[2] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE;
    LSP1_LvLoMiredUp[3] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE;

    LSP1_LvUpMiredLo[0] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_STH;
    LSP1_LvUpMiredLo[1] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_YTH;
    LSP1_LvUpMiredLo[2] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE;
    LSP1_LvUpMiredLo[3] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE;

    LSP1_LvUpMiredUp[0] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_STH;
    LSP1_LvUpMiredUp[1] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_YTH;
    LSP1_LvUpMiredUp[2] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE;
    LSP1_LvUpMiredUp[3] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE;

    for (i = 0; i < (sizeof(LSP1)/sizeof(MUINT32)); i++)
    {
        LSP1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, LSP1_LvLoMiredLo[i], LSP1_LvLoMiredUp[i], LSP1_LvUpMiredLo[i], LSP1_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_LSP1[i] = LSP1[i];
        else
            Final_LSP1[i] = IIR(Final_LSP1[i], LSP1[i], u4Step);
    }

    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_STH    = Final_LSP1[0];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_YTH    = Final_LSP1[1];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE = Final_LSP1[2];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE = Final_LSP1[3];

    // Low saturation protection, Group 2
    MUINT32 LSP2_LvLoMiredLo[4] = {0};
    MUINT32 LSP2_LvLoMiredUp[4] = {0};
    MUINT32 LSP2_LvUpMiredLo[4] = {0};
    MUINT32 LSP2_LvUpMiredUp[4] = {0};
    MUINT32 LSP2[4] = {0};
    MUINT32 Final_LSP2[4] = {0};

    Final_LSP2[0] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE;
    Final_LSP2[1] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_STH;
    Final_LSP2[2] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_GAIN;
    Final_LSP2[3] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LIRE_GAIN;

    LSP2_LvLoMiredLo[0] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE;
    LSP2_LvLoMiredLo[1] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_STH;
    LSP2_LvLoMiredLo[2] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_GAIN;
    LSP2_LvLoMiredLo[3] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_LSP_LIRE_GAIN;

    LSP2_LvLoMiredUp[0] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE;
    LSP2_LvLoMiredUp[1] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_STH;
    LSP2_LvLoMiredUp[2] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_GAIN;
    LSP2_LvLoMiredUp[3] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_LSP_LIRE_GAIN;

    LSP2_LvUpMiredLo[0] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE;
    LSP2_LvUpMiredLo[1] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_STH;
    LSP2_LvUpMiredLo[2] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_LSP_LSAT_GAIN;
    LSP2_LvUpMiredLo[3] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_LSP_LIRE_GAIN;

    LSP2_LvUpMiredUp[0] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE;
    LSP2_LvUpMiredUp[1] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_STH;
    LSP2_LvUpMiredUp[2] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_LSP_LSAT_GAIN;
    LSP2_LvUpMiredUp[3] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_LSP_LIRE_GAIN;

    for (i = 0; i < (sizeof(LSP2)/sizeof(MUINT32)); i++)
    {
        LSP2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, LSP2_LvLoMiredLo[i], LSP2_LvLoMiredUp[i], LSP2_LvUpMiredLo[i], LSP2_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_LSP2[i] = LSP2[i];
        else
            Final_LSP2[i] = IIR(Final_LSP2[i], LSP2[i], u4Step);
    }

    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE = Final_LSP2[0];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_STH    = Final_LSP2[1];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LSAT_GAIN   = Final_LSP2[2];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_LSP_LIRE_GAIN   = Final_LSP2[3];

    if (LVMiredDumpLSP == 1)
    {
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Lower, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvLoMiredLo[0] , LSP1_LvLoMiredLo[1] , LSP1_LvLoMiredLo[2] , LSP1_LvLoMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Lower, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvLoMiredUp[0] , LSP1_LvLoMiredUp[1] , LSP1_LvLoMiredUp[2] , LSP1_LvLoMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Upper, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvUpMiredLo[0] , LSP1_LvUpMiredLo[1] , LSP1_LvUpMiredLo[2] , LSP1_LvUpMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Upper, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvUpMiredUp[0] , LSP1_LvUpMiredUp[1] , LSP1_LvUpMiredUp[2] , LSP1_LvUpMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 Target : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1[0] , LSP1[1] , LSP1[2] , LSP1[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 Final  : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_LSP1[0] , Final_LSP1[1] , Final_LSP1[2] , Final_LSP1[3] );


        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Lower, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvLoMiredLo[0] , LSP2_LvLoMiredLo[1] , LSP2_LvLoMiredLo[2] , LSP2_LvLoMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Lower, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvLoMiredUp[0] , LSP2_LvLoMiredUp[1] , LSP2_LvLoMiredUp[2] , LSP2_LvLoMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Upper, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvUpMiredLo[0] , LSP2_LvUpMiredLo[1] , LSP2_LvUpMiredLo[2] , LSP2_LvUpMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Upper, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvUpMiredUp[0] , LSP2_LvUpMiredUp[1] , LSP2_LvUpMiredUp[2] , LSP2_LvUpMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 Target : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2[0] , LSP2[1] , LSP2[2] , LSP2[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 Final  : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_LSP2[0] , Final_LSP2[1] , Final_LSP2[2] , Final_LSP2[3] );

    }
}


MVOID InterParam3DLUT(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                      ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                      MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.dump.cm", cLogLevel, "0");
    MINT32 LVMiredDumpCM = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpCM, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);
    MUINT32  i = 0;
    MBOOL    IsCapture     = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32    i4RealLV     = rParam.i4RealLV;
    MINT32    i4UpperLV     = rParam.i4UpperLV;
    MINT32    i4LowerLV     = rParam.i4LowerLV;
    MUINT32 u4HueStep    = rParam.u4HueStep;
    MUINT32 u4SatStep    = rParam.u4SatStep;
    MUINT32 u4LumStep    = rParam.u4LumStep;

    typedef struct _PIECEWISE_LINEAR_CURVE
    {
        MINT32 Input[7];    // Input[i] => HW register POINTi (i=1~5), Input[0]:L, Input[6]:U
        MINT32 Otput[7];    // Otput[i] => not HW register               Input[0]:L, Input[6]:U
        MINT32 Slope[6];    // Slope[i] => HW register SLOPEi (i=0~5)
        MINT32 WgtLS;     // WGT_LSLOPE
        MINT32 WgtUS;     // WGT_USLOPE

    } PIECEWISE_LINEAR_CURVE;

    typedef struct _WINDOW
    {
        PIECEWISE_LINEAR_CURVE H;
        PIECEWISE_LINEAR_CURVE Y;
        PIECEWISE_LINEAR_CURVE S;

    } WINDOW;

    WINDOW W1_LvLoMiredLo = {0};
    WINDOW W1_LvLoMiredUp = {0};
    WINDOW W1_LvUpMiredLo = {0};
    WINDOW W1_LvUpMiredUp = {0};
    WINDOW W1 = {0};
    WINDOW Final_W1 = {0};

    WINDOW W2_LvLoMiredLo = {0};
    WINDOW W2_LvLoMiredUp = {0};
    WINDOW W2_LvUpMiredLo = {0};
    WINDOW W2_LvUpMiredUp = {0};
    WINDOW W2 = {0};
    WINDOW Final_W2 = {0};

    WINDOW W3_LvLoMiredLo = {0};
    WINDOW W3_LvLoMiredUp = {0};
    WINDOW W3_LvUpMiredLo = {0};
    WINDOW W3_LvUpMiredUp = {0};
    WINDOW W3 = {0};
    WINDOW Final_W3 = {0};

    // ISP_NVRAM_COLOR_CM_CONTROL_T => move to InterParam3DLUT outside ?
    // 1. some control register need to force specific value
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W1_INK_EN      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W2_INK_EN      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W3_INK_EN      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_INK_DELTA_MODE = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_INK_CH         = 0;

    // 2. some control register need to align rTBL_LV_Lo_CT_Lo
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_BYPASS      = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_BYPASS;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W1_EN       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W1_EN;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W1_WGT_EN   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W1_WGT_EN;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W2_EN       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W2_EN;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W2_WGT_EN   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W2_WGT_EN;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W3_EN       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W3_EN;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_CM_W3_WGT_EN   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_CM_W3_WGT_EN;

    // Read previous table
    Final_W1.H.Input[0] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_L;
    Final_W1.H.Input[1] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0;
    Final_W1.H.Input[2] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1;
    Final_W1.H.Input[3] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2;
    Final_W1.H.Input[4] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3;
    Final_W1.H.Input[5] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4;
    Final_W1.H.Input[6] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_U;
    Final_W1.H.Slope[0] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0;
    Final_W1.H.Slope[1] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1;
    Final_W1.H.Slope[2] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2;
    Final_W1.H.Slope[3] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3;
    Final_W1.H.Slope[4] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4;
    Final_W1.H.Slope[5] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5;
    Final_W1.H.WgtLS    = rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE;
    Final_W1.H.WgtUS    = rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE;
    Final_W1.Y.Input[0] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L;
    Final_W1.Y.Input[1] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0;
    Final_W1.Y.Input[2] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1;
    Final_W1.Y.Input[3] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2;
    Final_W1.Y.Input[4] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3;
    Final_W1.Y.Input[5] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4;
    Final_W1.Y.Input[6] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U;
    Final_W1.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0;
    Final_W1.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1;
    Final_W1.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2;
    Final_W1.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3;
    Final_W1.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4;
    Final_W1.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5;
    Final_W1.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE;
    Final_W1.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE;
    Final_W1.S.Input[0] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_L;
    Final_W1.S.Input[1] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0;
    Final_W1.S.Input[2] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1;
    Final_W1.S.Input[3] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2;
    Final_W1.S.Input[4] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3;
    Final_W1.S.Input[5] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4;
    Final_W1.S.Input[6] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_U;
    Final_W1.S.Slope[0] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0;
    Final_W1.S.Slope[1] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1;
    Final_W1.S.Slope[2] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2;
    Final_W1.S.Slope[3] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3;
    Final_W1.S.Slope[4] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4;
    Final_W1.S.Slope[5] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5;
    Final_W1.S.WgtLS    = rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE;
    Final_W1.S.WgtUS    = rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE;
    Final_W2.H.Input[0] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_L;
    Final_W2.H.Input[1] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0;
    Final_W2.H.Input[2] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1;
    Final_W2.H.Input[3] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2;
    Final_W2.H.Input[4] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3;
    Final_W2.H.Input[5] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4;
    Final_W2.H.Input[6] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_U;
    Final_W2.H.Slope[0] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0;
    Final_W2.H.Slope[1] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1;
    Final_W2.H.Slope[2] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2;
    Final_W2.H.Slope[3] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3;
    Final_W2.H.Slope[4] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4;
    Final_W2.H.Slope[5] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5;
    Final_W2.H.WgtLS    = rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE;
    Final_W2.H.WgtUS    = rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE;
    Final_W2.Y.Input[0] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L;
    Final_W2.Y.Input[1] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0;
    Final_W2.Y.Input[2] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1;
    Final_W2.Y.Input[3] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2;
    Final_W2.Y.Input[4] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3;
    Final_W2.Y.Input[5] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4;
    Final_W2.Y.Input[6] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U;
    Final_W2.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0;
    Final_W2.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1;
    Final_W2.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2;
    Final_W2.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3;
    Final_W2.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4;
    Final_W2.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5;
    Final_W2.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE;
    Final_W2.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE;
    Final_W2.S.Input[0] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_L;
    Final_W2.S.Input[1] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0;
    Final_W2.S.Input[2] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1;
    Final_W2.S.Input[3] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2;
    Final_W2.S.Input[4] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3;
    Final_W2.S.Input[5] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4;
    Final_W2.S.Input[6] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_U;
    Final_W2.S.Slope[0] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0;
    Final_W2.S.Slope[1] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1;
    Final_W2.S.Slope[2] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2;
    Final_W2.S.Slope[3] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3;
    Final_W2.S.Slope[4] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4;
    Final_W2.S.Slope[5] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5;
    Final_W2.S.WgtLS    = rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE;
    Final_W2.S.WgtUS    = rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE;
    Final_W3.H.Input[0] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_L;
    Final_W3.H.Input[1] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0;
    Final_W3.H.Input[2] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1;
    Final_W3.H.Input[3] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2;
    Final_W3.H.Input[4] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3;
    Final_W3.H.Input[5] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4;
    Final_W3.H.Input[6] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_U;
    Final_W3.H.Slope[0] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0;
    Final_W3.H.Slope[1] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1;
    Final_W3.H.Slope[2] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2;
    Final_W3.H.Slope[3] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3;
    Final_W3.H.Slope[4] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4;
    Final_W3.H.Slope[5] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5;
    Final_W3.H.WgtLS    = rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE;
    Final_W3.H.WgtUS    = rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE;
    Final_W3.Y.Input[0] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L;
    Final_W3.Y.Input[1] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0;
    Final_W3.Y.Input[2] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1;
    Final_W3.Y.Input[3] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2;
    Final_W3.Y.Input[4] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3;
    Final_W3.Y.Input[5] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4;
    Final_W3.Y.Input[6] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U;
    Final_W3.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0;
    Final_W3.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1;
    Final_W3.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2;
    Final_W3.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3;
    Final_W3.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4;
    Final_W3.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5;
    Final_W3.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE;
    Final_W3.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE;
    Final_W3.S.Input[0] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_L;
    Final_W3.S.Input[1] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0;
    Final_W3.S.Input[2] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1;
    Final_W3.S.Input[3] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2;
    Final_W3.S.Input[4] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3;
    Final_W3.S.Input[5] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4;
    Final_W3.S.Input[6] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_U;
    Final_W3.S.Slope[0] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0;
    Final_W3.S.Slope[1] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1;
    Final_W3.S.Slope[2] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2;
    Final_W3.S.Slope[3] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3;
    Final_W3.S.Slope[4] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4;
    Final_W3.S.Slope[5] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5;
    Final_W3.S.WgtLS    = rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE;
    Final_W3.S.WgtUS    = rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE;

    // Read Table : LV Lower CT Lower
    W1_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_L;
    W1_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0;
    W1_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1;
    W1_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2;
    W1_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3;
    W1_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4;
    W1_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_U;
    W1_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0;
    W1_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1;
    W1_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2;
    W1_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3;
    W1_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4;
    W1_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5;
    W1_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE;
    W1_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE;
    W1_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L;
    W1_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0;
    W1_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1;
    W1_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2;
    W1_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3;
    W1_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4;
    W1_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U;
    W1_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0;
    W1_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1;
    W1_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2;
    W1_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3;
    W1_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4;
    W1_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5;
    W1_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE;
    W1_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE;
    W1_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_L;
    W1_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0;
    W1_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1;
    W1_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2;
    W1_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3;
    W1_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4;
    W1_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_U;
    W1_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0;
    W1_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1;
    W1_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2;
    W1_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3;
    W1_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4;
    W1_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5;
    W1_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE;
    W1_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE;
    W2_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_L;
    W2_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0;
    W2_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1;
    W2_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2;
    W2_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3;
    W2_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4;
    W2_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_U;
    W2_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0;
    W2_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1;
    W2_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2;
    W2_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3;
    W2_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4;
    W2_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5;
    W2_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE;
    W2_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE;
    W2_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L;
    W2_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0;
    W2_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1;
    W2_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2;
    W2_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3;
    W2_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4;
    W2_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U;
    W2_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0;
    W2_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1;
    W2_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2;
    W2_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3;
    W2_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4;
    W2_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5;
    W2_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE;
    W2_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE;
    W2_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_L;
    W2_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0;
    W2_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1;
    W2_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2;
    W2_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3;
    W2_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4;
    W2_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_U;
    W2_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0;
    W2_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1;
    W2_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2;
    W2_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3;
    W2_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4;
    W2_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5;
    W2_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE;
    W2_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE;
    W3_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_L;
    W3_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0;
    W3_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1;
    W3_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2;
    W3_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3;
    W3_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4;
    W3_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_U;
    W3_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0;
    W3_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1;
    W3_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2;
    W3_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3;
    W3_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4;
    W3_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5;
    W3_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE;
    W3_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE;
    W3_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L;
    W3_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0;
    W3_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1;
    W3_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2;
    W3_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3;
    W3_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4;
    W3_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U;
    W3_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0;
    W3_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1;
    W3_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2;
    W3_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3;
    W3_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4;
    W3_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5;
    W3_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE;
    W3_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE;
    W3_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_L;
    W3_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0;
    W3_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1;
    W3_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2;
    W3_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3;
    W3_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4;
    W3_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_U;
    W3_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0;
    W3_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1;
    W3_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2;
    W3_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3;
    W3_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4;
    W3_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5;
    W3_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE;
    W3_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE;

    // Read Table : LV Lower CT Upper
    W1_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_L;
    W1_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0;
    W1_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1;
    W1_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2;
    W1_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3;
    W1_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4;
    W1_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_U;
    W1_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0;
    W1_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1;
    W1_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2;
    W1_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3;
    W1_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4;
    W1_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5;
    W1_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE;
    W1_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE;
    W1_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L;
    W1_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0;
    W1_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1;
    W1_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2;
    W1_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3;
    W1_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4;
    W1_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U;
    W1_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0;
    W1_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1;
    W1_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2;
    W1_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3;
    W1_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4;
    W1_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5;
    W1_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE;
    W1_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE;
    W1_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_L;
    W1_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0;
    W1_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1;
    W1_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2;
    W1_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3;
    W1_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4;
    W1_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_U;
    W1_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0;
    W1_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1;
    W1_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2;
    W1_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3;
    W1_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4;
    W1_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5;
    W1_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE;
    W1_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE;
    W2_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_L;
    W2_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0;
    W2_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1;
    W2_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2;
    W2_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3;
    W2_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4;
    W2_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_U;
    W2_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0;
    W2_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1;
    W2_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2;
    W2_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3;
    W2_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4;
    W2_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5;
    W2_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE;
    W2_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE;
    W2_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L;
    W2_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0;
    W2_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1;
    W2_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2;
    W2_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3;
    W2_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4;
    W2_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U;
    W2_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0;
    W2_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1;
    W2_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2;
    W2_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3;
    W2_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4;
    W2_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5;
    W2_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE;
    W2_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE;
    W2_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_L;
    W2_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0;
    W2_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1;
    W2_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2;
    W2_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3;
    W2_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4;
    W2_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_U;
    W2_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0;
    W2_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1;
    W2_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2;
    W2_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3;
    W2_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4;
    W2_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5;
    W2_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE;
    W2_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE;
    W3_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_L;
    W3_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0;
    W3_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1;
    W3_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2;
    W3_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3;
    W3_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4;
    W3_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_U;
    W3_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0;
    W3_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1;
    W3_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2;
    W3_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3;
    W3_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4;
    W3_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5;
    W3_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE;
    W3_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE;
    W3_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L;
    W3_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0;
    W3_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1;
    W3_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2;
    W3_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3;
    W3_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4;
    W3_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U;
    W3_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0;
    W3_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1;
    W3_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2;
    W3_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3;
    W3_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4;
    W3_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5;
    W3_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE;
    W3_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE;
    W3_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_L;
    W3_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0;
    W3_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1;
    W3_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2;
    W3_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3;
    W3_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4;
    W3_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_U;
    W3_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0;
    W3_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1;
    W3_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2;
    W3_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3;
    W3_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4;
    W3_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5;
    W3_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE;
    W3_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE;

    // Read Table : LV Upper CT Lower
    W1_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_L;
    W1_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0;
    W1_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1;
    W1_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2;
    W1_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3;
    W1_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4;
    W1_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_CM_H_W1_U;
    W1_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0;
    W1_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1;
    W1_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2;
    W1_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3;
    W1_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4;
    W1_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5;
    W1_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE;
    W1_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE;
    W1_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L;
    W1_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0;
    W1_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1;
    W1_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2;
    W1_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3;
    W1_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4;
    W1_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U;
    W1_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0;
    W1_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1;
    W1_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2;
    W1_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3;
    W1_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4;
    W1_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5;
    W1_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE;
    W1_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE;
    W1_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_L;
    W1_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0;
    W1_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1;
    W1_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2;
    W1_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3;
    W1_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4;
    W1_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_CM_S_W1_U;
    W1_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0;
    W1_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1;
    W1_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2;
    W1_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3;
    W1_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4;
    W1_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5;
    W1_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE;
    W1_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE;
    W2_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_L;
    W2_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0;
    W2_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1;
    W2_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2;
    W2_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3;
    W2_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4;
    W2_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_CM_H_W2_U;
    W2_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0;
    W2_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1;
    W2_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2;
    W2_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3;
    W2_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4;
    W2_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5;
    W2_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE;
    W2_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE;
    W2_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L;
    W2_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0;
    W2_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1;
    W2_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2;
    W2_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3;
    W2_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4;
    W2_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U;
    W2_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0;
    W2_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1;
    W2_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2;
    W2_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3;
    W2_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4;
    W2_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5;
    W2_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE;
    W2_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE;
    W2_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_L;
    W2_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0;
    W2_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1;
    W2_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2;
    W2_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3;
    W2_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4;
    W2_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_CM_S_W2_U;
    W2_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0;
    W2_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1;
    W2_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2;
    W2_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3;
    W2_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4;
    W2_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5;
    W2_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE;
    W2_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE;
    W3_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_L;
    W3_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0;
    W3_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1;
    W3_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2;
    W3_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3;
    W3_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4;
    W3_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_CM_H_W3_U;
    W3_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0;
    W3_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1;
    W3_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2;
    W3_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3;
    W3_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4;
    W3_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5;
    W3_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE;
    W3_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE;
    W3_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L;
    W3_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0;
    W3_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1;
    W3_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2;
    W3_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3;
    W3_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4;
    W3_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U;
    W3_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0;
    W3_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1;
    W3_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2;
    W3_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3;
    W3_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4;
    W3_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5;
    W3_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE;
    W3_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE;
    W3_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_L;
    W3_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0;
    W3_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1;
    W3_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2;
    W3_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3;
    W3_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4;
    W3_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_CM_S_W3_U;
    W3_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0;
    W3_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1;
    W3_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2;
    W3_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3;
    W3_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4;
    W3_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5;
    W3_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE;
    W3_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE;

    // Read Table : LV Upper CT Upper
    W1_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_L;
    W1_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0;
    W1_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1;
    W1_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2;
    W1_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3;
    W1_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4;
    W1_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_CM_H_W1_U;
    W1_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0;
    W1_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1;
    W1_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2;
    W1_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3;
    W1_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4;
    W1_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5;
    W1_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE;
    W1_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE;
    W1_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L;
    W1_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0;
    W1_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1;
    W1_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2;
    W1_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3;
    W1_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4;
    W1_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U;
    W1_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0;
    W1_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1;
    W1_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2;
    W1_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3;
    W1_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4;
    W1_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5;
    W1_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE;
    W1_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE;
    W1_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_L;
    W1_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0;
    W1_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1;
    W1_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2;
    W1_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3;
    W1_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4;
    W1_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_CM_S_W1_U;
    W1_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0;
    W1_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1;
    W1_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2;
    W1_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3;
    W1_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4;
    W1_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5;
    W1_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE;
    W1_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE;
    W2_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_L;
    W2_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0;
    W2_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1;
    W2_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2;
    W2_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3;
    W2_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4;
    W2_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_CM_H_W2_U;
    W2_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0;
    W2_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1;
    W2_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2;
    W2_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3;
    W2_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4;
    W2_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5;
    W2_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE;
    W2_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE;
    W2_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L;
    W2_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0;
    W2_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1;
    W2_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2;
    W2_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3;
    W2_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4;
    W2_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U;
    W2_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0;
    W2_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1;
    W2_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2;
    W2_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3;
    W2_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4;
    W2_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5;
    W2_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE;
    W2_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE;
    W2_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_L;
    W2_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0;
    W2_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1;
    W2_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2;
    W2_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3;
    W2_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4;
    W2_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_CM_S_W2_U;
    W2_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0;
    W2_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1;
    W2_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2;
    W2_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3;
    W2_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4;
    W2_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5;
    W2_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE;
    W2_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE;
    W3_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_L;
    W3_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0;
    W3_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1;
    W3_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2;
    W3_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3;
    W3_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4;
    W3_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_CM_H_W3_U;
    W3_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0;
    W3_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1;
    W3_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2;
    W3_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3;
    W3_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4;
    W3_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5;
    W3_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE;
    W3_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE;
    W3_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L;
    W3_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0;
    W3_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1;
    W3_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2;
    W3_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3;
    W3_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4;
    W3_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U;
    W3_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0;
    W3_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1;
    W3_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2;
    W3_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3;
    W3_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4;
    W3_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5;
    W3_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE;
    W3_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE;
    W3_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_L;
    W3_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0;
    W3_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1;
    W3_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2;
    W3_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3;
    W3_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4;
    W3_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_CM_S_W3_U;
    W3_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0;
    W3_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1;
    W3_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2;
    W3_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3;
    W3_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4;
    W3_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5;
    W3_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE;
    W3_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE;

    // W1/W2/W3 H/Y/S WgtLS Interpolation
    W1.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.WgtLS, W1_LvLoMiredUp.H.WgtLS, W1_LvUpMiredLo.H.WgtLS, W1_LvUpMiredUp.H.WgtLS);
    W1.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.WgtLS, W1_LvLoMiredUp.Y.WgtLS, W1_LvUpMiredLo.Y.WgtLS, W1_LvUpMiredUp.Y.WgtLS);
    W1.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.WgtLS, W1_LvLoMiredUp.S.WgtLS, W1_LvUpMiredLo.S.WgtLS, W1_LvUpMiredUp.S.WgtLS);
    W2.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.WgtLS, W2_LvLoMiredUp.H.WgtLS, W2_LvUpMiredLo.H.WgtLS, W2_LvUpMiredUp.H.WgtLS);
    W2.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.WgtLS, W2_LvLoMiredUp.Y.WgtLS, W2_LvUpMiredLo.Y.WgtLS, W2_LvUpMiredUp.Y.WgtLS);
    W2.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.WgtLS, W2_LvLoMiredUp.S.WgtLS, W2_LvUpMiredLo.S.WgtLS, W2_LvUpMiredUp.S.WgtLS);
    W3.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.WgtLS, W3_LvLoMiredUp.H.WgtLS, W3_LvUpMiredLo.H.WgtLS, W3_LvUpMiredUp.H.WgtLS);
    W3.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.WgtLS, W3_LvLoMiredUp.Y.WgtLS, W3_LvUpMiredLo.Y.WgtLS, W3_LvUpMiredUp.Y.WgtLS);
    W3.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.WgtLS, W3_LvLoMiredUp.S.WgtLS, W3_LvUpMiredLo.S.WgtLS, W3_LvUpMiredUp.S.WgtLS);

    // W1/W2/W3 H/Y/S WgtUS Interpolation
    W1.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.WgtUS, W1_LvLoMiredUp.H.WgtUS, W1_LvUpMiredLo.H.WgtUS, W1_LvUpMiredUp.H.WgtUS);
    W1.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.WgtUS, W1_LvLoMiredUp.Y.WgtUS, W1_LvUpMiredLo.Y.WgtUS, W1_LvUpMiredUp.Y.WgtUS);
    W1.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.WgtUS, W1_LvLoMiredUp.S.WgtUS, W1_LvUpMiredLo.S.WgtUS, W1_LvUpMiredUp.S.WgtUS);
    W2.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.WgtUS, W2_LvLoMiredUp.H.WgtUS, W2_LvUpMiredLo.H.WgtUS, W2_LvUpMiredUp.H.WgtUS);
    W2.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.WgtUS, W2_LvLoMiredUp.Y.WgtUS, W2_LvUpMiredLo.Y.WgtUS, W2_LvUpMiredUp.Y.WgtUS);
    W2.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.WgtUS, W2_LvLoMiredUp.S.WgtUS, W2_LvUpMiredLo.S.WgtUS, W2_LvUpMiredUp.S.WgtUS);
    W3.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.WgtUS, W3_LvLoMiredUp.H.WgtUS, W3_LvUpMiredLo.H.WgtUS, W3_LvUpMiredUp.H.WgtUS);
    W3.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.WgtUS, W3_LvLoMiredUp.Y.WgtUS, W3_LvUpMiredLo.Y.WgtUS, W3_LvUpMiredUp.Y.WgtUS);
    W3.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.WgtUS, W3_LvLoMiredUp.S.WgtUS, W3_LvUpMiredLo.S.WgtUS, W3_LvUpMiredUp.S.WgtUS);

    // W1/W2/W3 H/Y/S Input[i] i=0~6 Interpolation
    for (i = 0; i < 7; i++)
    {
        W1.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.Input[i], W1_LvLoMiredUp.H.Input[i], W1_LvUpMiredLo.H.Input[i], W1_LvUpMiredUp.H.Input[i]);
        W1.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.Input[i], W1_LvLoMiredUp.Y.Input[i], W1_LvUpMiredLo.Y.Input[i], W1_LvUpMiredUp.Y.Input[i]);
        W1.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.Input[i], W1_LvLoMiredUp.S.Input[i], W1_LvUpMiredLo.S.Input[i], W1_LvUpMiredUp.S.Input[i]);
        W2.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.Input[i], W2_LvLoMiredUp.H.Input[i], W2_LvUpMiredLo.H.Input[i], W2_LvUpMiredUp.H.Input[i]);
        W2.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.Input[i], W2_LvLoMiredUp.Y.Input[i], W2_LvUpMiredLo.Y.Input[i], W2_LvUpMiredUp.Y.Input[i]);
        W2.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.Input[i], W2_LvLoMiredUp.S.Input[i], W2_LvUpMiredLo.S.Input[i], W2_LvUpMiredUp.S.Input[i]);
        W3.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.Input[i], W3_LvLoMiredUp.H.Input[i], W3_LvUpMiredLo.H.Input[i], W3_LvUpMiredUp.H.Input[i]);
        W3.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.Input[i], W3_LvLoMiredUp.Y.Input[i], W3_LvUpMiredLo.Y.Input[i], W3_LvUpMiredUp.Y.Input[i]);
        W3.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.Input[i], W3_LvLoMiredUp.S.Input[i], W3_LvUpMiredLo.S.Input[i], W3_LvUpMiredUp.S.Input[i]);
    }

    // fix start point
	W1_LvLoMiredLo.H.Otput[0] =  W1_LvLoMiredLo.H.Input[0];
	W1_LvLoMiredLo.Y.Otput[0] =  W1_LvLoMiredLo.Y.Input[0];
	W1_LvLoMiredLo.S.Otput[0] =  W1_LvLoMiredLo.S.Input[0];
	W2_LvLoMiredLo.H.Otput[0] =  W2_LvLoMiredLo.H.Input[0];
	W2_LvLoMiredLo.Y.Otput[0] =  W2_LvLoMiredLo.Y.Input[0];
	W2_LvLoMiredLo.S.Otput[0] =  W2_LvLoMiredLo.S.Input[0];
	W3_LvLoMiredLo.H.Otput[0] =  W3_LvLoMiredLo.H.Input[0];
	W3_LvLoMiredLo.Y.Otput[0] =  W3_LvLoMiredLo.Y.Input[0];
	W3_LvLoMiredLo.S.Otput[0] =  W3_LvLoMiredLo.S.Input[0];

	W1_LvLoMiredUp.H.Otput[0] =  W1_LvLoMiredUp.H.Input[0];
	W1_LvLoMiredUp.Y.Otput[0] =  W1_LvLoMiredUp.Y.Input[0];
	W1_LvLoMiredUp.S.Otput[0] =  W1_LvLoMiredUp.S.Input[0];
	W2_LvLoMiredUp.H.Otput[0] =  W2_LvLoMiredUp.H.Input[0];
	W2_LvLoMiredUp.Y.Otput[0] =  W2_LvLoMiredUp.Y.Input[0];
	W2_LvLoMiredUp.S.Otput[0] =  W2_LvLoMiredUp.S.Input[0];
	W3_LvLoMiredUp.H.Otput[0] =  W3_LvLoMiredUp.H.Input[0];
	W3_LvLoMiredUp.Y.Otput[0] =  W3_LvLoMiredUp.Y.Input[0];
	W3_LvLoMiredUp.S.Otput[0] =  W3_LvLoMiredUp.S.Input[0];

	W1_LvUpMiredLo.H.Otput[0] =  W1_LvUpMiredLo.H.Input[0];
	W1_LvUpMiredLo.Y.Otput[0] =  W1_LvUpMiredLo.Y.Input[0];
	W1_LvUpMiredLo.S.Otput[0] =  W1_LvUpMiredLo.S.Input[0];
	W2_LvUpMiredLo.H.Otput[0] =  W2_LvUpMiredLo.H.Input[0];
	W2_LvUpMiredLo.Y.Otput[0] =  W2_LvUpMiredLo.Y.Input[0];
	W2_LvUpMiredLo.S.Otput[0] =  W2_LvUpMiredLo.S.Input[0];
	W3_LvUpMiredLo.H.Otput[0] =  W3_LvUpMiredLo.H.Input[0];
	W3_LvUpMiredLo.Y.Otput[0] =  W3_LvUpMiredLo.Y.Input[0];
	W3_LvUpMiredLo.S.Otput[0] =  W3_LvUpMiredLo.S.Input[0];

	W1_LvUpMiredUp.H.Otput[0] =  W1_LvUpMiredUp.H.Input[0];
	W1_LvUpMiredUp.Y.Otput[0] =  W1_LvUpMiredUp.Y.Input[0];
	W1_LvUpMiredUp.S.Otput[0] =  W1_LvUpMiredUp.S.Input[0];
	W2_LvUpMiredUp.H.Otput[0] =  W2_LvUpMiredUp.H.Input[0];
	W2_LvUpMiredUp.Y.Otput[0] =  W2_LvUpMiredUp.Y.Input[0];
	W2_LvUpMiredUp.S.Otput[0] =  W2_LvUpMiredUp.S.Input[0];
	W3_LvUpMiredUp.H.Otput[0] =  W3_LvUpMiredUp.H.Input[0];
	W3_LvUpMiredUp.Y.Otput[0] =  W3_LvUpMiredUp.Y.Input[0];
	W3_LvUpMiredUp.S.Otput[0] =  W3_LvUpMiredUp.S.Input[0];

    W1.H.Otput[0] = W1.H.Input[0];
    W1.Y.Otput[0] = W1.Y.Input[0];
    W1.S.Otput[0] = W1.S.Input[0];
    W2.H.Otput[0] = W2.H.Input[0];
    W2.Y.Otput[0] = W2.Y.Input[0];
    W2.S.Otput[0] = W2.S.Input[0];
    W3.H.Otput[0] = W3.H.Input[0];
    W3.Y.Otput[0] = W3.Y.Input[0];
    W3.S.Otput[0] = W3.S.Input[0];

    // fix end point
	W1_LvLoMiredLo.H.Otput[6] =  W1_LvLoMiredLo.H.Input[6];
	W1_LvLoMiredLo.Y.Otput[6] =  W1_LvLoMiredLo.Y.Input[6];
	W1_LvLoMiredLo.S.Otput[6] =  W1_LvLoMiredLo.S.Input[6];
	W2_LvLoMiredLo.H.Otput[6] =  W2_LvLoMiredLo.H.Input[6];
	W2_LvLoMiredLo.Y.Otput[6] =  W2_LvLoMiredLo.Y.Input[6];
	W2_LvLoMiredLo.S.Otput[6] =  W2_LvLoMiredLo.S.Input[6];
	W3_LvLoMiredLo.H.Otput[6] =  W3_LvLoMiredLo.H.Input[6];
	W3_LvLoMiredLo.Y.Otput[6] =  W3_LvLoMiredLo.Y.Input[6];
	W3_LvLoMiredLo.S.Otput[6] =  W3_LvLoMiredLo.S.Input[6];

	W1_LvLoMiredUp.H.Otput[6] =  W1_LvLoMiredUp.H.Input[6];
	W1_LvLoMiredUp.Y.Otput[6] =  W1_LvLoMiredUp.Y.Input[6];
	W1_LvLoMiredUp.S.Otput[6] =  W1_LvLoMiredUp.S.Input[6];
	W2_LvLoMiredUp.H.Otput[6] =  W2_LvLoMiredUp.H.Input[6];
	W2_LvLoMiredUp.Y.Otput[6] =  W2_LvLoMiredUp.Y.Input[6];
	W2_LvLoMiredUp.S.Otput[6] =  W2_LvLoMiredUp.S.Input[6];
	W3_LvLoMiredUp.H.Otput[6] =  W3_LvLoMiredUp.H.Input[6];
	W3_LvLoMiredUp.Y.Otput[6] =  W3_LvLoMiredUp.Y.Input[6];
	W3_LvLoMiredUp.S.Otput[6] =  W3_LvLoMiredUp.S.Input[6];

	W1_LvUpMiredLo.H.Otput[6] =  W1_LvUpMiredLo.H.Input[6];
	W1_LvUpMiredLo.Y.Otput[6] =  W1_LvUpMiredLo.Y.Input[6];
	W1_LvUpMiredLo.S.Otput[6] =  W1_LvUpMiredLo.S.Input[6];
	W2_LvUpMiredLo.H.Otput[6] =  W2_LvUpMiredLo.H.Input[6];
	W2_LvUpMiredLo.Y.Otput[6] =  W2_LvUpMiredLo.Y.Input[6];
	W2_LvUpMiredLo.S.Otput[6] =  W2_LvUpMiredLo.S.Input[6];
	W3_LvUpMiredLo.H.Otput[6] =  W3_LvUpMiredLo.H.Input[6];
	W3_LvUpMiredLo.Y.Otput[6] =  W3_LvUpMiredLo.Y.Input[6];
	W3_LvUpMiredLo.S.Otput[6] =  W3_LvUpMiredLo.S.Input[6];

	W1_LvUpMiredUp.H.Otput[6] =  W1_LvUpMiredUp.H.Input[6];
	W1_LvUpMiredUp.Y.Otput[6] =  W1_LvUpMiredUp.Y.Input[6];
	W1_LvUpMiredUp.S.Otput[6] =  W1_LvUpMiredUp.S.Input[6];
	W2_LvUpMiredUp.H.Otput[6] =  W2_LvUpMiredUp.H.Input[6];
	W2_LvUpMiredUp.Y.Otput[6] =  W2_LvUpMiredUp.Y.Input[6];
	W2_LvUpMiredUp.S.Otput[6] =  W2_LvUpMiredUp.S.Input[6];
	W3_LvUpMiredUp.H.Otput[6] =  W3_LvUpMiredUp.H.Input[6];
	W3_LvUpMiredUp.Y.Otput[6] =  W3_LvUpMiredUp.Y.Input[6];
	W3_LvUpMiredUp.S.Otput[6] =  W3_LvUpMiredUp.S.Input[6];

    W1.H.Otput[6] = W1.H.Input[6];
    W1.Y.Otput[6] = W1.Y.Input[6];
    W1.S.Otput[6] = W1.S.Input[6];
    W2.H.Otput[6] = W2.H.Input[6];
    W2.Y.Otput[6] = W2.Y.Input[6];
    W2.S.Otput[6] = W2.S.Input[6];
    W3.H.Otput[6] = W3.H.Input[6];
    W3.Y.Otput[6] = W3.Y.Input[6];
    W3.S.Otput[6] = W3.S.Input[6];

    // Get W1/W2/W3 H/Y/S Otput[i] i=1~5
    for (i = 0; i < 5; i++)
    {
        // get 4 Otput[i] i=1~5 from Otput[i+1] = Otput[i] + (Input[i+1]-Input[i])*Slope[i]/128, then interpolate unique Otput[i] i=1~5
        W1_LvLoMiredLo.H.Otput[i+1] = W1_LvLoMiredLo.H.Otput[i] + (((W1_LvLoMiredLo.H.Input[i+1] - W1_LvLoMiredLo.H.Input[i])*W1_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W1_LvLoMiredLo.Y.Otput[i+1] = W1_LvLoMiredLo.Y.Otput[i] + (((W1_LvLoMiredLo.Y.Input[i+1] - W1_LvLoMiredLo.Y.Input[i])*W1_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W1_LvLoMiredLo.S.Otput[i+1] = W1_LvLoMiredLo.S.Otput[i] + (((W1_LvLoMiredLo.S.Input[i+1] - W1_LvLoMiredLo.S.Input[i])*W1_LvLoMiredLo.S.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.H.Otput[i+1] = W2_LvLoMiredLo.H.Otput[i] + (((W2_LvLoMiredLo.H.Input[i+1] - W2_LvLoMiredLo.H.Input[i])*W2_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.Y.Otput[i+1] = W2_LvLoMiredLo.Y.Otput[i] + (((W2_LvLoMiredLo.Y.Input[i+1] - W2_LvLoMiredLo.Y.Input[i])*W2_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.S.Otput[i+1] = W2_LvLoMiredLo.S.Otput[i] + (((W2_LvLoMiredLo.S.Input[i+1] - W2_LvLoMiredLo.S.Input[i])*W2_LvLoMiredLo.S.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.H.Otput[i+1] = W3_LvLoMiredLo.H.Otput[i] + (((W3_LvLoMiredLo.H.Input[i+1] - W3_LvLoMiredLo.H.Input[i])*W3_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.Y.Otput[i+1] = W3_LvLoMiredLo.Y.Otput[i] + (((W3_LvLoMiredLo.Y.Input[i+1] - W3_LvLoMiredLo.Y.Input[i])*W3_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.S.Otput[i+1] = W3_LvLoMiredLo.S.Otput[i] + (((W3_LvLoMiredLo.S.Input[i+1] - W3_LvLoMiredLo.S.Input[i])*W3_LvLoMiredLo.S.Slope[i] + 64) >> 7);

        W1_LvLoMiredUp.H.Otput[i+1] = W1_LvLoMiredUp.H.Otput[i] + (((W1_LvLoMiredUp.H.Input[i+1] - W1_LvLoMiredUp.H.Input[i])*W1_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W1_LvLoMiredUp.Y.Otput[i+1] = W1_LvLoMiredUp.Y.Otput[i] + (((W1_LvLoMiredUp.Y.Input[i+1] - W1_LvLoMiredUp.Y.Input[i])*W1_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W1_LvLoMiredUp.S.Otput[i+1] = W1_LvLoMiredUp.S.Otput[i] + (((W1_LvLoMiredUp.S.Input[i+1] - W1_LvLoMiredUp.S.Input[i])*W1_LvLoMiredUp.S.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.H.Otput[i+1] = W2_LvLoMiredUp.H.Otput[i] + (((W2_LvLoMiredUp.H.Input[i+1] - W2_LvLoMiredUp.H.Input[i])*W2_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.Y.Otput[i+1] = W2_LvLoMiredUp.Y.Otput[i] + (((W2_LvLoMiredUp.Y.Input[i+1] - W2_LvLoMiredUp.Y.Input[i])*W2_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.S.Otput[i+1] = W2_LvLoMiredUp.S.Otput[i] + (((W2_LvLoMiredUp.S.Input[i+1] - W2_LvLoMiredUp.S.Input[i])*W2_LvLoMiredUp.S.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.H.Otput[i+1] = W3_LvLoMiredUp.H.Otput[i] + (((W3_LvLoMiredUp.H.Input[i+1] - W3_LvLoMiredUp.H.Input[i])*W3_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.Y.Otput[i+1] = W3_LvLoMiredUp.Y.Otput[i] + (((W3_LvLoMiredUp.Y.Input[i+1] - W3_LvLoMiredUp.Y.Input[i])*W3_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.S.Otput[i+1] = W3_LvLoMiredUp.S.Otput[i] + (((W3_LvLoMiredUp.S.Input[i+1] - W3_LvLoMiredUp.S.Input[i])*W3_LvLoMiredUp.S.Slope[i] + 64) >> 7);

        W1_LvUpMiredLo.H.Otput[i+1] = W1_LvUpMiredLo.H.Otput[i] + (((W1_LvUpMiredLo.H.Input[i+1] - W1_LvUpMiredLo.H.Input[i])*W1_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W1_LvUpMiredLo.Y.Otput[i+1] = W1_LvUpMiredLo.Y.Otput[i] + (((W1_LvUpMiredLo.Y.Input[i+1] - W1_LvUpMiredLo.Y.Input[i])*W1_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W1_LvUpMiredLo.S.Otput[i+1] = W1_LvUpMiredLo.S.Otput[i] + (((W1_LvUpMiredLo.S.Input[i+1] - W1_LvUpMiredLo.S.Input[i])*W1_LvUpMiredLo.S.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.H.Otput[i+1] = W2_LvUpMiredLo.H.Otput[i] + (((W2_LvUpMiredLo.H.Input[i+1] - W2_LvUpMiredLo.H.Input[i])*W2_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.Y.Otput[i+1] = W2_LvUpMiredLo.Y.Otput[i] + (((W2_LvUpMiredLo.Y.Input[i+1] - W2_LvUpMiredLo.Y.Input[i])*W2_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.S.Otput[i+1] = W2_LvUpMiredLo.S.Otput[i] + (((W2_LvUpMiredLo.S.Input[i+1] - W2_LvUpMiredLo.S.Input[i])*W2_LvUpMiredLo.S.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.H.Otput[i+1] = W3_LvUpMiredLo.H.Otput[i] + (((W3_LvUpMiredLo.H.Input[i+1] - W3_LvUpMiredLo.H.Input[i])*W3_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.Y.Otput[i+1] = W3_LvUpMiredLo.Y.Otput[i] + (((W3_LvUpMiredLo.Y.Input[i+1] - W3_LvUpMiredLo.Y.Input[i])*W3_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.S.Otput[i+1] = W3_LvUpMiredLo.S.Otput[i] + (((W3_LvUpMiredLo.S.Input[i+1] - W3_LvUpMiredLo.S.Input[i])*W3_LvUpMiredLo.S.Slope[i] + 64) >> 7);

        W1_LvUpMiredUp.H.Otput[i+1] = W1_LvUpMiredUp.H.Otput[i] + (((W1_LvUpMiredUp.H.Input[i+1] - W1_LvUpMiredUp.H.Input[i])*W1_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W1_LvUpMiredUp.Y.Otput[i+1] = W1_LvUpMiredUp.Y.Otput[i] + (((W1_LvUpMiredUp.Y.Input[i+1] - W1_LvUpMiredUp.Y.Input[i])*W1_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W1_LvUpMiredUp.S.Otput[i+1] = W1_LvUpMiredUp.S.Otput[i] + (((W1_LvUpMiredUp.S.Input[i+1] - W1_LvUpMiredUp.S.Input[i])*W1_LvUpMiredUp.S.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.H.Otput[i+1] = W2_LvUpMiredUp.H.Otput[i] + (((W2_LvUpMiredUp.H.Input[i+1] - W2_LvUpMiredUp.H.Input[i])*W2_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.Y.Otput[i+1] = W2_LvUpMiredUp.Y.Otput[i] + (((W2_LvUpMiredUp.Y.Input[i+1] - W2_LvUpMiredUp.Y.Input[i])*W2_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.S.Otput[i+1] = W2_LvUpMiredUp.S.Otput[i] + (((W2_LvUpMiredUp.S.Input[i+1] - W2_LvUpMiredUp.S.Input[i])*W2_LvUpMiredUp.S.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.H.Otput[i+1] = W3_LvUpMiredUp.H.Otput[i] + (((W3_LvUpMiredUp.H.Input[i+1] - W3_LvUpMiredUp.H.Input[i])*W3_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.Y.Otput[i+1] = W3_LvUpMiredUp.Y.Otput[i] + (((W3_LvUpMiredUp.Y.Input[i+1] - W3_LvUpMiredUp.Y.Input[i])*W3_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.S.Otput[i+1] = W3_LvUpMiredUp.S.Otput[i] + (((W3_LvUpMiredUp.S.Input[i+1] - W3_LvUpMiredUp.S.Input[i])*W3_LvUpMiredUp.S.Slope[i] + 64) >> 7);

        W1.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.Otput[i+1], W1_LvLoMiredUp.H.Otput[i+1], W1_LvUpMiredLo.H.Otput[i+1], W1_LvUpMiredUp.H.Otput[i+1]);
        W1.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.Otput[i+1], W1_LvLoMiredUp.Y.Otput[i+1], W1_LvUpMiredLo.Y.Otput[i+1], W1_LvUpMiredUp.Y.Otput[i+1]);
        W1.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.Otput[i+1], W1_LvLoMiredUp.S.Otput[i+1], W1_LvUpMiredLo.S.Otput[i+1], W1_LvUpMiredUp.S.Otput[i+1]);
        W2.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.Otput[i+1], W2_LvLoMiredUp.H.Otput[i+1], W2_LvUpMiredLo.H.Otput[i+1], W2_LvUpMiredUp.H.Otput[i+1]);
        W2.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.Otput[i+1], W2_LvLoMiredUp.Y.Otput[i+1], W2_LvUpMiredLo.Y.Otput[i+1], W2_LvUpMiredUp.Y.Otput[i+1]);
        W2.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.Otput[i+1], W2_LvLoMiredUp.S.Otput[i+1], W2_LvUpMiredLo.S.Otput[i+1], W2_LvUpMiredUp.S.Otput[i+1]);
        W3.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.Otput[i+1], W3_LvLoMiredUp.H.Otput[i+1], W3_LvUpMiredLo.H.Otput[i+1], W3_LvUpMiredUp.H.Otput[i+1]);
        W3.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.Otput[i+1], W3_LvLoMiredUp.Y.Otput[i+1], W3_LvUpMiredLo.Y.Otput[i+1], W3_LvUpMiredUp.Y.Otput[i+1]);
        W3.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.Otput[i+1], W3_LvLoMiredUp.S.Otput[i+1], W3_LvUpMiredLo.S.Otput[i+1], W3_LvUpMiredUp.S.Otput[i+1]);
    }

    // Get W1/W2/W3 H/Y/S Slope[i] i=0~5
    // -------------------------------------------------------------------------------------------------------
    // We have    : Otput[i+1] = Otput[i] + (Input[i+1] - Input[i])*Slope[i]/128
    // This means : Slope[i] = (Otput[i+1] - Otput[i])*128/(Input[i+1] - Input[i])
    // -------------------------------------------------------------------------------------------------------
    for (i = 0; i < 6; i++)
    {
        if (W1.H.Input[i+1] == W1.H.Input[i]) // to avoid divide zero
        {
            W1.H.Slope[i] = 128;
        }
        else if (W1.H.Otput[i+1] == W1.H.Otput[i])
        {
            W1.H.Slope[i] = 0;
        }
        else
        {
            W1.H.Slope[i] = (((W1.H.Otput[i+1] - W1.H.Otput[i])<<7) + ((W1.H.Input[i+1] - W1.H.Input[i])>>1))/(W1.H.Input[i+1] - W1.H.Input[i]); // ((W1.H.Input[i+1] - W1.H.Input[i])>>1) for rounding
        }


        if (W1.Y.Input[i+1] == W1.Y.Input[i]) // to avoid divide zero
        {
            W1.Y.Slope[i] = 128;
        }
        else if (W1.Y.Otput[i+1] == W1.Y.Otput[i])
        {
            W1.Y.Slope[i] = 0;
        }
        else
        {
            W1.Y.Slope[i] = (((W1.Y.Otput[i+1] - W1.Y.Otput[i])<<7) + ((W1.Y.Input[i+1] - W1.Y.Input[i])>>1))/(W1.Y.Input[i+1] - W1.Y.Input[i]); // ((W1.Y.Input[i+1] - W1.Y.Input[i])>>1) for rounding
        }


        if (W1.S.Input[i+1] == W1.S.Input[i]) // to avoid divide zero
        {
            W1.S.Slope[i] = 128;
        }
        else if (W1.S.Otput[i+1] == W1.S.Otput[i])
        {
            W1.S.Slope[i] = 0;
        }
        else
        {
            W1.S.Slope[i] = (((W1.S.Otput[i+1] - W1.S.Otput[i])<<7) + ((W1.S.Input[i+1] - W1.S.Input[i])>>1))/(W1.S.Input[i+1] - W1.S.Input[i]); // ((W1.S.Input[i+1] - W1.S.Input[i])>>1) for rounding
        }




        if (W2.H.Input[i+1] == W2.H.Input[i]) // to avoid divide zero
        {
            W2.H.Slope[i] = 128;
        }
        else if (W2.H.Otput[i+1] == W2.H.Otput[i])
        {
            W2.H.Slope[i] = 0;
        }
        else
        {
            W2.H.Slope[i] = (((W2.H.Otput[i+1] - W2.H.Otput[i])<<7) + ((W2.H.Input[i+1] - W2.H.Input[i])>>1))/(W2.H.Input[i+1] - W2.H.Input[i]); // ((W2.H.Input[i+1] - W2.H.Input[i])>>1) for rounding
        }


        if (W2.Y.Input[i+1] == W2.Y.Input[i]) // to avoid divide zero
        {
            W2.Y.Slope[i] = 128;
        }
        else if (W2.Y.Otput[i+1] == W2.Y.Otput[i])
        {
            W2.Y.Slope[i] = 0;
        }
        else
        {
            W2.Y.Slope[i] = (((W2.Y.Otput[i+1] - W2.Y.Otput[i])<<7) + ((W2.Y.Input[i+1] - W2.Y.Input[i])>>1))/(W2.Y.Input[i+1] - W2.Y.Input[i]); // ((W2.Y.Input[i+1] - W2.Y.Input[i])>>1) for rounding
        }


        if (W2.S.Input[i+1] == W2.S.Input[i]) // to avoid divide zero
        {
            W2.S.Slope[i] = 128;
        }
        else if (W2.S.Otput[i+1] == W2.S.Otput[i])
        {
            W2.S.Slope[i] = 0;
        }
        else
        {
            W2.S.Slope[i] = (((W2.S.Otput[i+1] - W2.S.Otput[i])<<7) + ((W2.S.Input[i+1] - W2.S.Input[i])>>1))/(W2.S.Input[i+1] - W2.S.Input[i]); // ((W2.S.Input[i+1] - W2.S.Input[i])>>1) for rounding
        }



        if (W3.H.Input[i+1] == W3.H.Input[i]) // to avoid divide zero
        {
            W3.H.Slope[i] = 128;
        }
        else if (W3.H.Otput[i+1] == W3.H.Otput[i])
        {
            W3.H.Slope[i] = 0;
        }
        else
        {
            W3.H.Slope[i] = (((W3.H.Otput[i+1] - W3.H.Otput[i])<<7) + ((W3.H.Input[i+1] - W3.H.Input[i])>>1))/(W3.H.Input[i+1] - W3.H.Input[i]); // ((W3.H.Input[i+1] - W3.H.Input[i])>>1) for rounding
        }


        if (W3.Y.Input[i+1] == W3.Y.Input[i]) // to avoid divide zero
        {
            W3.Y.Slope[i] = 128;
        }
        else if (W3.Y.Otput[i+1] == W3.Y.Otput[i])
        {
            W3.Y.Slope[i] = 0;
        }
        else
        {
            W3.Y.Slope[i] = (((W3.Y.Otput[i+1] - W3.Y.Otput[i])<<7) + ((W3.Y.Input[i+1] - W3.Y.Input[i])>>1))/(W3.Y.Input[i+1] - W3.Y.Input[i]); // ((W3.Y.Input[i+1] - W3.Y.Input[i])>>1) for rounding
        }


        if (W3.S.Input[i+1] == W3.S.Input[i]) // to avoid divide zero
        {
            W3.S.Slope[i] = 128;
        }
        else if (W3.S.Otput[i+1] == W3.S.Otput[i])
        {
            W3.S.Slope[i] = 0;
        }
        else
        {
            W3.S.Slope[i] = (((W3.S.Otput[i+1] - W3.S.Otput[i])<<7) + ((W3.S.Input[i+1] - W3.S.Input[i])>>1))/(W3.S.Input[i+1] - W3.S.Input[i]); // ((W3.S.Input[i+1] - W3.S.Input[i])>>1) for rounding
        }


        W1.H.Slope[i] = ClipInt32(W1.H.Slope[i], 255, 0);
        W1.Y.Slope[i] = ClipInt32(W1.Y.Slope[i], 255, 0);
        W1.S.Slope[i] = ClipInt32(W1.S.Slope[i], 255, 0);
        W2.H.Slope[i] = ClipInt32(W2.H.Slope[i], 255, 0);
        W2.Y.Slope[i] = ClipInt32(W2.Y.Slope[i], 255, 0);
        W2.S.Slope[i] = ClipInt32(W2.S.Slope[i], 255, 0);
        W3.H.Slope[i] = ClipInt32(W3.H.Slope[i], 255, 0);
        W3.Y.Slope[i] = ClipInt32(W3.Y.Slope[i], 255, 0);
        W3.S.Slope[i] = ClipInt32(W3.S.Slope[i], 255, 0);
    }


    if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
    {
        for (i = 0; i < 7; i++)
        {
            Final_W1.H.Input[i] = W1.H.Input[i];
            Final_W1.Y.Input[i] = W1.Y.Input[i];
            Final_W1.S.Input[i] = W1.S.Input[i];
            Final_W2.H.Input[i] = W2.H.Input[i];
            Final_W2.Y.Input[i] = W2.Y.Input[i];
            Final_W2.S.Input[i] = W2.S.Input[i];
            Final_W3.H.Input[i] = W3.H.Input[i];
            Final_W3.Y.Input[i] = W3.Y.Input[i];
            Final_W3.S.Input[i] = W3.S.Input[i];
        }

        for (i = 0; i < 6; i++)
        {
            Final_W1.H.Slope[i] = W1.H.Slope[i];
            Final_W1.Y.Slope[i] = W1.Y.Slope[i];
            Final_W1.S.Slope[i] = W1.S.Slope[i];
            Final_W2.H.Slope[i] = W2.H.Slope[i];
            Final_W2.Y.Slope[i] = W2.Y.Slope[i];
            Final_W2.S.Slope[i] = W2.S.Slope[i];
            Final_W3.H.Slope[i] = W3.H.Slope[i];
            Final_W3.Y.Slope[i] = W3.Y.Slope[i];
            Final_W3.S.Slope[i] = W3.S.Slope[i];
        }

        Final_W1.H.WgtLS = W1.H.WgtLS;
        Final_W1.Y.WgtLS = W1.Y.WgtLS;
        Final_W1.S.WgtLS = W1.S.WgtLS;
        Final_W2.H.WgtLS = W2.H.WgtLS;
        Final_W2.Y.WgtLS = W2.Y.WgtLS;
        Final_W2.S.WgtLS = W2.S.WgtLS;
        Final_W3.H.WgtLS = W3.H.WgtLS;
        Final_W3.Y.WgtLS = W3.Y.WgtLS;
        Final_W3.S.WgtLS = W3.S.WgtLS;

        Final_W1.H.WgtUS = W1.H.WgtUS;
        Final_W1.Y.WgtUS = W1.Y.WgtUS;
        Final_W1.S.WgtUS = W1.S.WgtUS;
        Final_W2.H.WgtUS = W2.H.WgtUS;
        Final_W2.Y.WgtUS = W2.Y.WgtUS;
        Final_W2.S.WgtUS = W2.S.WgtUS;
        Final_W3.H.WgtUS = W3.H.WgtUS;
        Final_W3.Y.WgtUS = W3.Y.WgtUS;
        Final_W3.S.WgtUS = W3.S.WgtUS;

    }
    else
    {
        for (i = 0; i < 7; i++)
        {
            Final_W1.H.Input[i] = IIR(Final_W1.H.Input[i], W1.H.Input[i], u4HueStep);
            Final_W1.Y.Input[i] = IIR(Final_W1.Y.Input[i], W1.Y.Input[i], u4LumStep);
            Final_W1.S.Input[i] = IIR(Final_W1.S.Input[i], W1.S.Input[i], u4SatStep);
            Final_W2.H.Input[i] = IIR(Final_W2.H.Input[i], W2.H.Input[i], u4HueStep);
            Final_W2.Y.Input[i] = IIR(Final_W2.Y.Input[i], W2.Y.Input[i], u4LumStep);
            Final_W2.S.Input[i] = IIR(Final_W2.S.Input[i], W2.S.Input[i], u4SatStep);
            Final_W3.H.Input[i] = IIR(Final_W3.H.Input[i], W3.H.Input[i], u4HueStep);
            Final_W3.Y.Input[i] = IIR(Final_W3.Y.Input[i], W3.Y.Input[i], u4LumStep);
            Final_W3.S.Input[i] = IIR(Final_W3.S.Input[i], W3.S.Input[i], u4SatStep);
        }

        for (i = 0; i < 6; i++)
        {
            Final_W1.H.Slope[i] = IIR(Final_W1.H.Slope[i], W1.H.Slope[i], u4HueStep);
            Final_W1.Y.Slope[i] = IIR(Final_W1.Y.Slope[i], W1.Y.Slope[i], u4LumStep);
            Final_W1.S.Slope[i] = IIR(Final_W1.S.Slope[i], W1.S.Slope[i], u4SatStep);
            Final_W2.H.Slope[i] = IIR(Final_W2.H.Slope[i], W2.H.Slope[i], u4HueStep);
            Final_W2.Y.Slope[i] = IIR(Final_W2.Y.Slope[i], W2.Y.Slope[i], u4LumStep);
            Final_W2.S.Slope[i] = IIR(Final_W2.S.Slope[i], W2.S.Slope[i], u4SatStep);
            Final_W3.H.Slope[i] = IIR(Final_W3.H.Slope[i], W3.H.Slope[i], u4HueStep);
            Final_W3.Y.Slope[i] = IIR(Final_W3.Y.Slope[i], W3.Y.Slope[i], u4LumStep);
            Final_W3.S.Slope[i] = IIR(Final_W3.S.Slope[i], W3.S.Slope[i], u4SatStep);
        }

        Final_W1.H.WgtLS = IIR(Final_W1.H.WgtLS, W1.H.WgtLS, u4HueStep);
        Final_W1.Y.WgtLS = IIR(Final_W1.Y.WgtLS, W1.Y.WgtLS, u4LumStep);
        Final_W1.S.WgtLS = IIR(Final_W1.S.WgtLS, W1.S.WgtLS, u4SatStep);
        Final_W2.H.WgtLS = IIR(Final_W2.H.WgtLS, W2.H.WgtLS, u4HueStep);
        Final_W2.Y.WgtLS = IIR(Final_W2.Y.WgtLS, W2.Y.WgtLS, u4LumStep);
        Final_W2.S.WgtLS = IIR(Final_W2.S.WgtLS, W2.S.WgtLS, u4SatStep);
        Final_W3.H.WgtLS = IIR(Final_W3.H.WgtLS, W3.H.WgtLS, u4HueStep);
        Final_W3.Y.WgtLS = IIR(Final_W3.Y.WgtLS, W3.Y.WgtLS, u4LumStep);
        Final_W3.S.WgtLS = IIR(Final_W3.S.WgtLS, W3.S.WgtLS, u4SatStep);

        Final_W1.H.WgtUS = IIR(Final_W1.H.WgtUS, W1.H.WgtUS, u4HueStep);
        Final_W1.Y.WgtUS = IIR(Final_W1.Y.WgtUS, W1.Y.WgtUS, u4LumStep);
        Final_W1.S.WgtUS = IIR(Final_W1.S.WgtUS, W1.S.WgtUS, u4SatStep);
        Final_W2.H.WgtUS = IIR(Final_W2.H.WgtUS, W2.H.WgtUS, u4HueStep);
        Final_W2.Y.WgtUS = IIR(Final_W2.Y.WgtUS, W2.Y.WgtUS, u4LumStep);
        Final_W2.S.WgtUS = IIR(Final_W2.S.WgtUS, W2.S.WgtUS, u4SatStep);
        Final_W3.H.WgtUS = IIR(Final_W3.H.WgtUS, W3.H.WgtUS, u4HueStep);
        Final_W3.Y.WgtUS = IIR(Final_W3.Y.WgtUS, W3.Y.WgtUS, u4LumStep);
        Final_W3.S.WgtUS = IIR(Final_W3.S.WgtUS, W3.S.WgtUS, u4SatStep);

    }


    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_L             = Final_W1.H.Input[0];
    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0         = Final_W1.H.Input[1];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1       = Final_W1.H.Input[2];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2       = Final_W1.H.Input[3];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3         = Final_W1.H.Input[4];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4       = Final_W1.H.Input[5];
    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_CM_H_W1_U             = Final_W1.H.Input[6];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0       = Final_W1.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1         = Final_W1.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2       = Final_W1.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3       = Final_W1.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4       = Final_W1.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5       = Final_W1.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE   = Final_W1.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE   = Final_W1.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L             = Final_W1.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0         = Final_W1.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1      = Final_W1.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2      = Final_W1.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3         = Final_W1.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4      = Final_W1.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U             = Final_W1.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0      = Final_W1.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1         = Final_W1.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2      = Final_W1.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3      = Final_W1.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4      = Final_W1.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5      = Final_W1.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE  = Final_W1.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE  = Final_W1.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_L             = Final_W1.S.Input[0];
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0         = Final_W1.S.Input[1];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1       = Final_W1.S.Input[2];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2       = Final_W1.S.Input[3];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3         = Final_W1.S.Input[4];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4       = Final_W1.S.Input[5];
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_CM_S_W1_U             = Final_W1.S.Input[6];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0       = Final_W1.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1         = Final_W1.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2       = Final_W1.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3       = Final_W1.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4       = Final_W1.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5       = Final_W1.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE   = Final_W1.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE   = Final_W1.S.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_L             = Final_W2.H.Input[0];
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0         = Final_W2.H.Input[1];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1       = Final_W2.H.Input[2];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2       = Final_W2.H.Input[3];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3         = Final_W2.H.Input[4];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4       = Final_W2.H.Input[5];
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_CM_H_W2_U             = Final_W2.H.Input[6];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0       = Final_W2.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1         = Final_W2.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2       = Final_W2.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3       = Final_W2.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4       = Final_W2.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5       = Final_W2.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE   = Final_W2.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE   = Final_W2.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L             = Final_W2.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0         = Final_W2.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1      = Final_W2.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2      = Final_W2.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3         = Final_W2.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4      = Final_W2.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U             = Final_W2.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0      = Final_W2.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1         = Final_W2.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2      = Final_W2.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3      = Final_W2.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4      = Final_W2.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5      = Final_W2.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE  = Final_W2.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE  = Final_W2.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_L             = Final_W2.S.Input[0];
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0         = Final_W2.S.Input[1];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1       = Final_W2.S.Input[2];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2       = Final_W2.S.Input[3];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3         = Final_W2.S.Input[4];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4       = Final_W2.S.Input[5];
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_CM_S_W2_U             = Final_W2.S.Input[6];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0       = Final_W2.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1         = Final_W2.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2       = Final_W2.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3       = Final_W2.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4       = Final_W2.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5       = Final_W2.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE   = Final_W2.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE   = Final_W2.S.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_L             = Final_W3.H.Input[0];
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0         = Final_W3.H.Input[1];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1       = Final_W3.H.Input[2];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2       = Final_W3.H.Input[3];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3         = Final_W3.H.Input[4];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4       = Final_W3.H.Input[5];
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_CM_H_W3_U             = Final_W3.H.Input[6];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0       = Final_W3.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1         = Final_W3.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2       = Final_W3.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3       = Final_W3.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4       = Final_W3.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5       = Final_W3.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE   = Final_W3.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE   = Final_W3.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L             = Final_W3.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0         = Final_W3.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1      = Final_W3.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2      = Final_W3.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3         = Final_W3.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4      = Final_W3.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U             = Final_W3.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0      = Final_W3.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1         = Final_W3.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2      = Final_W3.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3      = Final_W3.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4      = Final_W3.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5      = Final_W3.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE  = Final_W3.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE  = Final_W3.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_L             = Final_W3.S.Input[0];
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0         = Final_W3.S.Input[1];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1       = Final_W3.S.Input[2];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2       = Final_W3.S.Input[3];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3         = Final_W3.S.Input[4];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4       = Final_W3.S.Input[5];
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_CM_S_W3_U             = Final_W3.S.Input[6];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0       = Final_W3.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1         = Final_W3.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2       = Final_W3.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3       = Final_W3.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4       = Final_W3.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5       = Final_W3.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE   = Final_W3.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE   = Final_W3.S.WgtUS;

    // dump CM W1/W2/W3 setting
    if (LVMiredDumpCM == 1)
    {
        // W1 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Input[0] , W1_LvLoMiredLo.H.Input[1] , W1_LvLoMiredLo.H.Input[2] , W1_LvLoMiredLo.H.Input[3] ,
                                     W1_LvLoMiredLo.H.Input[4] , W1_LvLoMiredLo.H.Input[5] , W1_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Input[0] , W1_LvLoMiredUp.H.Input[1] , W1_LvLoMiredUp.H.Input[2] , W1_LvLoMiredUp.H.Input[3] ,
                                     W1_LvLoMiredUp.H.Input[4] , W1_LvLoMiredUp.H.Input[5] , W1_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Input[0] , W1_LvUpMiredLo.H.Input[1] , W1_LvUpMiredLo.H.Input[2] , W1_LvUpMiredLo.H.Input[3] ,
                                     W1_LvUpMiredLo.H.Input[4] , W1_LvUpMiredLo.H.Input[5] , W1_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Input[0] , W1_LvUpMiredUp.H.Input[1] , W1_LvUpMiredUp.H.Input[2] , W1_LvUpMiredUp.H.Input[3] ,
                                     W1_LvUpMiredUp.H.Input[4] , W1_LvUpMiredUp.H.Input[5] , W1_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1.H.Input[0] , W1.H.Input[1] , W1.H.Input[2] , W1.H.Input[3] ,
                                     W1.H.Input[4] , W1.H.Input[5] , W1.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W1.H.Input[0] , Final_W1.H.Input[1] , Final_W1.H.Input[2] , Final_W1.H.Input[3] ,
                                     Final_W1.H.Input[4] , Final_W1.H.Input[5] , Final_W1.H.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Otput[0] , W1_LvLoMiredLo.H.Otput[1] , W1_LvLoMiredLo.H.Otput[2] , W1_LvLoMiredLo.H.Otput[3] ,
                                     W1_LvLoMiredLo.H.Otput[4] , W1_LvLoMiredLo.H.Otput[5] , W1_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Otput[0] , W1_LvLoMiredUp.H.Otput[1] , W1_LvLoMiredUp.H.Otput[2] , W1_LvLoMiredUp.H.Otput[3] ,
                                     W1_LvLoMiredUp.H.Otput[4] , W1_LvLoMiredUp.H.Otput[5] , W1_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Otput[0] , W1_LvUpMiredLo.H.Otput[1] , W1_LvUpMiredLo.H.Otput[2] , W1_LvUpMiredLo.H.Otput[3] ,
                                     W1_LvUpMiredLo.H.Otput[4] , W1_LvUpMiredLo.H.Otput[5] , W1_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Otput[0] , W1_LvUpMiredUp.H.Otput[1] , W1_LvUpMiredUp.H.Otput[2] , W1_LvUpMiredUp.H.Otput[3] ,
                                     W1_LvUpMiredUp.H.Otput[4] , W1_LvUpMiredUp.H.Otput[5] , W1_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1.H.Otput[0] , W1.H.Otput[1] , W1.H.Otput[2] , W1.H.Otput[3] ,
                                     W1.H.Otput[4] , W1.H.Otput[5] , W1.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Slope[0] , W1_LvLoMiredLo.H.Slope[1] , W1_LvLoMiredLo.H.Slope[2] , W1_LvLoMiredLo.H.Slope[3] ,
                                     W1_LvLoMiredLo.H.Slope[4] , W1_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Slope[0] , W1_LvLoMiredUp.H.Slope[1] , W1_LvLoMiredUp.H.Slope[2] , W1_LvLoMiredUp.H.Slope[3] ,
                                     W1_LvLoMiredUp.H.Slope[4] , W1_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Slope[0] , W1_LvUpMiredLo.H.Slope[1] , W1_LvUpMiredLo.H.Slope[2] , W1_LvUpMiredLo.H.Slope[3] ,
                                     W1_LvUpMiredLo.H.Slope[4] , W1_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Slope[0] , W1_LvUpMiredUp.H.Slope[1] , W1_LvUpMiredUp.H.Slope[2] , W1_LvUpMiredUp.H.Slope[3] ,
                                     W1_LvUpMiredUp.H.Slope[4] , W1_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1.H.Slope[0] , W1.H.Slope[1] , W1.H.Slope[2] , W1.H.Slope[3] ,
                                     W1.H.Slope[4] , W1.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W1.H.Slope[0] , Final_W1.H.Slope[1] , Final_W1.H.Slope[2] , Final_W1.H.Slope[3] ,
                                     Final_W1.H.Slope[4] , Final_W1.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.WgtLS, W1_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.WgtLS, W1_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.WgtLS, W1_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.WgtLS, W1_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1.H.WgtLS, W1.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W1.H.WgtLS, Final_W1.H.WgtUS);



        // W1 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Input[0] , W1_LvLoMiredLo.Y.Input[1] , W1_LvLoMiredLo.Y.Input[2] , W1_LvLoMiredLo.Y.Input[3] ,
                                    W1_LvLoMiredLo.Y.Input[4] , W1_LvLoMiredLo.Y.Input[5] , W1_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Input[0] , W1_LvLoMiredUp.Y.Input[1] , W1_LvLoMiredUp.Y.Input[2] , W1_LvLoMiredUp.Y.Input[3] ,
                                    W1_LvLoMiredUp.Y.Input[4] , W1_LvLoMiredUp.Y.Input[5] , W1_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Input[0] , W1_LvUpMiredLo.Y.Input[1] , W1_LvUpMiredLo.Y.Input[2] , W1_LvUpMiredLo.Y.Input[3] ,
                                    W1_LvUpMiredLo.Y.Input[4] , W1_LvUpMiredLo.Y.Input[5] , W1_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Input[0] , W1_LvUpMiredUp.Y.Input[1] , W1_LvUpMiredUp.Y.Input[2] , W1_LvUpMiredUp.Y.Input[3] ,
                                    W1_LvUpMiredUp.Y.Input[4] , W1_LvUpMiredUp.Y.Input[5] , W1_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1.Y.Input[0] , W1.Y.Input[1] , W1.Y.Input[2] , W1.Y.Input[3] ,
                                    W1.Y.Input[4] , W1.Y.Input[5] , W1.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W1.Y.Input[0] , Final_W1.Y.Input[1] , Final_W1.Y.Input[2] , Final_W1.Y.Input[3] ,
                                    Final_W1.Y.Input[4] , Final_W1.Y.Input[5] , Final_W1.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Otput[0] , W1_LvLoMiredLo.Y.Otput[1] , W1_LvLoMiredLo.Y.Otput[2] , W1_LvLoMiredLo.Y.Otput[3] ,
                                    W1_LvLoMiredLo.Y.Otput[4] , W1_LvLoMiredLo.Y.Otput[5] , W1_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Otput[0] , W1_LvLoMiredUp.Y.Otput[1] , W1_LvLoMiredUp.Y.Otput[2] , W1_LvLoMiredUp.Y.Otput[3] ,
                                    W1_LvLoMiredUp.Y.Otput[4] , W1_LvLoMiredUp.Y.Otput[5] , W1_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Otput[0] , W1_LvUpMiredLo.Y.Otput[1] , W1_LvUpMiredLo.Y.Otput[2] , W1_LvUpMiredLo.Y.Otput[3] ,
                                    W1_LvUpMiredLo.Y.Otput[4] , W1_LvUpMiredLo.Y.Otput[5] , W1_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Otput[0] , W1_LvUpMiredUp.Y.Otput[1] , W1_LvUpMiredUp.Y.Otput[2] , W1_LvUpMiredUp.Y.Otput[3] ,
                                    W1_LvUpMiredUp.Y.Otput[4] , W1_LvUpMiredUp.Y.Otput[5] , W1_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1.Y.Otput[0] , W1.Y.Otput[1] , W1.Y.Otput[2] , W1.Y.Otput[3] ,
                                    W1.Y.Otput[4] , W1.Y.Otput[5] , W1.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Slope[0] , W1_LvLoMiredLo.Y.Slope[1] , W1_LvLoMiredLo.Y.Slope[2] , W1_LvLoMiredLo.Y.Slope[3] ,
                                    W1_LvLoMiredLo.Y.Slope[4] , W1_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Slope[0] , W1_LvLoMiredUp.Y.Slope[1] , W1_LvLoMiredUp.Y.Slope[2] , W1_LvLoMiredUp.Y.Slope[3] ,
                                    W1_LvLoMiredUp.Y.Slope[4] , W1_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Slope[0] , W1_LvUpMiredLo.Y.Slope[1] , W1_LvUpMiredLo.Y.Slope[2] , W1_LvUpMiredLo.Y.Slope[3] ,
                                    W1_LvUpMiredLo.Y.Slope[4] , W1_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Slope[0] , W1_LvUpMiredUp.Y.Slope[1] , W1_LvUpMiredUp.Y.Slope[2] , W1_LvUpMiredUp.Y.Slope[3] ,
                                    W1_LvUpMiredUp.Y.Slope[4] , W1_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.Y.Slope[0] , W1.Y.Slope[1] , W1.Y.Slope[2] , W1.Y.Slope[3] ,
                                    W1.Y.Slope[4] , W1.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.Y.Slope[0] , Final_W1.Y.Slope[1] , Final_W1.Y.Slope[2] , Final_W1.Y.Slope[3] ,
                                    Final_W1.Y.Slope[4] , Final_W1.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.WgtLS, W1_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.WgtLS, W1_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.WgtLS, W1_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.WgtLS, W1_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1.Y.WgtLS, W1.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W1.Y.WgtLS, Final_W1.Y.WgtUS);

        // W1 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Input[0] , W1_LvLoMiredLo.S.Input[1] , W1_LvLoMiredLo.S.Input[2] , W1_LvLoMiredLo.S.Input[3] ,
                                    W1_LvLoMiredLo.S.Input[4] , W1_LvLoMiredLo.S.Input[5] , W1_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Input[0] , W1_LvLoMiredUp.S.Input[1] , W1_LvLoMiredUp.S.Input[2] , W1_LvLoMiredUp.S.Input[3] ,
                                    W1_LvLoMiredUp.S.Input[4] , W1_LvLoMiredUp.S.Input[5] , W1_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Input[0] , W1_LvUpMiredLo.S.Input[1] , W1_LvUpMiredLo.S.Input[2] , W1_LvUpMiredLo.S.Input[3] ,
                                    W1_LvUpMiredLo.S.Input[4] , W1_LvUpMiredLo.S.Input[5] , W1_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Input[0] , W1_LvUpMiredUp.S.Input[1] , W1_LvUpMiredUp.S.Input[2] , W1_LvUpMiredUp.S.Input[3] ,
                                    W1_LvUpMiredUp.S.Input[4] , W1_LvUpMiredUp.S.Input[5] , W1_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Input[0] , W1.S.Input[1] , W1.S.Input[2] , W1.S.Input[3] ,
                                    W1.S.Input[4] , W1.S.Input[5] , W1.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.S.Input[0] , Final_W1.S.Input[1] , Final_W1.S.Input[2] , Final_W1.S.Input[3] ,
                                    Final_W1.S.Input[4] , Final_W1.S.Input[5] , Final_W1.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Otput[0] , W1_LvLoMiredLo.S.Otput[1] , W1_LvLoMiredLo.S.Otput[2] , W1_LvLoMiredLo.S.Otput[3] ,
                                    W1_LvLoMiredLo.S.Otput[4] , W1_LvLoMiredLo.S.Otput[5] , W1_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Otput[0] , W1_LvLoMiredUp.S.Otput[1] , W1_LvLoMiredUp.S.Otput[2] , W1_LvLoMiredUp.S.Otput[3] ,
                                    W1_LvLoMiredUp.S.Otput[4] , W1_LvLoMiredUp.S.Otput[5] , W1_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Otput[0] , W1_LvUpMiredLo.S.Otput[1] , W1_LvUpMiredLo.S.Otput[2] , W1_LvUpMiredLo.S.Otput[3] ,
                                    W1_LvUpMiredLo.S.Otput[4] , W1_LvUpMiredLo.S.Otput[5] , W1_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Otput[0] , W1_LvUpMiredUp.S.Otput[1] , W1_LvUpMiredUp.S.Otput[2] , W1_LvUpMiredUp.S.Otput[3] ,
                                    W1_LvUpMiredUp.S.Otput[4] , W1_LvUpMiredUp.S.Otput[5] , W1_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Otput[0] , W1.S.Otput[1] , W1.S.Otput[2] , W1.S.Otput[3] ,
                                    W1.S.Otput[4] , W1.S.Otput[5] , W1.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Slope[0] , W1_LvLoMiredLo.S.Slope[1] , W1_LvLoMiredLo.S.Slope[2] , W1_LvLoMiredLo.S.Slope[3] ,
                                    W1_LvLoMiredLo.S.Slope[4] , W1_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Slope[0] , W1_LvLoMiredUp.S.Slope[1] , W1_LvLoMiredUp.S.Slope[2] , W1_LvLoMiredUp.S.Slope[3] ,
                                    W1_LvLoMiredUp.S.Slope[4] , W1_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Slope[0] , W1_LvUpMiredLo.S.Slope[1] , W1_LvUpMiredLo.S.Slope[2] , W1_LvUpMiredLo.S.Slope[3] ,
                                    W1_LvUpMiredLo.S.Slope[4] , W1_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Slope[0] , W1_LvUpMiredUp.S.Slope[1] , W1_LvUpMiredUp.S.Slope[2] , W1_LvUpMiredUp.S.Slope[3] ,
                                    W1_LvUpMiredUp.S.Slope[4] , W1_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Slope[0] , W1.S.Slope[1] , W1.S.Slope[2] , W1.S.Slope[3] ,
                                    W1.S.Slope[4] , W1.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.S.Slope[0] , Final_W1.S.Slope[1] , Final_W1.S.Slope[2] , Final_W1.S.Slope[3] ,
                                    Final_W1.S.Slope[4] , Final_W1.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.WgtLS, W1_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.WgtLS, W1_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.WgtLS, W1_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.WgtLS, W1_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1.S.WgtLS, W1.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W1.S.WgtLS, Final_W1.S.WgtUS);



        // W2 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Input[0] , W2_LvLoMiredLo.H.Input[1] , W2_LvLoMiredLo.H.Input[2] , W2_LvLoMiredLo.H.Input[3] ,
                                     W2_LvLoMiredLo.H.Input[4] , W2_LvLoMiredLo.H.Input[5] , W2_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Input[0] , W2_LvLoMiredUp.H.Input[1] , W2_LvLoMiredUp.H.Input[2] , W2_LvLoMiredUp.H.Input[3] ,
                                     W2_LvLoMiredUp.H.Input[4] , W2_LvLoMiredUp.H.Input[5] , W2_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Input[0] , W2_LvUpMiredLo.H.Input[1] , W2_LvUpMiredLo.H.Input[2] , W2_LvUpMiredLo.H.Input[3] ,
                                     W2_LvUpMiredLo.H.Input[4] , W2_LvUpMiredLo.H.Input[5] , W2_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Input[0] , W2_LvUpMiredUp.H.Input[1] , W2_LvUpMiredUp.H.Input[2] , W2_LvUpMiredUp.H.Input[3] ,
                                     W2_LvUpMiredUp.H.Input[4] , W2_LvUpMiredUp.H.Input[5] , W2_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2.H.Input[0] , W2.H.Input[1] , W2.H.Input[2] , W2.H.Input[3] ,
                                     W2.H.Input[4] , W2.H.Input[5] , W2.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W2.H.Input[0] , Final_W2.H.Input[1] , Final_W2.H.Input[2] , Final_W2.H.Input[3] ,
                                     Final_W2.H.Input[4] , Final_W2.H.Input[5] , Final_W2.H.Input[6]);



        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Otput[0] , W2_LvLoMiredLo.H.Otput[1] , W2_LvLoMiredLo.H.Otput[2] , W2_LvLoMiredLo.H.Otput[3] ,
                                     W2_LvLoMiredLo.H.Otput[4] , W2_LvLoMiredLo.H.Otput[5] , W2_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Otput[0] , W2_LvLoMiredUp.H.Otput[1] , W2_LvLoMiredUp.H.Otput[2] , W2_LvLoMiredUp.H.Otput[3] ,
                                     W2_LvLoMiredUp.H.Otput[4] , W2_LvLoMiredUp.H.Otput[5] , W2_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Otput[0] , W2_LvUpMiredLo.H.Otput[1] , W2_LvUpMiredLo.H.Otput[2] , W2_LvUpMiredLo.H.Otput[3] ,
                                     W2_LvUpMiredLo.H.Otput[4] , W2_LvUpMiredLo.H.Otput[5] , W2_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Otput[0] , W2_LvUpMiredUp.H.Otput[1] , W2_LvUpMiredUp.H.Otput[2] , W2_LvUpMiredUp.H.Otput[3] ,
                                     W2_LvUpMiredUp.H.Otput[4] , W2_LvUpMiredUp.H.Otput[5] , W2_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2.H.Otput[0] , W2.H.Otput[1] , W2.H.Otput[2] , W2.H.Otput[3] ,
                                     W2.H.Otput[4] , W2.H.Otput[5] , W2.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Slope[0] , W2_LvLoMiredLo.H.Slope[1] , W2_LvLoMiredLo.H.Slope[2] , W2_LvLoMiredLo.H.Slope[3] ,
                                     W2_LvLoMiredLo.H.Slope[4] , W2_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Slope[0] , W2_LvLoMiredUp.H.Slope[1] , W2_LvLoMiredUp.H.Slope[2] , W2_LvLoMiredUp.H.Slope[3] ,
                                     W2_LvLoMiredUp.H.Slope[4] , W2_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Slope[0] , W2_LvUpMiredLo.H.Slope[1] , W2_LvUpMiredLo.H.Slope[2] , W2_LvUpMiredLo.H.Slope[3] ,
                                     W2_LvUpMiredLo.H.Slope[4] , W2_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Slope[0] , W2_LvUpMiredUp.H.Slope[1] , W2_LvUpMiredUp.H.Slope[2] , W2_LvUpMiredUp.H.Slope[3] ,
                                     W2_LvUpMiredUp.H.Slope[4] , W2_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2.H.Slope[0] , W2.H.Slope[1] , W2.H.Slope[2] , W2.H.Slope[3] ,
                                     W2.H.Slope[4] , W2.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W2.H.Slope[0] , Final_W2.H.Slope[1] , Final_W2.H.Slope[2] , Final_W2.H.Slope[3] ,
                                     Final_W2.H.Slope[4] , Final_W2.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.WgtLS, W2_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.WgtLS, W2_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.WgtLS, W2_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.WgtLS, W2_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2.H.WgtLS, W2.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W2.H.WgtLS, Final_W2.H.WgtUS);



        // W2 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Input[0] , W2_LvLoMiredLo.Y.Input[1] , W2_LvLoMiredLo.Y.Input[2] , W2_LvLoMiredLo.Y.Input[3] ,
                                    W2_LvLoMiredLo.Y.Input[4] , W2_LvLoMiredLo.Y.Input[5] , W2_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Input[0] , W2_LvLoMiredUp.Y.Input[1] , W2_LvLoMiredUp.Y.Input[2] , W2_LvLoMiredUp.Y.Input[3] ,
                                    W2_LvLoMiredUp.Y.Input[4] , W2_LvLoMiredUp.Y.Input[5] , W2_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Input[0] , W2_LvUpMiredLo.Y.Input[1] , W2_LvUpMiredLo.Y.Input[2] , W2_LvUpMiredLo.Y.Input[3] ,
                                    W2_LvUpMiredLo.Y.Input[4] , W2_LvUpMiredLo.Y.Input[5] , W2_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Input[0] , W2_LvUpMiredUp.Y.Input[1] , W2_LvUpMiredUp.Y.Input[2] , W2_LvUpMiredUp.Y.Input[3] ,
                                    W2_LvUpMiredUp.Y.Input[4] , W2_LvUpMiredUp.Y.Input[5] , W2_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2.Y.Input[0] , W2.Y.Input[1] , W2.Y.Input[2] , W2.Y.Input[3] ,
                                    W2.Y.Input[4] , W2.Y.Input[5] , W2.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W2.Y.Input[0] , Final_W2.Y.Input[1] , Final_W2.Y.Input[2] , Final_W2.Y.Input[3] ,
                                    Final_W2.Y.Input[4] , Final_W2.Y.Input[5] , Final_W2.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Otput[0] , W2_LvLoMiredLo.Y.Otput[1] , W2_LvLoMiredLo.Y.Otput[2] , W2_LvLoMiredLo.Y.Otput[3] ,
                                    W2_LvLoMiredLo.Y.Otput[4] , W2_LvLoMiredLo.Y.Otput[5] , W2_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Otput[0] , W2_LvLoMiredUp.Y.Otput[1] , W2_LvLoMiredUp.Y.Otput[2] , W2_LvLoMiredUp.Y.Otput[3] ,
                                    W2_LvLoMiredUp.Y.Otput[4] , W2_LvLoMiredUp.Y.Otput[5] , W2_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Otput[0] , W2_LvUpMiredLo.Y.Otput[1] , W2_LvUpMiredLo.Y.Otput[2] , W2_LvUpMiredLo.Y.Otput[3] ,
                                    W2_LvUpMiredLo.Y.Otput[4] , W2_LvUpMiredLo.Y.Otput[5] , W2_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Otput[0] , W2_LvUpMiredUp.Y.Otput[1] , W2_LvUpMiredUp.Y.Otput[2] , W2_LvUpMiredUp.Y.Otput[3] ,
                                    W2_LvUpMiredUp.Y.Otput[4] , W2_LvUpMiredUp.Y.Otput[5] , W2_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2.Y.Otput[0] , W2.Y.Otput[1] , W2.Y.Otput[2] , W2.Y.Otput[3] ,
                                    W2.Y.Otput[4] , W2.Y.Otput[5] , W2.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Slope[0] , W2_LvLoMiredLo.Y.Slope[1] , W2_LvLoMiredLo.Y.Slope[2] , W2_LvLoMiredLo.Y.Slope[3] ,
                                    W2_LvLoMiredLo.Y.Slope[4] , W2_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Slope[0] , W2_LvLoMiredUp.Y.Slope[1] , W2_LvLoMiredUp.Y.Slope[2] , W2_LvLoMiredUp.Y.Slope[3] ,
                                    W2_LvLoMiredUp.Y.Slope[4] , W2_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Slope[0] , W2_LvUpMiredLo.Y.Slope[1] , W2_LvUpMiredLo.Y.Slope[2] , W2_LvUpMiredLo.Y.Slope[3] ,
                                    W2_LvUpMiredLo.Y.Slope[4] , W2_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Slope[0] , W2_LvUpMiredUp.Y.Slope[1] , W2_LvUpMiredUp.Y.Slope[2] , W2_LvUpMiredUp.Y.Slope[3] ,
                                    W2_LvUpMiredUp.Y.Slope[4] , W2_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.Y.Slope[0] , W2.Y.Slope[1] , W2.Y.Slope[2] , W2.Y.Slope[3] ,
                                    W2.Y.Slope[4] , W2.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.Y.Slope[0] , Final_W2.Y.Slope[1] , Final_W2.Y.Slope[2] , Final_W2.Y.Slope[3] ,
                                    Final_W2.Y.Slope[4] , Final_W2.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.WgtLS, W2_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.WgtLS, W2_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.WgtLS, W2_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.WgtLS, W2_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2.Y.WgtLS, W2.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W2.Y.WgtLS, Final_W2.Y.WgtUS);

        // W2 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Input[0] , W2_LvLoMiredLo.S.Input[1] , W2_LvLoMiredLo.S.Input[2] , W2_LvLoMiredLo.S.Input[3] ,
                                    W2_LvLoMiredLo.S.Input[4] , W2_LvLoMiredLo.S.Input[5] , W2_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Input[0] , W2_LvLoMiredUp.S.Input[1] , W2_LvLoMiredUp.S.Input[2] , W2_LvLoMiredUp.S.Input[3] ,
                                    W2_LvLoMiredUp.S.Input[4] , W2_LvLoMiredUp.S.Input[5] , W2_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Input[0] , W2_LvUpMiredLo.S.Input[1] , W2_LvUpMiredLo.S.Input[2] , W2_LvUpMiredLo.S.Input[3] ,
                                    W2_LvUpMiredLo.S.Input[4] , W2_LvUpMiredLo.S.Input[5] , W2_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Input[0] , W2_LvUpMiredUp.S.Input[1] , W2_LvUpMiredUp.S.Input[2] , W2_LvUpMiredUp.S.Input[3] ,
                                    W2_LvUpMiredUp.S.Input[4] , W2_LvUpMiredUp.S.Input[5] , W2_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Input[0] , W2.S.Input[1] , W2.S.Input[2] , W2.S.Input[3] ,
                                    W2.S.Input[4] , W2.S.Input[5] , W2.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.S.Input[0] , Final_W2.S.Input[1] , Final_W2.S.Input[2] , Final_W2.S.Input[3] ,
                                    Final_W2.S.Input[4] , Final_W2.S.Input[5] , Final_W2.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Otput[0] , W2_LvLoMiredLo.S.Otput[1] , W2_LvLoMiredLo.S.Otput[2] , W2_LvLoMiredLo.S.Otput[3] ,
                                    W2_LvLoMiredLo.S.Otput[4] , W2_LvLoMiredLo.S.Otput[5] , W2_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Otput[0] , W2_LvLoMiredUp.S.Otput[1] , W2_LvLoMiredUp.S.Otput[2] , W2_LvLoMiredUp.S.Otput[3] ,
                                    W2_LvLoMiredUp.S.Otput[4] , W2_LvLoMiredUp.S.Otput[5] , W2_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Otput[0] , W2_LvUpMiredLo.S.Otput[1] , W2_LvUpMiredLo.S.Otput[2] , W2_LvUpMiredLo.S.Otput[3] ,
                                    W2_LvUpMiredLo.S.Otput[4] , W2_LvUpMiredLo.S.Otput[5] , W2_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Otput[0] , W2_LvUpMiredUp.S.Otput[1] , W2_LvUpMiredUp.S.Otput[2] , W2_LvUpMiredUp.S.Otput[3] ,
                                    W2_LvUpMiredUp.S.Otput[4] , W2_LvUpMiredUp.S.Otput[5] , W2_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Otput[0] , W2.S.Otput[1] , W2.S.Otput[2] , W2.S.Otput[3] ,
                                    W2.S.Otput[4] , W2.S.Otput[5] , W2.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Slope[0] , W2_LvLoMiredLo.S.Slope[1] , W2_LvLoMiredLo.S.Slope[2] , W2_LvLoMiredLo.S.Slope[3] ,
                                    W2_LvLoMiredLo.S.Slope[4] , W2_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Slope[0] , W2_LvLoMiredUp.S.Slope[1] , W2_LvLoMiredUp.S.Slope[2] , W2_LvLoMiredUp.S.Slope[3] ,
                                    W2_LvLoMiredUp.S.Slope[4] , W2_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Slope[0] , W2_LvUpMiredLo.S.Slope[1] , W2_LvUpMiredLo.S.Slope[2] , W2_LvUpMiredLo.S.Slope[3] ,
                                    W2_LvUpMiredLo.S.Slope[4] , W2_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Slope[0] , W2_LvUpMiredUp.S.Slope[1] , W2_LvUpMiredUp.S.Slope[2] , W2_LvUpMiredUp.S.Slope[3] ,
                                    W2_LvUpMiredUp.S.Slope[4] , W2_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Slope[0] , W2.S.Slope[1] , W2.S.Slope[2] , W2.S.Slope[3] ,
                                    W2.S.Slope[4] , W2.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.S.Slope[0] , Final_W2.S.Slope[1] , Final_W2.S.Slope[2] , Final_W2.S.Slope[3] ,
                                    Final_W2.S.Slope[4] , Final_W2.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.WgtLS, W2_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.WgtLS, W2_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.WgtLS, W2_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.WgtLS, W2_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2.S.WgtLS, W2.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W2.S.WgtLS, Final_W2.S.WgtUS);



        // W3 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Input[0] , W3_LvLoMiredLo.H.Input[1] , W3_LvLoMiredLo.H.Input[2] , W3_LvLoMiredLo.H.Input[3] ,
                                     W3_LvLoMiredLo.H.Input[4] , W3_LvLoMiredLo.H.Input[5] , W3_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Input[0] , W3_LvLoMiredUp.H.Input[1] , W3_LvLoMiredUp.H.Input[2] , W3_LvLoMiredUp.H.Input[3] ,
                                     W3_LvLoMiredUp.H.Input[4] , W3_LvLoMiredUp.H.Input[5] , W3_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Input[0] , W3_LvUpMiredLo.H.Input[1] , W3_LvUpMiredLo.H.Input[2] , W3_LvUpMiredLo.H.Input[3] ,
                                     W3_LvUpMiredLo.H.Input[4] , W3_LvUpMiredLo.H.Input[5] , W3_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Input[0] , W3_LvUpMiredUp.H.Input[1] , W3_LvUpMiredUp.H.Input[2] , W3_LvUpMiredUp.H.Input[3] ,
                                     W3_LvUpMiredUp.H.Input[4] , W3_LvUpMiredUp.H.Input[5] , W3_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3.H.Input[0] , W3.H.Input[1] , W3.H.Input[2] , W3.H.Input[3] ,
                                     W3.H.Input[4] , W3.H.Input[5] , W3.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W3.H.Input[0] , Final_W3.H.Input[1] , Final_W3.H.Input[2] , Final_W3.H.Input[3] ,
                                     Final_W3.H.Input[4] , Final_W3.H.Input[5] , Final_W3.H.Input[6]);



        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Otput[0] , W3_LvLoMiredLo.H.Otput[1] , W3_LvLoMiredLo.H.Otput[2] , W3_LvLoMiredLo.H.Otput[3] ,
                                     W3_LvLoMiredLo.H.Otput[4] , W3_LvLoMiredLo.H.Otput[5] , W3_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Otput[0] , W3_LvLoMiredUp.H.Otput[1] , W3_LvLoMiredUp.H.Otput[2] , W3_LvLoMiredUp.H.Otput[3] ,
                                     W3_LvLoMiredUp.H.Otput[4] , W3_LvLoMiredUp.H.Otput[5] , W3_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Otput[0] , W3_LvUpMiredLo.H.Otput[1] , W3_LvUpMiredLo.H.Otput[2] , W3_LvUpMiredLo.H.Otput[3] ,
                                     W3_LvUpMiredLo.H.Otput[4] , W3_LvUpMiredLo.H.Otput[5] , W3_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Otput[0] , W3_LvUpMiredUp.H.Otput[1] , W3_LvUpMiredUp.H.Otput[2] , W3_LvUpMiredUp.H.Otput[3] ,
                                     W3_LvUpMiredUp.H.Otput[4] , W3_LvUpMiredUp.H.Otput[5] , W3_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3.H.Otput[0] , W3.H.Otput[1] , W3.H.Otput[2] , W3.H.Otput[3] ,
                                     W3.H.Otput[4] , W3.H.Otput[5] , W3.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Slope[0] , W3_LvLoMiredLo.H.Slope[1] , W3_LvLoMiredLo.H.Slope[2] , W3_LvLoMiredLo.H.Slope[3] ,
                                     W3_LvLoMiredLo.H.Slope[4] , W3_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Slope[0] , W3_LvLoMiredUp.H.Slope[1] , W3_LvLoMiredUp.H.Slope[2] , W3_LvLoMiredUp.H.Slope[3] ,
                                     W3_LvLoMiredUp.H.Slope[4] , W3_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Slope[0] , W3_LvUpMiredLo.H.Slope[1] , W3_LvUpMiredLo.H.Slope[2] , W3_LvUpMiredLo.H.Slope[3] ,
                                     W3_LvUpMiredLo.H.Slope[4] , W3_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Slope[0] , W3_LvUpMiredUp.H.Slope[1] , W3_LvUpMiredUp.H.Slope[2] , W3_LvUpMiredUp.H.Slope[3] ,
                                     W3_LvUpMiredUp.H.Slope[4] , W3_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3.H.Slope[0] , W3.H.Slope[1] , W3.H.Slope[2] , W3.H.Slope[3] ,
                                     W3.H.Slope[4] , W3.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W3.H.Slope[0] , Final_W3.H.Slope[1] , Final_W3.H.Slope[2] , Final_W3.H.Slope[3] ,
                                     Final_W3.H.Slope[4] , Final_W3.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.WgtLS, W3_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.WgtLS, W3_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.WgtLS, W3_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.WgtLS, W3_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3.H.WgtLS, W3.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W3.H.WgtLS, Final_W3.H.WgtUS);



        // W3 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Input[0] , W3_LvLoMiredLo.Y.Input[1] , W3_LvLoMiredLo.Y.Input[2] , W3_LvLoMiredLo.Y.Input[3] ,
                                    W3_LvLoMiredLo.Y.Input[4] , W3_LvLoMiredLo.Y.Input[5] , W3_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Input[0] , W3_LvLoMiredUp.Y.Input[1] , W3_LvLoMiredUp.Y.Input[2] , W3_LvLoMiredUp.Y.Input[3] ,
                                    W3_LvLoMiredUp.Y.Input[4] , W3_LvLoMiredUp.Y.Input[5] , W3_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Input[0] , W3_LvUpMiredLo.Y.Input[1] , W3_LvUpMiredLo.Y.Input[2] , W3_LvUpMiredLo.Y.Input[3] ,
                                    W3_LvUpMiredLo.Y.Input[4] , W3_LvUpMiredLo.Y.Input[5] , W3_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Input[0] , W3_LvUpMiredUp.Y.Input[1] , W3_LvUpMiredUp.Y.Input[2] , W3_LvUpMiredUp.Y.Input[3] ,
                                    W3_LvUpMiredUp.Y.Input[4] , W3_LvUpMiredUp.Y.Input[5] , W3_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3.Y.Input[0] , W3.Y.Input[1] , W3.Y.Input[2] , W3.Y.Input[3] ,
                                    W3.Y.Input[4] , W3.Y.Input[5] , W3.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W3.Y.Input[0] , Final_W3.Y.Input[1] , Final_W3.Y.Input[2] , Final_W3.Y.Input[3] ,
                                    Final_W3.Y.Input[4] , Final_W3.Y.Input[5] , Final_W3.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Otput[0] , W3_LvLoMiredLo.Y.Otput[1] , W3_LvLoMiredLo.Y.Otput[2] , W3_LvLoMiredLo.Y.Otput[3] ,
                                    W3_LvLoMiredLo.Y.Otput[4] , W3_LvLoMiredLo.Y.Otput[5] , W3_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Otput[0] , W3_LvLoMiredUp.Y.Otput[1] , W3_LvLoMiredUp.Y.Otput[2] , W3_LvLoMiredUp.Y.Otput[3] ,
                                    W3_LvLoMiredUp.Y.Otput[4] , W3_LvLoMiredUp.Y.Otput[5] , W3_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Otput[0] , W3_LvUpMiredLo.Y.Otput[1] , W3_LvUpMiredLo.Y.Otput[2] , W3_LvUpMiredLo.Y.Otput[3] ,
                                    W3_LvUpMiredLo.Y.Otput[4] , W3_LvUpMiredLo.Y.Otput[5] , W3_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Otput[0] , W3_LvUpMiredUp.Y.Otput[1] , W3_LvUpMiredUp.Y.Otput[2] , W3_LvUpMiredUp.Y.Otput[3] ,
                                    W3_LvUpMiredUp.Y.Otput[4] , W3_LvUpMiredUp.Y.Otput[5] , W3_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3.Y.Otput[0] , W3.Y.Otput[1] , W3.Y.Otput[2] , W3.Y.Otput[3] ,
                                    W3.Y.Otput[4] , W3.Y.Otput[5] , W3.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Slope[0] , W3_LvLoMiredLo.Y.Slope[1] , W3_LvLoMiredLo.Y.Slope[2] , W3_LvLoMiredLo.Y.Slope[3] ,
                                    W3_LvLoMiredLo.Y.Slope[4] , W3_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Slope[0] , W3_LvLoMiredUp.Y.Slope[1] , W3_LvLoMiredUp.Y.Slope[2] , W3_LvLoMiredUp.Y.Slope[3] ,
                                    W3_LvLoMiredUp.Y.Slope[4] , W3_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Slope[0] , W3_LvUpMiredLo.Y.Slope[1] , W3_LvUpMiredLo.Y.Slope[2] , W3_LvUpMiredLo.Y.Slope[3] ,
                                    W3_LvUpMiredLo.Y.Slope[4] , W3_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Slope[0] , W3_LvUpMiredUp.Y.Slope[1] , W3_LvUpMiredUp.Y.Slope[2] , W3_LvUpMiredUp.Y.Slope[3] ,
                                    W3_LvUpMiredUp.Y.Slope[4] , W3_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.Y.Slope[0] , W3.Y.Slope[1] , W3.Y.Slope[2] , W3.Y.Slope[3] ,
                                    W3.Y.Slope[4] , W3.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.Y.Slope[0] , Final_W3.Y.Slope[1] , Final_W3.Y.Slope[2] , Final_W3.Y.Slope[3] ,
                                    Final_W3.Y.Slope[4] , Final_W3.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.WgtLS, W3_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.WgtLS, W3_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.WgtLS, W3_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.WgtLS, W3_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3.Y.WgtLS, W3.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W3.Y.WgtLS, Final_W3.Y.WgtUS);

        // W3 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Input[0] , W3_LvLoMiredLo.S.Input[1] , W3_LvLoMiredLo.S.Input[2] , W3_LvLoMiredLo.S.Input[3] ,
                                    W3_LvLoMiredLo.S.Input[4] , W3_LvLoMiredLo.S.Input[5] , W3_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Input[0] , W3_LvLoMiredUp.S.Input[1] , W3_LvLoMiredUp.S.Input[2] , W3_LvLoMiredUp.S.Input[3] ,
                                    W3_LvLoMiredUp.S.Input[4] , W3_LvLoMiredUp.S.Input[5] , W3_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Input[0] , W3_LvUpMiredLo.S.Input[1] , W3_LvUpMiredLo.S.Input[2] , W3_LvUpMiredLo.S.Input[3] ,
                                    W3_LvUpMiredLo.S.Input[4] , W3_LvUpMiredLo.S.Input[5] , W3_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Input[0] , W3_LvUpMiredUp.S.Input[1] , W3_LvUpMiredUp.S.Input[2] , W3_LvUpMiredUp.S.Input[3] ,
                                    W3_LvUpMiredUp.S.Input[4] , W3_LvUpMiredUp.S.Input[5] , W3_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Input[0] , W3.S.Input[1] , W3.S.Input[2] , W3.S.Input[3] ,
                                    W3.S.Input[4] , W3.S.Input[5] , W3.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.S.Input[0] , Final_W3.S.Input[1] , Final_W3.S.Input[2] , Final_W3.S.Input[3] ,
                                    Final_W3.S.Input[4] , Final_W3.S.Input[5] , Final_W3.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Otput[0] , W3_LvLoMiredLo.S.Otput[1] , W3_LvLoMiredLo.S.Otput[2] , W3_LvLoMiredLo.S.Otput[3] ,
                                    W3_LvLoMiredLo.S.Otput[4] , W3_LvLoMiredLo.S.Otput[5] , W3_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Otput[0] , W3_LvLoMiredUp.S.Otput[1] , W3_LvLoMiredUp.S.Otput[2] , W3_LvLoMiredUp.S.Otput[3] ,
                                    W3_LvLoMiredUp.S.Otput[4] , W3_LvLoMiredUp.S.Otput[5] , W3_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Otput[0] , W3_LvUpMiredLo.S.Otput[1] , W3_LvUpMiredLo.S.Otput[2] , W3_LvUpMiredLo.S.Otput[3] ,
                                    W3_LvUpMiredLo.S.Otput[4] , W3_LvUpMiredLo.S.Otput[5] , W3_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Otput[0] , W3_LvUpMiredUp.S.Otput[1] , W3_LvUpMiredUp.S.Otput[2] , W3_LvUpMiredUp.S.Otput[3] ,
                                    W3_LvUpMiredUp.S.Otput[4] , W3_LvUpMiredUp.S.Otput[5] , W3_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Otput[0] , W3.S.Otput[1] , W3.S.Otput[2] , W3.S.Otput[3] ,
                                    W3.S.Otput[4] , W3.S.Otput[5] , W3.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Slope[0] , W3_LvLoMiredLo.S.Slope[1] , W3_LvLoMiredLo.S.Slope[2] , W3_LvLoMiredLo.S.Slope[3] ,
                                    W3_LvLoMiredLo.S.Slope[4] , W3_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Slope[0] , W3_LvLoMiredUp.S.Slope[1] , W3_LvLoMiredUp.S.Slope[2] , W3_LvLoMiredUp.S.Slope[3] ,
                                    W3_LvLoMiredUp.S.Slope[4] , W3_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Slope[0] , W3_LvUpMiredLo.S.Slope[1] , W3_LvUpMiredLo.S.Slope[2] , W3_LvUpMiredLo.S.Slope[3] ,
                                    W3_LvUpMiredLo.S.Slope[4] , W3_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Slope[0] , W3_LvUpMiredUp.S.Slope[1] , W3_LvUpMiredUp.S.Slope[2] , W3_LvUpMiredUp.S.Slope[3] ,
                                    W3_LvUpMiredUp.S.Slope[4] , W3_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Slope[0] , W3.S.Slope[1] , W3.S.Slope[2] , W3.S.Slope[3] ,
                                    W3.S.Slope[4] , W3.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.S.Slope[0] , Final_W3.S.Slope[1] , Final_W3.S.Slope[2] , Final_W3.S.Slope[3] ,
                                    Final_W3.S.Slope[4] , Final_W3.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.WgtLS, W3_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.WgtLS, W3_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.WgtLS, W3_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.WgtLS, W3_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3.S.WgtLS, W3.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W3.S.WgtLS, Final_W3.S.WgtUS);

    }
}


MVOID SmoothCOLOR(  MBOOL IsCapture,
                    MUINT32 u4UpperCT, // Upper CT
                    MUINT32 u4LowerCT, // Lower CT
                    MINT32 i4UpperLV,
                    MINT32 i4LowerLV,
                    ColorInfo& rColorInfo, // New structure, including CCT, RealLV & AWB gain
                    CAMERA_TUNING_FD_INFO_T const& rFdInfo,
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Lo_CT_Lo),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Lo_CT_Up),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Up_CT_Lo),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Up_CT_Up),// NVRAM Color Table
                    ISP_NVRAM_COLOR_PARAM_T const& Para_Color,// Color parameters
                    ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,// SmoothCOLOR output
                    MUINT16& rVer,
                    MBOOL& rFirstTimeBoot,
                    ISP_NVRAM_COLOR_T& rSmoothColor_Prv
                    )
{
    UTIL_TRACE_BEGIN(__FUNCTION__);
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.dump", cLogLevel, "0");
    MINT32 debugDump = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.lock", cLogLevel, "0");
    MINT32 IsLock = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.enable", cLogLevel, "0");
    MINT32 debugEn = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.yeng", cLogLevel, "0");
    MINT32 PassY = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.heng", cLogLevel, "0");
    MINT32 PassH = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.seng", cLogLevel, "0");
    MINT32 PassS = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.cm", cLogLevel, "0");
    MINT32 PassCM = ::atoi(cLogLevel);

    // SmoothCOLOR Unit Test On/Off
    property_get("vendor.debug.smooth_color.ut", cLogLevel, "0");
    MINT32 SColorUnitTest = ::atoi(cLogLevel);

    MUINT32 u4RealCT = rColorInfo.NoPrefCCT;
    MINT32 i4RealLV = rColorInfo.RealLV; // LV is signed

    // version
    rVer = g_Smooth_Color_Ver;

    COLOR_LOG_IF(debugDump, "[%s()] u4RealCT = %d, u4LowerCT = %d, u4UpperCT = %d, i4RealLV = %d, i4LowerLV = %d, i4UpperLV = %d\n",
                        __FUNCTION__, u4RealCT, u4LowerCT, u4UpperCT, i4RealLV, i4LowerLV, i4UpperLV);

    // Initialize
    //static MBOOL FirstTimeBoot = MTRUE;
    //static ISP_NVRAM_COLOR_T FinalTbl;
    ISP_NVRAM_COLOR_T LV_Lo_CT_Lo_Tbl;
    ISP_NVRAM_COLOR_T LV_Lo_CT_Up_Tbl;
    ISP_NVRAM_COLOR_T LV_Up_CT_Lo_Tbl;
    ISP_NVRAM_COLOR_T LV_Up_CT_Up_Tbl;

    ISP_NVRAM_COLOR_PARAM_T ParamsInRam;

    ISP_SMOOTH_COLOR_PARAM_T Param;

    memcpy(&LV_Lo_CT_Lo_Tbl, &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Lo_CT_Up_Tbl, &rNVRAM_COLORS_LV_Lo_CT_Up.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Up_CT_Lo_Tbl, &rNVRAM_COLORS_LV_Up_CT_Lo.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Up_CT_Up_Tbl, &rNVRAM_COLORS_LV_Up_CT_Up.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));

    memcpy(&ParamsInRam, &Para_Color, sizeof(ISP_NVRAM_COLOR_PARAM_T));

    // Below setting apply 1st table of each scene
    memcpy(&rSmoothColor_Prv.cfg_main      , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.cfg_main,       sizeof(ISP_NVRAM_COLOR_CFG_MAIN_T      ));
    memcpy(&rSmoothColor_Prv.c_boost_main  , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.c_boost_main,   sizeof(ISP_NVRAM_COLOR_C_BOOST_MAIN_T  ));
    memcpy(&rSmoothColor_Prv.c_boost_main_2, &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.c_boost_main_2, sizeof(ISP_NVRAM_COLOR_C_BOOST_MAIN_2_T));
    memcpy(&rSmoothColor_Prv.luma_adj      , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.luma_adj,       sizeof(ISP_NVRAM_COLOR_LUMA_ADJ_T      ));

    Param.u4LumStep = ParamsInRam.u4Lum_Speed;
    Param.u4SatStep = ParamsInRam.u4Sat_Speed;
    Param.u4HueStep = ParamsInRam.u4Hue_Speed;

    COLOR_LOG_IF(debugDump, "[%s()] IsCapture = %d, IsBoot = %d\n", __FUNCTION__, IsCapture, rFirstTimeBoot);
    COLOR_LOG_IF(debugDump, "[%s()] In Ram: %03d, %03d, %03d, %03d, %03d, %03d, %03d, %03d\n", __FUNCTION__,
                        ParamsInRam.u4DC_Offset, ParamsInRam.u4Lum_Speed, ParamsInRam.u4Hue_Speed, ParamsInRam.u4Sat_Speed,
                        ParamsInRam.u4LSP_LV_TH, ParamsInRam.u4Outdoor_EN, ParamsInRam.u4Outdoor_Speed, ParamsInRam.u4Outdoor_Ratio);

    if (debugEn == 1) // Enable adb command to bypass sub module
    {
        rSmoothColor_Prv.cfg_main.bits.COLOR_YENG_BYPASS = PassY;
        rSmoothColor_Prv.cfg_main.bits.COLOR_SENG_BYPASS = PassS;
        rSmoothColor_Prv.cfg_main.bits.COLOR_HENG_BYPASS = PassH;
        rSmoothColor_Prv.cm_control.bits.COLOR_CM_BYPASS = PassCM;
    }

    // If initialize
    Param.bIsInitial = rFirstTimeBoot;//FirstTimeBoot;

    if (SColorUnitTest == 1)
    {
        // ---- Menu LV/CT for UT ----//

        // Mired color temperature
        if (u4RealCT == 0) u4RealCT = 1;
        if (u4UpperCT == 0) u4UpperCT = 1;
        if (u4LowerCT == 0) u4LowerCT = 1;

        Param.u4RealMired  = 1000000/5000;
        Param.u4UpperMired = 1000000/5500;
        Param.u4LowerMired = 1000000/4000;

        //LV tuning
        Param.i4RealLV  = 60;
        Param.i4LowerLV = 50;
        Param.i4UpperLV = 100;

        // ---- Menu Parameters for UT ----//
        // LV_Lo_CT_Lo_Tbl for test InterParamGlobal
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS = 128;
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_G_CONTRAST   = 128;
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_2.bits.COLOR_G_SATURATION = 128;


        // LV_Lo_CT_Lo_Tbl for test InterParamPartialY
        LV_Lo_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4    = 130;
        LV_Lo_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5    = 131;
        LV_Lo_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6    = 134;
        LV_Lo_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7    = 144;
        LV_Lo_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15 = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamPartialH
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4  = 130;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5  = 131;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6  = 134;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7  = 144;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19 = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamPartialS
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7    = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8    = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9    = 132;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12   = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14   = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1    = 119;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2    = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4    = 139;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5    = 138;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6    = 136;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7    = 114;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8    = 113;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9    = 124;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11   = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12   = 139;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13   = 134;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14   = 118;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17   = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18   = 119;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19   = 120;

        // LV_Lo_CT_Lo_Tbl for test InterParamSGainByY
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19    = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamLSP
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_STH                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YTH                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE                   = 127;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE                   = 0;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE                   = 127;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_STH                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_GAIN                     = 127;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LIRE_GAIN                     = 127;

        // LV_Lo_CT_Lo_Tbl for test InterParam3DLUT
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_INK_EN                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_INK_EN                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_INK_EN                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_INK_DELTA_MODE           = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_INK_CH                       = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_BYPASS                        = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_EN                         = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_WGT_EN                 = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_EN                         = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_WGT_EN                 = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_EN                         = 1;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_WGT_EN                 = 1;

        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_L                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_U                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_L                  = 806;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0              = 829;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1             = 852;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2             = 875;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3              = 898;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4             = 921;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_U                  = 944;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L                  = 421;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0              = 521;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1            = 621;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2            = 722;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3              = 822;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4            = 922;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U                  = 1023;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_L                  = 5;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0              = 22;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1             = 39;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2             = 56;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3              = 73;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4             = 90;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_U                  = 107;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE         = 0;



        // LV_Lo_CT_Up_Tbl for test InterParamGlobal
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS = 128;
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_G_CONTRAST   = 128;
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_2.bits.COLOR_G_SATURATION = 128;


        // LV_Lo_CT_Up_Tbl for test InterParamPartialY
        LV_Lo_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15 = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamPartialH
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4  = 130;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5  = 131;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6  = 134;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7  = 144;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19 = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamPartialS
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0    = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9    = 132;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18   = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0    = 123;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1    = 116;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2    = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3    = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4    = 139;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5    = 138;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6    = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7    = 114;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8    = 113;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9    = 124;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13   = 116;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17   = 119;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18   = 122;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19   = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamSGainByY
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0          = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0       = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1       = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2       = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3       = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4       = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5       = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6       = 119;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10      = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11      = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12      = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13      = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14      = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15      = 130;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16      = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17      = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18      = 117;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19      = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3     = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4     = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6     = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12    = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13    = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18    = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1     = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10    = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12    = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13    = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14    = 140;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15    = 140;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16    = 138;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17    = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18    = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19    = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19    = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamLSP
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_STH                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YTH                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE                   = 127;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE                   = 0;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE                   = 127;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_STH                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_GAIN                     = 127;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LIRE_GAIN                     = 127;

        // LV_Lo_CT_Up_Tbl for test InterParam3DLUT
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_INK_EN                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_INK_EN                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_INK_EN                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_INK_DELTA_MODE           = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_INK_CH                       = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_BYPASS                        = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_EN                         = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_WGT_EN                 = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_EN                         = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_WGT_EN                 = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_EN                         = 1;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_WGT_EN                 = 1;

        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE        = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE        = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE        = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE        = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_L                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_U                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE         = 0;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_L                  = 806;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0              = 829;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1             = 852;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2             = 875;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3              = 898;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4             = 921;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_U                  = 944;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE         = 16;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE         = 16;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L                  = 421;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0              = 521;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1            = 621;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2            = 722;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3              = 822;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4            = 922;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U                  = 1023;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE        = 28;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE        = 28;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_L                  = 5;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0              = 22;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1             = 39;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2             = 56;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3              = 73;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4             = 90;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_U                  = 107;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE         = 41;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE         = 41;



        // LV_Up_CT_Lo_Tbl for test InterParamGlobal
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS = 128;
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_G_CONTRAST   = 128;
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_2.bits.COLOR_G_SATURATION = 128;


        // LV_Up_CT_Lo_Tbl for test InterParamPartialY
        LV_Up_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9    = 144;
        LV_Up_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15 = 160;

        // LV_Up_CT_Lo_Tbl for test InterParamPartialH
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19 = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamPartialS
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19   = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamSGainByY
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0          = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0       = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1       = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2       = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3       = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4       = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5       = 130;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6       = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7       = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8       = 117;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9       = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10      = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11      = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12      = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13      = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14      = 119;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18      = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19      = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0     = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1     = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7     = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8     = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9     = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11    = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12    = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14    = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15    = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17    = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1     = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2     = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3     = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4     = 140;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5     = 140;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6     = 138;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7     = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8     = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9     = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18    = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19    = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamLSP
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_STH                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YTH                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE                   = 127;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE                   = 0;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE                   = 127;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_STH                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LSAT_GAIN                     = 127;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_LSP_LIRE_GAIN                     = 127;

        // LV_Up_CT_Lo_Tbl for test InterParam3DLUT
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_INK_EN                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_INK_EN                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_INK_EN                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_INK_DELTA_MODE           = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_INK_CH                       = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_BYPASS                        = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_EN                         = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W1_WGT_EN                 = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_EN                         = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W2_WGT_EN                 = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_EN                         = 1;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_CM_W3_WGT_EN                 = 1;

        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE        = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE        = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE        = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE        = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_L                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_U                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE         = 0;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_L                  = 806;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0              = 829;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1             = 852;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2             = 875;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3              = 898;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4             = 921;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_U                  = 944;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE         = 16;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE         = 16;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L                  = 421;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0              = 521;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1            = 621;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2            = 722;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3              = 822;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4            = 922;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U                  = 1023;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE        = 28;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE        = 28;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_L                  = 5;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0              = 22;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1             = 39;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2             = 56;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3              = 73;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4             = 90;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_U                  = 107;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE         = 41;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE         = 41;



        // LV_Up_CT_Up_Tbl for test InterParamGlobal
        LV_Up_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_G_BRIGHTNESS = 128;
        LV_Up_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_G_CONTRAST   = 128;
        LV_Up_CT_Up_Tbl.g_pic_adj_main_2.bits.COLOR_G_SATURATION = 128;


        // LV_Up_CT_Up_Tbl for test InterParamPartialY
        LV_Up_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_0    = 107;
        LV_Up_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_Y_SLOPE_1    = 104;
        LV_Up_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_2    = 109;
        LV_Up_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_Y_SLOPE_3    = 107;
        LV_Up_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_4    = 139;
        LV_Up_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_Y_SLOPE_5    = 138;
        LV_Up_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_6    = 137;
        LV_Up_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_Y_SLOPE_7    = 106;
        LV_Up_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_8    = 104;
        LV_Up_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_Y_SLOPE_9    = 116;
        LV_Up_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_10 = 106;
        LV_Up_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_Y_SLOPE_11 = 109;
        LV_Up_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_12 = 107;
        LV_Up_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_Y_SLOPE_13 = 104;
        LV_Up_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_14 = 109;
        LV_Up_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_Y_SLOPE_15 = 107;

        // LV_Up_CT_Up_Tbl for test InterParamPartialH
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_0  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_1  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_2  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_HUE_TO_HUE_3  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_4  = 138;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_5  = 154;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_6  = 138;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_HUE_TO_HUE_7  = 140;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_8  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_9  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_10 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_HUE_TO_HUE_11 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_12 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_13 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_14 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_HUE_TO_HUE_15 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_16 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_17 = 144;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_18 = 132;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_HUE_TO_HUE_19 = 128;

        // LV_Up_CT_Up_Tbl for test InterParamPartialS
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_0  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_1  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_2  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_SAT_POINT1_HUE_3  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_4  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_5  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_6  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_SAT_POINT1_HUE_7  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_8  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_9  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_10 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_SAT_POINT1_HUE_11 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_12 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_13 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_14 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_SAT_POINT1_HUE_15 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_16 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_17 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_18 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_SAT_POINT1_HUE_19 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_0  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_1  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_2  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_SAT_POINT2_HUE_3  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_4  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_5  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_6  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_SAT_POINT2_HUE_7  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_8  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_9  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_10 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_SAT_POINT2_HUE_11 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_12 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_13 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_14 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_SAT_POINT2_HUE_15 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_16 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_17 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_18 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_SAT_POINT2_HUE_19 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_0    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_1    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_2    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_SAT_GAIN1_HUE_3    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_4    = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_5    = 112;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_6    = 116;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_SAT_GAIN1_HUE_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_10   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_SAT_GAIN1_HUE_11   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_12   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_13   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_14   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_SAT_GAIN1_HUE_15   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_SAT_GAIN1_HUE_19   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_0    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_1    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_2    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_SAT_GAIN2_HUE_3    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_4    = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_5    = 112;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_6    = 116;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_SAT_GAIN2_HUE_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_10   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_SAT_GAIN2_HUE_11   = 142;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_12   = 148;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_13   = 142;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_14   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_SAT_GAIN2_HUE_15   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_SAT_GAIN2_HUE_19   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_0    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_1    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_2    = 122;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_SAT_GAIN3_HUE_3    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_4    = 136;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_5    = 143;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_6    = 139;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_SAT_GAIN3_HUE_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_10   = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_SAT_GAIN3_HUE_11   = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_12   = 115;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_13   = 118;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_14   = 122;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_SAT_GAIN3_HUE_15   = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_SAT_GAIN3_HUE_19   = 128;

        // LV_Up_CT_Up_Tbl for test InterParamSGainByY
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_0          = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_1         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_2         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_S_GAIN_Y0_HUE_3         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_4         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_5         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_6         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_S_GAIN_Y0_HUE_7         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_8         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_9         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_10        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_S_GAIN_Y0_HUE_11        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_12        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_13        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_14        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_S_GAIN_Y0_HUE_15        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_16        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_17        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_18        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_S_GAIN_Y0_HUE_19        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_0       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_1       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_2       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_S_GAIN_Y64_HUE_3       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_4       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_5       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_6       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_S_GAIN_Y64_HUE_7       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_8       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_9       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_10      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_S_GAIN_Y64_HUE_11      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_12      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_13      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_14      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_S_GAIN_Y64_HUE_15      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_16      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_17      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_18      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_S_GAIN_Y64_HUE_19      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_S_GAIN_Y128_HUE_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_S_GAIN_Y128_HUE_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_S_GAIN_Y128_HUE_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_S_GAIN_Y128_HUE_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_S_GAIN_Y128_HUE_19    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_S_GAIN_Y192_HUE_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_S_GAIN_Y192_HUE_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_S_GAIN_Y192_HUE_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_S_GAIN_Y192_HUE_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_S_GAIN_Y192_HUE_19    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_S_GAIN_Y256_HUE_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_S_GAIN_Y256_HUE_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_S_GAIN_Y256_HUE_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_S_GAIN_Y256_HUE_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_S_GAIN_Y256_HUE_19    = 128;

        // LV_Up_CT_Up_Tbl for test InterParamLSP
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_STH                      = 0;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YTH                      = 0;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_SSLOPE                   = 127;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_LSP_LIRE_YSLOPE                   = 0;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_SSLOPE                   = 127;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_STH                      = 0;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LSAT_GAIN                     = 127;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_LSP_LIRE_GAIN                     = 127;

        // LV_Up_CT_Up_Tbl for test InterParam3DLUT
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_INK_EN                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_INK_EN                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_INK_EN                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_INK_DELTA_MODE           = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_INK_CH                       = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_BYPASS                        = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_EN                         = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W1_WGT_EN                 = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_EN                         = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W2_WGT_EN                 = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_EN                         = 1;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_CM_W3_WGT_EN                 = 1;

        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT1             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_CM_H_W1_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_POINT4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_CM_H_W1_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE0             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_CM_H_W1_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE3             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_CM_H_W1_SLOPE5             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_LSLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_CM_H_W1_WGT_USLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT1            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT2            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_CM_Y_W1_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_POINT4            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_CM_Y_W1_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE0            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_CM_Y_W1_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE2            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE3            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE4            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_CM_Y_W1_SLOPE5            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_LSLOPE        = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_CM_Y_W1_WGT_USLOPE        = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT1             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_CM_S_W1_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_POINT4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_CM_S_W1_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE0             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_CM_S_W1_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE3             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_CM_S_W1_SLOPE5             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_LSLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_CM_S_W1_WGT_USLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT1             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_CM_H_W2_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_POINT4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_CM_H_W2_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE0             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_CM_H_W2_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE3             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_CM_H_W2_SLOPE5             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_LSLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_CM_H_W2_WGT_USLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT1            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT2            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_CM_Y_W2_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_POINT4            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_CM_Y_W2_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE0            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_CM_Y_W2_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE2            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE3            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE4            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_CM_Y_W2_SLOPE5            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_LSLOPE        = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_CM_Y_W2_WGT_USLOPE        = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_L                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_POINT0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT1             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_CM_S_W2_POINT3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_POINT4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_CM_S_W2_U                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE0             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_CM_S_W2_SLOPE1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE3             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_CM_S_W2_SLOPE5             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_LSLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_CM_S_W2_WGT_USLOPE         = 0;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_L                  = 806;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_POINT0              = 829;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT1             = 852;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT2             = 875;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_CM_H_W3_POINT3              = 898;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_POINT4             = 921;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_CM_H_W3_U                  = 944;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE0             = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_CM_H_W3_SLOPE1              = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE2             = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE3             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE4             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_CM_H_W3_SLOPE5             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_LSLOPE         = 16;
        LV_Up_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_CM_H_W3_WGT_USLOPE         = 16;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_L                  = 421;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_POINT0              = 521;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT1            = 621;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT2            = 722;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_CM_Y_W3_POINT3              = 822;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_POINT4            = 922;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_CM_Y_W3_U                  = 1023;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE0            = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_CM_Y_W3_SLOPE1              = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE2            = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE3            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE4            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_CM_Y_W3_SLOPE5            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_LSLOPE        = 28;
        LV_Up_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_CM_Y_W3_WGT_USLOPE        = 28;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_L                  = 5;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_POINT0              = 22;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT1             = 39;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT2             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_CM_S_W3_POINT3              = 73;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_POINT4             = 90;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_CM_S_W3_U                  = 107;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE0             = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_CM_S_W3_SLOPE1              = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE2             = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE3             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE4             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_CM_S_W3_SLOPE5             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_LSLOPE         = 41;
        LV_Up_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_CM_S_W3_WGT_USLOPE         = 41;
    }
    else // SColorUnitTest == 0
    {
        // Mired color temperature
        if (u4RealCT == 0) u4RealCT = 1;
        if (u4UpperCT == 0) u4UpperCT = 1;
        if (u4LowerCT == 0) u4LowerCT = 1;

        Param.u4RealMired  = 1000000/u4RealCT;
        Param.u4UpperMired = 1000000/u4UpperCT;
        Param.u4LowerMired = 1000000/u4LowerCT;

        //LV tuning
        Param.i4RealLV  = i4RealLV;
        Param.i4LowerLV = i4LowerLV;
        Param.i4UpperLV = i4UpperLV;
    }

    //MUINT8 Offset = ParamsInRam.u4DC_Offset;
    Param.u4LVOfst = ParamsInRam.u4DC_Offset;

    // LSP
    MUINT32 lsp_th = ParamsInRam.u4LSP_LV_TH;
    Param.bEnableLSP = MFALSE;

    COLOR_LOG_IF(debugDump, "[%s()] LSP = (%d, %d)\n", __FUNCTION__, (i4RealLV <= lsp_th), rSmoothColor_Prv.cfg_main.bits.COLOR_LSP_EN);

    if (i4RealLV <= lsp_th && rSmoothColor_Prv.cfg_main.bits.COLOR_LSP_EN == 1)
    {
        Param.bEnableLSP = MTRUE;
    }

    // Capture mode
    Param.bIsCapture = IsCapture;
    if (Param.bIsCapture == MTRUE)
    {
        COLOR_LOG_IF(debugDump, "[%s()] Capture mode!!\n", __FUNCTION__);
    }

    // Interpolation start
    if (IsLock == 1)
    {
        COLOR_LOG_IF(IsLock, "[%s()] Force Lock!!\n", __FUNCTION__);
    }
    else // Interpolated mode
    {
        COLOR_LOG_IF(debugDump, "[%s()] Interpolated mode !!\n", __FUNCTION__);

        if (SColorUnitTest == 1)
        {
            // Global Saturation/Brightness/Contrast
            InterParamGlobal(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Y
            InterParamPartialY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Hue
            InterParamPartialH(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Sat
            InterParamPartialS(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // S gain by Y
            InterParamSGainByY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // LSP
            InterParamLSP(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // CM W1/W2/W3
            InterParam3DLUT(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);
        }
        else // bSmoothColorUnitTest == 0
        {
            // Global Saturation/Brightness/Contrast
            InterParamGlobal(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Y
            InterParamPartialY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Hue
            InterParamPartialH(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Sat
            InterParamPartialS(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // S gain by Y
            InterParamSGainByY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // LSP
            InterParamLSP(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // CM W1/W2/W3
            InterParam3DLUT(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);
        }
    }
/*
    if if (Param.bIsCapture == MTRUE)
    {
        FD_Color( u4RealCT,
                  i4RealLV,
                  rNVRAM_COLORS_LV_Lo_CT_Lo.FD_COLOR,
                  rNVRAM_COLORS_LV_Lo_CT_Up.FD_COLOR,
                  rNVRAM_COLORS_LV_Up_CT_Lo.FD_COLOR,
                  rNVRAM_COLORS_LV_Up_CT_Up.FD_COLOR,
                  rFdInfo,
                  rSmoothColor_Prv);
    }
*/
    memcpy(&rSmoothCOLOR_TBL, &rSmoothColor_Prv, sizeof(ISP_NVRAM_COLOR_T));

    // Clear initialize flag
    rFirstTimeBoot = MFALSE;
    UTIL_TRACE_END();
}
