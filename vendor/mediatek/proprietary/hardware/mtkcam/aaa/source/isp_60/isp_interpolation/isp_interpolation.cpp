/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#define LOG_TAG "isp_interpolation"

#ifndef ENABLE_MY_LOG
    #define ENABLE_MY_LOG       (1)
#endif

#include <cutils/properties.h>
#include <stdlib.h>
#include <cutils/log.h>
#include <math.h>
#include <aaa_types.h>
#include <aaa_log.h>
#include <camera_custom_nvram.h>
#include <isp_tuning_cam_info.h>
#include "isp_interpolation.h"
#include <isp_feature.h>
#include <utilSystrace.h>
#include <mtkcam/utils/imgbuf/IImageBuffer.h>
#include <mtkcam/utils/imgbuf/IIonImageBufferHeap.h>

#define INTER_LOGD(fmt, arg...) ALOGD(fmt, ##arg)
#define INTER_LOGW(fmt, arg...) ALOGW(fmt, ##arg)
#define INTER_LOGE(fmt, arg...) ALOGE(fmt, ##arg)

#define INTER_LOG_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGD(__VA_ARGS__); } }while(0)
#define INTER_LOGW_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGW(__VA_ARGS__); } }while(0)
#define INTER_LOGE_IF(cond, ...)      do { if ( (cond) ) { INTER_LOGE(__VA_ARGS__); } }while(0)

#define COLOR_LOGD(fmt, arg...) ALOGD(fmt, ##arg)
#define COLOR_LOG_IF(cond, ...)      do { if ( (cond) ) { COLOR_LOGD(__VA_ARGS__); } }while(0)
MUINT16 g_Smooth_Color_Ver = 120; // V1.20
MUINT16 g_FW_YNR_Ver = 110; // V1.10

#define GGM_TABLE_SIZE 192

#define PI 3.14159265358979323846

MINT32 LOG10_TBL[4096] = {  0, 308, 489, 617, 716, 797, 865, 925, 977, 1024, 1066, 1105, 1141, 1174, 1204, 1233, 1260, 1285, 1309, 1332, 1354, 1375, 1394, 1413, 1431, 1449, 1466, 1482, 1497, 1513, 1527, 1541,
                        1555, 1568, 1581, 1594, 1606, 1618, 1629, 1641, 1651, 1662, 1673, 1683, 1693, 1703, 1712, 1722, 1731, 1740, 1749, 1757, 1766, 1774, 1782, 1790, 1798, 1806, 1813, 1821, 1828, 1835, 1843, 1850,
                        1856, 1863, 1870, 1876, 1883, 1889, 1896, 1902, 1908, 1914, 1920, 1926, 1932, 1938, 1943, 1949, 1954, 1960, 1965, 1970, 1976, 1981, 1986, 1991, 1996, 2001, 2006, 2011, 2016, 2020, 2025, 2030,
                        2034, 2039, 2044, 2048, 2052, 2057, 2061, 2065, 2070, 2074, 2078, 2082, 2086, 2090, 2094, 2098, 2102, 2106, 2110, 2114, 2118, 2122, 2125, 2129, 2133, 2136, 2140, 2144, 2147, 2151, 2154, 2158,
                        2161, 2165, 2168, 2171, 2175, 2178, 2181, 2185, 2188, 2191, 2194, 2198, 2201, 2204, 2207, 2210, 2213, 2216, 2219, 2222, 2225, 2228, 2231, 2234, 2237, 2240, 2243, 2246, 2249, 2251, 2254, 2257,
                        2260, 2263, 2265, 2268, 2271, 2273, 2276, 2279, 2281, 2284, 2287, 2289, 2292, 2294, 2297, 2299, 2302, 2304, 2307, 2309, 2312, 2314, 2317, 2319, 2322, 2324, 2326, 2329, 2331, 2333, 2336, 2338,
                        2340, 2343, 2345, 2347, 2350, 2352, 2354, 2356, 2358, 2361, 2363, 2365, 2367, 2369, 2372, 2374, 2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2393, 2395, 2397, 2399, 2401, 2403, 2405, 2407,
                        2409, 2411, 2413, 2415, 2416, 2418, 2420, 2422, 2424, 2426, 2428, 2430, 2432, 2434, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2448, 2450, 2452, 2454, 2455, 2457, 2459, 2461, 2463, 2464, 2466,
                        2468, 2469, 2471, 2473, 2475, 2476, 2478, 2480, 2481, 2483, 2485, 2486, 2488, 2490, 2491, 2493, 2495, 2496, 2498, 2499, 2501, 2503, 2504, 2506, 2507, 2509, 2511, 2512, 2514, 2515, 2517, 2518,
                        2520, 2521, 2523, 2525, 2526, 2528, 2529, 2531, 2532, 2534, 2535, 2537, 2538, 2540, 2541, 2542, 2544, 2545, 2547, 2548, 2550, 2551, 2553, 2554, 2555, 2557, 2558, 2560, 2561, 2562, 2564, 2565,
                        2567, 2568, 2569, 2571, 2572, 2574, 2575, 2576, 2578, 2579, 2580, 2582, 2583, 2584, 2586, 2587, 2588, 2590, 2591, 2592, 2594, 2595, 2596, 2597, 2599, 2600, 2601, 2603, 2604, 2605, 2606, 2608,
                        2609, 2610, 2611, 2613, 2614, 2615, 2616, 2618, 2619, 2620, 2621, 2623, 2624, 2625, 2626, 2627, 2629, 2630, 2631, 2632, 2633, 2635, 2636, 2637, 2638, 2639, 2641, 2642, 2643, 2644, 2645, 2646,
                        2648, 2649, 2650, 2651, 2652, 2653, 2654, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2665, 2666, 2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2677, 2678, 2679, 2680, 2681, 2682,
                        2683, 2684, 2685, 2686, 2687, 2688, 2689, 2690, 2691, 2693, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715,
                        2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746,
                        2747, 2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756, 2757, 2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766, 2766, 2767, 2768, 2769, 2770, 2771, 2772, 2773, 2773, 2774,
                        2775, 2776, 2777, 2778, 2779, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2785, 2786, 2787, 2788, 2789, 2790, 2790, 2791, 2792, 2793, 2794, 2795, 2795, 2796, 2797, 2798, 2799, 2800, 2800, 2801,
                        2802, 2803, 2804, 2805, 2805, 2806, 2807, 2808, 2809, 2809, 2810, 2811, 2812, 2813, 2813, 2814, 2815, 2816, 2817, 2817, 2818, 2819, 2820, 2820, 2821, 2822, 2823, 2824, 2824, 2825, 2826, 2827,
                        2827, 2828, 2829, 2830, 2831, 2831, 2832, 2833, 2834, 2834, 2835, 2836, 2837, 2837, 2838, 2839, 2840, 2840, 2841, 2842, 2843, 2843, 2844, 2845, 2846, 2846, 2847, 2848, 2849, 2849, 2850, 2851,
                        2851, 2852, 2853, 2854, 2854, 2855, 2856, 2857, 2857, 2858, 2859, 2859, 2860, 2861, 2862, 2862, 2863, 2864, 2864, 2865, 2866, 2867, 2867, 2868, 2869, 2869, 2870, 2871, 2871, 2872, 2873, 2874,
                        2874, 2875, 2876, 2876, 2877, 2878, 2878, 2879, 2880, 2880, 2881, 2882, 2882, 2883, 2884, 2885, 2885, 2886, 2887, 2887, 2888, 2889, 2889, 2890, 2891, 2891, 2892, 2893, 2893, 2894, 2895, 2895,
                        2896, 2897, 2897, 2898, 2899, 2899, 2900, 2900, 2901, 2902, 2902, 2903, 2904, 2904, 2905, 2906, 2906, 2907, 2908, 2908, 2909, 2910, 2910, 2911, 2911, 2912, 2913, 2913, 2914, 2915, 2915, 2916,
                        2917, 2917, 2918, 2918, 2919, 2920, 2920, 2921, 2922, 2922, 2923, 2923, 2924, 2925, 2925, 2926, 2927, 2927, 2928, 2928, 2929, 2930, 2930, 2931, 2931, 2932, 2933, 2933, 2934, 2934, 2935, 2936,
                        2936, 2937, 2937, 2938, 2939, 2939, 2940, 2940, 2941, 2942, 2942, 2943, 2943, 2944, 2945, 2945, 2946, 2946, 2947, 2948, 2948, 2949, 2949, 2950, 2951, 2951, 2952, 2952, 2953, 2953, 2954, 2955,
                        2955, 2956, 2956, 2957, 2957, 2958, 2959, 2959, 2960, 2960, 2961, 2962, 2962, 2963, 2963, 2964, 2964, 2965, 2965, 2966, 2967, 2967, 2968, 2968, 2969, 2969, 2970, 2971, 2971, 2972, 2972, 2973,
                        2973, 2974, 2974, 2975, 2976, 2976, 2977, 2977, 2978, 2978, 2979, 2979, 2980, 2980, 2981, 2982, 2982, 2983, 2983, 2984, 2984, 2985, 2985, 2986, 2986, 2987, 2988, 2988, 2989, 2989, 2990, 2990,
                        2991, 2991, 2992, 2992, 2993, 2993, 2994, 2994, 2995, 2996, 2996, 2997, 2997, 2998, 2998, 2999, 2999, 3000, 3000, 3001, 3001, 3002, 3002, 3003, 3003, 3004, 3004, 3005, 3005, 3006, 3006, 3007,
                        3008, 3008, 3009, 3009, 3010, 3010, 3011, 3011, 3012, 3012, 3013, 3013, 3014, 3014, 3015, 3015, 3016, 3016, 3017, 3017, 3018, 3018, 3019, 3019, 3020, 3020, 3021, 3021, 3022, 3022, 3023, 3023,
                        3024, 3024, 3025, 3025, 3026, 3026, 3027, 3027, 3028, 3028, 3029, 3029, 3030, 3030, 3031, 3031, 3032, 3032, 3032, 3033, 3033, 3034, 3034, 3035, 3035, 3036, 3036, 3037, 3037, 3038, 3038, 3039,
                        3039, 3040, 3040, 3041, 3041, 3042, 3042, 3043, 3043, 3044, 3044, 3044, 3045, 3045, 3046, 3046, 3047, 3047, 3048, 3048, 3049, 3049, 3050, 3050, 3051, 3051, 3052, 3052, 3052, 3053, 3053, 3054,
                        3054, 3055, 3055, 3056, 3056, 3057, 3057, 3058, 3058, 3058, 3059, 3059, 3060, 3060, 3061, 3061, 3062, 3062, 3063, 3063, 3063, 3064, 3064, 3065, 3065, 3066, 3066, 3067, 3067, 3068, 3068, 3068,
                        3069, 3069, 3070, 3070, 3071, 3071, 3072, 3072, 3072, 3073, 3073, 3074, 3074, 3075, 3075, 3076, 3076, 3076, 3077, 3077, 3078, 3078, 3079, 3079, 3079, 3080, 3080, 3081, 3081, 3082, 3082, 3083,
                        3083, 3083, 3084, 3084, 3085, 3085, 3086, 3086, 3086, 3087, 3087, 3088, 3088, 3089, 3089, 3089, 3090, 3090, 3091, 3091, 3092, 3092, 3092, 3093, 3093, 3094, 3094, 3095, 3095, 3095, 3096, 3096,
                        3097, 3097, 3097, 3098, 3098, 3099, 3099, 3100, 3100, 3100, 3101, 3101, 3102, 3102, 3103, 3103, 3103, 3104, 3104, 3105, 3105, 3105, 3106, 3106, 3107, 3107, 3107, 3108, 3108, 3109, 3109, 3110,
                        3110, 3110, 3111, 3111, 3112, 3112, 3112, 3113, 3113, 3114, 3114, 3114, 3115, 3115, 3116, 3116, 3116, 3117, 3117, 3118, 3118, 3118, 3119, 3119, 3120, 3120, 3120, 3121, 3121, 3122, 3122, 3122,
                        3123, 3123, 3124, 3124, 3124, 3125, 3125, 3126, 3126, 3126, 3127, 3127, 3128, 3128, 3128, 3129, 3129, 3129, 3130, 3130, 3131, 3131, 3131, 3132, 3132, 3133, 3133, 3133, 3134, 3134, 3135, 3135,
                        3135, 3136, 3136, 3136, 3137, 3137, 3138, 3138, 3138, 3139, 3139, 3140, 3140, 3140, 3141, 3141, 3141, 3142, 3142, 3143, 3143, 3143, 3144, 3144, 3144, 3145, 3145, 3146, 3146, 3146, 3147, 3147,
                        3147, 3148, 3148, 3149, 3149, 3149, 3150, 3150, 3150, 3151, 3151, 3152, 3152, 3152, 3153, 3153, 3153, 3154, 3154, 3155, 3155, 3155, 3156, 3156, 3156, 3157, 3157, 3158, 3158, 3158, 3159, 3159,
                        3159, 3160, 3160, 3160, 3161, 3161, 3162, 3162, 3162, 3163, 3163, 3163, 3164, 3164, 3164, 3165, 3165, 3166, 3166, 3166, 3167, 3167, 3167, 3168, 3168, 3168, 3169, 3169, 3169, 3170, 3170, 3171,
                        3171, 3171, 3172, 3172, 3172, 3173, 3173, 3173, 3174, 3174, 3174, 3175, 3175, 3175, 3176, 3176, 3177, 3177, 3177, 3178, 3178, 3178, 3179, 3179, 3179, 3180, 3180, 3180, 3181, 3181, 3181, 3182,
                        3182, 3182, 3183, 3183, 3184, 3184, 3184, 3185, 3185, 3185, 3186, 3186, 3186, 3187, 3187, 3187, 3188, 3188, 3188, 3189, 3189, 3189, 3190, 3190, 3190, 3191, 3191, 3191, 3192, 3192, 3192, 3193,
                        3193, 3193, 3194, 3194, 3194, 3195, 3195, 3195, 3196, 3196, 3196, 3197, 3197, 3197, 3198, 3198, 3198, 3199, 3199, 3199, 3200, 3200, 3200, 3201, 3201, 3201, 3202, 3202, 3202, 3203, 3203, 3203,
                        3204, 3204, 3204, 3205, 3205, 3205, 3206, 3206, 3206, 3207, 3207, 3207, 3208, 3208, 3208, 3209, 3209, 3209, 3210, 3210, 3210, 3211, 3211, 3211, 3212, 3212, 3212, 3213, 3213, 3213, 3214, 3214,
                        3214, 3215, 3215, 3215, 3216, 3216, 3216, 3217, 3217, 3217, 3217, 3218, 3218, 3218, 3219, 3219, 3219, 3220, 3220, 3220, 3221, 3221, 3221, 3222, 3222, 3222, 3223, 3223, 3223, 3224, 3224, 3224,
                        3224, 3225, 3225, 3225, 3226, 3226, 3226, 3227, 3227, 3227, 3228, 3228, 3228, 3229, 3229, 3229, 3230, 3230, 3230, 3230, 3231, 3231, 3231, 3232, 3232, 3232, 3233, 3233, 3233, 3234, 3234, 3234,
                        3234, 3235, 3235, 3235, 3236, 3236, 3236, 3237, 3237, 3237, 3238, 3238, 3238, 3238, 3239, 3239, 3239, 3240, 3240, 3240, 3241, 3241, 3241, 3242, 3242, 3242, 3242, 3243, 3243, 3243, 3244, 3244,
                        3244, 3245, 3245, 3245, 3245, 3246, 3246, 3246, 3247, 3247, 3247, 3248, 3248, 3248, 3248, 3249, 3249, 3249, 3250, 3250, 3250, 3251, 3251, 3251, 3251, 3252, 3252, 3252, 3253, 3253, 3253, 3254,
                        3254, 3254, 3254, 3255, 3255, 3255, 3256, 3256, 3256, 3256, 3257, 3257, 3257, 3258, 3258, 3258, 3259, 3259, 3259, 3259, 3260, 3260, 3260, 3261, 3261, 3261, 3261, 3262, 3262, 3262, 3263, 3263,
                        3263, 3263, 3264, 3264, 3264, 3265, 3265, 3265, 3265, 3266, 3266, 3266, 3267, 3267, 3267, 3267, 3268, 3268, 3268, 3269, 3269, 3269, 3269, 3270, 3270, 3270, 3271, 3271, 3271, 3271, 3272, 3272,
                        3272, 3273, 3273, 3273, 3273, 3274, 3274, 3274, 3275, 3275, 3275, 3275, 3276, 3276, 3276, 3277, 3277, 3277, 3277, 3278, 3278, 3278, 3279, 3279, 3279, 3279, 3280, 3280, 3280, 3280, 3281, 3281,
                        3281, 3282, 3282, 3282, 3282, 3283, 3283, 3283, 3284, 3284, 3284, 3284, 3285, 3285, 3285, 3285, 3286, 3286, 3286, 3287, 3287, 3287, 3287, 3288, 3288, 3288, 3288, 3289, 3289, 3289, 3290, 3290,
                        3290, 3290, 3291, 3291, 3291, 3291, 3292, 3292, 3292, 3293, 3293, 3293, 3293, 3294, 3294, 3294, 3294, 3295, 3295, 3295, 3296, 3296, 3296, 3296, 3297, 3297, 3297, 3297, 3298, 3298, 3298, 3298,
                        3299, 3299, 3299, 3300, 3300, 3300, 3300, 3301, 3301, 3301, 3301, 3302, 3302, 3302, 3302, 3303, 3303, 3303, 3304, 3304, 3304, 3304, 3305, 3305, 3305, 3305, 3306, 3306, 3306, 3306, 3307, 3307,
                        3307, 3307, 3308, 3308, 3308, 3309, 3309, 3309, 3309, 3310, 3310, 3310, 3310, 3311, 3311, 3311, 3311, 3312, 3312, 3312, 3312, 3313, 3313, 3313, 3313, 3314, 3314, 3314, 3314, 3315, 3315, 3315,
                        3316, 3316, 3316, 3316, 3317, 3317, 3317, 3317, 3318, 3318, 3318, 3318, 3319, 3319, 3319, 3319, 3320, 3320, 3320, 3320, 3321, 3321, 3321, 3321, 3322, 3322, 3322, 3322, 3323, 3323, 3323, 3323,
                        3324, 3324, 3324, 3324, 3325, 3325, 3325, 3325, 3326, 3326, 3326, 3326, 3327, 3327, 3327, 3327, 3328, 3328, 3328, 3328, 3329, 3329, 3329, 3329, 3330, 3330, 3330, 3330, 3331, 3331, 3331, 3331,
                        3332, 3332, 3332, 3332, 3333, 3333, 3333, 3333, 3334, 3334, 3334, 3334, 3335, 3335, 3335, 3335, 3336, 3336, 3336, 3336, 3337, 3337, 3337, 3337, 3338, 3338, 3338, 3338, 3339, 3339, 3339, 3339,
                        3340, 3340, 3340, 3340, 3341, 3341, 3341, 3341, 3341, 3342, 3342, 3342, 3342, 3343, 3343, 3343, 3343, 3344, 3344, 3344, 3344, 3345, 3345, 3345, 3345, 3346, 3346, 3346, 3346, 3347, 3347, 3347,
                        3347, 3348, 3348, 3348, 3348, 3348, 3349, 3349, 3349, 3349, 3350, 3350, 3350, 3350, 3351, 3351, 3351, 3351, 3352, 3352, 3352, 3352, 3353, 3353, 3353, 3353, 3353, 3354, 3354, 3354, 3354, 3355,
                        3355, 3355, 3355, 3356, 3356, 3356, 3356, 3357, 3357, 3357, 3357, 3357, 3358, 3358, 3358, 3358, 3359, 3359, 3359, 3359, 3360, 3360, 3360, 3360, 3360, 3361, 3361, 3361, 3361, 3362, 3362, 3362,
                        3362, 3363, 3363, 3363, 3363, 3363, 3364, 3364, 3364, 3364, 3365, 3365, 3365, 3365, 3366, 3366, 3366, 3366, 3366, 3367, 3367, 3367, 3367, 3368, 3368, 3368, 3368, 3369, 3369, 3369, 3369, 3369,
                        3370, 3370, 3370, 3370, 3371, 3371, 3371, 3371, 3371, 3372, 3372, 3372, 3372, 3373, 3373, 3373, 3373, 3374, 3374, 3374, 3374, 3374, 3375, 3375, 3375, 3375, 3376, 3376, 3376, 3376, 3376, 3377,
                        3377, 3377, 3377, 3378, 3378, 3378, 3378, 3378, 3379, 3379, 3379, 3379, 3380, 3380, 3380, 3380, 3380, 3381, 3381, 3381, 3381, 3382, 3382, 3382, 3382, 3382, 3383, 3383, 3383, 3383, 3384, 3384,
                        3384, 3384, 3384, 3385, 3385, 3385, 3385, 3386, 3386, 3386, 3386, 3386, 3387, 3387, 3387, 3387, 3388, 3388, 3388, 3388, 3388, 3389, 3389, 3389, 3389, 3389, 3390, 3390, 3390, 3390, 3391, 3391,
                        3391, 3391, 3391, 3392, 3392, 3392, 3392, 3393, 3393, 3393, 3393, 3393, 3394, 3394, 3394, 3394, 3394, 3395, 3395, 3395, 3395, 3396, 3396, 3396, 3396, 3396, 3397, 3397, 3397, 3397, 3397, 3398,
                        3398, 3398, 3398, 3399, 3399, 3399, 3399, 3399, 3400, 3400, 3400, 3400, 3400, 3401, 3401, 3401, 3401, 3402, 3402, 3402, 3402, 3402, 3403, 3403, 3403, 3403, 3403, 3404, 3404, 3404, 3404, 3404,
                        3405, 3405, 3405, 3405, 3406, 3406, 3406, 3406, 3406, 3407, 3407, 3407, 3407, 3407, 3408, 3408, 3408, 3408, 3408, 3409, 3409, 3409, 3409, 3410, 3410, 3410, 3410, 3410, 3411, 3411, 3411, 3411,
                        3411, 3412, 3412, 3412, 3412, 3412, 3413, 3413, 3413, 3413, 3413, 3414, 3414, 3414, 3414, 3414, 3415, 3415, 3415, 3415, 3416, 3416, 3416, 3416, 3416, 3417, 3417, 3417, 3417, 3417, 3418, 3418,
                        3418, 3418, 3418, 3419, 3419, 3419, 3419, 3419, 3420, 3420, 3420, 3420, 3420, 3421, 3421, 3421, 3421, 3421, 3422, 3422, 3422, 3422, 3422, 3423, 3423, 3423, 3423, 3423, 3424, 3424, 3424, 3424,
                        3424, 3425, 3425, 3425, 3425, 3425, 3426, 3426, 3426, 3426, 3426, 3427, 3427, 3427, 3427, 3427, 3428, 3428, 3428, 3428, 3428, 3429, 3429, 3429, 3429, 3429, 3430, 3430, 3430, 3430, 3430, 3431,
                        3431, 3431, 3431, 3431, 3432, 3432, 3432, 3432, 3432, 3433, 3433, 3433, 3433, 3433, 3434, 3434, 3434, 3434, 3434, 3435, 3435, 3435, 3435, 3435, 3436, 3436, 3436, 3436, 3436, 3437, 3437, 3437,
                        3437, 3437, 3438, 3438, 3438, 3438, 3438, 3439, 3439, 3439, 3439, 3439, 3439, 3440, 3440, 3440, 3440, 3440, 3441, 3441, 3441, 3441, 3441, 3442, 3442, 3442, 3442, 3442, 3443, 3443, 3443, 3443,
                        3443, 3444, 3444, 3444, 3444, 3444, 3445, 3445, 3445, 3445, 3445, 3445, 3446, 3446, 3446, 3446, 3446, 3447, 3447, 3447, 3447, 3447, 3448, 3448, 3448, 3448, 3448, 3449, 3449, 3449, 3449, 3449,
                        3450, 3450, 3450, 3450, 3450, 3450, 3451, 3451, 3451, 3451, 3451, 3452, 3452, 3452, 3452, 3452, 3453, 3453, 3453, 3453, 3453, 3453, 3454, 3454, 3454, 3454, 3454, 3455, 3455, 3455, 3455, 3455,
                        3456, 3456, 3456, 3456, 3456, 3456, 3457, 3457, 3457, 3457, 3457, 3458, 3458, 3458, 3458, 3458, 3459, 3459, 3459, 3459, 3459, 3459, 3460, 3460, 3460, 3460, 3460, 3461, 3461, 3461, 3461, 3461,
                        3462, 3462, 3462, 3462, 3462, 3462, 3463, 3463, 3463, 3463, 3463, 3464, 3464, 3464, 3464, 3464, 3464, 3465, 3465, 3465, 3465, 3465, 3466, 3466, 3466, 3466, 3466, 3466, 3467, 3467, 3467, 3467,
                        3467, 3468, 3468, 3468, 3468, 3468, 3469, 3469, 3469, 3469, 3469, 3469, 3470, 3470, 3470, 3470, 3470, 3471, 3471, 3471, 3471, 3471, 3471, 3472, 3472, 3472, 3472, 3472, 3472, 3473, 3473, 3473,
                        3473, 3473, 3474, 3474, 3474, 3474, 3474, 3474, 3475, 3475, 3475, 3475, 3475, 3476, 3476, 3476, 3476, 3476, 3476, 3477, 3477, 3477, 3477, 3477, 3478, 3478, 3478, 3478, 3478, 3478, 3479, 3479,
                        3479, 3479, 3479, 3479, 3480, 3480, 3480, 3480, 3480, 3481, 3481, 3481, 3481, 3481, 3481, 3482, 3482, 3482, 3482, 3482, 3483, 3483, 3483, 3483, 3483, 3483, 3484, 3484, 3484, 3484, 3484, 3484,
                        3485, 3485, 3485, 3485, 3485, 3485, 3486, 3486, 3486, 3486, 3486, 3487, 3487, 3487, 3487, 3487, 3487, 3488, 3488, 3488, 3488, 3488, 3488, 3489, 3489, 3489, 3489, 3489, 3490, 3490, 3490, 3490,
                        3490, 3490, 3491, 3491, 3491, 3491, 3491, 3491, 3492, 3492, 3492, 3492, 3492, 3492, 3493, 3493, 3493, 3493, 3493, 3493, 3494, 3494, 3494, 3494, 3494, 3495, 3495, 3495, 3495, 3495, 3495, 3496,
                        3496, 3496, 3496, 3496, 3496, 3497, 3497, 3497, 3497, 3497, 3497, 3498, 3498, 3498, 3498, 3498, 3498, 3499, 3499, 3499, 3499, 3499, 3499, 3500, 3500, 3500, 3500, 3500, 3501, 3501, 3501, 3501,
                        3501, 3501, 3502, 3502, 3502, 3502, 3502, 3502, 3503, 3503, 3503, 3503, 3503, 3503, 3504, 3504, 3504, 3504, 3504, 3504, 3505, 3505, 3505, 3505, 3505, 3505, 3506, 3506, 3506, 3506, 3506, 3506,
                        3507, 3507, 3507, 3507, 3507, 3507, 3508, 3508, 3508, 3508, 3508, 3508, 3509, 3509, 3509, 3509, 3509, 3509, 3510, 3510, 3510, 3510, 3510, 3510, 3511, 3511, 3511, 3511, 3511, 3511, 3512, 3512,
                        3512, 3512, 3512, 3512, 3513, 3513, 3513, 3513, 3513, 3513, 3514, 3514, 3514, 3514, 3514, 3514, 3515, 3515, 3515, 3515, 3515, 3515, 3516, 3516, 3516, 3516, 3516, 3516, 3517, 3517, 3517, 3517,
                        3517, 3517, 3517, 3518, 3518, 3518, 3518, 3518, 3518, 3519, 3519, 3519, 3519, 3519, 3519, 3520, 3520, 3520, 3520, 3520, 3520, 3521, 3521, 3521, 3521, 3521, 3521, 3522, 3522, 3522, 3522, 3522,
                        3522, 3523, 3523, 3523, 3523, 3523, 3523, 3523, 3524, 3524, 3524, 3524, 3524, 3524, 3525, 3525, 3525, 3525, 3525, 3525, 3526, 3526, 3526, 3526, 3526, 3526, 3527, 3527, 3527, 3527, 3527, 3527,
                        3528, 3528, 3528, 3528, 3528, 3528, 3528, 3529, 3529, 3529, 3529, 3529, 3529, 3530, 3530, 3530, 3530, 3530, 3530, 3531, 3531, 3531, 3531, 3531, 3531, 3531, 3532, 3532, 3532, 3532, 3532, 3532,
                        3533, 3533, 3533, 3533, 3533, 3533, 3534, 3534, 3534, 3534, 3534, 3534, 3534, 3535, 3535, 3535, 3535, 3535, 3535, 3536, 3536, 3536, 3536, 3536, 3536, 3537, 3537, 3537, 3537, 3537, 3537, 3537,
                        3538, 3538, 3538, 3538, 3538, 3538, 3539, 3539, 3539, 3539, 3539, 3539, 3539, 3540, 3540, 3540, 3540, 3540, 3540, 3541, 3541, 3541, 3541, 3541, 3541, 3541, 3542, 3542, 3542, 3542, 3542, 3542,
                        3543, 3543, 3543, 3543, 3543, 3543, 3543, 3544, 3544, 3544, 3544, 3544, 3544, 3545, 3545, 3545, 3545, 3545, 3545, 3545, 3546, 3546, 3546, 3546, 3546, 3546, 3547, 3547, 3547, 3547, 3547, 3547,
                        3547, 3548, 3548, 3548, 3548, 3548, 3548, 3549, 3549, 3549, 3549, 3549, 3549, 3549, 3550, 3550, 3550, 3550, 3550, 3550, 3551, 3551, 3551, 3551, 3551, 3551, 3551, 3552, 3552, 3552, 3552, 3552,
                        3552, 3552, 3553, 3553, 3553, 3553, 3553, 3553, 3554, 3554, 3554, 3554, 3554, 3554, 3554, 3555, 3555, 3555, 3555, 3555, 3555, 3556, 3556, 3556, 3556, 3556, 3556, 3556, 3557, 3557, 3557, 3557,
                        3557, 3557, 3557, 3558, 3558, 3558, 3558, 3558, 3558, 3558, 3559, 3559, 3559, 3559, 3559, 3559, 3560, 3560, 3560, 3560, 3560, 3560, 3560, 3561, 3561, 3561, 3561, 3561, 3561, 3561, 3562, 3562,
                        3562, 3562, 3562, 3562, 3562, 3563, 3563, 3563, 3563, 3563, 3563, 3564, 3564, 3564, 3564, 3564, 3564, 3564, 3565, 3565, 3565, 3565, 3565, 3565, 3565, 3566, 3566, 3566, 3566, 3566, 3566, 3566,
                        3567, 3567, 3567, 3567, 3567, 3567, 3567, 3568, 3568, 3568, 3568, 3568, 3568, 3569, 3569, 3569, 3569, 3569, 3569, 3569, 3570, 3570, 3570, 3570, 3570, 3570, 3570, 3571, 3571, 3571, 3571, 3571,
                        3571, 3571, 3572, 3572, 3572, 3572, 3572, 3572, 3572, 3573, 3573, 3573, 3573, 3573, 3573, 3573, 3574, 3574, 3574, 3574, 3574, 3574, 3574, 3575, 3575, 3575, 3575, 3575, 3575, 3575, 3576, 3576,
                        3576, 3576, 3576, 3576, 3576, 3577, 3577, 3577, 3577, 3577, 3577, 3577, 3578, 3578, 3578, 3578, 3578, 3578, 3578, 3579, 3579, 3579, 3579, 3579, 3579, 3579, 3580, 3580, 3580, 3580, 3580, 3580,
                        3580, 3581, 3581, 3581, 3581, 3581, 3581, 3581, 3582, 3582, 3582, 3582, 3582, 3582, 3582, 3583, 3583, 3583, 3583, 3583, 3583, 3583, 3584, 3584, 3584, 3584, 3584, 3584, 3584, 3585, 3585, 3585,
                        3585, 3585, 3585, 3585, 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3586, 3587, 3587, 3587, 3587, 3587, 3587, 3587, 3588, 3588, 3588, 3588, 3588, 3588, 3588, 3589, 3589, 3589, 3589, 3589, 3589,
                        3589, 3590, 3590, 3590, 3590, 3590, 3590, 3590, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3591, 3592, 3592, 3592, 3592, 3592, 3592, 3592, 3593, 3593, 3593, 3593, 3593, 3593, 3593, 3594, 3594,
                        3594, 3594, 3594, 3594, 3594, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3595, 3596, 3596, 3596, 3596, 3596, 3596, 3596, 3597, 3597, 3597, 3597, 3597, 3597, 3597, 3598, 3598, 3598, 3598, 3598,
                        3598, 3598, 3598, 3599, 3599, 3599, 3599, 3599, 3599, 3599, 3600, 3600, 3600, 3600, 3600, 3600, 3600, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3601, 3602, 3602, 3602, 3602, 3602, 3602, 3602,
                        3603, 3603, 3603, 3603, 3603, 3603, 3603, 3603, 3604, 3604, 3604, 3604, 3604, 3604, 3604, 3605, 3605, 3605, 3605, 3605, 3605, 3605, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3606, 3607, 3607,
                        3607, 3607, 3607, 3607, 3607, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3608, 3609, 3609, 3609, 3609, 3609, 3609, 3609, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3610, 3611, 3611, 3611, 3611,
                        3611, 3611, 3611, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3612, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3613, 3614, 3614, 3614, 3614, 3614, 3614, 3614, 3615, 3615, 3615, 3615, 3615, 3615,
                        3615, 3615, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3616, 3617, 3617, 3617, 3617, 3617, 3617, 3617, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3618, 3619, 3619, 3619, 3619, 3619, 3619, 3619,
                        3619, 3620, 3620, 3620, 3620, 3620, 3620, 3620, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3621, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3622, 3623, 3623, 3623, 3623, 3623, 3623, 3623, 3623,
                        3624, 3624, 3624, 3624, 3624, 3624, 3624, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3625, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3626, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3627, 3628,
                        3628, 3628, 3628, 3628, 3628, 3628, 3628, 3629, 3629, 3629, 3629, 3629, 3629, 3629, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3630, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3631, 3632, 3632,
                        3632, 3632, 3632, 3632, 3632, 3632, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3633, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3634, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3635, 3636, 3636,
                        3636, 3636, 3636, 3636, 3636, 3636, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3637, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3638, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3639, 3640, 3640,
                        3640, 3640, 3640, 3640, 3640, 3640, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3641, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3642, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3643, 3644, 3644,
                        3644, 3644, 3644, 3644, 3644, 3644, 3644, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3645, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3646, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3647, 3648,
                        3648, 3648, 3648, 3648, 3648, 3648, 3648, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3649, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3650, 3651, 3651, 3651, 3651, 3651, 3651, 3651, 3651,
                        3652, 3652, 3652, 3652, 3652, 3652, 3652, 3652, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3653, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3654, 3655, 3655, 3655, 3655, 3655, 3655, 3655,
                        3655, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3656, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3657, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3658, 3659, 3659, 3659, 3659, 3659, 3659,
                        3659, 3659, 3659, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3660, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3661, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3662, 3663, 3663, 3663, 3663,
                        3663, 3663, 3663, 3663, 3663, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3664, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3665, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3666, 3667, 3667,
                        3667, 3667, 3667, 3667, 3667, 3667, 3667, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3668, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3669, 3670, 3670, 3670, 3670, 3670, 3670, 3670, 3670,
                        3670, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3671, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3672, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3673, 3674, 3674, 3674, 3674, 3674,
                        3674, 3674, 3674, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3675, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3676, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3677, 3678, 3678,
                        3678, 3678, 3678, 3678, 3678, 3678, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3679, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3680, 3681, 3681, 3681, 3681, 3681, 3681, 3681, 3681,
                        3681, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3682, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3683, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3684, 3685, 3685, 3685, 3685,
                        3685, 3685, 3685, 3685, 3685, 3686, 3686, 3686, 3686, 3686, 3686, 3686, 3686, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3687, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3688, 3689,
                        3689, 3689, 3689, 3689, 3689, 3689, 3689, 3689, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3690, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3691, 3692, 3692, 3692, 3692, 3692, 3692,
                        3692, 3692, 3692, 3692, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3693, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3694, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3695, 3696,
                        3696, 3696, 3696, 3696, 3696, 3696, 3696, 3696, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3697, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3698, 3699, 3699, 3699, 3699, 3699, 3699};

MINT32 EXP10_TBL[3701] = {   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
							1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
							2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
                            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
							3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
							3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
							4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
							4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
                            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5,
							5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
                            5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
							6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
                            6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                            7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8,
							8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,
                            8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
                            9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
                            10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11,
                            11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,
                            11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                            12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13,
                            13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
                            14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16,
                            16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17,
                            17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18,
                            18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19,
                            20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
                            21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23,
                            23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
                            24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26,
                            26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28,
                            28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31,
                            31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33,
                            33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35,
                            36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38,
                            38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41,
                            41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 44,
                            44, 44, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 48,
                            48, 48, 48, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 51, 51,
                            51, 51, 52, 52, 52, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 53, 53, 53, 53, 54, 54, 54, 54, 54, 54, 54, 54, 55, 55, 55, 55, 55,
                            55, 55, 55, 56, 56, 56, 56, 56, 56, 56, 57, 57, 57, 57, 57, 57, 57, 57, 58, 58, 58, 58, 58, 58, 58, 58, 59, 59, 59, 59, 59, 59,
                            59, 60, 60, 60, 60, 60, 60, 60, 61, 61, 61, 61, 61, 61, 61, 62, 62, 62, 62, 62, 62, 62, 62, 63, 63, 63, 63, 63, 63, 64, 64, 64,
                            64, 64, 64, 64, 65, 65, 65, 65, 65, 65, 65, 66, 66, 66, 66, 66, 66, 66, 67, 67, 67, 67, 67, 67, 68, 68, 68, 68, 68, 68, 68, 69,
                            69, 69, 69, 69, 69, 70, 70, 70, 70, 70, 70, 71, 71, 71, 71, 71, 71, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 74, 74,
                            74, 74, 74, 74, 75, 75, 75, 75, 75, 76, 76, 76, 76, 76, 76, 77, 77, 77, 77, 77, 77, 78, 78, 78, 78, 78, 79, 79, 79, 79, 79, 79,
                            80, 80, 80, 80, 80, 80, 81, 81, 81, 81, 81, 82, 82, 82, 82, 82, 83, 83, 83, 83, 83, 83, 84, 84, 84, 84, 84, 85, 85, 85, 85, 85,
                            86, 86, 86, 86, 86, 87, 87, 87, 87, 87, 88, 88, 88, 88, 88, 89, 89, 89, 89, 89, 90, 90, 90, 90, 90, 91, 91, 91, 91, 91, 92, 92,
                            92, 92, 92, 93, 93, 93, 93, 94, 94, 94, 94, 94, 95, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99,
                            99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106,
                            106, 107, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 109, 110, 110, 110, 110, 111, 111, 111, 111, 112, 112, 112, 112, 113, 113, 113, 113, 114, 114, 114,
                            114, 115, 115, 115, 116, 116, 116, 116, 117, 117, 117, 117, 118, 118, 118, 118, 119, 119, 119, 120, 120, 120, 120, 121, 121, 121, 121, 122, 122, 122, 123, 123,
                            123, 123, 124, 124, 124, 124, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 131, 131, 131, 131, 132, 132,
                            132, 133, 133, 133, 134, 134, 134, 134, 135, 135, 135, 136, 136, 136, 137, 137, 137, 138, 138, 138, 138, 139, 139, 139, 140, 140, 140, 141, 141, 141, 142, 142,
							142, 143, 143, 143, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147, 147, 148, 148, 148, 149, 149, 149, 150, 150, 150, 151, 151, 151, 152, 152, 152, 153,
                            153, 153, 154, 154, 154, 155, 155, 155, 156, 156, 156, 157, 157, 158, 158, 158, 159, 159, 159, 160, 160, 160, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164,
                            164, 165, 165, 166, 166, 166, 167, 167, 167, 168, 168, 169, 169, 169, 170, 170, 171, 171, 171, 172, 172, 172, 173, 173, 174, 174, 174, 175, 175, 176, 176, 176,
                            177, 177, 178, 178, 178, 179, 179, 180, 180, 180, 181, 181, 182, 182, 183, 183, 183, 184, 184, 185, 185, 185, 186, 186, 187, 187, 188, 188, 188, 189, 189, 190,
                            190, 191, 191, 191, 192, 192, 193, 193, 194, 194, 194, 195, 195, 196, 196, 197, 197, 198, 198, 198, 199, 199, 200, 200, 201, 201, 202, 202, 203, 203, 203, 204,
                            204, 205, 205, 206, 206, 207, 207, 208, 208, 209, 209, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 219,
							220, 220, 221, 221, 222, 222, 223, 223, 224, 224, 225, 225, 226, 226, 227, 227, 228, 228, 229, 229, 230, 230, 231, 231, 232, 232, 233, 233, 234, 235, 235, 236,
                            236, 237, 237, 238, 238, 239, 239, 240, 240, 241, 242, 242, 243, 243, 244, 244, 245, 245, 246, 246, 247, 248, 248, 249, 249, 250, 250, 251, 252, 252, 253, 253,
                            254, 254, 255, 256, 256, 257, 257, 258, 258, 259, 260, 260, 261, 261, 262, 263, 263, 264, 264, 265, 266, 266, 267, 267, 268, 269, 269, 270, 270, 271, 272, 272,
                            273, 273, 274, 275, 275, 276, 277, 277, 278, 278, 279, 280, 280, 281, 282, 282, 283, 284, 284, 285, 285, 286, 287, 287, 288, 289, 289, 290, 291, 291, 292, 293,
                            293, 294, 295, 295, 296, 297, 297, 298, 299, 299, 300, 301, 301, 302, 303, 303, 304, 305, 305, 306, 307, 308, 308, 309, 310, 310, 311, 312, 312, 313, 314, 315,
                            315, 316, 317, 317, 318, 319, 320, 320, 321, 322, 322, 323, 324, 325, 325, 326, 327, 328, 328, 329, 330, 331, 331, 332, 333, 334, 334, 335, 336, 337, 337, 338,
                            339, 340, 340, 341, 342, 343, 343, 344, 345, 346, 347, 347, 348, 349, 350, 350, 351, 352, 353, 354, 354, 355, 356, 357, 358, 358, 359, 360, 361, 362, 363, 363,
                            364, 365, 366, 367, 367, 368, 369, 370, 371, 372, 372, 373, 374, 375, 376, 377, 378, 378, 379, 380, 381, 382, 383, 384, 384, 385, 386, 387, 388, 389, 390, 391,
                            391, 392, 393, 394, 395, 396, 397, 398, 399, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420,
                            421, 422, 423, 424, 425, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451,
                            452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485,
                            486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521,
                            522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 544, 545, 546, 548, 549, 550, 551, 553, 554, 555, 556, 558, 559, 560,
                            561, 563, 564, 565, 566, 568, 569, 570, 572, 573, 574, 575, 577, 578, 579, 581, 582, 583, 585, 586, 587, 589, 590, 591, 593, 594, 595, 597, 598, 599, 601, 602,
                            603, 605, 606, 607, 609, 610, 612, 613, 614, 616, 617, 618, 620, 621, 623, 624, 625, 627, 628, 630, 631, 633, 634, 635, 637, 638, 640, 641, 643, 644, 645, 647,
                            648, 650, 651, 653, 654, 656, 657, 659, 660, 662, 663, 665, 666, 668, 669, 671, 672, 674, 675, 677, 678, 680, 681, 683, 684, 686, 687, 689, 691, 692, 694, 695,
                            697, 698, 700, 702, 703, 705, 706, 708, 709, 711, 713, 714, 716, 718, 719, 721, 722, 724, 726, 727, 729, 731, 732, 734, 736, 737, 739, 741, 742, 744, 746, 747,
                            749, 751, 752, 754, 756, 757, 759, 761, 763, 764, 766, 768, 769, 771, 773, 775, 776, 778, 780, 782, 783, 785, 787, 789, 790, 792, 794, 796, 798, 799, 801, 803,
                            805, 807, 808, 810, 812, 814, 816, 818, 819, 821, 823, 825, 827, 829, 831, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 851, 853, 855, 857, 859, 861, 863,
                            865, 867, 869, 871, 873, 875, 877, 879, 881, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927,
                            930, 932, 934, 936, 938, 940, 942, 944, 946, 949, 951, 953, 955, 957, 959, 961, 964, 966, 968, 970, 972, 975, 977, 979, 981, 983, 986, 988, 990, 992, 995, 997,
                            999, 1001, 1004, 1006, 1008, 1010, 1013, 1015, 1017, 1019, 1022, 1024, 1026, 1029, 1031, 1033, 1036, 1038, 1040, 1043, 1045, 1047, 1050, 1052, 1054, 1057, 1059, 1062, 1064, 1066, 1069, 1071,
                            1074, 1076, 1078, 1081, 1083, 1086, 1088, 1091, 1093, 1096, 1098, 1101, 1103, 1105, 1108, 1110, 1113, 1115, 1118, 1121, 1123, 1126, 1128, 1131, 1133, 1136, 1138, 1141, 1143, 1146, 1149, 1151,
                            1154, 1156, 1159, 1162, 1164, 1167, 1169, 1172, 1175, 1177, 1180, 1183, 1185, 1188, 1191, 1193, 1196, 1199, 1201, 1204, 1207, 1210, 1212, 1215, 1218, 1221, 1223, 1226, 1229, 1232, 1234, 1237,
                            1240, 1243, 1246, 1248, 1251, 1254, 1257, 1260, 1262, 1265, 1268, 1271, 1274, 1277, 1280, 1283, 1285, 1288, 1291, 1294, 1297, 1300, 1303, 1306, 1309, 1312, 1315, 1318, 1321, 1324, 1327, 1330,
                            1333, 1336, 1339, 1342, 1345, 1348, 1351, 1354, 1357, 1360, 1363, 1366, 1369, 1372, 1375, 1378, 1381, 1384, 1388, 1391, 1394, 1397, 1400, 1403, 1406, 1410, 1413, 1416, 1419, 1422, 1426, 1429,
                            1432, 1435, 1438, 1442, 1445, 1448, 1451, 1455, 1458, 1461, 1465, 1468, 1471, 1475, 1478, 1481, 1485, 1488, 1491, 1495, 1498, 1501, 1505, 1508, 1511, 1515, 1518, 1522, 1525, 1529, 1532, 1535,
                            1539, 1542, 1546, 1549, 1553, 1556, 1560, 1563, 1567, 1570, 1574, 1577, 1581, 1585, 1588, 1592, 1595, 1599, 1603, 1606, 1610, 1613, 1617, 1621, 1624, 1628, 1632, 1635, 1639, 1643, 1646, 1650,
                            1654, 1658, 1661, 1665, 1669, 1673, 1676, 1680, 1684, 1688, 1691, 1695, 1699, 1703, 1707, 1711, 1714, 1718, 1722, 1726, 1730, 1734, 1738, 1742, 1746, 1750, 1753, 1757, 1761, 1765, 1769, 1773,
                            1777, 1781, 1785, 1789, 1793, 1797, 1801, 1805, 1810, 1814, 1818, 1822, 1826, 1830, 1834, 1838, 1842, 1847, 1851, 1855, 1859, 1863, 1867, 1872, 1876, 1880, 1884, 1889, 1893, 1897, 1901, 1906,
                            1910, 1914, 1919, 1923, 1927, 1932, 1936, 1940, 1945, 1949, 1953, 1958, 1962, 1967, 1971, 1976, 1980, 1984, 1989, 1993, 1998, 2002, 2007, 2011, 2016, 2020, 2025, 2030, 2034, 2039, 2043, 2048,
                            2053, 2057, 2062, 2066, 2071, 2076, 2080, 2085, 2090, 2095, 2099, 2104, 2109, 2113, 2118, 2123, 2128, 2133, 2137, 2142, 2147, 2152, 2157, 2162, 2166, 2171, 2176, 2181, 2186, 2191, 2196, 2201,
                            2206, 2211, 2216, 2221, 2226, 2231, 2236, 2241, 2246, 2251, 2256, 2261, 2266, 2271, 2276, 2281, 2287, 2292, 2297, 2302, 2307, 2312, 2318, 2323, 2328, 2333, 2339, 2344, 2349, 2354, 2360, 2365,
                            2370, 2376, 2381, 2386, 2392, 2397, 2403, 2408, 2413, 2419, 2424, 2430, 2435, 2441, 2446, 2452, 2457, 2463, 2468, 2474, 2479, 2485, 2491, 2496, 2502, 2507, 2513, 2519, 2524, 2530, 2536, 2542,
                            2547, 2553, 2559, 2565, 2570, 2576, 2582, 2588, 2594, 2599, 2605, 2611, 2617, 2623, 2629, 2635, 2641, 2647, 2653, 2659, 2665, 2671, 2677, 2683, 2689, 2695, 2701, 2707, 2713, 2719, 2725, 2731,
                            2737, 2744, 2750, 2756, 2762, 2768, 2775, 2781, 2787, 2793, 2800, 2806, 2812, 2819, 2825, 2831, 2838, 2844, 2851, 2857, 2863, 2870, 2876, 2883, 2889, 2896, 2902, 2909, 2915, 2922, 2929, 2935,
                            2942, 2948, 2955, 2962, 2968, 2975, 2982, 2988, 2995, 3002, 3009, 3015, 3022, 3029, 3036, 3043, 3050, 3056, 3063, 3070, 3077, 3084, 3091, 3098, 3105, 3112, 3119, 3126, 3133, 3140, 3147, 3154,
                            3161, 3168, 3176, 3183, 3190, 3197, 3204, 3211, 3219, 3226, 3233, 3240, 3248, 3255, 3262, 3270, 3277, 3285, 3292, 3299, 3307, 3314, 3322, 3329, 3337, 3344, 3352, 3359, 3367, 3374, 3382, 3390,
                            3397, 3405, 3413, 3420, 3428, 3436, 3443, 3451, 3459, 3467, 3474, 3482, 3490, 3498, 3506, 3514, 3522, 3530, 3538, 3546, 3554, 3562, 3570, 3578, 3586, 3594, 3602, 3610, 3618, 3626, 3634, 3643,
                            3651, 3659, 3667, 3675, 3684, 3692, 3700, 3709, 3717, 3725, 3734, 3742, 3751, 3759, 3768, 3776, 3785, 3793, 3802, 3810, 3819, 3827, 3836, 3845, 3853, 3862, 3871, 3879, 3888, 3897, 3906, 3914,
                            3923, 3932, 3941, 3950, 3959, 3968, 3976, 3985, 3994, 4003, 4012, 4021, 4031, 4040, 4049, 4058, 4067, 4076, 4085, 4094};

MINT32 MIN(MINT32 a, MINT32 b)
{
    MINT32 output = 0;

    if (a < b)
    {
        output = a;
    }
    else
    {
        output = b;
    }

    return output;
}

MINT32 MAX(MINT32 a, MINT32 b)
{
    MINT32 output = 0;

    if (a > b)
    {
        output = a;
    }
    else
    {
        output = b;
    }

    return output;
}

typedef struct
{
    MINT32 Y[8][8][8];
	MINT32 U[8][8][8];
	MINT32 V[8][8][8];
} ANRTbl8x8x8_T;

typedef struct
{
    float Y_Mean;
	float Y_Gain;
	float Y_Range;
	float U_Mean;
	float U_Gain;
	float U_Range;
	float V_Mean;
	float V_Gain;
	float V_Range;
} ANRTblTuning_T;

typedef struct {
    int x;
    int y;
    int w;
    int h;
} FaceRect;

typedef struct{
	MINT32 YUVsts[15][5];          // face statistic data, only first five face valid
    MINT8  fld_GenderLabel[15];
    MINT32 fld_rip[15];
    MINT32 rect[15][4];
	MINT32 GenderNum;
	MINT32 LandmarkNum;
	MINT32 Face_Leye[15][4];
	MINT32 Face_Reye[15][4];
	MINT32 Landmark_CV[15];
    MINT32 FaceNum;
}YNR_FD_Info_T;

//  "return value": Interpolated register value
//  "ISO":          ISO value of current image
//  "ISOpre":       A pre-defined ISO (100, 200, 400, ...) who is the cloeset but smaller than or equal to "ISO"
//  "ISOpos":       A pre-defined ISO (100, 200, 400, ...) who is the cloeset but larger than or equal to "ISO"
//  "PARAMpre":     Corresponding register value from "ISOpre"
//  "PARAMpos":     Corresponding register value from "ISOpos"
//  "Method:        0 for linear interpolation, 1 for closest one

MINT32 InterParam_1D(double Ratio_Lo, double Ratio_Up, MINT32 PARAMpre, MINT32 PARAMpos, MINT32 Method) {
    MINT32 InterPARAM = 0;

	switch(Method) {
		case 1:
			if( Ratio_Lo > Ratio_Up)
			{
				InterPARAM = PARAMpre;
			}
			else
			{
				InterPARAM = PARAMpos;
			}

			break;
		case 0:
		default:
			double temp =  (Ratio_Lo * PARAMpre + Ratio_Up * PARAMpos);
			InterPARAM = (temp > 0) ? (MINT32)(temp + 0.5) : (MINT32)(temp - 0.5);
			break;
		}

    return InterPARAM;
}


MINT32 InterParam_2D(double Ratio_L_L, double Ratio_L_U, double Ratio_U_L, double Ratio_U_U, MINT32 PARAM_L_L, MINT32 PARAM_L_U, MINT32 PARAM_U_L, MINT32 PARAM_U_U, MINT32 Method) {
    MINT32 InterPARAM = 0;


    switch(Method) {
    case 1:
        if( Ratio_L_L > Ratio_L_U)
		{
            if( Ratio_L_L > Ratio_U_L)
			{
                InterPARAM = PARAM_L_L;
        	}
        	else
			{
                InterPARAM = PARAM_U_L;
        	}
        }
        else
		{
            if( Ratio_L_L > Ratio_U_L)
			{
                InterPARAM = PARAM_L_U;
        	}
        	else
			{
                InterPARAM = PARAM_U_U;
        	}
        }
        break;
    case 0:
    default:
        double temp =  (Ratio_L_L * PARAM_L_L + Ratio_L_U * PARAM_L_U + Ratio_U_L * PARAM_U_L + Ratio_U_U * PARAM_U_U);
		InterPARAM = (temp > 0) ? (MINT32)(temp + 0.5) : (MINT32)(temp - 0.5);
        break;
    }

    return InterPARAM;
}


MINT32 CalculateLUTSP(MINT32 X0, MINT32 X1, MINT32 Y0, MINT32 Y1, MINT32 slope_base, MINT32 max_slope, MINT32 min_slope)
{
    MINT32 slope;
    double dividor = X1 - X0;
    dividor = (dividor > 1) ? dividor : 1;

    double slope_d = (double)((Y1 - Y0) * slope_base) / dividor;
    if (slope_d > 0.0)
    {
        slope = (MINT32)(slope_d + 0.5);
    }
    else
    {
        slope = (MINT32)(slope_d - 0.5);
    }

    slope = (slope > max_slope) ? max_slope : slope;
    slope = (slope < min_slope) ? min_slope : slope;

    return slope;
}

MINT32 Convert2Neg(MINT32 Input, MINT32 Range)
{
    MINT32 value = 0;
    if (Input < Range/2)
    {
        value = Input;
    }
    else
    {
        value = Input - Range;
    }

    return value;
}

MINT32 Convert2Pos(MINT32 Input, MINT32 Range)
{
    MINT32 value = 0;
    if (Input >= 0)
    {
        value = Input;
    }
    else
    {
        value = Input + Range;
    }

    return value;
}


MUINT32 Clip(MUINT32 input, MUINT32 upper, MUINT32 lower)
{
    MUINT32 output = 0;
    MUINT32 max = 0, min = 0;

    if (upper < lower)
    {
        max = lower;
        min = upper;
    }
    else
    {
        max = upper;
        min = lower;
    }

    if (input > max)
        output = max;
    else if (input < min)
        output = min;
    else
        output = input;

    return output;
}

MINT32 ClipInt32(MINT32 input, MINT32 upper, MINT32 lower)
{
    MINT32 output = 0;
    MINT32 max = 0, min = 0;

    if (upper < lower)
    {
        max = lower;
        min = upper;
    }
    else
    {
        max = upper;
        min = lower;
    }

    if (input > max)
        output = max;
    else if (input < min)
        output = min;
    else
        output = input;

    return output;
}


#define CLIP(a,b,c)   ( (a<b)?  b : ((a>c)? c: a) )

MVOID ANRTuningGen(YNR_FD_Info_T const& rFdInfo,
	                    ISP_NVRAM_YNR_FD_T const& FD_ANR,
                          ANRTblTuning_T ANR_Tuning[3])
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FD_ANR_TBL.enable", value, "0");
    MBOOL bFDANRDebug = atoi(value);

	for(int i = 0; i < 3; i++)
    {
		ANR_Tuning[i].Y_Mean = (float)rFdInfo.YUVsts[i][0];
		ANR_Tuning[i].U_Mean = (float)rFdInfo.YUVsts[i][1];
		ANR_Tuning[i].V_Mean = (float)rFdInfo.YUVsts[i][2];

		ANR_Tuning[i].Y_Range = (float)FD_ANR.TBL.YNR_FD_TBL_Y_Range;
		ANR_Tuning[i].U_Range = (float)FD_ANR.TBL.YNR_FD_TBL_U_Range;
		ANR_Tuning[i].V_Range = (float)FD_ANR.TBL.YNR_FD_TBL_V_Range;
		ANR_Tuning[i].Y_Gain = (float)FD_ANR.TBL.YNR_FD_TBL_Y_GAIN / 10;
		ANR_Tuning[i].U_Gain = (float)FD_ANR.TBL.YNR_FD_TBL_U_GAIN / 10;
		ANR_Tuning[i].V_Gain = (float)FD_ANR.TBL.YNR_FD_TBL_V_GAIN / 10;
    }

	INTER_LOG_IF(bFDANRDebug,"[%s()] Y_Gain:%f, Y_Mean:%f, Y_range:%f\n", __FUNCTION__, ANR_Tuning[0].Y_Gain, ANR_Tuning[0].Y_Mean, ANR_Tuning[0].Y_Range);
	INTER_LOG_IF(bFDANRDebug,"[%s()] U_Gain:%f, U_Mean:%f, U_range:%f\n", __FUNCTION__, ANR_Tuning[0].U_Gain, ANR_Tuning[0].U_Mean, ANR_Tuning[0].U_Range);
	INTER_LOG_IF(bFDANRDebug,"[%s()] V_Gain:%f, V_Mean:%f, V_range:%f\n", __FUNCTION__, ANR_Tuning[0].V_Gain, ANR_Tuning[0].V_Mean, ANR_Tuning[0].V_Range);
}

MVOID ANRTBL_YUV8x8x8(ISP_NVRAM_YNR_LUT_T Anr_Tbl,
                          ANRTbl8x8x8_T& ANR8x8x8)
{
    for(int i = 0; i < 8; i++)
	{

		for(int j = 0; j < 8; j++)
			{

				for(int k = 0; k < 4; k++)
					{
					    ANR8x8x8.Y[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_Y0;
					    ANR8x8x8.U[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_U0;
						ANR8x8x8.V[i][j][k*2] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_V0;
						ANR8x8x8.Y[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_Y1;
					    ANR8x8x8.U[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_U1;
						ANR8x8x8.V[i][j][k*2+1] =  Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_V1;

					}
			}
	}
}

MVOID YUV8x8x8_ANRTBL(ANRTbl8x8x8_T ANR8x8x8,
                          ISP_NVRAM_YNR_LUT_T& Anr_Tbl)
{
    for(int i = 0; i < 8; i++)
	{

		for(int j = 0; j < 8; j++)
			{

				for(int k = 0; k < 4; k++)
					{
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_Y0 = ANR8x8x8.Y[i][j][k*2];
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_U0 = ANR8x8x8.U[i][j][k*2];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_V0 = ANR8x8x8.V[i][j][k*2];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_Y1 = ANR8x8x8.Y[i][j][k*2+1];
					    Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_U1 = ANR8x8x8.U[i][j][k*2+1];
						Anr_Tbl.lut[i*32 + j*4 + k].bits.YNR_TBL_V1 = ANR8x8x8.V[i][j][k*2+1];

					}
			}
	}
}

MVOID ANRTablePBC(MINT32 FaceNum, MINT32 Precision,
	                      ANRTblTuning_T ANR_Tuning[5],
                          ANRTbl8x8x8_T& ANR8x8x8)
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FD_ANR_TBL.enable", value, "0");
    MBOOL bFDANRDebug = atoi(value);

	INTER_LOG_IF(bFDANRDebug,"[%s()] Y_Gain:%f, Y_Mean:%f, Y_range:%f\n", __FUNCTION__, ANR_Tuning[0].Y_Gain, ANR_Tuning[0].Y_Mean, ANR_Tuning[0].Y_Range);

	float y_range = 0;
	float u_range = 0;
	float v_range = 0;
	float y_range2 = 0;
	float u_range2 = 0;
	float v_range2 = 0;
	float y_step = 32;
	float uv_step = (Precision) ? 16 : 32;
	float uv_start = (Precision) ? 64 : 0;

	for (int i = 0; i < FaceNum; i++)
    {
		y_range = ANR_Tuning[i].Y_Range;
		u_range = ANR_Tuning[i].U_Range;
		v_range = ANR_Tuning[i].V_Range;

		y_range2 = y_range * y_range * 2;
		u_range2 = u_range * u_range * 2;
		v_range2 = v_range * v_range * 2;

		for (int y_idx = 0; y_idx < 8; y_idx++)
        {
            for (int u_idx = 0; u_idx < 8; u_idx++)
            {
                for (int v_idx = 0; v_idx < 8; v_idx++)
                {
                    float y = y_step / 2 + y_idx * y_step;
                    float u = uv_start + uv_step / 2 + u_idx * uv_step;
                    float v = uv_start + uv_step / 2 + v_idx * uv_step;
                    float diff_y = ANR_Tuning[i].Y_Mean- y;
                    float diff_u = ANR_Tuning[i].U_Mean- u;
                    float diff_v = ANR_Tuning[i].V_Mean- v;
                    //float diff_sum = diff_r * diff_r + diff_g * diff_g + diff_b * diff_b;
                    float weight_y = exp(-(diff_y * diff_y) / y_range2);
                    float weight_u = exp(-(diff_u * diff_u) / u_range2);
                    float weight_v = exp(-(diff_v * diff_v) / v_range2);
                    float weight = weight_y * weight_u * weight_v;

                    float ori_y_std = ANR8x8x8.Y[y_idx][u_idx][v_idx];
                    float ori_u_std = ANR8x8x8.U[y_idx][u_idx][v_idx];
                    float ori_v_std = ANR8x8x8.V[y_idx][u_idx][v_idx];

					//INTER_LOG_IF(bFDANRDebug,"[%s()] ori_y_std:%f, ori_u_std:%f, ori_v_std:%f\n", __FUNCTION__, ori_y_std, ori_u_std, ori_v_std);

                    float new_y_std = ori_y_std * (1 - weight) + ori_y_std * ANR_Tuning[i].Y_Gain* weight + 0.5;
                    float new_u_std = ori_u_std * (1 - weight) + ori_u_std * ANR_Tuning[i].U_Gain* weight + 0.5;
                    float new_v_std = ori_v_std * (1 - weight) + ori_v_std * ANR_Tuning[i].V_Gain* weight + 0.5;
                    //INTER_LOG_IF(bFDANRDebug,"[%s()] new_y_std:%f, new_u_std:%f, new_v_std:%f\n", __FUNCTION__, new_y_std, new_u_std, new_v_std);

					new_y_std = Clip(new_y_std, 31, 0);
					new_u_std = Clip(new_u_std, 31, 0);
					new_v_std = Clip(new_v_std, 31, 0);

                    ANR8x8x8.Y[y_idx][u_idx][v_idx] = new_y_std;
                    ANR8x8x8.U[y_idx][u_idx][v_idx] = new_u_std;
                    ANR8x8x8.V[y_idx][u_idx][v_idx] = new_v_std;
                }
            }
		}
    }
}

MVOID GenGammaCurve(MINT32 gamma_enc[GGM_TABLE_SIZE], MINT32 gamma_full[4096], MINT32 GGM_END_VAR)
{
	//  DECODE zone encoded gamma table here.
	MINT32 p = 0;

	for(int j = 0; j < 4096; j++) {                  // Decode 4096 point
		//  Start 1-st zone.  1-st zone = 512 point
		if(j < 512) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[j >> 3] & 0x03ff;
			MINT32 wk3 = gamma_enc[(j >> 3) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * (j % 8)) << 1);
		}
		//  Start 2-nd zone
		else if(j < 1024) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[64 + ((j - 512) >> 4)] & 0x03ff;
			MINT32 wk3 = gamma_enc[64 + ((j - 512) >> 4) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + (wk2 * ((j - 512) % 16));
		}
		//  Start 3-rd zone
		else if(j < 2048) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[96 + ((j - 1024) >> 5)] & 0x03ff;
			MINT32 wk3 = gamma_enc[96 + ((j - 1024) >> 5) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 1024) % 32) + 1) >> 1);
		}
		//  Start 4-th zone
		else if(j < 4064) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[128 + ((j - 2048) >> 5)] & 0x03ff;
			MINT32 wk3 = gamma_enc[128 + ((j - 2048) >> 5) + 1] & 0x03ff;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 2048) % 32) + 1) >> 1);
		}
		else if(j < 4096) {
			//  Get begin point value of a sub-zone.
			MINT32 wk1 = gamma_enc[128 + ((j - 2048) >> 5)] & 0x03ff;
			MINT32 wk3 = GGM_END_VAR;
			MINT32 wk2 = wk3 - wk1;
			gamma_full[j]	= (wk1 << 4) + ((wk2 * ((j - 2048) % 32) + 1) >> 1);
		}
		gamma_full[j] = ((gamma_full[j] + 8) >> 4);
	}

    /*
	if (debug_en)
    {
		//  Finally check correctness of a decoded table entry.
		//  Check all the entry is within 10bit value.
		for(int j = 0; j < 4096; j++){
			if((gamma_full[j] > (1023<<4)) || (gamma_full[j] < 0))
				printf("Illegal Gamma Table Data.(Position = %d , Value = %d)\n", j, gamma_full[j]);
		}
    }
    */
}

MVOID GenGGM2GGM(MINT32 gamma_r2a[4096], MINT32 gamma_d1a[4096], MINT32 gamma_to_gamma[1024])
{
    printf("GenGGM2GGM in.. \n");

    MINT32 linear_v = 0;
    for (int i = 0; i < 1024; i++)
    {
        while (gamma_r2a[linear_v] < (i + 1))
		{
            linear_v++;
		    if (linear_v >=4096)
				break;
		}

        linear_v = CLIP(linear_v - 1, 0, 4095);
        gamma_to_gamma[i] = gamma_d1a[linear_v];

        //printf("gamma_to_gamma %d -> %d \n", i, gamma_to_gamma[i]);
    }
}

MVOID ConvertGGMtoGGMYUV(MINT32 gamma_to_gamma[1024], MINT32 src_y, MINT32 src_u, MINT32 src_v, MINT32 &dst_y, MINT32 &dst_u, MINT32 &dst_v)
{
    printf("ConvertGGMtoGGMYUV in.. \n");

    const MINT32 Y2R = 512, U2R =    0, V2R = 718;
    const MINT32 Y2G = 512, U2G = -176, V2G = -366;
    const MINT32 Y2B = 512, U2B =  907, V2B = 0;
    const MINT32 R2Y = 153, G2Y =  301, B2Y = 58;
    const MINT32 R2U = -86, G2U = -170, B2U = 256;
    const MINT32 R2V = 256, G2V = -214, B2V = -42;

    MINT32 src_r = (Y2R * src_y + U2R * (src_u - 128) + V2R * (src_v - 128) + 256) >> 9;
    MINT32 src_g = (Y2G * src_y + U2G * (src_u - 128) + V2G * (src_v - 128) + 256) >> 9;
    MINT32 src_b = (Y2B * src_y + U2B * (src_u - 128) + V2B * (src_v - 128) + 256) >> 9;
    src_r = CLIP(src_r, 0, 255);
    src_g = CLIP(src_g, 0, 255);
    src_b = CLIP(src_b, 0, 255);
    MINT32 dst_r = (gamma_to_gamma[src_r * 4] + 2) / 4;
    MINT32 dst_g = (gamma_to_gamma[src_g * 4] + 2) / 4;
    MINT32 dst_b = (gamma_to_gamma[src_b * 4] + 2) / 4;

    dst_y = (R2Y * dst_r + G2Y * dst_g + B2Y * dst_b + 256) >> 9;
    dst_u = (R2U * dst_r + G2U * dst_g + B2U * dst_b + 256) >> 9;
    dst_v = (R2V * dst_r + G2V * dst_g + B2V * dst_b + 256) >> 9;
    dst_u += 128;
    dst_v += 128;

    dst_y = CLIP(dst_y, 0, 255);
    dst_u = CLIP(dst_u, 0, 255);
    dst_v = CLIP(dst_v, 0, 255);

    printf("(%d, %d, %d) -> (%d, %d, %d) \n", src_y, src_u, src_v, dst_y, dst_u, dst_v);
}

MVOID FD_GGM_Calculation(
                      const ISP_NVRAM_GGM_T* FD_GGM,
                      MUINT32 FD_GGM_END_VAR,
                      ISP_NVRAM_GGM_T* P2_GGM,
                      MUINT32 P2_GGM_END_VAR,
                      YNR_FD_Info_T& rFdInfoOut)
{
	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FaceAlphamap.enable", value, "0");
    MBOOL bFaceMapDebug = atoi(value);

	//rFdInfoOut.FaceNum = 4;

	MINT32 FD_Gamma_G[GGM_TABLE_SIZE] ={0};
    MINT32 P2_Gamma_G[GGM_TABLE_SIZE] ={0};

	INTER_LOG_IF(bFaceMapDebug,"[%s()] FaceNum : %d\n", __FUNCTION__, rFdInfoOut.FaceNum);

	//Parsing Gamma
	for (int i = 0; i < GGM_TABLE_SIZE; i++)
	{
        FD_Gamma_G[i] = (MINT32)FD_GGM->lut[i].bits.GGM_G;
		//if (FD_Gamma_G[i] != 0)
			//INTER_LOG_IF(bFaceMapDebug,"[%s()] FD_Gamma_G[%d] : %d\n", __FUNCTION__, i, FD_Gamma_G[i]);
		P2_Gamma_G[i] = (MINT32)P2_GGM->lut[i].bits.GGM_G;
		//INTER_LOG_IF(bFaceMapDebug,"[%s()] P2_Gamma_G[%d] : %d\n", __FUNCTION__, i, P2_Gamma_G[i]);
	}

	MINT32 Gamma_R2A_G_Full[4096] ={0};
	MINT32 Gamma_D1A_G_Full[4096] ={0};
	MINT32 Gamma_2_Gamma[1024] ={0};
    GenGammaCurve(P2_Gamma_G, Gamma_D1A_G_Full, P2_GGM_END_VAR);
    GenGammaCurve(FD_Gamma_G, Gamma_R2A_G_Full, FD_GGM_END_VAR);
    GenGGM2GGM(Gamma_R2A_G_Full, Gamma_D1A_G_Full, Gamma_2_Gamma);

    const int fd_color_num = MIN(rFdInfoOut.FaceNum, 3);
	for(int i = 0; i < fd_color_num; i++)
	{
	INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, FD_Ori_Ymean: %d, FD_Ori_Umean: %d, FD_Ori_Vmean: %d, FD_Ori_Y5: %d, FD_Ori_Y95: %d\n", __FUNCTION__, i, rFdInfoOut.YUVsts[i][0], rFdInfoOut.YUVsts[i][1], rFdInfoOut.YUVsts[i][2], rFdInfoOut.YUVsts[i][3], rFdInfoOut.YUVsts[i][4] );
	}
    for (int face_idx = 0; face_idx < fd_color_num; face_idx++)
    {
        MINT32 dst_y;
		MINT32 dst_u;
		MINT32 dst_v;
        ConvertGGMtoGGMYUV(Gamma_2_Gamma, rFdInfoOut.YUVsts[face_idx][0], rFdInfoOut.YUVsts[face_idx][1], rFdInfoOut.YUVsts[face_idx][2], dst_y, dst_u, dst_v);
        rFdInfoOut.YUVsts[face_idx][0] = dst_y;
        rFdInfoOut.YUVsts[face_idx][1] = dst_u;
        rFdInfoOut.YUVsts[face_idx][2] = dst_v;
    }

	for(int i = 0; i < fd_color_num; i++)
	{
	INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, FD_YUV_Ymean: %d, FD_YUV_Umean: %d, FD_YUV_Vmean: %d, FD_YUV_Y5: %d, FD_YUV_Y95: %d\n", __FUNCTION__, i, rFdInfoOut.YUVsts[i][0], rFdInfoOut.YUVsts[i][1], rFdInfoOut.YUVsts[i][2], rFdInfoOut.YUVsts[i][3], rFdInfoOut.YUVsts[i][4] );
	}
}

MVOID SmoothYNR_LCE_SW(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_YNR_LCE_LINK_T const& rUpperYNR_LCE_SW,   // YNR_LCE settings for upper ISO
                ISP_NVRAM_YNR_LCE_LINK_T const& rLowerYNR_LCE_SW,   // YNR_LCE settings for lower ISO
                ISP_NVRAM_YNR_LCE_LINK_T& rSmoothYNR_LCE_SW)
{
	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ynr_link.enable", value, "0");
    MBOOL bSmoothYNRLinkDebug = atoi(value);

    INTER_LOG_IF(bSmoothYNRLinkDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_TC_LINK_STR            = rLowerYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR;
    MINT32 pre_TC_LINK_STR_LUMA       = rLowerYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA;
    MINT32 pre_CE_LINK_STR            = rLowerYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR;
    MINT32 pre_GAIN_CLIP_HI           = rLowerYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI;
    MINT32 pre_GAIN_CLIP_LO           = rLowerYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO;
    MINT32 pre_GAMMA_SMOOTH           = rLowerYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH;
    MINT32 pre_P1_GAIN                = rLowerYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN;
    MINT32 pre_P50_GAIN               = rLowerYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN;
    MINT32 pre_P250_GAIN              = rLowerYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN;
    MINT32 pre_P500_GAIN              = rLowerYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN;
    MINT32 pre_P750_GAIN              = rLowerYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN;
    MINT32 pre_P950_GAIN              = rLowerYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN;
    MINT32 pre_DCE_LINK_STR           = rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR;
    MINT32 pre_DCE_GAIN_CLIP_HI       = rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI;
    MINT32 pre_DCE_GAIN_CLIP_LO       = rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO;
    MINT32 pre_LINK_BASE_GAIN         = rLowerYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN;
    MINT32 pre_rsv1                   = rLowerYNR_LCE_SW.LINK2.rsv1;
    MINT32 pre_rsv2                   = rLowerYNR_LCE_SW.LINK2.rsv2;
    MINT32 pos_TC_LINK_STR            = rUpperYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR;
    MINT32 pos_TC_LINK_STR_LUMA       = rUpperYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA;
    MINT32 pos_CE_LINK_STR            = rUpperYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR;
    MINT32 pos_GAIN_CLIP_HI           = rUpperYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI;
    MINT32 pos_GAIN_CLIP_LO           = rUpperYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO;
    MINT32 pos_GAMMA_SMOOTH           = rUpperYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH;
    MINT32 pos_P1_GAIN                = rUpperYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN;
    MINT32 pos_P50_GAIN               = rUpperYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN;
    MINT32 pos_P250_GAIN              = rUpperYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN;
    MINT32 pos_P500_GAIN              = rUpperYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN;
    MINT32 pos_P750_GAIN              = rUpperYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN;
    MINT32 pos_P950_GAIN              = rUpperYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN;
    MINT32 pos_DCE_LINK_STR           = rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR;
    MINT32 pos_DCE_GAIN_CLIP_HI       = rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI;
    MINT32 pos_DCE_GAIN_CLIP_LO       = rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO;
    MINT32 pos_LINK_BASE_GAIN         = rUpperYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN;
    MINT32 pos_rsv1                   = rUpperYNR_LCE_SW.LINK2.rsv1;
    MINT32 pos_rsv2                   = rUpperYNR_LCE_SW.LINK2.rsv2;

    // interpolation initial

    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 TC_LINK_STR            = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TC_LINK_STR, pos_TC_LINK_STR, 0);
    MINT32 TC_LINK_STR_LUMA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TC_LINK_STR_LUMA, pos_TC_LINK_STR_LUMA, 0);
    MINT32 CE_LINK_STR            = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CE_LINK_STR, pos_CE_LINK_STR, 0);
    MINT32 GAIN_CLIP_HI           = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAIN_CLIP_HI, pos_GAIN_CLIP_HI, 0);
    MINT32 GAIN_CLIP_LO           = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAIN_CLIP_LO, pos_GAIN_CLIP_LO, 0);
    MINT32 GAMMA_SMOOTH           = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_GAMMA_SMOOTH, pos_GAMMA_SMOOTH, 0);
    MINT32 P1_GAIN                = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P1_GAIN, pos_P1_GAIN, 0);
    MINT32 P50_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P50_GAIN, pos_P50_GAIN, 0);
    MINT32 P250_GAIN              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P250_GAIN, pos_P250_GAIN, 0);
    MINT32 P500_GAIN              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P500_GAIN, pos_P500_GAIN, 0);
    MINT32 P750_GAIN              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P750_GAIN, pos_P750_GAIN, 0);
    MINT32 P950_GAIN              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_P950_GAIN, pos_P950_GAIN, 0);
    MINT32 DCE_LINK_STR           = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DCE_LINK_STR, pos_DCE_LINK_STR, 0);
    MINT32 DCE_GAIN_CLIP_HI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DCE_GAIN_CLIP_HI, pos_DCE_GAIN_CLIP_HI, 0);
    MINT32 DCE_GAIN_CLIP_LO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DCE_GAIN_CLIP_LO, pos_DCE_GAIN_CLIP_LO, 0);
    MINT32 LINK_BASE_GAIN         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LINK_BASE_GAIN, pos_LINK_BASE_GAIN, 0);
    MINT32 rsv1                   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv1, pos_rsv1, 0);
    MINT32 rsv2                   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv2, pos_rsv2, 0);

	// interpolation result assignment
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR      = TC_LINK_STR;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA = TC_LINK_STR_LUMA;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR      = CE_LINK_STR;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI     = GAIN_CLIP_HI;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO     = GAIN_CLIP_LO;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH     = GAMMA_SMOOTH;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN          = P1_GAIN;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN         = P50_GAIN;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN        = P250_GAIN;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN        = P500_GAIN;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN        = P750_GAIN;
	rSmoothYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN        = P950_GAIN;
	rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR     = DCE_LINK_STR;
	rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI = DCE_GAIN_CLIP_HI;
	rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO = DCE_GAIN_CLIP_LO;
	rSmoothYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN   = LINK_BASE_GAIN;
	rSmoothYNR_LCE_SW.LINK2.rsv1                    = rsv1;
	rSmoothYNR_LCE_SW.LINK2.rsv2                    = rsv2;

    // logging
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]TC_LINK_STR            = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR     , rSmoothYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR     , rUpperYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR     );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]TC_LINK_STR_LUMA       = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA, rSmoothYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA, rUpperYNR_LCE_SW.LINK1.FW_YNR_TC_LINK_STR_LUMA);
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]CE_LINK_STR            = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR     , rSmoothYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR     , rUpperYNR_LCE_SW.LINK1.FW_YNR_CE_LINK_STR     );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]GAIN_CLIP_HI           = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI    , rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI    , rUpperYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_HI    );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]GAIN_CLIP_LO           = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO    , rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO    , rUpperYNR_LCE_SW.LINK1.FW_YNR_GAIN_CLIP_LO    );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]GAMMA_SMOOTH           = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH    , rSmoothYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH    , rUpperYNR_LCE_SW.LINK1.FW_YNR_GAMMA_SMOOTH    );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P1_GAIN                = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN         , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN         , rUpperYNR_LCE_SW.LINK1.FW_YNR_P1_GAIN         );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P50_GAIN               = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN        , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN        , rUpperYNR_LCE_SW.LINK1.FW_YNR_P50_GAIN        );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P250_GAIN              = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN       , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN       , rUpperYNR_LCE_SW.LINK1.FW_YNR_P250_GAIN       );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P500_GAIN              = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN       , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN       , rUpperYNR_LCE_SW.LINK1.FW_YNR_P500_GAIN       );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P750_GAIN              = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN       , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN       , rUpperYNR_LCE_SW.LINK1.FW_YNR_P750_GAIN       );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]P950_GAIN              = %d, %d, %d", rLowerYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN       , rSmoothYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN       , rUpperYNR_LCE_SW.LINK1.FW_YNR_P950_GAIN       );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]DCE_LINK_STR           = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR    , rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR    , rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_LINK_STR    );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]DCE_GAIN_CLIP_HI       = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI, rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI, rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_HI);
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]DCE_GAIN_CLIP_LO       = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO, rSmoothYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO, rUpperYNR_LCE_SW.LINK2.FW_YNR_DCE_GAIN_CLIP_LO);
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]LINK_BASE_GAIN         = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN  , rSmoothYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN  , rUpperYNR_LCE_SW.LINK2.FW_YNR_LINK_BASE_GAIN  );
    INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]rsv1                   = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.rsv1                   , rSmoothYNR_LCE_SW.LINK2.rsv1                   , rUpperYNR_LCE_SW.LINK2.rsv1                   );
	INTER_LOG_IF(bSmoothYNRLinkDebug, "[L,S,U]rsv2                   = %d, %d, %d", rLowerYNR_LCE_SW.LINK2.rsv2                   , rSmoothYNR_LCE_SW.LINK2.rsv2                   , rUpperYNR_LCE_SW.LINK2.rsv2                   );
}

MVOID SmoothGammaCurve(MINT32 gamma_full_src[4096], MINT32 gamma_full_dst[4096], MINT32 smooth_size)
{
	MINT32 moving_size = 2 * smooth_size;

	MINT32 gamma_full_acc[4096] = { 0 };
	MINT32 sum = 0;
	for (int i = 0; i < 4096; i++)
	{
		sum += gamma_full_src[i];
		gamma_full_acc[i] = sum;
	}

	memcpy(gamma_full_dst, gamma_full_src, 4096 * sizeof(MINT32));
	int i_start = smooth_size;
	int i_end = 4096 - smooth_size;

	if (16 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 16) >> 5;
		}
	}
	else if (32 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 32) >> 6;
		}
	}
	else if (64 == smooth_size)
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];

			gamma_full_dst[i] = (sum + 64) >> 7;
		}
	}
	else
	{
		for (int i = smooth_size; i < 4096 - smooth_size; i++)
		{
			MINT32 min_idx = MAX(i - smooth_size, 0);
			MINT32 max_idx = MIN(i + smooth_size, 4095);

			MINT32 sum = gamma_full_acc[max_idx] - gamma_full_acc[min_idx];
			MINT32 count = max_idx - min_idx;

			gamma_full_dst[i] = (2 * sum + count) / (2 * count);
		}
	}


}

MVOID ApplyGCE(MINT32 gamma_full_src[4096], MINT32 gamma_full_dst[4096], MINT32 GCE_Curve_P[8], MINT32 GCE_Curve_O[8])
{

	MINT32 GCE_Ratio[7] ={0};
	for (int i = 0; i < 7; i++)
	{
	    GCE_Curve_P[i + 1]  = MAX(GCE_Curve_P[i + 1], GCE_Curve_P[i] + 1);
		GCE_Curve_O[i + 1]  = MAX(GCE_Curve_O[i + 1], GCE_Curve_O[i] + 1);

		GCE_Ratio[i] = (2 * 1024 * (GCE_Curve_O[i + 1] - GCE_Curve_O[i]) / (GCE_Curve_P[i + 1] - GCE_Curve_P[i]) + 1) >> 1;
	}

	for (int i = 0; i < 4096; i++)
	{
		MINT32 v_in = i;
		MINT32 log_v = LOG10_TBL[v_in];
		MINT32 log_v2 = 0;

		log_v = MAX(log_v, GCE_Curve_P[0]);

		if      (log_v <= GCE_Curve_P[1]) log_v2 = (((log_v - GCE_Curve_P[0]) * GCE_Ratio[0] + 512) >> 10) + GCE_Curve_O[0];
		else if (log_v <= GCE_Curve_P[2]) log_v2 = (((log_v - GCE_Curve_P[1]) * GCE_Ratio[1] + 512) >> 10) + GCE_Curve_O[1];
		else if (log_v <= GCE_Curve_P[3]) log_v2 = (((log_v - GCE_Curve_P[2]) * GCE_Ratio[2] + 512) >> 10) + GCE_Curve_O[2];
		else if (log_v <= GCE_Curve_P[4]) log_v2 = (((log_v - GCE_Curve_P[3]) * GCE_Ratio[3] + 512) >> 10) + GCE_Curve_O[3];
		else if (log_v <= GCE_Curve_P[5]) log_v2 = (((log_v - GCE_Curve_P[4]) * GCE_Ratio[4] + 512) >> 10) + GCE_Curve_O[4];
		else if (log_v <= GCE_Curve_P[6]) log_v2 = (((log_v - GCE_Curve_P[5]) * GCE_Ratio[5] + 512) >> 10) + GCE_Curve_O[5];
		else                              log_v2 = (((log_v - GCE_Curve_P[6]) * GCE_Ratio[6] + 512) >> 10) + GCE_Curve_O[6];

        log_v2 = CLIP(log_v2, 0, 3699);
		MINT32 v_out = (log_v == log_v2) ? v_in : EXP10_TBL[log_v2];

		gamma_full_dst[i] = gamma_full_src[v_out];
	}
}

MVOID Calculate_YNR_LCE(MBOOL GCE_EN,
                      MBOOL LCE_EN,
                      ISP_NVRAM_GGM_T& FD_GGM,
                      MUINT32 GGM_END_VAR,
                      ISP_NVRAM_LCE_T const& LCE_Param,
                      ISP_NVRAM_YNR_LUT_T& YNR_TBL,
                      ISP_NVRAM_YNR_LCE_LINK_T const & SW_Param,
                      MUINT16 rVer,
                      ISP_NVRAM_YNR_LCE_OUT_T& rOutYNR_LCE)

{
	// version
	rVer = g_FW_YNR_Ver;

    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.fw_nbc.enable", value, "0");
    MBOOL bFWNBCDebug = atoi(value);

    INTER_LOG_IF(bFWNBCDebug,"[Calculate_YNR_LTM start\n");
    INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_EN: %d, LCE_EN = %d, GGM_END_VAR = %d\n", __FUNCTION__, GCE_EN, LCE_EN, GGM_END_VAR);

	rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P0_S4		   = 0;
	rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P1_S4		   = 88;
	rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P50_S4 	   = 123;
	rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P250_S4	   = 155;
	rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P500_S4	   = 196;
	rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P750_S4	   = 208;
	rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P950_S4	   = 217;
	rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P999_S4	   = 230;

	rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O0_S4		   = 0;
	rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O1_S4		   = 88;
	rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O50_S4 	   = 123;
	rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O250_S4	   = 155;
	rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O500_S4	   = 196;
	rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O750_S4	   = 208;
	rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O950_S4	   = 217;
	rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O999_S4	   = 230;

	rOutYNR_LCE.lce_luts1.bits.YNR_LCE_SP0		   = 256;
	rOutYNR_LCE.lce_luts1.bits.YNR_LCE_SP1		   = 256;
	rOutYNR_LCE.lce_luts2.bits.YNR_LCE_SP2		   = 256;
	rOutYNR_LCE.lce_luts2.bits.YNR_LCE_SP3		   = 256;
	rOutYNR_LCE.lce_luts3.bits.YNR_LCE_SP4		   = 256;
	rOutYNR_LCE.lce_luts3.bits.YNR_LCE_SP5		   = 256;
	rOutYNR_LCE.lce_luts4.bits.YNR_LCE_SP6		   = 256;

	if (!LCE_EN)
	{
	  return;
	}

	MINT32 Gamma_R[GGM_TABLE_SIZE] ={0};
	MINT32 Gamma_G[GGM_TABLE_SIZE] ={0};
	MINT32 Gamma_B[GGM_TABLE_SIZE] ={0};
	MINT32 LCE_Curve_P[8] ={0};
	MINT32 LCE_Curve_O[8] ={0};
	MINT32 GCE_Curve_P[8] ={0};
	MINT32 GCE_Curve_O[8] ={0};
	MINT32 YNR_Curve_P[8] ={0};
	MINT32 YNR_Curve_O[8] ={0};
	MINT32 YNR_Curve_SP[7] ={0};

	//Parsing Gamma
	for (int i = 0; i < GGM_TABLE_SIZE; i++)
	{
        Gamma_R[i] = (MINT32)FD_GGM.lut[i].bits.GGM_R;
		Gamma_G[i] = (MINT32)FD_GGM.lut[i].bits.GGM_G;
		Gamma_B[i] = (MINT32)FD_GGM.lut[i].bits.GGM_B;
	}

	//Parsing GCE & LCE curve
	LCE_Curve_P[0] = (MINT32)LCE_Param.tm_para0.bits.LCE_TC_P0;
	LCE_Curve_P[1] = (MINT32)LCE_Param.tm_para0.bits.LCE_TC_P1;
	LCE_Curve_P[2] = (MINT32)LCE_Param.tm_para1.bits.LCE_TC_P50;
	LCE_Curve_P[3] = (MINT32)LCE_Param.tm_para1.bits.LCE_TC_P250;
	LCE_Curve_P[4] = (MINT32)LCE_Param.tm_para2.bits.LCE_TC_P500;
	LCE_Curve_P[5] = (MINT32)LCE_Param.tm_para2.bits.LCE_TC_P750;
	LCE_Curve_P[6] = (MINT32)LCE_Param.tm_para3.bits.LCE_TC_P950;
	LCE_Curve_P[7] = (MINT32)LCE_Param.tm_para3.bits.LCE_TC_P999;

	LCE_Curve_O[0] = (MINT32)LCE_Param.tm_para4.bits.LCE_TC_O0;
	LCE_Curve_O[1] = (MINT32)LCE_Param.tm_para4.bits.LCE_TC_O1;
	LCE_Curve_O[2] = (MINT32)LCE_Param.tm_para5.bits.LCE_TC_O50;
	LCE_Curve_O[3] = (MINT32)LCE_Param.tm_para5.bits.LCE_TC_O250;
	LCE_Curve_O[4] = (MINT32)LCE_Param.tm_para6.bits.LCE_TC_O500;
	LCE_Curve_O[5] = (MINT32)LCE_Param.tm_para6.bits.LCE_TC_O750;
	LCE_Curve_O[6] = (MINT32)LCE_Param.tm_para7.bits.LCE_TC_O950;
	LCE_Curve_O[7] = (MINT32)LCE_Param.tm_para7.bits.LCE_TC_O999;

	GCE_Curve_P[0] = (MINT32)LCE_Param.hlr_para0.bits.LCE_HLR_TC_P0;
	GCE_Curve_P[1] = (MINT32)LCE_Param.hlr_para0.bits.LCE_HLR_TC_P1;
	GCE_Curve_P[2] = (MINT32)LCE_Param.hlr_para1.bits.LCE_HLR_TC_P50;
	GCE_Curve_P[3] = (MINT32)LCE_Param.hlr_para1.bits.LCE_HLR_TC_P250;
	GCE_Curve_P[4] = (MINT32)LCE_Param.hlr_para2.bits.LCE_HLR_TC_P500;
	GCE_Curve_P[5] = (MINT32)LCE_Param.hlr_para2.bits.LCE_HLR_TC_P750;
	GCE_Curve_P[6] = (MINT32)LCE_Param.hlr_para3.bits.LCE_HLR_TC_P950;
	GCE_Curve_P[7] = (MINT32)LCE_Param.hlr_para3.bits.LCE_HLR_TC_P999;

	GCE_Curve_O[0] = (MINT32)LCE_Param.hlr_para4.bits.LCE_HLR_TC_O0;
	GCE_Curve_O[1] = (MINT32)LCE_Param.hlr_para4.bits.LCE_HLR_TC_O1;
	GCE_Curve_O[2] = (MINT32)LCE_Param.hlr_para5.bits.LCE_HLR_TC_O50;
	GCE_Curve_O[3] = (MINT32)LCE_Param.hlr_para5.bits.LCE_HLR_TC_O250;
	GCE_Curve_O[4] = (MINT32)LCE_Param.hlr_para6.bits.LCE_HLR_TC_O500;
	GCE_Curve_O[5] = (MINT32)LCE_Param.hlr_para6.bits.LCE_HLR_TC_O750;
	GCE_Curve_O[6] = (MINT32)LCE_Param.hlr_para7.bits.LCE_HLR_TC_O950;
	GCE_Curve_O[7] = (MINT32)LCE_Param.hlr_para7.bits.LCE_HLR_TC_O999;

	MINT32 LCE_CEN_MAX_SLOPE = (MINT32)LCE_Param.cen_para1.bits.LCE_CEN_MAX_SLOPE;

	MINT32 TC_LINK_STR      = (MINT32)SW_Param.LINK1.FW_YNR_TC_LINK_STR;
	MINT32 TC_LINK_STR_LUMA = (MINT32)SW_Param.LINK1.FW_YNR_TC_LINK_STR_LUMA;
	MINT32 CE_LINK_STR      = (MINT32)SW_Param.LINK1.FW_YNR_CE_LINK_STR;
	MINT32 GAIN_CLIP_HI     = (MINT32)SW_Param.LINK1.FW_YNR_GAIN_CLIP_HI;
	MINT32 GAIN_CLIP_LO     = (MINT32)SW_Param.LINK1.FW_YNR_GAIN_CLIP_LO;
	MINT32 GAMMA_SMOOTH     = (MINT32)SW_Param.LINK1.FW_YNR_GAMMA_SMOOTH;
	MINT32 P1_GAIN          = (MINT32)SW_Param.LINK1.FW_YNR_P1_GAIN;
	MINT32 P50_GAIN         = (MINT32)SW_Param.LINK1.FW_YNR_P50_GAIN;
	MINT32 P250_GAIN        = (MINT32)SW_Param.LINK1.FW_YNR_P250_GAIN;
	MINT32 P500_GAIN        = (MINT32)SW_Param.LINK1.FW_YNR_P500_GAIN;
	MINT32 P750_GAIN        = (MINT32)SW_Param.LINK1.FW_YNR_P750_GAIN;
	MINT32 P950_GAIN        = (MINT32)SW_Param.LINK1.FW_YNR_P950_GAIN;
	MINT32 DCE_LINK_STR     = (MINT32)SW_Param.LINK2.FW_YNR_DCE_LINK_STR;
	MINT32 DCE_GAIN_HI      = (MINT32)(SW_Param.LINK2.FW_YNR_DCE_GAIN_CLIP_HI << 4);
	MINT32 DCE_GAIN_LO      = (MINT32)(SW_Param.LINK2.FW_YNR_DCE_GAIN_CLIP_LO << 4);

	MINT32 LINK_BASE_GAIN   = (MINT32)SW_Param.LINK2.FW_YNR_LINK_BASE_GAIN;
	MINT32 RSV1             = (MINT32)SW_Param.LINK2.rsv1;
	MINT32 RSV2             = (MINT32)SW_Param.LINK2.rsv2;

    for (int i = 0; i < 8; i++)
    {
	    INTER_LOG_IF(bFWNBCDebug,"[%s()] LCE_Curve_P[%d]: %d\n", __FUNCTION__, i, LCE_Curve_P[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] LCE_Curve_O[%d]: %d\n", __FUNCTION__, i, LCE_Curve_O[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_Curve_P[%d]: %d\n", __FUNCTION__, i, GCE_Curve_P[i]);
		INTER_LOG_IF(bFWNBCDebug,"[%s()] GCE_Curve_O[%d]: %d\n", __FUNCTION__, i, GCE_Curve_O[i]);
    }

	MBOOL fgLCE_Normal = 1;
	MBOOL fgGCE_Normal = 1;

	//Check LCE & GCE
	for (int i = 0; i < 7; i++)
	{
		if(LCE_Curve_P[i+1] < LCE_Curve_P[i])
		{
		    fgLCE_Normal = 0;
		}

		if(LCE_Curve_O[i+1] < LCE_Curve_O[i])
		{
		    fgLCE_Normal = 0;
		}

		if(GCE_Curve_P[i+1] < GCE_Curve_P[i])
		{
		    fgGCE_Normal = 0;
		}

		if(GCE_Curve_O[i+1] < GCE_Curve_O[i])
		{
		    fgGCE_Normal = 0;
		}
	}

	if(fgLCE_Normal == 0)
	{
		return;
	}

	   if((fgGCE_Normal == 0) && GCE_EN)
	{
		return;
	}

	MINT32 Gamma_G_Full_tmp[4096] ={0};
	MINT32 Gamma_G_Full[4096] ={0};
	MINT32 Gamma_G_Full_GCE[4096] ={0};
	GenGammaCurve(Gamma_G, Gamma_G_Full_tmp, GGM_END_VAR);

	SmoothGammaCurve(Gamma_G_Full_tmp, Gamma_G_Full, GAMMA_SMOOTH);

	if (GCE_EN)
	{
		ApplyGCE(Gamma_G_Full, Gamma_G_Full_GCE, GCE_Curve_P, GCE_Curve_O);
	}
	else
	{
		memcpy(Gamma_G_Full_GCE, Gamma_G_Full, sizeof(MINT32) * 4096);
	}

	const MINT32 range = 32;

	GAIN_CLIP_HI = CLIP(GAIN_CLIP_HI, 0, 4095);
	GAIN_CLIP_LO = CLIP(GAIN_CLIP_LO, 0, 4095);

	const MINT32 GAIN_CLIP_HI_log = LOG10_TBL[GAIN_CLIP_HI] - LOG10_TBL[16];
	const MINT32 GAIN_CLIP_LO_log = LOG10_TBL[GAIN_CLIP_LO] - LOG10_TBL[16];

	const float CONT_GAIN_LF = 0.4f; // Model that LCE only enhance noise in 3x5 to 50x50 band

	MINT32 linear_P[8] = {0};
	MINT32 linear_O[8] = {0};

	const MINT32 INT_PRC = 256;

	CE_LINK_STR = CLIP(CE_LINK_STR, 0, 32);

	const float contrast_gain = 1.f + CONT_GAIN_LF * CE_LINK_STR * (LCE_CEN_MAX_SLOPE - 64.f) / 64.f / 16.f;

	for (int i = 0; i < 8; i++)
	   {
		   MINT32 lce_p = MIN(LCE_Curve_P[i], 3699);
		   MINT32 lce_o = MIN(LCE_Curve_O[i], 3699);

		   linear_P[i] = EXP10_TBL[lce_p];
		   linear_O[i] = EXP10_TBL[lce_o];

		   float lce_Gain = (linear_P[i] > 0) ? (float)linear_O[i] / linear_P[i] : 1.f;

		   MINT32 range_x = range;

		   MINT32 i1 = linear_P[i] + 1;
		   float range_y0 = -((i1 * (powf((float)MAX(i1 - range, 0) / i1, contrast_gain))) - i1);
		   float range_y1 = (i1 * (powf((float)MIN(i1 + range, 4095) / i1, contrast_gain))) - i1;
		   range_y0 *= lce_Gain;
		   range_y1 *= lce_Gain;

		   MINT32 range_y0i = (MINT32)(range_y0 + 0.5f);
		   MINT32 range_y1i = (MINT32)(range_y1 + 0.5f);

		   MINT32 x0 = MAX(linear_P[i] - range_x, 0);
		   MINT32 x1 = MIN(linear_P[i] + range_x, 4095);
		   MINT32 y0 = MAX(linear_O[i] - range_y0i, 0);
		   MINT32 y1 = MIN(linear_O[i] + range_y1i, 4095);

		   MINT32 ggm_x0 = Gamma_G_Full[x0];
		   MINT32 ggm_x1 = Gamma_G_Full[x1];
		   MINT32 ggm_y0 = Gamma_G_Full[y0];
		   MINT32 ggm_y1 = Gamma_G_Full[y1];

		   MINT32 dx = ggm_x1 - ggm_x0;
		   MINT32 dy = ggm_y1 - ggm_y0;

		   MINT32 log_noise_gain = 0;
		   if (dx > 0 && dy > 0)
		   {
			   dx = MIN(dx, 4095);
			   dy = MIN(dy, 4095);
			   log_noise_gain = LOG10_TBL[dy - 1] - LOG10_TBL[dx - 1];
		   }

		   INTER_LOG_IF(bFWNBCDebug,"[%s()] Linear: (%d, %d), (%d, %d)\n", __FUNCTION__, x0, x1, y0, y1);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] GGM: (%d, %d), (%d, %d)\n", __FUNCTION__, ggm_x0, ggm_x1, ggm_y0, ggm_y1);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] log_noise_gain %d\n", __FUNCTION__, log_noise_gain);

		   log_noise_gain = log_noise_gain * TC_LINK_STR / 16;

		   INTER_LOG_IF(bFWNBCDebug,"[%s()] log_noise_gain_before_clip: %d\n", __FUNCTION__, log_noise_gain);
		   log_noise_gain = CLIP(log_noise_gain, GAIN_CLIP_LO_log, GAIN_CLIP_HI_log);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] GAIN_CLIP_LO_log: %d\n", __FUNCTION__, GAIN_CLIP_LO_log);
		   INTER_LOG_IF(bFWNBCDebug,"[%s()] GAIN_CLIP_HI_log: %d\n", __FUNCTION__, GAIN_CLIP_HI_log);

		   YNR_Curve_P[i] = LCE_Curve_P[i];
		   YNR_Curve_O[i] = (MINT32)(log_noise_gain + LCE_Curve_P[i] + 0.5);
		   YNR_Curve_O[i] = YNR_Curve_O[i] + (LCE_Curve_O[i] - LCE_Curve_P[i]) * TC_LINK_STR_LUMA / 16;
	   }

	MINT32 p1_gain = MIN(P1_GAIN, 255);
	MINT32 p50_gain = MIN(P50_GAIN, 255);
	MINT32 p250_gain = MIN(P250_GAIN, 255);
	MINT32 p500_gain = MIN(P500_GAIN, 255);
	MINT32 p750_gain = MIN(P750_GAIN, 255);
	MINT32 p950_gain = MIN(P950_GAIN, 255);

	YNR_Curve_O[1] = YNR_Curve_P[1] + (YNR_Curve_O[1] - YNR_Curve_P[1]) * p1_gain   / 16;
	YNR_Curve_O[2] = YNR_Curve_P[2] + (YNR_Curve_O[2] - YNR_Curve_P[2]) * p50_gain  / 16;
	YNR_Curve_O[3] = YNR_Curve_P[3] + (YNR_Curve_O[3] - YNR_Curve_P[3]) * p250_gain / 16;
	YNR_Curve_O[4] = YNR_Curve_P[4] + (YNR_Curve_O[4] - YNR_Curve_P[4]) * p500_gain / 16;
	YNR_Curve_O[5] = YNR_Curve_P[5] + (YNR_Curve_O[5] - YNR_Curve_P[5]) * p750_gain / 16;
	YNR_Curve_O[6] = YNR_Curve_P[6] + (YNR_Curve_O[6] - YNR_Curve_P[6]) * p950_gain / 16;

    ////O0 should <= O1 & O7 should >= O6
    YNR_Curve_O[0] = MIN(YNR_Curve_O[0], YNR_Curve_O[1]);
	YNR_Curve_O[7] = MAX(YNR_Curve_O[6], YNR_Curve_O[7]);

	const MINT32 base_gain = CLIP(LINK_BASE_GAIN, 0, 4095);
    const MINT32 base_gain_log = LOG10_TBL[base_gain] - LOG10_TBL[16];
    for (int i = 0; i < 8; i++)
    {
        MINT32 curr_gain = YNR_Curve_O[i] - YNR_Curve_P[i];
        MINT32 adj_gain = curr_gain - base_gain_log;
        YNR_Curve_O[i] = CLIP(YNR_Curve_P[i] + adj_gain, 0, 3699);
	}

	//////////////////////////////////////////////
	// Convert curve from 12 to 8
	for (int i = 0; i < 8; i++)
	{
		YNR_Curve_P[i] = (YNR_Curve_P[i] + 8) >> 4;
		YNR_Curve_O[i] = (YNR_Curve_O[i] + 8) >> 4;

		YNR_Curve_P[i] = CLIP(YNR_Curve_P[i], 0, 255);
		YNR_Curve_O[i] = CLIP(YNR_Curve_O[i], 0, 255);
	}


	//////////////////////////////////////////////
	// Calculate slope
	for (int i = 0; i < 7; i++)
	{
		if (YNR_Curve_P[i+1] > YNR_Curve_P[i])
		{
			MINT32 slope = (MINT32)((double)(((MINT32)YNR_Curve_O[i+1] - (MINT32)YNR_Curve_O[i]) * 256) / (YNR_Curve_P[i+1] - YNR_Curve_P[i]) + 0.5);

			YNR_Curve_SP[i] = CLIP(slope, -4096, 4095);
		}
		else
		{
			YNR_Curve_SP[i] = 0;
		}
	}

	  rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P0_S4		   = YNR_Curve_P[0];
	  rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P1_S4		   = YNR_Curve_P[1];
	  rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P50_S4 	   = YNR_Curve_P[2];
	  rOutYNR_LCE.lce_lutp1.bits.YNR_LCE_P250_S4	   = YNR_Curve_P[3];
	  rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P500_S4	   = YNR_Curve_P[4];
	  rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P750_S4	   = YNR_Curve_P[5];
	  rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P950_S4	   = YNR_Curve_P[6];
	  rOutYNR_LCE.lce_lutp2.bits.YNR_LCE_P999_S4	   = YNR_Curve_P[7];

	  rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O0_S4		   = YNR_Curve_O[0];
	  rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O1_S4		   = YNR_Curve_O[1];
	  rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O50_S4 	   = YNR_Curve_O[2];
	  rOutYNR_LCE.lce_luto1.bits.YNR_LCE_O250_S4	   = YNR_Curve_O[3];
	  rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O500_S4	   = YNR_Curve_O[4];
	  rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O750_S4	   = YNR_Curve_O[5];
	  rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O950_S4	   = YNR_Curve_O[6];
	  rOutYNR_LCE.lce_luto2.bits.YNR_LCE_O999_S4	   = YNR_Curve_O[7];

	  rOutYNR_LCE.lce_luts1.bits.YNR_LCE_SP0		   = YNR_Curve_SP[0];
	  rOutYNR_LCE.lce_luts1.bits.YNR_LCE_SP1		   = YNR_Curve_SP[1];
	  rOutYNR_LCE.lce_luts2.bits.YNR_LCE_SP2		   = YNR_Curve_SP[2];
	  rOutYNR_LCE.lce_luts2.bits.YNR_LCE_SP3		   = YNR_Curve_SP[3];
	  rOutYNR_LCE.lce_luts3.bits.YNR_LCE_SP4		   = YNR_Curve_SP[4];
	  rOutYNR_LCE.lce_luts3.bits.YNR_LCE_SP5		   = YNR_Curve_SP[5];
	  rOutYNR_LCE.lce_luts4.bits.YNR_LCE_SP6		   = YNR_Curve_SP[6];

      // DCE NR Link
	  ANRTbl8x8x8_T ANR8x8x8;
	  ANRTBL_YUV8x8x8(YNR_TBL, ANR8x8x8);

	  int DCE_Gain[8] = { 0 };
	  int DCE_Gain_tune[8] = { 0 };
	  if (GCE_EN)
	  {
	      // Gamma_G_Full
	      // Gamma_G_Full_GCE
	      int Table_Y_val[8] = { 16, 48, 80, 112, 144, 176, 208, 240 };
	      int Table_idx[8] = { 0 };

	      int tmp_idx = 0;
	      for (int i = 0; i < 4096; i++)
	      {
	          int curr_table_y_val = Table_Y_val[tmp_idx] * 4;
	          if (Gamma_G_Full_GCE[i] < curr_table_y_val)
	          {
	              Table_idx[tmp_idx] = i;
	          }


	          if (Gamma_G_Full_GCE[MIN(i + 1, 4095)] >= curr_table_y_val)
	          {
	              tmp_idx++;
	          }

	          if (tmp_idx >= 8)
	              break;
	      }

	      const int GCE_RANGE = 8;
	      for (int i = 0; i < 8; i++)
	      {
	          int curr_idx = Table_idx[i];
	          int low_i = MAX(curr_idx - GCE_RANGE, 0);
	          int high_i = MIN(curr_idx + GCE_RANGE, 4095);
	          int diff_ori = MAX(Gamma_G_Full[high_i] - Gamma_G_Full[low_i], 1);
	          int diff_dce = MAX(Gamma_G_Full_GCE[high_i] - Gamma_G_Full_GCE[low_i], 1);
	          DCE_Gain[i] = (256 * diff_dce + (diff_ori/2)) / diff_ori;
	      }

	      for (int y_idx = 0; y_idx < 8; y_idx++)
	      {
			int curr_DCE_Gain = 256 + (((DCE_Gain[y_idx] - 256) * DCE_LINK_STR + 8) >> 4); // use RSV2 for DCE_LINK_STR
	          curr_DCE_Gain = CLIP(curr_DCE_Gain, DCE_GAIN_LO, DCE_GAIN_HI);

	          DCE_Gain_tune[y_idx] = curr_DCE_Gain;
	          for (int u_idx = 0; u_idx < 8; u_idx++)
	          {
	              for (int v_idx = 0; v_idx < 8; v_idx++)
	              {
	                  ANR8x8x8.Y[y_idx][u_idx][v_idx] = (ANR8x8x8.Y[y_idx][u_idx][v_idx] * curr_DCE_Gain + 128) >> 8;
	                  ANR8x8x8.Y[y_idx][u_idx][v_idx] = CLIP(ANR8x8x8.Y[y_idx][u_idx][v_idx], 0, 31);
	              }
	          }
	      }
	  }

      YUV8x8x8_ANRTBL(ANR8x8x8, YNR_TBL);
      INTER_LOG_IF(bFWNBCDebug,"[Calculate_YNR_LTM end\n");
}


MVOID Smooth_YNR_FD(MUINT32 u4RealISO,	// Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_YNR_FD_T const& rUpperYnrFd,   // OBC settings for upper ISO
                ISP_NVRAM_YNR_FD_T const& rLowerYnrFd,   // OBC settings for lower ISO
                ISP_NVRAM_YNR_FD_T& rYnrFd)
{
	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ynr_fd.enable", value, "0");
    MBOOL bSmoothYNRFDDebug = atoi(value);

    INTER_LOG_IF(bSmoothYNRFDDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_TBL_EN                 = rLowerYnrFd.TBL.YNR_FD_TBL_EN;
    MINT32 pre_TBL_M_GAIN             = rLowerYnrFd.TBL.YNR_FD_TBL_M_GAIN;
    MINT32 pre_TBL_F_GAIN             = rLowerYnrFd.TBL.YNR_FD_TBL_F_GAIN;
    MINT32 pre_TBL_Y_GAIN             = rLowerYnrFd.TBL.YNR_FD_TBL_Y_GAIN;
    MINT32 pre_TBL_U_GAIN             = rLowerYnrFd.TBL.YNR_FD_TBL_U_GAIN;
    MINT32 pre_TBL_V_GAIN             = rLowerYnrFd.TBL.YNR_FD_TBL_V_GAIN;
    MINT32 pre_TBL_Y_Range            = rLowerYnrFd.TBL.YNR_FD_TBL_Y_Range;
    MINT32 pre_TBL_U_Range            = rLowerYnrFd.TBL.YNR_FD_TBL_U_Range;
    MINT32 pre_TBL_V_Range            = rLowerYnrFd.TBL.YNR_FD_TBL_V_Range;
    MINT32 pre_MAP_EN                 = rLowerYnrFd.MAP1.YNR_FD_MAP_EN;
    MINT32 pre_MAP_MAX_GAIN           = rLowerYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN;
    MINT32 pre_MAP_M_GAIN             = rLowerYnrFd.MAP1.YNR_FD_MAP_M_GAIN;
    MINT32 pre_MAP_F_GAIN             = rLowerYnrFd.MAP1.YNR_FD_MAP_F_GAIN;
    MINT32 pre_MAP_W_R                = rLowerYnrFd.MAP1.YNR_FD_MAP_W_R;
    MINT32 pre_MAP_H_R                = rLowerYnrFd.MAP1.YNR_FD_MAP_H_R;
    MINT32 pre_MAP_DOWN               = rLowerYnrFd.MAP1.YNR_FD_MAP_DOWN;
    MINT32 pre_MAP_Y_RANGE            = rLowerYnrFd.MAP1.YNR_FD_MAP_Y_RANGE;
    MINT32 pre_MAP_U_RANGE            = rLowerYnrFd.MAP1.YNR_FD_MAP_U_RANGE;
    MINT32 pre_MAP_V_RANGE            = rLowerYnrFd.MAP1.YNR_FD_MAP_V_RANGE;
    MINT32 pre_MAP_EYES_EN            = rLowerYnrFd.MAP2.rsv1;
    MINT32 pre_MAP_EYES_SIZE_R        = rLowerYnrFd.MAP2.rsv2;
    MINT32 pre_MAP_EYES_CV_TH0        = rLowerYnrFd.MAP2.rsv3;
    MINT32 pre_MAP_EYES_CV_TH1        = rLowerYnrFd.MAP2.rsv4;
    MINT32 pre_MAP_SIZE_TH0           = rLowerYnrFd.MAP2.rsv5;
    MINT32 pre_MAP_SIZE_TH1           = rLowerYnrFd.MAP2.rsv6;
    MINT32 pre_MAP_SIZE_GAIN1         = rLowerYnrFd.MAP2.rsv7;
    MINT32 pre_MAP_GENDER_BAL_EN      = rLowerYnrFd.MAP2.rsv8;
    MINT32 pre_MAP_U_GAIN             = rLowerYnrFd.MAP2.rsv9;
    MINT32 pre_rsv10                  = rLowerYnrFd.MAP2.rsv10;
    MINT32 pre_rsv11                  = rLowerYnrFd.MAP2.rsv11;
    MINT32 pre_rsv12                  = rLowerYnrFd.MAP2.rsv12;
    MINT32 pre_rsv13                  = rLowerYnrFd.MAP2.rsv13;
    MINT32 pre_rsv14                  = rLowerYnrFd.MAP2.rsv14;
    MINT32 pre_rsv15                  = rLowerYnrFd.MAP2.rsv15;
    MINT32 pre_rsv16                  = rLowerYnrFd.MAP2.rsv16;
    MINT32 pre_rsv17                  = rLowerYnrFd.MAP2.rsv17;
    MINT32 pre_rsv18                  = rLowerYnrFd.MAP2.rsv18;
    MINT32 pre_rsv19                  = rLowerYnrFd.MAP2.rsv19;
    MINT32 pre_rsv20                  = rLowerYnrFd.MAP2.rsv20;
    MINT32 pre_rsv21                  = rLowerYnrFd.MAP2.rsv21;
    MINT32 pre_rsv22                  = rLowerYnrFd.MAP2.rsv22;
    MINT32 pre_rsv23                  = rLowerYnrFd.MAP2.rsv23;
    MINT32 pre_rsv24                  = rLowerYnrFd.MAP2.rsv24;
    MINT32 pre_rsv25                  = rLowerYnrFd.MAP2.rsv25;
    MINT32 pre_rsv26                  = rLowerYnrFd.MAP2.rsv26;
    MINT32 pos_TBL_EN                 = rUpperYnrFd.TBL.YNR_FD_TBL_EN;
    MINT32 pos_TBL_M_GAIN             = rUpperYnrFd.TBL.YNR_FD_TBL_M_GAIN;
    MINT32 pos_TBL_F_GAIN             = rUpperYnrFd.TBL.YNR_FD_TBL_F_GAIN;
    MINT32 pos_TBL_Y_GAIN             = rUpperYnrFd.TBL.YNR_FD_TBL_Y_GAIN;
    MINT32 pos_TBL_U_GAIN             = rUpperYnrFd.TBL.YNR_FD_TBL_U_GAIN;
    MINT32 pos_TBL_V_GAIN             = rUpperYnrFd.TBL.YNR_FD_TBL_V_GAIN;
    MINT32 pos_TBL_Y_Range            = rUpperYnrFd.TBL.YNR_FD_TBL_Y_Range;
    MINT32 pos_TBL_U_Range            = rUpperYnrFd.TBL.YNR_FD_TBL_U_Range;
    MINT32 pos_TBL_V_Range            = rUpperYnrFd.TBL.YNR_FD_TBL_V_Range;
    MINT32 pos_MAP_EN                 = rUpperYnrFd.MAP1.YNR_FD_MAP_EN;
    MINT32 pos_MAP_MAX_GAIN           = rUpperYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN;
    MINT32 pos_MAP_M_GAIN             = rUpperYnrFd.MAP1.YNR_FD_MAP_M_GAIN;
    MINT32 pos_MAP_F_GAIN             = rUpperYnrFd.MAP1.YNR_FD_MAP_F_GAIN;
    MINT32 pos_MAP_W_R                = rUpperYnrFd.MAP1.YNR_FD_MAP_W_R;
    MINT32 pos_MAP_H_R                = rUpperYnrFd.MAP1.YNR_FD_MAP_H_R;
    MINT32 pos_MAP_DOWN               = rUpperYnrFd.MAP1.YNR_FD_MAP_DOWN;
    MINT32 pos_MAP_Y_RANGE            = rUpperYnrFd.MAP1.YNR_FD_MAP_Y_RANGE;
    MINT32 pos_MAP_U_RANGE            = rUpperYnrFd.MAP1.YNR_FD_MAP_U_RANGE;
    MINT32 pos_MAP_V_RANGE            = rUpperYnrFd.MAP1.YNR_FD_MAP_V_RANGE;
    MINT32 pos_MAP_EYES_EN            = rUpperYnrFd.MAP2.rsv1;
    MINT32 pos_MAP_EYES_SIZE_R        = rUpperYnrFd.MAP2.rsv2;
    MINT32 pos_MAP_EYES_CV_TH0        = rUpperYnrFd.MAP2.rsv3;
    MINT32 pos_MAP_EYES_CV_TH1        = rUpperYnrFd.MAP2.rsv4;
    MINT32 pos_MAP_SIZE_TH0           = rUpperYnrFd.MAP2.rsv5;
    MINT32 pos_MAP_SIZE_TH1           = rUpperYnrFd.MAP2.rsv6;
    MINT32 pos_MAP_SIZE_GAIN1         = rUpperYnrFd.MAP2.rsv7;
    MINT32 pos_MAP_GENDER_BAL_EN      = rUpperYnrFd.MAP2.rsv8;
    MINT32 pos_MAP_U_GAIN             = rUpperYnrFd.MAP2.rsv9;
    MINT32 pos_rsv10                  = rUpperYnrFd.MAP2.rsv10;
    MINT32 pos_rsv11                  = rUpperYnrFd.MAP2.rsv11;
    MINT32 pos_rsv12                  = rUpperYnrFd.MAP2.rsv12;
    MINT32 pos_rsv13                  = rUpperYnrFd.MAP2.rsv13;
    MINT32 pos_rsv14                  = rUpperYnrFd.MAP2.rsv14;
    MINT32 pos_rsv15                  = rUpperYnrFd.MAP2.rsv15;
    MINT32 pos_rsv16                  = rUpperYnrFd.MAP2.rsv16;
    MINT32 pos_rsv17                  = rUpperYnrFd.MAP2.rsv17;
    MINT32 pos_rsv18                  = rUpperYnrFd.MAP2.rsv18;
    MINT32 pos_rsv19                  = rUpperYnrFd.MAP2.rsv19;
    MINT32 pos_rsv20                  = rUpperYnrFd.MAP2.rsv20;
    MINT32 pos_rsv21                  = rUpperYnrFd.MAP2.rsv21;
    MINT32 pos_rsv22                  = rUpperYnrFd.MAP2.rsv22;
    MINT32 pos_rsv23                  = rUpperYnrFd.MAP2.rsv23;
    MINT32 pos_rsv24                  = rUpperYnrFd.MAP2.rsv24;
    MINT32 pos_rsv25                  = rUpperYnrFd.MAP2.rsv25;
    MINT32 pos_rsv26                  = rUpperYnrFd.MAP2.rsv26;

    // interpolation initial

    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 TBL_EN                   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_EN, pos_TBL_EN, 1);
    MINT32 TBL_M_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_M_GAIN, pos_TBL_M_GAIN, 0);
    MINT32 TBL_F_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_F_GAIN, pos_TBL_F_GAIN, 0);
    MINT32 TBL_Y_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_Y_GAIN, pos_TBL_Y_GAIN, 0);
    MINT32 TBL_U_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_U_GAIN, pos_TBL_U_GAIN, 0);
    MINT32 TBL_V_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_V_GAIN, pos_TBL_V_GAIN, 0);
    MINT32 TBL_Y_Range              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_Y_Range, pos_TBL_Y_Range, 0);
    MINT32 TBL_U_Range              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_U_Range, pos_TBL_U_Range, 0);
    MINT32 TBL_V_Range              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_TBL_V_Range, pos_TBL_V_Range, 0);
    MINT32 MAP_EN                   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_EN, pos_MAP_EN, 1);
    MINT32 MAP_MAX_GAIN             = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_MAX_GAIN, pos_MAP_MAX_GAIN, 0);
    MINT32 MAP_M_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_M_GAIN, pos_MAP_M_GAIN, 0);
    MINT32 MAP_F_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_F_GAIN, pos_MAP_F_GAIN, 0);
    MINT32 MAP_W_R                  = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_W_R, pos_MAP_W_R, 0);
    MINT32 MAP_H_R                  = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_H_R, pos_MAP_H_R, 0);
    MINT32 MAP_DOWN                 = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_DOWN, pos_MAP_DOWN, 0);
    MINT32 MAP_Y_RANGE              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_Y_RANGE, pos_MAP_Y_RANGE, 0);
    MINT32 MAP_U_RANGE              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_U_RANGE, pos_MAP_U_RANGE, 0);
    MINT32 MAP_V_RANGE              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_V_RANGE, pos_MAP_V_RANGE, 0);
    MINT32 MAP_EYES_EN              = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_EYES_EN, pos_MAP_EYES_EN, 1);
    MINT32 MAP_EYES_SIZE_R          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_EYES_SIZE_R, pos_MAP_EYES_SIZE_R, 0);
    MINT32 MAP_EYES_CV_TH0          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_EYES_CV_TH0, pos_MAP_EYES_CV_TH0, 0);
    MINT32 MAP_EYES_CV_TH1          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_EYES_CV_TH1, pos_MAP_EYES_CV_TH1, 0);
    MINT32 MAP_SIZE_TH0             = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_SIZE_TH0, pos_MAP_SIZE_TH0, 0);
    MINT32 MAP_SIZE_TH1             = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_SIZE_TH1, pos_MAP_SIZE_TH1, 0);
    MINT32 MAP_SIZE_GAIN1           = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_SIZE_GAIN1, pos_MAP_SIZE_GAIN1, 0);
    MINT32 MAP_GENDER_BAL_EN        = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_GENDER_BAL_EN, pos_MAP_GENDER_BAL_EN, 1);
    MINT32 MAP_U_GAIN               = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MAP_U_GAIN, pos_MAP_U_GAIN, 0);
    MINT32 rsv10                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv10, pos_rsv10, 0);
    MINT32 rsv11                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv11, pos_rsv11, 0);
    MINT32 rsv12                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv12, pos_rsv12, 0);
    MINT32 rsv13                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv13, pos_rsv13, 0);
    MINT32 rsv14                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv14, pos_rsv14, 0);
    MINT32 rsv15                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv15, pos_rsv15, 0);
    MINT32 rsv16                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv16, pos_rsv16, 0);
    MINT32 rsv17                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv17, pos_rsv17, 0);
    MINT32 rsv18                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv18, pos_rsv18, 0);
    MINT32 rsv19                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv19, pos_rsv19, 0);
    MINT32 rsv20                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv20, pos_rsv20, 0);
    MINT32 rsv21                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv21, pos_rsv21, 0);
    MINT32 rsv22                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv22, pos_rsv22, 0);
    MINT32 rsv23                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv23, pos_rsv23, 0);
    MINT32 rsv24                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv24, pos_rsv24, 0);
    MINT32 rsv25                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv25, pos_rsv25, 0);
    MINT32 rsv26                    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv26, pos_rsv26, 0);


	// interpolation result assignment
	rYnrFd.TBL.YNR_FD_TBL_EN      = TBL_EN;
	rYnrFd.TBL.YNR_FD_TBL_M_GAIN  = TBL_M_GAIN;
	rYnrFd.TBL.YNR_FD_TBL_F_GAIN  = TBL_F_GAIN;
	rYnrFd.TBL.YNR_FD_TBL_Y_GAIN  = TBL_Y_GAIN;
	rYnrFd.TBL.YNR_FD_TBL_U_GAIN  = TBL_U_GAIN;
	rYnrFd.TBL.YNR_FD_TBL_V_GAIN  = TBL_V_GAIN;
	rYnrFd.TBL.YNR_FD_TBL_Y_Range = TBL_Y_Range;
	rYnrFd.TBL.YNR_FD_TBL_U_Range = TBL_U_Range;
	rYnrFd.TBL.YNR_FD_TBL_V_Range = TBL_V_Range;
	rYnrFd.MAP1.YNR_FD_MAP_EN       = MAP_EN;
	rYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN = MAP_MAX_GAIN;
	rYnrFd.MAP1.YNR_FD_MAP_M_GAIN   = MAP_M_GAIN;
	rYnrFd.MAP1.YNR_FD_MAP_F_GAIN   = MAP_F_GAIN;
	rYnrFd.MAP1.YNR_FD_MAP_W_R      = MAP_W_R;
	rYnrFd.MAP1.YNR_FD_MAP_H_R      = MAP_H_R;
	rYnrFd.MAP1.YNR_FD_MAP_DOWN     = MAP_DOWN;
	rYnrFd.MAP1.YNR_FD_MAP_Y_RANGE  = MAP_Y_RANGE;
	rYnrFd.MAP1.YNR_FD_MAP_U_RANGE  = MAP_U_RANGE;
    rYnrFd.MAP1.YNR_FD_MAP_V_RANGE  = MAP_V_RANGE;
	rYnrFd.MAP2.rsv1                = MAP_EYES_EN;
	rYnrFd.MAP2.rsv2                = MAP_EYES_SIZE_R;
	rYnrFd.MAP2.rsv3                = MAP_EYES_CV_TH0;
	rYnrFd.MAP2.rsv4                = MAP_EYES_CV_TH1;
	rYnrFd.MAP2.rsv5                = MAP_SIZE_TH0;
	rYnrFd.MAP2.rsv6                = MAP_SIZE_TH1;
	rYnrFd.MAP2.rsv7                = MAP_SIZE_GAIN1;
	rYnrFd.MAP2.rsv8                = MAP_GENDER_BAL_EN;
	rYnrFd.MAP2.rsv9                = MAP_U_GAIN;
	rYnrFd.MAP2.rsv10               = rsv10;
	rYnrFd.MAP2.rsv11               = rsv11;
	rYnrFd.MAP2.rsv12               = rsv12;
	rYnrFd.MAP2.rsv13               = rsv13;
	rYnrFd.MAP2.rsv14               = rsv14;
	rYnrFd.MAP2.rsv15               = rsv15;
	rYnrFd.MAP2.rsv16               = rsv16;
	rYnrFd.MAP2.rsv17               = rsv17;
	rYnrFd.MAP2.rsv18               = rsv18;
	rYnrFd.MAP2.rsv19               = rsv19;
	rYnrFd.MAP2.rsv20               = rsv20;
	rYnrFd.MAP2.rsv21               = rsv21;
	rYnrFd.MAP2.rsv22               = rsv22;
	rYnrFd.MAP2.rsv23               = rsv23;
	rYnrFd.MAP2.rsv24               = rsv24;
	rYnrFd.MAP2.rsv25               = rsv25;
	rYnrFd.MAP2.rsv26               = rsv26;

    // logging
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_EN                  = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_EN,        rYnrFd.TBL.YNR_FD_TBL_EN,      rUpperYnrFd.TBL.YNR_FD_TBL_EN      );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_M_GAIN              = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_M_GAIN,    rYnrFd.TBL.YNR_FD_TBL_M_GAIN,  rUpperYnrFd.TBL.YNR_FD_TBL_M_GAIN  );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_F_GAIN              = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_F_GAIN,    rYnrFd.TBL.YNR_FD_TBL_F_GAIN,  rUpperYnrFd.TBL.YNR_FD_TBL_F_GAIN  );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_Y_GAIN              = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_Y_GAIN,    rYnrFd.TBL.YNR_FD_TBL_Y_GAIN,  rUpperYnrFd.TBL.YNR_FD_TBL_Y_GAIN  );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_U_GAIN              = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_U_GAIN,    rYnrFd.TBL.YNR_FD_TBL_U_GAIN,  rUpperYnrFd.TBL.YNR_FD_TBL_U_GAIN  );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_V_GAIN              = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_V_GAIN,    rYnrFd.TBL.YNR_FD_TBL_V_GAIN,  rUpperYnrFd.TBL.YNR_FD_TBL_V_GAIN  );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_Y_Range             = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_Y_Range,   rYnrFd.TBL.YNR_FD_TBL_Y_Range, rUpperYnrFd.TBL.YNR_FD_TBL_Y_Range );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_U_Range             = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_U_Range,   rYnrFd.TBL.YNR_FD_TBL_U_Range, rUpperYnrFd.TBL.YNR_FD_TBL_U_Range );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]TBL_V_Range             = %d, %d, %d", rLowerYnrFd.TBL.YNR_FD_TBL_V_Range,   rYnrFd.TBL.YNR_FD_TBL_V_Range, rUpperYnrFd.TBL.YNR_FD_TBL_V_Range );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_EN                  = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_EN,       rYnrFd.MAP1.YNR_FD_MAP_EN,     rUpperYnrFd.MAP1.YNR_FD_MAP_EN    );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_MAX_GAIN            = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN, rYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN, rUpperYnrFd.MAP1.YNR_FD_MAP_MAX_GAIN);
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_M_GAIN              = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_M_GAIN, rYnrFd.MAP1.YNR_FD_MAP_M_GAIN, rUpperYnrFd.MAP1.YNR_FD_MAP_M_GAIN );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_F_GAIN              = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_F_GAIN, rYnrFd.MAP1.YNR_FD_MAP_F_GAIN, rUpperYnrFd.MAP1.YNR_FD_MAP_F_GAIN );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_W_R                 = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_W_R,    rYnrFd.MAP1.YNR_FD_MAP_W_R,    rUpperYnrFd.MAP1.YNR_FD_MAP_W_R    );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_H_R                 = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_H_R,    rYnrFd.MAP1.YNR_FD_MAP_H_R,    rUpperYnrFd.MAP1.YNR_FD_MAP_H_R    );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_DOWN                = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_DOWN,   rYnrFd.MAP1.YNR_FD_MAP_DOWN,   rUpperYnrFd.MAP1.YNR_FD_MAP_DOWN   );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_Y_RANGE             = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_Y_RANGE,rYnrFd.MAP1.YNR_FD_MAP_Y_RANGE,  rUpperYnrFd.MAP1.YNR_FD_MAP_Y_RANGE);
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_U_RANGE             = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_U_RANGE,rYnrFd.MAP1.YNR_FD_MAP_U_RANGE,  rUpperYnrFd.MAP1.YNR_FD_MAP_U_RANGE);
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_V_RANGE             = %d, %d, %d", rLowerYnrFd.MAP1.YNR_FD_MAP_V_RANGE,rYnrFd.MAP1.YNR_FD_MAP_V_RANGE,  rUpperYnrFd.MAP1.YNR_FD_MAP_V_RANGE);
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_EYES_EN             = %d, %d, %d", rLowerYnrFd.MAP2.rsv1,              rYnrFd.MAP2.rsv1,                rUpperYnrFd.MAP2.rsv1              );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_EYES_SIZE_R         = %d, %d, %d", rLowerYnrFd.MAP2.rsv2,              rYnrFd.MAP2.rsv2,                rUpperYnrFd.MAP2.rsv2              );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_EYES_CV_TH0         = %d, %d, %d", rLowerYnrFd.MAP2.rsv3,              rYnrFd.MAP2.rsv3,                rUpperYnrFd.MAP2.rsv3              );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_EYES_CV_TH1         = %d, %d, %d", rLowerYnrFd.MAP2.rsv4,              rYnrFd.MAP2.rsv4,                rUpperYnrFd.MAP2.rsv4              );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_SIZE_TH0            = %d, %d, %d", rLowerYnrFd.MAP2.rsv5,              rYnrFd.MAP2.rsv5,                rUpperYnrFd.MAP2.rsv5              );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_SIZE_TH1            = %d, %d, %d", rLowerYnrFd.MAP2.rsv6,              rYnrFd.MAP2.rsv6,                rUpperYnrFd.MAP2.rsv6              );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_SIZE_GAIN1          = %d, %d, %d", rLowerYnrFd.MAP2.rsv7,              rYnrFd.MAP2.rsv7,                rUpperYnrFd.MAP2.rsv7              );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_GENDER_BAL_EN       = %d, %d, %d", rLowerYnrFd.MAP2.rsv8,              rYnrFd.MAP2.rsv8,                rUpperYnrFd.MAP2.rsv8              );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]MAP_U_GAIN              = %d, %d, %d", rLowerYnrFd.MAP2.rsv9,              rYnrFd.MAP2.rsv9,                rUpperYnrFd.MAP2.rsv9              );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv10                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv10,             rYnrFd.MAP2.rsv10,               rUpperYnrFd.MAP2.rsv10             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv11                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv11,             rYnrFd.MAP2.rsv11,               rUpperYnrFd.MAP2.rsv11             );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv12                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv12,             rYnrFd.MAP2.rsv12,               rUpperYnrFd.MAP2.rsv12             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv13                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv13,             rYnrFd.MAP2.rsv13,               rUpperYnrFd.MAP2.rsv13             );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv14                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv14,             rYnrFd.MAP2.rsv14,               rUpperYnrFd.MAP2.rsv14             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv15                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv15,             rYnrFd.MAP2.rsv15,               rUpperYnrFd.MAP2.rsv15             );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv16                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv16,             rYnrFd.MAP2.rsv16,               rUpperYnrFd.MAP2.rsv16             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv17                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv17,             rYnrFd.MAP2.rsv17,               rUpperYnrFd.MAP2.rsv17             );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv18                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv18,             rYnrFd.MAP2.rsv18,               rUpperYnrFd.MAP2.rsv18             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv19                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv19,             rYnrFd.MAP2.rsv19,               rUpperYnrFd.MAP2.rsv19             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv20                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv20,             rYnrFd.MAP2.rsv20,               rUpperYnrFd.MAP2.rsv20             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv21                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv21,             rYnrFd.MAP2.rsv21,               rUpperYnrFd.MAP2.rsv21            );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv22                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv22,             rYnrFd.MAP2.rsv22,               rUpperYnrFd.MAP2.rsv22             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv23                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv23,             rYnrFd.MAP2.rsv23,               rUpperYnrFd.MAP2.rsv23            );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv24                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv24,             rYnrFd.MAP2.rsv24,               rUpperYnrFd.MAP2.rsv24             );
	INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv25                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv25,             rYnrFd.MAP2.rsv25,               rUpperYnrFd.MAP2.rsv25             );
    INTER_LOG_IF(bSmoothYNRFDDebug, "[L,S,U]rsv26                   = %d, %d, %d", rLowerYnrFd.MAP2.rsv26,             rYnrFd.MAP2.rsv26,               rUpperYnrFd.MAP2.rsv26             );
}

MVOID FD_YNR_TBL(
               YNR_FD_Info_T const& rFdInfo,
               ISP_NVRAM_YNR_LUT_T& rSmoothANR_TBL,
               ISP_NVRAM_YNR_FD_T& rFD_YNR)
{
	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FD_ANR_TBL.enable", value, "0");
    MBOOL bFDANRDebug = atoi(value);

	MINT32 u4FaceNum = rFdInfo.FaceNum;
	MINT32 u4precision = 1;

	INTER_LOG_IF(bFDANRDebug,"[%s()] u4FaceNum: %d\n", __FUNCTION__, u4FaceNum);

	if(u4FaceNum == 0)
	{return;}

    for(int i = 0; i < u4FaceNum; i++)
	{
	INTER_LOG_IF(bFDANRDebug,"[%s()] faceIdx : %d, Ymean: %d, Umean: %d, Vmean: %d, Y5: %d, Y95: %d, Gender: %d\n", __FUNCTION__, i, rFdInfo.YUVsts[i][0], rFdInfo.YUVsts[i][1], rFdInfo.YUVsts[i][2], rFdInfo.YUVsts[i][3], rFdInfo.YUVsts[i][4], rFdInfo.fld_GenderLabel[i] );
	}

	ANRTbl8x8x8_T ANR8x8x8;
	ANRTblTuning_T ANR_Tuning[3];

	INTER_LOG_IF(bFDANRDebug,"[%s()] rFD_YNR: YNR_FD_TBL_EN: %d, Y_Range: %d, U_Range: %d, V_Range: %d, Y_GAIN: %d, U_GAIN: %d, V_GAIN: %d\n",
		                        __FUNCTION__, rFD_YNR.TBL.YNR_FD_TBL_EN,
		                                      rFD_YNR.TBL.YNR_FD_TBL_Y_Range, rFD_YNR.TBL.YNR_FD_TBL_U_Range, rFD_YNR.TBL.YNR_FD_TBL_V_Range,
		                                      rFD_YNR.TBL.YNR_FD_TBL_Y_GAIN, rFD_YNR.TBL.YNR_FD_TBL_U_GAIN, rFD_YNR.TBL.YNR_FD_TBL_V_GAIN);
	INTER_LOG_IF(bFDANRDebug,"[%s()] rFD_YNR:  M_GAIN: %d, F_GAIN: %d\n",
		                        __FUNCTION__, rFD_YNR.TBL.YNR_FD_TBL_M_GAIN, rFD_YNR.TBL.YNR_FD_TBL_F_GAIN);

	if(rFD_YNR.TBL.YNR_FD_TBL_EN== 0)
	{return;}

	//Gain for diffrent Gender
	if(rFdInfo.fld_GenderLabel[0] == 1) //Male
	{
		rFD_YNR.TBL.YNR_FD_TBL_Y_GAIN = rFD_YNR.TBL.YNR_FD_TBL_Y_GAIN * rFD_YNR.TBL.YNR_FD_TBL_M_GAIN / 10;
	}
	else if(rFdInfo.fld_GenderLabel[0] == 2) //Female
	{
		rFD_YNR.TBL.YNR_FD_TBL_Y_GAIN = rFD_YNR.TBL.YNR_FD_TBL_Y_GAIN * rFD_YNR.TBL.YNR_FD_TBL_F_GAIN / 10;
	}

	u4FaceNum = 1;

    ANRTuningGen(rFdInfo, rFD_YNR, ANR_Tuning);
	ANRTBL_YUV8x8x8(rSmoothANR_TBL, ANR8x8x8);
	ANRTablePBC(u4FaceNum, u4precision, ANR_Tuning, ANR8x8x8);
	YUV8x8x8_ANRTBL(ANR8x8x8, rSmoothANR_TBL);
}



MVOID YNR_ALPHA_MAP(
               YNR_FD_Info_T const& rFdInfo,
               const RAWIspCamInfo& rIspCamInfo,
               ISP_NVRAM_YNR_FD_T& rFD_YNR,
               NSCam::IImageBuffer* alphamap, //in & out
               ISP_NVRAM_YNR_SKIN_T& rynr_skin) // out
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.FaceAlphamap.enable", value, "0");
    MBOOL bFaceMapDebug = atoi(value);
	property_get("vendor.debug.bEyeMapDebug.enable", value, "1");
    MBOOL bEyeMapDebug = atoi(value);

    int MapWidth;
	int MapHeight;
	MINT32 rrz_in_w = rIspCamInfo.rCropRzInfo.sRRZin.w;
	MINT32 rrz_in_h = rIspCamInfo.rCropRzInfo.sRRZin.h;
	MINT32 rrz_out_w = rIspCamInfo.rCropRzInfo.sRRZout.w;
	MINT32 rrz_out_h = rIspCamInfo.rCropRzInfo.sRRZout.h;
	MINT32 rrz_crop_w = rIspCamInfo.rCropRzInfo.rRRZcrop.s.w;
	MINT32 rrz_crop_h = rIspCamInfo.rCropRzInfo.rRRZcrop.s.h;
	MINT32 rrz_crop_x = rIspCamInfo.rCropRzInfo.rRRZcrop.p.x;
	MINT32 rrz_crop_y = rIspCamInfo.rCropRzInfo.rRRZcrop.p.y;

	INTER_LOG_IF(bFaceMapDebug,"[%s()] rrz_in_w: %d, rrz_in_h = %d, rrz_out_w = %d, rrz_out_h = %d\n", __FUNCTION__, rrz_in_w, rrz_in_h, rrz_out_w, rrz_out_h);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] rrz_crop_w: %d, rrz_crop_h = %d, rrz_crop_x = %d, rrz_crop_y = %d\n", __FUNCTION__, rrz_crop_w, rrz_crop_h, rrz_crop_x, rrz_crop_y);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] MAP_MAX_GAIN: %d, MAP_F_GAIN = %d, MAP_M_GAIN = %d\n", __FUNCTION__, rFD_YNR.MAP1.YNR_FD_MAP_MAX_GAIN, rFD_YNR.MAP1.YNR_FD_MAP_F_GAIN, rFD_YNR.MAP1.YNR_FD_MAP_M_GAIN);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] MAP_W_R: %d, MAP_H_R = %d, MAP_DOWN = %d\n", __FUNCTION__, rFD_YNR.MAP1.YNR_FD_MAP_W_R, rFD_YNR.MAP1.YNR_FD_MAP_H_R, rFD_YNR.MAP1.YNR_FD_MAP_DOWN);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] MAP_Y_RANGE: %d, MAP_U_RANGE = %d, MAP_V_RANGE = %d\n", __FUNCTION__, rFD_YNR.MAP1.YNR_FD_MAP_Y_RANGE, rFD_YNR.MAP1.YNR_FD_MAP_U_RANGE, rFD_YNR.MAP1.YNR_FD_MAP_V_RANGE);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] MAP_EYES_EN: %d, EYES_SIZE_R = %d, EYES_CV_TH0 = %d, EYES_CV_TH1 = %d\n", __FUNCTION__, rFD_YNR.MAP2.rsv1, rFD_YNR.MAP2.rsv2, rFD_YNR.MAP2.rsv3, rFD_YNR.MAP2.rsv4);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] MAP_SIZE_TH0: %d, MAP_SIZE_TH1 = %d, MAP_SIZE_GAIN1 = %d\n", __FUNCTION__, rFD_YNR.MAP2.rsv5, rFD_YNR.MAP2.rsv6, rFD_YNR.MAP2.rsv7);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] GENDER_BAL_EN: %d, MAP_U_GAIN = %d\n", __FUNCTION__, rFD_YNR.MAP2.rsv8, rFD_YNR.MAP2.rsv9);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] FaceNum: %d, GenderNum = %d, LandmarkNum = %d\n", __FUNCTION__, rFdInfo.FaceNum, rFdInfo.GenderNum, rFdInfo.LandmarkNum);
	for(int i = 0; i < rFdInfo.FaceNum; i++)
	{
	INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, Ymean: %d, Umean: %d, Vmean: %d, Y5: %d, Gender: %d\n", __FUNCTION__, i, rFdInfo.YUVsts[i][0], rFdInfo.YUVsts[i][1], rFdInfo.YUVsts[i][2], rFdInfo.YUVsts[i][3], rFdInfo.fld_GenderLabel[i]);
	INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, Rec_x0: %d, Rec_y0: %d, Rec_x1: %d, Rec_y1: %d, rip: %d\n", __FUNCTION__, i, rFdInfo.rect[i][0], rFdInfo.rect[i][1], rFdInfo.rect[i][2], rFdInfo.rect[i][3], rFdInfo.fld_rip[i]);
	    if (i < rFdInfo.LandmarkNum)
		{
			INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, Leye_x0: %d, Leye_y0: %d, Leye_x1: %d, Leye_y1: %d\n", __FUNCTION__, i, rFdInfo.Face_Leye[i][0], rFdInfo.Face_Leye[i][1], rFdInfo.Face_Leye[i][2], rFdInfo.Face_Leye[i][3]);
		    INTER_LOG_IF(bFaceMapDebug,"[%s()] faceIdx : %d, Reye_x0: %d, Reye_y0: %d, Reye_x1: %d, Reye_y1: %d\n", __FUNCTION__, i, rFdInfo.Face_Reye[i][0], rFdInfo.Face_Reye[i][1], rFdInfo.Face_Reye[i][2], rFdInfo.Face_Reye[i][3]);
		}
	}

	if (rrz_in_h >= rrz_in_w)
	{
		MapHeight = 320;
		MapWidth = 320*rrz_in_w/rrz_in_h;
	}
	else
	{
		MapWidth = 320;
		MapHeight = 320*rrz_in_h/rrz_in_w;
	}


    if (alphamap == NULL || MapWidth == 0 || MapHeight == 0)
    {
        INTER_LOG_IF(bFaceMapDebug,"[%s()] MapWidth: %d, MapHeight = %d\n", __FUNCTION__, MapWidth, MapHeight);
		return;
    }

    //unsigned char *p_face_map = alphamap;
    const int map_width = MapWidth;
    const int map_height = MapHeight;

	INTER_LOG_IF(bFaceMapDebug,"[%s()] map_width: %d, map_height = %d\n", __FUNCTION__, map_width, map_height);

	char *p_face_map = (char *) alphamap->getBufVA(0);

    if (rrz_in_w == 0 || rrz_in_h == 0 ||
        rrz_out_w == 0 || rrz_out_h == 0 ||
        rrz_crop_w == 0 || rrz_crop_h == 0)
    {
        memset(p_face_map, 0, map_width * map_height * sizeof(unsigned char));
        return;
    }

    // Reset all output
    memset(p_face_map, 0, map_width * map_height * sizeof(unsigned char));

    rynr_skin.skin_con.bits.YNR_SKIN_GAIN_LO = 16;
    rynr_skin.skin_con.bits.YNR_SKIN_GAIN_HI = 16;

    rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THH = 255;
    rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THL = 255;
    rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THSL = 255;
    rynr_skin.skin1_u.bits.YNR_SKIN1_U_THH = 255;
    rynr_skin.skin1_u.bits.YNR_SKIN1_U_THL = 255;
    rynr_skin.skin1_u.bits.YNR_SKIN1_U_THSL = 255;
    rynr_skin.skin1_v.bits.YNR_SKIN1_V_THH = 255;
    rynr_skin.skin1_v.bits.YNR_SKIN1_V_THL = 255;
    rynr_skin.skin1_v.bits.YNR_SKIN1_V_THSL = 255;
    rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THH = 255;
    rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THL = 255;
    rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THSL = 255;
    rynr_skin.skin2_u.bits.YNR_SKIN2_U_THH = 255;
    rynr_skin.skin2_u.bits.YNR_SKIN2_U_THL = 255;
    rynr_skin.skin2_u.bits.YNR_SKIN2_U_THSL = 255;
    rynr_skin.skin2_v.bits.YNR_SKIN2_V_THH = 255;
    rynr_skin.skin2_v.bits.YNR_SKIN2_V_THL = 255;
    rynr_skin.skin2_v.bits.YNR_SKIN2_V_THSL = 255;
    rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THH = 255;
    rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THL = 255;
    rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THSL = 255;
    rynr_skin.skin3_u.bits.YNR_SKIN3_U_THH = 255;
    rynr_skin.skin3_u.bits.YNR_SKIN3_U_THL = 255;
    rynr_skin.skin3_u.bits.YNR_SKIN3_U_THSL = 255;
    rynr_skin.skin3_v.bits.YNR_SKIN3_V_THL = 255;
    rynr_skin.skin3_v.bits.YNR_SKIN3_V_THH = 255;
    rynr_skin.skin3_v.bits.YNR_SKIN3_V_THSL = 255;

    // Return if no face
    if (rFdInfo.FaceNum == 0 || 16 == rFD_YNR.MAP1.YNR_FD_MAP_MAX_GAIN)
    {
        return;
    }

    const int in_width = rrz_out_w;
    const int in_height = rrz_out_h;

    int face_max_anchor, face_m_value, face_f_value, face_u_value;
    if (rFD_YNR.MAP1.YNR_FD_MAP_M_GAIN > 16 || rFD_YNR.MAP1.YNR_FD_MAP_F_GAIN > 16)
    {
        int face_m_nr_str, face_f_nr_str, face_u_nr_str;
        face_max_anchor = CLIP(rFD_YNR.MAP1.YNR_FD_MAP_MAX_GAIN, 16, 255);
        face_m_nr_str = CLIP(rFD_YNR.MAP1.YNR_FD_MAP_M_GAIN, 16, 255);
        face_f_nr_str = CLIP(rFD_YNR.MAP1.YNR_FD_MAP_F_GAIN, 16, 255);
        face_u_nr_str = CLIP(rFD_YNR.MAP2.rsv9, MIN(face_m_nr_str, face_f_nr_str), MAX(face_m_nr_str, face_f_nr_str));
        face_m_value = (face_max_anchor > 16) ? (int)(256.f * (face_m_nr_str - 16) / (face_max_anchor - 16) + 0.5f) : 255;
        face_f_value = (face_max_anchor > 16) ? (int)(256.f * (face_f_nr_str - 16) / (face_max_anchor - 16) + 0.5f) : 255;
        face_u_value = (face_max_anchor > 16) ? (int)(256.f * (face_u_nr_str - 16) / (face_max_anchor - 16) + 0.5f) : 255;
    }
    else
    {
        int face_m_nr_str, face_f_nr_str, face_u_nr_str;
        face_max_anchor = 0;
        face_m_nr_str = rFD_YNR.MAP1.YNR_FD_MAP_M_GAIN;
        face_f_nr_str = rFD_YNR.MAP1.YNR_FD_MAP_F_GAIN;
        face_u_nr_str = CLIP(rFD_YNR.MAP2.rsv9, MIN(face_m_nr_str, face_f_nr_str), MAX(face_m_nr_str, face_f_nr_str));
        face_m_value = (int)(256.f * (face_m_nr_str - 16) / (face_max_anchor - 16) + 0.5f);
        face_f_value = (int)(256.f * (face_f_nr_str - 16) / (face_max_anchor - 16) + 0.5f);
        face_u_value = (int)(256.f * (face_u_nr_str - 16) / (face_max_anchor - 16) + 0.5f);
    }

	INTER_LOG_IF(bFaceMapDebug,"[%s()] face_m_value: %d, face_f_value = %d, face_u_value = %d\n", __FUNCTION__, face_m_value, face_f_value, face_u_value);

    face_m_value = CLIP(face_m_value, 0, 255);
    face_f_value = CLIP(face_f_value, 0, 255);

    // Set both gender strength to unknown when max gender detection is less than face number
    if (rFD_YNR.MAP2.rsv8 && rFdInfo.FaceNum > rFdInfo.GenderNum)
    {
        face_m_value = face_u_value;
        face_f_value = face_u_value;
    }

    rynr_skin.skin_con.bits.YNR_SKIN_GAIN_LO = 16;
    rynr_skin.skin_con.bits.YNR_SKIN_GAIN_HI = face_max_anchor;

    for (int face_idx = 0; face_idx < rFdInfo.FaceNum; face_idx++)
    {
        // Get moving face direction by capture orientation
        int face_ratio_w = 16;
		int face_ratio_h = 16;
		int face_ratio_shift_x = 0;
		int face_ratio_shift_y = 0;
        if (11 == rFdInfo.fld_rip[face_idx] || 0 == rFdInfo.fld_rip[face_idx] || 1 == rFdInfo.fld_rip[face_idx])
        {
            face_ratio_w = rFD_YNR.MAP1.YNR_FD_MAP_W_R;
            face_ratio_h = rFD_YNR.MAP1.YNR_FD_MAP_H_R;
            face_ratio_shift_x = 0;
            face_ratio_shift_y = rFD_YNR.MAP1.YNR_FD_MAP_DOWN;
        }
        else if (2 == rFdInfo.fld_rip[face_idx] || 3 == rFdInfo.fld_rip[face_idx] || 4 == rFdInfo.fld_rip[face_idx])
        {
            face_ratio_w = rFD_YNR.MAP1.YNR_FD_MAP_H_R;
            face_ratio_h = rFD_YNR.MAP1.YNR_FD_MAP_W_R;
            face_ratio_shift_x = -rFD_YNR.MAP1.YNR_FD_MAP_DOWN;
            face_ratio_shift_y = 0;
        }
        else if (5 == rFdInfo.fld_rip[face_idx] || 6 == rFdInfo.fld_rip[face_idx] || 7 == rFdInfo.fld_rip[face_idx])
        {
            face_ratio_w = rFD_YNR.MAP1.YNR_FD_MAP_W_R;
            face_ratio_h = rFD_YNR.MAP1.YNR_FD_MAP_H_R;
            face_ratio_shift_x = 0;
            face_ratio_shift_y = -rFD_YNR.MAP1.YNR_FD_MAP_DOWN;
        }
        else if (8 == rFdInfo.fld_rip[face_idx] || 9 == rFdInfo.fld_rip[face_idx] || 10 == rFdInfo.fld_rip[face_idx])
        {
            face_ratio_w = rFD_YNR.MAP1.YNR_FD_MAP_H_R;
            face_ratio_h = rFD_YNR.MAP1.YNR_FD_MAP_W_R;
            face_ratio_shift_x = rFD_YNR.MAP1.YNR_FD_MAP_DOWN;
            face_ratio_shift_y = 0;
        }

        FaceRect rect;
		rect.x = rFdInfo.rect[face_idx][0];
		rect.y = rFdInfo.rect[face_idx][1];
		rect.w = MAX(rFdInfo.rect[face_idx][2] - rFdInfo.rect[face_idx][0], 0);
		rect.h = MAX(rFdInfo.rect[face_idx][3] - rFdInfo.rect[face_idx][1], 0);

        int rect_size = (int)(sqrtf((float)(rect.w * rect.h)) + 0.5f);
        int face_size_gain0 = 16;
        int face_size_gain1 = rFD_YNR.MAP2.rsv7;
        int face_size_gain = face_size_gain0;
        int face_size_th0 = MAX(rFD_YNR.MAP2.rsv5, 1);
        int face_size_th1 = CLIP(rFD_YNR.MAP2.rsv6, 0, face_size_th0 - 1);

        if (rect_size < face_size_th1)
        {
            face_size_gain = face_size_gain1;
        }
        else if (rect_size < face_size_th0)
        {
            face_size_gain = (face_size_gain0 * (rect_size - face_size_th1) + face_size_gain1 * (face_size_th0 - rect_size)) / (face_size_th0 - face_size_th1);
        }
        else
        {
            face_size_gain = face_size_gain0;
        }

        int rect_x0 = rect.x;
        int rect_x1 = rect.x + rect.w;
        int rect_y0 = rect.y;
        int rect_y1 = rect.y + rect.h;
        rect_x0 = (int)((float)(rect_x0 - rrz_crop_x) * map_width / rrz_crop_w + 0.5f);
        rect_x1 = (int)((float)(rect_x1 - rrz_crop_x) * map_width / rrz_crop_w + 0.5f);
        rect_y0 = (int)((float)(rect_y0 - rrz_crop_y) * map_height / rrz_crop_h + 0.5f);
        rect_y1 = (int)((float)(rect_y1 - rrz_crop_y) * map_height / rrz_crop_h + 0.5f);

		INTER_LOG_IF(bFaceMapDebug,"[%s()] rect_x0: %d, rect_x1: %d, rect_y0 = %d, rect_y1 = %d\n", __FUNCTION__, rect_x0, rect_x1, rect_y0, rect_y1);

        if (rect_x0 >= rect_x1 || rect_y0 >= rect_y1)
            continue;

        int gender = rFdInfo.fld_GenderLabel[face_idx];
        int face_value = 0;
        if (1 == gender)
        {
            face_value = face_m_value;
        }
        else if (2 == gender)
        {
            face_value = face_f_value;
        }
        else
        {
            face_value = face_u_value;
        }

        face_value = face_value * face_size_gain / 16;

        int rect_cx = (rect_x0 + rect_x1 + 1) >> 1;
        int rect_cy = (rect_y0 + rect_y1 + 1) >> 1;
        int rect_rx = rect_cx - rect_x0;
        int rect_ry = rect_cy - rect_y0;

        rect_cx = CLIP(rect_cx + rect_rx * face_ratio_shift_x / 16, rect_x0, rect_x1);
        rect_cy = CLIP(rect_cy + rect_ry * face_ratio_shift_y / 16, rect_y0, rect_y1);

        rect_rx = rect_rx * face_ratio_w / 16;
        rect_ry = rect_ry * face_ratio_h / 16;

        int rect_rx2 = rect_rx * rect_rx;
        int rect_ry2 = rect_ry * rect_ry;
        long long rect_th = 2 * rect_rx2 * ((long long)rect_ry2);

		INTER_LOG_IF(bFaceMapDebug,"[%s()] face_idx: %d, rect_rx2: %d, rect_ry2 = %d, rect_th = %lld\n", __FUNCTION__, face_idx, rect_rx2, rect_ry2, rect_th);

        if (rect_th <= 0)
            continue;

        int cv_th0 = CLIP(rFD_YNR.MAP2.rsv3, 0, 99);
        int cv_th1 = CLIP(rFD_YNR.MAP2.rsv4, cv_th0 + 1, 100);
        int face_cv = rFdInfo.Landmark_CV[face_idx];
        int eye_protect_str = 256;
        if (face_cv < cv_th0)
        {
            eye_protect_str = 0;
        }
        else if (face_cv < cv_th1)
        {
            eye_protect_str = 256 * (rFdInfo.Landmark_CV[face_idx] - cv_th0) / (cv_th1 - cv_th0);
        }

        int eyes_en = rFD_YNR.MAP2.rsv1;
        float eye_l_x0 = (float)(rFdInfo.Face_Leye[face_idx][0] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_l_y0 = (float)(rFdInfo.Face_Leye[face_idx][1] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_l_x1 = (float)(rFdInfo.Face_Leye[face_idx][2] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_l_y1 = (float)(rFdInfo.Face_Leye[face_idx][3] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_r_x0 = (float)(rFdInfo.Face_Reye[face_idx][0] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_r_y0 = (float)(rFdInfo.Face_Reye[face_idx][1] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_r_x1 = (float)(rFdInfo.Face_Reye[face_idx][2] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_r_y1 = (float)(rFdInfo.Face_Reye[face_idx][3] - rrz_crop_x) * map_width / rrz_crop_w;
        float eye_l_cx = (eye_l_x0 + eye_l_x1) * 0.5f;
        float eye_l_cy = (eye_l_y0 + eye_l_y1) * 0.5f;
        float eye_r_cx = (eye_r_x0 + eye_r_x1) * 0.5f;
        float eye_r_cy = (eye_r_y0 + eye_r_y1) * 0.5f;
        float eye_l_r2 = sqrtf((eye_l_cx - eye_l_x0) * (eye_l_cx - eye_l_x0) + (eye_l_cy - eye_l_y0) * (eye_l_cy - eye_l_y0));
        float eye_r_r2 = sqrtf((eye_r_cx - eye_r_x0) * (eye_r_cx - eye_r_x0) + (eye_r_cy - eye_r_y0) * (eye_r_cy - eye_r_y0));
        eye_l_r2 = eye_l_r2 * (1.f + rFD_YNR.MAP2.rsv2 / 16.f);
        eye_r_r2 = eye_r_r2 * (1.f + rFD_YNR.MAP2.rsv2 / 16.f);

		INTER_LOG_IF(bFaceMapDebug,"[%s()] face_idx: %d, eye_l_x0: %f, eye_l_y0 = %f, eye_l_x1 = %f, eye_l_y1 = %f\n", __FUNCTION__, face_idx, eye_l_x0, eye_l_y0, eye_l_x1, eye_l_y1);
        INTER_LOG_IF(bFaceMapDebug,"[%s()] face_idx: %d, eye_r_x0: %f, eye_r_y0 = %f, eye_r_x1 = %f, eye_r_y1 = %f\n", __FUNCTION__, face_idx, eye_r_x0, eye_r_y0, eye_r_x1, eye_r_y1);

		int fathor_size = 2;
        int fathor_step = (face_value + fathor_size / 2) / fathor_size;
        int eye_fathor_step = fathor_step;
        char *p_face_scan = p_face_map;
        for (int i = 0; i < map_height; i++)
        {
            for (int j = 0; j < map_width; j++)
            {
                int dy = (i - rect_cy);
                int dx = (j - rect_cx);

                long long dist = ((long long)rect_ry2)*dx*dx + ((long long)rect_rx2)*dy*dy;

                long long prob = 0;
                if (dist < rect_th)
                {
                    prob = face_value;
                }
                else
                {
                    prob = CLIP(face_value - (dist - rect_th) * fathor_step / rect_th, 0, 255);
                }

                eyes_en = bEyeMapDebug;
				if ((face_idx < rFdInfo.LandmarkNum) && eyes_en && (prob > 0) && (eye_protect_str > 0))
                {
                    int new_prob = prob;
                    int dy_eye_l = (i - eye_l_cy);
                    int dx_eye_l = (j - eye_l_cx);
                    float dis_eye_l = sqrtf(dy_eye_l * dy_eye_l + dx_eye_l * dx_eye_l);

                    if (dis_eye_l <= eye_l_r2)
                    {
                        int prob_eye = (int)((eye_l_r2 - dis_eye_l) * eye_fathor_step + 0.5f);
                        new_prob = MAX(new_prob - prob_eye, 0);
                    }

                    int dy_eye_r = (i - eye_r_cy);
                    int dx_eye_r = (j - eye_r_cx);
                    float dis_eye_r = sqrtf(dy_eye_r * dy_eye_r + dx_eye_r * dx_eye_r);

                    if (dis_eye_r <= eye_r_r2)
                    {
                        int prob_eye = (int)((eye_r_r2 - dis_eye_r) * eye_fathor_step + 0.5f);
                        new_prob = MAX(new_prob - prob_eye, 0);
                    }

                    prob = (new_prob * eye_protect_str + prob * (256 - eye_protect_str) + 128) >> 8;
                }
				p_face_scan[j] = (char)MAX(prob, p_face_scan[j]);
            }
            p_face_scan += map_width;
        }

        if (face_idx < 3)
        {
            int face_y = rFdInfo.YUVsts[face_idx][0];
            int face_u = rFdInfo.YUVsts[face_idx][1];
            int face_v = rFdInfo.YUVsts[face_idx][2];

            int color_range_y = rFD_YNR.MAP1.YNR_FD_MAP_Y_RANGE;
            const int color_range_u = rFD_YNR.MAP1.YNR_FD_MAP_U_RANGE;
            const int color_range_v = rFD_YNR.MAP1.YNR_FD_MAP_V_RANGE;
            int color_range_y_stats = 8 * (rFdInfo.YUVsts[face_idx][0] - rFdInfo.YUVsts[face_idx][3]) / 10;
            color_range_y = MAX(color_range_y_stats, color_range_y);

            int y_thh = face_y + (color_range_y / 2);
            int y_thl = face_y - (color_range_y / 2);
            int y_thsl = (color_range_y > 0) ? (int)((float)256 * 64 / color_range_y + 0.5f) : 64;
            y_thsl = CLIP(y_thsl, 0, 128);
			y_thh = CLIP(y_thh, 0, 255);
			y_thl = CLIP(y_thl, 0, 255);

            int u_thh = face_u + (color_range_u / 2);
            int u_thl = face_u - (color_range_u / 2);
            int u_thsl = (color_range_u > 0) ? (int)((float)256 * 64 / color_range_u + 0.5f) : 64;
            u_thsl = CLIP(u_thsl, 0, 128);
			u_thh = CLIP(u_thh, 0, 255);
			u_thl = CLIP(u_thl, 0, 255);

            int v_thh = face_v + (color_range_v / 2);
            int v_thl = face_v - (color_range_v / 2);
            int v_thsl = (color_range_v > 0) ? (int)((float)256 * 64 / color_range_v + 0.5f) : 64;
            v_thsl = CLIP(v_thsl, 0, 128);
			v_thh = CLIP(v_thh, 0, 255);
			v_thl = CLIP(v_thl, 0, 255);

            if (0 == face_idx)
            {
                rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THH = y_thh;
                rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THL = y_thl;
                rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THSL = y_thsl;
                rynr_skin.skin1_u.bits.YNR_SKIN1_U_THH = u_thh;
                rynr_skin.skin1_u.bits.YNR_SKIN1_U_THL = u_thl;
                rynr_skin.skin1_u.bits.YNR_SKIN1_U_THSL = u_thsl;
                rynr_skin.skin1_v.bits.YNR_SKIN1_V_THH = v_thh;
                rynr_skin.skin1_v.bits.YNR_SKIN1_V_THL = v_thl;
                rynr_skin.skin1_v.bits.YNR_SKIN1_V_THSL = v_thsl;
            }
            else if (1 == face_idx)
            {
                rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THH = y_thh;
                rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THL = y_thl;
                rynr_skin.skin2_y.bits.YNR_SKIN2_Y_THSL = y_thsl;
                rynr_skin.skin2_u.bits.YNR_SKIN2_U_THH = u_thh;
                rynr_skin.skin2_u.bits.YNR_SKIN2_U_THL = u_thl;
                rynr_skin.skin2_u.bits.YNR_SKIN2_U_THSL = u_thsl;
                rynr_skin.skin2_v.bits.YNR_SKIN2_V_THH = v_thh;
                rynr_skin.skin2_v.bits.YNR_SKIN2_V_THL = v_thl;
                rynr_skin.skin2_v.bits.YNR_SKIN2_V_THSL = v_thsl;
            }
            else if (2 == face_idx)
            {
                rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THH = y_thh;
                rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THL = y_thl;
                rynr_skin.skin3_y.bits.YNR_SKIN3_Y_THSL = y_thsl;
                rynr_skin.skin3_u.bits.YNR_SKIN3_U_THH = u_thh;
                rynr_skin.skin3_u.bits.YNR_SKIN3_U_THL = u_thl;
                rynr_skin.skin3_u.bits.YNR_SKIN3_U_THSL = u_thsl;
                rynr_skin.skin3_v.bits.YNR_SKIN3_V_THH = v_thh;
                rynr_skin.skin3_v.bits.YNR_SKIN3_V_THL = v_thl;
                rynr_skin.skin3_v.bits.YNR_SKIN3_V_THSL = v_thsl;
            }
        }
    }
	/*
                   rynr_skin.skin_con.bits.YNR_SKIN_GAIN_LO                    = 16;
                   rynr_skin.skin_con.bits.YNR_SKIN_GAIN_HI                    = 64;
                   rynr_skin.skin_con.bits.YNR_SKIN_LINK                       = 1;
                   rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THL                     = 0;
                   rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THH                     = 255;
                   rynr_skin.skin1_y.bits.YNR_SKIN1_Y_THSL                    = 128;
                   rynr_skin.skin1_u.bits.YNR_SKIN1_U_THL                     = 0;
                   rynr_skin.skin1_u.bits.YNR_SKIN1_U_THH                     = 255;
                   rynr_skin.skin1_u.bits.YNR_SKIN1_U_THSL                    = 128;
                   rynr_skin.skin1_v.bits.YNR_SKIN1_V_THL                     = 0;
                   rynr_skin.skin1_v.bits.YNR_SKIN1_V_THH                     = 255;
                   rynr_skin.skin1_v.bits.YNR_SKIN1_V_THSL                    = 128;
                   */
}

MVOID FaceYNR(const RAWIspCamInfo& rIspCamInfo,
                 MUINT32 FD_GGM_END_VAR,
                 ISP_NVRAM_GGM_T* GGM_D1, MUINT32 GGM_D1_END_VAR, //input
                 ISP_NVRAM_YNR_FD_T& rSmoothFD_YNR, //SW param input
                 ISP_NVRAM_YNR_SKIN_T& rYNR_SKIN, //output
                 ISP_NVRAM_YNR_LUT_T& rSmoothANR_TBL, //input & output
                 NSCam::IImageBuffer* AlphaMap_Out) //output
{

// FD: rIspCamInfo.rFdInfo
// FD GGM: rIspCamInfo.rFdInfo

    YNR_FD_Info_T FD_Info_local;

	for (int i = 0; i < 15; i++)
	{
		for (int j = 0; j < 5; j++)
		{
			FD_Info_local.YUVsts[i][j] = rIspCamInfo.rFdInfo.YUVsts[i][j];
			if (j < 4){
				FD_Info_local.rect[i][j] = rIspCamInfo.rFdInfo.rect[i][j];
				FD_Info_local.Face_Leye[i][j] = rIspCamInfo.rFdInfo.Face_Leye[i][j];
	            FD_Info_local.Face_Reye[i][j] = rIspCamInfo.rFdInfo.Face_Reye[i][j];
			}
		}
		FD_Info_local.fld_GenderLabel[i] = rIspCamInfo.rFdInfo.fld_GenderLabel[i];
        FD_Info_local.fld_rip[i] = rIspCamInfo.rFdInfo.fld_rip[i];
		FD_Info_local.Landmark_CV[i] = rIspCamInfo.rFdInfo.Landmark_CV[i];
	}
	FD_Info_local.GenderNum = rIspCamInfo.rFdInfo.GenderNum;
	FD_Info_local.LandmarkNum = rIspCamInfo.rFdInfo.LandmarkNum;
	FD_Info_local.FaceNum = rIspCamInfo.rFdInfo.FaceNum;

	FD_GGM_Calculation (&(rIspCamInfo.rFdInfo.FaceGGM), FD_GGM_END_VAR, GGM_D1, GGM_D1_END_VAR, FD_Info_local);

	YNR_ALPHA_MAP(FD_Info_local, rIspCamInfo, rSmoothFD_YNR, AlphaMap_Out, rYNR_SKIN);

	FD_YNR_TBL(FD_Info_local, rSmoothANR_TBL, rSmoothFD_YNR);

}

MVOID SmoothAINR_SW(MUINT32 u4RealISO,  // Real ISO
                    MUINT32 u4UpperISO, // Upper ISO
                    MUINT32 u4LowerISO, // Lower ISO
                    FEATURE_NVRAM_AINR_T const& rUpperAINR_SW,   // AINR SW reg settings for upper ISO
                    FEATURE_NVRAM_AINR_T const& rLowerAINR_SW,   // AINR SW reg settings for lower ISO
                    FEATURE_NVRAM_AINR_T & rSmoothAINR_SW)
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ainr.enable", value, "0");
    MBOOL bSmoothAINR_Debug = atoi(value);

    INTER_LOG_IF(bSmoothAINR_Debug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_chi_R          = rLowerAINR_SW.chi_R;
    MINT32 pre_chi_GR         = rLowerAINR_SW.chi_GR;
    MINT32 pre_chi_GB         = rLowerAINR_SW.chi_GB;
    MINT32 pre_chi_B          = rLowerAINR_SW.chi_B;
    MINT32 pre_std_R          = rLowerAINR_SW.std_R;
    MINT32 pre_std_GR         = rLowerAINR_SW.std_GR;
    MINT32 pre_std_GB         = rLowerAINR_SW.std_GB;
    MINT32 pre_std_B          = rLowerAINR_SW.std_B;
    MINT32 pre_AINR_blend_R   = rLowerAINR_SW.AINR_blend_R;
    MINT32 pre_AINR_blend_GR  = rLowerAINR_SW.AINR_blend_GR;
    MINT32 pre_AINR_blend_GB  = rLowerAINR_SW.AINR_blend_GB;
    MINT32 pre_AINR_blend_B   = rLowerAINR_SW.AINR_blend_B;
    MINT32 pre_MIX_blend_Y    = rLowerAINR_SW.MIX_blend_Y;
    MINT32 pre_MIX_blend_UV   = rLowerAINR_SW.MIX_blend_UV;
    MINT32 pre_Lambda         = rLowerAINR_SW.Lambda;
    MINT32 pre_rsv1           = rLowerAINR_SW.rsv1;
    MINT32 pre_rsv2           = rLowerAINR_SW.rsv2;
    MINT32 pre_rsv3           = rLowerAINR_SW.rsv3;
    MINT32 pre_rsv4           = rLowerAINR_SW.rsv4;
    MINT32 pre_rsv5           = rLowerAINR_SW.rsv5;
    MINT32 pre_rsv6           = rLowerAINR_SW.rsv6;
    MINT32 pre_rsv7           = rLowerAINR_SW.rsv7;
    MINT32 pos_chi_R          = rUpperAINR_SW.chi_R;
    MINT32 pos_chi_GR         = rUpperAINR_SW.chi_GR;
    MINT32 pos_chi_GB         = rUpperAINR_SW.chi_GB;
    MINT32 pos_chi_B          = rUpperAINR_SW.chi_B;
    MINT32 pos_std_R          = rUpperAINR_SW.std_R;
    MINT32 pos_std_GR         = rUpperAINR_SW.std_GR;
    MINT32 pos_std_GB         = rUpperAINR_SW.std_GB;
    MINT32 pos_std_B          = rUpperAINR_SW.std_B;
    MINT32 pos_AINR_blend_R   = rUpperAINR_SW.AINR_blend_R;
    MINT32 pos_AINR_blend_GR  = rUpperAINR_SW.AINR_blend_GR;
    MINT32 pos_AINR_blend_GB  = rUpperAINR_SW.AINR_blend_GB;
    MINT32 pos_AINR_blend_B   = rUpperAINR_SW.AINR_blend_B;
    MINT32 pos_MIX_blend_Y    = rUpperAINR_SW.MIX_blend_Y;
    MINT32 pos_MIX_blend_UV   = rUpperAINR_SW.MIX_blend_UV;
    MINT32 pos_Lambda         = rUpperAINR_SW.Lambda;
    MINT32 pos_rsv1           = rUpperAINR_SW.rsv1;
    MINT32 pos_rsv2           = rUpperAINR_SW.rsv2;
    MINT32 pos_rsv3           = rUpperAINR_SW.rsv3;
    MINT32 pos_rsv4           = rUpperAINR_SW.rsv4;
    MINT32 pos_rsv5           = rUpperAINR_SW.rsv5;
    MINT32 pos_rsv6           = rUpperAINR_SW.rsv6;
    MINT32 pos_rsv7           = rUpperAINR_SW.rsv7;

    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 chi_R          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_chi_R, pos_chi_R, 0);
    MINT32 chi_GR         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_chi_GR, pos_chi_GR, 0);
    MINT32 chi_GB         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_chi_GB, pos_chi_GB, 0);
    MINT32 chi_B          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_chi_B, pos_chi_B, 0);
    MINT32 std_R          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_std_R, pos_std_R, 0);
    MINT32 std_GR         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_std_GR, pos_std_GR, 0);
    MINT32 std_GB         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_std_GB, pos_std_GB, 0);
    MINT32 std_B          = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_std_B, pos_std_B, 0);
    MINT32 AINR_blend_R   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_AINR_blend_R, pos_AINR_blend_R, 0);
    MINT32 AINR_blend_GR  = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_AINR_blend_GR, pos_AINR_blend_GR, 0);
    MINT32 AINR_blend_GB  = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_AINR_blend_GB, pos_AINR_blend_GB, 0);
    MINT32 AINR_blend_B   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_AINR_blend_B, pos_AINR_blend_B, 0);
    MINT32 MIX_blend_Y    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_blend_Y, pos_MIX_blend_Y, 0);
    MINT32 MIX_blend_UV   = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_blend_UV, pos_MIX_blend_UV, 0);
    MINT32 Lambda         = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_Lambda, pos_Lambda, 0);
    MINT32 rsv1    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv1, pos_rsv1, 0);
    MINT32 rsv2    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv2, pos_rsv2, 0);
    MINT32 rsv3    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv3, pos_rsv3, 0);
    MINT32 rsv4    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv4, pos_rsv4, 0);
    MINT32 rsv5    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv5, pos_rsv5, 0);
    MINT32 rsv6    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv6, pos_rsv6, 0);
    MINT32 rsv7    = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_rsv7, pos_rsv7, 0);

    // interpolation result assignment
    rSmoothAINR_SW.chi_R          = chi_R;
    rSmoothAINR_SW.chi_GR         = chi_GR;
    rSmoothAINR_SW.chi_GB         = chi_GB;
    rSmoothAINR_SW.chi_B          = chi_B;
    rSmoothAINR_SW.std_R          = std_R;
    rSmoothAINR_SW.std_GR         = std_GR;
    rSmoothAINR_SW.std_GB         = std_GB;
    rSmoothAINR_SW.std_B          = std_B;
    rSmoothAINR_SW.AINR_blend_R   = AINR_blend_R;
    rSmoothAINR_SW.AINR_blend_GR  = AINR_blend_GR;
    rSmoothAINR_SW.AINR_blend_GB  = AINR_blend_GB;
    rSmoothAINR_SW.AINR_blend_B   = AINR_blend_B;
    rSmoothAINR_SW.MIX_blend_Y    = MIX_blend_Y;
    rSmoothAINR_SW.MIX_blend_UV   = MIX_blend_UV;
    rSmoothAINR_SW.Lambda         = Lambda;
    rSmoothAINR_SW.rsv1    = rsv1;
    rSmoothAINR_SW.rsv2    = rsv2;
    rSmoothAINR_SW.rsv3    = rsv3;
    rSmoothAINR_SW.rsv4    = rsv4;
    rSmoothAINR_SW.rsv5    = rsv5;
    rSmoothAINR_SW.rsv6    = rsv6;
    rSmoothAINR_SW.rsv7    = rsv7;

    // logging
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]chi_R     = %d, %d, %d", rLowerAINR_SW.chi_R, rSmoothAINR_SW.chi_R, rUpperAINR_SW.chi_R);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]chi_GR    = %d, %d, %d", rLowerAINR_SW.chi_GR, rSmoothAINR_SW.chi_GR, rUpperAINR_SW.chi_GR);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]chi_GB    = %d, %d, %d", rLowerAINR_SW.chi_GB, rSmoothAINR_SW.chi_GB, rUpperAINR_SW.chi_GB);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]chi_B     = %d, %d, %d", rLowerAINR_SW.chi_B, rSmoothAINR_SW.chi_B, rUpperAINR_SW.chi_B);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]std_R     = %d, %d, %d", rLowerAINR_SW.std_R, rSmoothAINR_SW.std_R, rUpperAINR_SW.std_R);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]std_GR    = %d, %d, %d", rLowerAINR_SW.std_GR, rSmoothAINR_SW.std_GR, rUpperAINR_SW.std_GR);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]std_GB    = %d, %d, %d", rLowerAINR_SW.std_GB, rSmoothAINR_SW.std_GB, rUpperAINR_SW.std_GB);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]std_B     = %d, %d, %d", rLowerAINR_SW.std_B, rSmoothAINR_SW.std_B, rUpperAINR_SW.std_B);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]AINR_blend_R     = %d, %d, %d", rLowerAINR_SW.AINR_blend_R, rSmoothAINR_SW.AINR_blend_R, rUpperAINR_SW.AINR_blend_R);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]AINR_blend_GR    = %d, %d, %d", rLowerAINR_SW.AINR_blend_GR, rSmoothAINR_SW.AINR_blend_GR, rUpperAINR_SW.AINR_blend_GR);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]AINR_blend_GB    = %d, %d, %d", rLowerAINR_SW.AINR_blend_GB, rSmoothAINR_SW.AINR_blend_GB, rUpperAINR_SW.AINR_blend_GB);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]AINR_blend_R     = %d, %d, %d", rLowerAINR_SW.AINR_blend_B, rSmoothAINR_SW.AINR_blend_B, rUpperAINR_SW.AINR_blend_B);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]MIX_blend_Y      = %d, %d, %d", rLowerAINR_SW.MIX_blend_Y, rSmoothAINR_SW.MIX_blend_Y, rUpperAINR_SW.MIX_blend_Y);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]MIX_blend_UV     = %d, %d, %d", rLowerAINR_SW.MIX_blend_UV, rSmoothAINR_SW.MIX_blend_UV, rUpperAINR_SW.MIX_blend_UV);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]Lambda    = %d, %d, %d", rLowerAINR_SW.Lambda, rSmoothAINR_SW.Lambda, rUpperAINR_SW.Lambda);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv1    = %d, %d, %d", rLowerAINR_SW.rsv1, rSmoothAINR_SW.rsv1, rUpperAINR_SW.rsv1);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv2    = %d, %d, %d", rLowerAINR_SW.rsv2, rSmoothAINR_SW.rsv2, rUpperAINR_SW.rsv2);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv3    = %d, %d, %d", rLowerAINR_SW.rsv3, rSmoothAINR_SW.rsv3, rUpperAINR_SW.rsv3);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv4    = %d, %d, %d", rLowerAINR_SW.rsv4, rSmoothAINR_SW.rsv4, rUpperAINR_SW.rsv4);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv5    = %d, %d, %d", rLowerAINR_SW.rsv5, rSmoothAINR_SW.rsv5, rUpperAINR_SW.rsv5);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv6    = %d, %d, %d", rLowerAINR_SW.rsv6, rSmoothAINR_SW.rsv6, rUpperAINR_SW.rsv6);
    INTER_LOG_IF(bSmoothAINR_Debug, "[L,S,U]rsv7    = %d, %d, %d", rLowerAINR_SW.rsv7, rSmoothAINR_SW.rsv7, rUpperAINR_SW.rsv7);

}



//************************************************************
// ISP HW interpolation
//************************************************************


MVOID Smooth_OBC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_OBC_T const& rUpperOBC,   // OBC settings for upper ISO
                ISP_NVRAM_OBC_T const& rLowerOBC,   // OBC settings for lower ISO
                ISP_NVRAM_OBC_T& rSmoothOBC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_obc.enable", value, "0");
    MBOOL bSmoothOBCDebug = atoi(value);

    INTER_LOG_IF(bSmoothOBCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_OBC_OFST_R       = rLowerOBC.offset_r.bits.OBC_OFST_R;
    MINT32 pre_OBC_OFST_GR       = rLowerOBC.offset_gr.bits.OBC_OFST_GR;
    MINT32 pre_OBC_OFST_GB       = rLowerOBC.offset_gb.bits.OBC_OFST_GB;
    MINT32 pre_OBC_OFST_B       = rLowerOBC.offset_b.bits.OBC_OFST_B;
    MINT32 pre_OBC_DBS_RATIO       = rLowerOBC.dbs.bits.OBC_DBS_RATIO;
    MINT32 pre_OBC_POSTTUNE_EN       = rLowerOBC.dbs.bits.OBC_POSTTUNE_EN;
    MINT32 pre_OBC_LUMA_MODE       = rLowerOBC.gray_bld_0.bits.OBC_LUMA_MODE;
    MINT32 pre_OBC_BLD_MXRT       = rLowerOBC.gray_bld_1.bits.OBC_BLD_MXRT;
    MINT32 pre_OBC_BLD_SLP       = rLowerOBC.gray_bld_1.bits.OBC_BLD_SLP;
    MINT32 pre_OBC_BLD_LOW       = rLowerOBC.gray_bld_1.bits.OBC_BLD_LOW;
    MINT32 pre_OBC_BIAS_R0       = rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R0;
    MINT32 pre_OBC_BIAS_R1       = rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R1;
    MINT32 pre_OBC_BIAS_R2       = rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R2;
    MINT32 pre_OBC_BIAS_R3       = rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R3;
    MINT32 pre_OBC_BIAS_R4       = rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R4;
    MINT32 pre_OBC_BIAS_R5       = rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R5;
    MINT32 pre_OBC_BIAS_R6       = rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R6;
    MINT32 pre_OBC_BIAS_R7       = rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R7;
    MINT32 pre_OBC_BIAS_R8       = rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R8;
    MINT32 pre_OBC_BIAS_R9       = rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R9;
    MINT32 pre_OBC_BIAS_R10       = rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R10;
    MINT32 pre_OBC_BIAS_R11       = rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R11;
    MINT32 pre_OBC_BIAS_R12       = rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R12;
    MINT32 pre_OBC_BIAS_R13       = rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R13;
    MINT32 pre_OBC_BIAS_R14       = rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R14;
    MINT32 pre_OBC_BIAS_G0       = rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G0;
    MINT32 pre_OBC_BIAS_G1       = rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G1;
    MINT32 pre_OBC_BIAS_G2       = rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G2;
    MINT32 pre_OBC_BIAS_G3       = rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G3;
    MINT32 pre_OBC_BIAS_G4       = rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G4;
    MINT32 pre_OBC_BIAS_G5       = rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G5;
    MINT32 pre_OBC_BIAS_G6       = rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G6;
    MINT32 pre_OBC_BIAS_G7       = rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G7;
    MINT32 pre_OBC_BIAS_G8       = rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G8;
    MINT32 pre_OBC_BIAS_G9       = rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G9;
    MINT32 pre_OBC_BIAS_G10       = rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G10;
    MINT32 pre_OBC_BIAS_G11       = rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G11;
    MINT32 pre_OBC_BIAS_G12       = rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G12;
    MINT32 pre_OBC_BIAS_G13       = rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G13;
    MINT32 pre_OBC_BIAS_G14       = rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G14;
    MINT32 pre_OBC_BIAS_B0       = rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B0;
    MINT32 pre_OBC_BIAS_B1       = rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B1;
    MINT32 pre_OBC_BIAS_B2       = rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B2;
    MINT32 pre_OBC_BIAS_B3       = rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B3;
    MINT32 pre_OBC_BIAS_B4       = rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B4;
    MINT32 pre_OBC_BIAS_B5       = rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B5;
    MINT32 pre_OBC_BIAS_B6       = rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B6;
    MINT32 pre_OBC_BIAS_B7       = rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B7;
    MINT32 pre_OBC_BIAS_B8       = rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B8;
    MINT32 pre_OBC_BIAS_B9       = rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B9;
    MINT32 pre_OBC_BIAS_B10       = rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B10;
    MINT32 pre_OBC_BIAS_B11       = rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B11;
    MINT32 pre_OBC_BIAS_B12       = rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B12;
    MINT32 pre_OBC_BIAS_B13       = rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B13;
    MINT32 pre_OBC_BIAS_B14       = rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B14;
    MINT32 pre_OBC_GRAY_MODE       = rLowerOBC.gray_bld_0.bits.OBC_GRAY_MODE;
    MINT32 pre_OBC_NORM_BIT       = rLowerOBC.gray_bld_0.bits.OBC_NORM_BIT;
    MINT32 pos_OBC_OFST_R       = rUpperOBC.offset_r.bits.OBC_OFST_R;
    MINT32 pos_OBC_OFST_GR       = rUpperOBC.offset_gr.bits.OBC_OFST_GR;
    MINT32 pos_OBC_OFST_GB       = rUpperOBC.offset_gb.bits.OBC_OFST_GB;
    MINT32 pos_OBC_OFST_B       = rUpperOBC.offset_b.bits.OBC_OFST_B;
    MINT32 pos_OBC_DBS_RATIO       = rUpperOBC.dbs.bits.OBC_DBS_RATIO;
    MINT32 pos_OBC_POSTTUNE_EN       = rUpperOBC.dbs.bits.OBC_POSTTUNE_EN;
    MINT32 pos_OBC_LUMA_MODE       = rUpperOBC.gray_bld_0.bits.OBC_LUMA_MODE;
    MINT32 pos_OBC_BLD_MXRT       = rUpperOBC.gray_bld_1.bits.OBC_BLD_MXRT;
    MINT32 pos_OBC_BLD_SLP       = rUpperOBC.gray_bld_1.bits.OBC_BLD_SLP;
    MINT32 pos_OBC_BLD_LOW       = rUpperOBC.gray_bld_1.bits.OBC_BLD_LOW;
    MINT32 pos_OBC_BIAS_R0       = rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R0;
    MINT32 pos_OBC_BIAS_R1       = rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R1;
    MINT32 pos_OBC_BIAS_R2       = rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R2;
    MINT32 pos_OBC_BIAS_R3       = rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R3;
    MINT32 pos_OBC_BIAS_R4       = rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R4;
    MINT32 pos_OBC_BIAS_R5       = rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R5;
    MINT32 pos_OBC_BIAS_R6       = rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R6;
    MINT32 pos_OBC_BIAS_R7       = rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R7;
    MINT32 pos_OBC_BIAS_R8       = rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R8;
    MINT32 pos_OBC_BIAS_R9       = rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R9;
    MINT32 pos_OBC_BIAS_R10       = rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R10;
    MINT32 pos_OBC_BIAS_R11       = rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R11;
    MINT32 pos_OBC_BIAS_R12       = rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R12;
    MINT32 pos_OBC_BIAS_R13       = rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R13;
    MINT32 pos_OBC_BIAS_R14       = rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R14;
    MINT32 pos_OBC_BIAS_G0       = rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G0;
    MINT32 pos_OBC_BIAS_G1       = rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G1;
    MINT32 pos_OBC_BIAS_G2       = rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G2;
    MINT32 pos_OBC_BIAS_G3       = rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G3;
    MINT32 pos_OBC_BIAS_G4       = rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G4;
    MINT32 pos_OBC_BIAS_G5       = rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G5;
    MINT32 pos_OBC_BIAS_G6       = rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G6;
    MINT32 pos_OBC_BIAS_G7       = rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G7;
    MINT32 pos_OBC_BIAS_G8       = rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G8;
    MINT32 pos_OBC_BIAS_G9       = rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G9;
    MINT32 pos_OBC_BIAS_G10       = rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G10;
    MINT32 pos_OBC_BIAS_G11       = rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G11;
    MINT32 pos_OBC_BIAS_G12       = rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G12;
    MINT32 pos_OBC_BIAS_G13       = rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G13;
    MINT32 pos_OBC_BIAS_G14       = rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G14;
    MINT32 pos_OBC_BIAS_B0       = rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B0;
    MINT32 pos_OBC_BIAS_B1       = rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B1;
    MINT32 pos_OBC_BIAS_B2       = rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B2;
    MINT32 pos_OBC_BIAS_B3       = rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B3;
    MINT32 pos_OBC_BIAS_B4       = rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B4;
    MINT32 pos_OBC_BIAS_B5       = rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B5;
    MINT32 pos_OBC_BIAS_B6       = rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B6;
    MINT32 pos_OBC_BIAS_B7       = rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B7;
    MINT32 pos_OBC_BIAS_B8       = rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B8;
    MINT32 pos_OBC_BIAS_B9       = rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B9;
    MINT32 pos_OBC_BIAS_B10       = rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B10;
    MINT32 pos_OBC_BIAS_B11       = rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B11;
    MINT32 pos_OBC_BIAS_B12       = rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B12;
    MINT32 pos_OBC_BIAS_B13       = rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B13;
    MINT32 pos_OBC_BIAS_B14       = rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B14;
    MINT32 pos_OBC_GRAY_MODE       = rUpperOBC.gray_bld_0.bits.OBC_GRAY_MODE;
    MINT32 pos_OBC_NORM_BIT       = rUpperOBC.gray_bld_0.bits.OBC_NORM_BIT;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 OBC_OFST_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_R, pos_OBC_OFST_R, 0);
    MINT32 OBC_OFST_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_GR, pos_OBC_OFST_GR, 0);
    MINT32 OBC_OFST_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_GB, pos_OBC_OFST_GB, 0);
    MINT32 OBC_OFST_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_OFST_B, pos_OBC_OFST_B, 0);
    MINT32 OBC_DBS_RATIO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_DBS_RATIO, pos_OBC_DBS_RATIO, 0);
    MINT32 OBC_POSTTUNE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_POSTTUNE_EN, pos_OBC_POSTTUNE_EN, 0);
    MINT32 OBC_LUMA_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_LUMA_MODE, pos_OBC_LUMA_MODE, 0);
    MINT32 OBC_BLD_MXRT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BLD_MXRT, pos_OBC_BLD_MXRT, 0);
    MINT32 OBC_BLD_SLP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BLD_SLP, pos_OBC_BLD_SLP, 0);
    MINT32 OBC_BLD_LOW       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BLD_LOW, pos_OBC_BLD_LOW, 0);
    MINT32 OBC_BIAS_R0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R0, pos_OBC_BIAS_R0, 0);
    MINT32 OBC_BIAS_R1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R1, pos_OBC_BIAS_R1, 0);
    MINT32 OBC_BIAS_R2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R2, pos_OBC_BIAS_R2, 0);
    MINT32 OBC_BIAS_R3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R3, pos_OBC_BIAS_R3, 0);
    MINT32 OBC_BIAS_R4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R4, pos_OBC_BIAS_R4, 0);
    MINT32 OBC_BIAS_R5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R5, pos_OBC_BIAS_R5, 0);
    MINT32 OBC_BIAS_R6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R6, pos_OBC_BIAS_R6, 0);
    MINT32 OBC_BIAS_R7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R7, pos_OBC_BIAS_R7, 0);
    MINT32 OBC_BIAS_R8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R8, pos_OBC_BIAS_R8, 0);
    MINT32 OBC_BIAS_R9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R9, pos_OBC_BIAS_R9, 0);
    MINT32 OBC_BIAS_R10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R10, pos_OBC_BIAS_R10, 0);
    MINT32 OBC_BIAS_R11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R11, pos_OBC_BIAS_R11, 0);
    MINT32 OBC_BIAS_R12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R12, pos_OBC_BIAS_R12, 0);
    MINT32 OBC_BIAS_R13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R13, pos_OBC_BIAS_R13, 0);
    MINT32 OBC_BIAS_R14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_R14, pos_OBC_BIAS_R14, 0);
    MINT32 OBC_BIAS_G0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G0, pos_OBC_BIAS_G0, 0);
    MINT32 OBC_BIAS_G1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G1, pos_OBC_BIAS_G1, 0);
    MINT32 OBC_BIAS_G2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G2, pos_OBC_BIAS_G2, 0);
    MINT32 OBC_BIAS_G3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G3, pos_OBC_BIAS_G3, 0);
    MINT32 OBC_BIAS_G4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G4, pos_OBC_BIAS_G4, 0);
    MINT32 OBC_BIAS_G5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G5, pos_OBC_BIAS_G5, 0);
    MINT32 OBC_BIAS_G6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G6, pos_OBC_BIAS_G6, 0);
    MINT32 OBC_BIAS_G7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G7, pos_OBC_BIAS_G7, 0);
    MINT32 OBC_BIAS_G8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G8, pos_OBC_BIAS_G8, 0);
    MINT32 OBC_BIAS_G9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G9, pos_OBC_BIAS_G9, 0);
    MINT32 OBC_BIAS_G10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G10, pos_OBC_BIAS_G10, 0);
    MINT32 OBC_BIAS_G11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G11, pos_OBC_BIAS_G11, 0);
    MINT32 OBC_BIAS_G12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G12, pos_OBC_BIAS_G12, 0);
    MINT32 OBC_BIAS_G13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G13, pos_OBC_BIAS_G13, 0);
    MINT32 OBC_BIAS_G14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_G14, pos_OBC_BIAS_G14, 0);
    MINT32 OBC_BIAS_B0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B0, pos_OBC_BIAS_B0, 0);
    MINT32 OBC_BIAS_B1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B1, pos_OBC_BIAS_B1, 0);
    MINT32 OBC_BIAS_B2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B2, pos_OBC_BIAS_B2, 0);
    MINT32 OBC_BIAS_B3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B3, pos_OBC_BIAS_B3, 0);
    MINT32 OBC_BIAS_B4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B4, pos_OBC_BIAS_B4, 0);
    MINT32 OBC_BIAS_B5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B5, pos_OBC_BIAS_B5, 0);
    MINT32 OBC_BIAS_B6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B6, pos_OBC_BIAS_B6, 0);
    MINT32 OBC_BIAS_B7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B7, pos_OBC_BIAS_B7, 0);
    MINT32 OBC_BIAS_B8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B8, pos_OBC_BIAS_B8, 0);
    MINT32 OBC_BIAS_B9       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B9, pos_OBC_BIAS_B9, 0);
    MINT32 OBC_BIAS_B10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B10, pos_OBC_BIAS_B10, 0);
    MINT32 OBC_BIAS_B11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B11, pos_OBC_BIAS_B11, 0);
    MINT32 OBC_BIAS_B12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B12, pos_OBC_BIAS_B12, 0);
    MINT32 OBC_BIAS_B13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B13, pos_OBC_BIAS_B13, 0);
    MINT32 OBC_BIAS_B14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_BIAS_B14, pos_OBC_BIAS_B14, 0);
    MINT32 OBC_GRAY_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_GRAY_MODE, pos_OBC_GRAY_MODE, 1);
    MINT32 OBC_NORM_BIT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_OBC_NORM_BIT, pos_OBC_NORM_BIT, 1);


    // interpolation result assignment
    rSmoothOBC.offset_r.bits.OBC_OFST_R       = OBC_OFST_R;
    rSmoothOBC.offset_gr.bits.OBC_OFST_GR       = OBC_OFST_GR;
    rSmoothOBC.offset_gb.bits.OBC_OFST_GB       = OBC_OFST_GB;
    rSmoothOBC.offset_b.bits.OBC_OFST_B       = OBC_OFST_B;
    rSmoothOBC.dbs.bits.OBC_DBS_RATIO       = OBC_DBS_RATIO;
    rSmoothOBC.dbs.bits.OBC_POSTTUNE_EN       = OBC_POSTTUNE_EN;
    rSmoothOBC.gray_bld_0.bits.OBC_LUMA_MODE       = OBC_LUMA_MODE;
    rSmoothOBC.gray_bld_1.bits.OBC_BLD_MXRT       = OBC_BLD_MXRT;
    rSmoothOBC.gray_bld_1.bits.OBC_BLD_SLP       = OBC_BLD_SLP;
    rSmoothOBC.gray_bld_1.bits.OBC_BLD_LOW       = OBC_BLD_LOW;
    rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R0       = OBC_BIAS_R0;
    rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R1       = OBC_BIAS_R1;
    rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R2       = OBC_BIAS_R2;
    rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R3       = OBC_BIAS_R3;
    rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R4       = OBC_BIAS_R4;
    rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R5       = OBC_BIAS_R5;
    rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R6       = OBC_BIAS_R6;
    rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R7       = OBC_BIAS_R7;
    rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R8       = OBC_BIAS_R8;
    rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R9       = OBC_BIAS_R9;
    rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R10       = OBC_BIAS_R10;
    rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R11       = OBC_BIAS_R11;
    rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R12       = OBC_BIAS_R12;
    rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R13       = OBC_BIAS_R13;
    rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R14       = OBC_BIAS_R14;
    rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G0       = OBC_BIAS_G0;
    rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G1       = OBC_BIAS_G1;
    rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G2       = OBC_BIAS_G2;
    rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G3       = OBC_BIAS_G3;
    rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G4       = OBC_BIAS_G4;
    rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G5       = OBC_BIAS_G5;
    rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G6       = OBC_BIAS_G6;
    rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G7       = OBC_BIAS_G7;
    rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G8       = OBC_BIAS_G8;
    rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G9       = OBC_BIAS_G9;
    rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G10       = OBC_BIAS_G10;
    rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G11       = OBC_BIAS_G11;
    rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G12       = OBC_BIAS_G12;
    rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G13       = OBC_BIAS_G13;
    rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G14       = OBC_BIAS_G14;
    rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B0       = OBC_BIAS_B0;
    rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B1       = OBC_BIAS_B1;
    rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B2       = OBC_BIAS_B2;
    rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B3       = OBC_BIAS_B3;
    rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B4       = OBC_BIAS_B4;
    rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B5       = OBC_BIAS_B5;
    rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B6       = OBC_BIAS_B6;
    rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B7       = OBC_BIAS_B7;
    rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B8       = OBC_BIAS_B8;
    rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B9       = OBC_BIAS_B9;
    rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B10       = OBC_BIAS_B10;
    rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B11       = OBC_BIAS_B11;
    rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B12       = OBC_BIAS_B12;
    rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B13       = OBC_BIAS_B13;
    rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B14       = OBC_BIAS_B14;
    rSmoothOBC.gray_bld_0.bits.OBC_GRAY_MODE       = OBC_GRAY_MODE;
    rSmoothOBC.gray_bld_0.bits.OBC_NORM_BIT       = OBC_NORM_BIT;


    // logging
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_R       = %d, %d, %d", rLowerOBC.offset_r.bits.OBC_OFST_R, rSmoothOBC.offset_r.bits.OBC_OFST_R, rUpperOBC.offset_r.bits.OBC_OFST_R);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_GR       = %d, %d, %d", rLowerOBC.offset_gr.bits.OBC_OFST_GR, rSmoothOBC.offset_gr.bits.OBC_OFST_GR, rUpperOBC.offset_gr.bits.OBC_OFST_GR);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_GB       = %d, %d, %d", rLowerOBC.offset_gb.bits.OBC_OFST_GB, rSmoothOBC.offset_gb.bits.OBC_OFST_GB, rUpperOBC.offset_gb.bits.OBC_OFST_GB);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_OFST_B       = %d, %d, %d", rLowerOBC.offset_b.bits.OBC_OFST_B, rSmoothOBC.offset_b.bits.OBC_OFST_B, rUpperOBC.offset_b.bits.OBC_OFST_B);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_DBS_RATIO       = %d, %d, %d", rLowerOBC.dbs.bits.OBC_DBS_RATIO, rSmoothOBC.dbs.bits.OBC_DBS_RATIO, rUpperOBC.dbs.bits.OBC_DBS_RATIO);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_POSTTUNE_EN       = %d, %d, %d", rLowerOBC.dbs.bits.OBC_POSTTUNE_EN, rSmoothOBC.dbs.bits.OBC_POSTTUNE_EN, rUpperOBC.dbs.bits.OBC_POSTTUNE_EN);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_LUMA_MODE       = %d, %d, %d", rLowerOBC.gray_bld_0.bits.OBC_LUMA_MODE, rSmoothOBC.gray_bld_0.bits.OBC_LUMA_MODE, rUpperOBC.gray_bld_0.bits.OBC_LUMA_MODE);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BLD_MXRT       = %d, %d, %d", rLowerOBC.gray_bld_1.bits.OBC_BLD_MXRT, rSmoothOBC.gray_bld_1.bits.OBC_BLD_MXRT, rUpperOBC.gray_bld_1.bits.OBC_BLD_MXRT);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BLD_SLP       = %d, %d, %d", rLowerOBC.gray_bld_1.bits.OBC_BLD_SLP, rSmoothOBC.gray_bld_1.bits.OBC_BLD_SLP, rUpperOBC.gray_bld_1.bits.OBC_BLD_SLP);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BLD_LOW       = %d, %d, %d", rLowerOBC.gray_bld_1.bits.OBC_BLD_LOW, rSmoothOBC.gray_bld_1.bits.OBC_BLD_LOW, rUpperOBC.gray_bld_1.bits.OBC_BLD_LOW);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R0       = %d, %d, %d", rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R0, rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R0, rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R0);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R1       = %d, %d, %d", rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R1, rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R1, rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R1);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R2       = %d, %d, %d", rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R2, rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R2, rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R2);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R3       = %d, %d, %d", rLowerOBC.bias_lut_r0.bits.OBC_BIAS_R3, rSmoothOBC.bias_lut_r0.bits.OBC_BIAS_R3, rUpperOBC.bias_lut_r0.bits.OBC_BIAS_R3);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R4       = %d, %d, %d", rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R4, rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R4, rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R4);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R5       = %d, %d, %d", rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R5, rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R5, rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R5);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R6       = %d, %d, %d", rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R6, rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R6, rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R6);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R7       = %d, %d, %d", rLowerOBC.bias_lut_r1.bits.OBC_BIAS_R7, rSmoothOBC.bias_lut_r1.bits.OBC_BIAS_R7, rUpperOBC.bias_lut_r1.bits.OBC_BIAS_R7);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R8       = %d, %d, %d", rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R8, rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R8, rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R8);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R9       = %d, %d, %d", rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R9, rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R9, rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R9);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R10       = %d, %d, %d", rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R10, rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R10, rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R10);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R11       = %d, %d, %d", rLowerOBC.bias_lut_r2.bits.OBC_BIAS_R11, rSmoothOBC.bias_lut_r2.bits.OBC_BIAS_R11, rUpperOBC.bias_lut_r2.bits.OBC_BIAS_R11);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R12       = %d, %d, %d", rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R12, rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R12, rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R12);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R13       = %d, %d, %d", rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R13, rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R13, rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R13);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_R14       = %d, %d, %d", rLowerOBC.bias_lut_r3.bits.OBC_BIAS_R14, rSmoothOBC.bias_lut_r3.bits.OBC_BIAS_R14, rUpperOBC.bias_lut_r3.bits.OBC_BIAS_R14);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G0       = %d, %d, %d", rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G0, rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G0, rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G0);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G1       = %d, %d, %d", rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G1, rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G1, rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G1);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G2       = %d, %d, %d", rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G2, rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G2, rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G2);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G3       = %d, %d, %d", rLowerOBC.bias_lut_g0.bits.OBC_BIAS_G3, rSmoothOBC.bias_lut_g0.bits.OBC_BIAS_G3, rUpperOBC.bias_lut_g0.bits.OBC_BIAS_G3);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G4       = %d, %d, %d", rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G4, rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G4, rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G4);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G5       = %d, %d, %d", rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G5, rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G5, rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G5);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G6       = %d, %d, %d", rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G6, rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G6, rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G6);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G7       = %d, %d, %d", rLowerOBC.bias_lut_g1.bits.OBC_BIAS_G7, rSmoothOBC.bias_lut_g1.bits.OBC_BIAS_G7, rUpperOBC.bias_lut_g1.bits.OBC_BIAS_G7);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G8       = %d, %d, %d", rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G8, rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G8, rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G8);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G9       = %d, %d, %d", rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G9, rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G9, rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G9);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G10       = %d, %d, %d", rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G10, rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G10, rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G10);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G11       = %d, %d, %d", rLowerOBC.bias_lut_g2.bits.OBC_BIAS_G11, rSmoothOBC.bias_lut_g2.bits.OBC_BIAS_G11, rUpperOBC.bias_lut_g2.bits.OBC_BIAS_G11);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G12       = %d, %d, %d", rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G12, rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G12, rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G12);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G13       = %d, %d, %d", rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G13, rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G13, rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G13);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_G14       = %d, %d, %d", rLowerOBC.bias_lut_g3.bits.OBC_BIAS_G14, rSmoothOBC.bias_lut_g3.bits.OBC_BIAS_G14, rUpperOBC.bias_lut_g3.bits.OBC_BIAS_G14);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B0       = %d, %d, %d", rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B0, rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B0, rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B0);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B1       = %d, %d, %d", rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B1, rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B1, rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B1);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B2       = %d, %d, %d", rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B2, rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B2, rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B2);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B3       = %d, %d, %d", rLowerOBC.bias_lut_b0.bits.OBC_BIAS_B3, rSmoothOBC.bias_lut_b0.bits.OBC_BIAS_B3, rUpperOBC.bias_lut_b0.bits.OBC_BIAS_B3);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B4       = %d, %d, %d", rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B4, rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B4, rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B4);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B5       = %d, %d, %d", rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B5, rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B5, rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B5);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B6       = %d, %d, %d", rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B6, rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B6, rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B6);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B7       = %d, %d, %d", rLowerOBC.bias_lut_b1.bits.OBC_BIAS_B7, rSmoothOBC.bias_lut_b1.bits.OBC_BIAS_B7, rUpperOBC.bias_lut_b1.bits.OBC_BIAS_B7);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B8       = %d, %d, %d", rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B8, rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B8, rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B8);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B9       = %d, %d, %d", rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B9, rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B9, rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B9);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B10       = %d, %d, %d", rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B10, rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B10, rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B10);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B11       = %d, %d, %d", rLowerOBC.bias_lut_b2.bits.OBC_BIAS_B11, rSmoothOBC.bias_lut_b2.bits.OBC_BIAS_B11, rUpperOBC.bias_lut_b2.bits.OBC_BIAS_B11);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B12       = %d, %d, %d", rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B12, rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B12, rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B12);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B13       = %d, %d, %d", rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B13, rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B13, rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B13);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_BIAS_B14       = %d, %d, %d", rLowerOBC.bias_lut_b3.bits.OBC_BIAS_B14, rSmoothOBC.bias_lut_b3.bits.OBC_BIAS_B14, rUpperOBC.bias_lut_b3.bits.OBC_BIAS_B14);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_GRAY_MODE       = %d, %d, %d", rLowerOBC.gray_bld_0.bits.OBC_GRAY_MODE, rSmoothOBC.gray_bld_0.bits.OBC_GRAY_MODE, rUpperOBC.gray_bld_0.bits.OBC_GRAY_MODE);
    INTER_LOG_IF(bSmoothOBCDebug, "[L,S,U]OBC_NORM_BIT       = %d, %d, %d", rLowerOBC.gray_bld_0.bits.OBC_NORM_BIT, rSmoothOBC.gray_bld_0.bits.OBC_NORM_BIT, rUpperOBC.gray_bld_0.bits.OBC_NORM_BIT);

}

MVOID Smooth_BPC_BPC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BPC_BPC_T const& rUpperBPC_BPC,   // BPC_BPC settings for upper ISO
                ISP_NVRAM_BPC_BPC_T const& rLowerBPC_BPC,   // BPC_BPC settings for lower ISO
                ISP_NVRAM_BPC_BPC_T& rSmoothBPC_BPC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_bpc_bpc.enable", value, "0");
    MBOOL bSmoothBPC_BPCDebug = atoi(value);

    INTER_LOG_IF(bSmoothBPC_BPCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_BPC_BPC_BLD_SP       = rLowerBPC_BPC.bld.bits.BPC_BPC_BLD_SP;
    MINT32 pre_BPC_BPC_BLD1       = rLowerBPC_BPC.bld.bits.BPC_BPC_BLD1;
    MINT32 pre_BPC_BPC_BLD0       = rLowerBPC_BPC.bld.bits.BPC_BPC_BLD0;
    MINT32 pre_BPC_BPC_TH_Y       = rLowerBPC_BPC.th1.bits.BPC_BPC_TH_Y;
    MINT32 pre_BPC_BPC_TH_LWB       = rLowerBPC_BPC.th1.bits.BPC_BPC_TH_LWB;
    MINT32 pre_BPC_BPC_TH_UPB       = rLowerBPC_BPC.th2.bits.BPC_BPC_TH_UPB;
    MINT32 pre_BPC_BPC_TH_XB       = rLowerBPC_BPC.th2.bits.BPC_BPC_TH_XB;
    MINT32 pre_BPC_BPC_TH_XA       = rLowerBPC_BPC.th3.bits.BPC_BPC_TH_XA;
    MINT32 pre_BPC_BPC_DK_TH_XB       = rLowerBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB;
    MINT32 pre_BPC_BPC_DK_TH_XA       = rLowerBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA;
    MINT32 pre_BPC_BPC_TH_SLB       = rLowerBPC_BPC.th5.bits.BPC_BPC_TH_SLB;
    MINT32 pre_BPC_BPC_TH_SLA       = rLowerBPC_BPC.th5.bits.BPC_BPC_TH_SLA;
    MINT32 pre_BPC_BPC_DK_TH_SLB       = rLowerBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB;
    MINT32 pre_BPC_BPC_DK_TH_SLA       = rLowerBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA;
    MINT32 pre_BPC_BPC_NO_LV       = rLowerBPC_BPC.dtc.bits.BPC_BPC_NO_LV;
    MINT32 pre_BPC_BPC_TH_MUL       = rLowerBPC_BPC.dtc.bits.BPC_BPC_TH_MUL;
    MINT32 pre_BPC_BPC_CT_LV       = rLowerBPC_BPC.dtc.bits.BPC_BPC_CT_LV;
    MINT32 pre_BPC_BPC_CS_RNG       = rLowerBPC_BPC.dtc.bits.BPC_BPC_CS_RNG;
    MINT32 pre_BPC_BPC_RNG       = rLowerBPC_BPC.dtc.bits.BPC_BPC_RNG;
    MINT32 pre_BPC_BPC_DIR_TH2       = rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_TH2;
    MINT32 pre_BPC_BPC_DIR_TH       = rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_TH;
    MINT32 pre_BPC_BPC_DIR_MAX       = rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_MAX;
    MINT32 pre_BPC_BPC_BLD_LWB       = rLowerBPC_BPC.rank.bits.BPC_BPC_BLD_LWB;
    MINT32 pre_BPC_BPC_RANK_IDXG       = rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG;
    MINT32 pre_BPC_BPC_RANK_IDXR       = rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR;
    MINT32 pre_BPC_BPC_RANK_IDXB       = rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB;
    MINT32 pre_BPC_BPC_C_TH_Y       = rLowerBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y;
    MINT32 pre_BPC_BPC_C_TH_LWB       = rLowerBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB;
    MINT32 pre_BPC_BPC_C_TH_XB       = rLowerBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB;
    MINT32 pre_BPC_BPC_C_TH_XA       = rLowerBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA;
    MINT32 pre_BPC_BPC_C_TH_UPB       = rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB;
    MINT32 pre_BPC_BPC_C_TH_SLB       = rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB;
    MINT32 pre_BPC_BPC_C_TH_SLA       = rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA;
    MINT32 pre_BPC_BPC_LL_LSP       = rLowerBPC_BPC.ll.bits.BPC_BPC_LL_LSP;
    MINT32 pre_BPC_BPC_LL_LWB       = rLowerBPC_BPC.ll.bits.BPC_BPC_LL_LWB;
    MINT32 pre_BPC_ZHDR_OSC_TH       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH;
    MINT32 pre_BPC_ZHDR_OSC_COUNT       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT;
    MINT32 pre_BPC_ZHDR_BLE_FIRST       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST;
    MINT32 pre_BPC_ZHDR_RLE_FIRST       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST;
    MINT32 pre_BPC_ZHDR_GLE_FIRST       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST;
    MINT32 pre_BPC_ZHDR_EN       = rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN;
    MINT32 pre_BPC_BNR_EDGE       = rLowerBPC_BPC.con.bits.BPC_BNR_EDGE;
    MINT32 pre_BPC_BPC_AUX_MAP_OR_EN       = rLowerBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN;
    MINT32 pre_BPC_BPC_AUX_MAP_EN       = rLowerBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN;
    MINT32 pre_BPC_LE_INV_CTL       = rLowerBPC_BPC.con.bits.BPC_LE_INV_CTL;
    MINT32 pre_BPC_BPC_BLD_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_BLD_MODE;
    MINT32 pre_BPC_BPC_EXC       = rLowerBPC_BPC.con.bits.BPC_BPC_EXC;
    MINT32 pre_BPC_BPC_CRC_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_CRC_MODE;
    MINT32 pre_BPC_BPC_CS_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_CS_MODE;
    MINT32 pre_BPC_BPC_DTC_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_DTC_MODE;
    MINT32 pre_BPC_BPC_AVG_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_AVG_MODE;
    MINT32 pre_BPC_BPC_TABLE_END_MODE       = rLowerBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE;
    MINT32 pre_BPC_BPC_LUT_EN       = rLowerBPC_BPC.con.bits.BPC_BPC_LUT_EN;
    MINT32 pre_BPC_BPC_EN       = rLowerBPC_BPC.con.bits.BPC_BPC_EN;
    MINT32 pre_BPC_PDC_GAIN_MODE_EN       = rLowerBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN;
    MINT32 pre_BPC_BPC_OC_MEAN_EN       = rLowerBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN;
    MINT32 pre_BPC_ZHDR_OUT_SEL_EN       = rLowerBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN;
    MINT32 pre_BPC_ZHDR_CLAMP_EN       = rLowerBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN;
    MINT32 pos_BPC_BPC_BLD_SP       = rUpperBPC_BPC.bld.bits.BPC_BPC_BLD_SP;
    MINT32 pos_BPC_BPC_BLD1       = rUpperBPC_BPC.bld.bits.BPC_BPC_BLD1;
    MINT32 pos_BPC_BPC_BLD0       = rUpperBPC_BPC.bld.bits.BPC_BPC_BLD0;
    MINT32 pos_BPC_BPC_TH_Y       = rUpperBPC_BPC.th1.bits.BPC_BPC_TH_Y;
    MINT32 pos_BPC_BPC_TH_LWB       = rUpperBPC_BPC.th1.bits.BPC_BPC_TH_LWB;
    MINT32 pos_BPC_BPC_TH_UPB       = rUpperBPC_BPC.th2.bits.BPC_BPC_TH_UPB;
    MINT32 pos_BPC_BPC_TH_XB       = rUpperBPC_BPC.th2.bits.BPC_BPC_TH_XB;
    MINT32 pos_BPC_BPC_TH_XA       = rUpperBPC_BPC.th3.bits.BPC_BPC_TH_XA;
    MINT32 pos_BPC_BPC_DK_TH_XB       = rUpperBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB;
    MINT32 pos_BPC_BPC_DK_TH_XA       = rUpperBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA;
    MINT32 pos_BPC_BPC_TH_SLB       = rUpperBPC_BPC.th5.bits.BPC_BPC_TH_SLB;
    MINT32 pos_BPC_BPC_TH_SLA       = rUpperBPC_BPC.th5.bits.BPC_BPC_TH_SLA;
    MINT32 pos_BPC_BPC_DK_TH_SLB       = rUpperBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB;
    MINT32 pos_BPC_BPC_DK_TH_SLA       = rUpperBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA;
    MINT32 pos_BPC_BPC_NO_LV       = rUpperBPC_BPC.dtc.bits.BPC_BPC_NO_LV;
    MINT32 pos_BPC_BPC_TH_MUL       = rUpperBPC_BPC.dtc.bits.BPC_BPC_TH_MUL;
    MINT32 pos_BPC_BPC_CT_LV       = rUpperBPC_BPC.dtc.bits.BPC_BPC_CT_LV;
    MINT32 pos_BPC_BPC_CS_RNG       = rUpperBPC_BPC.dtc.bits.BPC_BPC_CS_RNG;
    MINT32 pos_BPC_BPC_RNG       = rUpperBPC_BPC.dtc.bits.BPC_BPC_RNG;
    MINT32 pos_BPC_BPC_DIR_TH2       = rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_TH2;
    MINT32 pos_BPC_BPC_DIR_TH       = rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_TH;
    MINT32 pos_BPC_BPC_DIR_MAX       = rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_MAX;
    MINT32 pos_BPC_BPC_BLD_LWB       = rUpperBPC_BPC.rank.bits.BPC_BPC_BLD_LWB;
    MINT32 pos_BPC_BPC_RANK_IDXG       = rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG;
    MINT32 pos_BPC_BPC_RANK_IDXR       = rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR;
    MINT32 pos_BPC_BPC_RANK_IDXB       = rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB;
    MINT32 pos_BPC_BPC_C_TH_Y       = rUpperBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y;
    MINT32 pos_BPC_BPC_C_TH_LWB       = rUpperBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB;
    MINT32 pos_BPC_BPC_C_TH_XB       = rUpperBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB;
    MINT32 pos_BPC_BPC_C_TH_XA       = rUpperBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA;
    MINT32 pos_BPC_BPC_C_TH_UPB       = rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB;
    MINT32 pos_BPC_BPC_C_TH_SLB       = rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB;
    MINT32 pos_BPC_BPC_C_TH_SLA       = rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA;
    MINT32 pos_BPC_BPC_LL_LSP       = rUpperBPC_BPC.ll.bits.BPC_BPC_LL_LSP;
    MINT32 pos_BPC_BPC_LL_LWB       = rUpperBPC_BPC.ll.bits.BPC_BPC_LL_LWB;
    MINT32 pos_BPC_ZHDR_OSC_TH       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH;
    MINT32 pos_BPC_ZHDR_OSC_COUNT       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT;
    MINT32 pos_BPC_ZHDR_BLE_FIRST       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST;
    MINT32 pos_BPC_ZHDR_RLE_FIRST       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST;
    MINT32 pos_BPC_ZHDR_GLE_FIRST       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST;
    MINT32 pos_BPC_ZHDR_EN       = rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN;
    MINT32 pos_BPC_BNR_EDGE       = rUpperBPC_BPC.con.bits.BPC_BNR_EDGE;
    MINT32 pos_BPC_BPC_AUX_MAP_OR_EN       = rUpperBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN;
    MINT32 pos_BPC_BPC_AUX_MAP_EN       = rUpperBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN;
    MINT32 pos_BPC_LE_INV_CTL       = rUpperBPC_BPC.con.bits.BPC_LE_INV_CTL;
    MINT32 pos_BPC_BPC_BLD_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_BLD_MODE;
    MINT32 pos_BPC_BPC_EXC       = rUpperBPC_BPC.con.bits.BPC_BPC_EXC;
    MINT32 pos_BPC_BPC_CRC_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_CRC_MODE;
    MINT32 pos_BPC_BPC_CS_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_CS_MODE;
    MINT32 pos_BPC_BPC_DTC_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_DTC_MODE;
    MINT32 pos_BPC_BPC_AVG_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_AVG_MODE;
    MINT32 pos_BPC_BPC_TABLE_END_MODE       = rUpperBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE;
    MINT32 pos_BPC_BPC_LUT_EN       = rUpperBPC_BPC.con.bits.BPC_BPC_LUT_EN;
    MINT32 pos_BPC_BPC_EN       = rUpperBPC_BPC.con.bits.BPC_BPC_EN;
    MINT32 pos_BPC_PDC_GAIN_MODE_EN       = rUpperBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN;
    MINT32 pos_BPC_BPC_OC_MEAN_EN       = rUpperBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN;
    MINT32 pos_BPC_ZHDR_OUT_SEL_EN       = rUpperBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN;
    MINT32 pos_BPC_ZHDR_CLAMP_EN       = rUpperBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 BPC_BPC_BLD_SP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_BLD_SP, pos_BPC_BPC_BLD_SP, 0);
    MINT32 BPC_BPC_BLD1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_BLD1, pos_BPC_BPC_BLD1, 0);
    MINT32 BPC_BPC_BLD0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_BLD0, pos_BPC_BPC_BLD0, 0);
    MINT32 BPC_BPC_TH_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_Y, pos_BPC_BPC_TH_Y, 0);
    MINT32 BPC_BPC_TH_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_LWB, pos_BPC_BPC_TH_LWB, 0);
    MINT32 BPC_BPC_TH_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_UPB, pos_BPC_BPC_TH_UPB, 0);
    MINT32 BPC_BPC_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_XB, pos_BPC_BPC_TH_XB, 0);
    MINT32 BPC_BPC_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_XA, pos_BPC_BPC_TH_XA, 0);
    MINT32 BPC_BPC_DK_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DK_TH_XB, pos_BPC_BPC_DK_TH_XB, 0);
    MINT32 BPC_BPC_DK_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DK_TH_XA, pos_BPC_BPC_DK_TH_XA, 0);
    MINT32 BPC_BPC_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_SLB, pos_BPC_BPC_TH_SLB, 0);
    MINT32 BPC_BPC_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_SLA, pos_BPC_BPC_TH_SLA, 0);
    MINT32 BPC_BPC_DK_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DK_TH_SLB, pos_BPC_BPC_DK_TH_SLB, 0);
    MINT32 BPC_BPC_DK_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DK_TH_SLA, pos_BPC_BPC_DK_TH_SLA, 0);
    MINT32 BPC_BPC_NO_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_NO_LV, pos_BPC_BPC_NO_LV, 0);
    MINT32 BPC_BPC_TH_MUL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TH_MUL, pos_BPC_BPC_TH_MUL, 0);
    MINT32 BPC_BPC_CT_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_CT_LV, pos_BPC_BPC_CT_LV, 0);
    MINT32 BPC_BPC_CS_RNG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_CS_RNG, pos_BPC_BPC_CS_RNG, 0);
    MINT32 BPC_BPC_RNG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_RNG, pos_BPC_BPC_RNG, 0);
    MINT32 BPC_BPC_DIR_TH2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DIR_TH2, pos_BPC_BPC_DIR_TH2, 0);
    MINT32 BPC_BPC_DIR_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DIR_TH, pos_BPC_BPC_DIR_TH, 0);
    MINT32 BPC_BPC_DIR_MAX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DIR_MAX, pos_BPC_BPC_DIR_MAX, 0);
    MINT32 BPC_BPC_BLD_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_BLD_LWB, pos_BPC_BPC_BLD_LWB, 0);
    MINT32 BPC_BPC_RANK_IDXG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_RANK_IDXG, pos_BPC_BPC_RANK_IDXG, 0);
    MINT32 BPC_BPC_RANK_IDXR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_RANK_IDXR, pos_BPC_BPC_RANK_IDXR, 0);
    MINT32 BPC_BPC_RANK_IDXB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_RANK_IDXB, pos_BPC_BPC_RANK_IDXB, 0);
    MINT32 BPC_BPC_C_TH_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_Y, pos_BPC_BPC_C_TH_Y, 0);
    MINT32 BPC_BPC_C_TH_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_LWB, pos_BPC_BPC_C_TH_LWB, 0);
    MINT32 BPC_BPC_C_TH_XB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_XB, pos_BPC_BPC_C_TH_XB, 0);
    MINT32 BPC_BPC_C_TH_XA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_XA, pos_BPC_BPC_C_TH_XA, 0);
    MINT32 BPC_BPC_C_TH_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_UPB, pos_BPC_BPC_C_TH_UPB, 0);
    MINT32 BPC_BPC_C_TH_SLB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_SLB, pos_BPC_BPC_C_TH_SLB, 0);
    MINT32 BPC_BPC_C_TH_SLA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_C_TH_SLA, pos_BPC_BPC_C_TH_SLA, 0);
    MINT32 BPC_BPC_LL_LSP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_LL_LSP, pos_BPC_BPC_LL_LSP, 0);
    MINT32 BPC_BPC_LL_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_LL_LWB, pos_BPC_BPC_LL_LWB, 0);
    MINT32 BPC_ZHDR_OSC_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_OSC_TH, pos_BPC_ZHDR_OSC_TH, 0);
    MINT32 BPC_ZHDR_OSC_COUNT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_OSC_COUNT, pos_BPC_ZHDR_OSC_COUNT, 0);
    MINT32 BPC_ZHDR_BLE_FIRST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_BLE_FIRST, pos_BPC_ZHDR_BLE_FIRST, 0);
    MINT32 BPC_ZHDR_RLE_FIRST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_RLE_FIRST, pos_BPC_ZHDR_RLE_FIRST, 0);
    MINT32 BPC_ZHDR_GLE_FIRST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_GLE_FIRST, pos_BPC_ZHDR_GLE_FIRST, 0);
    MINT32 BPC_ZHDR_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_EN, pos_BPC_ZHDR_EN, 0);
    MINT32 BPC_BNR_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BNR_EDGE, pos_BPC_BNR_EDGE, 1);
    MINT32 BPC_BPC_AUX_MAP_OR_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_AUX_MAP_OR_EN, pos_BPC_BPC_AUX_MAP_OR_EN, 1);
    MINT32 BPC_BPC_AUX_MAP_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_AUX_MAP_EN, pos_BPC_BPC_AUX_MAP_EN, 1);
    MINT32 BPC_LE_INV_CTL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_LE_INV_CTL, pos_BPC_LE_INV_CTL, 1);
    MINT32 BPC_BPC_BLD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_BLD_MODE, pos_BPC_BPC_BLD_MODE, 1);
    MINT32 BPC_BPC_EXC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_EXC, pos_BPC_BPC_EXC, 1);
    MINT32 BPC_BPC_CRC_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_CRC_MODE, pos_BPC_BPC_CRC_MODE, 1);
    MINT32 BPC_BPC_CS_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_CS_MODE, pos_BPC_BPC_CS_MODE, 1);
    MINT32 BPC_BPC_DTC_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_DTC_MODE, pos_BPC_BPC_DTC_MODE, 1);
    MINT32 BPC_BPC_AVG_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_AVG_MODE, pos_BPC_BPC_AVG_MODE, 1);
    MINT32 BPC_BPC_TABLE_END_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_TABLE_END_MODE, pos_BPC_BPC_TABLE_END_MODE, 1);
    MINT32 BPC_BPC_LUT_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_LUT_EN, pos_BPC_BPC_LUT_EN, 1);
    MINT32 BPC_BPC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_EN, pos_BPC_BPC_EN, 1);
    MINT32 BPC_PDC_GAIN_MODE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_MODE_EN, pos_BPC_PDC_GAIN_MODE_EN, 1);
    MINT32 BPC_BPC_OC_MEAN_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_OC_MEAN_EN, pos_BPC_BPC_OC_MEAN_EN, 1);
    MINT32 BPC_ZHDR_OUT_SEL_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_OUT_SEL_EN, pos_BPC_ZHDR_OUT_SEL_EN, 1);
    MINT32 BPC_ZHDR_CLAMP_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_CLAMP_EN, pos_BPC_ZHDR_CLAMP_EN, 1);


    // interpolation result assignment
    rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD_SP       = BPC_BPC_BLD_SP;
    rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD1       = BPC_BPC_BLD1;
    rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD0       = BPC_BPC_BLD0;
    rSmoothBPC_BPC.th1.bits.BPC_BPC_TH_Y       = BPC_BPC_TH_Y;
    rSmoothBPC_BPC.th1.bits.BPC_BPC_TH_LWB       = BPC_BPC_TH_LWB;
    rSmoothBPC_BPC.th2.bits.BPC_BPC_TH_UPB       = BPC_BPC_TH_UPB;
    rSmoothBPC_BPC.th2.bits.BPC_BPC_TH_XB       = BPC_BPC_TH_XB;
    rSmoothBPC_BPC.th3.bits.BPC_BPC_TH_XA       = BPC_BPC_TH_XA;
    rSmoothBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB       = BPC_BPC_DK_TH_XB;
    rSmoothBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA       = BPC_BPC_DK_TH_XA;
    rSmoothBPC_BPC.th5.bits.BPC_BPC_TH_SLB       = BPC_BPC_TH_SLB;
    rSmoothBPC_BPC.th5.bits.BPC_BPC_TH_SLA       = BPC_BPC_TH_SLA;
    rSmoothBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB       = BPC_BPC_DK_TH_SLB;
    rSmoothBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA       = BPC_BPC_DK_TH_SLA;
    rSmoothBPC_BPC.dtc.bits.BPC_BPC_NO_LV       = BPC_BPC_NO_LV;
    rSmoothBPC_BPC.dtc.bits.BPC_BPC_TH_MUL       = BPC_BPC_TH_MUL;
    rSmoothBPC_BPC.dtc.bits.BPC_BPC_CT_LV       = BPC_BPC_CT_LV;
    rSmoothBPC_BPC.dtc.bits.BPC_BPC_CS_RNG       = BPC_BPC_CS_RNG;
    rSmoothBPC_BPC.dtc.bits.BPC_BPC_RNG       = BPC_BPC_RNG;
    rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_TH2       = BPC_BPC_DIR_TH2;
    rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_TH       = BPC_BPC_DIR_TH;
    rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_MAX       = BPC_BPC_DIR_MAX;
    rSmoothBPC_BPC.rank.bits.BPC_BPC_BLD_LWB       = BPC_BPC_BLD_LWB;
    rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG       = BPC_BPC_RANK_IDXG;
    rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR       = BPC_BPC_RANK_IDXR;
    rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB       = BPC_BPC_RANK_IDXB;
    rSmoothBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y       = BPC_BPC_C_TH_Y;
    rSmoothBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB       = BPC_BPC_C_TH_LWB;
    rSmoothBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB       = BPC_BPC_C_TH_XB;
    rSmoothBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA       = BPC_BPC_C_TH_XA;
    rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB       = BPC_BPC_C_TH_UPB;
    rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB       = BPC_BPC_C_TH_SLB;
    rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA       = BPC_BPC_C_TH_SLA;
    rSmoothBPC_BPC.ll.bits.BPC_BPC_LL_LSP       = BPC_BPC_LL_LSP;
    rSmoothBPC_BPC.ll.bits.BPC_BPC_LL_LWB       = BPC_BPC_LL_LWB;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH       = BPC_ZHDR_OSC_TH;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT       = BPC_ZHDR_OSC_COUNT;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST       = BPC_ZHDR_BLE_FIRST;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST       = BPC_ZHDR_RLE_FIRST;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST       = BPC_ZHDR_GLE_FIRST;
    rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN       = BPC_ZHDR_EN;
    rSmoothBPC_BPC.con.bits.BPC_BNR_EDGE       = BPC_BNR_EDGE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN       = BPC_BPC_AUX_MAP_OR_EN;
    rSmoothBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN       = BPC_BPC_AUX_MAP_EN;
    rSmoothBPC_BPC.con.bits.BPC_LE_INV_CTL       = BPC_LE_INV_CTL;
    rSmoothBPC_BPC.con.bits.BPC_BPC_BLD_MODE       = BPC_BPC_BLD_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_EXC       = BPC_BPC_EXC;
    rSmoothBPC_BPC.con.bits.BPC_BPC_CRC_MODE       = BPC_BPC_CRC_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_CS_MODE       = BPC_BPC_CS_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_DTC_MODE       = BPC_BPC_DTC_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_AVG_MODE       = BPC_BPC_AVG_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE       = BPC_BPC_TABLE_END_MODE;
    rSmoothBPC_BPC.con.bits.BPC_BPC_LUT_EN       = BPC_BPC_LUT_EN;
    rSmoothBPC_BPC.con.bits.BPC_BPC_EN       = BPC_BPC_EN;
    rSmoothBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN       = BPC_PDC_GAIN_MODE_EN;
    rSmoothBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN       = BPC_BPC_OC_MEAN_EN;
    rSmoothBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN       = BPC_ZHDR_OUT_SEL_EN;
    rSmoothBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN       = BPC_ZHDR_CLAMP_EN;


    // logging
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_BLD_SP       = %d, %d, %d", rLowerBPC_BPC.bld.bits.BPC_BPC_BLD_SP, rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD_SP, rUpperBPC_BPC.bld.bits.BPC_BPC_BLD_SP);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_BLD1       = %d, %d, %d", rLowerBPC_BPC.bld.bits.BPC_BPC_BLD1, rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD1, rUpperBPC_BPC.bld.bits.BPC_BPC_BLD1);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_BLD0       = %d, %d, %d", rLowerBPC_BPC.bld.bits.BPC_BPC_BLD0, rSmoothBPC_BPC.bld.bits.BPC_BPC_BLD0, rUpperBPC_BPC.bld.bits.BPC_BPC_BLD0);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_Y       = %d, %d, %d", rLowerBPC_BPC.th1.bits.BPC_BPC_TH_Y, rSmoothBPC_BPC.th1.bits.BPC_BPC_TH_Y, rUpperBPC_BPC.th1.bits.BPC_BPC_TH_Y);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_LWB       = %d, %d, %d", rLowerBPC_BPC.th1.bits.BPC_BPC_TH_LWB, rSmoothBPC_BPC.th1.bits.BPC_BPC_TH_LWB, rUpperBPC_BPC.th1.bits.BPC_BPC_TH_LWB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_UPB       = %d, %d, %d", rLowerBPC_BPC.th2.bits.BPC_BPC_TH_UPB, rSmoothBPC_BPC.th2.bits.BPC_BPC_TH_UPB, rUpperBPC_BPC.th2.bits.BPC_BPC_TH_UPB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_XB       = %d, %d, %d", rLowerBPC_BPC.th2.bits.BPC_BPC_TH_XB, rSmoothBPC_BPC.th2.bits.BPC_BPC_TH_XB, rUpperBPC_BPC.th2.bits.BPC_BPC_TH_XB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_XA       = %d, %d, %d", rLowerBPC_BPC.th3.bits.BPC_BPC_TH_XA, rSmoothBPC_BPC.th3.bits.BPC_BPC_TH_XA, rUpperBPC_BPC.th3.bits.BPC_BPC_TH_XA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DK_TH_XB       = %d, %d, %d", rLowerBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB, rSmoothBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB, rUpperBPC_BPC.th3.bits.BPC_BPC_DK_TH_XB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DK_TH_XA       = %d, %d, %d", rLowerBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA, rSmoothBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA, rUpperBPC_BPC.th4.bits.BPC_BPC_DK_TH_XA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_SLB       = %d, %d, %d", rLowerBPC_BPC.th5.bits.BPC_BPC_TH_SLB, rSmoothBPC_BPC.th5.bits.BPC_BPC_TH_SLB, rUpperBPC_BPC.th5.bits.BPC_BPC_TH_SLB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_SLA       = %d, %d, %d", rLowerBPC_BPC.th5.bits.BPC_BPC_TH_SLA, rSmoothBPC_BPC.th5.bits.BPC_BPC_TH_SLA, rUpperBPC_BPC.th5.bits.BPC_BPC_TH_SLA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DK_TH_SLB       = %d, %d, %d", rLowerBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB, rSmoothBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB, rUpperBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DK_TH_SLA       = %d, %d, %d", rLowerBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA, rSmoothBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA, rUpperBPC_BPC.th6.bits.BPC_BPC_DK_TH_SLA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_NO_LV       = %d, %d, %d", rLowerBPC_BPC.dtc.bits.BPC_BPC_NO_LV, rSmoothBPC_BPC.dtc.bits.BPC_BPC_NO_LV, rUpperBPC_BPC.dtc.bits.BPC_BPC_NO_LV);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TH_MUL       = %d, %d, %d", rLowerBPC_BPC.dtc.bits.BPC_BPC_TH_MUL, rSmoothBPC_BPC.dtc.bits.BPC_BPC_TH_MUL, rUpperBPC_BPC.dtc.bits.BPC_BPC_TH_MUL);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_CT_LV       = %d, %d, %d", rLowerBPC_BPC.dtc.bits.BPC_BPC_CT_LV, rSmoothBPC_BPC.dtc.bits.BPC_BPC_CT_LV, rUpperBPC_BPC.dtc.bits.BPC_BPC_CT_LV);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_CS_RNG       = %d, %d, %d", rLowerBPC_BPC.dtc.bits.BPC_BPC_CS_RNG, rSmoothBPC_BPC.dtc.bits.BPC_BPC_CS_RNG, rUpperBPC_BPC.dtc.bits.BPC_BPC_CS_RNG);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_RNG       = %d, %d, %d", rLowerBPC_BPC.dtc.bits.BPC_BPC_RNG, rSmoothBPC_BPC.dtc.bits.BPC_BPC_RNG, rUpperBPC_BPC.dtc.bits.BPC_BPC_RNG);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DIR_TH2       = %d, %d, %d", rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_TH2, rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_TH2, rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_TH2);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DIR_TH       = %d, %d, %d", rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_TH, rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_TH, rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_TH);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DIR_MAX       = %d, %d, %d", rLowerBPC_BPC.cor.bits.BPC_BPC_DIR_MAX, rSmoothBPC_BPC.cor.bits.BPC_BPC_DIR_MAX, rUpperBPC_BPC.cor.bits.BPC_BPC_DIR_MAX);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_BLD_LWB       = %d, %d, %d", rLowerBPC_BPC.rank.bits.BPC_BPC_BLD_LWB, rSmoothBPC_BPC.rank.bits.BPC_BPC_BLD_LWB, rUpperBPC_BPC.rank.bits.BPC_BPC_BLD_LWB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_RANK_IDXG       = %d, %d, %d", rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG, rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG, rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXG);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_RANK_IDXR       = %d, %d, %d", rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR, rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR, rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXR);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_RANK_IDXB       = %d, %d, %d", rLowerBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB, rSmoothBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB, rUpperBPC_BPC.rank.bits.BPC_BPC_RANK_IDXB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_Y       = %d, %d, %d", rLowerBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y, rSmoothBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y, rUpperBPC_BPC.th1_c.bits.BPC_BPC_C_TH_Y);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_LWB       = %d, %d, %d", rLowerBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB, rSmoothBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB, rUpperBPC_BPC.th1_c.bits.BPC_BPC_C_TH_LWB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_XB       = %d, %d, %d", rLowerBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB, rSmoothBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB, rUpperBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_XA       = %d, %d, %d", rLowerBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA, rSmoothBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA, rUpperBPC_BPC.th2_c.bits.BPC_BPC_C_TH_XA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_UPB       = %d, %d, %d", rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB, rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB, rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_UPB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_SLB       = %d, %d, %d", rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB, rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB, rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_C_TH_SLA       = %d, %d, %d", rLowerBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA, rSmoothBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA, rUpperBPC_BPC.th3_c.bits.BPC_BPC_C_TH_SLA);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_LL_LSP       = %d, %d, %d", rLowerBPC_BPC.ll.bits.BPC_BPC_LL_LSP, rSmoothBPC_BPC.ll.bits.BPC_BPC_LL_LSP, rUpperBPC_BPC.ll.bits.BPC_BPC_LL_LSP);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_LL_LWB       = %d, %d, %d", rLowerBPC_BPC.ll.bits.BPC_BPC_LL_LWB, rSmoothBPC_BPC.ll.bits.BPC_BPC_LL_LWB, rUpperBPC_BPC.ll.bits.BPC_BPC_LL_LWB);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_OSC_TH       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_TH);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_OSC_COUNT       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_OSC_COUNT);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_BLE_FIRST       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_BLE_FIRST);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_RLE_FIRST       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_RLE_FIRST);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_GLE_FIRST       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_GLE_FIRST);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_EN       = %d, %d, %d", rLowerBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN, rSmoothBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN, rUpperBPC_BPC.zhdr_con.bits.BPC_ZHDR_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BNR_EDGE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BNR_EDGE, rSmoothBPC_BPC.con.bits.BPC_BNR_EDGE, rUpperBPC_BPC.con.bits.BPC_BNR_EDGE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_AUX_MAP_OR_EN       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN, rSmoothBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN, rUpperBPC_BPC.con.bits.BPC_BPC_AUX_MAP_OR_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_AUX_MAP_EN       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN, rSmoothBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN, rUpperBPC_BPC.con.bits.BPC_BPC_AUX_MAP_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_LE_INV_CTL       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_LE_INV_CTL, rSmoothBPC_BPC.con.bits.BPC_LE_INV_CTL, rUpperBPC_BPC.con.bits.BPC_LE_INV_CTL);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_BLD_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_BLD_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_BLD_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_BLD_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_EXC       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_EXC, rSmoothBPC_BPC.con.bits.BPC_BPC_EXC, rUpperBPC_BPC.con.bits.BPC_BPC_EXC);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_CRC_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_CRC_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_CRC_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_CRC_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_CS_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_CS_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_CS_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_CS_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_DTC_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_DTC_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_DTC_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_DTC_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_AVG_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_AVG_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_AVG_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_AVG_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_TABLE_END_MODE       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE, rSmoothBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE, rUpperBPC_BPC.con.bits.BPC_BPC_TABLE_END_MODE);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_LUT_EN       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_LUT_EN, rSmoothBPC_BPC.con.bits.BPC_BPC_LUT_EN, rUpperBPC_BPC.con.bits.BPC_BPC_LUT_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_EN       = %d, %d, %d", rLowerBPC_BPC.con.bits.BPC_BPC_EN, rSmoothBPC_BPC.con.bits.BPC_BPC_EN, rUpperBPC_BPC.con.bits.BPC_BPC_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_PDC_GAIN_MODE_EN       = %d, %d, %d", rLowerBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN, rSmoothBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN, rUpperBPC_BPC.pseudo.bits.BPC_PDC_GAIN_MODE_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_BPC_OC_MEAN_EN       = %d, %d, %d", rLowerBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN, rSmoothBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN, rUpperBPC_BPC.pseudo.bits.BPC_BPC_OC_MEAN_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_OUT_SEL_EN       = %d, %d, %d", rLowerBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN, rSmoothBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN, rUpperBPC_BPC.pseudo.bits.BPC_ZHDR_OUT_SEL_EN);
    INTER_LOG_IF(bSmoothBPC_BPCDebug, "[L,S,U]BPC_ZHDR_CLAMP_EN       = %d, %d, %d", rLowerBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN, rSmoothBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN, rUpperBPC_BPC.pseudo.bits.BPC_ZHDR_CLAMP_EN);

}

MVOID Smooth_BPC_CT(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BPC_CT_T const& rUpperBPC_CT,   // BPC_CT settings for upper ISO
                ISP_NVRAM_BPC_CT_T const& rLowerBPC_CT,   // BPC_CT settings for lower ISO
                ISP_NVRAM_BPC_CT_T& rSmoothBPC_CT)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_bpc_ct.enable", value, "0");
    MBOOL bSmoothBPC_CTDebug = atoi(value);

    INTER_LOG_IF(bSmoothBPC_CTDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_BPC_CT_DIV       = rLowerBPC_CT.con2.bits.BPC_CT_DIV;
    MINT32 pre_BPC_CT_SLOPE       = rLowerBPC_CT.con2.bits.BPC_CT_SLOPE;
    MINT32 pre_BPC_CT_MBND       = rLowerBPC_CT.con2.bits.BPC_CT_MBND;
    MINT32 pre_BPC_CT_THRD       = rLowerBPC_CT.con2.bits.BPC_CT_THRD;
    MINT32 pre_BPC_CT_MD2       = rLowerBPC_CT.con2.bits.BPC_CT_MD2;
    MINT32 pre_BPC_CT_MD       = rLowerBPC_CT.con2.bits.BPC_CT_MD;
    MINT32 pre_BPC_CT_USP       = rLowerBPC_CT.bld1.bits.BPC_CT_USP;
    MINT32 pre_BPC_CT_UPB       = rLowerBPC_CT.bld1.bits.BPC_CT_UPB;
    MINT32 pre_BPC_CT_LSP       = rLowerBPC_CT.bld2.bits.BPC_CT_LSP;
    MINT32 pre_BPC_CT_LWB       = rLowerBPC_CT.bld2.bits.BPC_CT_LWB;
    MINT32 pre_BPC_CT_EN       = rLowerBPC_CT.con1.bits.BPC_CT_EN;
    MINT32 pos_BPC_CT_DIV       = rUpperBPC_CT.con2.bits.BPC_CT_DIV;
    MINT32 pos_BPC_CT_SLOPE       = rUpperBPC_CT.con2.bits.BPC_CT_SLOPE;
    MINT32 pos_BPC_CT_MBND       = rUpperBPC_CT.con2.bits.BPC_CT_MBND;
    MINT32 pos_BPC_CT_THRD       = rUpperBPC_CT.con2.bits.BPC_CT_THRD;
    MINT32 pos_BPC_CT_MD2       = rUpperBPC_CT.con2.bits.BPC_CT_MD2;
    MINT32 pos_BPC_CT_MD       = rUpperBPC_CT.con2.bits.BPC_CT_MD;
    MINT32 pos_BPC_CT_USP       = rUpperBPC_CT.bld1.bits.BPC_CT_USP;
    MINT32 pos_BPC_CT_UPB       = rUpperBPC_CT.bld1.bits.BPC_CT_UPB;
    MINT32 pos_BPC_CT_LSP       = rUpperBPC_CT.bld2.bits.BPC_CT_LSP;
    MINT32 pos_BPC_CT_LWB       = rUpperBPC_CT.bld2.bits.BPC_CT_LWB;
    MINT32 pos_BPC_CT_EN       = rUpperBPC_CT.con1.bits.BPC_CT_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 BPC_CT_DIV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_DIV, pos_BPC_CT_DIV, 0);
    MINT32 BPC_CT_SLOPE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_SLOPE, pos_BPC_CT_SLOPE, 0);
    MINT32 BPC_CT_MBND       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_MBND, pos_BPC_CT_MBND, 0);
    MINT32 BPC_CT_THRD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_THRD, pos_BPC_CT_THRD, 0);
    MINT32 BPC_CT_MD2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_MD2, pos_BPC_CT_MD2, 0);
    MINT32 BPC_CT_MD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_MD, pos_BPC_CT_MD, 0);
    MINT32 BPC_CT_USP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_USP, pos_BPC_CT_USP, 0);
    MINT32 BPC_CT_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_UPB, pos_BPC_CT_UPB, 0);
    MINT32 BPC_CT_LSP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_LSP, pos_BPC_CT_LSP, 0);
    MINT32 BPC_CT_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_LWB, pos_BPC_CT_LWB, 0);
    MINT32 BPC_CT_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_CT_EN, pos_BPC_CT_EN, 1);


    // interpolation result assignment
    rSmoothBPC_CT.con2.bits.BPC_CT_DIV       = BPC_CT_DIV;
    rSmoothBPC_CT.con2.bits.BPC_CT_SLOPE       = BPC_CT_SLOPE;
    rSmoothBPC_CT.con2.bits.BPC_CT_MBND       = BPC_CT_MBND;
    rSmoothBPC_CT.con2.bits.BPC_CT_THRD       = BPC_CT_THRD;
    rSmoothBPC_CT.con2.bits.BPC_CT_MD2       = BPC_CT_MD2;
    rSmoothBPC_CT.con2.bits.BPC_CT_MD       = BPC_CT_MD;
    rSmoothBPC_CT.bld1.bits.BPC_CT_USP       = BPC_CT_USP;
    rSmoothBPC_CT.bld1.bits.BPC_CT_UPB       = BPC_CT_UPB;
    rSmoothBPC_CT.bld2.bits.BPC_CT_LSP       = BPC_CT_LSP;
    rSmoothBPC_CT.bld2.bits.BPC_CT_LWB       = BPC_CT_LWB;
    rSmoothBPC_CT.con1.bits.BPC_CT_EN       = BPC_CT_EN;


    // logging
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_DIV       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_DIV, rSmoothBPC_CT.con2.bits.BPC_CT_DIV, rUpperBPC_CT.con2.bits.BPC_CT_DIV);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_SLOPE       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_SLOPE, rSmoothBPC_CT.con2.bits.BPC_CT_SLOPE, rUpperBPC_CT.con2.bits.BPC_CT_SLOPE);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_MBND       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_MBND, rSmoothBPC_CT.con2.bits.BPC_CT_MBND, rUpperBPC_CT.con2.bits.BPC_CT_MBND);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_THRD       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_THRD, rSmoothBPC_CT.con2.bits.BPC_CT_THRD, rUpperBPC_CT.con2.bits.BPC_CT_THRD);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_MD2       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_MD2, rSmoothBPC_CT.con2.bits.BPC_CT_MD2, rUpperBPC_CT.con2.bits.BPC_CT_MD2);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_MD       = %d, %d, %d", rLowerBPC_CT.con2.bits.BPC_CT_MD, rSmoothBPC_CT.con2.bits.BPC_CT_MD, rUpperBPC_CT.con2.bits.BPC_CT_MD);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_USP       = %d, %d, %d", rLowerBPC_CT.bld1.bits.BPC_CT_USP, rSmoothBPC_CT.bld1.bits.BPC_CT_USP, rUpperBPC_CT.bld1.bits.BPC_CT_USP);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_UPB       = %d, %d, %d", rLowerBPC_CT.bld1.bits.BPC_CT_UPB, rSmoothBPC_CT.bld1.bits.BPC_CT_UPB, rUpperBPC_CT.bld1.bits.BPC_CT_UPB);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_LSP       = %d, %d, %d", rLowerBPC_CT.bld2.bits.BPC_CT_LSP, rSmoothBPC_CT.bld2.bits.BPC_CT_LSP, rUpperBPC_CT.bld2.bits.BPC_CT_LSP);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_LWB       = %d, %d, %d", rLowerBPC_CT.bld2.bits.BPC_CT_LWB, rSmoothBPC_CT.bld2.bits.BPC_CT_LWB, rUpperBPC_CT.bld2.bits.BPC_CT_LWB);
    INTER_LOG_IF(bSmoothBPC_CTDebug, "[L,S,U]BPC_CT_EN       = %d, %d, %d", rLowerBPC_CT.con1.bits.BPC_CT_EN, rSmoothBPC_CT.con1.bits.BPC_CT_EN, rUpperBPC_CT.con1.bits.BPC_CT_EN);

}

MVOID Smooth_BPC_PDC(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_BPC_PDC_T const& rUpperBPC_PDC,   // BPC_PDC settings for upper ISO
                ISP_NVRAM_BPC_PDC_T const& rLowerBPC_PDC,   // BPC_PDC settings for lower ISO
                ISP_NVRAM_BPC_PDC_T& rSmoothBPC_PDC)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_bpc_pdc.enable", value, "0");
    MBOOL bSmoothBPC_PDCDebug = atoi(value);

    INTER_LOG_IF(bSmoothBPC_PDCDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_BPC_PDC_GCF_L10       = rLowerBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10;
    MINT32 pre_BPC_PDC_GCF_L00       = rLowerBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00;
    MINT32 pre_BPC_PDC_GCF_R10       = rLowerBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10;
    MINT32 pre_BPC_PDC_GCF_R00       = rLowerBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00;
    MINT32 pre_BPC_PDC_BTH       = rLowerBPC_PDC.th_gb.bits.BPC_PDC_BTH;
    MINT32 pre_BPC_PDC_GTH       = rLowerBPC_PDC.th_gb.bits.BPC_PDC_GTH;
    MINT32 pre_BPC_PDC_ATH       = rLowerBPC_PDC.th_ia.bits.BPC_PDC_ATH;
    MINT32 pre_BPC_PDC_ITH       = rLowerBPC_PDC.th_ia.bits.BPC_PDC_ITH;
    MINT32 pre_BPC_PDC_DTH       = rLowerBPC_PDC.th_hd.bits.BPC_PDC_DTH;
    MINT32 pre_BPC_PDC_NTH       = rLowerBPC_PDC.th_hd.bits.BPC_PDC_NTH;
    MINT32 pre_BPC_PDC_GCF_NORM       = rLowerBPC_PDC.sl.bits.BPC_PDC_GCF_NORM;
    MINT32 pre_BPC_PDC_ASL       = rLowerBPC_PDC.sl.bits.BPC_PDC_ASL;
    MINT32 pre_BPC_PDC_ISL       = rLowerBPC_PDC.sl.bits.BPC_PDC_ISL;
    MINT32 pre_BPC_PDC_BSL       = rLowerBPC_PDC.sl.bits.BPC_PDC_BSL;
    MINT32 pre_BPC_PDC_GSL       = rLowerBPC_PDC.sl.bits.BPC_PDC_GSL;
    MINT32 pre_BPC_PDC_BLD_WT_SLP       = rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_SLP1       = rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_Y1       = rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_SLP2       = rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_Y2       = rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_X2       = rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_SLP3       = rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_Y3       = rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3;
    MINT32 pre_BPC_PDC_DIFF_TH_GR_X3       = rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_SLP1       = rLowerBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_Y1       = rLowerBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_SLP2       = rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_Y2       = rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_X2       = rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_SLP3       = rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_Y3       = rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3;
    MINT32 pre_BPC_PDC_DIFF_TH_GB_X3       = rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3;
    MINT32 pre_BPC_PDC_DIFF_TH_R_SLP1       = rLowerBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1;
    MINT32 pre_BPC_PDC_DIFF_TH_R_Y1       = rLowerBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1;
    MINT32 pre_BPC_PDC_DIFF_TH_R_SLP2       = rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2;
    MINT32 pre_BPC_PDC_DIFF_TH_R_Y2       = rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2;
    MINT32 pre_BPC_PDC_DIFF_TH_R_X2       = rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2;
    MINT32 pre_BPC_PDC_DIFF_TH_R_SLP3       = rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3;
    MINT32 pre_BPC_PDC_DIFF_TH_R_Y3       = rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3;
    MINT32 pre_BPC_PDC_DIFF_TH_R_X3       = rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3;
    MINT32 pre_BPC_PDC_DIFF_TH_B_SLP1       = rLowerBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1;
    MINT32 pre_BPC_PDC_DIFF_TH_B_Y1       = rLowerBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1;
    MINT32 pre_BPC_PDC_DIFF_TH_B_SLP2       = rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2;
    MINT32 pre_BPC_PDC_DIFF_TH_B_Y2       = rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2;
    MINT32 pre_BPC_PDC_DIFF_TH_B_X2       = rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2;
    MINT32 pre_BPC_PDC_DIFF_TH_B_SLP3       = rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3;
    MINT32 pre_BPC_PDC_DIFF_TH_B_Y3       = rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3;
    MINT32 pre_BPC_PDC_DIFF_TH_B_X3       = rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3;
    MINT32 pre_BPC_PDC_GAIN_GR       = rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR;
    MINT32 pre_BPC_PDC_GAIN_GB       = rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB;
    MINT32 pre_BPC_PDC_GAIN_R       = rLowerBPC_PDC.gain2.bits.BPC_PDC_GAIN_R;
    MINT32 pre_BPC_PDC_GAIN_B       = rLowerBPC_PDC.gain2.bits.BPC_PDC_GAIN_B;
    MINT32 pre_BPC_PDC_INTP_CC_EN       = rLowerBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN;
    MINT32 pre_BPC_PDC_ORI_EN       = rLowerBPC_PDC.con.bits.BPC_PDC_ORI_EN;
    MINT32 pre_BPC_PDC_MODE       = rLowerBPC_PDC.con.bits.BPC_PDC_MODE;
    MINT32 pre_BPC_PDC_CT       = rLowerBPC_PDC.con.bits.BPC_PDC_CT;
    MINT32 pre_BPC_PDC_EN       = rLowerBPC_PDC.con.bits.BPC_PDC_EN;
    MINT32 pre_BPC_PDC_GAIN_MODE       = rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE;
    MINT32 pre_BPC_BPC_AVG_PD_MODE       = rLowerBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE;
    MINT32 pre_BPC_BPC_LBL_PD_MODE       = rLowerBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE;
    MINT32 pre_BPC_BPC_RANK_PD_MODE       = rLowerBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE;
    MINT32 pre_BPC_PDC_INTP_PD_MODE       = rLowerBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE;
    MINT32 pre_BPC_ZHDR_OSC_PD_MODE       = rLowerBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE;
    MINT32 pos_BPC_PDC_GCF_L10       = rUpperBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10;
    MINT32 pos_BPC_PDC_GCF_L00       = rUpperBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00;
    MINT32 pos_BPC_PDC_GCF_R10       = rUpperBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10;
    MINT32 pos_BPC_PDC_GCF_R00       = rUpperBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00;
    MINT32 pos_BPC_PDC_BTH       = rUpperBPC_PDC.th_gb.bits.BPC_PDC_BTH;
    MINT32 pos_BPC_PDC_GTH       = rUpperBPC_PDC.th_gb.bits.BPC_PDC_GTH;
    MINT32 pos_BPC_PDC_ATH       = rUpperBPC_PDC.th_ia.bits.BPC_PDC_ATH;
    MINT32 pos_BPC_PDC_ITH       = rUpperBPC_PDC.th_ia.bits.BPC_PDC_ITH;
    MINT32 pos_BPC_PDC_DTH       = rUpperBPC_PDC.th_hd.bits.BPC_PDC_DTH;
    MINT32 pos_BPC_PDC_NTH       = rUpperBPC_PDC.th_hd.bits.BPC_PDC_NTH;
    MINT32 pos_BPC_PDC_GCF_NORM       = rUpperBPC_PDC.sl.bits.BPC_PDC_GCF_NORM;
    MINT32 pos_BPC_PDC_ASL       = rUpperBPC_PDC.sl.bits.BPC_PDC_ASL;
    MINT32 pos_BPC_PDC_ISL       = rUpperBPC_PDC.sl.bits.BPC_PDC_ISL;
    MINT32 pos_BPC_PDC_BSL       = rUpperBPC_PDC.sl.bits.BPC_PDC_BSL;
    MINT32 pos_BPC_PDC_GSL       = rUpperBPC_PDC.sl.bits.BPC_PDC_GSL;
    MINT32 pos_BPC_PDC_BLD_WT_SLP       = rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_SLP1       = rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_Y1       = rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_SLP2       = rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_Y2       = rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_X2       = rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_SLP3       = rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_Y3       = rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3;
    MINT32 pos_BPC_PDC_DIFF_TH_GR_X3       = rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_SLP1       = rUpperBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_Y1       = rUpperBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_SLP2       = rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_Y2       = rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_X2       = rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_SLP3       = rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_Y3       = rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3;
    MINT32 pos_BPC_PDC_DIFF_TH_GB_X3       = rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3;
    MINT32 pos_BPC_PDC_DIFF_TH_R_SLP1       = rUpperBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1;
    MINT32 pos_BPC_PDC_DIFF_TH_R_Y1       = rUpperBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1;
    MINT32 pos_BPC_PDC_DIFF_TH_R_SLP2       = rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2;
    MINT32 pos_BPC_PDC_DIFF_TH_R_Y2       = rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2;
    MINT32 pos_BPC_PDC_DIFF_TH_R_X2       = rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2;
    MINT32 pos_BPC_PDC_DIFF_TH_R_SLP3       = rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3;
    MINT32 pos_BPC_PDC_DIFF_TH_R_Y3       = rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3;
    MINT32 pos_BPC_PDC_DIFF_TH_R_X3       = rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3;
    MINT32 pos_BPC_PDC_DIFF_TH_B_SLP1       = rUpperBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1;
    MINT32 pos_BPC_PDC_DIFF_TH_B_Y1       = rUpperBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1;
    MINT32 pos_BPC_PDC_DIFF_TH_B_SLP2       = rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2;
    MINT32 pos_BPC_PDC_DIFF_TH_B_Y2       = rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2;
    MINT32 pos_BPC_PDC_DIFF_TH_B_X2       = rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2;
    MINT32 pos_BPC_PDC_DIFF_TH_B_SLP3       = rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3;
    MINT32 pos_BPC_PDC_DIFF_TH_B_Y3       = rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3;
    MINT32 pos_BPC_PDC_DIFF_TH_B_X3       = rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3;
    MINT32 pos_BPC_PDC_GAIN_GR       = rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR;
    MINT32 pos_BPC_PDC_GAIN_GB       = rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB;
    MINT32 pos_BPC_PDC_GAIN_R       = rUpperBPC_PDC.gain2.bits.BPC_PDC_GAIN_R;
    MINT32 pos_BPC_PDC_GAIN_B       = rUpperBPC_PDC.gain2.bits.BPC_PDC_GAIN_B;
    MINT32 pos_BPC_PDC_INTP_CC_EN       = rUpperBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN;
    MINT32 pos_BPC_PDC_ORI_EN       = rUpperBPC_PDC.con.bits.BPC_PDC_ORI_EN;
    MINT32 pos_BPC_PDC_MODE       = rUpperBPC_PDC.con.bits.BPC_PDC_MODE;
    MINT32 pos_BPC_PDC_CT       = rUpperBPC_PDC.con.bits.BPC_PDC_CT;
    MINT32 pos_BPC_PDC_EN       = rUpperBPC_PDC.con.bits.BPC_PDC_EN;
    MINT32 pos_BPC_PDC_GAIN_MODE       = rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE;
    MINT32 pos_BPC_BPC_AVG_PD_MODE       = rUpperBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE;
    MINT32 pos_BPC_BPC_LBL_PD_MODE       = rUpperBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE;
    MINT32 pos_BPC_BPC_RANK_PD_MODE       = rUpperBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE;
    MINT32 pos_BPC_PDC_INTP_PD_MODE       = rUpperBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE;
    MINT32 pos_BPC_ZHDR_OSC_PD_MODE       = rUpperBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 BPC_PDC_GCF_L10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GCF_L10, pos_BPC_PDC_GCF_L10, 0);
    MINT32 BPC_PDC_GCF_L00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GCF_L00, pos_BPC_PDC_GCF_L00, 0);
    MINT32 BPC_PDC_GCF_R10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GCF_R10, pos_BPC_PDC_GCF_R10, 0);
    MINT32 BPC_PDC_GCF_R00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GCF_R00, pos_BPC_PDC_GCF_R00, 0);
    MINT32 BPC_PDC_BTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_BTH, pos_BPC_PDC_BTH, 0);
    MINT32 BPC_PDC_GTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GTH, pos_BPC_PDC_GTH, 0);
    MINT32 BPC_PDC_ATH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_ATH, pos_BPC_PDC_ATH, 0);
    MINT32 BPC_PDC_ITH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_ITH, pos_BPC_PDC_ITH, 0);
    MINT32 BPC_PDC_DTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DTH, pos_BPC_PDC_DTH, 0);
    MINT32 BPC_PDC_NTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_NTH, pos_BPC_PDC_NTH, 0);
    MINT32 BPC_PDC_GCF_NORM       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GCF_NORM, pos_BPC_PDC_GCF_NORM, 0);
    MINT32 BPC_PDC_ASL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_ASL, pos_BPC_PDC_ASL, 0);
    MINT32 BPC_PDC_ISL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_ISL, pos_BPC_PDC_ISL, 0);
    MINT32 BPC_PDC_BSL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_BSL, pos_BPC_PDC_BSL, 0);
    MINT32 BPC_PDC_GSL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GSL, pos_BPC_PDC_GSL, 0);
    MINT32 BPC_PDC_BLD_WT_SLP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_BLD_WT_SLP, pos_BPC_PDC_BLD_WT_SLP, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_SLP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_SLP1, pos_BPC_PDC_DIFF_TH_GR_SLP1, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_Y1, pos_BPC_PDC_DIFF_TH_GR_Y1, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_SLP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_SLP2, pos_BPC_PDC_DIFF_TH_GR_SLP2, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_Y2, pos_BPC_PDC_DIFF_TH_GR_Y2, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_X2, pos_BPC_PDC_DIFF_TH_GR_X2, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_SLP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_SLP3, pos_BPC_PDC_DIFF_TH_GR_SLP3, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_Y3, pos_BPC_PDC_DIFF_TH_GR_Y3, 0);
    MINT32 BPC_PDC_DIFF_TH_GR_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GR_X3, pos_BPC_PDC_DIFF_TH_GR_X3, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_SLP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_SLP1, pos_BPC_PDC_DIFF_TH_GB_SLP1, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_Y1, pos_BPC_PDC_DIFF_TH_GB_Y1, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_SLP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_SLP2, pos_BPC_PDC_DIFF_TH_GB_SLP2, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_Y2, pos_BPC_PDC_DIFF_TH_GB_Y2, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_X2, pos_BPC_PDC_DIFF_TH_GB_X2, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_SLP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_SLP3, pos_BPC_PDC_DIFF_TH_GB_SLP3, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_Y3, pos_BPC_PDC_DIFF_TH_GB_Y3, 0);
    MINT32 BPC_PDC_DIFF_TH_GB_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_GB_X3, pos_BPC_PDC_DIFF_TH_GB_X3, 0);
    MINT32 BPC_PDC_DIFF_TH_R_SLP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_SLP1, pos_BPC_PDC_DIFF_TH_R_SLP1, 0);
    MINT32 BPC_PDC_DIFF_TH_R_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_Y1, pos_BPC_PDC_DIFF_TH_R_Y1, 0);
    MINT32 BPC_PDC_DIFF_TH_R_SLP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_SLP2, pos_BPC_PDC_DIFF_TH_R_SLP2, 0);
    MINT32 BPC_PDC_DIFF_TH_R_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_Y2, pos_BPC_PDC_DIFF_TH_R_Y2, 0);
    MINT32 BPC_PDC_DIFF_TH_R_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_X2, pos_BPC_PDC_DIFF_TH_R_X2, 0);
    MINT32 BPC_PDC_DIFF_TH_R_SLP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_SLP3, pos_BPC_PDC_DIFF_TH_R_SLP3, 0);
    MINT32 BPC_PDC_DIFF_TH_R_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_Y3, pos_BPC_PDC_DIFF_TH_R_Y3, 0);
    MINT32 BPC_PDC_DIFF_TH_R_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_R_X3, pos_BPC_PDC_DIFF_TH_R_X3, 0);
    MINT32 BPC_PDC_DIFF_TH_B_SLP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_SLP1, pos_BPC_PDC_DIFF_TH_B_SLP1, 0);
    MINT32 BPC_PDC_DIFF_TH_B_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_Y1, pos_BPC_PDC_DIFF_TH_B_Y1, 0);
    MINT32 BPC_PDC_DIFF_TH_B_SLP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_SLP2, pos_BPC_PDC_DIFF_TH_B_SLP2, 0);
    MINT32 BPC_PDC_DIFF_TH_B_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_Y2, pos_BPC_PDC_DIFF_TH_B_Y2, 0);
    MINT32 BPC_PDC_DIFF_TH_B_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_X2, pos_BPC_PDC_DIFF_TH_B_X2, 0);
    MINT32 BPC_PDC_DIFF_TH_B_SLP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_SLP3, pos_BPC_PDC_DIFF_TH_B_SLP3, 0);
    MINT32 BPC_PDC_DIFF_TH_B_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_Y3, pos_BPC_PDC_DIFF_TH_B_Y3, 0);
    MINT32 BPC_PDC_DIFF_TH_B_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_DIFF_TH_B_X3, pos_BPC_PDC_DIFF_TH_B_X3, 0);
    MINT32 BPC_PDC_GAIN_GR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_GR, pos_BPC_PDC_GAIN_GR, 0);
    MINT32 BPC_PDC_GAIN_GB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_GB, pos_BPC_PDC_GAIN_GB, 0);
    MINT32 BPC_PDC_GAIN_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_R, pos_BPC_PDC_GAIN_R, 0);
    MINT32 BPC_PDC_GAIN_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_B, pos_BPC_PDC_GAIN_B, 0);
    MINT32 BPC_PDC_INTP_CC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_INTP_CC_EN, pos_BPC_PDC_INTP_CC_EN, 1);
    MINT32 BPC_PDC_ORI_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_ORI_EN, pos_BPC_PDC_ORI_EN, 1);
    MINT32 BPC_PDC_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_MODE, pos_BPC_PDC_MODE, 1);
    MINT32 BPC_PDC_CT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_CT, pos_BPC_PDC_CT, 1);
    MINT32 BPC_PDC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_EN, pos_BPC_PDC_EN, 1);
    MINT32 BPC_PDC_GAIN_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_GAIN_MODE, pos_BPC_PDC_GAIN_MODE, 1);
    MINT32 BPC_BPC_AVG_PD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_AVG_PD_MODE, pos_BPC_BPC_AVG_PD_MODE, 1);
    MINT32 BPC_BPC_LBL_PD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_LBL_PD_MODE, pos_BPC_BPC_LBL_PD_MODE, 1);
    MINT32 BPC_BPC_RANK_PD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_BPC_RANK_PD_MODE, pos_BPC_BPC_RANK_PD_MODE, 1);
    MINT32 BPC_PDC_INTP_PD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_PDC_INTP_PD_MODE, pos_BPC_PDC_INTP_PD_MODE, 1);
    MINT32 BPC_ZHDR_OSC_PD_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_BPC_ZHDR_OSC_PD_MODE, pos_BPC_ZHDR_OSC_PD_MODE, 1);


    // interpolation result assignment
    rSmoothBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10       = BPC_PDC_GCF_L10;
    rSmoothBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00       = BPC_PDC_GCF_L00;
    rSmoothBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10       = BPC_PDC_GCF_R10;
    rSmoothBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00       = BPC_PDC_GCF_R00;
    rSmoothBPC_PDC.th_gb.bits.BPC_PDC_BTH       = BPC_PDC_BTH;
    rSmoothBPC_PDC.th_gb.bits.BPC_PDC_GTH       = BPC_PDC_GTH;
    rSmoothBPC_PDC.th_ia.bits.BPC_PDC_ATH       = BPC_PDC_ATH;
    rSmoothBPC_PDC.th_ia.bits.BPC_PDC_ITH       = BPC_PDC_ITH;
    rSmoothBPC_PDC.th_hd.bits.BPC_PDC_DTH       = BPC_PDC_DTH;
    rSmoothBPC_PDC.th_hd.bits.BPC_PDC_NTH       = BPC_PDC_NTH;
    rSmoothBPC_PDC.sl.bits.BPC_PDC_GCF_NORM       = BPC_PDC_GCF_NORM;
    rSmoothBPC_PDC.sl.bits.BPC_PDC_ASL       = BPC_PDC_ASL;
    rSmoothBPC_PDC.sl.bits.BPC_PDC_ISL       = BPC_PDC_ISL;
    rSmoothBPC_PDC.sl.bits.BPC_PDC_BSL       = BPC_PDC_BSL;
    rSmoothBPC_PDC.sl.bits.BPC_PDC_GSL       = BPC_PDC_GSL;
    rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP       = BPC_PDC_BLD_WT_SLP;
    rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1       = BPC_PDC_DIFF_TH_GR_SLP1;
    rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1       = BPC_PDC_DIFF_TH_GR_Y1;
    rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2       = BPC_PDC_DIFF_TH_GR_SLP2;
    rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2       = BPC_PDC_DIFF_TH_GR_Y2;
    rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2       = BPC_PDC_DIFF_TH_GR_X2;
    rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3       = BPC_PDC_DIFF_TH_GR_SLP3;
    rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3       = BPC_PDC_DIFF_TH_GR_Y3;
    rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3       = BPC_PDC_DIFF_TH_GR_X3;
    rSmoothBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1       = BPC_PDC_DIFF_TH_GB_SLP1;
    rSmoothBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1       = BPC_PDC_DIFF_TH_GB_Y1;
    rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2       = BPC_PDC_DIFF_TH_GB_SLP2;
    rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2       = BPC_PDC_DIFF_TH_GB_Y2;
    rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2       = BPC_PDC_DIFF_TH_GB_X2;
    rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3       = BPC_PDC_DIFF_TH_GB_SLP3;
    rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3       = BPC_PDC_DIFF_TH_GB_Y3;
    rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3       = BPC_PDC_DIFF_TH_GB_X3;
    rSmoothBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1       = BPC_PDC_DIFF_TH_R_SLP1;
    rSmoothBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1       = BPC_PDC_DIFF_TH_R_Y1;
    rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2       = BPC_PDC_DIFF_TH_R_SLP2;
    rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2       = BPC_PDC_DIFF_TH_R_Y2;
    rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2       = BPC_PDC_DIFF_TH_R_X2;
    rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3       = BPC_PDC_DIFF_TH_R_SLP3;
    rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3       = BPC_PDC_DIFF_TH_R_Y3;
    rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3       = BPC_PDC_DIFF_TH_R_X3;
    rSmoothBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1       = BPC_PDC_DIFF_TH_B_SLP1;
    rSmoothBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1       = BPC_PDC_DIFF_TH_B_Y1;
    rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2       = BPC_PDC_DIFF_TH_B_SLP2;
    rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2       = BPC_PDC_DIFF_TH_B_Y2;
    rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2       = BPC_PDC_DIFF_TH_B_X2;
    rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3       = BPC_PDC_DIFF_TH_B_SLP3;
    rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3       = BPC_PDC_DIFF_TH_B_Y3;
    rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3       = BPC_PDC_DIFF_TH_B_X3;
    rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR       = BPC_PDC_GAIN_GR;
    rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB       = BPC_PDC_GAIN_GB;
    rSmoothBPC_PDC.gain2.bits.BPC_PDC_GAIN_R       = BPC_PDC_GAIN_R;
    rSmoothBPC_PDC.gain2.bits.BPC_PDC_GAIN_B       = BPC_PDC_GAIN_B;
    rSmoothBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN       = BPC_PDC_INTP_CC_EN;
    rSmoothBPC_PDC.con.bits.BPC_PDC_ORI_EN       = BPC_PDC_ORI_EN;
    rSmoothBPC_PDC.con.bits.BPC_PDC_MODE       = BPC_PDC_MODE;
    rSmoothBPC_PDC.con.bits.BPC_PDC_CT       = BPC_PDC_CT;
    rSmoothBPC_PDC.con.bits.BPC_PDC_EN       = BPC_PDC_EN;
    rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE       = BPC_PDC_GAIN_MODE;
    rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE       = BPC_BPC_AVG_PD_MODE;
    rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE       = BPC_BPC_LBL_PD_MODE;
    rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE       = BPC_BPC_RANK_PD_MODE;
    rSmoothBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE       = BPC_PDC_INTP_PD_MODE;
    rSmoothBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE       = BPC_ZHDR_OSC_PD_MODE;


    // logging
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GCF_L10       = %d, %d, %d", rLowerBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10, rSmoothBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10, rUpperBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L10);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GCF_L00       = %d, %d, %d", rLowerBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00, rSmoothBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00, rUpperBPC_PDC.gain_l0.bits.BPC_PDC_GCF_L00);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GCF_R10       = %d, %d, %d", rLowerBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10, rSmoothBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10, rUpperBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R10);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GCF_R00       = %d, %d, %d", rLowerBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00, rSmoothBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00, rUpperBPC_PDC.gain_r0.bits.BPC_PDC_GCF_R00);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_BTH       = %d, %d, %d", rLowerBPC_PDC.th_gb.bits.BPC_PDC_BTH, rSmoothBPC_PDC.th_gb.bits.BPC_PDC_BTH, rUpperBPC_PDC.th_gb.bits.BPC_PDC_BTH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GTH       = %d, %d, %d", rLowerBPC_PDC.th_gb.bits.BPC_PDC_GTH, rSmoothBPC_PDC.th_gb.bits.BPC_PDC_GTH, rUpperBPC_PDC.th_gb.bits.BPC_PDC_GTH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_ATH       = %d, %d, %d", rLowerBPC_PDC.th_ia.bits.BPC_PDC_ATH, rSmoothBPC_PDC.th_ia.bits.BPC_PDC_ATH, rUpperBPC_PDC.th_ia.bits.BPC_PDC_ATH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_ITH       = %d, %d, %d", rLowerBPC_PDC.th_ia.bits.BPC_PDC_ITH, rSmoothBPC_PDC.th_ia.bits.BPC_PDC_ITH, rUpperBPC_PDC.th_ia.bits.BPC_PDC_ITH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DTH       = %d, %d, %d", rLowerBPC_PDC.th_hd.bits.BPC_PDC_DTH, rSmoothBPC_PDC.th_hd.bits.BPC_PDC_DTH, rUpperBPC_PDC.th_hd.bits.BPC_PDC_DTH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_NTH       = %d, %d, %d", rLowerBPC_PDC.th_hd.bits.BPC_PDC_NTH, rSmoothBPC_PDC.th_hd.bits.BPC_PDC_NTH, rUpperBPC_PDC.th_hd.bits.BPC_PDC_NTH);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GCF_NORM       = %d, %d, %d", rLowerBPC_PDC.sl.bits.BPC_PDC_GCF_NORM, rSmoothBPC_PDC.sl.bits.BPC_PDC_GCF_NORM, rUpperBPC_PDC.sl.bits.BPC_PDC_GCF_NORM);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_ASL       = %d, %d, %d", rLowerBPC_PDC.sl.bits.BPC_PDC_ASL, rSmoothBPC_PDC.sl.bits.BPC_PDC_ASL, rUpperBPC_PDC.sl.bits.BPC_PDC_ASL);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_ISL       = %d, %d, %d", rLowerBPC_PDC.sl.bits.BPC_PDC_ISL, rSmoothBPC_PDC.sl.bits.BPC_PDC_ISL, rUpperBPC_PDC.sl.bits.BPC_PDC_ISL);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_BSL       = %d, %d, %d", rLowerBPC_PDC.sl.bits.BPC_PDC_BSL, rSmoothBPC_PDC.sl.bits.BPC_PDC_BSL, rUpperBPC_PDC.sl.bits.BPC_PDC_BSL);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GSL       = %d, %d, %d", rLowerBPC_PDC.sl.bits.BPC_PDC_GSL, rSmoothBPC_PDC.sl.bits.BPC_PDC_GSL, rUpperBPC_PDC.sl.bits.BPC_PDC_GSL);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_BLD_WT_SLP       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP, rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP, rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_BLD_WT_SLP);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_SLP1       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1, rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1, rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_SLP1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_Y1       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1, rSmoothBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1, rUpperBPC_PDC.diff_th_gr1.bits.BPC_PDC_DIFF_TH_GR_Y1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_SLP2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2, rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2, rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_SLP2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_Y2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2, rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2, rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_Y2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_X2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2, rSmoothBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2, rUpperBPC_PDC.diff_th_gr2.bits.BPC_PDC_DIFF_TH_GR_X2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_SLP3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3, rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3, rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_SLP3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_Y3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3, rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3, rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_Y3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GR_X3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3, rSmoothBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3, rUpperBPC_PDC.diff_th_gr3.bits.BPC_PDC_DIFF_TH_GR_X3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_SLP1       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1, rSmoothBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1, rUpperBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_SLP1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_Y1       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1, rSmoothBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1, rUpperBPC_PDC.diff_th_gb1.bits.BPC_PDC_DIFF_TH_GB_Y1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_SLP2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2, rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2, rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_SLP2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_Y2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2, rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2, rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_Y2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_X2       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2, rSmoothBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2, rUpperBPC_PDC.diff_th_gb2.bits.BPC_PDC_DIFF_TH_GB_X2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_SLP3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3, rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3, rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_SLP3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_Y3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3, rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3, rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_Y3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_GB_X3       = %d, %d, %d", rLowerBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3, rSmoothBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3, rUpperBPC_PDC.diff_th_gb3.bits.BPC_PDC_DIFF_TH_GB_X3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_SLP1       = %d, %d, %d", rLowerBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1, rSmoothBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1, rUpperBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_SLP1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_Y1       = %d, %d, %d", rLowerBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1, rSmoothBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1, rUpperBPC_PDC.diff_th_r1.bits.BPC_PDC_DIFF_TH_R_Y1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_SLP2       = %d, %d, %d", rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2, rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2, rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_SLP2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_Y2       = %d, %d, %d", rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2, rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2, rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_Y2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_X2       = %d, %d, %d", rLowerBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2, rSmoothBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2, rUpperBPC_PDC.diff_th_r2.bits.BPC_PDC_DIFF_TH_R_X2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_SLP3       = %d, %d, %d", rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3, rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3, rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_SLP3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_Y3       = %d, %d, %d", rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3, rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3, rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_Y3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_R_X3       = %d, %d, %d", rLowerBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3, rSmoothBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3, rUpperBPC_PDC.diff_th_r3.bits.BPC_PDC_DIFF_TH_R_X3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_SLP1       = %d, %d, %d", rLowerBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1, rSmoothBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1, rUpperBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_SLP1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_Y1       = %d, %d, %d", rLowerBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1, rSmoothBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1, rUpperBPC_PDC.diff_th_b1.bits.BPC_PDC_DIFF_TH_B_Y1);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_SLP2       = %d, %d, %d", rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2, rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2, rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_SLP2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_Y2       = %d, %d, %d", rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2, rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2, rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_Y2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_X2       = %d, %d, %d", rLowerBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2, rSmoothBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2, rUpperBPC_PDC.diff_th_b2.bits.BPC_PDC_DIFF_TH_B_X2);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_SLP3       = %d, %d, %d", rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3, rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3, rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_SLP3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_Y3       = %d, %d, %d", rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3, rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3, rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_Y3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_DIFF_TH_B_X3       = %d, %d, %d", rLowerBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3, rSmoothBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3, rUpperBPC_PDC.diff_th_b3.bits.BPC_PDC_DIFF_TH_B_X3);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GAIN_GR       = %d, %d, %d", rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR, rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR, rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_GR);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GAIN_GB       = %d, %d, %d", rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB, rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB, rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_GB);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GAIN_R       = %d, %d, %d", rLowerBPC_PDC.gain2.bits.BPC_PDC_GAIN_R, rSmoothBPC_PDC.gain2.bits.BPC_PDC_GAIN_R, rUpperBPC_PDC.gain2.bits.BPC_PDC_GAIN_R);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GAIN_B       = %d, %d, %d", rLowerBPC_PDC.gain2.bits.BPC_PDC_GAIN_B, rSmoothBPC_PDC.gain2.bits.BPC_PDC_GAIN_B, rUpperBPC_PDC.gain2.bits.BPC_PDC_GAIN_B);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_INTP_CC_EN       = %d, %d, %d", rLowerBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN, rSmoothBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN, rUpperBPC_PDC.con.bits.BPC_PDC_INTP_CC_EN);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_ORI_EN       = %d, %d, %d", rLowerBPC_PDC.con.bits.BPC_PDC_ORI_EN, rSmoothBPC_PDC.con.bits.BPC_PDC_ORI_EN, rUpperBPC_PDC.con.bits.BPC_PDC_ORI_EN);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_MODE       = %d, %d, %d", rLowerBPC_PDC.con.bits.BPC_PDC_MODE, rSmoothBPC_PDC.con.bits.BPC_PDC_MODE, rUpperBPC_PDC.con.bits.BPC_PDC_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_CT       = %d, %d, %d", rLowerBPC_PDC.con.bits.BPC_PDC_CT, rSmoothBPC_PDC.con.bits.BPC_PDC_CT, rUpperBPC_PDC.con.bits.BPC_PDC_CT);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_EN       = %d, %d, %d", rLowerBPC_PDC.con.bits.BPC_PDC_EN, rSmoothBPC_PDC.con.bits.BPC_PDC_EN, rUpperBPC_PDC.con.bits.BPC_PDC_EN);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_GAIN_MODE       = %d, %d, %d", rLowerBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE, rSmoothBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE, rUpperBPC_PDC.gain1.bits.BPC_PDC_GAIN_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_BPC_AVG_PD_MODE       = %d, %d, %d", rLowerBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE, rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE, rUpperBPC_PDC.pd_mode.bits.BPC_BPC_AVG_PD_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_BPC_LBL_PD_MODE       = %d, %d, %d", rLowerBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE, rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE, rUpperBPC_PDC.pd_mode.bits.BPC_BPC_LBL_PD_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_BPC_RANK_PD_MODE       = %d, %d, %d", rLowerBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE, rSmoothBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE, rUpperBPC_PDC.pd_mode.bits.BPC_BPC_RANK_PD_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_PDC_INTP_PD_MODE       = %d, %d, %d", rLowerBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE, rSmoothBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE, rUpperBPC_PDC.pd_mode.bits.BPC_PDC_INTP_PD_MODE);
    INTER_LOG_IF(bSmoothBPC_PDCDebug, "[L,S,U]BPC_ZHDR_OSC_PD_MODE       = %d, %d, %d", rLowerBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE, rSmoothBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE, rUpperBPC_PDC.pd_mode.bits.BPC_ZHDR_OSC_PD_MODE);

}

MVOID Smooth_LDNR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_LDNR_T const& rUpperLDNR,   // LDNR settings for upper ISO
                ISP_NVRAM_LDNR_T const& rLowerLDNR,   // LDNR settings for lower ISO
                ISP_NVRAM_LDNR_T& rSmoothLDNR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ldnr.enable", value, "0");
    MBOOL bSmoothLDNRDebug = atoi(value);

    INTER_LOG_IF(bSmoothLDNRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_LDNR_RAT       = rLowerLDNR.con1.bits.LDNR_RAT;
    MINT32 pre_LDNR_ACT_G_EN       = rLowerLDNR.ee_con1.bits.LDNR_ACT_G_EN;
    MINT32 pre_LDNR_LR_RAT       = rLowerLDNR.ee_con1.bits.LDNR_LR_RAT;
    MINT32 pre_LDNR_RAW_FMT       = rLowerLDNR.ee_con1.bits.LDNR_RAW_FMT;
    MINT32 pre_LDNR_LM_Y2       = rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y2;
    MINT32 pre_LDNR_LM_Y1       = rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y1;
    MINT32 pre_LDNR_LM_Y0       = rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y0;
    MINT32 pre_LDNR_LM_Y5       = rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y5;
    MINT32 pre_LDNR_LM_Y4       = rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y4;
    MINT32 pre_LDNR_LM_Y3       = rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y3;
    MINT32 pre_LDNR_SL_HR       = rLowerLDNR.ee_sl.bits.LDNR_SL_HR;
    MINT32 pre_LDNR_SL_L_Y2       = rLowerLDNR.ee_sl.bits.LDNR_SL_L_Y2;
    MINT32 pre_LDNR_SL_L_Y1       = rLowerLDNR.ee_sl.bits.LDNR_SL_L_Y1;
    MINT32 pre_LDNR_HSLL       = rLowerLDNR.ee_lwb.bits.LDNR_HSLL;
    MINT32 pre_LDNR_H3_LWB       = rLowerLDNR.ee_lwb.bits.LDNR_H3_LWB;
    MINT32 pre_LDNR_H2_LWB       = rLowerLDNR.ee_lwb.bits.LDNR_H2_LWB;
    MINT32 pre_LDNR_H1_LWB       = rLowerLDNR.ee_lwb.bits.LDNR_H1_LWB;
    MINT32 pre_LDNR_HSLR       = rLowerLDNR.ee_upb.bits.LDNR_HSLR;
    MINT32 pre_LDNR_H3_UPB       = rLowerLDNR.ee_upb.bits.LDNR_H3_UPB;
    MINT32 pre_LDNR_H2_UPB       = rLowerLDNR.ee_upb.bits.LDNR_H2_UPB;
    MINT32 pre_LDNR_H1_UPB       = rLowerLDNR.ee_upb.bits.LDNR_H1_UPB;
    MINT32 pre_LDNR_RNG4       = rLowerLDNR.rng.bits.LDNR_RNG4;
    MINT32 pre_LDNR_RNG3       = rLowerLDNR.rng.bits.LDNR_RNG3;
    MINT32 pre_LDNR_RNG2       = rLowerLDNR.rng.bits.LDNR_RNG2;
    MINT32 pre_LDNR_RNG1       = rLowerLDNR.rng.bits.LDNR_RNG1;
    MINT32 pre_LDNR_CTHL       = rLowerLDNR.con2.bits.LDNR_CTHL;
    MINT32 pre_LDNR_CTHR       = rLowerLDNR.con2.bits.LDNR_CTHR;
    MINT32 pre_LDNR_RAD       = rLowerLDNR.con2.bits.LDNR_RAD;
    MINT32 pre_LDNR_PRF_RAT       = rLowerLDNR.con2.bits.LDNR_PRF_RAT;
    MINT32 pre_LDNR_MED_RAT       = rLowerLDNR.con2.bits.LDNR_MED_RAT;
    MINT32 pre_LDNR_SL_Y1       = rLowerLDNR.sl.bits.LDNR_SL_Y1;
    MINT32 pre_LDNR_SL_Y2       = rLowerLDNR.sl.bits.LDNR_SL_Y2;
    MINT32 pre_LDNR_SL_EN       = rLowerLDNR.sl.bits.LDNR_SL_EN;
    MINT32 pre_LDNR_STH_C1       = rLowerLDNR.ssl_sth.bits.LDNR_STH_C1;
    MINT32 pre_LDNR_SSL_C1       = rLowerLDNR.ssl_sth.bits.LDNR_SSL_C1;
    MINT32 pre_LDNR_STH_C2       = rLowerLDNR.ssl_sth.bits.LDNR_STH_C2;
    MINT32 pre_LDNR_SSL_C2       = rLowerLDNR.ssl_sth.bits.LDNR_SSL_C2;
    MINT32 pre_LDNR_H3_GN       = rLowerLDNR.ee_con2.bits.LDNR_H3_GN;
    MINT32 pre_LDNR_H2_GN       = rLowerLDNR.ee_con2.bits.LDNR_H2_GN;
    MINT32 pre_LDNR_H1_GN       = rLowerLDNR.ee_con2.bits.LDNR_H1_GN;
    MINT32 pre_LDNR_HA_STR       = rLowerLDNR.ee_con2.bits.LDNR_HA_STR;
    MINT32 pre_LDNR_UN_TH       = rLowerLDNR.ee_th.bits.LDNR_UN_TH;
    MINT32 pre_LDNR_OV_TH       = rLowerLDNR.ee_th.bits.LDNR_OV_TH;
    MINT32 pre_LDNR_CLIP_TH       = rLowerLDNR.ee_th.bits.LDNR_CLIP_TH;
    MINT32 pre_LDNR_CORE_TH       = rLowerLDNR.ee_th.bits.LDNR_CORE_TH;
    MINT32 pre_LDNR_HNEG_GN       = rLowerLDNR.ee_hgn.bits.LDNR_HNEG_GN;
    MINT32 pre_LDNR_HPOS_GN       = rLowerLDNR.ee_hgn.bits.LDNR_HPOS_GN;
    MINT32 pre_LDNR_COEF_B_C1       = rLowerLDNR.coef_c1.bits.LDNR_COEF_B_C1;
    MINT32 pre_LDNR_COEF_G_C1       = rLowerLDNR.coef_c1.bits.LDNR_COEF_G_C1;
    MINT32 pre_LDNR_COEF_R_C1       = rLowerLDNR.coef_c1.bits.LDNR_COEF_R_C1;
    MINT32 pre_LDNR_COEF_B_C2       = rLowerLDNR.coef_c2.bits.LDNR_COEF_B_C2;
    MINT32 pre_LDNR_COEF_G_C2       = rLowerLDNR.coef_c2.bits.LDNR_COEF_G_C2;
    MINT32 pre_LDNR_COEF_R_C2       = rLowerLDNR.coef_c2.bits.LDNR_COEF_R_C2;
    MINT32 pre_LDNR_NM_SL_B       = rLowerLDNR.nm_b.bits.LDNR_NM_SL_B;
    MINT32 pre_LDNR_NM_OFST_B       = rLowerLDNR.nm_b.bits.LDNR_NM_OFST_B;
    MINT32 pre_LDNR_NM_SL_G       = rLowerLDNR.nm_g.bits.LDNR_NM_SL_G;
    MINT32 pre_LDNR_NM_OFST_G       = rLowerLDNR.nm_g.bits.LDNR_NM_OFST_G;
    MINT32 pre_LDNR_NM_SL_R       = rLowerLDNR.nm_r.bits.LDNR_NM_SL_R;
    MINT32 pre_LDNR_NM_OFST_R       = rLowerLDNR.nm_r.bits.LDNR_NM_OFST_R;
    MINT32 pre_LDNR_CNV_01       = rLowerLDNR.cnv_00_01.bits.LDNR_CNV_01;
    MINT32 pre_LDNR_CNV_00       = rLowerLDNR.cnv_00_01.bits.LDNR_CNV_00;
    MINT32 pre_LDNR_CNV_02       = rLowerLDNR.cnv_02.bits.LDNR_CNV_02;
    MINT32 pre_LDNR_CNV_11       = rLowerLDNR.cnv_10_11.bits.LDNR_CNV_11;
    MINT32 pre_LDNR_CNV_10       = rLowerLDNR.cnv_10_11.bits.LDNR_CNV_10;
    MINT32 pre_LDNR_CNV_12       = rLowerLDNR.cnv_12.bits.LDNR_CNV_12;
    MINT32 pre_LDNR_CNV_21       = rLowerLDNR.cnv_20_21.bits.LDNR_CNV_21;
    MINT32 pre_LDNR_CNV_20       = rLowerLDNR.cnv_20_21.bits.LDNR_CNV_20;
    MINT32 pre_LDNR_CNV_22       = rLowerLDNR.cnv_22.bits.LDNR_CNV_22;
    MINT32 pre_LDNR_ICNV_01       = rLowerLDNR.icnv_00_01.bits.LDNR_ICNV_01;
    MINT32 pre_LDNR_ICNV_00       = rLowerLDNR.icnv_00_01.bits.LDNR_ICNV_00;
    MINT32 pre_LDNR_ICNV_02       = rLowerLDNR.icnv_02.bits.LDNR_ICNV_02;
    MINT32 pre_LDNR_ICNV_11       = rLowerLDNR.icnv_10_11.bits.LDNR_ICNV_11;
    MINT32 pre_LDNR_ICNV_10       = rLowerLDNR.icnv_10_11.bits.LDNR_ICNV_10;
    MINT32 pre_LDNR_ICNV_12       = rLowerLDNR.icnv_12.bits.LDNR_ICNV_12;
    MINT32 pre_LDNR_ICNV_21       = rLowerLDNR.icnv_20_21.bits.LDNR_ICNV_21;
    MINT32 pre_LDNR_ICNV_20       = rLowerLDNR.icnv_20_21.bits.LDNR_ICNV_20;
    MINT32 pre_LDNR_ICNV_22       = rLowerLDNR.icnv_22.bits.LDNR_ICNV_22;
    MINT32 pos_LDNR_RAT       = rUpperLDNR.con1.bits.LDNR_RAT;
    MINT32 pos_LDNR_ACT_G_EN       = rUpperLDNR.ee_con1.bits.LDNR_ACT_G_EN;
    MINT32 pos_LDNR_LR_RAT       = rUpperLDNR.ee_con1.bits.LDNR_LR_RAT;
    MINT32 pos_LDNR_RAW_FMT       = rUpperLDNR.ee_con1.bits.LDNR_RAW_FMT;
    MINT32 pos_LDNR_LM_Y2       = rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y2;
    MINT32 pos_LDNR_LM_Y1       = rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y1;
    MINT32 pos_LDNR_LM_Y0       = rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y0;
    MINT32 pos_LDNR_LM_Y5       = rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y5;
    MINT32 pos_LDNR_LM_Y4       = rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y4;
    MINT32 pos_LDNR_LM_Y3       = rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y3;
    MINT32 pos_LDNR_SL_HR       = rUpperLDNR.ee_sl.bits.LDNR_SL_HR;
    MINT32 pos_LDNR_SL_L_Y2       = rUpperLDNR.ee_sl.bits.LDNR_SL_L_Y2;
    MINT32 pos_LDNR_SL_L_Y1       = rUpperLDNR.ee_sl.bits.LDNR_SL_L_Y1;
    MINT32 pos_LDNR_HSLL       = rUpperLDNR.ee_lwb.bits.LDNR_HSLL;
    MINT32 pos_LDNR_H3_LWB       = rUpperLDNR.ee_lwb.bits.LDNR_H3_LWB;
    MINT32 pos_LDNR_H2_LWB       = rUpperLDNR.ee_lwb.bits.LDNR_H2_LWB;
    MINT32 pos_LDNR_H1_LWB       = rUpperLDNR.ee_lwb.bits.LDNR_H1_LWB;
    MINT32 pos_LDNR_HSLR       = rUpperLDNR.ee_upb.bits.LDNR_HSLR;
    MINT32 pos_LDNR_H3_UPB       = rUpperLDNR.ee_upb.bits.LDNR_H3_UPB;
    MINT32 pos_LDNR_H2_UPB       = rUpperLDNR.ee_upb.bits.LDNR_H2_UPB;
    MINT32 pos_LDNR_H1_UPB       = rUpperLDNR.ee_upb.bits.LDNR_H1_UPB;
    MINT32 pos_LDNR_RNG4       = rUpperLDNR.rng.bits.LDNR_RNG4;
    MINT32 pos_LDNR_RNG3       = rUpperLDNR.rng.bits.LDNR_RNG3;
    MINT32 pos_LDNR_RNG2       = rUpperLDNR.rng.bits.LDNR_RNG2;
    MINT32 pos_LDNR_RNG1       = rUpperLDNR.rng.bits.LDNR_RNG1;
    MINT32 pos_LDNR_CTHL       = rUpperLDNR.con2.bits.LDNR_CTHL;
    MINT32 pos_LDNR_CTHR       = rUpperLDNR.con2.bits.LDNR_CTHR;
    MINT32 pos_LDNR_RAD       = rUpperLDNR.con2.bits.LDNR_RAD;
    MINT32 pos_LDNR_PRF_RAT       = rUpperLDNR.con2.bits.LDNR_PRF_RAT;
    MINT32 pos_LDNR_MED_RAT       = rUpperLDNR.con2.bits.LDNR_MED_RAT;
    MINT32 pos_LDNR_SL_Y1       = rUpperLDNR.sl.bits.LDNR_SL_Y1;
    MINT32 pos_LDNR_SL_Y2       = rUpperLDNR.sl.bits.LDNR_SL_Y2;
    MINT32 pos_LDNR_SL_EN       = rUpperLDNR.sl.bits.LDNR_SL_EN;
    MINT32 pos_LDNR_STH_C1       = rUpperLDNR.ssl_sth.bits.LDNR_STH_C1;
    MINT32 pos_LDNR_SSL_C1       = rUpperLDNR.ssl_sth.bits.LDNR_SSL_C1;
    MINT32 pos_LDNR_STH_C2       = rUpperLDNR.ssl_sth.bits.LDNR_STH_C2;
    MINT32 pos_LDNR_SSL_C2       = rUpperLDNR.ssl_sth.bits.LDNR_SSL_C2;
    MINT32 pos_LDNR_H3_GN       = rUpperLDNR.ee_con2.bits.LDNR_H3_GN;
    MINT32 pos_LDNR_H2_GN       = rUpperLDNR.ee_con2.bits.LDNR_H2_GN;
    MINT32 pos_LDNR_H1_GN       = rUpperLDNR.ee_con2.bits.LDNR_H1_GN;
    MINT32 pos_LDNR_HA_STR       = rUpperLDNR.ee_con2.bits.LDNR_HA_STR;
    MINT32 pos_LDNR_UN_TH       = rUpperLDNR.ee_th.bits.LDNR_UN_TH;
    MINT32 pos_LDNR_OV_TH       = rUpperLDNR.ee_th.bits.LDNR_OV_TH;
    MINT32 pos_LDNR_CLIP_TH       = rUpperLDNR.ee_th.bits.LDNR_CLIP_TH;
    MINT32 pos_LDNR_CORE_TH       = rUpperLDNR.ee_th.bits.LDNR_CORE_TH;
    MINT32 pos_LDNR_HNEG_GN       = rUpperLDNR.ee_hgn.bits.LDNR_HNEG_GN;
    MINT32 pos_LDNR_HPOS_GN       = rUpperLDNR.ee_hgn.bits.LDNR_HPOS_GN;
    MINT32 pos_LDNR_COEF_B_C1       = rUpperLDNR.coef_c1.bits.LDNR_COEF_B_C1;
    MINT32 pos_LDNR_COEF_G_C1       = rUpperLDNR.coef_c1.bits.LDNR_COEF_G_C1;
    MINT32 pos_LDNR_COEF_R_C1       = rUpperLDNR.coef_c1.bits.LDNR_COEF_R_C1;
    MINT32 pos_LDNR_COEF_B_C2       = rUpperLDNR.coef_c2.bits.LDNR_COEF_B_C2;
    MINT32 pos_LDNR_COEF_G_C2       = rUpperLDNR.coef_c2.bits.LDNR_COEF_G_C2;
    MINT32 pos_LDNR_COEF_R_C2       = rUpperLDNR.coef_c2.bits.LDNR_COEF_R_C2;
    MINT32 pos_LDNR_NM_SL_B       = rUpperLDNR.nm_b.bits.LDNR_NM_SL_B;
    MINT32 pos_LDNR_NM_OFST_B       = rUpperLDNR.nm_b.bits.LDNR_NM_OFST_B;
    MINT32 pos_LDNR_NM_SL_G       = rUpperLDNR.nm_g.bits.LDNR_NM_SL_G;
    MINT32 pos_LDNR_NM_OFST_G       = rUpperLDNR.nm_g.bits.LDNR_NM_OFST_G;
    MINT32 pos_LDNR_NM_SL_R       = rUpperLDNR.nm_r.bits.LDNR_NM_SL_R;
    MINT32 pos_LDNR_NM_OFST_R       = rUpperLDNR.nm_r.bits.LDNR_NM_OFST_R;
    MINT32 pos_LDNR_CNV_01       = rUpperLDNR.cnv_00_01.bits.LDNR_CNV_01;
    MINT32 pos_LDNR_CNV_00       = rUpperLDNR.cnv_00_01.bits.LDNR_CNV_00;
    MINT32 pos_LDNR_CNV_02       = rUpperLDNR.cnv_02.bits.LDNR_CNV_02;
    MINT32 pos_LDNR_CNV_11       = rUpperLDNR.cnv_10_11.bits.LDNR_CNV_11;
    MINT32 pos_LDNR_CNV_10       = rUpperLDNR.cnv_10_11.bits.LDNR_CNV_10;
    MINT32 pos_LDNR_CNV_12       = rUpperLDNR.cnv_12.bits.LDNR_CNV_12;
    MINT32 pos_LDNR_CNV_21       = rUpperLDNR.cnv_20_21.bits.LDNR_CNV_21;
    MINT32 pos_LDNR_CNV_20       = rUpperLDNR.cnv_20_21.bits.LDNR_CNV_20;
    MINT32 pos_LDNR_CNV_22       = rUpperLDNR.cnv_22.bits.LDNR_CNV_22;
    MINT32 pos_LDNR_ICNV_01       = rUpperLDNR.icnv_00_01.bits.LDNR_ICNV_01;
    MINT32 pos_LDNR_ICNV_00       = rUpperLDNR.icnv_00_01.bits.LDNR_ICNV_00;
    MINT32 pos_LDNR_ICNV_02       = rUpperLDNR.icnv_02.bits.LDNR_ICNV_02;
    MINT32 pos_LDNR_ICNV_11       = rUpperLDNR.icnv_10_11.bits.LDNR_ICNV_11;
    MINT32 pos_LDNR_ICNV_10       = rUpperLDNR.icnv_10_11.bits.LDNR_ICNV_10;
    MINT32 pos_LDNR_ICNV_12       = rUpperLDNR.icnv_12.bits.LDNR_ICNV_12;
    MINT32 pos_LDNR_ICNV_21       = rUpperLDNR.icnv_20_21.bits.LDNR_ICNV_21;
    MINT32 pos_LDNR_ICNV_20       = rUpperLDNR.icnv_20_21.bits.LDNR_ICNV_20;
    MINT32 pos_LDNR_ICNV_22       = rUpperLDNR.icnv_22.bits.LDNR_ICNV_22;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 LDNR_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RAT, pos_LDNR_RAT, 0);
    MINT32 LDNR_ACT_G_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ACT_G_EN, pos_LDNR_ACT_G_EN, 0);
    MINT32 LDNR_LR_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LR_RAT, pos_LDNR_LR_RAT, 0);
    MINT32 LDNR_RAW_FMT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RAW_FMT, pos_LDNR_RAW_FMT, 0);
    MINT32 LDNR_LM_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y2, pos_LDNR_LM_Y2, 0);
    MINT32 LDNR_LM_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y1, pos_LDNR_LM_Y1, 0);
    MINT32 LDNR_LM_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y0, pos_LDNR_LM_Y0, 0);
    MINT32 LDNR_LM_Y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y5, pos_LDNR_LM_Y5, 0);
    MINT32 LDNR_LM_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y4, pos_LDNR_LM_Y4, 0);
    MINT32 LDNR_LM_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_LM_Y3, pos_LDNR_LM_Y3, 0);
    MINT32 LDNR_SL_HR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_HR, pos_LDNR_SL_HR, 0);
    MINT32 LDNR_SL_L_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_L_Y2, pos_LDNR_SL_L_Y2, 0);
    MINT32 LDNR_SL_L_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_L_Y1, pos_LDNR_SL_L_Y1, 0);
    MINT32 LDNR_HSLL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_HSLL, pos_LDNR_HSLL, 0);
    MINT32 LDNR_H3_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H3_LWB, pos_LDNR_H3_LWB, 0);
    MINT32 LDNR_H2_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H2_LWB, pos_LDNR_H2_LWB, 0);
    MINT32 LDNR_H1_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H1_LWB, pos_LDNR_H1_LWB, 0);
    MINT32 LDNR_HSLR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_HSLR, pos_LDNR_HSLR, 0);
    MINT32 LDNR_H3_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H3_UPB, pos_LDNR_H3_UPB, 0);
    MINT32 LDNR_H2_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H2_UPB, pos_LDNR_H2_UPB, 0);
    MINT32 LDNR_H1_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H1_UPB, pos_LDNR_H1_UPB, 0);
    MINT32 LDNR_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RNG4, pos_LDNR_RNG4, 0);
    MINT32 LDNR_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RNG3, pos_LDNR_RNG3, 0);
    MINT32 LDNR_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RNG2, pos_LDNR_RNG2, 0);
    MINT32 LDNR_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RNG1, pos_LDNR_RNG1, 0);
    MINT32 LDNR_CTHL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CTHL, pos_LDNR_CTHL, 0);
    MINT32 LDNR_CTHR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CTHR, pos_LDNR_CTHR, 0);
    MINT32 LDNR_RAD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_RAD, pos_LDNR_RAD, 0);
    MINT32 LDNR_PRF_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_PRF_RAT, pos_LDNR_PRF_RAT, 0);
    MINT32 LDNR_MED_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_MED_RAT, pos_LDNR_MED_RAT, 0);
    MINT32 LDNR_SL_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_Y1, pos_LDNR_SL_Y1, 0);
    MINT32 LDNR_SL_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_Y2, pos_LDNR_SL_Y2, 0);
    MINT32 LDNR_SL_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SL_EN, pos_LDNR_SL_EN, 0);
    MINT32 LDNR_STH_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_STH_C1, pos_LDNR_STH_C1, 0);
    MINT32 LDNR_SSL_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SSL_C1, pos_LDNR_SSL_C1, 0);
    MINT32 LDNR_STH_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_STH_C2, pos_LDNR_STH_C2, 0);
    MINT32 LDNR_SSL_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_SSL_C2, pos_LDNR_SSL_C2, 0);
    MINT32 LDNR_H3_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H3_GN, pos_LDNR_H3_GN, 0);
    MINT32 LDNR_H2_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H2_GN, pos_LDNR_H2_GN, 0);
    MINT32 LDNR_H1_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_H1_GN, pos_LDNR_H1_GN, 0);
    MINT32 LDNR_HA_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_HA_STR, pos_LDNR_HA_STR, 0);
    MINT32 LDNR_UN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_UN_TH, pos_LDNR_UN_TH, 0);
    MINT32 LDNR_OV_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_OV_TH, pos_LDNR_OV_TH, 0);
    MINT32 LDNR_CLIP_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CLIP_TH, pos_LDNR_CLIP_TH, 0);
    MINT32 LDNR_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CORE_TH, pos_LDNR_CORE_TH, 0);
    MINT32 LDNR_HNEG_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_HNEG_GN, pos_LDNR_HNEG_GN, 0);
    MINT32 LDNR_HPOS_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_HPOS_GN, pos_LDNR_HPOS_GN, 0);
    MINT32 LDNR_COEF_B_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_B_C1, pos_LDNR_COEF_B_C1, 0);
    MINT32 LDNR_COEF_G_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_G_C1, pos_LDNR_COEF_G_C1, 0);
    MINT32 LDNR_COEF_R_C1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_R_C1, pos_LDNR_COEF_R_C1, 0);
    MINT32 LDNR_COEF_B_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_B_C2, pos_LDNR_COEF_B_C2, 0);
    MINT32 LDNR_COEF_G_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_G_C2, pos_LDNR_COEF_G_C2, 0);
    MINT32 LDNR_COEF_R_C2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_COEF_R_C2, pos_LDNR_COEF_R_C2, 0);
    MINT32 LDNR_NM_SL_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_SL_B, pos_LDNR_NM_SL_B, 0);
    MINT32 LDNR_NM_OFST_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_OFST_B, pos_LDNR_NM_OFST_B, 0);
    MINT32 LDNR_NM_SL_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_SL_G, pos_LDNR_NM_SL_G, 0);
    MINT32 LDNR_NM_OFST_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_OFST_G, pos_LDNR_NM_OFST_G, 0);
    MINT32 LDNR_NM_SL_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_SL_R, pos_LDNR_NM_SL_R, 0);
    MINT32 LDNR_NM_OFST_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_NM_OFST_R, pos_LDNR_NM_OFST_R, 0);
    MINT32 LDNR_CNV_01       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_01, pos_LDNR_CNV_01, 1);
    MINT32 LDNR_CNV_00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_00, pos_LDNR_CNV_00, 1);
    MINT32 LDNR_CNV_02       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_02, pos_LDNR_CNV_02, 1);
    MINT32 LDNR_CNV_11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_11, pos_LDNR_CNV_11, 1);
    MINT32 LDNR_CNV_10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_10, pos_LDNR_CNV_10, 1);
    MINT32 LDNR_CNV_12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_12, pos_LDNR_CNV_12, 1);
    MINT32 LDNR_CNV_21       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_21, pos_LDNR_CNV_21, 1);
    MINT32 LDNR_CNV_20       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_20, pos_LDNR_CNV_20, 1);
    MINT32 LDNR_CNV_22       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_CNV_22, pos_LDNR_CNV_22, 1);
    MINT32 LDNR_ICNV_01       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_01, pos_LDNR_ICNV_01, 1);
    MINT32 LDNR_ICNV_00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_00, pos_LDNR_ICNV_00, 1);
    MINT32 LDNR_ICNV_02       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_02, pos_LDNR_ICNV_02, 1);
    MINT32 LDNR_ICNV_11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_11, pos_LDNR_ICNV_11, 1);
    MINT32 LDNR_ICNV_10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_10, pos_LDNR_ICNV_10, 1);
    MINT32 LDNR_ICNV_12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_12, pos_LDNR_ICNV_12, 1);
    MINT32 LDNR_ICNV_21       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_21, pos_LDNR_ICNV_21, 1);
    MINT32 LDNR_ICNV_20       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_20, pos_LDNR_ICNV_20, 1);
    MINT32 LDNR_ICNV_22       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LDNR_ICNV_22, pos_LDNR_ICNV_22, 1);


    // interpolation result assignment
    rSmoothLDNR.con1.bits.LDNR_RAT       = LDNR_RAT;
    rSmoothLDNR.ee_con1.bits.LDNR_ACT_G_EN       = LDNR_ACT_G_EN;
    rSmoothLDNR.ee_con1.bits.LDNR_LR_RAT       = LDNR_LR_RAT;
    rSmoothLDNR.ee_con1.bits.LDNR_RAW_FMT       = LDNR_RAW_FMT;
    rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y2       = LDNR_LM_Y2;
    rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y1       = LDNR_LM_Y1;
    rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y0       = LDNR_LM_Y0;
    rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y5       = LDNR_LM_Y5;
    rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y4       = LDNR_LM_Y4;
    rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y3       = LDNR_LM_Y3;
    rSmoothLDNR.ee_sl.bits.LDNR_SL_HR       = LDNR_SL_HR;
    rSmoothLDNR.ee_sl.bits.LDNR_SL_L_Y2       = LDNR_SL_L_Y2;
    rSmoothLDNR.ee_sl.bits.LDNR_SL_L_Y1       = LDNR_SL_L_Y1;
    rSmoothLDNR.ee_lwb.bits.LDNR_HSLL       = LDNR_HSLL;
    rSmoothLDNR.ee_lwb.bits.LDNR_H3_LWB       = LDNR_H3_LWB;
    rSmoothLDNR.ee_lwb.bits.LDNR_H2_LWB       = LDNR_H2_LWB;
    rSmoothLDNR.ee_lwb.bits.LDNR_H1_LWB       = LDNR_H1_LWB;
    rSmoothLDNR.ee_upb.bits.LDNR_HSLR       = LDNR_HSLR;
    rSmoothLDNR.ee_upb.bits.LDNR_H3_UPB       = LDNR_H3_UPB;
    rSmoothLDNR.ee_upb.bits.LDNR_H2_UPB       = LDNR_H2_UPB;
    rSmoothLDNR.ee_upb.bits.LDNR_H1_UPB       = LDNR_H1_UPB;
    rSmoothLDNR.rng.bits.LDNR_RNG4       = LDNR_RNG4;
    rSmoothLDNR.rng.bits.LDNR_RNG3       = LDNR_RNG3;
    rSmoothLDNR.rng.bits.LDNR_RNG2       = LDNR_RNG2;
    rSmoothLDNR.rng.bits.LDNR_RNG1       = LDNR_RNG1;
    rSmoothLDNR.con2.bits.LDNR_CTHL       = LDNR_CTHL;
    rSmoothLDNR.con2.bits.LDNR_CTHR       = LDNR_CTHR;
    rSmoothLDNR.con2.bits.LDNR_RAD       = LDNR_RAD;
    rSmoothLDNR.con2.bits.LDNR_PRF_RAT       = LDNR_PRF_RAT;
    rSmoothLDNR.con2.bits.LDNR_MED_RAT       = LDNR_MED_RAT;
    rSmoothLDNR.sl.bits.LDNR_SL_Y1       = LDNR_SL_Y1;
    rSmoothLDNR.sl.bits.LDNR_SL_Y2       = LDNR_SL_Y2;
    rSmoothLDNR.sl.bits.LDNR_SL_EN       = LDNR_SL_EN;
    rSmoothLDNR.ssl_sth.bits.LDNR_STH_C1       = LDNR_STH_C1;
    rSmoothLDNR.ssl_sth.bits.LDNR_SSL_C1       = LDNR_SSL_C1;
    rSmoothLDNR.ssl_sth.bits.LDNR_STH_C2       = LDNR_STH_C2;
    rSmoothLDNR.ssl_sth.bits.LDNR_SSL_C2       = LDNR_SSL_C2;
    rSmoothLDNR.ee_con2.bits.LDNR_H3_GN       = LDNR_H3_GN;
    rSmoothLDNR.ee_con2.bits.LDNR_H2_GN       = LDNR_H2_GN;
    rSmoothLDNR.ee_con2.bits.LDNR_H1_GN       = LDNR_H1_GN;
    rSmoothLDNR.ee_con2.bits.LDNR_HA_STR       = LDNR_HA_STR;
    rSmoothLDNR.ee_th.bits.LDNR_UN_TH       = LDNR_UN_TH;
    rSmoothLDNR.ee_th.bits.LDNR_OV_TH       = LDNR_OV_TH;
    rSmoothLDNR.ee_th.bits.LDNR_CLIP_TH       = LDNR_CLIP_TH;
    rSmoothLDNR.ee_th.bits.LDNR_CORE_TH       = LDNR_CORE_TH;
    rSmoothLDNR.ee_hgn.bits.LDNR_HNEG_GN       = LDNR_HNEG_GN;
    rSmoothLDNR.ee_hgn.bits.LDNR_HPOS_GN       = LDNR_HPOS_GN;
    rSmoothLDNR.coef_c1.bits.LDNR_COEF_B_C1       = LDNR_COEF_B_C1;
    rSmoothLDNR.coef_c1.bits.LDNR_COEF_G_C1       = LDNR_COEF_G_C1;
    rSmoothLDNR.coef_c1.bits.LDNR_COEF_R_C1       = LDNR_COEF_R_C1;
    rSmoothLDNR.coef_c2.bits.LDNR_COEF_B_C2       = LDNR_COEF_B_C2;
    rSmoothLDNR.coef_c2.bits.LDNR_COEF_G_C2       = LDNR_COEF_G_C2;
    rSmoothLDNR.coef_c2.bits.LDNR_COEF_R_C2       = LDNR_COEF_R_C2;
    rSmoothLDNR.nm_b.bits.LDNR_NM_SL_B       = LDNR_NM_SL_B;
    rSmoothLDNR.nm_b.bits.LDNR_NM_OFST_B       = LDNR_NM_OFST_B;
    rSmoothLDNR.nm_g.bits.LDNR_NM_SL_G       = LDNR_NM_SL_G;
    rSmoothLDNR.nm_g.bits.LDNR_NM_OFST_G       = LDNR_NM_OFST_G;
    rSmoothLDNR.nm_r.bits.LDNR_NM_SL_R       = LDNR_NM_SL_R;
    rSmoothLDNR.nm_r.bits.LDNR_NM_OFST_R       = LDNR_NM_OFST_R;
    rSmoothLDNR.cnv_00_01.bits.LDNR_CNV_01       = LDNR_CNV_01;
    rSmoothLDNR.cnv_00_01.bits.LDNR_CNV_00       = LDNR_CNV_00;
    rSmoothLDNR.cnv_02.bits.LDNR_CNV_02       = LDNR_CNV_02;
    rSmoothLDNR.cnv_10_11.bits.LDNR_CNV_11       = LDNR_CNV_11;
    rSmoothLDNR.cnv_10_11.bits.LDNR_CNV_10       = LDNR_CNV_10;
    rSmoothLDNR.cnv_12.bits.LDNR_CNV_12       = LDNR_CNV_12;
    rSmoothLDNR.cnv_20_21.bits.LDNR_CNV_21       = LDNR_CNV_21;
    rSmoothLDNR.cnv_20_21.bits.LDNR_CNV_20       = LDNR_CNV_20;
    rSmoothLDNR.cnv_22.bits.LDNR_CNV_22       = LDNR_CNV_22;
    rSmoothLDNR.icnv_00_01.bits.LDNR_ICNV_01       = LDNR_ICNV_01;
    rSmoothLDNR.icnv_00_01.bits.LDNR_ICNV_00       = LDNR_ICNV_00;
    rSmoothLDNR.icnv_02.bits.LDNR_ICNV_02       = LDNR_ICNV_02;
    rSmoothLDNR.icnv_10_11.bits.LDNR_ICNV_11       = LDNR_ICNV_11;
    rSmoothLDNR.icnv_10_11.bits.LDNR_ICNV_10       = LDNR_ICNV_10;
    rSmoothLDNR.icnv_12.bits.LDNR_ICNV_12       = LDNR_ICNV_12;
    rSmoothLDNR.icnv_20_21.bits.LDNR_ICNV_21       = LDNR_ICNV_21;
    rSmoothLDNR.icnv_20_21.bits.LDNR_ICNV_20       = LDNR_ICNV_20;
    rSmoothLDNR.icnv_22.bits.LDNR_ICNV_22       = LDNR_ICNV_22;


    // logging
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RAT       = %d, %d, %d", rLowerLDNR.con1.bits.LDNR_RAT, rSmoothLDNR.con1.bits.LDNR_RAT, rUpperLDNR.con1.bits.LDNR_RAT);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ACT_G_EN       = %d, %d, %d", rLowerLDNR.ee_con1.bits.LDNR_ACT_G_EN, rSmoothLDNR.ee_con1.bits.LDNR_ACT_G_EN, rUpperLDNR.ee_con1.bits.LDNR_ACT_G_EN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LR_RAT       = %d, %d, %d", rLowerLDNR.ee_con1.bits.LDNR_LR_RAT, rSmoothLDNR.ee_con1.bits.LDNR_LR_RAT, rUpperLDNR.ee_con1.bits.LDNR_LR_RAT);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RAW_FMT       = %d, %d, %d", rLowerLDNR.ee_con1.bits.LDNR_RAW_FMT, rSmoothLDNR.ee_con1.bits.LDNR_RAW_FMT, rUpperLDNR.ee_con1.bits.LDNR_RAW_FMT);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y2       = %d, %d, %d", rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y2, rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y2, rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y1       = %d, %d, %d", rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y1, rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y1, rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y0       = %d, %d, %d", rLowerLDNR.ee_lm_y012.bits.LDNR_LM_Y0, rSmoothLDNR.ee_lm_y012.bits.LDNR_LM_Y0, rUpperLDNR.ee_lm_y012.bits.LDNR_LM_Y0);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y5       = %d, %d, %d", rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y5, rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y5, rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y5);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y4       = %d, %d, %d", rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y4, rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y4, rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y4);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_LM_Y3       = %d, %d, %d", rLowerLDNR.ee_lm_y345.bits.LDNR_LM_Y3, rSmoothLDNR.ee_lm_y345.bits.LDNR_LM_Y3, rUpperLDNR.ee_lm_y345.bits.LDNR_LM_Y3);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_HR       = %d, %d, %d", rLowerLDNR.ee_sl.bits.LDNR_SL_HR, rSmoothLDNR.ee_sl.bits.LDNR_SL_HR, rUpperLDNR.ee_sl.bits.LDNR_SL_HR);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_L_Y2       = %d, %d, %d", rLowerLDNR.ee_sl.bits.LDNR_SL_L_Y2, rSmoothLDNR.ee_sl.bits.LDNR_SL_L_Y2, rUpperLDNR.ee_sl.bits.LDNR_SL_L_Y2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_L_Y1       = %d, %d, %d", rLowerLDNR.ee_sl.bits.LDNR_SL_L_Y1, rSmoothLDNR.ee_sl.bits.LDNR_SL_L_Y1, rUpperLDNR.ee_sl.bits.LDNR_SL_L_Y1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_HSLL       = %d, %d, %d", rLowerLDNR.ee_lwb.bits.LDNR_HSLL, rSmoothLDNR.ee_lwb.bits.LDNR_HSLL, rUpperLDNR.ee_lwb.bits.LDNR_HSLL);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H3_LWB       = %d, %d, %d", rLowerLDNR.ee_lwb.bits.LDNR_H3_LWB, rSmoothLDNR.ee_lwb.bits.LDNR_H3_LWB, rUpperLDNR.ee_lwb.bits.LDNR_H3_LWB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H2_LWB       = %d, %d, %d", rLowerLDNR.ee_lwb.bits.LDNR_H2_LWB, rSmoothLDNR.ee_lwb.bits.LDNR_H2_LWB, rUpperLDNR.ee_lwb.bits.LDNR_H2_LWB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H1_LWB       = %d, %d, %d", rLowerLDNR.ee_lwb.bits.LDNR_H1_LWB, rSmoothLDNR.ee_lwb.bits.LDNR_H1_LWB, rUpperLDNR.ee_lwb.bits.LDNR_H1_LWB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_HSLR       = %d, %d, %d", rLowerLDNR.ee_upb.bits.LDNR_HSLR, rSmoothLDNR.ee_upb.bits.LDNR_HSLR, rUpperLDNR.ee_upb.bits.LDNR_HSLR);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H3_UPB       = %d, %d, %d", rLowerLDNR.ee_upb.bits.LDNR_H3_UPB, rSmoothLDNR.ee_upb.bits.LDNR_H3_UPB, rUpperLDNR.ee_upb.bits.LDNR_H3_UPB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H2_UPB       = %d, %d, %d", rLowerLDNR.ee_upb.bits.LDNR_H2_UPB, rSmoothLDNR.ee_upb.bits.LDNR_H2_UPB, rUpperLDNR.ee_upb.bits.LDNR_H2_UPB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H1_UPB       = %d, %d, %d", rLowerLDNR.ee_upb.bits.LDNR_H1_UPB, rSmoothLDNR.ee_upb.bits.LDNR_H1_UPB, rUpperLDNR.ee_upb.bits.LDNR_H1_UPB);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RNG4       = %d, %d, %d", rLowerLDNR.rng.bits.LDNR_RNG4, rSmoothLDNR.rng.bits.LDNR_RNG4, rUpperLDNR.rng.bits.LDNR_RNG4);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RNG3       = %d, %d, %d", rLowerLDNR.rng.bits.LDNR_RNG3, rSmoothLDNR.rng.bits.LDNR_RNG3, rUpperLDNR.rng.bits.LDNR_RNG3);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RNG2       = %d, %d, %d", rLowerLDNR.rng.bits.LDNR_RNG2, rSmoothLDNR.rng.bits.LDNR_RNG2, rUpperLDNR.rng.bits.LDNR_RNG2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RNG1       = %d, %d, %d", rLowerLDNR.rng.bits.LDNR_RNG1, rSmoothLDNR.rng.bits.LDNR_RNG1, rUpperLDNR.rng.bits.LDNR_RNG1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CTHL       = %d, %d, %d", rLowerLDNR.con2.bits.LDNR_CTHL, rSmoothLDNR.con2.bits.LDNR_CTHL, rUpperLDNR.con2.bits.LDNR_CTHL);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CTHR       = %d, %d, %d", rLowerLDNR.con2.bits.LDNR_CTHR, rSmoothLDNR.con2.bits.LDNR_CTHR, rUpperLDNR.con2.bits.LDNR_CTHR);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_RAD       = %d, %d, %d", rLowerLDNR.con2.bits.LDNR_RAD, rSmoothLDNR.con2.bits.LDNR_RAD, rUpperLDNR.con2.bits.LDNR_RAD);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_PRF_RAT       = %d, %d, %d", rLowerLDNR.con2.bits.LDNR_PRF_RAT, rSmoothLDNR.con2.bits.LDNR_PRF_RAT, rUpperLDNR.con2.bits.LDNR_PRF_RAT);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_MED_RAT       = %d, %d, %d", rLowerLDNR.con2.bits.LDNR_MED_RAT, rSmoothLDNR.con2.bits.LDNR_MED_RAT, rUpperLDNR.con2.bits.LDNR_MED_RAT);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_Y1       = %d, %d, %d", rLowerLDNR.sl.bits.LDNR_SL_Y1, rSmoothLDNR.sl.bits.LDNR_SL_Y1, rUpperLDNR.sl.bits.LDNR_SL_Y1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_Y2       = %d, %d, %d", rLowerLDNR.sl.bits.LDNR_SL_Y2, rSmoothLDNR.sl.bits.LDNR_SL_Y2, rUpperLDNR.sl.bits.LDNR_SL_Y2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SL_EN       = %d, %d, %d", rLowerLDNR.sl.bits.LDNR_SL_EN, rSmoothLDNR.sl.bits.LDNR_SL_EN, rUpperLDNR.sl.bits.LDNR_SL_EN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_STH_C1       = %d, %d, %d", rLowerLDNR.ssl_sth.bits.LDNR_STH_C1, rSmoothLDNR.ssl_sth.bits.LDNR_STH_C1, rUpperLDNR.ssl_sth.bits.LDNR_STH_C1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SSL_C1       = %d, %d, %d", rLowerLDNR.ssl_sth.bits.LDNR_SSL_C1, rSmoothLDNR.ssl_sth.bits.LDNR_SSL_C1, rUpperLDNR.ssl_sth.bits.LDNR_SSL_C1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_STH_C2       = %d, %d, %d", rLowerLDNR.ssl_sth.bits.LDNR_STH_C2, rSmoothLDNR.ssl_sth.bits.LDNR_STH_C2, rUpperLDNR.ssl_sth.bits.LDNR_STH_C2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_SSL_C2       = %d, %d, %d", rLowerLDNR.ssl_sth.bits.LDNR_SSL_C2, rSmoothLDNR.ssl_sth.bits.LDNR_SSL_C2, rUpperLDNR.ssl_sth.bits.LDNR_SSL_C2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H3_GN       = %d, %d, %d", rLowerLDNR.ee_con2.bits.LDNR_H3_GN, rSmoothLDNR.ee_con2.bits.LDNR_H3_GN, rUpperLDNR.ee_con2.bits.LDNR_H3_GN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H2_GN       = %d, %d, %d", rLowerLDNR.ee_con2.bits.LDNR_H2_GN, rSmoothLDNR.ee_con2.bits.LDNR_H2_GN, rUpperLDNR.ee_con2.bits.LDNR_H2_GN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_H1_GN       = %d, %d, %d", rLowerLDNR.ee_con2.bits.LDNR_H1_GN, rSmoothLDNR.ee_con2.bits.LDNR_H1_GN, rUpperLDNR.ee_con2.bits.LDNR_H1_GN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_HA_STR       = %d, %d, %d", rLowerLDNR.ee_con2.bits.LDNR_HA_STR, rSmoothLDNR.ee_con2.bits.LDNR_HA_STR, rUpperLDNR.ee_con2.bits.LDNR_HA_STR);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_UN_TH       = %d, %d, %d", rLowerLDNR.ee_th.bits.LDNR_UN_TH, rSmoothLDNR.ee_th.bits.LDNR_UN_TH, rUpperLDNR.ee_th.bits.LDNR_UN_TH);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_OV_TH       = %d, %d, %d", rLowerLDNR.ee_th.bits.LDNR_OV_TH, rSmoothLDNR.ee_th.bits.LDNR_OV_TH, rUpperLDNR.ee_th.bits.LDNR_OV_TH);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CLIP_TH       = %d, %d, %d", rLowerLDNR.ee_th.bits.LDNR_CLIP_TH, rSmoothLDNR.ee_th.bits.LDNR_CLIP_TH, rUpperLDNR.ee_th.bits.LDNR_CLIP_TH);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CORE_TH       = %d, %d, %d", rLowerLDNR.ee_th.bits.LDNR_CORE_TH, rSmoothLDNR.ee_th.bits.LDNR_CORE_TH, rUpperLDNR.ee_th.bits.LDNR_CORE_TH);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_HNEG_GN       = %d, %d, %d", rLowerLDNR.ee_hgn.bits.LDNR_HNEG_GN, rSmoothLDNR.ee_hgn.bits.LDNR_HNEG_GN, rUpperLDNR.ee_hgn.bits.LDNR_HNEG_GN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_HPOS_GN       = %d, %d, %d", rLowerLDNR.ee_hgn.bits.LDNR_HPOS_GN, rSmoothLDNR.ee_hgn.bits.LDNR_HPOS_GN, rUpperLDNR.ee_hgn.bits.LDNR_HPOS_GN);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_B_C1       = %d, %d, %d", rLowerLDNR.coef_c1.bits.LDNR_COEF_B_C1, rSmoothLDNR.coef_c1.bits.LDNR_COEF_B_C1, rUpperLDNR.coef_c1.bits.LDNR_COEF_B_C1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_G_C1       = %d, %d, %d", rLowerLDNR.coef_c1.bits.LDNR_COEF_G_C1, rSmoothLDNR.coef_c1.bits.LDNR_COEF_G_C1, rUpperLDNR.coef_c1.bits.LDNR_COEF_G_C1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_R_C1       = %d, %d, %d", rLowerLDNR.coef_c1.bits.LDNR_COEF_R_C1, rSmoothLDNR.coef_c1.bits.LDNR_COEF_R_C1, rUpperLDNR.coef_c1.bits.LDNR_COEF_R_C1);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_B_C2       = %d, %d, %d", rLowerLDNR.coef_c2.bits.LDNR_COEF_B_C2, rSmoothLDNR.coef_c2.bits.LDNR_COEF_B_C2, rUpperLDNR.coef_c2.bits.LDNR_COEF_B_C2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_G_C2       = %d, %d, %d", rLowerLDNR.coef_c2.bits.LDNR_COEF_G_C2, rSmoothLDNR.coef_c2.bits.LDNR_COEF_G_C2, rUpperLDNR.coef_c2.bits.LDNR_COEF_G_C2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_COEF_R_C2       = %d, %d, %d", rLowerLDNR.coef_c2.bits.LDNR_COEF_R_C2, rSmoothLDNR.coef_c2.bits.LDNR_COEF_R_C2, rUpperLDNR.coef_c2.bits.LDNR_COEF_R_C2);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_SL_B       = %d, %d, %d", rLowerLDNR.nm_b.bits.LDNR_NM_SL_B, rSmoothLDNR.nm_b.bits.LDNR_NM_SL_B, rUpperLDNR.nm_b.bits.LDNR_NM_SL_B);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_OFST_B       = %d, %d, %d", rLowerLDNR.nm_b.bits.LDNR_NM_OFST_B, rSmoothLDNR.nm_b.bits.LDNR_NM_OFST_B, rUpperLDNR.nm_b.bits.LDNR_NM_OFST_B);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_SL_G       = %d, %d, %d", rLowerLDNR.nm_g.bits.LDNR_NM_SL_G, rSmoothLDNR.nm_g.bits.LDNR_NM_SL_G, rUpperLDNR.nm_g.bits.LDNR_NM_SL_G);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_OFST_G       = %d, %d, %d", rLowerLDNR.nm_g.bits.LDNR_NM_OFST_G, rSmoothLDNR.nm_g.bits.LDNR_NM_OFST_G, rUpperLDNR.nm_g.bits.LDNR_NM_OFST_G);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_SL_R       = %d, %d, %d", rLowerLDNR.nm_r.bits.LDNR_NM_SL_R, rSmoothLDNR.nm_r.bits.LDNR_NM_SL_R, rUpperLDNR.nm_r.bits.LDNR_NM_SL_R);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_NM_OFST_R       = %d, %d, %d", rLowerLDNR.nm_r.bits.LDNR_NM_OFST_R, rSmoothLDNR.nm_r.bits.LDNR_NM_OFST_R, rUpperLDNR.nm_r.bits.LDNR_NM_OFST_R);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_01       = %d, %d, %d", rLowerLDNR.cnv_00_01.bits.LDNR_CNV_01, rSmoothLDNR.cnv_00_01.bits.LDNR_CNV_01, rUpperLDNR.cnv_00_01.bits.LDNR_CNV_01);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_00       = %d, %d, %d", rLowerLDNR.cnv_00_01.bits.LDNR_CNV_00, rSmoothLDNR.cnv_00_01.bits.LDNR_CNV_00, rUpperLDNR.cnv_00_01.bits.LDNR_CNV_00);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_02       = %d, %d, %d", rLowerLDNR.cnv_02.bits.LDNR_CNV_02, rSmoothLDNR.cnv_02.bits.LDNR_CNV_02, rUpperLDNR.cnv_02.bits.LDNR_CNV_02);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_11       = %d, %d, %d", rLowerLDNR.cnv_10_11.bits.LDNR_CNV_11, rSmoothLDNR.cnv_10_11.bits.LDNR_CNV_11, rUpperLDNR.cnv_10_11.bits.LDNR_CNV_11);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_10       = %d, %d, %d", rLowerLDNR.cnv_10_11.bits.LDNR_CNV_10, rSmoothLDNR.cnv_10_11.bits.LDNR_CNV_10, rUpperLDNR.cnv_10_11.bits.LDNR_CNV_10);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_12       = %d, %d, %d", rLowerLDNR.cnv_12.bits.LDNR_CNV_12, rSmoothLDNR.cnv_12.bits.LDNR_CNV_12, rUpperLDNR.cnv_12.bits.LDNR_CNV_12);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_21       = %d, %d, %d", rLowerLDNR.cnv_20_21.bits.LDNR_CNV_21, rSmoothLDNR.cnv_20_21.bits.LDNR_CNV_21, rUpperLDNR.cnv_20_21.bits.LDNR_CNV_21);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_20       = %d, %d, %d", rLowerLDNR.cnv_20_21.bits.LDNR_CNV_20, rSmoothLDNR.cnv_20_21.bits.LDNR_CNV_20, rUpperLDNR.cnv_20_21.bits.LDNR_CNV_20);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_CNV_22       = %d, %d, %d", rLowerLDNR.cnv_22.bits.LDNR_CNV_22, rSmoothLDNR.cnv_22.bits.LDNR_CNV_22, rUpperLDNR.cnv_22.bits.LDNR_CNV_22);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_01       = %d, %d, %d", rLowerLDNR.icnv_00_01.bits.LDNR_ICNV_01, rSmoothLDNR.icnv_00_01.bits.LDNR_ICNV_01, rUpperLDNR.icnv_00_01.bits.LDNR_ICNV_01);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_00       = %d, %d, %d", rLowerLDNR.icnv_00_01.bits.LDNR_ICNV_00, rSmoothLDNR.icnv_00_01.bits.LDNR_ICNV_00, rUpperLDNR.icnv_00_01.bits.LDNR_ICNV_00);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_02       = %d, %d, %d", rLowerLDNR.icnv_02.bits.LDNR_ICNV_02, rSmoothLDNR.icnv_02.bits.LDNR_ICNV_02, rUpperLDNR.icnv_02.bits.LDNR_ICNV_02);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_11       = %d, %d, %d", rLowerLDNR.icnv_10_11.bits.LDNR_ICNV_11, rSmoothLDNR.icnv_10_11.bits.LDNR_ICNV_11, rUpperLDNR.icnv_10_11.bits.LDNR_ICNV_11);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_10       = %d, %d, %d", rLowerLDNR.icnv_10_11.bits.LDNR_ICNV_10, rSmoothLDNR.icnv_10_11.bits.LDNR_ICNV_10, rUpperLDNR.icnv_10_11.bits.LDNR_ICNV_10);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_12       = %d, %d, %d", rLowerLDNR.icnv_12.bits.LDNR_ICNV_12, rSmoothLDNR.icnv_12.bits.LDNR_ICNV_12, rUpperLDNR.icnv_12.bits.LDNR_ICNV_12);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_21       = %d, %d, %d", rLowerLDNR.icnv_20_21.bits.LDNR_ICNV_21, rSmoothLDNR.icnv_20_21.bits.LDNR_ICNV_21, rUpperLDNR.icnv_20_21.bits.LDNR_ICNV_21);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_20       = %d, %d, %d", rLowerLDNR.icnv_20_21.bits.LDNR_ICNV_20, rSmoothLDNR.icnv_20_21.bits.LDNR_ICNV_20, rUpperLDNR.icnv_20_21.bits.LDNR_ICNV_20);
    INTER_LOG_IF(bSmoothLDNRDebug, "[L,S,U]LDNR_ICNV_22       = %d, %d, %d", rLowerLDNR.icnv_22.bits.LDNR_ICNV_22, rSmoothLDNR.icnv_22.bits.LDNR_ICNV_22, rUpperLDNR.icnv_22.bits.LDNR_ICNV_22);

}

MVOID Smooth_DM(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_DM_T const& rUpperDM,   // DM settings for upper ISO
                ISP_NVRAM_DM_T const& rLowerDM,   // DM settings for lower ISO
                ISP_NVRAM_DM_T& rSmoothDM)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_dm.enable", value, "0");
    MBOOL bSmoothDMDebug = atoi(value);

    INTER_LOG_IF(bSmoothDMDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_DM_CD_KNL       = rLowerDM.intp_crs.bits.DM_CD_KNL;
    MINT32 pre_DM_CDG_RAT       = rLowerDM.intp_crs.bits.DM_CDG_RAT;
    MINT32 pre_DM_CDG_OFST       = rLowerDM.intp_crs.bits.DM_CDG_OFST;
    MINT32 pre_DM_CDG_SL       = rLowerDM.intp_crs.bits.DM_CDG_SL;
    MINT32 pre_DM_INT_CDTH       = rLowerDM.int_ctl.bits.DM_INT_CDTH;
    MINT32 pre_DM_INT_LTH       = rLowerDM.int_ctl.bits.DM_INT_LTH;
    MINT32 pre_DM_P1_LWB       = rLowerDM.p1_act.bits.DM_P1_LWB;
    MINT32 pre_DM_P1_UPB       = rLowerDM.p1_act.bits.DM_P1_UPB;
    MINT32 pre_DM_P1_BLD       = rLowerDM.est_ctl.bits.DM_P1_BLD;
    MINT32 pre_DM_P2_CLIP       = rLowerDM.est_ctl.bits.DM_P2_CLIP;
    MINT32 pre_DM_CD_SLC       = rLowerDM.intp_nat.bits.DM_CD_SLC;
    MINT32 pre_DM_CD_SLL       = rLowerDM.intp_nat.bits.DM_CD_SLL;
    MINT32 pre_DM_DN_OFST       = rLowerDM.intp_aug.bits.DM_DN_OFST;
    MINT32 pre_DM_HL_OFST       = rLowerDM.intp_nat.bits.DM_HL_OFST;
    MINT32 pre_DM_L0_OFST       = rLowerDM.intp_nat.bits.DM_L0_OFST;
    MINT32 pre_DM_L0_SL       = rLowerDM.intp_nat.bits.DM_L0_SL;
    MINT32 pre_DM_L1_OFST       = rLowerDM.intp_aug.bits.DM_L1_OFST;
    MINT32 pre_DM_L1_SL       = rLowerDM.intp_aug.bits.DM_L1_SL;
    MINT32 pre_DM_L2_OFST       = rLowerDM.intp_aug.bits.DM_L2_OFST;
    MINT32 pre_DM_L2_SL       = rLowerDM.intp_aug.bits.DM_L2_SL;
    MINT32 pre_DM_LM_Y0       = rLowerDM.luma_lut1.bits.DM_LM_Y0;
    MINT32 pre_DM_LM_Y1       = rLowerDM.luma_lut1.bits.DM_LM_Y1;
    MINT32 pre_DM_LM_Y2       = rLowerDM.luma_lut1.bits.DM_LM_Y2;
    MINT32 pre_DM_LM_Y3       = rLowerDM.luma_lut2.bits.DM_LM_Y3;
    MINT32 pre_DM_LM_Y4       = rLowerDM.luma_lut2.bits.DM_LM_Y4;
    MINT32 pre_DM_LM_Y5       = rLowerDM.luma_lut2.bits.DM_LM_Y5;
    MINT32 pre_DM_SL_Y1       = rLowerDM.sl_ctl.bits.DM_SL_Y1;
    MINT32 pre_DM_SL_Y2       = rLowerDM.sl_ctl.bits.DM_SL_Y2;
    MINT32 pre_DM_SL_HR       = rLowerDM.sl_ctl.bits.DM_SL_HR;
    MINT32 pre_DM_HT_GN1       = rLowerDM.hftd_ctl.bits.DM_HT_GN1;
    MINT32 pre_DM_HT_GN2       = rLowerDM.hftd_ctl.bits.DM_HT_GN2;
    MINT32 pre_DM_HD_GN1       = rLowerDM.hftd_ctl.bits.DM_HD_GN1;
    MINT32 pre_DM_HD_GN2       = rLowerDM.hftd_ctl.bits.DM_HD_GN2;
    MINT32 pre_DM_HD_GN3       = rLowerDM.hftd_ctl2.bits.DM_HD_GN3;
    MINT32 pre_DM_HFRB_GN       = rLowerDM.hftd_ctl2.bits.DM_HFRB_GN;
    MINT32 pre_DM_HA_STR       = rLowerDM.hf_str.bits.DM_HA_STR;
    MINT32 pre_DM_H1_GN       = rLowerDM.hf_str.bits.DM_H1_GN;
    MINT32 pre_DM_H2_GN       = rLowerDM.hf_str.bits.DM_H2_GN;
    MINT32 pre_DM_H3_GN       = rLowerDM.hf_str.bits.DM_H3_GN;
    MINT32 pre_DM_HI_RAT       = rLowerDM.hf_str.bits.DM_HI_RAT;
    MINT32 pre_DM_H1_LWB       = rLowerDM.hf_act1.bits.DM_H1_LWB;
    MINT32 pre_DM_H2_LWB       = rLowerDM.hf_act1.bits.DM_H2_LWB;
    MINT32 pre_DM_H3_LWB       = rLowerDM.hf_act2.bits.DM_H3_LWB;
    MINT32 pre_DM_H1_UPB       = rLowerDM.hf_act1.bits.DM_H1_UPB;
    MINT32 pre_DM_H2_UPB       = rLowerDM.hf_act1.bits.DM_H2_UPB;
    MINT32 pre_DM_H3_UPB       = rLowerDM.hf_act2.bits.DM_H3_UPB;
    MINT32 pre_DM_HSLR       = rLowerDM.hf_act2.bits.DM_HSLR;
    MINT32 pre_DM_HSLL       = rLowerDM.hf_act2.bits.DM_HSLL;
    MINT32 pre_DM_CORE_TH1       = rLowerDM.hftd_ctl.bits.DM_CORE_TH1;
    MINT32 pre_DM_CORE_TH2       = rLowerDM.hf_str.bits.DM_CORE_TH2;
    MINT32 pre_DM_OV_TH       = rLowerDM.clip.bits.DM_OV_TH;
    MINT32 pre_DM_UN_TH       = rLowerDM.clip.bits.DM_UN_TH;
    MINT32 pre_DM_CLIP_TH       = rLowerDM.clip.bits.DM_CLIP_TH;
    MINT32 pre_DM_HNEG_GN       = rLowerDM.ee.bits.DM_HNEG_GN;
    MINT32 pre_DM_HPOS_GN       = rLowerDM.ee.bits.DM_HPOS_GN;
    MINT32 pre_DM_N0_STR       = rLowerDM.nr_str.bits.DM_N0_STR;
    MINT32 pre_DM_N1_STR       = rLowerDM.nr_str.bits.DM_N1_STR;
    MINT32 pre_DM_N2_STR       = rLowerDM.nr_str.bits.DM_N2_STR;
    MINT32 pre_DM_N0_OFST       = rLowerDM.nr_act.bits.DM_N0_OFST;
    MINT32 pre_DM_N1_OFST       = rLowerDM.nr_act.bits.DM_N1_OFST;
    MINT32 pre_DM_N2_OFST       = rLowerDM.nr_act.bits.DM_N2_OFST;
    MINT32 pre_DM_NSL       = rLowerDM.nr_act.bits.DM_NSL;
    MINT32 pre_DM_NGR       = rLowerDM.nr_act.bits.DM_NGR;
    MINT32 pre_DM_XTK_RAT       = rLowerDM.nr_str.bits.DM_XTK_RAT;
    MINT32 pre_DM_XTK_OFST       = rLowerDM.nr_str.bits.DM_XTK_OFST;
    MINT32 pre_DM_XTK_SL       = rLowerDM.nr_str.bits.DM_XTK_SL;
    MINT32 pre_DM_LR_RAT       = rLowerDM.lr_rat.bits.DM_LR_RAT;
    MINT32 pre_DM_LMT_LWB       = rLowerDM.lmt.bits.DM_LMT_LWB;
    MINT32 pre_DM_LMT_UPB       = rLowerDM.lmt.bits.DM_LMT_UPB;
    MINT32 pre_DM_RCDM_SL       = rLowerDM.rccc.bits.DM_RCDM_SL;
    MINT32 pre_DM_MN_MODE       = rLowerDM.intp_crs.bits.DM_MN_MODE;
    MINT32 pre_DM_BYP       = rLowerDM.intp_crs.bits.DM_BYP;
    MINT32 pre_DM_SL_EN       = rLowerDM.sl_ctl.bits.DM_SL_EN;
    MINT32 pre_DM_LMT_EN       = rLowerDM.lmt.bits.DM_LMT_EN;
    MINT32 pre_DM_RCCC_EN       = rLowerDM.rccc.bits.DM_RCCC_EN;
    MINT32 pos_DM_CD_KNL       = rUpperDM.intp_crs.bits.DM_CD_KNL;
    MINT32 pos_DM_CDG_RAT       = rUpperDM.intp_crs.bits.DM_CDG_RAT;
    MINT32 pos_DM_CDG_OFST       = rUpperDM.intp_crs.bits.DM_CDG_OFST;
    MINT32 pos_DM_CDG_SL       = rUpperDM.intp_crs.bits.DM_CDG_SL;
    MINT32 pos_DM_INT_CDTH       = rUpperDM.int_ctl.bits.DM_INT_CDTH;
    MINT32 pos_DM_INT_LTH       = rUpperDM.int_ctl.bits.DM_INT_LTH;
    MINT32 pos_DM_P1_LWB       = rUpperDM.p1_act.bits.DM_P1_LWB;
    MINT32 pos_DM_P1_UPB       = rUpperDM.p1_act.bits.DM_P1_UPB;
    MINT32 pos_DM_P1_BLD       = rUpperDM.est_ctl.bits.DM_P1_BLD;
    MINT32 pos_DM_P2_CLIP       = rUpperDM.est_ctl.bits.DM_P2_CLIP;
    MINT32 pos_DM_CD_SLC       = rUpperDM.intp_nat.bits.DM_CD_SLC;
    MINT32 pos_DM_CD_SLL       = rUpperDM.intp_nat.bits.DM_CD_SLL;
    MINT32 pos_DM_DN_OFST       = rUpperDM.intp_aug.bits.DM_DN_OFST;
    MINT32 pos_DM_HL_OFST       = rUpperDM.intp_nat.bits.DM_HL_OFST;
    MINT32 pos_DM_L0_OFST       = rUpperDM.intp_nat.bits.DM_L0_OFST;
    MINT32 pos_DM_L0_SL       = rUpperDM.intp_nat.bits.DM_L0_SL;
    MINT32 pos_DM_L1_OFST       = rUpperDM.intp_aug.bits.DM_L1_OFST;
    MINT32 pos_DM_L1_SL       = rUpperDM.intp_aug.bits.DM_L1_SL;
    MINT32 pos_DM_L2_OFST       = rUpperDM.intp_aug.bits.DM_L2_OFST;
    MINT32 pos_DM_L2_SL       = rUpperDM.intp_aug.bits.DM_L2_SL;
    MINT32 pos_DM_LM_Y0       = rUpperDM.luma_lut1.bits.DM_LM_Y0;
    MINT32 pos_DM_LM_Y1       = rUpperDM.luma_lut1.bits.DM_LM_Y1;
    MINT32 pos_DM_LM_Y2       = rUpperDM.luma_lut1.bits.DM_LM_Y2;
    MINT32 pos_DM_LM_Y3       = rUpperDM.luma_lut2.bits.DM_LM_Y3;
    MINT32 pos_DM_LM_Y4       = rUpperDM.luma_lut2.bits.DM_LM_Y4;
    MINT32 pos_DM_LM_Y5       = rUpperDM.luma_lut2.bits.DM_LM_Y5;
    MINT32 pos_DM_SL_Y1       = rUpperDM.sl_ctl.bits.DM_SL_Y1;
    MINT32 pos_DM_SL_Y2       = rUpperDM.sl_ctl.bits.DM_SL_Y2;
    MINT32 pos_DM_SL_HR       = rUpperDM.sl_ctl.bits.DM_SL_HR;
    MINT32 pos_DM_HT_GN1       = rUpperDM.hftd_ctl.bits.DM_HT_GN1;
    MINT32 pos_DM_HT_GN2       = rUpperDM.hftd_ctl.bits.DM_HT_GN2;
    MINT32 pos_DM_HD_GN1       = rUpperDM.hftd_ctl.bits.DM_HD_GN1;
    MINT32 pos_DM_HD_GN2       = rUpperDM.hftd_ctl.bits.DM_HD_GN2;
    MINT32 pos_DM_HD_GN3       = rUpperDM.hftd_ctl2.bits.DM_HD_GN3;
    MINT32 pos_DM_HFRB_GN       = rUpperDM.hftd_ctl2.bits.DM_HFRB_GN;
    MINT32 pos_DM_HA_STR       = rUpperDM.hf_str.bits.DM_HA_STR;
    MINT32 pos_DM_H1_GN       = rUpperDM.hf_str.bits.DM_H1_GN;
    MINT32 pos_DM_H2_GN       = rUpperDM.hf_str.bits.DM_H2_GN;
    MINT32 pos_DM_H3_GN       = rUpperDM.hf_str.bits.DM_H3_GN;
    MINT32 pos_DM_HI_RAT       = rUpperDM.hf_str.bits.DM_HI_RAT;
    MINT32 pos_DM_H1_LWB       = rUpperDM.hf_act1.bits.DM_H1_LWB;
    MINT32 pos_DM_H2_LWB       = rUpperDM.hf_act1.bits.DM_H2_LWB;
    MINT32 pos_DM_H3_LWB       = rUpperDM.hf_act2.bits.DM_H3_LWB;
    MINT32 pos_DM_H1_UPB       = rUpperDM.hf_act1.bits.DM_H1_UPB;
    MINT32 pos_DM_H2_UPB       = rUpperDM.hf_act1.bits.DM_H2_UPB;
    MINT32 pos_DM_H3_UPB       = rUpperDM.hf_act2.bits.DM_H3_UPB;
    MINT32 pos_DM_HSLR       = rUpperDM.hf_act2.bits.DM_HSLR;
    MINT32 pos_DM_HSLL       = rUpperDM.hf_act2.bits.DM_HSLL;
    MINT32 pos_DM_CORE_TH1       = rUpperDM.hftd_ctl.bits.DM_CORE_TH1;
    MINT32 pos_DM_CORE_TH2       = rUpperDM.hf_str.bits.DM_CORE_TH2;
    MINT32 pos_DM_OV_TH       = rUpperDM.clip.bits.DM_OV_TH;
    MINT32 pos_DM_UN_TH       = rUpperDM.clip.bits.DM_UN_TH;
    MINT32 pos_DM_CLIP_TH       = rUpperDM.clip.bits.DM_CLIP_TH;
    MINT32 pos_DM_HNEG_GN       = rUpperDM.ee.bits.DM_HNEG_GN;
    MINT32 pos_DM_HPOS_GN       = rUpperDM.ee.bits.DM_HPOS_GN;
    MINT32 pos_DM_N0_STR       = rUpperDM.nr_str.bits.DM_N0_STR;
    MINT32 pos_DM_N1_STR       = rUpperDM.nr_str.bits.DM_N1_STR;
    MINT32 pos_DM_N2_STR       = rUpperDM.nr_str.bits.DM_N2_STR;
    MINT32 pos_DM_N0_OFST       = rUpperDM.nr_act.bits.DM_N0_OFST;
    MINT32 pos_DM_N1_OFST       = rUpperDM.nr_act.bits.DM_N1_OFST;
    MINT32 pos_DM_N2_OFST       = rUpperDM.nr_act.bits.DM_N2_OFST;
    MINT32 pos_DM_NSL       = rUpperDM.nr_act.bits.DM_NSL;
    MINT32 pos_DM_NGR       = rUpperDM.nr_act.bits.DM_NGR;
    MINT32 pos_DM_XTK_RAT       = rUpperDM.nr_str.bits.DM_XTK_RAT;
    MINT32 pos_DM_XTK_OFST       = rUpperDM.nr_str.bits.DM_XTK_OFST;
    MINT32 pos_DM_XTK_SL       = rUpperDM.nr_str.bits.DM_XTK_SL;
    MINT32 pos_DM_LR_RAT       = rUpperDM.lr_rat.bits.DM_LR_RAT;
    MINT32 pos_DM_LMT_LWB       = rUpperDM.lmt.bits.DM_LMT_LWB;
    MINT32 pos_DM_LMT_UPB       = rUpperDM.lmt.bits.DM_LMT_UPB;
    MINT32 pos_DM_RCDM_SL       = rUpperDM.rccc.bits.DM_RCDM_SL;
    MINT32 pos_DM_MN_MODE       = rUpperDM.intp_crs.bits.DM_MN_MODE;
    MINT32 pos_DM_BYP       = rUpperDM.intp_crs.bits.DM_BYP;
    MINT32 pos_DM_SL_EN       = rUpperDM.sl_ctl.bits.DM_SL_EN;
    MINT32 pos_DM_LMT_EN       = rUpperDM.lmt.bits.DM_LMT_EN;
    MINT32 pos_DM_RCCC_EN       = rUpperDM.rccc.bits.DM_RCCC_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 DM_CD_KNL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CD_KNL, pos_DM_CD_KNL, 0);
    MINT32 DM_CDG_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CDG_RAT, pos_DM_CDG_RAT, 0);
    MINT32 DM_CDG_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CDG_OFST, pos_DM_CDG_OFST, 0);
    MINT32 DM_CDG_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CDG_SL, pos_DM_CDG_SL, 0);
    MINT32 DM_INT_CDTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_INT_CDTH, pos_DM_INT_CDTH, 0);
    MINT32 DM_INT_LTH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_INT_LTH, pos_DM_INT_LTH, 0);
    MINT32 DM_P1_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_P1_LWB, pos_DM_P1_LWB, 0);
    MINT32 DM_P1_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_P1_UPB, pos_DM_P1_UPB, 0);
    MINT32 DM_P1_BLD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_P1_BLD, pos_DM_P1_BLD, 0);
    MINT32 DM_P2_CLIP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_P2_CLIP, pos_DM_P2_CLIP, 0);
    MINT32 DM_CD_SLC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CD_SLC, pos_DM_CD_SLC, 0);
    MINT32 DM_CD_SLL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CD_SLL, pos_DM_CD_SLL, 0);
    MINT32 DM_DN_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_DN_OFST, pos_DM_DN_OFST, 0);
    MINT32 DM_HL_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HL_OFST, pos_DM_HL_OFST, 0);
    MINT32 DM_L0_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L0_OFST, pos_DM_L0_OFST, 0);
    MINT32 DM_L0_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L0_SL, pos_DM_L0_SL, 0);
    MINT32 DM_L1_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L1_OFST, pos_DM_L1_OFST, 0);
    MINT32 DM_L1_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L1_SL, pos_DM_L1_SL, 0);
    MINT32 DM_L2_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L2_OFST, pos_DM_L2_OFST, 0);
    MINT32 DM_L2_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_L2_SL, pos_DM_L2_SL, 0);
    MINT32 DM_LM_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y0, pos_DM_LM_Y0, 0);
    MINT32 DM_LM_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y1, pos_DM_LM_Y1, 0);
    MINT32 DM_LM_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y2, pos_DM_LM_Y2, 0);
    MINT32 DM_LM_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y3, pos_DM_LM_Y3, 0);
    MINT32 DM_LM_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y4, pos_DM_LM_Y4, 0);
    MINT32 DM_LM_Y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LM_Y5, pos_DM_LM_Y5, 0);
    MINT32 DM_SL_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_SL_Y1, pos_DM_SL_Y1, 0);
    MINT32 DM_SL_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_SL_Y2, pos_DM_SL_Y2, 0);
    MINT32 DM_SL_HR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_SL_HR, pos_DM_SL_HR, 0);
    MINT32 DM_HT_GN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HT_GN1, pos_DM_HT_GN1, 0);
    MINT32 DM_HT_GN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HT_GN2, pos_DM_HT_GN2, 0);
    MINT32 DM_HD_GN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HD_GN1, pos_DM_HD_GN1, 0);
    MINT32 DM_HD_GN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HD_GN2, pos_DM_HD_GN2, 0);
    MINT32 DM_HD_GN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HD_GN3, pos_DM_HD_GN3, 0);
    MINT32 DM_HFRB_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HFRB_GN, pos_DM_HFRB_GN, 0);
    MINT32 DM_HA_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HA_STR, pos_DM_HA_STR, 0);
    MINT32 DM_H1_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H1_GN, pos_DM_H1_GN, 0);
    MINT32 DM_H2_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H2_GN, pos_DM_H2_GN, 0);
    MINT32 DM_H3_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H3_GN, pos_DM_H3_GN, 0);
    MINT32 DM_HI_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HI_RAT, pos_DM_HI_RAT, 0);
    MINT32 DM_H1_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H1_LWB, pos_DM_H1_LWB, 0);
    MINT32 DM_H2_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H2_LWB, pos_DM_H2_LWB, 0);
    MINT32 DM_H3_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H3_LWB, pos_DM_H3_LWB, 0);
    MINT32 DM_H1_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H1_UPB, pos_DM_H1_UPB, 0);
    MINT32 DM_H2_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H2_UPB, pos_DM_H2_UPB, 0);
    MINT32 DM_H3_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_H3_UPB, pos_DM_H3_UPB, 0);
    MINT32 DM_HSLR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HSLR, pos_DM_HSLR, 0);
    MINT32 DM_HSLL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HSLL, pos_DM_HSLL, 0);
    MINT32 DM_CORE_TH1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CORE_TH1, pos_DM_CORE_TH1, 0);
    MINT32 DM_CORE_TH2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CORE_TH2, pos_DM_CORE_TH2, 0);
    MINT32 DM_OV_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_OV_TH, pos_DM_OV_TH, 0);
    MINT32 DM_UN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_UN_TH, pos_DM_UN_TH, 0);
    MINT32 DM_CLIP_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_CLIP_TH, pos_DM_CLIP_TH, 0);
    MINT32 DM_HNEG_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HNEG_GN, pos_DM_HNEG_GN, 0);
    MINT32 DM_HPOS_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_HPOS_GN, pos_DM_HPOS_GN, 0);
    MINT32 DM_N0_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N0_STR, pos_DM_N0_STR, 0);
    MINT32 DM_N1_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N1_STR, pos_DM_N1_STR, 0);
    MINT32 DM_N2_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N2_STR, pos_DM_N2_STR, 0);
    MINT32 DM_N0_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N0_OFST, pos_DM_N0_OFST, 0);
    MINT32 DM_N1_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N1_OFST, pos_DM_N1_OFST, 0);
    MINT32 DM_N2_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_N2_OFST, pos_DM_N2_OFST, 0);
    MINT32 DM_NSL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_NSL, pos_DM_NSL, 0);
    MINT32 DM_NGR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_NGR, pos_DM_NGR, 0);
    MINT32 DM_XTK_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_XTK_RAT, pos_DM_XTK_RAT, 0);
    MINT32 DM_XTK_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_XTK_OFST, pos_DM_XTK_OFST, 0);
    MINT32 DM_XTK_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_XTK_SL, pos_DM_XTK_SL, 0);
    MINT32 DM_LR_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LR_RAT, pos_DM_LR_RAT, 0);
    MINT32 DM_LMT_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LMT_LWB, pos_DM_LMT_LWB, 0);
    MINT32 DM_LMT_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LMT_UPB, pos_DM_LMT_UPB, 0);
    MINT32 DM_RCDM_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_RCDM_SL, pos_DM_RCDM_SL, 0);
    MINT32 DM_MN_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_MN_MODE, pos_DM_MN_MODE, 1);
    MINT32 DM_BYP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_BYP, pos_DM_BYP, 1);
    MINT32 DM_SL_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_SL_EN, pos_DM_SL_EN, 1);
    MINT32 DM_LMT_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_LMT_EN, pos_DM_LMT_EN, 1);
    MINT32 DM_RCCC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_DM_RCCC_EN, pos_DM_RCCC_EN, 1);


    // interpolation result assignment
    rSmoothDM.intp_crs.bits.DM_CD_KNL       = DM_CD_KNL;
    rSmoothDM.intp_crs.bits.DM_CDG_RAT       = DM_CDG_RAT;
    rSmoothDM.intp_crs.bits.DM_CDG_OFST       = DM_CDG_OFST;
    rSmoothDM.intp_crs.bits.DM_CDG_SL       = DM_CDG_SL;
    rSmoothDM.int_ctl.bits.DM_INT_CDTH       = DM_INT_CDTH;
    rSmoothDM.int_ctl.bits.DM_INT_LTH       = DM_INT_LTH;
    rSmoothDM.p1_act.bits.DM_P1_LWB       = DM_P1_LWB;
    rSmoothDM.p1_act.bits.DM_P1_UPB       = DM_P1_UPB;
    rSmoothDM.est_ctl.bits.DM_P1_BLD       = DM_P1_BLD;
    rSmoothDM.est_ctl.bits.DM_P2_CLIP       = DM_P2_CLIP;
    rSmoothDM.intp_nat.bits.DM_CD_SLC       = DM_CD_SLC;
    rSmoothDM.intp_nat.bits.DM_CD_SLL       = DM_CD_SLL;
    rSmoothDM.intp_aug.bits.DM_DN_OFST       = DM_DN_OFST;
    rSmoothDM.intp_nat.bits.DM_HL_OFST       = DM_HL_OFST;
    rSmoothDM.intp_nat.bits.DM_L0_OFST       = DM_L0_OFST;
    rSmoothDM.intp_nat.bits.DM_L0_SL       = DM_L0_SL;
    rSmoothDM.intp_aug.bits.DM_L1_OFST       = DM_L1_OFST;
    rSmoothDM.intp_aug.bits.DM_L1_SL       = DM_L1_SL;
    rSmoothDM.intp_aug.bits.DM_L2_OFST       = DM_L2_OFST;
    rSmoothDM.intp_aug.bits.DM_L2_SL       = DM_L2_SL;
    rSmoothDM.luma_lut1.bits.DM_LM_Y0       = DM_LM_Y0;
    rSmoothDM.luma_lut1.bits.DM_LM_Y1       = DM_LM_Y1;
    rSmoothDM.luma_lut1.bits.DM_LM_Y2       = DM_LM_Y2;
    rSmoothDM.luma_lut2.bits.DM_LM_Y3       = DM_LM_Y3;
    rSmoothDM.luma_lut2.bits.DM_LM_Y4       = DM_LM_Y4;
    rSmoothDM.luma_lut2.bits.DM_LM_Y5       = DM_LM_Y5;
    rSmoothDM.sl_ctl.bits.DM_SL_Y1       = DM_SL_Y1;
    rSmoothDM.sl_ctl.bits.DM_SL_Y2       = DM_SL_Y2;
    rSmoothDM.sl_ctl.bits.DM_SL_HR       = DM_SL_HR;
    rSmoothDM.hftd_ctl.bits.DM_HT_GN1       = DM_HT_GN1;
    rSmoothDM.hftd_ctl.bits.DM_HT_GN2       = DM_HT_GN2;
    rSmoothDM.hftd_ctl.bits.DM_HD_GN1       = DM_HD_GN1;
    rSmoothDM.hftd_ctl.bits.DM_HD_GN2       = DM_HD_GN2;
    rSmoothDM.hftd_ctl2.bits.DM_HD_GN3       = DM_HD_GN3;
    rSmoothDM.hftd_ctl2.bits.DM_HFRB_GN       = DM_HFRB_GN;
    rSmoothDM.hf_str.bits.DM_HA_STR       = DM_HA_STR;
    rSmoothDM.hf_str.bits.DM_H1_GN       = DM_H1_GN;
    rSmoothDM.hf_str.bits.DM_H2_GN       = DM_H2_GN;
    rSmoothDM.hf_str.bits.DM_H3_GN       = DM_H3_GN;
    rSmoothDM.hf_str.bits.DM_HI_RAT       = DM_HI_RAT;
    rSmoothDM.hf_act1.bits.DM_H1_LWB       = DM_H1_LWB;
    rSmoothDM.hf_act1.bits.DM_H2_LWB       = DM_H2_LWB;
    rSmoothDM.hf_act2.bits.DM_H3_LWB       = DM_H3_LWB;
    rSmoothDM.hf_act1.bits.DM_H1_UPB       = DM_H1_UPB;
    rSmoothDM.hf_act1.bits.DM_H2_UPB       = DM_H2_UPB;
    rSmoothDM.hf_act2.bits.DM_H3_UPB       = DM_H3_UPB;
    rSmoothDM.hf_act2.bits.DM_HSLR       = DM_HSLR;
    rSmoothDM.hf_act2.bits.DM_HSLL       = DM_HSLL;
    rSmoothDM.hftd_ctl.bits.DM_CORE_TH1       = DM_CORE_TH1;
    rSmoothDM.hf_str.bits.DM_CORE_TH2       = DM_CORE_TH2;
    rSmoothDM.clip.bits.DM_OV_TH       = DM_OV_TH;
    rSmoothDM.clip.bits.DM_UN_TH       = DM_UN_TH;
    rSmoothDM.clip.bits.DM_CLIP_TH       = DM_CLIP_TH;
    rSmoothDM.ee.bits.DM_HNEG_GN       = DM_HNEG_GN;
    rSmoothDM.ee.bits.DM_HPOS_GN       = DM_HPOS_GN;
    rSmoothDM.nr_str.bits.DM_N0_STR       = DM_N0_STR;
    rSmoothDM.nr_str.bits.DM_N1_STR       = DM_N1_STR;
    rSmoothDM.nr_str.bits.DM_N2_STR       = DM_N2_STR;
    rSmoothDM.nr_act.bits.DM_N0_OFST       = DM_N0_OFST;
    rSmoothDM.nr_act.bits.DM_N1_OFST       = DM_N1_OFST;
    rSmoothDM.nr_act.bits.DM_N2_OFST       = DM_N2_OFST;
    rSmoothDM.nr_act.bits.DM_NSL       = DM_NSL;
    rSmoothDM.nr_act.bits.DM_NGR       = DM_NGR;
    rSmoothDM.nr_str.bits.DM_XTK_RAT       = DM_XTK_RAT;
    rSmoothDM.nr_str.bits.DM_XTK_OFST       = DM_XTK_OFST;
    rSmoothDM.nr_str.bits.DM_XTK_SL       = DM_XTK_SL;
    rSmoothDM.lr_rat.bits.DM_LR_RAT       = DM_LR_RAT;
    rSmoothDM.lmt.bits.DM_LMT_LWB       = DM_LMT_LWB;
    rSmoothDM.lmt.bits.DM_LMT_UPB       = DM_LMT_UPB;
    rSmoothDM.rccc.bits.DM_RCDM_SL       = DM_RCDM_SL;
    rSmoothDM.intp_crs.bits.DM_MN_MODE       = DM_MN_MODE;
    rSmoothDM.intp_crs.bits.DM_BYP       = DM_BYP;
    rSmoothDM.sl_ctl.bits.DM_SL_EN       = DM_SL_EN;
    rSmoothDM.lmt.bits.DM_LMT_EN       = DM_LMT_EN;
    rSmoothDM.rccc.bits.DM_RCCC_EN       = DM_RCCC_EN;


    // logging
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CD_KNL       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_CD_KNL, rSmoothDM.intp_crs.bits.DM_CD_KNL, rUpperDM.intp_crs.bits.DM_CD_KNL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CDG_RAT       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_CDG_RAT, rSmoothDM.intp_crs.bits.DM_CDG_RAT, rUpperDM.intp_crs.bits.DM_CDG_RAT);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CDG_OFST       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_CDG_OFST, rSmoothDM.intp_crs.bits.DM_CDG_OFST, rUpperDM.intp_crs.bits.DM_CDG_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CDG_SL       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_CDG_SL, rSmoothDM.intp_crs.bits.DM_CDG_SL, rUpperDM.intp_crs.bits.DM_CDG_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_INT_CDTH       = %d, %d, %d", rLowerDM.int_ctl.bits.DM_INT_CDTH, rSmoothDM.int_ctl.bits.DM_INT_CDTH, rUpperDM.int_ctl.bits.DM_INT_CDTH);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_INT_LTH       = %d, %d, %d", rLowerDM.int_ctl.bits.DM_INT_LTH, rSmoothDM.int_ctl.bits.DM_INT_LTH, rUpperDM.int_ctl.bits.DM_INT_LTH);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_P1_LWB       = %d, %d, %d", rLowerDM.p1_act.bits.DM_P1_LWB, rSmoothDM.p1_act.bits.DM_P1_LWB, rUpperDM.p1_act.bits.DM_P1_LWB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_P1_UPB       = %d, %d, %d", rLowerDM.p1_act.bits.DM_P1_UPB, rSmoothDM.p1_act.bits.DM_P1_UPB, rUpperDM.p1_act.bits.DM_P1_UPB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_P1_BLD       = %d, %d, %d", rLowerDM.est_ctl.bits.DM_P1_BLD, rSmoothDM.est_ctl.bits.DM_P1_BLD, rUpperDM.est_ctl.bits.DM_P1_BLD);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_P2_CLIP       = %d, %d, %d", rLowerDM.est_ctl.bits.DM_P2_CLIP, rSmoothDM.est_ctl.bits.DM_P2_CLIP, rUpperDM.est_ctl.bits.DM_P2_CLIP);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CD_SLC       = %d, %d, %d", rLowerDM.intp_nat.bits.DM_CD_SLC, rSmoothDM.intp_nat.bits.DM_CD_SLC, rUpperDM.intp_nat.bits.DM_CD_SLC);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CD_SLL       = %d, %d, %d", rLowerDM.intp_nat.bits.DM_CD_SLL, rSmoothDM.intp_nat.bits.DM_CD_SLL, rUpperDM.intp_nat.bits.DM_CD_SLL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_DN_OFST       = %d, %d, %d", rLowerDM.intp_aug.bits.DM_DN_OFST, rSmoothDM.intp_aug.bits.DM_DN_OFST, rUpperDM.intp_aug.bits.DM_DN_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HL_OFST       = %d, %d, %d", rLowerDM.intp_nat.bits.DM_HL_OFST, rSmoothDM.intp_nat.bits.DM_HL_OFST, rUpperDM.intp_nat.bits.DM_HL_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L0_OFST       = %d, %d, %d", rLowerDM.intp_nat.bits.DM_L0_OFST, rSmoothDM.intp_nat.bits.DM_L0_OFST, rUpperDM.intp_nat.bits.DM_L0_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L0_SL       = %d, %d, %d", rLowerDM.intp_nat.bits.DM_L0_SL, rSmoothDM.intp_nat.bits.DM_L0_SL, rUpperDM.intp_nat.bits.DM_L0_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L1_OFST       = %d, %d, %d", rLowerDM.intp_aug.bits.DM_L1_OFST, rSmoothDM.intp_aug.bits.DM_L1_OFST, rUpperDM.intp_aug.bits.DM_L1_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L1_SL       = %d, %d, %d", rLowerDM.intp_aug.bits.DM_L1_SL, rSmoothDM.intp_aug.bits.DM_L1_SL, rUpperDM.intp_aug.bits.DM_L1_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L2_OFST       = %d, %d, %d", rLowerDM.intp_aug.bits.DM_L2_OFST, rSmoothDM.intp_aug.bits.DM_L2_OFST, rUpperDM.intp_aug.bits.DM_L2_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_L2_SL       = %d, %d, %d", rLowerDM.intp_aug.bits.DM_L2_SL, rSmoothDM.intp_aug.bits.DM_L2_SL, rUpperDM.intp_aug.bits.DM_L2_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y0       = %d, %d, %d", rLowerDM.luma_lut1.bits.DM_LM_Y0, rSmoothDM.luma_lut1.bits.DM_LM_Y0, rUpperDM.luma_lut1.bits.DM_LM_Y0);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y1       = %d, %d, %d", rLowerDM.luma_lut1.bits.DM_LM_Y1, rSmoothDM.luma_lut1.bits.DM_LM_Y1, rUpperDM.luma_lut1.bits.DM_LM_Y1);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y2       = %d, %d, %d", rLowerDM.luma_lut1.bits.DM_LM_Y2, rSmoothDM.luma_lut1.bits.DM_LM_Y2, rUpperDM.luma_lut1.bits.DM_LM_Y2);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y3       = %d, %d, %d", rLowerDM.luma_lut2.bits.DM_LM_Y3, rSmoothDM.luma_lut2.bits.DM_LM_Y3, rUpperDM.luma_lut2.bits.DM_LM_Y3);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y4       = %d, %d, %d", rLowerDM.luma_lut2.bits.DM_LM_Y4, rSmoothDM.luma_lut2.bits.DM_LM_Y4, rUpperDM.luma_lut2.bits.DM_LM_Y4);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LM_Y5       = %d, %d, %d", rLowerDM.luma_lut2.bits.DM_LM_Y5, rSmoothDM.luma_lut2.bits.DM_LM_Y5, rUpperDM.luma_lut2.bits.DM_LM_Y5);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_SL_Y1       = %d, %d, %d", rLowerDM.sl_ctl.bits.DM_SL_Y1, rSmoothDM.sl_ctl.bits.DM_SL_Y1, rUpperDM.sl_ctl.bits.DM_SL_Y1);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_SL_Y2       = %d, %d, %d", rLowerDM.sl_ctl.bits.DM_SL_Y2, rSmoothDM.sl_ctl.bits.DM_SL_Y2, rUpperDM.sl_ctl.bits.DM_SL_Y2);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_SL_HR       = %d, %d, %d", rLowerDM.sl_ctl.bits.DM_SL_HR, rSmoothDM.sl_ctl.bits.DM_SL_HR, rUpperDM.sl_ctl.bits.DM_SL_HR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HT_GN1       = %d, %d, %d", rLowerDM.hftd_ctl.bits.DM_HT_GN1, rSmoothDM.hftd_ctl.bits.DM_HT_GN1, rUpperDM.hftd_ctl.bits.DM_HT_GN1);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HT_GN2       = %d, %d, %d", rLowerDM.hftd_ctl.bits.DM_HT_GN2, rSmoothDM.hftd_ctl.bits.DM_HT_GN2, rUpperDM.hftd_ctl.bits.DM_HT_GN2);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HD_GN1       = %d, %d, %d", rLowerDM.hftd_ctl.bits.DM_HD_GN1, rSmoothDM.hftd_ctl.bits.DM_HD_GN1, rUpperDM.hftd_ctl.bits.DM_HD_GN1);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HD_GN2       = %d, %d, %d", rLowerDM.hftd_ctl.bits.DM_HD_GN2, rSmoothDM.hftd_ctl.bits.DM_HD_GN2, rUpperDM.hftd_ctl.bits.DM_HD_GN2);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HD_GN3       = %d, %d, %d", rLowerDM.hftd_ctl2.bits.DM_HD_GN3, rSmoothDM.hftd_ctl2.bits.DM_HD_GN3, rUpperDM.hftd_ctl2.bits.DM_HD_GN3);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HFRB_GN       = %d, %d, %d", rLowerDM.hftd_ctl2.bits.DM_HFRB_GN, rSmoothDM.hftd_ctl2.bits.DM_HFRB_GN, rUpperDM.hftd_ctl2.bits.DM_HFRB_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HA_STR       = %d, %d, %d", rLowerDM.hf_str.bits.DM_HA_STR, rSmoothDM.hf_str.bits.DM_HA_STR, rUpperDM.hf_str.bits.DM_HA_STR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H1_GN       = %d, %d, %d", rLowerDM.hf_str.bits.DM_H1_GN, rSmoothDM.hf_str.bits.DM_H1_GN, rUpperDM.hf_str.bits.DM_H1_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H2_GN       = %d, %d, %d", rLowerDM.hf_str.bits.DM_H2_GN, rSmoothDM.hf_str.bits.DM_H2_GN, rUpperDM.hf_str.bits.DM_H2_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H3_GN       = %d, %d, %d", rLowerDM.hf_str.bits.DM_H3_GN, rSmoothDM.hf_str.bits.DM_H3_GN, rUpperDM.hf_str.bits.DM_H3_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HI_RAT       = %d, %d, %d", rLowerDM.hf_str.bits.DM_HI_RAT, rSmoothDM.hf_str.bits.DM_HI_RAT, rUpperDM.hf_str.bits.DM_HI_RAT);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H1_LWB       = %d, %d, %d", rLowerDM.hf_act1.bits.DM_H1_LWB, rSmoothDM.hf_act1.bits.DM_H1_LWB, rUpperDM.hf_act1.bits.DM_H1_LWB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H2_LWB       = %d, %d, %d", rLowerDM.hf_act1.bits.DM_H2_LWB, rSmoothDM.hf_act1.bits.DM_H2_LWB, rUpperDM.hf_act1.bits.DM_H2_LWB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H3_LWB       = %d, %d, %d", rLowerDM.hf_act2.bits.DM_H3_LWB, rSmoothDM.hf_act2.bits.DM_H3_LWB, rUpperDM.hf_act2.bits.DM_H3_LWB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H1_UPB       = %d, %d, %d", rLowerDM.hf_act1.bits.DM_H1_UPB, rSmoothDM.hf_act1.bits.DM_H1_UPB, rUpperDM.hf_act1.bits.DM_H1_UPB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H2_UPB       = %d, %d, %d", rLowerDM.hf_act1.bits.DM_H2_UPB, rSmoothDM.hf_act1.bits.DM_H2_UPB, rUpperDM.hf_act1.bits.DM_H2_UPB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_H3_UPB       = %d, %d, %d", rLowerDM.hf_act2.bits.DM_H3_UPB, rSmoothDM.hf_act2.bits.DM_H3_UPB, rUpperDM.hf_act2.bits.DM_H3_UPB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HSLR       = %d, %d, %d", rLowerDM.hf_act2.bits.DM_HSLR, rSmoothDM.hf_act2.bits.DM_HSLR, rUpperDM.hf_act2.bits.DM_HSLR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HSLL       = %d, %d, %d", rLowerDM.hf_act2.bits.DM_HSLL, rSmoothDM.hf_act2.bits.DM_HSLL, rUpperDM.hf_act2.bits.DM_HSLL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CORE_TH1       = %d, %d, %d", rLowerDM.hftd_ctl.bits.DM_CORE_TH1, rSmoothDM.hftd_ctl.bits.DM_CORE_TH1, rUpperDM.hftd_ctl.bits.DM_CORE_TH1);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CORE_TH2       = %d, %d, %d", rLowerDM.hf_str.bits.DM_CORE_TH2, rSmoothDM.hf_str.bits.DM_CORE_TH2, rUpperDM.hf_str.bits.DM_CORE_TH2);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_OV_TH       = %d, %d, %d", rLowerDM.clip.bits.DM_OV_TH, rSmoothDM.clip.bits.DM_OV_TH, rUpperDM.clip.bits.DM_OV_TH);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_UN_TH       = %d, %d, %d", rLowerDM.clip.bits.DM_UN_TH, rSmoothDM.clip.bits.DM_UN_TH, rUpperDM.clip.bits.DM_UN_TH);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_CLIP_TH       = %d, %d, %d", rLowerDM.clip.bits.DM_CLIP_TH, rSmoothDM.clip.bits.DM_CLIP_TH, rUpperDM.clip.bits.DM_CLIP_TH);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HNEG_GN       = %d, %d, %d", rLowerDM.ee.bits.DM_HNEG_GN, rSmoothDM.ee.bits.DM_HNEG_GN, rUpperDM.ee.bits.DM_HNEG_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_HPOS_GN       = %d, %d, %d", rLowerDM.ee.bits.DM_HPOS_GN, rSmoothDM.ee.bits.DM_HPOS_GN, rUpperDM.ee.bits.DM_HPOS_GN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N0_STR       = %d, %d, %d", rLowerDM.nr_str.bits.DM_N0_STR, rSmoothDM.nr_str.bits.DM_N0_STR, rUpperDM.nr_str.bits.DM_N0_STR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N1_STR       = %d, %d, %d", rLowerDM.nr_str.bits.DM_N1_STR, rSmoothDM.nr_str.bits.DM_N1_STR, rUpperDM.nr_str.bits.DM_N1_STR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N2_STR       = %d, %d, %d", rLowerDM.nr_str.bits.DM_N2_STR, rSmoothDM.nr_str.bits.DM_N2_STR, rUpperDM.nr_str.bits.DM_N2_STR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N0_OFST       = %d, %d, %d", rLowerDM.nr_act.bits.DM_N0_OFST, rSmoothDM.nr_act.bits.DM_N0_OFST, rUpperDM.nr_act.bits.DM_N0_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N1_OFST       = %d, %d, %d", rLowerDM.nr_act.bits.DM_N1_OFST, rSmoothDM.nr_act.bits.DM_N1_OFST, rUpperDM.nr_act.bits.DM_N1_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_N2_OFST       = %d, %d, %d", rLowerDM.nr_act.bits.DM_N2_OFST, rSmoothDM.nr_act.bits.DM_N2_OFST, rUpperDM.nr_act.bits.DM_N2_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_NSL       = %d, %d, %d", rLowerDM.nr_act.bits.DM_NSL, rSmoothDM.nr_act.bits.DM_NSL, rUpperDM.nr_act.bits.DM_NSL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_NGR       = %d, %d, %d", rLowerDM.nr_act.bits.DM_NGR, rSmoothDM.nr_act.bits.DM_NGR, rUpperDM.nr_act.bits.DM_NGR);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_XTK_RAT       = %d, %d, %d", rLowerDM.nr_str.bits.DM_XTK_RAT, rSmoothDM.nr_str.bits.DM_XTK_RAT, rUpperDM.nr_str.bits.DM_XTK_RAT);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_XTK_OFST       = %d, %d, %d", rLowerDM.nr_str.bits.DM_XTK_OFST, rSmoothDM.nr_str.bits.DM_XTK_OFST, rUpperDM.nr_str.bits.DM_XTK_OFST);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_XTK_SL       = %d, %d, %d", rLowerDM.nr_str.bits.DM_XTK_SL, rSmoothDM.nr_str.bits.DM_XTK_SL, rUpperDM.nr_str.bits.DM_XTK_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LR_RAT       = %d, %d, %d", rLowerDM.lr_rat.bits.DM_LR_RAT, rSmoothDM.lr_rat.bits.DM_LR_RAT, rUpperDM.lr_rat.bits.DM_LR_RAT);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LMT_LWB       = %d, %d, %d", rLowerDM.lmt.bits.DM_LMT_LWB, rSmoothDM.lmt.bits.DM_LMT_LWB, rUpperDM.lmt.bits.DM_LMT_LWB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LMT_UPB       = %d, %d, %d", rLowerDM.lmt.bits.DM_LMT_UPB, rSmoothDM.lmt.bits.DM_LMT_UPB, rUpperDM.lmt.bits.DM_LMT_UPB);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_RCDM_SL       = %d, %d, %d", rLowerDM.rccc.bits.DM_RCDM_SL, rSmoothDM.rccc.bits.DM_RCDM_SL, rUpperDM.rccc.bits.DM_RCDM_SL);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_MN_MODE       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_MN_MODE, rSmoothDM.intp_crs.bits.DM_MN_MODE, rUpperDM.intp_crs.bits.DM_MN_MODE);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_BYP       = %d, %d, %d", rLowerDM.intp_crs.bits.DM_BYP, rSmoothDM.intp_crs.bits.DM_BYP, rUpperDM.intp_crs.bits.DM_BYP);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_SL_EN       = %d, %d, %d", rLowerDM.sl_ctl.bits.DM_SL_EN, rSmoothDM.sl_ctl.bits.DM_SL_EN, rUpperDM.sl_ctl.bits.DM_SL_EN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_LMT_EN       = %d, %d, %d", rLowerDM.lmt.bits.DM_LMT_EN, rSmoothDM.lmt.bits.DM_LMT_EN, rUpperDM.lmt.bits.DM_LMT_EN);
    INTER_LOG_IF(bSmoothDMDebug, "[L,S,U]DM_RCCC_EN       = %d, %d, %d", rLowerDM.rccc.bits.DM_RCCC_EN, rSmoothDM.rccc.bits.DM_RCCC_EN, rUpperDM.rccc.bits.DM_RCCC_EN);

}

MVOID Smooth_YNR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_YNR_T const& rUpperYNR,   // YNR settings for upper ISO
                ISP_NVRAM_YNR_T const& rLowerYNR,   // YNR settings for lower ISO
                ISP_NVRAM_YNR_T& rSmoothYNR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ynr.enable", value, "0");
    MBOOL bSmoothYNRDebug = atoi(value);

    INTER_LOG_IF(bSmoothYNRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_YNR_LCE_LINK       = rLowerYNR.con1.bits.YNR_LCE_LINK;
    MINT32 pre_YNR_SKIN_LINK       = rLowerYNR.skin_con.bits.YNR_SKIN_LINK;
    MINT32 pre_YNR_Y_L0_RNG_RAT_TH       = rLowerYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH;
    MINT32 pre_YNR_Y_L1_RNG_RAT_TH       = rLowerYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH;
    MINT32 pre_YNR_Y_L2_RNG_RAT_TH       = rLowerYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH;
    MINT32 pre_YNR_Y_L3_RNG_RAT_TH       = rLowerYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH;
    MINT32 pre_YNR_Y_L0_RNG_RAT_SL       = rLowerYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL;
    MINT32 pre_YNR_Y_L1_RNG_RAT_SL       = rLowerYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL;
    MINT32 pre_YNR_Y_L2_RNG_RAT_SL       = rLowerYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL;
    MINT32 pre_YNR_Y_L3_RNG_RAT_SL       = rLowerYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL;
    MINT32 pre_YNR_Y_FLT0_IDX       = rLowerYNR.con1.bits.YNR_Y_FLT0_IDX;
    MINT32 pre_YNR_Y_FLT1_IDX       = rLowerYNR.con1.bits.YNR_Y_FLT1_IDX;
    MINT32 pre_YNR_Y_FLT2_IDX       = rLowerYNR.con1.bits.YNR_Y_FLT2_IDX;
    MINT32 pre_YNR_Y_FLT3_IDX       = rLowerYNR.con1.bits.YNR_Y_FLT3_IDX;
    MINT32 pre_YNR_Y_SLOPE_H_TH       = rLowerYNR.yad1.bits.YNR_Y_SLOPE_H_TH;
    MINT32 pre_YNR_Y_SLOPE_V_TH       = rLowerYNR.yad1.bits.YNR_Y_SLOPE_V_TH;
    MINT32 pre_YNR_PTY_GAIN_TH       = rLowerYNR.yad2.bits.YNR_PTY_GAIN_TH;
    MINT32 pre_YNR_SL2_LINK       = rLowerYNR.con1.bits.YNR_SL2_LINK;
    MINT32 pre_YNR_SL2_X1       = rLowerYNR.l4lut1.bits.YNR_SL2_X1;
    MINT32 pre_YNR_SL2_X2       = rLowerYNR.l4lut1.bits.YNR_SL2_X2;
    MINT32 pre_YNR_SL2_X3       = rLowerYNR.l4lut1.bits.YNR_SL2_X3;
    MINT32 pre_YNR_SL2_GAIN0       = rLowerYNR.l4lut2.bits.YNR_SL2_GAIN0;
    MINT32 pre_YNR_SL2_GAIN1       = rLowerYNR.l4lut2.bits.YNR_SL2_GAIN1;
    MINT32 pre_YNR_SL2_GAIN2       = rLowerYNR.l4lut2.bits.YNR_SL2_GAIN2;
    MINT32 pre_YNR_SL2_GAIN3       = rLowerYNR.l4lut2.bits.YNR_SL2_GAIN3;
    MINT32 pre_YNR_SL2_SP3       = rLowerYNR.l4lut3.bits.YNR_SL2_SP3;
    MINT32 pre_YNR_SL2_SCALE_GAIN       = rLowerYNR.sl2.bits.YNR_SL2_SCALE_GAIN;
    MINT32 pre_YNR_SL2_C_GAIN       = rLowerYNR.sl2.bits.YNR_SL2_C_GAIN;
    MINT32 pre_YNR_Y_CPX1       = rLowerYNR.y4lut1.bits.YNR_Y_CPX1;
    MINT32 pre_YNR_Y_CPX2       = rLowerYNR.y4lut1.bits.YNR_Y_CPX2;
    MINT32 pre_YNR_Y_CPX3       = rLowerYNR.y4lut1.bits.YNR_Y_CPX3;
    MINT32 pre_YNR_Y_CPX4       = rLowerYNR.y4lut1.bits.YNR_Y_CPX4;
    MINT32 pre_YNR_Y_CPX5       = rLowerYNR.y4lut4.bits.YNR_Y_CPX5;
    MINT32 pre_YNR_Y_CPX6       = rLowerYNR.y4lut4.bits.YNR_Y_CPX6;
    MINT32 pre_YNR_Y_CPX7       = rLowerYNR.y4lut4.bits.YNR_Y_CPX7;
    MINT32 pre_YNR_Y_CPX8       = rLowerYNR.y4lut4.bits.YNR_Y_CPX8;
    MINT32 pre_YNR_Y_SCALE_CPY0       = rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY0;
    MINT32 pre_YNR_Y_SCALE_CPY1       = rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY1;
    MINT32 pre_YNR_Y_SCALE_CPY2       = rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY2;
    MINT32 pre_YNR_Y_SCALE_CPY3       = rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY3;
    MINT32 pre_YNR_Y_SCALE_CPY4       = rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY4;
    MINT32 pre_YNR_Y_SCALE_CPY5       = rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY5;
    MINT32 pre_YNR_Y_SCALE_CPY6       = rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY6;
    MINT32 pre_YNR_Y_SCALE_CPY7       = rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY7;
    MINT32 pre_YNR_Y_SCALE_CPY8       = rLowerYNR.y4lut7.bits.YNR_Y_SCALE_CPY8;
    MINT32 pre_YNR_Y_SCALE_SP8       = rLowerYNR.y4lut7.bits.YNR_Y_SCALE_SP8;
    MINT32 pre_YNR_TBL_CPX1       = rLowerYNR.t4lut1.bits.YNR_TBL_CPX1;
    MINT32 pre_YNR_TBL_CPX2       = rLowerYNR.t4lut1.bits.YNR_TBL_CPX2;
    MINT32 pre_YNR_TBL_CPX3       = rLowerYNR.t4lut1.bits.YNR_TBL_CPX3;
    MINT32 pre_YNR_TBL_GAIN_CPY0       = rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0;
    MINT32 pre_YNR_TBL_GAIN_CPY1       = rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1;
    MINT32 pre_YNR_TBL_GAIN_CPY2       = rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2;
    MINT32 pre_YNR_TBL_GAIN_CPY3       = rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3;
    MINT32 pre_YNR_TBL_GAIN_SP3       = rLowerYNR.t4lut3.bits.YNR_TBL_GAIN_SP3;
    MINT32 pre_YNR_C_CPX1       = rLowerYNR.c4lut1.bits.YNR_C_CPX1;
    MINT32 pre_YNR_C_CPX2       = rLowerYNR.c4lut1.bits.YNR_C_CPX2;
    MINT32 pre_YNR_C_CPX3       = rLowerYNR.c4lut1.bits.YNR_C_CPX3;
    MINT32 pre_YNR_C_SCALE_CPY0       = rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY0;
    MINT32 pre_YNR_C_SCALE_CPY1       = rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY1;
    MINT32 pre_YNR_C_SCALE_CPY2       = rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY2;
    MINT32 pre_YNR_C_SCALE_CPY3       = rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY3;
    MINT32 pre_YNR_C_SCALE_SP3       = rLowerYNR.c4lut3.bits.YNR_C_SCALE_SP3;
    MINT32 pre_YNR_Y_L0_V_RNG4       = rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG4;
    MINT32 pre_YNR_Y_L0_V_RNG3       = rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG3;
    MINT32 pre_YNR_Y_L0_V_RNG2       = rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG2;
    MINT32 pre_YNR_Y_L0_V_RNG1       = rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG1;
    MINT32 pre_YNR_C_L_DIFF_TH       = rLowerYNR.cad.bits.YNR_C_L_DIFF_TH;
    MINT32 pre_YNR_C_SM_EDGE       = rLowerYNR.con2.bits.YNR_C_SM_EDGE;
    MINT32 pre_YNR_C_SM_EDGE_TH       = rLowerYNR.con2.bits.YNR_C_SM_EDGE_TH;
    MINT32 pre_YNR_CEN_GAIN_HI_TH       = rLowerYNR.yad1.bits.YNR_CEN_GAIN_HI_TH;
    MINT32 pre_YNR_CEN_GAIN_LO_TH       = rLowerYNR.yad1.bits.YNR_CEN_GAIN_LO_TH;
    MINT32 pre_YNR_CEN_GAIN_HI_TH_LPF       = rLowerYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF;
    MINT32 pre_YNR_CEN_GAIN_LO_TH_LPF       = rLowerYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF;
    MINT32 pre_YNR_Y_ACT_CEN_TH       = rLowerYNR.act4.bits.YNR_Y_ACT_CEN_TH;
    MINT32 pre_YNR_Y_ACT_CEN_GAIN       = rLowerYNR.act4.bits.YNR_Y_ACT_CEN_GAIN;
    MINT32 pre_YNR_Y_ACT_CEN_OFT       = rLowerYNR.act4.bits.YNR_Y_ACT_CEN_OFT;
    MINT32 pre_YNR_Y_VERT_SIGMA       = rLowerYNR.yad2.bits.YNR_Y_VERT_SIGMA;
    MINT32 pre_YNR_Y_VERT_ACT_TH       = rLowerYNR.yad2.bits.YNR_Y_VERT_ACT_TH;
    MINT32 pre_YNR_PTC_GAIN_TH       = rLowerYNR.cad.bits.YNR_PTC_GAIN_TH;
    MINT32 pre_YNR_Y_L1_V_RNG4       = rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG4;
    MINT32 pre_YNR_Y_L1_V_RNG3       = rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG3;
    MINT32 pre_YNR_Y_L1_V_RNG2       = rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG2;
    MINT32 pre_YNR_Y_L1_V_RNG1       = rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG1;
    MINT32 pre_YNR_Y_L2_V_RNG4       = rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG4;
    MINT32 pre_YNR_Y_L2_V_RNG3       = rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG3;
    MINT32 pre_YNR_Y_L2_V_RNG2       = rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG2;
    MINT32 pre_YNR_Y_L2_V_RNG1       = rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG1;
    MINT32 pre_YNR_Y_L3_V_RNG4       = rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG4;
    MINT32 pre_YNR_Y_L3_V_RNG3       = rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG3;
    MINT32 pre_YNR_Y_L3_V_RNG2       = rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG2;
    MINT32 pre_YNR_Y_L3_V_RNG1       = rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG1;
    MINT32 pre_YNR_Y_L0_H_RNG4       = rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG4;
    MINT32 pre_YNR_Y_L0_H_RNG3       = rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG3;
    MINT32 pre_YNR_Y_L0_H_RNG2       = rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG2;
    MINT32 pre_YNR_Y_L0_H_RNG1       = rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG1;
    MINT32 pre_YNR_Y_L1_H_RNG4       = rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG4;
    MINT32 pre_YNR_Y_L1_H_RNG3       = rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG3;
    MINT32 pre_YNR_Y_L1_H_RNG2       = rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG2;
    MINT32 pre_YNR_Y_L1_H_RNG1       = rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG1;
    MINT32 pre_YNR_Y_L2_H_RNG4       = rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG4;
    MINT32 pre_YNR_Y_L2_H_RNG3       = rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG3;
    MINT32 pre_YNR_Y_L2_H_RNG2       = rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG2;
    MINT32 pre_YNR_Y_L2_H_RNG1       = rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG1;
    MINT32 pre_YNR_ACT_DIF_LO_TH       = rLowerYNR.act1.bits.YNR_ACT_DIF_LO_TH;
    MINT32 pre_YNR_ACT_DIF_GAIN       = rLowerYNR.act1.bits.YNR_ACT_DIF_GAIN;
    MINT32 pre_YNR_ACT_DIF_HI_TH       = rLowerYNR.act1.bits.YNR_ACT_DIF_HI_TH;
    MINT32 pre_YNR_ACT_SL2_GAIN       = rLowerYNR.act1.bits.YNR_ACT_SL2_GAIN;
    MINT32 pre_YNR_Y_L3_H_RNG4       = rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG4;
    MINT32 pre_YNR_Y_L3_H_RNG3       = rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG3;
    MINT32 pre_YNR_Y_L3_H_RNG2       = rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG2;
    MINT32 pre_YNR_Y_L3_H_RNG1       = rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG1;
    MINT32 pre_YNR_C_V_RNG4       = rLowerYNR.ptcv.bits.YNR_C_V_RNG4;
    MINT32 pre_YNR_C_V_RNG3       = rLowerYNR.ptcv.bits.YNR_C_V_RNG3;
    MINT32 pre_YNR_C_V_RNG2       = rLowerYNR.ptcv.bits.YNR_C_V_RNG2;
    MINT32 pre_YNR_C_V_RNG1       = rLowerYNR.ptcv.bits.YNR_C_V_RNG1;
    MINT32 pre_YNR_C_H_RNG4       = rLowerYNR.ptch.bits.YNR_C_H_RNG4;
    MINT32 pre_YNR_C_H_RNG3       = rLowerYNR.ptch.bits.YNR_C_H_RNG3;
    MINT32 pre_YNR_C_H_RNG2       = rLowerYNR.ptch.bits.YNR_C_H_RNG2;
    MINT32 pre_YNR_C_H_RNG1       = rLowerYNR.ptch.bits.YNR_C_H_RNG1;
    MINT32 pre_YNR_Y_L0_HF_W       = rLowerYNR.ylvl1.bits.YNR_Y_L0_HF_W;
    MINT32 pre_YNR_Y_L1_HF_W       = rLowerYNR.ylvl1.bits.YNR_Y_L1_HF_W;
    MINT32 pre_YNR_Y_L2_HF_W       = rLowerYNR.ylvl1.bits.YNR_Y_L2_HF_W;
    MINT32 pre_YNR_Y_L3_HF_W       = rLowerYNR.ylvl1.bits.YNR_Y_L3_HF_W;
    MINT32 pre_YNR_Y_HF_BAL_STR       = rLowerYNR.hf_cor.bits.YNR_Y_HF_BAL_STR;
    MINT32 pre_YNR_Y_HF_CLIP       = rLowerYNR.hf_cor.bits.YNR_Y_HF_CLIP;
    MINT32 pre_YNR_Y_HF_CORE_SL       = rLowerYNR.hf_cor.bits.YNR_Y_HF_CORE_SL;
    MINT32 pre_YNR_Y_HF_CORE_TH       = rLowerYNR.hf_cor.bits.YNR_Y_HF_CORE_TH;
    MINT32 pre_YNR_Y_HF_ACT_X1       = rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X1;
    MINT32 pre_YNR_Y_HF_ACT_X2       = rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X2;
    MINT32 pre_YNR_Y_HF_ACT_X3       = rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X3;
    MINT32 pre_YNR_Y_HF_ACT_X4       = rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X4;
    MINT32 pre_YNR_Y_HF_ACT_Y0       = rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0;
    MINT32 pre_YNR_Y_HF_ACT_Y1       = rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1;
    MINT32 pre_YNR_Y_HF_ACT_Y2       = rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2;
    MINT32 pre_YNR_Y_HF_ACT_Y3       = rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3;
    MINT32 pre_YNR_Y_HF_ACT_Y4       = rLowerYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4;
    MINT32 pre_YNR_Y_HF_ACT_SP4       = rLowerYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4;
    MINT32 pre_YNR_Y_HF_LUMA_X1       = rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1;
    MINT32 pre_YNR_Y_HF_LUMA_X2       = rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2;
    MINT32 pre_YNR_Y_HF_LUMA_Y0       = rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0;
    MINT32 pre_YNR_Y_HF_LUMA_Y1       = rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1;
    MINT32 pre_YNR_Y_HF_LUMA_Y2       = rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2;
    MINT32 pre_YNR_Y_HF_LUMA_SP2       = rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2;
    MINT32 pre_YNR_C_DITH_V       = rLowerYNR.actc.bits.YNR_C_DITH_V;
    MINT32 pre_YNR_C_DITH_U       = rLowerYNR.actc.bits.YNR_C_DITH_U;
    MINT32 pre_YNR_ACT_BLD_BASE_C       = rLowerYNR.actc.bits.YNR_ACT_BLD_BASE_C;
    MINT32 pre_YNR_Y_ACT_CPX1       = rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX1;
    MINT32 pre_YNR_Y_ACT_CPX2       = rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX2;
    MINT32 pre_YNR_Y_ACT_CPX3       = rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX3;
    MINT32 pre_YNR_Y_ACT_CPY0       = rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY0;
    MINT32 pre_YNR_Y_ACT_CPY1       = rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY1;
    MINT32 pre_YNR_Y_ACT_CPY2       = rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY2;
    MINT32 pre_YNR_Y_ACT_CPY3       = rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY3;
    MINT32 pre_YNR_Y_ACT_SP3       = rLowerYNR.a4lut3.bits.YNR_Y_ACT_SP3;
    MINT32 pre_YNR_TABLE_EN       = rLowerYNR.con1.bits.YNR_TABLE_EN;
    MINT32 pre_YNR_TBL_PRC       = rLowerYNR.con1.bits.YNR_TBL_PRC;
    MINT32 pre_YNR_ENY       = rLowerYNR.con1.bits.YNR_ENY;
    MINT32 pre_YNR_ENC       = rLowerYNR.con1.bits.YNR_ENC;
    MINT32 pre_YNR_GAIN_PRC       = rLowerYNR.yad2.bits.YNR_GAIN_PRC;
    MINT32 pre_YNR_LP_MODE       = rLowerYNR.con1.bits.YNR_LP_MODE;
    MINT32 pre_YNR_LBIT_MODE       = rLowerYNR.con1.bits.YNR_LBIT_MODE;
    MINT32 pre_YNR_VIDEO_MODE       = rLowerYNR.con1.bits.YNR_VIDEO_MODE;
    MINT32 pre_YNR_FLT_C       = rLowerYNR.con2.bits.YNR_FLT_C;
    MINT32 pre_YNR_IMPL_MODE       = rLowerYNR.con2.bits.YNR_IMPL_MODE;
    MINT32 pre_YNR_Y_HF_BAL_MODE       = rLowerYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE;
    MINT32 pos_YNR_LCE_LINK       = rUpperYNR.con1.bits.YNR_LCE_LINK;
    MINT32 pos_YNR_SKIN_LINK       = rUpperYNR.skin_con.bits.YNR_SKIN_LINK;
    MINT32 pos_YNR_Y_L0_RNG_RAT_TH       = rUpperYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH;
    MINT32 pos_YNR_Y_L1_RNG_RAT_TH       = rUpperYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH;
    MINT32 pos_YNR_Y_L2_RNG_RAT_TH       = rUpperYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH;
    MINT32 pos_YNR_Y_L3_RNG_RAT_TH       = rUpperYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH;
    MINT32 pos_YNR_Y_L0_RNG_RAT_SL       = rUpperYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL;
    MINT32 pos_YNR_Y_L1_RNG_RAT_SL       = rUpperYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL;
    MINT32 pos_YNR_Y_L2_RNG_RAT_SL       = rUpperYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL;
    MINT32 pos_YNR_Y_L3_RNG_RAT_SL       = rUpperYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL;
    MINT32 pos_YNR_Y_FLT0_IDX       = rUpperYNR.con1.bits.YNR_Y_FLT0_IDX;
    MINT32 pos_YNR_Y_FLT1_IDX       = rUpperYNR.con1.bits.YNR_Y_FLT1_IDX;
    MINT32 pos_YNR_Y_FLT2_IDX       = rUpperYNR.con1.bits.YNR_Y_FLT2_IDX;
    MINT32 pos_YNR_Y_FLT3_IDX       = rUpperYNR.con1.bits.YNR_Y_FLT3_IDX;
    MINT32 pos_YNR_Y_SLOPE_H_TH       = rUpperYNR.yad1.bits.YNR_Y_SLOPE_H_TH;
    MINT32 pos_YNR_Y_SLOPE_V_TH       = rUpperYNR.yad1.bits.YNR_Y_SLOPE_V_TH;
    MINT32 pos_YNR_PTY_GAIN_TH       = rUpperYNR.yad2.bits.YNR_PTY_GAIN_TH;
    MINT32 pos_YNR_SL2_LINK       = rUpperYNR.con1.bits.YNR_SL2_LINK;
    MINT32 pos_YNR_SL2_X1       = rUpperYNR.l4lut1.bits.YNR_SL2_X1;
    MINT32 pos_YNR_SL2_X2       = rUpperYNR.l4lut1.bits.YNR_SL2_X2;
    MINT32 pos_YNR_SL2_X3       = rUpperYNR.l4lut1.bits.YNR_SL2_X3;
    MINT32 pos_YNR_SL2_GAIN0       = rUpperYNR.l4lut2.bits.YNR_SL2_GAIN0;
    MINT32 pos_YNR_SL2_GAIN1       = rUpperYNR.l4lut2.bits.YNR_SL2_GAIN1;
    MINT32 pos_YNR_SL2_GAIN2       = rUpperYNR.l4lut2.bits.YNR_SL2_GAIN2;
    MINT32 pos_YNR_SL2_GAIN3       = rUpperYNR.l4lut2.bits.YNR_SL2_GAIN3;
    MINT32 pos_YNR_SL2_SP3       = rUpperYNR.l4lut3.bits.YNR_SL2_SP3;
    MINT32 pos_YNR_SL2_SCALE_GAIN       = rUpperYNR.sl2.bits.YNR_SL2_SCALE_GAIN;
    MINT32 pos_YNR_SL2_C_GAIN       = rUpperYNR.sl2.bits.YNR_SL2_C_GAIN;
    MINT32 pos_YNR_Y_CPX1       = rUpperYNR.y4lut1.bits.YNR_Y_CPX1;
    MINT32 pos_YNR_Y_CPX2       = rUpperYNR.y4lut1.bits.YNR_Y_CPX2;
    MINT32 pos_YNR_Y_CPX3       = rUpperYNR.y4lut1.bits.YNR_Y_CPX3;
    MINT32 pos_YNR_Y_CPX4       = rUpperYNR.y4lut1.bits.YNR_Y_CPX4;
    MINT32 pos_YNR_Y_CPX5       = rUpperYNR.y4lut4.bits.YNR_Y_CPX5;
    MINT32 pos_YNR_Y_CPX6       = rUpperYNR.y4lut4.bits.YNR_Y_CPX6;
    MINT32 pos_YNR_Y_CPX7       = rUpperYNR.y4lut4.bits.YNR_Y_CPX7;
    MINT32 pos_YNR_Y_CPX8       = rUpperYNR.y4lut4.bits.YNR_Y_CPX8;
    MINT32 pos_YNR_Y_SCALE_CPY0       = rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY0;
    MINT32 pos_YNR_Y_SCALE_CPY1       = rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY1;
    MINT32 pos_YNR_Y_SCALE_CPY2       = rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY2;
    MINT32 pos_YNR_Y_SCALE_CPY3       = rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY3;
    MINT32 pos_YNR_Y_SCALE_CPY4       = rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY4;
    MINT32 pos_YNR_Y_SCALE_CPY5       = rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY5;
    MINT32 pos_YNR_Y_SCALE_CPY6       = rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY6;
    MINT32 pos_YNR_Y_SCALE_CPY7       = rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY7;
    MINT32 pos_YNR_Y_SCALE_CPY8       = rUpperYNR.y4lut7.bits.YNR_Y_SCALE_CPY8;
    MINT32 pos_YNR_Y_SCALE_SP8       = rUpperYNR.y4lut7.bits.YNR_Y_SCALE_SP8;
    MINT32 pos_YNR_TBL_CPX1       = rUpperYNR.t4lut1.bits.YNR_TBL_CPX1;
    MINT32 pos_YNR_TBL_CPX2       = rUpperYNR.t4lut1.bits.YNR_TBL_CPX2;
    MINT32 pos_YNR_TBL_CPX3       = rUpperYNR.t4lut1.bits.YNR_TBL_CPX3;
    MINT32 pos_YNR_TBL_GAIN_CPY0       = rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0;
    MINT32 pos_YNR_TBL_GAIN_CPY1       = rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1;
    MINT32 pos_YNR_TBL_GAIN_CPY2       = rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2;
    MINT32 pos_YNR_TBL_GAIN_CPY3       = rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3;
    MINT32 pos_YNR_TBL_GAIN_SP3       = rUpperYNR.t4lut3.bits.YNR_TBL_GAIN_SP3;
    MINT32 pos_YNR_C_CPX1       = rUpperYNR.c4lut1.bits.YNR_C_CPX1;
    MINT32 pos_YNR_C_CPX2       = rUpperYNR.c4lut1.bits.YNR_C_CPX2;
    MINT32 pos_YNR_C_CPX3       = rUpperYNR.c4lut1.bits.YNR_C_CPX3;
    MINT32 pos_YNR_C_SCALE_CPY0       = rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY0;
    MINT32 pos_YNR_C_SCALE_CPY1       = rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY1;
    MINT32 pos_YNR_C_SCALE_CPY2       = rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY2;
    MINT32 pos_YNR_C_SCALE_CPY3       = rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY3;
    MINT32 pos_YNR_C_SCALE_SP3       = rUpperYNR.c4lut3.bits.YNR_C_SCALE_SP3;
    MINT32 pos_YNR_Y_L0_V_RNG4       = rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG4;
    MINT32 pos_YNR_Y_L0_V_RNG3       = rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG3;
    MINT32 pos_YNR_Y_L0_V_RNG2       = rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG2;
    MINT32 pos_YNR_Y_L0_V_RNG1       = rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG1;
    MINT32 pos_YNR_C_L_DIFF_TH       = rUpperYNR.cad.bits.YNR_C_L_DIFF_TH;
    MINT32 pos_YNR_C_SM_EDGE       = rUpperYNR.con2.bits.YNR_C_SM_EDGE;
    MINT32 pos_YNR_C_SM_EDGE_TH       = rUpperYNR.con2.bits.YNR_C_SM_EDGE_TH;
    MINT32 pos_YNR_CEN_GAIN_HI_TH       = rUpperYNR.yad1.bits.YNR_CEN_GAIN_HI_TH;
    MINT32 pos_YNR_CEN_GAIN_LO_TH       = rUpperYNR.yad1.bits.YNR_CEN_GAIN_LO_TH;
    MINT32 pos_YNR_CEN_GAIN_HI_TH_LPF       = rUpperYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF;
    MINT32 pos_YNR_CEN_GAIN_LO_TH_LPF       = rUpperYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF;
    MINT32 pos_YNR_Y_ACT_CEN_TH       = rUpperYNR.act4.bits.YNR_Y_ACT_CEN_TH;
    MINT32 pos_YNR_Y_ACT_CEN_GAIN       = rUpperYNR.act4.bits.YNR_Y_ACT_CEN_GAIN;
    MINT32 pos_YNR_Y_ACT_CEN_OFT       = rUpperYNR.act4.bits.YNR_Y_ACT_CEN_OFT;
    MINT32 pos_YNR_Y_VERT_SIGMA       = rUpperYNR.yad2.bits.YNR_Y_VERT_SIGMA;
    MINT32 pos_YNR_Y_VERT_ACT_TH       = rUpperYNR.yad2.bits.YNR_Y_VERT_ACT_TH;
    MINT32 pos_YNR_PTC_GAIN_TH       = rUpperYNR.cad.bits.YNR_PTC_GAIN_TH;
    MINT32 pos_YNR_Y_L1_V_RNG4       = rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG4;
    MINT32 pos_YNR_Y_L1_V_RNG3       = rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG3;
    MINT32 pos_YNR_Y_L1_V_RNG2       = rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG2;
    MINT32 pos_YNR_Y_L1_V_RNG1       = rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG1;
    MINT32 pos_YNR_Y_L2_V_RNG4       = rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG4;
    MINT32 pos_YNR_Y_L2_V_RNG3       = rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG3;
    MINT32 pos_YNR_Y_L2_V_RNG2       = rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG2;
    MINT32 pos_YNR_Y_L2_V_RNG1       = rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG1;
    MINT32 pos_YNR_Y_L3_V_RNG4       = rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG4;
    MINT32 pos_YNR_Y_L3_V_RNG3       = rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG3;
    MINT32 pos_YNR_Y_L3_V_RNG2       = rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG2;
    MINT32 pos_YNR_Y_L3_V_RNG1       = rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG1;
    MINT32 pos_YNR_Y_L0_H_RNG4       = rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG4;
    MINT32 pos_YNR_Y_L0_H_RNG3       = rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG3;
    MINT32 pos_YNR_Y_L0_H_RNG2       = rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG2;
    MINT32 pos_YNR_Y_L0_H_RNG1       = rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG1;
    MINT32 pos_YNR_Y_L1_H_RNG4       = rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG4;
    MINT32 pos_YNR_Y_L1_H_RNG3       = rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG3;
    MINT32 pos_YNR_Y_L1_H_RNG2       = rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG2;
    MINT32 pos_YNR_Y_L1_H_RNG1       = rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG1;
    MINT32 pos_YNR_Y_L2_H_RNG4       = rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG4;
    MINT32 pos_YNR_Y_L2_H_RNG3       = rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG3;
    MINT32 pos_YNR_Y_L2_H_RNG2       = rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG2;
    MINT32 pos_YNR_Y_L2_H_RNG1       = rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG1;
    MINT32 pos_YNR_ACT_DIF_LO_TH       = rUpperYNR.act1.bits.YNR_ACT_DIF_LO_TH;
    MINT32 pos_YNR_ACT_DIF_GAIN       = rUpperYNR.act1.bits.YNR_ACT_DIF_GAIN;
    MINT32 pos_YNR_ACT_DIF_HI_TH       = rUpperYNR.act1.bits.YNR_ACT_DIF_HI_TH;
    MINT32 pos_YNR_ACT_SL2_GAIN       = rUpperYNR.act1.bits.YNR_ACT_SL2_GAIN;
    MINT32 pos_YNR_Y_L3_H_RNG4       = rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG4;
    MINT32 pos_YNR_Y_L3_H_RNG3       = rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG3;
    MINT32 pos_YNR_Y_L3_H_RNG2       = rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG2;
    MINT32 pos_YNR_Y_L3_H_RNG1       = rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG1;
    MINT32 pos_YNR_C_V_RNG4       = rUpperYNR.ptcv.bits.YNR_C_V_RNG4;
    MINT32 pos_YNR_C_V_RNG3       = rUpperYNR.ptcv.bits.YNR_C_V_RNG3;
    MINT32 pos_YNR_C_V_RNG2       = rUpperYNR.ptcv.bits.YNR_C_V_RNG2;
    MINT32 pos_YNR_C_V_RNG1       = rUpperYNR.ptcv.bits.YNR_C_V_RNG1;
    MINT32 pos_YNR_C_H_RNG4       = rUpperYNR.ptch.bits.YNR_C_H_RNG4;
    MINT32 pos_YNR_C_H_RNG3       = rUpperYNR.ptch.bits.YNR_C_H_RNG3;
    MINT32 pos_YNR_C_H_RNG2       = rUpperYNR.ptch.bits.YNR_C_H_RNG2;
    MINT32 pos_YNR_C_H_RNG1       = rUpperYNR.ptch.bits.YNR_C_H_RNG1;
    MINT32 pos_YNR_Y_L0_HF_W       = rUpperYNR.ylvl1.bits.YNR_Y_L0_HF_W;
    MINT32 pos_YNR_Y_L1_HF_W       = rUpperYNR.ylvl1.bits.YNR_Y_L1_HF_W;
    MINT32 pos_YNR_Y_L2_HF_W       = rUpperYNR.ylvl1.bits.YNR_Y_L2_HF_W;
    MINT32 pos_YNR_Y_L3_HF_W       = rUpperYNR.ylvl1.bits.YNR_Y_L3_HF_W;
    MINT32 pos_YNR_Y_HF_BAL_STR       = rUpperYNR.hf_cor.bits.YNR_Y_HF_BAL_STR;
    MINT32 pos_YNR_Y_HF_CLIP       = rUpperYNR.hf_cor.bits.YNR_Y_HF_CLIP;
    MINT32 pos_YNR_Y_HF_CORE_SL       = rUpperYNR.hf_cor.bits.YNR_Y_HF_CORE_SL;
    MINT32 pos_YNR_Y_HF_CORE_TH       = rUpperYNR.hf_cor.bits.YNR_Y_HF_CORE_TH;
    MINT32 pos_YNR_Y_HF_ACT_X1       = rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X1;
    MINT32 pos_YNR_Y_HF_ACT_X2       = rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X2;
    MINT32 pos_YNR_Y_HF_ACT_X3       = rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X3;
    MINT32 pos_YNR_Y_HF_ACT_X4       = rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X4;
    MINT32 pos_YNR_Y_HF_ACT_Y0       = rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0;
    MINT32 pos_YNR_Y_HF_ACT_Y1       = rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1;
    MINT32 pos_YNR_Y_HF_ACT_Y2       = rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2;
    MINT32 pos_YNR_Y_HF_ACT_Y3       = rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3;
    MINT32 pos_YNR_Y_HF_ACT_Y4       = rUpperYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4;
    MINT32 pos_YNR_Y_HF_ACT_SP4       = rUpperYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4;
    MINT32 pos_YNR_Y_HF_LUMA_X1       = rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1;
    MINT32 pos_YNR_Y_HF_LUMA_X2       = rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2;
    MINT32 pos_YNR_Y_HF_LUMA_Y0       = rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0;
    MINT32 pos_YNR_Y_HF_LUMA_Y1       = rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1;
    MINT32 pos_YNR_Y_HF_LUMA_Y2       = rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2;
    MINT32 pos_YNR_Y_HF_LUMA_SP2       = rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2;
    MINT32 pos_YNR_C_DITH_V       = rUpperYNR.actc.bits.YNR_C_DITH_V;
    MINT32 pos_YNR_C_DITH_U       = rUpperYNR.actc.bits.YNR_C_DITH_U;
    MINT32 pos_YNR_ACT_BLD_BASE_C       = rUpperYNR.actc.bits.YNR_ACT_BLD_BASE_C;
    MINT32 pos_YNR_Y_ACT_CPX1       = rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX1;
    MINT32 pos_YNR_Y_ACT_CPX2       = rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX2;
    MINT32 pos_YNR_Y_ACT_CPX3       = rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX3;
    MINT32 pos_YNR_Y_ACT_CPY0       = rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY0;
    MINT32 pos_YNR_Y_ACT_CPY1       = rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY1;
    MINT32 pos_YNR_Y_ACT_CPY2       = rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY2;
    MINT32 pos_YNR_Y_ACT_CPY3       = rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY3;
    MINT32 pos_YNR_Y_ACT_SP3       = rUpperYNR.a4lut3.bits.YNR_Y_ACT_SP3;
    MINT32 pos_YNR_TABLE_EN       = rUpperYNR.con1.bits.YNR_TABLE_EN;
    MINT32 pos_YNR_TBL_PRC       = rUpperYNR.con1.bits.YNR_TBL_PRC;
    MINT32 pos_YNR_ENY       = rUpperYNR.con1.bits.YNR_ENY;
    MINT32 pos_YNR_ENC       = rUpperYNR.con1.bits.YNR_ENC;
    MINT32 pos_YNR_GAIN_PRC       = rUpperYNR.yad2.bits.YNR_GAIN_PRC;
    MINT32 pos_YNR_LP_MODE       = rUpperYNR.con1.bits.YNR_LP_MODE;
    MINT32 pos_YNR_LBIT_MODE       = rUpperYNR.con1.bits.YNR_LBIT_MODE;
    MINT32 pos_YNR_VIDEO_MODE       = rUpperYNR.con1.bits.YNR_VIDEO_MODE;
    MINT32 pos_YNR_FLT_C       = rUpperYNR.con2.bits.YNR_FLT_C;
    MINT32 pos_YNR_IMPL_MODE       = rUpperYNR.con2.bits.YNR_IMPL_MODE;
    MINT32 pos_YNR_Y_HF_BAL_MODE       = rUpperYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 YNR_LCE_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_LCE_LINK, pos_YNR_LCE_LINK, 0);
    MINT32 YNR_SKIN_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SKIN_LINK, pos_YNR_SKIN_LINK, 0);
    MINT32 YNR_Y_L0_RNG_RAT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_RNG_RAT_TH, pos_YNR_Y_L0_RNG_RAT_TH, 0);
    MINT32 YNR_Y_L1_RNG_RAT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_RNG_RAT_TH, pos_YNR_Y_L1_RNG_RAT_TH, 0);
    MINT32 YNR_Y_L2_RNG_RAT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_RNG_RAT_TH, pos_YNR_Y_L2_RNG_RAT_TH, 0);
    MINT32 YNR_Y_L3_RNG_RAT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_RNG_RAT_TH, pos_YNR_Y_L3_RNG_RAT_TH, 0);
    MINT32 YNR_Y_L0_RNG_RAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_RNG_RAT_SL, pos_YNR_Y_L0_RNG_RAT_SL, 0);
    MINT32 YNR_Y_L1_RNG_RAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_RNG_RAT_SL, pos_YNR_Y_L1_RNG_RAT_SL, 0);
    MINT32 YNR_Y_L2_RNG_RAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_RNG_RAT_SL, pos_YNR_Y_L2_RNG_RAT_SL, 0);
    MINT32 YNR_Y_L3_RNG_RAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_RNG_RAT_SL, pos_YNR_Y_L3_RNG_RAT_SL, 0);
    MINT32 YNR_Y_FLT0_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_FLT0_IDX, pos_YNR_Y_FLT0_IDX, 0);
    MINT32 YNR_Y_FLT1_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_FLT1_IDX, pos_YNR_Y_FLT1_IDX, 0);
    MINT32 YNR_Y_FLT2_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_FLT2_IDX, pos_YNR_Y_FLT2_IDX, 0);
    MINT32 YNR_Y_FLT3_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_FLT3_IDX, pos_YNR_Y_FLT3_IDX, 0);
    MINT32 YNR_Y_SLOPE_H_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SLOPE_H_TH, pos_YNR_Y_SLOPE_H_TH, 0);
    MINT32 YNR_Y_SLOPE_V_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SLOPE_V_TH, pos_YNR_Y_SLOPE_V_TH, 0);
    MINT32 YNR_PTY_GAIN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_PTY_GAIN_TH, pos_YNR_PTY_GAIN_TH, 0);
    MINT32 YNR_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_LINK, pos_YNR_SL2_LINK, 0);
    MINT32 YNR_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_X1, pos_YNR_SL2_X1, 0);
    MINT32 YNR_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_X2, pos_YNR_SL2_X2, 0);
    MINT32 YNR_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_X3, pos_YNR_SL2_X3, 0);
    MINT32 YNR_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_GAIN0, pos_YNR_SL2_GAIN0, 0);
    MINT32 YNR_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_GAIN1, pos_YNR_SL2_GAIN1, 0);
    MINT32 YNR_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_GAIN2, pos_YNR_SL2_GAIN2, 0);
    MINT32 YNR_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_GAIN3, pos_YNR_SL2_GAIN3, 0);
    MINT32 YNR_SL2_SCALE_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_SCALE_GAIN, pos_YNR_SL2_SCALE_GAIN, 0);
    MINT32 YNR_SL2_C_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_C_GAIN, pos_YNR_SL2_C_GAIN, 0);
    MINT32 YNR_Y_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX1, pos_YNR_Y_CPX1, 0);
    MINT32 YNR_Y_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX2, pos_YNR_Y_CPX2, 0);
    MINT32 YNR_Y_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX3, pos_YNR_Y_CPX3, 0);
    MINT32 YNR_Y_CPX4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX4, pos_YNR_Y_CPX4, 0);
    MINT32 YNR_Y_CPX5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX5, pos_YNR_Y_CPX5, 0);
    MINT32 YNR_Y_CPX6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX6, pos_YNR_Y_CPX6, 0);
    MINT32 YNR_Y_CPX7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX7, pos_YNR_Y_CPX7, 0);
    MINT32 YNR_Y_CPX8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_CPX8, pos_YNR_Y_CPX8, 0);
    MINT32 YNR_Y_SCALE_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY0, pos_YNR_Y_SCALE_CPY0, 0);
    MINT32 YNR_Y_SCALE_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY1, pos_YNR_Y_SCALE_CPY1, 0);
    MINT32 YNR_Y_SCALE_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY2, pos_YNR_Y_SCALE_CPY2, 0);
    MINT32 YNR_Y_SCALE_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY3, pos_YNR_Y_SCALE_CPY3, 0);
    MINT32 YNR_Y_SCALE_CPY4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY4, pos_YNR_Y_SCALE_CPY4, 0);
    MINT32 YNR_Y_SCALE_CPY5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY5, pos_YNR_Y_SCALE_CPY5, 0);
    MINT32 YNR_Y_SCALE_CPY6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY6, pos_YNR_Y_SCALE_CPY6, 0);
    MINT32 YNR_Y_SCALE_CPY7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY7, pos_YNR_Y_SCALE_CPY7, 0);
    MINT32 YNR_Y_SCALE_CPY8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_CPY8, pos_YNR_Y_SCALE_CPY8, 0);
    MINT32 YNR_TBL_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_CPX1, pos_YNR_TBL_CPX1, 0);
    MINT32 YNR_TBL_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_CPX2, pos_YNR_TBL_CPX2, 0);
    MINT32 YNR_TBL_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_CPX3, pos_YNR_TBL_CPX3, 0);
    MINT32 YNR_TBL_GAIN_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_GAIN_CPY0, pos_YNR_TBL_GAIN_CPY0, 0);
    MINT32 YNR_TBL_GAIN_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_GAIN_CPY1, pos_YNR_TBL_GAIN_CPY1, 0);
    MINT32 YNR_TBL_GAIN_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_GAIN_CPY2, pos_YNR_TBL_GAIN_CPY2, 0);
    MINT32 YNR_TBL_GAIN_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_GAIN_CPY3, pos_YNR_TBL_GAIN_CPY3, 0);
    MINT32 YNR_TBL_GAIN_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_GAIN_SP3, pos_YNR_TBL_GAIN_SP3, 0);
    MINT32 YNR_C_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_CPX1, pos_YNR_C_CPX1, 0);
    MINT32 YNR_C_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_CPX2, pos_YNR_C_CPX2, 0);
    MINT32 YNR_C_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_CPX3, pos_YNR_C_CPX3, 0);
    MINT32 YNR_C_SCALE_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SCALE_CPY0, pos_YNR_C_SCALE_CPY0, 0);
    MINT32 YNR_C_SCALE_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SCALE_CPY1, pos_YNR_C_SCALE_CPY1, 0);
    MINT32 YNR_C_SCALE_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SCALE_CPY2, pos_YNR_C_SCALE_CPY2, 0);
    MINT32 YNR_C_SCALE_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SCALE_CPY3, pos_YNR_C_SCALE_CPY3, 0);
    MINT32 YNR_Y_L0_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_V_RNG4, pos_YNR_Y_L0_V_RNG4, 0);
    MINT32 YNR_Y_L0_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_V_RNG3, pos_YNR_Y_L0_V_RNG3, 0);
    MINT32 YNR_Y_L0_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_V_RNG2, pos_YNR_Y_L0_V_RNG2, 0);
    MINT32 YNR_Y_L0_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_V_RNG1, pos_YNR_Y_L0_V_RNG1, 0);
    MINT32 YNR_C_L_DIFF_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_L_DIFF_TH, pos_YNR_C_L_DIFF_TH, 0);
    MINT32 YNR_C_SM_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SM_EDGE, pos_YNR_C_SM_EDGE, 0);
    MINT32 YNR_C_SM_EDGE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SM_EDGE_TH, pos_YNR_C_SM_EDGE_TH, 0);
    MINT32 YNR_CEN_GAIN_HI_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_CEN_GAIN_HI_TH, pos_YNR_CEN_GAIN_HI_TH, 0);
    MINT32 YNR_CEN_GAIN_LO_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_CEN_GAIN_LO_TH, pos_YNR_CEN_GAIN_LO_TH, 0);
    MINT32 YNR_CEN_GAIN_HI_TH_LPF       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_CEN_GAIN_HI_TH_LPF, pos_YNR_CEN_GAIN_HI_TH_LPF, 0);
    MINT32 YNR_CEN_GAIN_LO_TH_LPF       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_CEN_GAIN_LO_TH_LPF, pos_YNR_CEN_GAIN_LO_TH_LPF, 0);
    MINT32 YNR_Y_ACT_CEN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CEN_TH, pos_YNR_Y_ACT_CEN_TH, 0);
    MINT32 YNR_Y_ACT_CEN_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CEN_GAIN, pos_YNR_Y_ACT_CEN_GAIN, 0);
    MINT32 YNR_Y_ACT_CEN_OFT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CEN_OFT, pos_YNR_Y_ACT_CEN_OFT, 0);
    MINT32 YNR_Y_VERT_SIGMA       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_VERT_SIGMA, pos_YNR_Y_VERT_SIGMA, 0);
    MINT32 YNR_Y_VERT_ACT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_VERT_ACT_TH, pos_YNR_Y_VERT_ACT_TH, 0);
    MINT32 YNR_PTC_GAIN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_PTC_GAIN_TH, pos_YNR_PTC_GAIN_TH, 0);
    MINT32 YNR_Y_L1_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_V_RNG4, pos_YNR_Y_L1_V_RNG4, 0);
    MINT32 YNR_Y_L1_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_V_RNG3, pos_YNR_Y_L1_V_RNG3, 0);
    MINT32 YNR_Y_L1_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_V_RNG2, pos_YNR_Y_L1_V_RNG2, 0);
    MINT32 YNR_Y_L1_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_V_RNG1, pos_YNR_Y_L1_V_RNG1, 0);
    MINT32 YNR_Y_L2_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_V_RNG4, pos_YNR_Y_L2_V_RNG4, 0);
    MINT32 YNR_Y_L2_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_V_RNG3, pos_YNR_Y_L2_V_RNG3, 0);
    MINT32 YNR_Y_L2_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_V_RNG2, pos_YNR_Y_L2_V_RNG2, 0);
    MINT32 YNR_Y_L2_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_V_RNG1, pos_YNR_Y_L2_V_RNG1, 0);
    MINT32 YNR_Y_L3_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_V_RNG4, pos_YNR_Y_L3_V_RNG4, 0);
    MINT32 YNR_Y_L3_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_V_RNG3, pos_YNR_Y_L3_V_RNG3, 0);
    MINT32 YNR_Y_L3_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_V_RNG2, pos_YNR_Y_L3_V_RNG2, 0);
    MINT32 YNR_Y_L3_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_V_RNG1, pos_YNR_Y_L3_V_RNG1, 0);
    MINT32 YNR_Y_L0_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_H_RNG4, pos_YNR_Y_L0_H_RNG4, 0);
    MINT32 YNR_Y_L0_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_H_RNG3, pos_YNR_Y_L0_H_RNG3, 0);
    MINT32 YNR_Y_L0_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_H_RNG2, pos_YNR_Y_L0_H_RNG2, 0);
    MINT32 YNR_Y_L0_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_H_RNG1, pos_YNR_Y_L0_H_RNG1, 0);
    MINT32 YNR_Y_L1_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_H_RNG4, pos_YNR_Y_L1_H_RNG4, 0);
    MINT32 YNR_Y_L1_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_H_RNG3, pos_YNR_Y_L1_H_RNG3, 0);
    MINT32 YNR_Y_L1_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_H_RNG2, pos_YNR_Y_L1_H_RNG2, 0);
    MINT32 YNR_Y_L1_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_H_RNG1, pos_YNR_Y_L1_H_RNG1, 0);
    MINT32 YNR_Y_L2_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_H_RNG4, pos_YNR_Y_L2_H_RNG4, 0);
    MINT32 YNR_Y_L2_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_H_RNG3, pos_YNR_Y_L2_H_RNG3, 0);
    MINT32 YNR_Y_L2_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_H_RNG2, pos_YNR_Y_L2_H_RNG2, 0);
    MINT32 YNR_Y_L2_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_H_RNG1, pos_YNR_Y_L2_H_RNG1, 0);
    MINT32 YNR_ACT_DIF_LO_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ACT_DIF_LO_TH, pos_YNR_ACT_DIF_LO_TH, 0);
    MINT32 YNR_ACT_DIF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ACT_DIF_GAIN, pos_YNR_ACT_DIF_GAIN, 0);
    MINT32 YNR_ACT_DIF_HI_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ACT_DIF_HI_TH, pos_YNR_ACT_DIF_HI_TH, 0);
    MINT32 YNR_ACT_SL2_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ACT_SL2_GAIN, pos_YNR_ACT_SL2_GAIN, 0);
    MINT32 YNR_Y_L3_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_H_RNG4, pos_YNR_Y_L3_H_RNG4, 0);
    MINT32 YNR_Y_L3_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_H_RNG3, pos_YNR_Y_L3_H_RNG3, 0);
    MINT32 YNR_Y_L3_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_H_RNG2, pos_YNR_Y_L3_H_RNG2, 0);
    MINT32 YNR_Y_L3_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_H_RNG1, pos_YNR_Y_L3_H_RNG1, 0);
    MINT32 YNR_C_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_V_RNG4, pos_YNR_C_V_RNG4, 0);
    MINT32 YNR_C_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_V_RNG3, pos_YNR_C_V_RNG3, 0);
    MINT32 YNR_C_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_V_RNG2, pos_YNR_C_V_RNG2, 0);
    MINT32 YNR_C_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_V_RNG1, pos_YNR_C_V_RNG1, 0);
    MINT32 YNR_C_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_H_RNG4, pos_YNR_C_H_RNG4, 0);
    MINT32 YNR_C_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_H_RNG3, pos_YNR_C_H_RNG3, 0);
    MINT32 YNR_C_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_H_RNG2, pos_YNR_C_H_RNG2, 0);
    MINT32 YNR_C_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_H_RNG1, pos_YNR_C_H_RNG1, 0);
    MINT32 YNR_Y_L0_HF_W       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L0_HF_W, pos_YNR_Y_L0_HF_W, 0);
    MINT32 YNR_Y_L1_HF_W       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L1_HF_W, pos_YNR_Y_L1_HF_W, 0);
    MINT32 YNR_Y_L2_HF_W       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L2_HF_W, pos_YNR_Y_L2_HF_W, 0);
    MINT32 YNR_Y_L3_HF_W       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_L3_HF_W, pos_YNR_Y_L3_HF_W, 0);
    MINT32 YNR_Y_HF_BAL_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_BAL_STR, pos_YNR_Y_HF_BAL_STR, 0);
    MINT32 YNR_Y_HF_CLIP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_CLIP, pos_YNR_Y_HF_CLIP, 0);
    MINT32 YNR_Y_HF_CORE_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_CORE_SL, pos_YNR_Y_HF_CORE_SL, 0);
    MINT32 YNR_Y_HF_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_CORE_TH, pos_YNR_Y_HF_CORE_TH, 0);
    MINT32 YNR_Y_HF_ACT_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_X1, pos_YNR_Y_HF_ACT_X1, 0);
    MINT32 YNR_Y_HF_ACT_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_X2, pos_YNR_Y_HF_ACT_X2, 0);
    MINT32 YNR_Y_HF_ACT_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_X3, pos_YNR_Y_HF_ACT_X3, 0);
    MINT32 YNR_Y_HF_ACT_X4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_X4, pos_YNR_Y_HF_ACT_X4, 0);
    MINT32 YNR_Y_HF_ACT_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_Y0, pos_YNR_Y_HF_ACT_Y0, 0);
    MINT32 YNR_Y_HF_ACT_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_Y1, pos_YNR_Y_HF_ACT_Y1, 0);
    MINT32 YNR_Y_HF_ACT_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_Y2, pos_YNR_Y_HF_ACT_Y2, 0);
    MINT32 YNR_Y_HF_ACT_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_Y3, pos_YNR_Y_HF_ACT_Y3, 0);
    MINT32 YNR_Y_HF_ACT_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_Y4, pos_YNR_Y_HF_ACT_Y4, 0);
    MINT32 YNR_Y_HF_LUMA_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_X1, pos_YNR_Y_HF_LUMA_X1, 0);
    MINT32 YNR_Y_HF_LUMA_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_X2, pos_YNR_Y_HF_LUMA_X2, 0);
    MINT32 YNR_Y_HF_LUMA_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_Y0, pos_YNR_Y_HF_LUMA_Y0, 0);
    MINT32 YNR_Y_HF_LUMA_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_Y1, pos_YNR_Y_HF_LUMA_Y1, 0);
    MINT32 YNR_Y_HF_LUMA_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_Y2, pos_YNR_Y_HF_LUMA_Y2, 0);
    MINT32 YNR_C_DITH_V       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_DITH_V, pos_YNR_C_DITH_V, 0);
    MINT32 YNR_C_DITH_U       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_DITH_U, pos_YNR_C_DITH_U, 0);
    MINT32 YNR_ACT_BLD_BASE_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ACT_BLD_BASE_C, pos_YNR_ACT_BLD_BASE_C, 0);
    MINT32 YNR_Y_ACT_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPX1, pos_YNR_Y_ACT_CPX1, 0);
    MINT32 YNR_Y_ACT_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPX2, pos_YNR_Y_ACT_CPX2, 0);
    MINT32 YNR_Y_ACT_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPX3, pos_YNR_Y_ACT_CPX3, 0);
    MINT32 YNR_Y_ACT_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPY0, pos_YNR_Y_ACT_CPY0, 0);
    MINT32 YNR_Y_ACT_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPY1, pos_YNR_Y_ACT_CPY1, 0);
    MINT32 YNR_Y_ACT_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPY2, pos_YNR_Y_ACT_CPY2, 0);
    MINT32 YNR_Y_ACT_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_CPY3, pos_YNR_Y_ACT_CPY3, 0);
    MINT32 YNR_TABLE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TABLE_EN, pos_YNR_TABLE_EN, 1);
    MINT32 YNR_TBL_PRC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_TBL_PRC, pos_YNR_TBL_PRC, 1);
    MINT32 YNR_ENY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ENY, pos_YNR_ENY, 1);
    MINT32 YNR_ENC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_ENC, pos_YNR_ENC, 1);
    MINT32 YNR_GAIN_PRC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_GAIN_PRC, pos_YNR_GAIN_PRC, 1);
    MINT32 YNR_LP_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_LP_MODE, pos_YNR_LP_MODE, 1);
    MINT32 YNR_LBIT_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_LBIT_MODE, pos_YNR_LBIT_MODE, 1);
    MINT32 YNR_VIDEO_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_VIDEO_MODE, pos_YNR_VIDEO_MODE, 1);
    MINT32 YNR_FLT_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_FLT_C, pos_YNR_FLT_C, 1);
    MINT32 YNR_IMPL_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_IMPL_MODE, pos_YNR_IMPL_MODE, 1);
    MINT32 YNR_Y_HF_BAL_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_BAL_MODE, pos_YNR_Y_HF_BAL_MODE, 1);

	//Slope Calculation
    MINT32 YNR_SL2_SP0       = CalculateLUTSP(   0, YNR_SL2_X1, YNR_SL2_GAIN0, YNR_SL2_GAIN1, 128, 15, -15);
	YNR_SL2_SP0  = Convert2Pos(YNR_SL2_SP0,32);
	MINT32 YNR_SL2_SP1       = CalculateLUTSP(   YNR_SL2_X1, YNR_SL2_X2, YNR_SL2_GAIN1, YNR_SL2_GAIN2, 128, 15, -15);
	YNR_SL2_SP1  = Convert2Pos(YNR_SL2_SP1,32);
	MINT32 YNR_SL2_SP2       = CalculateLUTSP(   YNR_SL2_X2, YNR_SL2_X3, YNR_SL2_GAIN2, YNR_SL2_GAIN3, 128, 15, -15);
	YNR_SL2_SP2  = Convert2Pos(YNR_SL2_SP2,32);
	MINT32 YNR_Y_SCALE_SP0       = CalculateLUTSP(   0, YNR_Y_CPX1, YNR_Y_SCALE_CPY0, YNR_Y_SCALE_CPY1, 128, 15, -15);
	YNR_Y_SCALE_SP0  = Convert2Pos(YNR_Y_SCALE_SP0,32);
	MINT32 YNR_Y_SCALE_SP1       = CalculateLUTSP(   YNR_Y_CPX1, YNR_Y_CPX2, YNR_Y_SCALE_CPY1, YNR_Y_SCALE_CPY2, 128, 15, -15);
	YNR_Y_SCALE_SP1  = Convert2Pos(YNR_Y_SCALE_SP1,32);
	MINT32 YNR_Y_SCALE_SP2       = CalculateLUTSP(   YNR_Y_CPX2, YNR_Y_CPX3, YNR_Y_SCALE_CPY2, YNR_Y_SCALE_CPY3, 128, 15, -15);
	YNR_Y_SCALE_SP2  = Convert2Pos(YNR_Y_SCALE_SP2,32);
	MINT32 YNR_Y_SCALE_SP3       = CalculateLUTSP(   YNR_Y_CPX3, YNR_Y_CPX4, YNR_Y_SCALE_CPY3, YNR_Y_SCALE_CPY4, 128, 15, -15);
	YNR_Y_SCALE_SP3  = Convert2Pos(YNR_Y_SCALE_SP3,32);
	MINT32 YNR_Y_SCALE_SP4       = CalculateLUTSP(   YNR_Y_CPX4, YNR_Y_CPX5, YNR_Y_SCALE_CPY4, YNR_Y_SCALE_CPY5, 128, 15, -15);
	YNR_Y_SCALE_SP4  = Convert2Pos(YNR_Y_SCALE_SP4,32);
	MINT32 YNR_Y_SCALE_SP5       = CalculateLUTSP(   YNR_Y_CPX5, YNR_Y_CPX6, YNR_Y_SCALE_CPY5, YNR_Y_SCALE_CPY6, 128, 15, -15);
	YNR_Y_SCALE_SP5  = Convert2Pos(YNR_Y_SCALE_SP5,32);
	MINT32 YNR_Y_SCALE_SP6       = CalculateLUTSP(   YNR_Y_CPX6, YNR_Y_CPX7, YNR_Y_SCALE_CPY6, YNR_Y_SCALE_CPY7, 128, 15, -15);
	YNR_Y_SCALE_SP6  = Convert2Pos(YNR_Y_SCALE_SP6,32);
	MINT32 YNR_Y_SCALE_SP7       = CalculateLUTSP(   YNR_Y_CPX7, YNR_Y_CPX8, YNR_Y_SCALE_CPY7, YNR_Y_SCALE_CPY8, 128, 15, -15);
	YNR_Y_SCALE_SP7  = Convert2Pos(YNR_Y_SCALE_SP7,32);
	MINT32 YNR_TBL_GAIN_SP0       = CalculateLUTSP(   0, YNR_TBL_CPX1, YNR_TBL_GAIN_CPY0, YNR_TBL_GAIN_CPY1, 128, 15, -15);
	YNR_TBL_GAIN_SP0  = Convert2Pos(YNR_TBL_GAIN_SP0,32);
	MINT32 YNR_TBL_GAIN_SP1       = CalculateLUTSP(   YNR_TBL_CPX1, YNR_TBL_CPX2, YNR_TBL_GAIN_CPY1, YNR_TBL_GAIN_CPY2, 128, 15, -15);
	YNR_TBL_GAIN_SP1  = Convert2Pos(YNR_TBL_GAIN_SP1,32);
	MINT32 YNR_TBL_GAIN_SP2       = CalculateLUTSP(   YNR_TBL_CPX2, YNR_TBL_CPX3, YNR_TBL_GAIN_CPY2, YNR_TBL_GAIN_CPY3, 128, 15, -15);
	YNR_TBL_GAIN_SP2  = Convert2Pos(YNR_TBL_GAIN_SP2,32);
	MINT32 YNR_C_SCALE_SP0       = CalculateLUTSP(   0, YNR_C_CPX1, YNR_C_SCALE_CPY0, YNR_C_SCALE_CPY1, 128, 15, -15);
	YNR_C_SCALE_SP0  = Convert2Pos(YNR_C_SCALE_SP0,32);
	MINT32 YNR_C_SCALE_SP1       = CalculateLUTSP(   YNR_C_CPX1, YNR_C_CPX2, YNR_C_SCALE_CPY1, YNR_C_SCALE_CPY2, 128, 15, -15);
	YNR_C_SCALE_SP1  = Convert2Pos(YNR_C_SCALE_SP1,32);
	MINT32 YNR_C_SCALE_SP2       = CalculateLUTSP(   YNR_C_CPX2, YNR_C_CPX3, YNR_C_SCALE_CPY2, YNR_C_SCALE_CPY3, 128, 15, -15);
	YNR_C_SCALE_SP2  = Convert2Pos(YNR_C_SCALE_SP2,32);
	MINT32 YNR_Y_HF_ACT_SP0       = CalculateLUTSP(   0, YNR_Y_HF_ACT_X1, YNR_Y_HF_ACT_Y0, YNR_Y_HF_ACT_Y1, 8, 31, -31);
	YNR_Y_HF_ACT_SP0  = Convert2Pos(YNR_Y_HF_ACT_SP0,64);
	MINT32 YNR_Y_HF_ACT_SP1       = CalculateLUTSP(   YNR_Y_HF_ACT_X1, YNR_Y_HF_ACT_X2, YNR_Y_HF_ACT_Y1, YNR_Y_HF_ACT_Y2, 8, 31, -31);
	YNR_Y_HF_ACT_SP1  = Convert2Pos(YNR_Y_HF_ACT_SP1,64);
	MINT32 YNR_Y_HF_ACT_SP2       = CalculateLUTSP(   YNR_Y_HF_ACT_X2, YNR_Y_HF_ACT_X3, YNR_Y_HF_ACT_Y2, YNR_Y_HF_ACT_Y3, 8, 31, -31);
	YNR_Y_HF_ACT_SP2  = Convert2Pos(YNR_Y_HF_ACT_SP2,64);
	MINT32 YNR_Y_HF_ACT_SP3       = CalculateLUTSP(   YNR_Y_HF_ACT_X3, YNR_Y_HF_ACT_X4, YNR_Y_HF_ACT_Y3, YNR_Y_HF_ACT_Y4, 8, 31, -31);
	YNR_Y_HF_ACT_SP3  = Convert2Pos(YNR_Y_HF_ACT_SP3,64);
	MINT32 YNR_Y_HF_LUMA_SP0       = CalculateLUTSP(   0, YNR_Y_HF_LUMA_X1, YNR_Y_HF_LUMA_Y0, YNR_Y_HF_LUMA_Y1, 8, 31, -31);
	YNR_Y_HF_LUMA_SP0  = Convert2Pos(YNR_Y_HF_LUMA_SP0,64);
	MINT32 YNR_Y_HF_LUMA_SP1       = CalculateLUTSP(   YNR_Y_HF_LUMA_X1, YNR_Y_HF_LUMA_X2, YNR_Y_HF_LUMA_Y1, YNR_Y_HF_LUMA_Y2, 8, 31, -31);
	YNR_Y_HF_LUMA_SP1  = Convert2Pos(YNR_Y_HF_LUMA_SP1,64);
	MINT32 YNR_Y_ACT_SP0       = CalculateLUTSP(   0, YNR_Y_ACT_CPX1, YNR_Y_ACT_CPY0, YNR_Y_ACT_CPY1, 128, 31, -31);
	YNR_Y_ACT_SP0  = Convert2Pos(YNR_Y_ACT_SP0,64);
	MINT32 YNR_Y_ACT_SP1       = CalculateLUTSP(   YNR_Y_ACT_CPX1, YNR_Y_ACT_CPX2, YNR_Y_ACT_CPY1, YNR_Y_ACT_CPY2, 128, 31, -31);
	YNR_Y_ACT_SP1  = Convert2Pos(YNR_Y_ACT_SP1,64);
	MINT32 YNR_Y_ACT_SP2       = CalculateLUTSP(   YNR_Y_ACT_CPX2, YNR_Y_ACT_CPX3, YNR_Y_ACT_CPY2, YNR_Y_ACT_CPY3, 128, 31, -31);
	YNR_Y_ACT_SP2  = Convert2Pos(YNR_Y_ACT_SP2,64);

	// signed interger interpolation
	pre_YNR_SL2_SP3 = Convert2Neg(pre_YNR_SL2_SP3,32);
	pos_YNR_SL2_SP3 = Convert2Neg(pos_YNR_SL2_SP3,32);
	pre_YNR_Y_SCALE_SP8 = Convert2Neg(pre_YNR_Y_SCALE_SP8,32);
	pos_YNR_Y_SCALE_SP8 = Convert2Neg(pos_YNR_Y_SCALE_SP8,32);
	pre_YNR_C_SCALE_SP3 = Convert2Neg(pre_YNR_C_SCALE_SP3,32);
	pos_YNR_C_SCALE_SP3 = Convert2Neg(pos_YNR_C_SCALE_SP3,32);
	pre_YNR_Y_HF_ACT_SP4 = Convert2Neg(pre_YNR_Y_HF_ACT_SP4,64);
	pos_YNR_Y_HF_ACT_SP4 = Convert2Neg(pos_YNR_Y_HF_ACT_SP4,64);
	pre_YNR_Y_HF_LUMA_SP2 = Convert2Neg(pre_YNR_Y_HF_LUMA_SP2,64);
	pos_YNR_Y_HF_LUMA_SP2 = Convert2Neg(pos_YNR_Y_HF_LUMA_SP2,64);
	pre_YNR_Y_ACT_SP3 = Convert2Neg(pre_YNR_Y_ACT_SP3,64);
	pos_YNR_Y_ACT_SP3 = Convert2Neg(pos_YNR_Y_ACT_SP3,64);

	MINT32 YNR_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_SL2_SP3, pos_YNR_SL2_SP3, 0);
	MINT32 YNR_Y_SCALE_SP8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_SCALE_SP8, pos_YNR_Y_SCALE_SP8, 0);
    MINT32 YNR_C_SCALE_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_C_SCALE_SP3, pos_YNR_C_SCALE_SP3, 0);
    MINT32 YNR_Y_HF_ACT_SP4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_ACT_SP4, pos_YNR_Y_HF_ACT_SP4, 0);
    MINT32 YNR_Y_HF_LUMA_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_HF_LUMA_SP2, pos_YNR_Y_HF_LUMA_SP2, 0);
    MINT32 YNR_Y_ACT_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNR_Y_ACT_SP3, pos_YNR_Y_ACT_SP3, 0);

	YNR_SL2_SP3  = Convert2Pos(YNR_SL2_SP3,32);
	YNR_Y_SCALE_SP8  = Convert2Pos(YNR_Y_SCALE_SP8,32);
	YNR_C_SCALE_SP3  = Convert2Pos(YNR_C_SCALE_SP3,32);
	YNR_Y_HF_ACT_SP4  = Convert2Pos(YNR_Y_HF_ACT_SP4,64);
	YNR_Y_HF_LUMA_SP2  = Convert2Pos(YNR_Y_HF_LUMA_SP2,64);
	YNR_Y_ACT_SP3  = Convert2Pos(YNR_Y_ACT_SP3,64);



    // interpolation result assignment
    rSmoothYNR.con1.bits.YNR_LCE_LINK       = YNR_LCE_LINK;
    rSmoothYNR.skin_con.bits.YNR_SKIN_LINK       = YNR_SKIN_LINK;
    rSmoothYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH       = YNR_Y_L0_RNG_RAT_TH;
    rSmoothYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH       = YNR_Y_L1_RNG_RAT_TH;
    rSmoothYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH       = YNR_Y_L2_RNG_RAT_TH;
    rSmoothYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH       = YNR_Y_L3_RNG_RAT_TH;
    rSmoothYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL       = YNR_Y_L0_RNG_RAT_SL;
    rSmoothYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL       = YNR_Y_L1_RNG_RAT_SL;
    rSmoothYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL       = YNR_Y_L2_RNG_RAT_SL;
    rSmoothYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL       = YNR_Y_L3_RNG_RAT_SL;
    rSmoothYNR.con1.bits.YNR_Y_FLT0_IDX       = YNR_Y_FLT0_IDX;
    rSmoothYNR.con1.bits.YNR_Y_FLT1_IDX       = YNR_Y_FLT1_IDX;
    rSmoothYNR.con1.bits.YNR_Y_FLT2_IDX       = YNR_Y_FLT2_IDX;
    rSmoothYNR.con1.bits.YNR_Y_FLT3_IDX       = YNR_Y_FLT3_IDX;
    rSmoothYNR.yad1.bits.YNR_Y_SLOPE_H_TH       = YNR_Y_SLOPE_H_TH;
    rSmoothYNR.yad1.bits.YNR_Y_SLOPE_V_TH       = YNR_Y_SLOPE_V_TH;
    rSmoothYNR.yad2.bits.YNR_PTY_GAIN_TH       = YNR_PTY_GAIN_TH;
    rSmoothYNR.con1.bits.YNR_SL2_LINK       = YNR_SL2_LINK;
    rSmoothYNR.l4lut1.bits.YNR_SL2_X1       = YNR_SL2_X1;
    rSmoothYNR.l4lut1.bits.YNR_SL2_X2       = YNR_SL2_X2;
    rSmoothYNR.l4lut1.bits.YNR_SL2_X3       = YNR_SL2_X3;
    rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN0       = YNR_SL2_GAIN0;
    rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN1       = YNR_SL2_GAIN1;
    rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN2       = YNR_SL2_GAIN2;
    rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN3       = YNR_SL2_GAIN3;
    rSmoothYNR.l4lut3.bits.YNR_SL2_SP3       = YNR_SL2_SP3;
    rSmoothYNR.sl2.bits.YNR_SL2_SCALE_GAIN       = YNR_SL2_SCALE_GAIN;
    rSmoothYNR.sl2.bits.YNR_SL2_C_GAIN       = YNR_SL2_C_GAIN;
    rSmoothYNR.y4lut1.bits.YNR_Y_CPX1       = YNR_Y_CPX1;
    rSmoothYNR.y4lut1.bits.YNR_Y_CPX2       = YNR_Y_CPX2;
    rSmoothYNR.y4lut1.bits.YNR_Y_CPX3       = YNR_Y_CPX3;
    rSmoothYNR.y4lut1.bits.YNR_Y_CPX4       = YNR_Y_CPX4;
    rSmoothYNR.y4lut4.bits.YNR_Y_CPX5       = YNR_Y_CPX5;
    rSmoothYNR.y4lut4.bits.YNR_Y_CPX6       = YNR_Y_CPX6;
    rSmoothYNR.y4lut4.bits.YNR_Y_CPX7       = YNR_Y_CPX7;
    rSmoothYNR.y4lut4.bits.YNR_Y_CPX8       = YNR_Y_CPX8;
    rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY0       = YNR_Y_SCALE_CPY0;
    rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY1       = YNR_Y_SCALE_CPY1;
    rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY2       = YNR_Y_SCALE_CPY2;
    rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY3       = YNR_Y_SCALE_CPY3;
    rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY4       = YNR_Y_SCALE_CPY4;
    rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY5       = YNR_Y_SCALE_CPY5;
    rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY6       = YNR_Y_SCALE_CPY6;
    rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY7       = YNR_Y_SCALE_CPY7;
    rSmoothYNR.y4lut7.bits.YNR_Y_SCALE_CPY8       = YNR_Y_SCALE_CPY8;
    rSmoothYNR.y4lut7.bits.YNR_Y_SCALE_SP8       = YNR_Y_SCALE_SP8;
    rSmoothYNR.t4lut1.bits.YNR_TBL_CPX1       = YNR_TBL_CPX1;
    rSmoothYNR.t4lut1.bits.YNR_TBL_CPX2       = YNR_TBL_CPX2;
    rSmoothYNR.t4lut1.bits.YNR_TBL_CPX3       = YNR_TBL_CPX3;
    rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0       = YNR_TBL_GAIN_CPY0;
    rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1       = YNR_TBL_GAIN_CPY1;
    rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2       = YNR_TBL_GAIN_CPY2;
    rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3       = YNR_TBL_GAIN_CPY3;
    rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP3       = YNR_TBL_GAIN_SP3;
    rSmoothYNR.c4lut1.bits.YNR_C_CPX1       = YNR_C_CPX1;
    rSmoothYNR.c4lut1.bits.YNR_C_CPX2       = YNR_C_CPX2;
    rSmoothYNR.c4lut1.bits.YNR_C_CPX3       = YNR_C_CPX3;
    rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY0       = YNR_C_SCALE_CPY0;
    rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY1       = YNR_C_SCALE_CPY1;
    rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY2       = YNR_C_SCALE_CPY2;
    rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY3       = YNR_C_SCALE_CPY3;
    rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP3       = YNR_C_SCALE_SP3;
    rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG4       = YNR_Y_L0_V_RNG4;
    rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG3       = YNR_Y_L0_V_RNG3;
    rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG2       = YNR_Y_L0_V_RNG2;
    rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG1       = YNR_Y_L0_V_RNG1;
    rSmoothYNR.cad.bits.YNR_C_L_DIFF_TH       = YNR_C_L_DIFF_TH;
    rSmoothYNR.con2.bits.YNR_C_SM_EDGE       = YNR_C_SM_EDGE;
    rSmoothYNR.con2.bits.YNR_C_SM_EDGE_TH       = YNR_C_SM_EDGE_TH;
    rSmoothYNR.yad1.bits.YNR_CEN_GAIN_HI_TH       = YNR_CEN_GAIN_HI_TH;
    rSmoothYNR.yad1.bits.YNR_CEN_GAIN_LO_TH       = YNR_CEN_GAIN_LO_TH;
    rSmoothYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF       = YNR_CEN_GAIN_HI_TH_LPF;
    rSmoothYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF       = YNR_CEN_GAIN_LO_TH_LPF;
    rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_TH       = YNR_Y_ACT_CEN_TH;
    rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_GAIN       = YNR_Y_ACT_CEN_GAIN;
    rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_OFT       = YNR_Y_ACT_CEN_OFT;
    rSmoothYNR.yad2.bits.YNR_Y_VERT_SIGMA       = YNR_Y_VERT_SIGMA;
    rSmoothYNR.yad2.bits.YNR_Y_VERT_ACT_TH       = YNR_Y_VERT_ACT_TH;
    rSmoothYNR.cad.bits.YNR_PTC_GAIN_TH       = YNR_PTC_GAIN_TH;
    rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG4       = YNR_Y_L1_V_RNG4;
    rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG3       = YNR_Y_L1_V_RNG3;
    rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG2       = YNR_Y_L1_V_RNG2;
    rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG1       = YNR_Y_L1_V_RNG1;
    rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG4       = YNR_Y_L2_V_RNG4;
    rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG3       = YNR_Y_L2_V_RNG3;
    rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG2       = YNR_Y_L2_V_RNG2;
    rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG1       = YNR_Y_L2_V_RNG1;
    rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG4       = YNR_Y_L3_V_RNG4;
    rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG3       = YNR_Y_L3_V_RNG3;
    rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG2       = YNR_Y_L3_V_RNG2;
    rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG1       = YNR_Y_L3_V_RNG1;
    rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG4       = YNR_Y_L0_H_RNG4;
    rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG3       = YNR_Y_L0_H_RNG3;
    rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG2       = YNR_Y_L0_H_RNG2;
    rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG1       = YNR_Y_L0_H_RNG1;
    rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG4       = YNR_Y_L1_H_RNG4;
    rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG3       = YNR_Y_L1_H_RNG3;
    rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG2       = YNR_Y_L1_H_RNG2;
    rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG1       = YNR_Y_L1_H_RNG1;
    rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG4       = YNR_Y_L2_H_RNG4;
    rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG3       = YNR_Y_L2_H_RNG3;
    rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG2       = YNR_Y_L2_H_RNG2;
    rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG1       = YNR_Y_L2_H_RNG1;
    rSmoothYNR.act1.bits.YNR_ACT_DIF_LO_TH       = YNR_ACT_DIF_LO_TH;
    rSmoothYNR.act1.bits.YNR_ACT_DIF_GAIN       = YNR_ACT_DIF_GAIN;
    rSmoothYNR.act1.bits.YNR_ACT_DIF_HI_TH       = YNR_ACT_DIF_HI_TH;
    rSmoothYNR.act1.bits.YNR_ACT_SL2_GAIN       = YNR_ACT_SL2_GAIN;
    rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG4       = YNR_Y_L3_H_RNG4;
    rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG3       = YNR_Y_L3_H_RNG3;
    rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG2       = YNR_Y_L3_H_RNG2;
    rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG1       = YNR_Y_L3_H_RNG1;
    rSmoothYNR.ptcv.bits.YNR_C_V_RNG4       = YNR_C_V_RNG4;
    rSmoothYNR.ptcv.bits.YNR_C_V_RNG3       = YNR_C_V_RNG3;
    rSmoothYNR.ptcv.bits.YNR_C_V_RNG2       = YNR_C_V_RNG2;
    rSmoothYNR.ptcv.bits.YNR_C_V_RNG1       = YNR_C_V_RNG1;
    rSmoothYNR.ptch.bits.YNR_C_H_RNG4       = YNR_C_H_RNG4;
    rSmoothYNR.ptch.bits.YNR_C_H_RNG3       = YNR_C_H_RNG3;
    rSmoothYNR.ptch.bits.YNR_C_H_RNG2       = YNR_C_H_RNG2;
    rSmoothYNR.ptch.bits.YNR_C_H_RNG1       = YNR_C_H_RNG1;
    rSmoothYNR.ylvl1.bits.YNR_Y_L0_HF_W       = YNR_Y_L0_HF_W;
    rSmoothYNR.ylvl1.bits.YNR_Y_L1_HF_W       = YNR_Y_L1_HF_W;
    rSmoothYNR.ylvl1.bits.YNR_Y_L2_HF_W       = YNR_Y_L2_HF_W;
    rSmoothYNR.ylvl1.bits.YNR_Y_L3_HF_W       = YNR_Y_L3_HF_W;
    rSmoothYNR.hf_cor.bits.YNR_Y_HF_BAL_STR       = YNR_Y_HF_BAL_STR;
    rSmoothYNR.hf_cor.bits.YNR_Y_HF_CLIP       = YNR_Y_HF_CLIP;
    rSmoothYNR.hf_cor.bits.YNR_Y_HF_CORE_SL       = YNR_Y_HF_CORE_SL;
    rSmoothYNR.hf_cor.bits.YNR_Y_HF_CORE_TH       = YNR_Y_HF_CORE_TH;
    rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X1       = YNR_Y_HF_ACT_X1;
    rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X2       = YNR_Y_HF_ACT_X2;
    rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X3       = YNR_Y_HF_ACT_X3;
    rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X4       = YNR_Y_HF_ACT_X4;
    rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0       = YNR_Y_HF_ACT_Y0;
    rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1       = YNR_Y_HF_ACT_Y1;
    rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2       = YNR_Y_HF_ACT_Y2;
    rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3       = YNR_Y_HF_ACT_Y3;
    rSmoothYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4       = YNR_Y_HF_ACT_Y4;
    rSmoothYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4       = YNR_Y_HF_ACT_SP4;
    rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1       = YNR_Y_HF_LUMA_X1;
    rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2       = YNR_Y_HF_LUMA_X2;
    rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0       = YNR_Y_HF_LUMA_Y0;
    rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1       = YNR_Y_HF_LUMA_Y1;
    rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2       = YNR_Y_HF_LUMA_Y2;
    rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2       = YNR_Y_HF_LUMA_SP2;
    rSmoothYNR.actc.bits.YNR_C_DITH_V       = YNR_C_DITH_V;
    rSmoothYNR.actc.bits.YNR_C_DITH_U       = YNR_C_DITH_U;
    rSmoothYNR.actc.bits.YNR_ACT_BLD_BASE_C       = YNR_ACT_BLD_BASE_C;
    rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX1       = YNR_Y_ACT_CPX1;
    rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX2       = YNR_Y_ACT_CPX2;
    rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX3       = YNR_Y_ACT_CPX3;
    rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY0       = YNR_Y_ACT_CPY0;
    rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY1       = YNR_Y_ACT_CPY1;
    rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY2       = YNR_Y_ACT_CPY2;
    rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY3       = YNR_Y_ACT_CPY3;
    rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP3       = YNR_Y_ACT_SP3;
    rSmoothYNR.con1.bits.YNR_TABLE_EN       = YNR_TABLE_EN;
    rSmoothYNR.con1.bits.YNR_TBL_PRC       = YNR_TBL_PRC;
    rSmoothYNR.con1.bits.YNR_ENY       = YNR_ENY;
    rSmoothYNR.con1.bits.YNR_ENC       = YNR_ENC;
    rSmoothYNR.yad2.bits.YNR_GAIN_PRC       = YNR_GAIN_PRC;
    rSmoothYNR.con1.bits.YNR_LP_MODE       = YNR_LP_MODE;
    rSmoothYNR.con1.bits.YNR_LBIT_MODE       = YNR_LBIT_MODE;
    rSmoothYNR.con1.bits.YNR_VIDEO_MODE       = YNR_VIDEO_MODE;
    rSmoothYNR.con2.bits.YNR_FLT_C       = YNR_FLT_C;
    rSmoothYNR.con2.bits.YNR_IMPL_MODE       = YNR_IMPL_MODE;
    rSmoothYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE       = YNR_Y_HF_BAL_MODE;
    rSmoothYNR.l4lut3.bits.YNR_SL2_SP0       = YNR_SL2_SP0;
    rSmoothYNR.l4lut3.bits.YNR_SL2_SP1       = YNR_SL2_SP1;
    rSmoothYNR.l4lut3.bits.YNR_SL2_SP2       = YNR_SL2_SP2;
    rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP0       = YNR_Y_SCALE_SP0;
    rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP1       = YNR_Y_SCALE_SP1;
    rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP2       = YNR_Y_SCALE_SP2;
    rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP3       = YNR_Y_SCALE_SP3;
    rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP4       = YNR_Y_SCALE_SP4;
    rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP5       = YNR_Y_SCALE_SP5;
    rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP6       = YNR_Y_SCALE_SP6;
    rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP7       = YNR_Y_SCALE_SP7;
    rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP0       = YNR_TBL_GAIN_SP0;
    rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP1       = YNR_TBL_GAIN_SP1;
    rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP2       = YNR_TBL_GAIN_SP2;
    rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP0       = YNR_C_SCALE_SP0;
    rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP1       = YNR_C_SCALE_SP1;
    rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP2       = YNR_C_SCALE_SP2;
    rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP0       = YNR_Y_HF_ACT_SP0;
    rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP1       = YNR_Y_HF_ACT_SP1;
    rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP2       = YNR_Y_HF_ACT_SP2;
    rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP3       = YNR_Y_HF_ACT_SP3;
    rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP0       = YNR_Y_HF_LUMA_SP0;
    rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP1       = YNR_Y_HF_LUMA_SP1;
    rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP0       = YNR_Y_ACT_SP0;
    rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP1       = YNR_Y_ACT_SP1;
    rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP2       = YNR_Y_ACT_SP2;


    // logging
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_LCE_LINK       = %d, %d, %d", rLowerYNR.con1.bits.YNR_LCE_LINK, rSmoothYNR.con1.bits.YNR_LCE_LINK, rUpperYNR.con1.bits.YNR_LCE_LINK);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SKIN_LINK       = %d, %d, %d", rLowerYNR.skin_con.bits.YNR_SKIN_LINK, rSmoothYNR.skin_con.bits.YNR_SKIN_LINK, rUpperYNR.skin_con.bits.YNR_SKIN_LINK);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_RNG_RAT_TH       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH, rSmoothYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH, rUpperYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_RNG_RAT_TH       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH, rSmoothYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH, rUpperYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_RNG_RAT_TH       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH, rSmoothYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH, rUpperYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_RNG_RAT_TH       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH, rSmoothYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH, rUpperYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_RNG_RAT_SL       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL, rSmoothYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL, rUpperYNR.ylvl0.bits.YNR_Y_L0_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_RNG_RAT_SL       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL, rSmoothYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL, rUpperYNR.ylvl0.bits.YNR_Y_L1_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_RNG_RAT_SL       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL, rSmoothYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL, rUpperYNR.ylvl0.bits.YNR_Y_L2_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_RNG_RAT_SL       = %d, %d, %d", rLowerYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL, rSmoothYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL, rUpperYNR.ylvl0.bits.YNR_Y_L3_RNG_RAT_SL);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_FLT0_IDX       = %d, %d, %d", rLowerYNR.con1.bits.YNR_Y_FLT0_IDX, rSmoothYNR.con1.bits.YNR_Y_FLT0_IDX, rUpperYNR.con1.bits.YNR_Y_FLT0_IDX);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_FLT1_IDX       = %d, %d, %d", rLowerYNR.con1.bits.YNR_Y_FLT1_IDX, rSmoothYNR.con1.bits.YNR_Y_FLT1_IDX, rUpperYNR.con1.bits.YNR_Y_FLT1_IDX);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_FLT2_IDX       = %d, %d, %d", rLowerYNR.con1.bits.YNR_Y_FLT2_IDX, rSmoothYNR.con1.bits.YNR_Y_FLT2_IDX, rUpperYNR.con1.bits.YNR_Y_FLT2_IDX);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_FLT3_IDX       = %d, %d, %d", rLowerYNR.con1.bits.YNR_Y_FLT3_IDX, rSmoothYNR.con1.bits.YNR_Y_FLT3_IDX, rUpperYNR.con1.bits.YNR_Y_FLT3_IDX);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SLOPE_H_TH       = %d, %d, %d", rLowerYNR.yad1.bits.YNR_Y_SLOPE_H_TH, rSmoothYNR.yad1.bits.YNR_Y_SLOPE_H_TH, rUpperYNR.yad1.bits.YNR_Y_SLOPE_H_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SLOPE_V_TH       = %d, %d, %d", rLowerYNR.yad1.bits.YNR_Y_SLOPE_V_TH, rSmoothYNR.yad1.bits.YNR_Y_SLOPE_V_TH, rUpperYNR.yad1.bits.YNR_Y_SLOPE_V_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_PTY_GAIN_TH       = %d, %d, %d", rLowerYNR.yad2.bits.YNR_PTY_GAIN_TH, rSmoothYNR.yad2.bits.YNR_PTY_GAIN_TH, rUpperYNR.yad2.bits.YNR_PTY_GAIN_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_LINK       = %d, %d, %d", rLowerYNR.con1.bits.YNR_SL2_LINK, rSmoothYNR.con1.bits.YNR_SL2_LINK, rUpperYNR.con1.bits.YNR_SL2_LINK);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_X1       = %d, %d, %d", rLowerYNR.l4lut1.bits.YNR_SL2_X1, rSmoothYNR.l4lut1.bits.YNR_SL2_X1, rUpperYNR.l4lut1.bits.YNR_SL2_X1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_X2       = %d, %d, %d", rLowerYNR.l4lut1.bits.YNR_SL2_X2, rSmoothYNR.l4lut1.bits.YNR_SL2_X2, rUpperYNR.l4lut1.bits.YNR_SL2_X2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_X3       = %d, %d, %d", rLowerYNR.l4lut1.bits.YNR_SL2_X3, rSmoothYNR.l4lut1.bits.YNR_SL2_X3, rUpperYNR.l4lut1.bits.YNR_SL2_X3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_GAIN0       = %d, %d, %d", rLowerYNR.l4lut2.bits.YNR_SL2_GAIN0, rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN0, rUpperYNR.l4lut2.bits.YNR_SL2_GAIN0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_GAIN1       = %d, %d, %d", rLowerYNR.l4lut2.bits.YNR_SL2_GAIN1, rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN1, rUpperYNR.l4lut2.bits.YNR_SL2_GAIN1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_GAIN2       = %d, %d, %d", rLowerYNR.l4lut2.bits.YNR_SL2_GAIN2, rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN2, rUpperYNR.l4lut2.bits.YNR_SL2_GAIN2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_GAIN3       = %d, %d, %d", rLowerYNR.l4lut2.bits.YNR_SL2_GAIN3, rSmoothYNR.l4lut2.bits.YNR_SL2_GAIN3, rUpperYNR.l4lut2.bits.YNR_SL2_GAIN3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_SP3       = %d, %d, %d", rLowerYNR.l4lut3.bits.YNR_SL2_SP3, rSmoothYNR.l4lut3.bits.YNR_SL2_SP3, rUpperYNR.l4lut3.bits.YNR_SL2_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_SCALE_GAIN       = %d, %d, %d", rLowerYNR.sl2.bits.YNR_SL2_SCALE_GAIN, rSmoothYNR.sl2.bits.YNR_SL2_SCALE_GAIN, rUpperYNR.sl2.bits.YNR_SL2_SCALE_GAIN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_C_GAIN       = %d, %d, %d", rLowerYNR.sl2.bits.YNR_SL2_C_GAIN, rSmoothYNR.sl2.bits.YNR_SL2_C_GAIN, rUpperYNR.sl2.bits.YNR_SL2_C_GAIN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX1       = %d, %d, %d", rLowerYNR.y4lut1.bits.YNR_Y_CPX1, rSmoothYNR.y4lut1.bits.YNR_Y_CPX1, rUpperYNR.y4lut1.bits.YNR_Y_CPX1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX2       = %d, %d, %d", rLowerYNR.y4lut1.bits.YNR_Y_CPX2, rSmoothYNR.y4lut1.bits.YNR_Y_CPX2, rUpperYNR.y4lut1.bits.YNR_Y_CPX2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX3       = %d, %d, %d", rLowerYNR.y4lut1.bits.YNR_Y_CPX3, rSmoothYNR.y4lut1.bits.YNR_Y_CPX3, rUpperYNR.y4lut1.bits.YNR_Y_CPX3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX4       = %d, %d, %d", rLowerYNR.y4lut1.bits.YNR_Y_CPX4, rSmoothYNR.y4lut1.bits.YNR_Y_CPX4, rUpperYNR.y4lut1.bits.YNR_Y_CPX4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX5       = %d, %d, %d", rLowerYNR.y4lut4.bits.YNR_Y_CPX5, rSmoothYNR.y4lut4.bits.YNR_Y_CPX5, rUpperYNR.y4lut4.bits.YNR_Y_CPX5);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX6       = %d, %d, %d", rLowerYNR.y4lut4.bits.YNR_Y_CPX6, rSmoothYNR.y4lut4.bits.YNR_Y_CPX6, rUpperYNR.y4lut4.bits.YNR_Y_CPX6);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX7       = %d, %d, %d", rLowerYNR.y4lut4.bits.YNR_Y_CPX7, rSmoothYNR.y4lut4.bits.YNR_Y_CPX7, rUpperYNR.y4lut4.bits.YNR_Y_CPX7);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_CPX8       = %d, %d, %d", rLowerYNR.y4lut4.bits.YNR_Y_CPX8, rSmoothYNR.y4lut4.bits.YNR_Y_CPX8, rUpperYNR.y4lut4.bits.YNR_Y_CPX8);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY0       = %d, %d, %d", rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY0, rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY0, rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY1       = %d, %d, %d", rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY1, rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY1, rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY2       = %d, %d, %d", rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY2, rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY2, rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY3       = %d, %d, %d", rLowerYNR.y4lut2.bits.YNR_Y_SCALE_CPY3, rSmoothYNR.y4lut2.bits.YNR_Y_SCALE_CPY3, rUpperYNR.y4lut2.bits.YNR_Y_SCALE_CPY3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY4       = %d, %d, %d", rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY4, rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY4, rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY5       = %d, %d, %d", rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY5, rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY5, rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY5);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY6       = %d, %d, %d", rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY6, rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY6, rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY6);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY7       = %d, %d, %d", rLowerYNR.y4lut5.bits.YNR_Y_SCALE_CPY7, rSmoothYNR.y4lut5.bits.YNR_Y_SCALE_CPY7, rUpperYNR.y4lut5.bits.YNR_Y_SCALE_CPY7);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_CPY8       = %d, %d, %d", rLowerYNR.y4lut7.bits.YNR_Y_SCALE_CPY8, rSmoothYNR.y4lut7.bits.YNR_Y_SCALE_CPY8, rUpperYNR.y4lut7.bits.YNR_Y_SCALE_CPY8);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP8       = %d, %d, %d", rLowerYNR.y4lut7.bits.YNR_Y_SCALE_SP8, rSmoothYNR.y4lut7.bits.YNR_Y_SCALE_SP8, rUpperYNR.y4lut7.bits.YNR_Y_SCALE_SP8);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_CPX1       = %d, %d, %d", rLowerYNR.t4lut1.bits.YNR_TBL_CPX1, rSmoothYNR.t4lut1.bits.YNR_TBL_CPX1, rUpperYNR.t4lut1.bits.YNR_TBL_CPX1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_CPX2       = %d, %d, %d", rLowerYNR.t4lut1.bits.YNR_TBL_CPX2, rSmoothYNR.t4lut1.bits.YNR_TBL_CPX2, rUpperYNR.t4lut1.bits.YNR_TBL_CPX2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_CPX3       = %d, %d, %d", rLowerYNR.t4lut1.bits.YNR_TBL_CPX3, rSmoothYNR.t4lut1.bits.YNR_TBL_CPX3, rUpperYNR.t4lut1.bits.YNR_TBL_CPX3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_CPY0       = %d, %d, %d", rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0, rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0, rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_CPY1       = %d, %d, %d", rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1, rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1, rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_CPY2       = %d, %d, %d", rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2, rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2, rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_CPY3       = %d, %d, %d", rLowerYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3, rSmoothYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3, rUpperYNR.t4lut2.bits.YNR_TBL_GAIN_CPY3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_SP3       = %d, %d, %d", rLowerYNR.t4lut3.bits.YNR_TBL_GAIN_SP3, rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP3, rUpperYNR.t4lut3.bits.YNR_TBL_GAIN_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_CPX1       = %d, %d, %d", rLowerYNR.c4lut1.bits.YNR_C_CPX1, rSmoothYNR.c4lut1.bits.YNR_C_CPX1, rUpperYNR.c4lut1.bits.YNR_C_CPX1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_CPX2       = %d, %d, %d", rLowerYNR.c4lut1.bits.YNR_C_CPX2, rSmoothYNR.c4lut1.bits.YNR_C_CPX2, rUpperYNR.c4lut1.bits.YNR_C_CPX2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_CPX3       = %d, %d, %d", rLowerYNR.c4lut1.bits.YNR_C_CPX3, rSmoothYNR.c4lut1.bits.YNR_C_CPX3, rUpperYNR.c4lut1.bits.YNR_C_CPX3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_CPY0       = %d, %d, %d", rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY0, rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY0, rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_CPY1       = %d, %d, %d", rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY1, rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY1, rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_CPY2       = %d, %d, %d", rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY2, rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY2, rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_CPY3       = %d, %d, %d", rLowerYNR.c4lut2.bits.YNR_C_SCALE_CPY3, rSmoothYNR.c4lut2.bits.YNR_C_SCALE_CPY3, rUpperYNR.c4lut2.bits.YNR_C_SCALE_CPY3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_SP3       = %d, %d, %d", rLowerYNR.c4lut3.bits.YNR_C_SCALE_SP3, rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP3, rUpperYNR.c4lut3.bits.YNR_C_SCALE_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_V_RNG4       = %d, %d, %d", rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG4, rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG4, rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_V_RNG3       = %d, %d, %d", rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG3, rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG3, rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_V_RNG2       = %d, %d, %d", rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG2, rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG2, rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_V_RNG1       = %d, %d, %d", rLowerYNR.pty0v.bits.YNR_Y_L0_V_RNG1, rSmoothYNR.pty0v.bits.YNR_Y_L0_V_RNG1, rUpperYNR.pty0v.bits.YNR_Y_L0_V_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_L_DIFF_TH       = %d, %d, %d", rLowerYNR.cad.bits.YNR_C_L_DIFF_TH, rSmoothYNR.cad.bits.YNR_C_L_DIFF_TH, rUpperYNR.cad.bits.YNR_C_L_DIFF_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SM_EDGE       = %d, %d, %d", rLowerYNR.con2.bits.YNR_C_SM_EDGE, rSmoothYNR.con2.bits.YNR_C_SM_EDGE, rUpperYNR.con2.bits.YNR_C_SM_EDGE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SM_EDGE_TH       = %d, %d, %d", rLowerYNR.con2.bits.YNR_C_SM_EDGE_TH, rSmoothYNR.con2.bits.YNR_C_SM_EDGE_TH, rUpperYNR.con2.bits.YNR_C_SM_EDGE_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_CEN_GAIN_HI_TH       = %d, %d, %d", rLowerYNR.yad1.bits.YNR_CEN_GAIN_HI_TH, rSmoothYNR.yad1.bits.YNR_CEN_GAIN_HI_TH, rUpperYNR.yad1.bits.YNR_CEN_GAIN_HI_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_CEN_GAIN_LO_TH       = %d, %d, %d", rLowerYNR.yad1.bits.YNR_CEN_GAIN_LO_TH, rSmoothYNR.yad1.bits.YNR_CEN_GAIN_LO_TH, rUpperYNR.yad1.bits.YNR_CEN_GAIN_LO_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_CEN_GAIN_HI_TH_LPF       = %d, %d, %d", rLowerYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF, rSmoothYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF, rUpperYNR.ylad.bits.YNR_CEN_GAIN_HI_TH_LPF);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_CEN_GAIN_LO_TH_LPF       = %d, %d, %d", rLowerYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF, rSmoothYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF, rUpperYNR.ylad.bits.YNR_CEN_GAIN_LO_TH_LPF);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CEN_TH       = %d, %d, %d", rLowerYNR.act4.bits.YNR_Y_ACT_CEN_TH, rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_TH, rUpperYNR.act4.bits.YNR_Y_ACT_CEN_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CEN_GAIN       = %d, %d, %d", rLowerYNR.act4.bits.YNR_Y_ACT_CEN_GAIN, rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_GAIN, rUpperYNR.act4.bits.YNR_Y_ACT_CEN_GAIN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CEN_OFT       = %d, %d, %d", rLowerYNR.act4.bits.YNR_Y_ACT_CEN_OFT, rSmoothYNR.act4.bits.YNR_Y_ACT_CEN_OFT, rUpperYNR.act4.bits.YNR_Y_ACT_CEN_OFT);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_VERT_SIGMA       = %d, %d, %d", rLowerYNR.yad2.bits.YNR_Y_VERT_SIGMA, rSmoothYNR.yad2.bits.YNR_Y_VERT_SIGMA, rUpperYNR.yad2.bits.YNR_Y_VERT_SIGMA);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_VERT_ACT_TH       = %d, %d, %d", rLowerYNR.yad2.bits.YNR_Y_VERT_ACT_TH, rSmoothYNR.yad2.bits.YNR_Y_VERT_ACT_TH, rUpperYNR.yad2.bits.YNR_Y_VERT_ACT_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_PTC_GAIN_TH       = %d, %d, %d", rLowerYNR.cad.bits.YNR_PTC_GAIN_TH, rSmoothYNR.cad.bits.YNR_PTC_GAIN_TH, rUpperYNR.cad.bits.YNR_PTC_GAIN_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_V_RNG4       = %d, %d, %d", rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG4, rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG4, rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_V_RNG3       = %d, %d, %d", rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG3, rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG3, rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_V_RNG2       = %d, %d, %d", rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG2, rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG2, rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_V_RNG1       = %d, %d, %d", rLowerYNR.pty1v.bits.YNR_Y_L1_V_RNG1, rSmoothYNR.pty1v.bits.YNR_Y_L1_V_RNG1, rUpperYNR.pty1v.bits.YNR_Y_L1_V_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_V_RNG4       = %d, %d, %d", rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG4, rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG4, rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_V_RNG3       = %d, %d, %d", rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG3, rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG3, rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_V_RNG2       = %d, %d, %d", rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG2, rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG2, rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_V_RNG1       = %d, %d, %d", rLowerYNR.pty2v.bits.YNR_Y_L2_V_RNG1, rSmoothYNR.pty2v.bits.YNR_Y_L2_V_RNG1, rUpperYNR.pty2v.bits.YNR_Y_L2_V_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_V_RNG4       = %d, %d, %d", rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG4, rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG4, rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_V_RNG3       = %d, %d, %d", rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG3, rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG3, rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_V_RNG2       = %d, %d, %d", rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG2, rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG2, rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_V_RNG1       = %d, %d, %d", rLowerYNR.pty3v.bits.YNR_Y_L3_V_RNG1, rSmoothYNR.pty3v.bits.YNR_Y_L3_V_RNG1, rUpperYNR.pty3v.bits.YNR_Y_L3_V_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_H_RNG4       = %d, %d, %d", rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG4, rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG4, rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_H_RNG3       = %d, %d, %d", rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG3, rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG3, rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_H_RNG2       = %d, %d, %d", rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG2, rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG2, rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_H_RNG1       = %d, %d, %d", rLowerYNR.pty0h.bits.YNR_Y_L0_H_RNG1, rSmoothYNR.pty0h.bits.YNR_Y_L0_H_RNG1, rUpperYNR.pty0h.bits.YNR_Y_L0_H_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_H_RNG4       = %d, %d, %d", rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG4, rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG4, rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_H_RNG3       = %d, %d, %d", rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG3, rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG3, rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_H_RNG2       = %d, %d, %d", rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG2, rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG2, rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_H_RNG1       = %d, %d, %d", rLowerYNR.pty1h.bits.YNR_Y_L1_H_RNG1, rSmoothYNR.pty1h.bits.YNR_Y_L1_H_RNG1, rUpperYNR.pty1h.bits.YNR_Y_L1_H_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_H_RNG4       = %d, %d, %d", rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG4, rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG4, rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_H_RNG3       = %d, %d, %d", rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG3, rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG3, rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_H_RNG2       = %d, %d, %d", rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG2, rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG2, rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_H_RNG1       = %d, %d, %d", rLowerYNR.pty2h.bits.YNR_Y_L2_H_RNG1, rSmoothYNR.pty2h.bits.YNR_Y_L2_H_RNG1, rUpperYNR.pty2h.bits.YNR_Y_L2_H_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ACT_DIF_LO_TH       = %d, %d, %d", rLowerYNR.act1.bits.YNR_ACT_DIF_LO_TH, rSmoothYNR.act1.bits.YNR_ACT_DIF_LO_TH, rUpperYNR.act1.bits.YNR_ACT_DIF_LO_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ACT_DIF_GAIN       = %d, %d, %d", rLowerYNR.act1.bits.YNR_ACT_DIF_GAIN, rSmoothYNR.act1.bits.YNR_ACT_DIF_GAIN, rUpperYNR.act1.bits.YNR_ACT_DIF_GAIN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ACT_DIF_HI_TH       = %d, %d, %d", rLowerYNR.act1.bits.YNR_ACT_DIF_HI_TH, rSmoothYNR.act1.bits.YNR_ACT_DIF_HI_TH, rUpperYNR.act1.bits.YNR_ACT_DIF_HI_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ACT_SL2_GAIN       = %d, %d, %d", rLowerYNR.act1.bits.YNR_ACT_SL2_GAIN, rSmoothYNR.act1.bits.YNR_ACT_SL2_GAIN, rUpperYNR.act1.bits.YNR_ACT_SL2_GAIN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_H_RNG4       = %d, %d, %d", rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG4, rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG4, rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_H_RNG3       = %d, %d, %d", rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG3, rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG3, rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_H_RNG2       = %d, %d, %d", rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG2, rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG2, rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_H_RNG1       = %d, %d, %d", rLowerYNR.pty3h.bits.YNR_Y_L3_H_RNG1, rSmoothYNR.pty3h.bits.YNR_Y_L3_H_RNG1, rUpperYNR.pty3h.bits.YNR_Y_L3_H_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_V_RNG4       = %d, %d, %d", rLowerYNR.ptcv.bits.YNR_C_V_RNG4, rSmoothYNR.ptcv.bits.YNR_C_V_RNG4, rUpperYNR.ptcv.bits.YNR_C_V_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_V_RNG3       = %d, %d, %d", rLowerYNR.ptcv.bits.YNR_C_V_RNG3, rSmoothYNR.ptcv.bits.YNR_C_V_RNG3, rUpperYNR.ptcv.bits.YNR_C_V_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_V_RNG2       = %d, %d, %d", rLowerYNR.ptcv.bits.YNR_C_V_RNG2, rSmoothYNR.ptcv.bits.YNR_C_V_RNG2, rUpperYNR.ptcv.bits.YNR_C_V_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_V_RNG1       = %d, %d, %d", rLowerYNR.ptcv.bits.YNR_C_V_RNG1, rSmoothYNR.ptcv.bits.YNR_C_V_RNG1, rUpperYNR.ptcv.bits.YNR_C_V_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_H_RNG4       = %d, %d, %d", rLowerYNR.ptch.bits.YNR_C_H_RNG4, rSmoothYNR.ptch.bits.YNR_C_H_RNG4, rUpperYNR.ptch.bits.YNR_C_H_RNG4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_H_RNG3       = %d, %d, %d", rLowerYNR.ptch.bits.YNR_C_H_RNG3, rSmoothYNR.ptch.bits.YNR_C_H_RNG3, rUpperYNR.ptch.bits.YNR_C_H_RNG3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_H_RNG2       = %d, %d, %d", rLowerYNR.ptch.bits.YNR_C_H_RNG2, rSmoothYNR.ptch.bits.YNR_C_H_RNG2, rUpperYNR.ptch.bits.YNR_C_H_RNG2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_H_RNG1       = %d, %d, %d", rLowerYNR.ptch.bits.YNR_C_H_RNG1, rSmoothYNR.ptch.bits.YNR_C_H_RNG1, rUpperYNR.ptch.bits.YNR_C_H_RNG1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L0_HF_W       = %d, %d, %d", rLowerYNR.ylvl1.bits.YNR_Y_L0_HF_W, rSmoothYNR.ylvl1.bits.YNR_Y_L0_HF_W, rUpperYNR.ylvl1.bits.YNR_Y_L0_HF_W);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L1_HF_W       = %d, %d, %d", rLowerYNR.ylvl1.bits.YNR_Y_L1_HF_W, rSmoothYNR.ylvl1.bits.YNR_Y_L1_HF_W, rUpperYNR.ylvl1.bits.YNR_Y_L1_HF_W);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L2_HF_W       = %d, %d, %d", rLowerYNR.ylvl1.bits.YNR_Y_L2_HF_W, rSmoothYNR.ylvl1.bits.YNR_Y_L2_HF_W, rUpperYNR.ylvl1.bits.YNR_Y_L2_HF_W);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_L3_HF_W       = %d, %d, %d", rLowerYNR.ylvl1.bits.YNR_Y_L3_HF_W, rSmoothYNR.ylvl1.bits.YNR_Y_L3_HF_W, rUpperYNR.ylvl1.bits.YNR_Y_L3_HF_W);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_BAL_STR       = %d, %d, %d", rLowerYNR.hf_cor.bits.YNR_Y_HF_BAL_STR, rSmoothYNR.hf_cor.bits.YNR_Y_HF_BAL_STR, rUpperYNR.hf_cor.bits.YNR_Y_HF_BAL_STR);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_CLIP       = %d, %d, %d", rLowerYNR.hf_cor.bits.YNR_Y_HF_CLIP, rSmoothYNR.hf_cor.bits.YNR_Y_HF_CLIP, rUpperYNR.hf_cor.bits.YNR_Y_HF_CLIP);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_CORE_SL       = %d, %d, %d", rLowerYNR.hf_cor.bits.YNR_Y_HF_CORE_SL, rSmoothYNR.hf_cor.bits.YNR_Y_HF_CORE_SL, rUpperYNR.hf_cor.bits.YNR_Y_HF_CORE_SL);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_CORE_TH       = %d, %d, %d", rLowerYNR.hf_cor.bits.YNR_Y_HF_CORE_TH, rSmoothYNR.hf_cor.bits.YNR_Y_HF_CORE_TH, rUpperYNR.hf_cor.bits.YNR_Y_HF_CORE_TH);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_X1       = %d, %d, %d", rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X1, rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X1, rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_X2       = %d, %d, %d", rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X2, rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X2, rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_X3       = %d, %d, %d", rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X3, rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X3, rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_X4       = %d, %d, %d", rLowerYNR.hf_act0.bits.YNR_Y_HF_ACT_X4, rSmoothYNR.hf_act0.bits.YNR_Y_HF_ACT_X4, rUpperYNR.hf_act0.bits.YNR_Y_HF_ACT_X4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_Y0       = %d, %d, %d", rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0, rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0, rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_Y1       = %d, %d, %d", rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1, rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1, rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_Y2       = %d, %d, %d", rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2, rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2, rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_Y3       = %d, %d, %d", rLowerYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3, rSmoothYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3, rUpperYNR.hf_act1.bits.YNR_Y_HF_ACT_Y3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_Y4       = %d, %d, %d", rLowerYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4, rSmoothYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4, rUpperYNR.hf_act2.bits.YNR_Y_HF_ACT_Y4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_SP4       = %d, %d, %d", rLowerYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4, rSmoothYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4, rUpperYNR.hf_act2.bits.YNR_Y_HF_ACT_SP4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_X1       = %d, %d, %d", rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1, rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1, rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_X2       = %d, %d, %d", rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2, rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2, rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_X2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_Y0       = %d, %d, %d", rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0, rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0, rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_Y1       = %d, %d, %d", rLowerYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1, rSmoothYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1, rUpperYNR.hf_luma0.bits.YNR_Y_HF_LUMA_Y1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_Y2       = %d, %d, %d", rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2, rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2, rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_Y2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_SP2       = %d, %d, %d", rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2, rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2, rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_DITH_V       = %d, %d, %d", rLowerYNR.actc.bits.YNR_C_DITH_V, rSmoothYNR.actc.bits.YNR_C_DITH_V, rUpperYNR.actc.bits.YNR_C_DITH_V);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_DITH_U       = %d, %d, %d", rLowerYNR.actc.bits.YNR_C_DITH_U, rSmoothYNR.actc.bits.YNR_C_DITH_U, rUpperYNR.actc.bits.YNR_C_DITH_U);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ACT_BLD_BASE_C       = %d, %d, %d", rLowerYNR.actc.bits.YNR_ACT_BLD_BASE_C, rSmoothYNR.actc.bits.YNR_ACT_BLD_BASE_C, rUpperYNR.actc.bits.YNR_ACT_BLD_BASE_C);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPX1       = %d, %d, %d", rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX1, rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX1, rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPX2       = %d, %d, %d", rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX2, rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX2, rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPX3       = %d, %d, %d", rLowerYNR.a4lut1.bits.YNR_Y_ACT_CPX3, rSmoothYNR.a4lut1.bits.YNR_Y_ACT_CPX3, rUpperYNR.a4lut1.bits.YNR_Y_ACT_CPX3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPY0       = %d, %d, %d", rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY0, rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY0, rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPY1       = %d, %d, %d", rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY1, rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY1, rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPY2       = %d, %d, %d", rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY2, rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY2, rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_CPY3       = %d, %d, %d", rLowerYNR.a4lut2.bits.YNR_Y_ACT_CPY3, rSmoothYNR.a4lut2.bits.YNR_Y_ACT_CPY3, rUpperYNR.a4lut2.bits.YNR_Y_ACT_CPY3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_SP3       = %d, %d, %d", rLowerYNR.a4lut3.bits.YNR_Y_ACT_SP3, rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP3, rUpperYNR.a4lut3.bits.YNR_Y_ACT_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TABLE_EN       = %d, %d, %d", rLowerYNR.con1.bits.YNR_TABLE_EN, rSmoothYNR.con1.bits.YNR_TABLE_EN, rUpperYNR.con1.bits.YNR_TABLE_EN);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_PRC       = %d, %d, %d", rLowerYNR.con1.bits.YNR_TBL_PRC, rSmoothYNR.con1.bits.YNR_TBL_PRC, rUpperYNR.con1.bits.YNR_TBL_PRC);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ENY       = %d, %d, %d", rLowerYNR.con1.bits.YNR_ENY, rSmoothYNR.con1.bits.YNR_ENY, rUpperYNR.con1.bits.YNR_ENY);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_ENC       = %d, %d, %d", rLowerYNR.con1.bits.YNR_ENC, rSmoothYNR.con1.bits.YNR_ENC, rUpperYNR.con1.bits.YNR_ENC);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_GAIN_PRC       = %d, %d, %d", rLowerYNR.yad2.bits.YNR_GAIN_PRC, rSmoothYNR.yad2.bits.YNR_GAIN_PRC, rUpperYNR.yad2.bits.YNR_GAIN_PRC);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_LP_MODE       = %d, %d, %d", rLowerYNR.con1.bits.YNR_LP_MODE, rSmoothYNR.con1.bits.YNR_LP_MODE, rUpperYNR.con1.bits.YNR_LP_MODE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_LBIT_MODE       = %d, %d, %d", rLowerYNR.con1.bits.YNR_LBIT_MODE, rSmoothYNR.con1.bits.YNR_LBIT_MODE, rUpperYNR.con1.bits.YNR_LBIT_MODE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_VIDEO_MODE       = %d, %d, %d", rLowerYNR.con1.bits.YNR_VIDEO_MODE, rSmoothYNR.con1.bits.YNR_VIDEO_MODE, rUpperYNR.con1.bits.YNR_VIDEO_MODE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_FLT_C       = %d, %d, %d", rLowerYNR.con2.bits.YNR_FLT_C, rSmoothYNR.con2.bits.YNR_FLT_C, rUpperYNR.con2.bits.YNR_FLT_C);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_IMPL_MODE       = %d, %d, %d", rLowerYNR.con2.bits.YNR_IMPL_MODE, rSmoothYNR.con2.bits.YNR_IMPL_MODE, rUpperYNR.con2.bits.YNR_IMPL_MODE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_BAL_MODE       = %d, %d, %d", rLowerYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE, rSmoothYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE, rUpperYNR.hf_cor.bits.YNR_Y_HF_BAL_MODE);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_SP0       = %d, %d, %d", rLowerYNR.l4lut3.bits.YNR_SL2_SP0, rSmoothYNR.l4lut3.bits.YNR_SL2_SP0, rUpperYNR.l4lut3.bits.YNR_SL2_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_SP1       = %d, %d, %d", rLowerYNR.l4lut3.bits.YNR_SL2_SP1, rSmoothYNR.l4lut3.bits.YNR_SL2_SP1, rUpperYNR.l4lut3.bits.YNR_SL2_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_SL2_SP2       = %d, %d, %d", rLowerYNR.l4lut3.bits.YNR_SL2_SP2, rSmoothYNR.l4lut3.bits.YNR_SL2_SP2, rUpperYNR.l4lut3.bits.YNR_SL2_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP0       = %d, %d, %d", rLowerYNR.y4lut3.bits.YNR_Y_SCALE_SP0, rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP0, rUpperYNR.y4lut3.bits.YNR_Y_SCALE_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP1       = %d, %d, %d", rLowerYNR.y4lut3.bits.YNR_Y_SCALE_SP1, rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP1, rUpperYNR.y4lut3.bits.YNR_Y_SCALE_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP2       = %d, %d, %d", rLowerYNR.y4lut3.bits.YNR_Y_SCALE_SP2, rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP2, rUpperYNR.y4lut3.bits.YNR_Y_SCALE_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP3       = %d, %d, %d", rLowerYNR.y4lut3.bits.YNR_Y_SCALE_SP3, rSmoothYNR.y4lut3.bits.YNR_Y_SCALE_SP3, rUpperYNR.y4lut3.bits.YNR_Y_SCALE_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP4       = %d, %d, %d", rLowerYNR.y4lut6.bits.YNR_Y_SCALE_SP4, rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP4, rUpperYNR.y4lut6.bits.YNR_Y_SCALE_SP4);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP5       = %d, %d, %d", rLowerYNR.y4lut6.bits.YNR_Y_SCALE_SP5, rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP5, rUpperYNR.y4lut6.bits.YNR_Y_SCALE_SP5);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP6       = %d, %d, %d", rLowerYNR.y4lut6.bits.YNR_Y_SCALE_SP6, rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP6, rUpperYNR.y4lut6.bits.YNR_Y_SCALE_SP6);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_SCALE_SP7       = %d, %d, %d", rLowerYNR.y4lut6.bits.YNR_Y_SCALE_SP7, rSmoothYNR.y4lut6.bits.YNR_Y_SCALE_SP7, rUpperYNR.y4lut6.bits.YNR_Y_SCALE_SP7);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_SP0       = %d, %d, %d", rLowerYNR.t4lut3.bits.YNR_TBL_GAIN_SP0, rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP0, rUpperYNR.t4lut3.bits.YNR_TBL_GAIN_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_SP1       = %d, %d, %d", rLowerYNR.t4lut3.bits.YNR_TBL_GAIN_SP1, rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP1, rUpperYNR.t4lut3.bits.YNR_TBL_GAIN_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_TBL_GAIN_SP2       = %d, %d, %d", rLowerYNR.t4lut3.bits.YNR_TBL_GAIN_SP2, rSmoothYNR.t4lut3.bits.YNR_TBL_GAIN_SP2, rUpperYNR.t4lut3.bits.YNR_TBL_GAIN_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_SP0       = %d, %d, %d", rLowerYNR.c4lut3.bits.YNR_C_SCALE_SP0, rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP0, rUpperYNR.c4lut3.bits.YNR_C_SCALE_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_SP1       = %d, %d, %d", rLowerYNR.c4lut3.bits.YNR_C_SCALE_SP1, rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP1, rUpperYNR.c4lut3.bits.YNR_C_SCALE_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_C_SCALE_SP2       = %d, %d, %d", rLowerYNR.c4lut3.bits.YNR_C_SCALE_SP2, rSmoothYNR.c4lut3.bits.YNR_C_SCALE_SP2, rUpperYNR.c4lut3.bits.YNR_C_SCALE_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_SP0       = %d, %d, %d", rLowerYNR.hf_act3.bits.YNR_Y_HF_ACT_SP0, rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP0, rUpperYNR.hf_act3.bits.YNR_Y_HF_ACT_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_SP1       = %d, %d, %d", rLowerYNR.hf_act3.bits.YNR_Y_HF_ACT_SP1, rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP1, rUpperYNR.hf_act3.bits.YNR_Y_HF_ACT_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_SP2       = %d, %d, %d", rLowerYNR.hf_act3.bits.YNR_Y_HF_ACT_SP2, rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP2, rUpperYNR.hf_act3.bits.YNR_Y_HF_ACT_SP2);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_ACT_SP3       = %d, %d, %d", rLowerYNR.hf_act3.bits.YNR_Y_HF_ACT_SP3, rSmoothYNR.hf_act3.bits.YNR_Y_HF_ACT_SP3, rUpperYNR.hf_act3.bits.YNR_Y_HF_ACT_SP3);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_SP0       = %d, %d, %d", rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP0, rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP0, rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_HF_LUMA_SP1       = %d, %d, %d", rLowerYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP1, rSmoothYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP1, rUpperYNR.hf_luma1.bits.YNR_Y_HF_LUMA_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_SP0       = %d, %d, %d", rLowerYNR.a4lut3.bits.YNR_Y_ACT_SP0, rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP0, rUpperYNR.a4lut3.bits.YNR_Y_ACT_SP0);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_SP1       = %d, %d, %d", rLowerYNR.a4lut3.bits.YNR_Y_ACT_SP1, rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP1, rUpperYNR.a4lut3.bits.YNR_Y_ACT_SP1);
    INTER_LOG_IF(bSmoothYNRDebug, "[L,S,U]YNR_Y_ACT_SP2       = %d, %d, %d", rLowerYNR.a4lut3.bits.YNR_Y_ACT_SP2, rSmoothYNR.a4lut3.bits.YNR_Y_ACT_SP2, rUpperYNR.a4lut3.bits.YNR_Y_ACT_SP2);

}

MVOID Smooth_CNR_ABF(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_CNR_ABF_T const& rUpperCNR_ABF,   // CNR_ABF settings for upper ISO
                ISP_NVRAM_CNR_ABF_T const& rLowerCNR_ABF,   // CNR_ABF settings for lower ISO
                ISP_NVRAM_CNR_ABF_T& rSmoothCNR_ABF)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_cnr_abf.enable", value, "0");
    MBOOL bSmoothCNR_ABFDebug = atoi(value);

    INTER_LOG_IF(bSmoothCNR_ABFDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_CNR_ABF_BIL_IDX       = rLowerCNR_ABF.con1.bits.CNR_ABF_BIL_IDX;
    MINT32 pre_CNR_ABF_BF_U_OFST       = rLowerCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST;
    MINT32 pre_CNR_ABF_NSR_IDX       = rLowerCNR_ABF.con1.bits.CNR_ABF_NSR_IDX;
    MINT32 pre_CNR_ABF_R1       = rLowerCNR_ABF.rcon.bits.CNR_ABF_R1;
    MINT32 pre_CNR_ABF_R2       = rLowerCNR_ABF.rcon.bits.CNR_ABF_R2;
    MINT32 pre_CNR_ABF_Y0       = rLowerCNR_ABF.ylut.bits.CNR_ABF_Y0;
    MINT32 pre_CNR_ABF_Y1       = rLowerCNR_ABF.ylut.bits.CNR_ABF_Y1;
    MINT32 pre_CNR_ABF_Y2       = rLowerCNR_ABF.ylut.bits.CNR_ABF_Y2;
    MINT32 pre_CNR_ABF_Y3       = rLowerCNR_ABF.ylut.bits.CNR_ABF_Y3;
    MINT32 pre_CNR_ABF_CX0       = rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX0;
    MINT32 pre_CNR_ABF_CX1       = rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX1;
    MINT32 pre_CNR_ABF_CX2       = rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX2;
    MINT32 pre_CNR_ABF_CX3       = rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX3;
    MINT32 pre_CNR_ABF_CY0       = rLowerCNR_ABF.cylut.bits.CNR_ABF_CY0;
    MINT32 pre_CNR_ABF_CY1       = rLowerCNR_ABF.cylut.bits.CNR_ABF_CY1;
    MINT32 pre_CNR_ABF_CY2       = rLowerCNR_ABF.cylut.bits.CNR_ABF_CY2;
    MINT32 pre_CNR_ABF_CY3       = rLowerCNR_ABF.cylut.bits.CNR_ABF_CY3;
    MINT32 pre_CNR_ABF_STHRE_R       = rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_R;
    MINT32 pre_CNR_ABF_STHRE_G       = rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_G;
    MINT32 pre_CNR_ABF_STHRE_B       = rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_B;
    MINT32 pre_CNR_ABF_EN       = rLowerCNR_ABF.con1.bits.CNR_ABF_EN;
    MINT32 pos_CNR_ABF_BIL_IDX       = rUpperCNR_ABF.con1.bits.CNR_ABF_BIL_IDX;
    MINT32 pos_CNR_ABF_BF_U_OFST       = rUpperCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST;
    MINT32 pos_CNR_ABF_NSR_IDX       = rUpperCNR_ABF.con1.bits.CNR_ABF_NSR_IDX;
    MINT32 pos_CNR_ABF_R1       = rUpperCNR_ABF.rcon.bits.CNR_ABF_R1;
    MINT32 pos_CNR_ABF_R2       = rUpperCNR_ABF.rcon.bits.CNR_ABF_R2;
    MINT32 pos_CNR_ABF_Y0       = rUpperCNR_ABF.ylut.bits.CNR_ABF_Y0;
    MINT32 pos_CNR_ABF_Y1       = rUpperCNR_ABF.ylut.bits.CNR_ABF_Y1;
    MINT32 pos_CNR_ABF_Y2       = rUpperCNR_ABF.ylut.bits.CNR_ABF_Y2;
    MINT32 pos_CNR_ABF_Y3       = rUpperCNR_ABF.ylut.bits.CNR_ABF_Y3;
    MINT32 pos_CNR_ABF_CX0       = rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX0;
    MINT32 pos_CNR_ABF_CX1       = rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX1;
    MINT32 pos_CNR_ABF_CX2       = rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX2;
    MINT32 pos_CNR_ABF_CX3       = rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX3;
    MINT32 pos_CNR_ABF_CY0       = rUpperCNR_ABF.cylut.bits.CNR_ABF_CY0;
    MINT32 pos_CNR_ABF_CY1       = rUpperCNR_ABF.cylut.bits.CNR_ABF_CY1;
    MINT32 pos_CNR_ABF_CY2       = rUpperCNR_ABF.cylut.bits.CNR_ABF_CY2;
    MINT32 pos_CNR_ABF_CY3       = rUpperCNR_ABF.cylut.bits.CNR_ABF_CY3;
    MINT32 pos_CNR_ABF_STHRE_R       = rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_R;
    MINT32 pos_CNR_ABF_STHRE_G       = rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_G;
    MINT32 pos_CNR_ABF_STHRE_B       = rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_B;
    MINT32 pos_CNR_ABF_EN       = rUpperCNR_ABF.con1.bits.CNR_ABF_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 CNR_ABF_BIL_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_BIL_IDX, pos_CNR_ABF_BIL_IDX, 0);
    MINT32 CNR_ABF_BF_U_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_BF_U_OFST, pos_CNR_ABF_BF_U_OFST, 0);
    MINT32 CNR_ABF_NSR_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_NSR_IDX, pos_CNR_ABF_NSR_IDX, 0);
    MINT32 CNR_ABF_R1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_R1, pos_CNR_ABF_R1, 0);
    MINT32 CNR_ABF_R2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_R2, pos_CNR_ABF_R2, 0);
    MINT32 CNR_ABF_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_Y0, pos_CNR_ABF_Y0, 0);
    MINT32 CNR_ABF_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_Y1, pos_CNR_ABF_Y1, 0);
    MINT32 CNR_ABF_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_Y2, pos_CNR_ABF_Y2, 0);
    MINT32 CNR_ABF_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_Y3, pos_CNR_ABF_Y3, 0);
    MINT32 CNR_ABF_CX0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CX0, pos_CNR_ABF_CX0, 0);
    MINT32 CNR_ABF_CX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CX1, pos_CNR_ABF_CX1, 0);
    MINT32 CNR_ABF_CX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CX2, pos_CNR_ABF_CX2, 0);
    MINT32 CNR_ABF_CX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CX3, pos_CNR_ABF_CX3, 0);
    MINT32 CNR_ABF_CY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CY0, pos_CNR_ABF_CY0, 0);
    MINT32 CNR_ABF_CY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CY1, pos_CNR_ABF_CY1, 0);
    MINT32 CNR_ABF_CY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CY2, pos_CNR_ABF_CY2, 0);
    MINT32 CNR_ABF_CY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_CY3, pos_CNR_ABF_CY3, 0);
    MINT32 CNR_ABF_STHRE_R       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_STHRE_R, pos_CNR_ABF_STHRE_R, 0);
    MINT32 CNR_ABF_STHRE_G       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_STHRE_G, pos_CNR_ABF_STHRE_G, 0);
    MINT32 CNR_ABF_STHRE_B       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_STHRE_B, pos_CNR_ABF_STHRE_B, 0);
    MINT32 CNR_ABF_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_ABF_EN, pos_CNR_ABF_EN, 1);

	//Slope Calculation
    MINT32 CNR_ABF_Y_SP0       = CalculateLUTSP(CNR_ABF_Y0, CNR_ABF_Y1, 0, 511, 1, 255, 0);
	MINT32 CNR_ABF_Y_SP1       = CalculateLUTSP(CNR_ABF_Y2, CNR_ABF_Y3, 0, 511, 1, 255, 0);
	MINT32 CNR_ABF_CX_SP0       = CalculateLUTSP(CNR_ABF_CX0, CNR_ABF_CX1, 0, 511, 1, 255, 0);
	MINT32 CNR_ABF_CX_SP1       = CalculateLUTSP(CNR_ABF_CX2, CNR_ABF_CX3, 0, 511, 1, 255, 0);
	MINT32 CNR_ABF_CY_SP0       = CalculateLUTSP(CNR_ABF_CY0, CNR_ABF_CY1, 0, 511, 1, 255, 0);
	MINT32 CNR_ABF_CY_SP1       = CalculateLUTSP(CNR_ABF_CY2, CNR_ABF_CY3, 0, 511, 1, 255, 0);



    // interpolation result assignment
    rSmoothCNR_ABF.con1.bits.CNR_ABF_BIL_IDX       = CNR_ABF_BIL_IDX;
    rSmoothCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST       = CNR_ABF_BF_U_OFST;
    rSmoothCNR_ABF.con1.bits.CNR_ABF_NSR_IDX       = CNR_ABF_NSR_IDX;
    rSmoothCNR_ABF.rcon.bits.CNR_ABF_R1       = CNR_ABF_R1;
    rSmoothCNR_ABF.rcon.bits.CNR_ABF_R2       = CNR_ABF_R2;
    rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y0       = CNR_ABF_Y0;
    rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y1       = CNR_ABF_Y1;
    rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y2       = CNR_ABF_Y2;
    rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y3       = CNR_ABF_Y3;
    rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX0       = CNR_ABF_CX0;
    rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX1       = CNR_ABF_CX1;
    rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX2       = CNR_ABF_CX2;
    rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX3       = CNR_ABF_CX3;
    rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY0       = CNR_ABF_CY0;
    rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY1       = CNR_ABF_CY1;
    rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY2       = CNR_ABF_CY2;
    rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY3       = CNR_ABF_CY3;
    rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_R       = CNR_ABF_STHRE_R;
    rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_G       = CNR_ABF_STHRE_G;
    rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_B       = CNR_ABF_STHRE_B;
    rSmoothCNR_ABF.con1.bits.CNR_ABF_EN       = CNR_ABF_EN;
    rSmoothCNR_ABF.ysp.bits.CNR_ABF_Y_SP0       = CNR_ABF_Y_SP0;
    rSmoothCNR_ABF.ysp.bits.CNR_ABF_Y_SP1       = CNR_ABF_Y_SP1;
    rSmoothCNR_ABF.cxsp.bits.CNR_ABF_CX_SP0       = CNR_ABF_CX_SP0;
    rSmoothCNR_ABF.cxsp.bits.CNR_ABF_CX_SP1       = CNR_ABF_CX_SP1;
    rSmoothCNR_ABF.cysp.bits.CNR_ABF_CY_SP0       = CNR_ABF_CY_SP0;
    rSmoothCNR_ABF.cysp.bits.CNR_ABF_CY_SP1       = CNR_ABF_CY_SP1;


    // logging
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_BIL_IDX       = %d, %d, %d", rLowerCNR_ABF.con1.bits.CNR_ABF_BIL_IDX, rSmoothCNR_ABF.con1.bits.CNR_ABF_BIL_IDX, rUpperCNR_ABF.con1.bits.CNR_ABF_BIL_IDX);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_BF_U_OFST       = %d, %d, %d", rLowerCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST, rSmoothCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST, rUpperCNR_ABF.con2.bits.CNR_ABF_BF_U_OFST);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_NSR_IDX       = %d, %d, %d", rLowerCNR_ABF.con1.bits.CNR_ABF_NSR_IDX, rSmoothCNR_ABF.con1.bits.CNR_ABF_NSR_IDX, rUpperCNR_ABF.con1.bits.CNR_ABF_NSR_IDX);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_R1       = %d, %d, %d", rLowerCNR_ABF.rcon.bits.CNR_ABF_R1, rSmoothCNR_ABF.rcon.bits.CNR_ABF_R1, rUpperCNR_ABF.rcon.bits.CNR_ABF_R1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_R2       = %d, %d, %d", rLowerCNR_ABF.rcon.bits.CNR_ABF_R2, rSmoothCNR_ABF.rcon.bits.CNR_ABF_R2, rUpperCNR_ABF.rcon.bits.CNR_ABF_R2);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y0       = %d, %d, %d", rLowerCNR_ABF.ylut.bits.CNR_ABF_Y0, rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y0, rUpperCNR_ABF.ylut.bits.CNR_ABF_Y0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y1       = %d, %d, %d", rLowerCNR_ABF.ylut.bits.CNR_ABF_Y1, rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y1, rUpperCNR_ABF.ylut.bits.CNR_ABF_Y1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y2       = %d, %d, %d", rLowerCNR_ABF.ylut.bits.CNR_ABF_Y2, rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y2, rUpperCNR_ABF.ylut.bits.CNR_ABF_Y2);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y3       = %d, %d, %d", rLowerCNR_ABF.ylut.bits.CNR_ABF_Y3, rSmoothCNR_ABF.ylut.bits.CNR_ABF_Y3, rUpperCNR_ABF.ylut.bits.CNR_ABF_Y3);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX0       = %d, %d, %d", rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX0, rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX0, rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX1       = %d, %d, %d", rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX1, rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX1, rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX2       = %d, %d, %d", rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX2, rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX2, rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX2);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX3       = %d, %d, %d", rLowerCNR_ABF.cxlut.bits.CNR_ABF_CX3, rSmoothCNR_ABF.cxlut.bits.CNR_ABF_CX3, rUpperCNR_ABF.cxlut.bits.CNR_ABF_CX3);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY0       = %d, %d, %d", rLowerCNR_ABF.cylut.bits.CNR_ABF_CY0, rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY0, rUpperCNR_ABF.cylut.bits.CNR_ABF_CY0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY1       = %d, %d, %d", rLowerCNR_ABF.cylut.bits.CNR_ABF_CY1, rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY1, rUpperCNR_ABF.cylut.bits.CNR_ABF_CY1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY2       = %d, %d, %d", rLowerCNR_ABF.cylut.bits.CNR_ABF_CY2, rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY2, rUpperCNR_ABF.cylut.bits.CNR_ABF_CY2);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY3       = %d, %d, %d", rLowerCNR_ABF.cylut.bits.CNR_ABF_CY3, rSmoothCNR_ABF.cylut.bits.CNR_ABF_CY3, rUpperCNR_ABF.cylut.bits.CNR_ABF_CY3);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_STHRE_R       = %d, %d, %d", rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_R, rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_R, rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_R);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_STHRE_G       = %d, %d, %d", rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_G, rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_G, rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_G);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_STHRE_B       = %d, %d, %d", rLowerCNR_ABF.clp.bits.CNR_ABF_STHRE_B, rSmoothCNR_ABF.clp.bits.CNR_ABF_STHRE_B, rUpperCNR_ABF.clp.bits.CNR_ABF_STHRE_B);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_EN       = %d, %d, %d", rLowerCNR_ABF.con1.bits.CNR_ABF_EN, rSmoothCNR_ABF.con1.bits.CNR_ABF_EN, rUpperCNR_ABF.con1.bits.CNR_ABF_EN);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y_SP0       = %d, %d, %d", rLowerCNR_ABF.ysp.bits.CNR_ABF_Y_SP0, rSmoothCNR_ABF.ysp.bits.CNR_ABF_Y_SP0, rUpperCNR_ABF.ysp.bits.CNR_ABF_Y_SP0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_Y_SP1       = %d, %d, %d", rLowerCNR_ABF.ysp.bits.CNR_ABF_Y_SP1, rSmoothCNR_ABF.ysp.bits.CNR_ABF_Y_SP1, rUpperCNR_ABF.ysp.bits.CNR_ABF_Y_SP1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX_SP0       = %d, %d, %d", rLowerCNR_ABF.cxsp.bits.CNR_ABF_CX_SP0, rSmoothCNR_ABF.cxsp.bits.CNR_ABF_CX_SP0, rUpperCNR_ABF.cxsp.bits.CNR_ABF_CX_SP0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CX_SP1       = %d, %d, %d", rLowerCNR_ABF.cxsp.bits.CNR_ABF_CX_SP1, rSmoothCNR_ABF.cxsp.bits.CNR_ABF_CX_SP1, rUpperCNR_ABF.cxsp.bits.CNR_ABF_CX_SP1);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY_SP0       = %d, %d, %d", rLowerCNR_ABF.cysp.bits.CNR_ABF_CY_SP0, rSmoothCNR_ABF.cysp.bits.CNR_ABF_CY_SP0, rUpperCNR_ABF.cysp.bits.CNR_ABF_CY_SP0);
    INTER_LOG_IF(bSmoothCNR_ABFDebug, "[L,S,U]CNR_ABF_CY_SP1       = %d, %d, %d", rLowerCNR_ABF.cysp.bits.CNR_ABF_CY_SP1, rSmoothCNR_ABF.cysp.bits.CNR_ABF_CY_SP1, rUpperCNR_ABF.cysp.bits.CNR_ABF_CY_SP1);

}

MVOID Smooth_CNR_CCR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_CNR_CCR_T const& rUpperCNR_CCR,   // CNR_CCR settings for upper ISO
                ISP_NVRAM_CNR_CCR_T const& rLowerCNR_CCR,   // CNR_CCR settings for lower ISO
                ISP_NVRAM_CNR_CCR_T& rSmoothCNR_CCR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_cnr_ccr.enable", value, "0");
    MBOOL bSmoothCNR_CCRDebug = atoi(value);

    INTER_LOG_IF(bSmoothCNR_CCRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_CNR_CCR_Y_CPX1       = rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1;
    MINT32 pre_CNR_CCR_Y_CPX2       = rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2;
    MINT32 pre_CNR_CCR_Y_CPX3       = rLowerCNR_CCR.con.bits.CNR_CCR_Y_CPX3;
    MINT32 pre_CNR_CCR_Y_CPY0       = rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0;
    MINT32 pre_CNR_CCR_Y_CPY1       = rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1;
    MINT32 pre_CNR_CCR_Y_CPY2       = rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2;
    MINT32 pre_CNR_CCR_Y_SP2       = rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2;
    MINT32 pre_CNR_CCR_UV_X1       = rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X1;
    MINT32 pre_CNR_CCR_UV_X2       = rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X2;
    MINT32 pre_CNR_CCR_UV_X3       = rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X3;
    MINT32 pre_CNR_CCR_UV_GAIN1       = rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1;
    MINT32 pre_CNR_CCR_UV_GAIN2       = rLowerCNR_CCR.con.bits.CNR_CCR_UV_GAIN2;
    MINT32 pre_CNR_CCR_UV_GAIN_SP2       = rLowerCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2;
    MINT32 pre_CNR_CCR_CEN_V       = rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V;
    MINT32 pre_CNR_CCR_CEN_U       = rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U;
    MINT32 pre_CNR_CCR_HUE_X1       = rLowerCNR_CCR.hue1.bits.CNR_CCR_HUE_X1;
    MINT32 pre_CNR_CCR_HUE_X2       = rLowerCNR_CCR.hue1.bits.CNR_CCR_HUE_X2;
    MINT32 pre_CNR_CCR_HUE_X3       = rLowerCNR_CCR.hue2.bits.CNR_CCR_HUE_X3;
    MINT32 pre_CNR_CCR_HUE_X4       = rLowerCNR_CCR.hue2.bits.CNR_CCR_HUE_X4;
    MINT32 pre_CNR_CCR_HUE_GAIN1       = rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1;
    MINT32 pre_CNR_CCR_HUE_GAIN2       = rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2;
    MINT32 pre_CNR_CCR_SL2_X1       = rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1;
    MINT32 pre_CNR_CCR_SL2_X2       = rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2;
    MINT32 pre_CNR_CCR_SL2_X3       = rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3;
    MINT32 pre_CNR_CCR_SL2_GAIN0       = rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0;
    MINT32 pre_CNR_CCR_SL2_GAIN1       = rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1;
    MINT32 pre_CNR_CCR_SL2_GAIN2       = rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2;
    MINT32 pre_CNR_CCR_SL2_GAIN3       = rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3;
    MINT32 pre_CNR_CCR_SL2_SP3       = rLowerCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3;
    MINT32 pre_CNR_CCR_EN       = rLowerCNR_CCR.con.bits.CNR_CCR_EN;
    MINT32 pre_CNR_CCR_MODE       = rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE;
    MINT32 pre_CNR_CCR_UV_GAIN_MODE       = rLowerCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE;
    MINT32 pre_CNR_CCR_OR_MODE       = rLowerCNR_CCR.con.bits.CNR_CCR_OR_MODE;
    MINT32 pre_CNR_CCR_SL2_LINK       = rLowerCNR_CCR.con.bits.CNR_CCR_SL2_LINK;
    MINT32 pre_CNR_CCR_SL2_MODE       = rLowerCNR_CCR.con.bits.CNR_CCR_SL2_MODE;
    MINT32 pos_CNR_CCR_Y_CPX1       = rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1;
    MINT32 pos_CNR_CCR_Y_CPX2       = rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2;
    MINT32 pos_CNR_CCR_Y_CPX3       = rUpperCNR_CCR.con.bits.CNR_CCR_Y_CPX3;
    MINT32 pos_CNR_CCR_Y_CPY0       = rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0;
    MINT32 pos_CNR_CCR_Y_CPY1       = rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1;
    MINT32 pos_CNR_CCR_Y_CPY2       = rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2;
    MINT32 pos_CNR_CCR_Y_SP2       = rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2;
    MINT32 pos_CNR_CCR_UV_X1       = rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X1;
    MINT32 pos_CNR_CCR_UV_X2       = rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X2;
    MINT32 pos_CNR_CCR_UV_X3       = rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X3;
    MINT32 pos_CNR_CCR_UV_GAIN1       = rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1;
    MINT32 pos_CNR_CCR_UV_GAIN2       = rUpperCNR_CCR.con.bits.CNR_CCR_UV_GAIN2;
    MINT32 pos_CNR_CCR_UV_GAIN_SP2       = rUpperCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2;
    MINT32 pos_CNR_CCR_CEN_V       = rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V;
    MINT32 pos_CNR_CCR_CEN_U       = rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U;
    MINT32 pos_CNR_CCR_HUE_X1       = rUpperCNR_CCR.hue1.bits.CNR_CCR_HUE_X1;
    MINT32 pos_CNR_CCR_HUE_X2       = rUpperCNR_CCR.hue1.bits.CNR_CCR_HUE_X2;
    MINT32 pos_CNR_CCR_HUE_X3       = rUpperCNR_CCR.hue2.bits.CNR_CCR_HUE_X3;
    MINT32 pos_CNR_CCR_HUE_X4       = rUpperCNR_CCR.hue2.bits.CNR_CCR_HUE_X4;
    MINT32 pos_CNR_CCR_HUE_GAIN1       = rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1;
    MINT32 pos_CNR_CCR_HUE_GAIN2       = rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2;
    MINT32 pos_CNR_CCR_SL2_X1       = rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1;
    MINT32 pos_CNR_CCR_SL2_X2       = rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2;
    MINT32 pos_CNR_CCR_SL2_X3       = rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3;
    MINT32 pos_CNR_CCR_SL2_GAIN0       = rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0;
    MINT32 pos_CNR_CCR_SL2_GAIN1       = rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1;
    MINT32 pos_CNR_CCR_SL2_GAIN2       = rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2;
    MINT32 pos_CNR_CCR_SL2_GAIN3       = rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3;
    MINT32 pos_CNR_CCR_SL2_SP3       = rUpperCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3;
    MINT32 pos_CNR_CCR_EN       = rUpperCNR_CCR.con.bits.CNR_CCR_EN;
    MINT32 pos_CNR_CCR_MODE       = rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE;
    MINT32 pos_CNR_CCR_UV_GAIN_MODE       = rUpperCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE;
    MINT32 pos_CNR_CCR_OR_MODE       = rUpperCNR_CCR.con.bits.CNR_CCR_OR_MODE;
    MINT32 pos_CNR_CCR_SL2_LINK       = rUpperCNR_CCR.con.bits.CNR_CCR_SL2_LINK;
    MINT32 pos_CNR_CCR_SL2_MODE       = rUpperCNR_CCR.con.bits.CNR_CCR_SL2_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 CNR_CCR_Y_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPX1, pos_CNR_CCR_Y_CPX1, 0);
    MINT32 CNR_CCR_Y_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPX2, pos_CNR_CCR_Y_CPX2, 0);
    MINT32 CNR_CCR_Y_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPX3, pos_CNR_CCR_Y_CPX3, 0);
    MINT32 CNR_CCR_Y_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPY0, pos_CNR_CCR_Y_CPY0, 0);
    MINT32 CNR_CCR_Y_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPY1, pos_CNR_CCR_Y_CPY1, 0);
    MINT32 CNR_CCR_Y_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_CPY2, pos_CNR_CCR_Y_CPY2, 0);
    MINT32 CNR_CCR_Y_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_Y_SP2, pos_CNR_CCR_Y_SP2, 0);
    MINT32 CNR_CCR_UV_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_X1, pos_CNR_CCR_UV_X1, 0);
    MINT32 CNR_CCR_UV_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_X2, pos_CNR_CCR_UV_X2, 0);
    MINT32 CNR_CCR_UV_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_X3, pos_CNR_CCR_UV_X3, 0);
    MINT32 CNR_CCR_UV_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_GAIN1, pos_CNR_CCR_UV_GAIN1, 0);
    MINT32 CNR_CCR_UV_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_GAIN2, pos_CNR_CCR_UV_GAIN2, 0);
    MINT32 CNR_CCR_UV_GAIN_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_GAIN_SP2, pos_CNR_CCR_UV_GAIN_SP2, 0);
    MINT32 CNR_CCR_CEN_V       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_CEN_V, pos_CNR_CCR_CEN_V, 0);
    MINT32 CNR_CCR_CEN_U       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_CEN_U, pos_CNR_CCR_CEN_U, 0);
    MINT32 CNR_CCR_HUE_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_X1, pos_CNR_CCR_HUE_X1, 0);
    MINT32 CNR_CCR_HUE_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_X2, pos_CNR_CCR_HUE_X2, 0);
    MINT32 CNR_CCR_HUE_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_X3, pos_CNR_CCR_HUE_X3, 0);
    MINT32 CNR_CCR_HUE_X4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_X4, pos_CNR_CCR_HUE_X4, 0);
    MINT32 CNR_CCR_HUE_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_GAIN1, pos_CNR_CCR_HUE_GAIN1, 0);
    MINT32 CNR_CCR_HUE_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_HUE_GAIN2, pos_CNR_CCR_HUE_GAIN2, 0);
    MINT32 CNR_CCR_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_X1, pos_CNR_CCR_SL2_X1, 0);
    MINT32 CNR_CCR_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_X2, pos_CNR_CCR_SL2_X2, 0);
    MINT32 CNR_CCR_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_X3, pos_CNR_CCR_SL2_X3, 0);
    MINT32 CNR_CCR_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_GAIN0, pos_CNR_CCR_SL2_GAIN0, 0);
    MINT32 CNR_CCR_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_GAIN1, pos_CNR_CCR_SL2_GAIN1, 0);
    MINT32 CNR_CCR_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_GAIN2, pos_CNR_CCR_SL2_GAIN2, 0);
    MINT32 CNR_CCR_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_GAIN3, pos_CNR_CCR_SL2_GAIN3, 0);
    MINT32 CNR_CCR_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_SP3, pos_CNR_CCR_SL2_SP3, 0);
    MINT32 CNR_CCR_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_EN, pos_CNR_CCR_EN, 1);
    MINT32 CNR_CCR_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_MODE, pos_CNR_CCR_MODE, 1);
    MINT32 CNR_CCR_UV_GAIN_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_UV_GAIN_MODE, pos_CNR_CCR_UV_GAIN_MODE, 1);
    MINT32 CNR_CCR_OR_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_OR_MODE, pos_CNR_CCR_OR_MODE, 1);
    MINT32 CNR_CCR_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_LINK, pos_CNR_CCR_SL2_LINK, 1);
    MINT32 CNR_CCR_SL2_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CCR_SL2_MODE, pos_CNR_CCR_SL2_MODE, 1);

	//Slope Calculation
    MINT32 CNR_CCR_Y_SP0       = CalculateLUTSP(   0, CNR_CCR_Y_CPX1, CNR_CCR_Y_CPY0, CNR_CCR_Y_CPY1, 32, 127, 0);
	MINT32 CNR_CCR_Y_SP1       = CalculateLUTSP(   CNR_CCR_Y_CPX1, CNR_CCR_Y_CPX2, CNR_CCR_Y_CPY1, CNR_CCR_Y_CPY2, 32, 127, 0);
	MINT32 CNR_CCR_UV_GAIN_SP1       = CalculateLUTSP(   CNR_CCR_UV_X1, CNR_CCR_UV_X2, CNR_CCR_UV_GAIN1, CNR_CCR_UV_GAIN2, 32, 1023, 0);
	MINT32 CNR_CCR_HUE_SP1       = CalculateLUTSP(   CNR_CCR_HUE_X1, CNR_CCR_HUE_X2, CNR_CCR_Y_CPY0, CNR_CCR_Y_CPY1, 32, 127, -128);
	CNR_CCR_HUE_SP1  = Convert2Pos(CNR_CCR_HUE_SP1,256);
	MINT32 CNR_CCR_HUE_SP2       = CalculateLUTSP(   CNR_CCR_HUE_X3, CNR_CCR_HUE_X4, CNR_CCR_Y_CPY0, CNR_CCR_Y_CPY1, 32, 127, -128);
	CNR_CCR_HUE_SP2  = Convert2Pos(CNR_CCR_HUE_SP2,256);
	MINT32 CNR_CCR_SL2_SP0       = CalculateLUTSP(   0, CNR_CCR_SL2_X1, CNR_CCR_SL2_GAIN0, CNR_CCR_SL2_GAIN1, 128, 31, -31);
	CNR_CCR_SL2_SP0  = Convert2Pos(CNR_CCR_SL2_SP0,64);
	MINT32 CNR_CCR_SL2_SP1       = CalculateLUTSP(   CNR_CCR_SL2_X1, CNR_CCR_SL2_X2, CNR_CCR_SL2_GAIN1, CNR_CCR_SL2_GAIN2, 128, 31, -31);
	CNR_CCR_SL2_SP1  = Convert2Pos(CNR_CCR_SL2_SP1,64);
	MINT32 CNR_CCR_SL2_SP2       = CalculateLUTSP(   CNR_CCR_SL2_X2, CNR_CCR_SL2_X3, CNR_CCR_SL2_GAIN2, CNR_CCR_SL2_GAIN3, 128, 31, -31);
	CNR_CCR_SL2_SP2  = Convert2Pos(CNR_CCR_SL2_SP2,64);


    // interpolation result assignment
    rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1       = CNR_CCR_Y_CPX1;
    rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2       = CNR_CCR_Y_CPX2;
    rSmoothCNR_CCR.con.bits.CNR_CCR_Y_CPX3       = CNR_CCR_Y_CPX3;
    rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0       = CNR_CCR_Y_CPY0;
    rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1       = CNR_CCR_Y_CPY1;
    rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2       = CNR_CCR_Y_CPY2;
    rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2       = CNR_CCR_Y_SP2;
    rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X1       = CNR_CCR_UV_X1;
    rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X2       = CNR_CCR_UV_X2;
    rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X3       = CNR_CCR_UV_X3;
    rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1       = CNR_CCR_UV_GAIN1;
    rSmoothCNR_CCR.con.bits.CNR_CCR_UV_GAIN2       = CNR_CCR_UV_GAIN2;
    rSmoothCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2       = CNR_CCR_UV_GAIN_SP2;
    rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V       = CNR_CCR_CEN_V;
    rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U       = CNR_CCR_CEN_U;
    rSmoothCNR_CCR.hue1.bits.CNR_CCR_HUE_X1       = CNR_CCR_HUE_X1;
    rSmoothCNR_CCR.hue1.bits.CNR_CCR_HUE_X2       = CNR_CCR_HUE_X2;
    rSmoothCNR_CCR.hue2.bits.CNR_CCR_HUE_X3       = CNR_CCR_HUE_X3;
    rSmoothCNR_CCR.hue2.bits.CNR_CCR_HUE_X4       = CNR_CCR_HUE_X4;
    rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1       = CNR_CCR_HUE_GAIN1;
    rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2       = CNR_CCR_HUE_GAIN2;
    rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1       = CNR_CCR_SL2_X1;
    rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2       = CNR_CCR_SL2_X2;
    rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3       = CNR_CCR_SL2_X3;
    rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0       = CNR_CCR_SL2_GAIN0;
    rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1       = CNR_CCR_SL2_GAIN1;
    rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2       = CNR_CCR_SL2_GAIN2;
    rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3       = CNR_CCR_SL2_GAIN3;
    rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3       = CNR_CCR_SL2_SP3;
    rSmoothCNR_CCR.con.bits.CNR_CCR_EN       = CNR_CCR_EN;
    rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE       = CNR_CCR_MODE;
    rSmoothCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE       = CNR_CCR_UV_GAIN_MODE;
    rSmoothCNR_CCR.con.bits.CNR_CCR_OR_MODE       = CNR_CCR_OR_MODE;
    rSmoothCNR_CCR.con.bits.CNR_CCR_SL2_LINK       = CNR_CCR_SL2_LINK;
    rSmoothCNR_CCR.con.bits.CNR_CCR_SL2_MODE       = CNR_CCR_SL2_MODE;
    rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_SP0       = CNR_CCR_Y_SP0;
    rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_SP1       = CNR_CCR_Y_SP1;
    rSmoothCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP1       = CNR_CCR_UV_GAIN_SP1;
    rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_SP1       = CNR_CCR_HUE_SP1;
	rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_SP2       = CNR_CCR_HUE_SP2;
    rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP0       = CNR_CCR_SL2_SP0;
    rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP1       = CNR_CCR_SL2_SP1;
    rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP2       = CNR_CCR_SL2_SP2;


    // logging
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPX1       = %d, %d, %d", rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1, rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1, rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPX1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPX2       = %d, %d, %d", rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2, rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2, rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPX2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPX3       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_Y_CPX3, rSmoothCNR_CCR.con.bits.CNR_CCR_Y_CPX3, rUpperCNR_CCR.con.bits.CNR_CCR_Y_CPX3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPY0       = %d, %d, %d", rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0, rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0, rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY0);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPY1       = %d, %d, %d", rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1, rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1, rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_CPY1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_CPY2       = %d, %d, %d", rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2, rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2, rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_CPY2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_SP2       = %d, %d, %d", rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2, rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2, rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_SP2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_X1       = %d, %d, %d", rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X1, rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X1, rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_X2       = %d, %d, %d", rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X2, rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X2, rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_X3       = %d, %d, %d", rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_X3, rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_X3, rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_X3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_GAIN1       = %d, %d, %d", rLowerCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1, rSmoothCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1, rUpperCNR_CCR.uvlut.bits.CNR_CCR_UV_GAIN1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_GAIN2       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_UV_GAIN2, rSmoothCNR_CCR.con.bits.CNR_CCR_UV_GAIN2, rUpperCNR_CCR.con.bits.CNR_CCR_UV_GAIN2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_GAIN_SP2       = %d, %d, %d", rLowerCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2, rSmoothCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2, rUpperCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_CEN_V       = %d, %d, %d", rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V, rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V, rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_V);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_CEN_U       = %d, %d, %d", rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U, rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U, rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_CEN_U);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_X1       = %d, %d, %d", rLowerCNR_CCR.hue1.bits.CNR_CCR_HUE_X1, rSmoothCNR_CCR.hue1.bits.CNR_CCR_HUE_X1, rUpperCNR_CCR.hue1.bits.CNR_CCR_HUE_X1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_X2       = %d, %d, %d", rLowerCNR_CCR.hue1.bits.CNR_CCR_HUE_X2, rSmoothCNR_CCR.hue1.bits.CNR_CCR_HUE_X2, rUpperCNR_CCR.hue1.bits.CNR_CCR_HUE_X2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_X3       = %d, %d, %d", rLowerCNR_CCR.hue2.bits.CNR_CCR_HUE_X3, rSmoothCNR_CCR.hue2.bits.CNR_CCR_HUE_X3, rUpperCNR_CCR.hue2.bits.CNR_CCR_HUE_X3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_X4       = %d, %d, %d", rLowerCNR_CCR.hue2.bits.CNR_CCR_HUE_X4, rSmoothCNR_CCR.hue2.bits.CNR_CCR_HUE_X4, rUpperCNR_CCR.hue2.bits.CNR_CCR_HUE_X4);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_GAIN1       = %d, %d, %d", rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1, rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1, rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_GAIN2       = %d, %d, %d", rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2, rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2, rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_GAIN2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_SP2       = %d, %d, %d", rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_SP2, rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_SP2, rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_SP2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_X1       = %d, %d, %d", rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1, rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1, rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_X2       = %d, %d, %d", rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2, rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2, rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_X3       = %d, %d, %d", rLowerCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3, rSmoothCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3, rUpperCNR_CCR.l4lut1.bits.CNR_CCR_SL2_X3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_GAIN0       = %d, %d, %d", rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0, rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0, rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN0);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_GAIN1       = %d, %d, %d", rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1, rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1, rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_GAIN2       = %d, %d, %d", rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2, rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2, rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN2);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_GAIN3       = %d, %d, %d", rLowerCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3, rSmoothCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3, rUpperCNR_CCR.l4lut2.bits.CNR_CCR_SL2_GAIN3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_SP3       = %d, %d, %d", rLowerCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3, rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3, rUpperCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP3);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_EN       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_EN, rSmoothCNR_CCR.con.bits.CNR_CCR_EN, rUpperCNR_CCR.con.bits.CNR_CCR_EN);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_MODE       = %d, %d, %d", rLowerCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE, rSmoothCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE, rUpperCNR_CCR.sat_ctrl.bits.CNR_CCR_MODE);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_GAIN_MODE       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE, rSmoothCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE, rUpperCNR_CCR.con.bits.CNR_CCR_UV_GAIN_MODE);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_OR_MODE       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_OR_MODE, rSmoothCNR_CCR.con.bits.CNR_CCR_OR_MODE, rUpperCNR_CCR.con.bits.CNR_CCR_OR_MODE);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_LINK       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_SL2_LINK, rSmoothCNR_CCR.con.bits.CNR_CCR_SL2_LINK, rUpperCNR_CCR.con.bits.CNR_CCR_SL2_LINK);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_MODE       = %d, %d, %d", rLowerCNR_CCR.con.bits.CNR_CCR_SL2_MODE, rSmoothCNR_CCR.con.bits.CNR_CCR_SL2_MODE, rUpperCNR_CCR.con.bits.CNR_CCR_SL2_MODE);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_SP0       = %d, %d, %d", rLowerCNR_CCR.ylut2.bits.CNR_CCR_Y_SP0, rSmoothCNR_CCR.ylut2.bits.CNR_CCR_Y_SP0, rUpperCNR_CCR.ylut2.bits.CNR_CCR_Y_SP0);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_Y_SP1       = %d, %d, %d", rLowerCNR_CCR.ylut.bits.CNR_CCR_Y_SP1, rSmoothCNR_CCR.ylut.bits.CNR_CCR_Y_SP1, rUpperCNR_CCR.ylut.bits.CNR_CCR_Y_SP1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_UV_GAIN_SP1       = %d, %d, %d", rLowerCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP1, rSmoothCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP1, rUpperCNR_CCR.uvlut_sp.bits.CNR_CCR_UV_GAIN_SP1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_HUE_SP1       = %d, %d, %d", rLowerCNR_CCR.hue3.bits.CNR_CCR_HUE_SP1, rSmoothCNR_CCR.hue3.bits.CNR_CCR_HUE_SP1, rUpperCNR_CCR.hue3.bits.CNR_CCR_HUE_SP1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_SP0       = %d, %d, %d", rLowerCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP0, rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP0, rUpperCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP0);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_SP1       = %d, %d, %d", rLowerCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP1, rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP1, rUpperCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP1);
    INTER_LOG_IF(bSmoothCNR_CCRDebug, "[L,S,U]CNR_CCR_SL2_SP2       = %d, %d, %d", rLowerCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP2, rSmoothCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP2, rUpperCNR_CCR.l4lut3.bits.CNR_CCR_SL2_SP2);

}

MVOID Smooth_CNR_CNR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_CNR_CNR_T const& rUpperCNR_CNR,   // CNR_CNR settings for upper ISO
                ISP_NVRAM_CNR_CNR_T const& rLowerCNR_CNR,   // CNR_CNR settings for lower ISO
                ISP_NVRAM_CNR_CNR_T& rSmoothCNR_CNR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_cnr_cnr.enable", value, "0");
    MBOOL bSmoothCNR_CNRDebug = atoi(value);

    INTER_LOG_IF(bSmoothCNR_CNRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_CNR_CNR_SCALE_MODE       = rLowerCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE;
    MINT32 pre_CNR_CNR_PTC_GAIN_TH       = rLowerCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH;
    MINT32 pre_CNR_CNR_CB_V_RNG4       = rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4;
    MINT32 pre_CNR_CNR_CB_V_RNG3       = rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3;
    MINT32 pre_CNR_CNR_CB_V_RNG2       = rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2;
    MINT32 pre_CNR_CNR_CB_V_RNG1       = rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1;
    MINT32 pre_CNR_CNR_CB_H_RNG4       = rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4;
    MINT32 pre_CNR_CNR_CB_H_RNG3       = rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3;
    MINT32 pre_CNR_CNR_CB_H_RNG2       = rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2;
    MINT32 pre_CNR_CNR_CB_H_RNG1       = rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1;
    MINT32 pre_CNR_CNR_CR_V_RNG4       = rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4;
    MINT32 pre_CNR_CNR_CR_V_RNG3       = rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3;
    MINT32 pre_CNR_CNR_CR_V_RNG2       = rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2;
    MINT32 pre_CNR_CNR_CR_V_RNG1       = rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1;
    MINT32 pre_CNR_CNR_CR_H_RNG4       = rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4;
    MINT32 pre_CNR_CNR_CR_H_RNG3       = rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3;
    MINT32 pre_CNR_CNR_CR_H_RNG2       = rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2;
    MINT32 pre_CNR_CNR_CR_H_RNG1       = rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1;
    MINT32 pre_CNR_CNR_C_SM_EDGE       = rLowerCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE;
    MINT32 pre_CNR_CNR_K_TH_C       = rLowerCNR_CNR.yad1.bits.CNR_CNR_K_TH_C;
    MINT32 pre_CNR_CNR_Y_CPX1       = rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1;
    MINT32 pre_CNR_CNR_Y_CPX2       = rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2;
    MINT32 pre_CNR_CNR_Y_CPX3       = rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3;
    MINT32 pre_CNR_CNR_Y_SCALE_CPY0       = rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0;
    MINT32 pre_CNR_CNR_Y_SCALE_CPY1       = rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1;
    MINT32 pre_CNR_CNR_Y_SCALE_CPY2       = rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2;
    MINT32 pre_CNR_CNR_Y_SCALE_CPY3       = rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3;
    MINT32 pre_CNR_CNR_Y_SCALE_SP3       = rLowerCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3;
    MINT32 pre_CNR_CNR_SL2_X1       = rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1;
    MINT32 pre_CNR_CNR_SL2_X2       = rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2;
    MINT32 pre_CNR_CNR_SL2_X3       = rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3;
    MINT32 pre_CNR_CNR_SL2_GAIN0       = rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0;
    MINT32 pre_CNR_CNR_SL2_GAIN1       = rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1;
    MINT32 pre_CNR_CNR_SL2_GAIN2       = rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2;
    MINT32 pre_CNR_CNR_SL2_GAIN3       = rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3;
    MINT32 pre_CNR_CNR_SL2_SP3       = rLowerCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3;
    MINT32 pre_CNR_CNR_C_GAIN       = rLowerCNR_CNR.cad.bits.CNR_CNR_C_GAIN;
    MINT32 pre_CNR_CNR_SL2_C_GAIN       = rLowerCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN;
    MINT32 pre_CNR_CNR_C_L_DIFF_TH       = rLowerCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH;
    MINT32 pre_CNR_BPC_VAR       = rLowerCNR_CNR.med3.bits.CNR_BPC_VAR;
    MINT32 pre_CNR_BPC_LM_WT       = rLowerCNR_CNR.sl2.bits.CNR_BPC_LM_WT;
    MINT32 pre_CNR_BPC_Y0       = rLowerCNR_CNR.med3.bits.CNR_BPC_Y0;
    MINT32 pre_CNR_BPC_Y1       = rLowerCNR_CNR.med4.bits.CNR_BPC_Y1;
    MINT32 pre_CNR_BPC_Y2       = rLowerCNR_CNR.med4.bits.CNR_BPC_Y2;
    MINT32 pre_CNR_BPC_Y3       = rLowerCNR_CNR.med4.bits.CNR_BPC_Y3;
    MINT32 pre_CNR_BPC_Y4       = rLowerCNR_CNR.med4.bits.CNR_BPC_Y4;
    MINT32 pre_CNR_BPC_LCL_OFT       = rLowerCNR_CNR.med5.bits.CNR_BPC_LCL_OFT;
    MINT32 pre_CNR_BPC_LCL_TH       = rLowerCNR_CNR.med1.bits.CNR_BPC_LCL_TH;
    MINT32 pre_CNR_BPC_LCL_LV       = rLowerCNR_CNR.med2.bits.CNR_BPC_LCL_LV;
    MINT32 pre_CNR_BPC_LCL_SL       = rLowerCNR_CNR.med2.bits.CNR_BPC_LCL_SL;
    MINT32 pre_CNR_BPC_NCL_OFT       = rLowerCNR_CNR.med5.bits.CNR_BPC_NCL_OFT;
    MINT32 pre_CNR_BPC_NCL_TH       = rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_TH;
    MINT32 pre_CNR_BPC_NCL_LV       = rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_LV;
    MINT32 pre_CNR_BPC_NCL_SL       = rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_SL;
    MINT32 pre_CNR_BPC_SCL_OFT       = rLowerCNR_CNR.med5.bits.CNR_BPC_SCL_OFT;
    MINT32 pre_CNR_BPC_SCL_TH       = rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_TH;
    MINT32 pre_CNR_BPC_SCL_LV       = rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_LV;
    MINT32 pre_CNR_BPC_SCL_SL       = rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_SL;
    MINT32 pre_CNR_BPC_MCD_SL       = rLowerCNR_CNR.med1.bits.CNR_BPC_MCD_SL;
    MINT32 pre_CNR_BPC_MCD_TH       = rLowerCNR_CNR.med1.bits.CNR_BPC_MCD_TH;
    MINT32 pre_CNR_BPC_COR_SL       = rLowerCNR_CNR.med1.bits.CNR_BPC_COR_SL;
    MINT32 pre_CNR_BPC_COR_TH       = rLowerCNR_CNR.med1.bits.CNR_BPC_COR_TH;
    MINT32 pre_CNR_BPC_DK_Y0       = rLowerCNR_CNR.med7.bits.CNR_BPC_DK_Y0;
    MINT32 pre_CNR_BPC_DK_Y1       = rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y1;
    MINT32 pre_CNR_BPC_DK_Y2       = rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y2;
    MINT32 pre_CNR_BPC_DK_Y3       = rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y3;
    MINT32 pre_CNR_BPC_DK_Y4       = rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y4;
    MINT32 pre_CNR_BPC_NCL_LV_CEN       = rLowerCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN;
    MINT32 pre_CNR_BPC_SCL_LV_CEN       = rLowerCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN;
    MINT32 pre_CNR_BPC_LCL_LV_CEN       = rLowerCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN;
    MINT32 pre_CNR_BPC_BND_TH_EDGE       = rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE;
    MINT32 pre_CNR_BPC_BND_TH_HI       = rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI;
    MINT32 pre_CNR_BPC_BND_TH_LO       = rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO;
    MINT32 pre_CNR_BPC_BND_SL       = rLowerCNR_CNR.med8.bits.CNR_BPC_BND_SL;
    MINT32 pre_CNR_BPC_OUT_TH       = rLowerCNR_CNR.med8.bits.CNR_BPC_OUT_TH;
    MINT32 pre_CNR_BPC_EDG_TH       = rLowerCNR_CNR.med9.bits.CNR_BPC_EDG_TH;
    MINT32 pre_CNR_BPC_EDG_SL       = rLowerCNR_CNR.med9.bits.CNR_BPC_EDG_SL;
    MINT32 pre_CNR_BPC_LINE_X0       = rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_X0;
    MINT32 pre_CNR_BPC_LINE_TH0       = rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_TH0;
    MINT32 pre_CNR_BPC_LINE_TH1       = rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_TH1;
    MINT32 pre_CNR_BPC_LINE_SL0       = rLowerCNR_CNR.med10.bits.CNR_BPC_LINE_SL0;
    MINT32 pre_CNR_BPC_LINE_TH_SL       = rLowerCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL;
    MINT32 pre_CNR_BPC_SL2_X1       = rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X1;
    MINT32 pre_CNR_BPC_SL2_X2       = rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X2;
    MINT32 pre_CNR_BPC_SL2_X3       = rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X3;
    MINT32 pre_CNR_BPC_SL2_GAIN0       = rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0;
    MINT32 pre_CNR_BPC_SL2_GAIN1       = rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1;
    MINT32 pre_CNR_BPC_SL2_GAIN2       = rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2;
    MINT32 pre_CNR_BPC_SL2_GAIN3       = rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3;
    MINT32 pre_CNR_BPC_SL2_SP3       = rLowerCNR_CNR.med13.bits.CNR_BPC_SL2_SP3;
    MINT32 pre_CNR_CNR_C_DITH_V       = rLowerCNR_CNR.actc.bits.CNR_CNR_C_DITH_V;
    MINT32 pre_CNR_CNR_C_DITH_U       = rLowerCNR_CNR.actc.bits.CNR_CNR_C_DITH_U;
    MINT32 pre_CNR_CNR_ACT_BLD_BASE_C       = rLowerCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C;
    MINT32 pre_CNR_TILE_EDGE       = rLowerCNR_CNR.con1.bits.CNR_TILE_EDGE;
    MINT32 pre_CNR_MODE       = rLowerCNR_CNR.con1.bits.CNR_MODE;
    MINT32 pre_CNR_BPC_EN       = rLowerCNR_CNR.con1.bits.CNR_BPC_EN;
    MINT32 pre_CNR_CNR_ENC       = rLowerCNR_CNR.con1.bits.CNR_CNR_ENC;
    MINT32 pre_CNR_CNR_VER_C_REF_Y       = rLowerCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y;
    MINT32 pre_CNR_LBIT_MODE       = rLowerCNR_CNR.con1.bits.CNR_LBIT_MODE;
    MINT32 pre_CNR_VIDEO_MODE       = rLowerCNR_CNR.con1.bits.CNR_VIDEO_MODE;
    MINT32 pre_CNR_CNR_FLT_C       = rLowerCNR_CNR.con2.bits.CNR_CNR_FLT_C;
    MINT32 pre_CNR_CNR_SL2_LINK       = rLowerCNR_CNR.con1.bits.CNR_CNR_SL2_LINK;
    MINT32 pre_CNR_CNR_C_MODE       = rLowerCNR_CNR.cad.bits.CNR_CNR_C_MODE;
    MINT32 pre_CNR_BPC_SL2_LINK       = rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_LINK;
    MINT32 pos_CNR_CNR_SCALE_MODE       = rUpperCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE;
    MINT32 pos_CNR_CNR_PTC_GAIN_TH       = rUpperCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH;
    MINT32 pos_CNR_CNR_CB_V_RNG4       = rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4;
    MINT32 pos_CNR_CNR_CB_V_RNG3       = rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3;
    MINT32 pos_CNR_CNR_CB_V_RNG2       = rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2;
    MINT32 pos_CNR_CNR_CB_V_RNG1       = rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1;
    MINT32 pos_CNR_CNR_CB_H_RNG4       = rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4;
    MINT32 pos_CNR_CNR_CB_H_RNG3       = rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3;
    MINT32 pos_CNR_CNR_CB_H_RNG2       = rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2;
    MINT32 pos_CNR_CNR_CB_H_RNG1       = rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1;
    MINT32 pos_CNR_CNR_CR_V_RNG4       = rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4;
    MINT32 pos_CNR_CNR_CR_V_RNG3       = rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3;
    MINT32 pos_CNR_CNR_CR_V_RNG2       = rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2;
    MINT32 pos_CNR_CNR_CR_V_RNG1       = rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1;
    MINT32 pos_CNR_CNR_CR_H_RNG4       = rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4;
    MINT32 pos_CNR_CNR_CR_H_RNG3       = rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3;
    MINT32 pos_CNR_CNR_CR_H_RNG2       = rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2;
    MINT32 pos_CNR_CNR_CR_H_RNG1       = rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1;
    MINT32 pos_CNR_CNR_C_SM_EDGE       = rUpperCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE;
    MINT32 pos_CNR_CNR_K_TH_C       = rUpperCNR_CNR.yad1.bits.CNR_CNR_K_TH_C;
    MINT32 pos_CNR_CNR_Y_CPX1       = rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1;
    MINT32 pos_CNR_CNR_Y_CPX2       = rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2;
    MINT32 pos_CNR_CNR_Y_CPX3       = rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3;
    MINT32 pos_CNR_CNR_Y_SCALE_CPY0       = rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0;
    MINT32 pos_CNR_CNR_Y_SCALE_CPY1       = rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1;
    MINT32 pos_CNR_CNR_Y_SCALE_CPY2       = rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2;
    MINT32 pos_CNR_CNR_Y_SCALE_CPY3       = rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3;
    MINT32 pos_CNR_CNR_Y_SCALE_SP3       = rUpperCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3;
    MINT32 pos_CNR_CNR_SL2_X1       = rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1;
    MINT32 pos_CNR_CNR_SL2_X2       = rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2;
    MINT32 pos_CNR_CNR_SL2_X3       = rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3;
    MINT32 pos_CNR_CNR_SL2_GAIN0       = rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0;
    MINT32 pos_CNR_CNR_SL2_GAIN1       = rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1;
    MINT32 pos_CNR_CNR_SL2_GAIN2       = rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2;
    MINT32 pos_CNR_CNR_SL2_GAIN3       = rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3;
    MINT32 pos_CNR_CNR_SL2_SP3       = rUpperCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3;
    MINT32 pos_CNR_CNR_C_GAIN       = rUpperCNR_CNR.cad.bits.CNR_CNR_C_GAIN;
    MINT32 pos_CNR_CNR_SL2_C_GAIN       = rUpperCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN;
    MINT32 pos_CNR_CNR_C_L_DIFF_TH       = rUpperCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH;
    MINT32 pos_CNR_BPC_VAR       = rUpperCNR_CNR.med3.bits.CNR_BPC_VAR;
    MINT32 pos_CNR_BPC_LM_WT       = rUpperCNR_CNR.sl2.bits.CNR_BPC_LM_WT;
    MINT32 pos_CNR_BPC_Y0       = rUpperCNR_CNR.med3.bits.CNR_BPC_Y0;
    MINT32 pos_CNR_BPC_Y1       = rUpperCNR_CNR.med4.bits.CNR_BPC_Y1;
    MINT32 pos_CNR_BPC_Y2       = rUpperCNR_CNR.med4.bits.CNR_BPC_Y2;
    MINT32 pos_CNR_BPC_Y3       = rUpperCNR_CNR.med4.bits.CNR_BPC_Y3;
    MINT32 pos_CNR_BPC_Y4       = rUpperCNR_CNR.med4.bits.CNR_BPC_Y4;
    MINT32 pos_CNR_BPC_LCL_OFT       = rUpperCNR_CNR.med5.bits.CNR_BPC_LCL_OFT;
    MINT32 pos_CNR_BPC_LCL_TH       = rUpperCNR_CNR.med1.bits.CNR_BPC_LCL_TH;
    MINT32 pos_CNR_BPC_LCL_LV       = rUpperCNR_CNR.med2.bits.CNR_BPC_LCL_LV;
    MINT32 pos_CNR_BPC_LCL_SL       = rUpperCNR_CNR.med2.bits.CNR_BPC_LCL_SL;
    MINT32 pos_CNR_BPC_NCL_OFT       = rUpperCNR_CNR.med5.bits.CNR_BPC_NCL_OFT;
    MINT32 pos_CNR_BPC_NCL_TH       = rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_TH;
    MINT32 pos_CNR_BPC_NCL_LV       = rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_LV;
    MINT32 pos_CNR_BPC_NCL_SL       = rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_SL;
    MINT32 pos_CNR_BPC_SCL_OFT       = rUpperCNR_CNR.med5.bits.CNR_BPC_SCL_OFT;
    MINT32 pos_CNR_BPC_SCL_TH       = rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_TH;
    MINT32 pos_CNR_BPC_SCL_LV       = rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_LV;
    MINT32 pos_CNR_BPC_SCL_SL       = rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_SL;
    MINT32 pos_CNR_BPC_MCD_SL       = rUpperCNR_CNR.med1.bits.CNR_BPC_MCD_SL;
    MINT32 pos_CNR_BPC_MCD_TH       = rUpperCNR_CNR.med1.bits.CNR_BPC_MCD_TH;
    MINT32 pos_CNR_BPC_COR_SL       = rUpperCNR_CNR.med1.bits.CNR_BPC_COR_SL;
    MINT32 pos_CNR_BPC_COR_TH       = rUpperCNR_CNR.med1.bits.CNR_BPC_COR_TH;
    MINT32 pos_CNR_BPC_DK_Y0       = rUpperCNR_CNR.med7.bits.CNR_BPC_DK_Y0;
    MINT32 pos_CNR_BPC_DK_Y1       = rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y1;
    MINT32 pos_CNR_BPC_DK_Y2       = rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y2;
    MINT32 pos_CNR_BPC_DK_Y3       = rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y3;
    MINT32 pos_CNR_BPC_DK_Y4       = rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y4;
    MINT32 pos_CNR_BPC_NCL_LV_CEN       = rUpperCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN;
    MINT32 pos_CNR_BPC_SCL_LV_CEN       = rUpperCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN;
    MINT32 pos_CNR_BPC_LCL_LV_CEN       = rUpperCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN;
    MINT32 pos_CNR_BPC_BND_TH_EDGE       = rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE;
    MINT32 pos_CNR_BPC_BND_TH_HI       = rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI;
    MINT32 pos_CNR_BPC_BND_TH_LO       = rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO;
    MINT32 pos_CNR_BPC_BND_SL       = rUpperCNR_CNR.med8.bits.CNR_BPC_BND_SL;
    MINT32 pos_CNR_BPC_OUT_TH       = rUpperCNR_CNR.med8.bits.CNR_BPC_OUT_TH;
    MINT32 pos_CNR_BPC_EDG_TH       = rUpperCNR_CNR.med9.bits.CNR_BPC_EDG_TH;
    MINT32 pos_CNR_BPC_EDG_SL       = rUpperCNR_CNR.med9.bits.CNR_BPC_EDG_SL;
    MINT32 pos_CNR_BPC_LINE_X0       = rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_X0;
    MINT32 pos_CNR_BPC_LINE_TH0       = rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_TH0;
    MINT32 pos_CNR_BPC_LINE_TH1       = rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_TH1;
    MINT32 pos_CNR_BPC_LINE_SL0       = rUpperCNR_CNR.med10.bits.CNR_BPC_LINE_SL0;
    MINT32 pos_CNR_BPC_LINE_TH_SL       = rUpperCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL;
    MINT32 pos_CNR_BPC_SL2_X1       = rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X1;
    MINT32 pos_CNR_BPC_SL2_X2       = rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X2;
    MINT32 pos_CNR_BPC_SL2_X3       = rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X3;
    MINT32 pos_CNR_BPC_SL2_GAIN0       = rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0;
    MINT32 pos_CNR_BPC_SL2_GAIN1       = rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1;
    MINT32 pos_CNR_BPC_SL2_GAIN2       = rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2;
    MINT32 pos_CNR_BPC_SL2_GAIN3       = rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3;
    MINT32 pos_CNR_BPC_SL2_SP3       = rUpperCNR_CNR.med13.bits.CNR_BPC_SL2_SP3;
    MINT32 pos_CNR_CNR_C_DITH_V       = rUpperCNR_CNR.actc.bits.CNR_CNR_C_DITH_V;
    MINT32 pos_CNR_CNR_C_DITH_U       = rUpperCNR_CNR.actc.bits.CNR_CNR_C_DITH_U;
    MINT32 pos_CNR_CNR_ACT_BLD_BASE_C       = rUpperCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C;
    MINT32 pos_CNR_TILE_EDGE       = rUpperCNR_CNR.con1.bits.CNR_TILE_EDGE;
    MINT32 pos_CNR_MODE       = rUpperCNR_CNR.con1.bits.CNR_MODE;
    MINT32 pos_CNR_BPC_EN       = rUpperCNR_CNR.con1.bits.CNR_BPC_EN;
    MINT32 pos_CNR_CNR_ENC       = rUpperCNR_CNR.con1.bits.CNR_CNR_ENC;
    MINT32 pos_CNR_CNR_VER_C_REF_Y       = rUpperCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y;
    MINT32 pos_CNR_LBIT_MODE       = rUpperCNR_CNR.con1.bits.CNR_LBIT_MODE;
    MINT32 pos_CNR_VIDEO_MODE       = rUpperCNR_CNR.con1.bits.CNR_VIDEO_MODE;
    MINT32 pos_CNR_CNR_FLT_C       = rUpperCNR_CNR.con2.bits.CNR_CNR_FLT_C;
    MINT32 pos_CNR_CNR_SL2_LINK       = rUpperCNR_CNR.con1.bits.CNR_CNR_SL2_LINK;
    MINT32 pos_CNR_CNR_C_MODE       = rUpperCNR_CNR.cad.bits.CNR_CNR_C_MODE;
    MINT32 pos_CNR_BPC_SL2_LINK       = rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_LINK;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 CNR_CNR_SCALE_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SCALE_MODE, pos_CNR_CNR_SCALE_MODE, 0);
    MINT32 CNR_CNR_PTC_GAIN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_PTC_GAIN_TH, pos_CNR_CNR_PTC_GAIN_TH, 0);
    MINT32 CNR_CNR_CB_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_V_RNG4, pos_CNR_CNR_CB_V_RNG4, 0);
    MINT32 CNR_CNR_CB_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_V_RNG3, pos_CNR_CNR_CB_V_RNG3, 0);
    MINT32 CNR_CNR_CB_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_V_RNG2, pos_CNR_CNR_CB_V_RNG2, 0);
    MINT32 CNR_CNR_CB_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_V_RNG1, pos_CNR_CNR_CB_V_RNG1, 0);
    MINT32 CNR_CNR_CB_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_H_RNG4, pos_CNR_CNR_CB_H_RNG4, 0);
    MINT32 CNR_CNR_CB_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_H_RNG3, pos_CNR_CNR_CB_H_RNG3, 0);
    MINT32 CNR_CNR_CB_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_H_RNG2, pos_CNR_CNR_CB_H_RNG2, 0);
    MINT32 CNR_CNR_CB_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CB_H_RNG1, pos_CNR_CNR_CB_H_RNG1, 0);
    MINT32 CNR_CNR_CR_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_V_RNG4, pos_CNR_CNR_CR_V_RNG4, 0);
    MINT32 CNR_CNR_CR_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_V_RNG3, pos_CNR_CNR_CR_V_RNG3, 0);
    MINT32 CNR_CNR_CR_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_V_RNG2, pos_CNR_CNR_CR_V_RNG2, 0);
    MINT32 CNR_CNR_CR_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_V_RNG1, pos_CNR_CNR_CR_V_RNG1, 0);
    MINT32 CNR_CNR_CR_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_H_RNG4, pos_CNR_CNR_CR_H_RNG4, 0);
    MINT32 CNR_CNR_CR_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_H_RNG3, pos_CNR_CNR_CR_H_RNG3, 0);
    MINT32 CNR_CNR_CR_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_H_RNG2, pos_CNR_CNR_CR_H_RNG2, 0);
    MINT32 CNR_CNR_CR_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_CR_H_RNG1, pos_CNR_CNR_CR_H_RNG1, 0);
    MINT32 CNR_CNR_C_SM_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_SM_EDGE, pos_CNR_CNR_C_SM_EDGE, 0);
    MINT32 CNR_CNR_K_TH_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_K_TH_C, pos_CNR_CNR_K_TH_C, 0);
    MINT32 CNR_CNR_Y_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_CPX1, pos_CNR_CNR_Y_CPX1, 0);
    MINT32 CNR_CNR_Y_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_CPX2, pos_CNR_CNR_Y_CPX2, 0);
    MINT32 CNR_CNR_Y_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_CPX3, pos_CNR_CNR_Y_CPX3, 0);
    MINT32 CNR_CNR_Y_SCALE_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_SCALE_CPY0, pos_CNR_CNR_Y_SCALE_CPY0, 0);
    MINT32 CNR_CNR_Y_SCALE_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_SCALE_CPY1, pos_CNR_CNR_Y_SCALE_CPY1, 0);
    MINT32 CNR_CNR_Y_SCALE_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_SCALE_CPY2, pos_CNR_CNR_Y_SCALE_CPY2, 0);
    MINT32 CNR_CNR_Y_SCALE_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_SCALE_CPY3, pos_CNR_CNR_Y_SCALE_CPY3, 0);
    MINT32 CNR_CNR_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_X1, pos_CNR_CNR_SL2_X1, 0);
    MINT32 CNR_CNR_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_X2, pos_CNR_CNR_SL2_X2, 0);
    MINT32 CNR_CNR_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_X3, pos_CNR_CNR_SL2_X3, 0);
    MINT32 CNR_CNR_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_GAIN0, pos_CNR_CNR_SL2_GAIN0, 0);
    MINT32 CNR_CNR_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_GAIN1, pos_CNR_CNR_SL2_GAIN1, 0);
    MINT32 CNR_CNR_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_GAIN2, pos_CNR_CNR_SL2_GAIN2, 0);
    MINT32 CNR_CNR_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_GAIN3, pos_CNR_CNR_SL2_GAIN3, 0);
    MINT32 CNR_CNR_C_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_GAIN, pos_CNR_CNR_C_GAIN, 0);
    MINT32 CNR_CNR_SL2_C_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_C_GAIN, pos_CNR_CNR_SL2_C_GAIN, 0);
    MINT32 CNR_CNR_C_L_DIFF_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_L_DIFF_TH, pos_CNR_CNR_C_L_DIFF_TH, 0);
    MINT32 CNR_BPC_VAR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_VAR, pos_CNR_BPC_VAR, 0);
    MINT32 CNR_BPC_LM_WT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LM_WT, pos_CNR_BPC_LM_WT, 0);
    MINT32 CNR_BPC_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_Y0, pos_CNR_BPC_Y0, 0);
    MINT32 CNR_BPC_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_Y1, pos_CNR_BPC_Y1, 0);
    MINT32 CNR_BPC_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_Y2, pos_CNR_BPC_Y2, 0);
    MINT32 CNR_BPC_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_Y3, pos_CNR_BPC_Y3, 0);
    MINT32 CNR_BPC_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_Y4, pos_CNR_BPC_Y4, 0);
    MINT32 CNR_BPC_LCL_OFT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LCL_OFT, pos_CNR_BPC_LCL_OFT, 0);
    MINT32 CNR_BPC_LCL_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LCL_TH, pos_CNR_BPC_LCL_TH, 0);
    MINT32 CNR_BPC_LCL_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LCL_LV, pos_CNR_BPC_LCL_LV, 0);
    MINT32 CNR_BPC_LCL_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LCL_SL, pos_CNR_BPC_LCL_SL, 0);
    MINT32 CNR_BPC_NCL_OFT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_NCL_OFT, pos_CNR_BPC_NCL_OFT, 0);
    MINT32 CNR_BPC_NCL_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_NCL_TH, pos_CNR_BPC_NCL_TH, 0);
    MINT32 CNR_BPC_NCL_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_NCL_LV, pos_CNR_BPC_NCL_LV, 0);
    MINT32 CNR_BPC_NCL_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_NCL_SL, pos_CNR_BPC_NCL_SL, 0);
    MINT32 CNR_BPC_SCL_OFT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SCL_OFT, pos_CNR_BPC_SCL_OFT, 0);
    MINT32 CNR_BPC_SCL_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SCL_TH, pos_CNR_BPC_SCL_TH, 0);
    MINT32 CNR_BPC_SCL_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SCL_LV, pos_CNR_BPC_SCL_LV, 0);
    MINT32 CNR_BPC_SCL_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SCL_SL, pos_CNR_BPC_SCL_SL, 0);
    MINT32 CNR_BPC_MCD_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_MCD_SL, pos_CNR_BPC_MCD_SL, 0);
    MINT32 CNR_BPC_MCD_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_MCD_TH, pos_CNR_BPC_MCD_TH, 0);
    MINT32 CNR_BPC_COR_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_COR_SL, pos_CNR_BPC_COR_SL, 0);
    MINT32 CNR_BPC_COR_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_COR_TH, pos_CNR_BPC_COR_TH, 0);
    MINT32 CNR_BPC_DK_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_DK_Y0, pos_CNR_BPC_DK_Y0, 0);
    MINT32 CNR_BPC_DK_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_DK_Y1, pos_CNR_BPC_DK_Y1, 0);
    MINT32 CNR_BPC_DK_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_DK_Y2, pos_CNR_BPC_DK_Y2, 0);
    MINT32 CNR_BPC_DK_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_DK_Y3, pos_CNR_BPC_DK_Y3, 0);
    MINT32 CNR_BPC_DK_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_DK_Y4, pos_CNR_BPC_DK_Y4, 0);
    MINT32 CNR_BPC_NCL_LV_CEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_NCL_LV_CEN, pos_CNR_BPC_NCL_LV_CEN, 0);
    MINT32 CNR_BPC_SCL_LV_CEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SCL_LV_CEN, pos_CNR_BPC_SCL_LV_CEN, 0);
    MINT32 CNR_BPC_LCL_LV_CEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LCL_LV_CEN, pos_CNR_BPC_LCL_LV_CEN, 0);
    MINT32 CNR_BPC_BND_TH_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_BND_TH_EDGE, pos_CNR_BPC_BND_TH_EDGE, 0);
    MINT32 CNR_BPC_BND_TH_HI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_BND_TH_HI, pos_CNR_BPC_BND_TH_HI, 0);
    MINT32 CNR_BPC_BND_TH_LO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_BND_TH_LO, pos_CNR_BPC_BND_TH_LO, 0);
    MINT32 CNR_BPC_BND_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_BND_SL, pos_CNR_BPC_BND_SL, 0);
    MINT32 CNR_BPC_OUT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_OUT_TH, pos_CNR_BPC_OUT_TH, 0);
    MINT32 CNR_BPC_EDG_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_EDG_TH, pos_CNR_BPC_EDG_TH, 0);
    MINT32 CNR_BPC_EDG_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_EDG_SL, pos_CNR_BPC_EDG_SL, 0);
    MINT32 CNR_BPC_LINE_X0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LINE_X0, pos_CNR_BPC_LINE_X0, 0);
    MINT32 CNR_BPC_LINE_TH0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LINE_TH0, pos_CNR_BPC_LINE_TH0, 0);
    MINT32 CNR_BPC_LINE_TH1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LINE_TH1, pos_CNR_BPC_LINE_TH1, 0);
    MINT32 CNR_BPC_LINE_SL0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LINE_SL0, pos_CNR_BPC_LINE_SL0, 0);
    MINT32 CNR_BPC_LINE_TH_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_LINE_TH_SL, pos_CNR_BPC_LINE_TH_SL, 0);
    MINT32 CNR_BPC_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_X1, pos_CNR_BPC_SL2_X1, 0);
    MINT32 CNR_BPC_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_X2, pos_CNR_BPC_SL2_X2, 0);
    MINT32 CNR_BPC_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_X3, pos_CNR_BPC_SL2_X3, 0);
    MINT32 CNR_BPC_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_GAIN0, pos_CNR_BPC_SL2_GAIN0, 0);
    MINT32 CNR_BPC_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_GAIN1, pos_CNR_BPC_SL2_GAIN1, 0);
    MINT32 CNR_BPC_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_GAIN2, pos_CNR_BPC_SL2_GAIN2, 0);
    MINT32 CNR_BPC_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_GAIN3, pos_CNR_BPC_SL2_GAIN3, 0);
    MINT32 CNR_CNR_C_DITH_V       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_DITH_V, pos_CNR_CNR_C_DITH_V, 0);
    MINT32 CNR_CNR_C_DITH_U       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_DITH_U, pos_CNR_CNR_C_DITH_U, 0);
    MINT32 CNR_CNR_ACT_BLD_BASE_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_ACT_BLD_BASE_C, pos_CNR_CNR_ACT_BLD_BASE_C, 0);
    MINT32 CNR_TILE_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_TILE_EDGE, pos_CNR_TILE_EDGE, 1);
    MINT32 CNR_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_MODE, pos_CNR_MODE, 1);
    MINT32 CNR_BPC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_EN, pos_CNR_BPC_EN, 1);
    MINT32 CNR_CNR_ENC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_ENC, pos_CNR_CNR_ENC, 1);
    MINT32 CNR_CNR_VER_C_REF_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_VER_C_REF_Y, pos_CNR_CNR_VER_C_REF_Y, 1);
    MINT32 CNR_LBIT_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_LBIT_MODE, pos_CNR_LBIT_MODE, 1);
    MINT32 CNR_VIDEO_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_VIDEO_MODE, pos_CNR_VIDEO_MODE, 1);
    MINT32 CNR_CNR_FLT_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_FLT_C, pos_CNR_CNR_FLT_C, 1);
    MINT32 CNR_CNR_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_LINK, pos_CNR_CNR_SL2_LINK, 1);
    MINT32 CNR_CNR_C_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_C_MODE, pos_CNR_CNR_C_MODE, 1);
    MINT32 CNR_BPC_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_LINK, pos_CNR_BPC_SL2_LINK, 1);

	//Slope Calculation
    MINT32 CNR_CNR_Y_SCALE_SP0       = CalculateLUTSP(   0, CNR_CNR_Y_CPX1, CNR_CNR_Y_SCALE_CPY0, CNR_CNR_Y_SCALE_CPY1, 128, 15, -15);
	CNR_CNR_Y_SCALE_SP0  = Convert2Pos(CNR_CNR_Y_SCALE_SP0,32);
	MINT32 CNR_CNR_Y_SCALE_SP1       = CalculateLUTSP(   CNR_CNR_Y_CPX1, CNR_CNR_Y_CPX2, CNR_CNR_Y_SCALE_CPY1, CNR_CNR_Y_SCALE_CPY2, 128, 15, -15);
	CNR_CNR_Y_SCALE_SP1  = Convert2Pos(CNR_CNR_Y_SCALE_SP1,32);
	MINT32 CNR_CNR_Y_SCALE_SP2       = CalculateLUTSP(   CNR_CNR_Y_CPX2, CNR_CNR_Y_CPX3, CNR_CNR_Y_SCALE_CPY2, CNR_CNR_Y_SCALE_CPY3, 128, 15, -15);
	CNR_CNR_Y_SCALE_SP2  = Convert2Pos(CNR_CNR_Y_SCALE_SP2,32);
	MINT32 CNR_CNR_SL2_SP0       = CalculateLUTSP(   0, CNR_CNR_SL2_X1, CNR_CNR_SL2_GAIN0, CNR_CNR_SL2_GAIN1, 128, 31, -31);
	CNR_CNR_Y_SCALE_SP0  = Convert2Pos(CNR_CNR_Y_SCALE_SP0,64);
	MINT32 CNR_CNR_SL2_SP1       = CalculateLUTSP(   CNR_CNR_SL2_X1, CNR_CNR_SL2_X2, CNR_CNR_SL2_GAIN1, CNR_CNR_SL2_GAIN2, 128, 31, -31);
	CNR_CNR_SL2_SP1  = Convert2Pos(CNR_CNR_SL2_SP1,64);
	MINT32 CNR_CNR_SL2_SP2       = CalculateLUTSP(   CNR_CNR_SL2_X2, CNR_CNR_SL2_X3, CNR_CNR_SL2_GAIN2, CNR_CNR_SL2_GAIN3, 128, 31, -31);
	CNR_CNR_SL2_SP2  = Convert2Pos(CNR_CNR_SL2_SP2,64);
	MINT32 CNR_BPC_SL2_SP0       = CalculateLUTSP(   0, CNR_BPC_SL2_X1, CNR_BPC_SL2_GAIN0, CNR_BPC_SL2_GAIN1, 128, 31, -31);
	CNR_BPC_SL2_SP0  = Convert2Pos(CNR_BPC_SL2_SP0,64);
	MINT32 CNR_BPC_SL2_SP1       = CalculateLUTSP(   CNR_BPC_SL2_X1, CNR_BPC_SL2_X2, CNR_BPC_SL2_GAIN1, CNR_BPC_SL2_GAIN3, 128, 31, -31);
	CNR_BPC_SL2_SP1  = Convert2Pos(CNR_BPC_SL2_SP1,64);
	MINT32 CNR_BPC_SL2_SP2       = CalculateLUTSP(   CNR_BPC_SL2_X2, CNR_BPC_SL2_X3, CNR_BPC_SL2_GAIN2, CNR_BPC_SL2_GAIN3, 128, 31, -31);
	CNR_BPC_SL2_SP2  = Convert2Pos(CNR_BPC_SL2_SP2,64);

	// signed interger interpolation
	pre_CNR_CNR_Y_SCALE_SP3 = Convert2Neg(pre_CNR_CNR_Y_SCALE_SP3,32);
	pos_CNR_CNR_Y_SCALE_SP3 = Convert2Neg(pos_CNR_CNR_Y_SCALE_SP3,32);
	pre_CNR_CNR_SL2_SP3 = Convert2Neg(pre_CNR_CNR_SL2_SP3,64);
	pos_CNR_CNR_SL2_SP3 = Convert2Neg(pos_CNR_CNR_SL2_SP3,64);
	pre_CNR_BPC_SL2_SP3 = Convert2Neg(pre_CNR_BPC_SL2_SP3,64);
	pos_CNR_BPC_SL2_SP3 = Convert2Neg(pos_CNR_BPC_SL2_SP3,64);

    MINT32 CNR_CNR_Y_SCALE_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_Y_SCALE_SP3, pos_CNR_CNR_Y_SCALE_SP3, 0);
    MINT32 CNR_CNR_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_CNR_SL2_SP3, pos_CNR_CNR_SL2_SP3, 0);
    MINT32 CNR_BPC_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_CNR_BPC_SL2_SP3, pos_CNR_BPC_SL2_SP3, 0);

	CNR_CNR_Y_SCALE_SP3  = Convert2Pos(CNR_CNR_Y_SCALE_SP3,32);
	CNR_CNR_SL2_SP3  = Convert2Pos(CNR_CNR_SL2_SP3,64);
	CNR_BPC_SL2_SP3  = Convert2Pos(CNR_BPC_SL2_SP3,64);


    // interpolation result assignment
    rSmoothCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE       = CNR_CNR_SCALE_MODE;
    rSmoothCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH       = CNR_CNR_PTC_GAIN_TH;
    rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4       = CNR_CNR_CB_V_RNG4;
    rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3       = CNR_CNR_CB_V_RNG3;
    rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2       = CNR_CNR_CB_V_RNG2;
    rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1       = CNR_CNR_CB_V_RNG1;
    rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4       = CNR_CNR_CB_H_RNG4;
    rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3       = CNR_CNR_CB_H_RNG3;
    rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2       = CNR_CNR_CB_H_RNG2;
    rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1       = CNR_CNR_CB_H_RNG1;
    rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4       = CNR_CNR_CR_V_RNG4;
    rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3       = CNR_CNR_CR_V_RNG3;
    rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2       = CNR_CNR_CR_V_RNG2;
    rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1       = CNR_CNR_CR_V_RNG1;
    rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4       = CNR_CNR_CR_H_RNG4;
    rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3       = CNR_CNR_CR_H_RNG3;
    rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2       = CNR_CNR_CR_H_RNG2;
    rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1       = CNR_CNR_CR_H_RNG1;
    rSmoothCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE       = CNR_CNR_C_SM_EDGE;
    rSmoothCNR_CNR.yad1.bits.CNR_CNR_K_TH_C       = CNR_CNR_K_TH_C;
    rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1       = CNR_CNR_Y_CPX1;
    rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2       = CNR_CNR_Y_CPX2;
    rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3       = CNR_CNR_Y_CPX3;
    rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0       = CNR_CNR_Y_SCALE_CPY0;
    rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1       = CNR_CNR_Y_SCALE_CPY1;
    rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2       = CNR_CNR_Y_SCALE_CPY2;
    rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3       = CNR_CNR_Y_SCALE_CPY3;
    rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3       = CNR_CNR_Y_SCALE_SP3;
    rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1       = CNR_CNR_SL2_X1;
    rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2       = CNR_CNR_SL2_X2;
    rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3       = CNR_CNR_SL2_X3;
    rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0       = CNR_CNR_SL2_GAIN0;
    rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1       = CNR_CNR_SL2_GAIN1;
    rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2       = CNR_CNR_SL2_GAIN2;
    rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3       = CNR_CNR_SL2_GAIN3;
    rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3       = CNR_CNR_SL2_SP3;
    rSmoothCNR_CNR.cad.bits.CNR_CNR_C_GAIN       = CNR_CNR_C_GAIN;
    rSmoothCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN       = CNR_CNR_SL2_C_GAIN;
    rSmoothCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH       = CNR_CNR_C_L_DIFF_TH;
    rSmoothCNR_CNR.med3.bits.CNR_BPC_VAR       = CNR_BPC_VAR;
    rSmoothCNR_CNR.sl2.bits.CNR_BPC_LM_WT       = CNR_BPC_LM_WT;
    rSmoothCNR_CNR.med3.bits.CNR_BPC_Y0       = CNR_BPC_Y0;
    rSmoothCNR_CNR.med4.bits.CNR_BPC_Y1       = CNR_BPC_Y1;
    rSmoothCNR_CNR.med4.bits.CNR_BPC_Y2       = CNR_BPC_Y2;
    rSmoothCNR_CNR.med4.bits.CNR_BPC_Y3       = CNR_BPC_Y3;
    rSmoothCNR_CNR.med4.bits.CNR_BPC_Y4       = CNR_BPC_Y4;
    rSmoothCNR_CNR.med5.bits.CNR_BPC_LCL_OFT       = CNR_BPC_LCL_OFT;
    rSmoothCNR_CNR.med1.bits.CNR_BPC_LCL_TH       = CNR_BPC_LCL_TH;
    rSmoothCNR_CNR.med2.bits.CNR_BPC_LCL_LV       = CNR_BPC_LCL_LV;
    rSmoothCNR_CNR.med2.bits.CNR_BPC_LCL_SL       = CNR_BPC_LCL_SL;
    rSmoothCNR_CNR.med5.bits.CNR_BPC_NCL_OFT       = CNR_BPC_NCL_OFT;
    rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_TH       = CNR_BPC_NCL_TH;
    rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_LV       = CNR_BPC_NCL_LV;
    rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_SL       = CNR_BPC_NCL_SL;
    rSmoothCNR_CNR.med5.bits.CNR_BPC_SCL_OFT       = CNR_BPC_SCL_OFT;
    rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_TH       = CNR_BPC_SCL_TH;
    rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_LV       = CNR_BPC_SCL_LV;
    rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_SL       = CNR_BPC_SCL_SL;
    rSmoothCNR_CNR.med1.bits.CNR_BPC_MCD_SL       = CNR_BPC_MCD_SL;
    rSmoothCNR_CNR.med1.bits.CNR_BPC_MCD_TH       = CNR_BPC_MCD_TH;
    rSmoothCNR_CNR.med1.bits.CNR_BPC_COR_SL       = CNR_BPC_COR_SL;
    rSmoothCNR_CNR.med1.bits.CNR_BPC_COR_TH       = CNR_BPC_COR_TH;
    rSmoothCNR_CNR.med7.bits.CNR_BPC_DK_Y0       = CNR_BPC_DK_Y0;
    rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y1       = CNR_BPC_DK_Y1;
    rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y2       = CNR_BPC_DK_Y2;
    rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y3       = CNR_BPC_DK_Y3;
    rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y4       = CNR_BPC_DK_Y4;
    rSmoothCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN       = CNR_BPC_NCL_LV_CEN;
    rSmoothCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN       = CNR_BPC_SCL_LV_CEN;
    rSmoothCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN       = CNR_BPC_LCL_LV_CEN;
    rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE       = CNR_BPC_BND_TH_EDGE;
    rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI       = CNR_BPC_BND_TH_HI;
    rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO       = CNR_BPC_BND_TH_LO;
    rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_SL       = CNR_BPC_BND_SL;
    rSmoothCNR_CNR.med8.bits.CNR_BPC_OUT_TH       = CNR_BPC_OUT_TH;
    rSmoothCNR_CNR.med9.bits.CNR_BPC_EDG_TH       = CNR_BPC_EDG_TH;
    rSmoothCNR_CNR.med9.bits.CNR_BPC_EDG_SL       = CNR_BPC_EDG_SL;
    rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_X0       = CNR_BPC_LINE_X0;
    rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_TH0       = CNR_BPC_LINE_TH0;
    rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_TH1       = CNR_BPC_LINE_TH1;
    rSmoothCNR_CNR.med10.bits.CNR_BPC_LINE_SL0       = CNR_BPC_LINE_SL0;
    rSmoothCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL       = CNR_BPC_LINE_TH_SL;
    rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X1       = CNR_BPC_SL2_X1;
    rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X2       = CNR_BPC_SL2_X2;
    rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X3       = CNR_BPC_SL2_X3;
    rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0       = CNR_BPC_SL2_GAIN0;
    rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1       = CNR_BPC_SL2_GAIN1;
    rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2       = CNR_BPC_SL2_GAIN2;
    rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3       = CNR_BPC_SL2_GAIN3;
    rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP3       = CNR_BPC_SL2_SP3;
    rSmoothCNR_CNR.actc.bits.CNR_CNR_C_DITH_V       = CNR_CNR_C_DITH_V;
    rSmoothCNR_CNR.actc.bits.CNR_CNR_C_DITH_U       = CNR_CNR_C_DITH_U;
    rSmoothCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C       = CNR_CNR_ACT_BLD_BASE_C;
    rSmoothCNR_CNR.con1.bits.CNR_TILE_EDGE       = CNR_TILE_EDGE;
    rSmoothCNR_CNR.con1.bits.CNR_MODE       = CNR_MODE;
    rSmoothCNR_CNR.con1.bits.CNR_BPC_EN       = CNR_BPC_EN;
    rSmoothCNR_CNR.con1.bits.CNR_CNR_ENC       = CNR_CNR_ENC;
    rSmoothCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y       = CNR_CNR_VER_C_REF_Y;
    rSmoothCNR_CNR.con1.bits.CNR_LBIT_MODE       = CNR_LBIT_MODE;
    rSmoothCNR_CNR.con1.bits.CNR_VIDEO_MODE       = CNR_VIDEO_MODE;
    rSmoothCNR_CNR.con2.bits.CNR_CNR_FLT_C       = CNR_CNR_FLT_C;
    rSmoothCNR_CNR.con1.bits.CNR_CNR_SL2_LINK       = CNR_CNR_SL2_LINK;
    rSmoothCNR_CNR.cad.bits.CNR_CNR_C_MODE       = CNR_CNR_C_MODE;
    rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_LINK       = CNR_BPC_SL2_LINK;
    rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP0       = CNR_CNR_Y_SCALE_SP0;
    rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP1       = CNR_CNR_Y_SCALE_SP1;
    rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP2       = CNR_CNR_Y_SCALE_SP2;
    rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP0       = CNR_CNR_SL2_SP0;
    rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP1       = CNR_CNR_SL2_SP1;
    rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP2       = CNR_CNR_SL2_SP2;
    rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP0       = CNR_BPC_SL2_SP0;
    rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP1       = CNR_BPC_SL2_SP1;
    rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP2       = CNR_BPC_SL2_SP2;


    // logging
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SCALE_MODE       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE, rSmoothCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE, rUpperCNR_CNR.con1.bits.CNR_CNR_SCALE_MODE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_PTC_GAIN_TH       = %d, %d, %d", rLowerCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH, rSmoothCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH, rUpperCNR_CNR.cad.bits.CNR_CNR_PTC_GAIN_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_V_RNG4       = %d, %d, %d", rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4, rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4, rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_V_RNG3       = %d, %d, %d", rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3, rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3, rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_V_RNG2       = %d, %d, %d", rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2, rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2, rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_V_RNG1       = %d, %d, %d", rLowerCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1, rSmoothCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1, rUpperCNR_CNR.cb_vrng.bits.CNR_CNR_CB_V_RNG1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_H_RNG4       = %d, %d, %d", rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4, rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4, rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_H_RNG3       = %d, %d, %d", rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3, rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3, rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_H_RNG2       = %d, %d, %d", rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2, rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2, rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CB_H_RNG1       = %d, %d, %d", rLowerCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1, rSmoothCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1, rUpperCNR_CNR.cb_hrng.bits.CNR_CNR_CB_H_RNG1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_V_RNG4       = %d, %d, %d", rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4, rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4, rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_V_RNG3       = %d, %d, %d", rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3, rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3, rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_V_RNG2       = %d, %d, %d", rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2, rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2, rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_V_RNG1       = %d, %d, %d", rLowerCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1, rSmoothCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1, rUpperCNR_CNR.cr_vrng.bits.CNR_CNR_CR_V_RNG1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_H_RNG4       = %d, %d, %d", rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4, rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4, rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_H_RNG3       = %d, %d, %d", rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3, rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3, rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_H_RNG2       = %d, %d, %d", rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2, rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2, rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_CR_H_RNG1       = %d, %d, %d", rLowerCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1, rSmoothCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1, rUpperCNR_CNR.cr_hrng.bits.CNR_CNR_CR_H_RNG1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_SM_EDGE       = %d, %d, %d", rLowerCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE, rSmoothCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE, rUpperCNR_CNR.con2.bits.CNR_CNR_C_SM_EDGE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_K_TH_C       = %d, %d, %d", rLowerCNR_CNR.yad1.bits.CNR_CNR_K_TH_C, rSmoothCNR_CNR.yad1.bits.CNR_CNR_K_TH_C, rUpperCNR_CNR.yad1.bits.CNR_CNR_K_TH_C);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_CPX1       = %d, %d, %d", rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1, rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1, rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_CPX2       = %d, %d, %d", rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2, rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2, rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_CPX3       = %d, %d, %d", rLowerCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3, rSmoothCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3, rUpperCNR_CNR.y4lut1.bits.CNR_CNR_Y_CPX3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_CPY0       = %d, %d, %d", rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0, rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0, rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_CPY1       = %d, %d, %d", rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1, rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1, rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_CPY2       = %d, %d, %d", rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2, rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2, rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_CPY3       = %d, %d, %d", rLowerCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3, rSmoothCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3, rUpperCNR_CNR.y4lut2.bits.CNR_CNR_Y_SCALE_CPY3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_SP3       = %d, %d, %d", rLowerCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3, rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3, rUpperCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_X1       = %d, %d, %d", rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1, rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1, rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_X2       = %d, %d, %d", rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2, rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2, rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_X3       = %d, %d, %d", rLowerCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3, rSmoothCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3, rUpperCNR_CNR.l4lut1.bits.CNR_CNR_SL2_X3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_GAIN0       = %d, %d, %d", rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0, rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0, rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_GAIN1       = %d, %d, %d", rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1, rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1, rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_GAIN2       = %d, %d, %d", rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2, rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2, rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_GAIN3       = %d, %d, %d", rLowerCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3, rSmoothCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3, rUpperCNR_CNR.l4lut2.bits.CNR_CNR_SL2_GAIN3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_SP3       = %d, %d, %d", rLowerCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3, rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3, rUpperCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_GAIN       = %d, %d, %d", rLowerCNR_CNR.cad.bits.CNR_CNR_C_GAIN, rSmoothCNR_CNR.cad.bits.CNR_CNR_C_GAIN, rUpperCNR_CNR.cad.bits.CNR_CNR_C_GAIN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_C_GAIN       = %d, %d, %d", rLowerCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN, rSmoothCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN, rUpperCNR_CNR.sl2.bits.CNR_CNR_SL2_C_GAIN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_L_DIFF_TH       = %d, %d, %d", rLowerCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH, rSmoothCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH, rUpperCNR_CNR.cad.bits.CNR_CNR_C_L_DIFF_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_VAR       = %d, %d, %d", rLowerCNR_CNR.med3.bits.CNR_BPC_VAR, rSmoothCNR_CNR.med3.bits.CNR_BPC_VAR, rUpperCNR_CNR.med3.bits.CNR_BPC_VAR);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LM_WT       = %d, %d, %d", rLowerCNR_CNR.sl2.bits.CNR_BPC_LM_WT, rSmoothCNR_CNR.sl2.bits.CNR_BPC_LM_WT, rUpperCNR_CNR.sl2.bits.CNR_BPC_LM_WT);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_Y0       = %d, %d, %d", rLowerCNR_CNR.med3.bits.CNR_BPC_Y0, rSmoothCNR_CNR.med3.bits.CNR_BPC_Y0, rUpperCNR_CNR.med3.bits.CNR_BPC_Y0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_Y1       = %d, %d, %d", rLowerCNR_CNR.med4.bits.CNR_BPC_Y1, rSmoothCNR_CNR.med4.bits.CNR_BPC_Y1, rUpperCNR_CNR.med4.bits.CNR_BPC_Y1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_Y2       = %d, %d, %d", rLowerCNR_CNR.med4.bits.CNR_BPC_Y2, rSmoothCNR_CNR.med4.bits.CNR_BPC_Y2, rUpperCNR_CNR.med4.bits.CNR_BPC_Y2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_Y3       = %d, %d, %d", rLowerCNR_CNR.med4.bits.CNR_BPC_Y3, rSmoothCNR_CNR.med4.bits.CNR_BPC_Y3, rUpperCNR_CNR.med4.bits.CNR_BPC_Y3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_Y4       = %d, %d, %d", rLowerCNR_CNR.med4.bits.CNR_BPC_Y4, rSmoothCNR_CNR.med4.bits.CNR_BPC_Y4, rUpperCNR_CNR.med4.bits.CNR_BPC_Y4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LCL_OFT       = %d, %d, %d", rLowerCNR_CNR.med5.bits.CNR_BPC_LCL_OFT, rSmoothCNR_CNR.med5.bits.CNR_BPC_LCL_OFT, rUpperCNR_CNR.med5.bits.CNR_BPC_LCL_OFT);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LCL_TH       = %d, %d, %d", rLowerCNR_CNR.med1.bits.CNR_BPC_LCL_TH, rSmoothCNR_CNR.med1.bits.CNR_BPC_LCL_TH, rUpperCNR_CNR.med1.bits.CNR_BPC_LCL_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LCL_LV       = %d, %d, %d", rLowerCNR_CNR.med2.bits.CNR_BPC_LCL_LV, rSmoothCNR_CNR.med2.bits.CNR_BPC_LCL_LV, rUpperCNR_CNR.med2.bits.CNR_BPC_LCL_LV);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LCL_SL       = %d, %d, %d", rLowerCNR_CNR.med2.bits.CNR_BPC_LCL_SL, rSmoothCNR_CNR.med2.bits.CNR_BPC_LCL_SL, rUpperCNR_CNR.med2.bits.CNR_BPC_LCL_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_NCL_OFT       = %d, %d, %d", rLowerCNR_CNR.med5.bits.CNR_BPC_NCL_OFT, rSmoothCNR_CNR.med5.bits.CNR_BPC_NCL_OFT, rUpperCNR_CNR.med5.bits.CNR_BPC_NCL_OFT);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_NCL_TH       = %d, %d, %d", rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_TH, rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_TH, rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_NCL_LV       = %d, %d, %d", rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_LV, rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_LV, rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_LV);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_NCL_SL       = %d, %d, %d", rLowerCNR_CNR.med3.bits.CNR_BPC_NCL_SL, rSmoothCNR_CNR.med3.bits.CNR_BPC_NCL_SL, rUpperCNR_CNR.med3.bits.CNR_BPC_NCL_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SCL_OFT       = %d, %d, %d", rLowerCNR_CNR.med5.bits.CNR_BPC_SCL_OFT, rSmoothCNR_CNR.med5.bits.CNR_BPC_SCL_OFT, rUpperCNR_CNR.med5.bits.CNR_BPC_SCL_OFT);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SCL_TH       = %d, %d, %d", rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_TH, rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_TH, rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SCL_LV       = %d, %d, %d", rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_LV, rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_LV, rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_LV);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SCL_SL       = %d, %d, %d", rLowerCNR_CNR.med2.bits.CNR_BPC_SCL_SL, rSmoothCNR_CNR.med2.bits.CNR_BPC_SCL_SL, rUpperCNR_CNR.med2.bits.CNR_BPC_SCL_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_MCD_SL       = %d, %d, %d", rLowerCNR_CNR.med1.bits.CNR_BPC_MCD_SL, rSmoothCNR_CNR.med1.bits.CNR_BPC_MCD_SL, rUpperCNR_CNR.med1.bits.CNR_BPC_MCD_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_MCD_TH       = %d, %d, %d", rLowerCNR_CNR.med1.bits.CNR_BPC_MCD_TH, rSmoothCNR_CNR.med1.bits.CNR_BPC_MCD_TH, rUpperCNR_CNR.med1.bits.CNR_BPC_MCD_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_COR_SL       = %d, %d, %d", rLowerCNR_CNR.med1.bits.CNR_BPC_COR_SL, rSmoothCNR_CNR.med1.bits.CNR_BPC_COR_SL, rUpperCNR_CNR.med1.bits.CNR_BPC_COR_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_COR_TH       = %d, %d, %d", rLowerCNR_CNR.med1.bits.CNR_BPC_COR_TH, rSmoothCNR_CNR.med1.bits.CNR_BPC_COR_TH, rUpperCNR_CNR.med1.bits.CNR_BPC_COR_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_DK_Y0       = %d, %d, %d", rLowerCNR_CNR.med7.bits.CNR_BPC_DK_Y0, rSmoothCNR_CNR.med7.bits.CNR_BPC_DK_Y0, rUpperCNR_CNR.med7.bits.CNR_BPC_DK_Y0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_DK_Y1       = %d, %d, %d", rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y1, rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y1, rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_DK_Y2       = %d, %d, %d", rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y2, rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y2, rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_DK_Y3       = %d, %d, %d", rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y3, rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y3, rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_DK_Y4       = %d, %d, %d", rLowerCNR_CNR.med6.bits.CNR_BPC_DK_Y4, rSmoothCNR_CNR.med6.bits.CNR_BPC_DK_Y4, rUpperCNR_CNR.med6.bits.CNR_BPC_DK_Y4);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_NCL_LV_CEN       = %d, %d, %d", rLowerCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN, rSmoothCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN, rUpperCNR_CNR.med7.bits.CNR_BPC_NCL_LV_CEN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SCL_LV_CEN       = %d, %d, %d", rLowerCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN, rSmoothCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN, rUpperCNR_CNR.med7.bits.CNR_BPC_SCL_LV_CEN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LCL_LV_CEN       = %d, %d, %d", rLowerCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN, rSmoothCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN, rUpperCNR_CNR.med7.bits.CNR_BPC_LCL_LV_CEN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_BND_TH_EDGE       = %d, %d, %d", rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE, rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE, rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_EDGE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_BND_TH_HI       = %d, %d, %d", rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI, rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI, rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_HI);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_BND_TH_LO       = %d, %d, %d", rLowerCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO, rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO, rUpperCNR_CNR.med8.bits.CNR_BPC_BND_TH_LO);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_BND_SL       = %d, %d, %d", rLowerCNR_CNR.med8.bits.CNR_BPC_BND_SL, rSmoothCNR_CNR.med8.bits.CNR_BPC_BND_SL, rUpperCNR_CNR.med8.bits.CNR_BPC_BND_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_OUT_TH       = %d, %d, %d", rLowerCNR_CNR.med8.bits.CNR_BPC_OUT_TH, rSmoothCNR_CNR.med8.bits.CNR_BPC_OUT_TH, rUpperCNR_CNR.med8.bits.CNR_BPC_OUT_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_EDG_TH       = %d, %d, %d", rLowerCNR_CNR.med9.bits.CNR_BPC_EDG_TH, rSmoothCNR_CNR.med9.bits.CNR_BPC_EDG_TH, rUpperCNR_CNR.med9.bits.CNR_BPC_EDG_TH);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_EDG_SL       = %d, %d, %d", rLowerCNR_CNR.med9.bits.CNR_BPC_EDG_SL, rSmoothCNR_CNR.med9.bits.CNR_BPC_EDG_SL, rUpperCNR_CNR.med9.bits.CNR_BPC_EDG_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LINE_X0       = %d, %d, %d", rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_X0, rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_X0, rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_X0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LINE_TH0       = %d, %d, %d", rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_TH0, rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_TH0, rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_TH0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LINE_TH1       = %d, %d, %d", rLowerCNR_CNR.med9.bits.CNR_BPC_LINE_TH1, rSmoothCNR_CNR.med9.bits.CNR_BPC_LINE_TH1, rUpperCNR_CNR.med9.bits.CNR_BPC_LINE_TH1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LINE_SL0       = %d, %d, %d", rLowerCNR_CNR.med10.bits.CNR_BPC_LINE_SL0, rSmoothCNR_CNR.med10.bits.CNR_BPC_LINE_SL0, rUpperCNR_CNR.med10.bits.CNR_BPC_LINE_SL0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_LINE_TH_SL       = %d, %d, %d", rLowerCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL, rSmoothCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL, rUpperCNR_CNR.med10.bits.CNR_BPC_LINE_TH_SL);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_X1       = %d, %d, %d", rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X1, rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X1, rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_X2       = %d, %d, %d", rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X2, rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X2, rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_X3       = %d, %d, %d", rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_X3, rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_X3, rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_X3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_GAIN0       = %d, %d, %d", rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0, rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0, rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_GAIN1       = %d, %d, %d", rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1, rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1, rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_GAIN2       = %d, %d, %d", rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2, rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2, rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_GAIN3       = %d, %d, %d", rLowerCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3, rSmoothCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3, rUpperCNR_CNR.med12.bits.CNR_BPC_SL2_GAIN3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_SP3       = %d, %d, %d", rLowerCNR_CNR.med13.bits.CNR_BPC_SL2_SP3, rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP3, rUpperCNR_CNR.med13.bits.CNR_BPC_SL2_SP3);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_DITH_V       = %d, %d, %d", rLowerCNR_CNR.actc.bits.CNR_CNR_C_DITH_V, rSmoothCNR_CNR.actc.bits.CNR_CNR_C_DITH_V, rUpperCNR_CNR.actc.bits.CNR_CNR_C_DITH_V);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_DITH_U       = %d, %d, %d", rLowerCNR_CNR.actc.bits.CNR_CNR_C_DITH_U, rSmoothCNR_CNR.actc.bits.CNR_CNR_C_DITH_U, rUpperCNR_CNR.actc.bits.CNR_CNR_C_DITH_U);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_ACT_BLD_BASE_C       = %d, %d, %d", rLowerCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C, rSmoothCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C, rUpperCNR_CNR.actc.bits.CNR_CNR_ACT_BLD_BASE_C);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_TILE_EDGE       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_TILE_EDGE, rSmoothCNR_CNR.con1.bits.CNR_TILE_EDGE, rUpperCNR_CNR.con1.bits.CNR_TILE_EDGE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_MODE       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_MODE, rSmoothCNR_CNR.con1.bits.CNR_MODE, rUpperCNR_CNR.con1.bits.CNR_MODE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_EN       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_BPC_EN, rSmoothCNR_CNR.con1.bits.CNR_BPC_EN, rUpperCNR_CNR.con1.bits.CNR_BPC_EN);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_ENC       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_CNR_ENC, rSmoothCNR_CNR.con1.bits.CNR_CNR_ENC, rUpperCNR_CNR.con1.bits.CNR_CNR_ENC);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_VER_C_REF_Y       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y, rSmoothCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y, rUpperCNR_CNR.con1.bits.CNR_CNR_VER_C_REF_Y);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_LBIT_MODE       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_LBIT_MODE, rSmoothCNR_CNR.con1.bits.CNR_LBIT_MODE, rUpperCNR_CNR.con1.bits.CNR_LBIT_MODE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_VIDEO_MODE       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_VIDEO_MODE, rSmoothCNR_CNR.con1.bits.CNR_VIDEO_MODE, rUpperCNR_CNR.con1.bits.CNR_VIDEO_MODE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_FLT_C       = %d, %d, %d", rLowerCNR_CNR.con2.bits.CNR_CNR_FLT_C, rSmoothCNR_CNR.con2.bits.CNR_CNR_FLT_C, rUpperCNR_CNR.con2.bits.CNR_CNR_FLT_C);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_LINK       = %d, %d, %d", rLowerCNR_CNR.con1.bits.CNR_CNR_SL2_LINK, rSmoothCNR_CNR.con1.bits.CNR_CNR_SL2_LINK, rUpperCNR_CNR.con1.bits.CNR_CNR_SL2_LINK);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_C_MODE       = %d, %d, %d", rLowerCNR_CNR.cad.bits.CNR_CNR_C_MODE, rSmoothCNR_CNR.cad.bits.CNR_CNR_C_MODE, rUpperCNR_CNR.cad.bits.CNR_CNR_C_MODE);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_LINK       = %d, %d, %d", rLowerCNR_CNR.med11.bits.CNR_BPC_SL2_LINK, rSmoothCNR_CNR.med11.bits.CNR_BPC_SL2_LINK, rUpperCNR_CNR.med11.bits.CNR_BPC_SL2_LINK);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_SP0       = %d, %d, %d", rLowerCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP0, rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP0, rUpperCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_SP1       = %d, %d, %d", rLowerCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP1, rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP1, rUpperCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_Y_SCALE_SP2       = %d, %d, %d", rLowerCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP2, rSmoothCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP2, rUpperCNR_CNR.y4lut3.bits.CNR_CNR_Y_SCALE_SP2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_SP0       = %d, %d, %d", rLowerCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP0, rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP0, rUpperCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_SP1       = %d, %d, %d", rLowerCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP1, rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP1, rUpperCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_CNR_SL2_SP2       = %d, %d, %d", rLowerCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP2, rSmoothCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP2, rUpperCNR_CNR.l4lut3.bits.CNR_CNR_SL2_SP2);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_SP0       = %d, %d, %d", rLowerCNR_CNR.med13.bits.CNR_BPC_SL2_SP0, rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP0, rUpperCNR_CNR.med13.bits.CNR_BPC_SL2_SP0);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_SP1       = %d, %d, %d", rLowerCNR_CNR.med13.bits.CNR_BPC_SL2_SP1, rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP1, rUpperCNR_CNR.med13.bits.CNR_BPC_SL2_SP1);
    INTER_LOG_IF(bSmoothCNR_CNRDebug, "[L,S,U]CNR_BPC_SL2_SP2       = %d, %d, %d", rLowerCNR_CNR.med13.bits.CNR_BPC_SL2_SP2, rSmoothCNR_CNR.med13.bits.CNR_BPC_SL2_SP2, rUpperCNR_CNR.med13.bits.CNR_BPC_SL2_SP2);

}

MVOID Smooth_EE(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_EE_T const& rUpperEE,   // EE settings for upper ISO
                ISP_NVRAM_EE_T const& rLowerEE,   // EE settings for lower ISO
                ISP_NVRAM_EE_T& rSmoothEE)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ee.enable", value, "0");
    MBOOL bSmoothEEDebug = atoi(value);

    INTER_LOG_IF(bSmoothEEDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_EE_H1_DI_BLND_OFST       = rLowerEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST;
    MINT32 pre_EE_H2_DI_BLND_OFST       = rLowerEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST;
    MINT32 pre_EE_H3_DI_BLND_OFST       = rLowerEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST;
    MINT32 pre_EE_H1_DI_BLND_SL       = rLowerEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL;
    MINT32 pre_EE_H2_DI_BLND_SL       = rLowerEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL;
    MINT32 pre_EE_H3_DI_BLND_SL       = rLowerEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL;
    MINT32 pre_EE_HX_ISO_BLND_RAT       = rLowerEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT;
    MINT32 pre_EE_H1_GN       = rLowerEE.gn_ctrl_1.bits.EE_H1_GN;
    MINT32 pre_EE_H2_GN       = rLowerEE.gn_ctrl_1.bits.EE_H2_GN;
    MINT32 pre_EE_H3_GN       = rLowerEE.gn_ctrl_1.bits.EE_H3_GN;
    MINT32 pre_EE_FLT_CORE_TH       = rLowerEE.core_ctrl.bits.EE_FLT_CORE_TH;
    MINT32 pre_EE_H1_FLT_CORE_TH       = rLowerEE.core_ctrl.bits.EE_H1_FLT_CORE_TH;
    MINT32 pre_EE_H2_FLT_CORE_TH       = rLowerEE.core_ctrl.bits.EE_H2_FLT_CORE_TH;
    MINT32 pre_EE_H3_FLT_CORE_TH       = rLowerEE.core_ctrl.bits.EE_H3_FLT_CORE_TH;
    MINT32 pre_EE_LUMA_MOD_Y0       = rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0;
    MINT32 pre_EE_LUMA_MOD_Y1       = rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1;
    MINT32 pre_EE_LUMA_MOD_Y2       = rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2;
    MINT32 pre_EE_LUMA_MOD_Y3       = rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3;
    MINT32 pre_EE_LUMA_MOD_Y4       = rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4;
    MINT32 pre_EE_LUMA_MOD_Y5       = rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5;
    MINT32 pre_EE_LUMA_MOD_Y6       = rLowerEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6;
    MINT32 pre_EE_SLNK_GN_Y0       = rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0;
    MINT32 pre_EE_SLNK_GN_Y1       = rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1;
    MINT32 pre_EE_SLNK_GN_Y2       = rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2;
    MINT32 pre_EE_LUMA_MAXI       = rLowerEE.ce_ctrl.bits.EE_LUMA_MAXI;
    MINT32 pre_EE_LUMA_MINI       = rLowerEE.ce_ctrl.bits.EE_LUMA_MINI;
    MINT32 pre_EE_LUMA_CNTST_LV       = rLowerEE.ce_ctrl.bits.EE_LUMA_CNTST_LV;
    MINT32 pre_EE_LUMA_LMT_DIFF       = rLowerEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF;
    MINT32 pre_EE_CHR_MAXI       = rLowerEE.ce_ctrl.bits.EE_CHR_MAXI;
    MINT32 pre_EE_CHR_MINI       = rLowerEE.ce_ctrl.bits.EE_CHR_MINI;
    MINT32 pre_EE_CHR_CNTST_LV       = rLowerEE.ce_ctrl.bits.EE_CHR_CNTST_LV;
    MINT32 pre_EE_CE_SLMOD_Y1       = rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1;
    MINT32 pre_EE_CE_SLMOD_Y2       = rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2;
    MINT32 pre_EE_GLUT_X1       = rLowerEE.glut_ctrl_1.bits.EE_GLUT_X1;
    MINT32 pre_EE_GLUT_X2       = rLowerEE.glut_ctrl_2.bits.EE_GLUT_X2;
    MINT32 pre_EE_GLUT_X3       = rLowerEE.glut_ctrl_3.bits.EE_GLUT_X3;
    MINT32 pre_EE_GLUT_X4       = rLowerEE.glut_ctrl_4.bits.EE_GLUT_X4;
    MINT32 pre_EE_GLUT_Y1       = rLowerEE.glut_ctrl_1.bits.EE_GLUT_Y1;
    MINT32 pre_EE_GLUT_Y2       = rLowerEE.glut_ctrl_2.bits.EE_GLUT_Y2;
    MINT32 pre_EE_GLUT_Y3       = rLowerEE.glut_ctrl_3.bits.EE_GLUT_Y3;
    MINT32 pre_EE_GLUT_Y4       = rLowerEE.glut_ctrl_4.bits.EE_GLUT_Y4;
    MINT32 pre_EE_GLUT_TH_OVR       = rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR;
    MINT32 pre_EE_GLUT_TH_UND       = rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_UND;
    MINT32 pre_EE_GLUT_TH_MIN       = rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN;
    MINT32 pre_EE_GLUT_SL_DEC_Y       = rLowerEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y;
    MINT32 pre_EE_DOT_TH       = rLowerEE.artifact_ctrl.bits.EE_DOT_TH;
    MINT32 pre_EE_DOT_REDUC_AMNT       = rLowerEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT;
    MINT32 pre_EE_OVRSH_CLIP_STR       = rLowerEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR;
    MINT32 pre_EE_RESP_SMO_STR       = rLowerEE.artifact_ctrl.bits.EE_RESP_SMO_STR;
    MINT32 pre_EE_RESP_CLIP_LUMA_UPB       = rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB;
    MINT32 pre_EE_RESP_CLIP_LUMA_LWB       = rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB;
    MINT32 pre_EE_RESP_CLIP_LUMA_SPC_TH       = rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 pre_EE_RESP_CLIP       = rLowerEE.clip_ctrl.bits.EE_RESP_CLIP;
    MINT32 pre_EE_MASTER_GN_POS       = rLowerEE.gn_ctrl_2.bits.EE_MASTER_GN_POS;
    MINT32 pre_EE_MASTER_GN_NEG       = rLowerEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG;
    MINT32 pre_EE_ST_LB       = rLowerEE.st_ctrl_1.bits.EE_ST_LB;
    MINT32 pre_EE_ST_UB       = rLowerEE.st_ctrl_1.bits.EE_ST_UB;
    MINT32 pre_EE_ST_OFST_RESP       = rLowerEE.st_ctrl_2.bits.EE_ST_OFST_RESP;
    MINT32 pre_EE_ST_SL_RESP       = rLowerEE.st_ctrl_2.bits.EE_ST_SL_RESP;
    MINT32 pre_EE_ST_OFST_CE       = rLowerEE.st_ctrl_2.bits.EE_ST_OFST_CE;
    MINT32 pre_EE_ST_SL_CE       = rLowerEE.st_ctrl_2.bits.EE_ST_SL_CE;
    MINT32 pre_EE_CBOOST_GAIN       = rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN;
    MINT32 pre_EE_CBOOST_LMT_L       = rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L;
    MINT32 pre_EE_CBOOST_LMT_U       = rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U;
    MINT32 pre_EE_CBOOST_YOFFSET_SEL       = rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL;
    MINT32 pre_EE_CBOOST_YOFFSET       = rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET;
    MINT32 pre_EE_CBOOST_YCONST       = rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST;
    MINT32 pre_EE_PBC_EDS_TH       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH;
    MINT32 pre_EE_PBC_EDS_SL       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL;
    MINT32 pre_EE_PBC1_LUMA_THL       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL;
    MINT32 pre_EE_PBC1_LUMA_THH       = rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH;
    MINT32 pre_EE_PBC1_LUMA_SL       = rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL;
    MINT32 pre_EE_PBC1_HUE_THL       = rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL;
    MINT32 pre_EE_PBC1_HUE_THH       = rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH;
    MINT32 pre_EE_PBC1_HUE_SL       = rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL;
    MINT32 pre_EE_PBC1_SAT_THL       = rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL;
    MINT32 pre_EE_PBC1_SAT_THH       = rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH;
    MINT32 pre_EE_PBC1_SAT_SL       = rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL;
    MINT32 pre_EE_PBC1_GAIN       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN;
    MINT32 pre_EE_PBC1_CONF_GAIN       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN;
    MINT32 pre_EE_PBC1_EDGE_THR       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR;
    MINT32 pre_EE_PBC1_EDGE_SLOPE       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE;
    MINT32 pre_EE_PBC1_LPF_GAIN       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN;
    MINT32 pre_EE_PBC2_LUMA_THL       = rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL;
    MINT32 pre_EE_PBC2_LUMA_THH       = rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH;
    MINT32 pre_EE_PBC2_LUMA_SL       = rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL;
    MINT32 pre_EE_PBC2_HUE_THL       = rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL;
    MINT32 pre_EE_PBC2_HUE_THH       = rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH;
    MINT32 pre_EE_PBC2_HUE_SL       = rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL;
    MINT32 pre_EE_PBC2_SAT_THL       = rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL;
    MINT32 pre_EE_PBC2_SAT_THH       = rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH;
    MINT32 pre_EE_PBC2_SAT_SL       = rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL;
    MINT32 pre_EE_PBC2_GAIN       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN;
    MINT32 pre_EE_PBC2_CONF_GAIN       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN;
    MINT32 pre_EE_PBC2_EDGE_THR       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR;
    MINT32 pre_EE_PBC2_EDGE_SLOPE       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE;
    MINT32 pre_EE_PBC2_LPF_GAIN       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN;
    MINT32 pre_EE_PBC3_LUMA_THL       = rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL;
    MINT32 pre_EE_PBC3_LUMA_THH       = rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH;
    MINT32 pre_EE_PBC3_LUMA_SL       = rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL;
    MINT32 pre_EE_PBC3_HUE_THL       = rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL;
    MINT32 pre_EE_PBC3_HUE_THH       = rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH;
    MINT32 pre_EE_PBC3_HUE_SL       = rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL;
    MINT32 pre_EE_PBC3_SAT_THL       = rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL;
    MINT32 pre_EE_PBC3_SAT_THH       = rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH;
    MINT32 pre_EE_PBC3_SAT_SL       = rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL;
    MINT32 pre_EE_PBC3_GAIN       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN;
    MINT32 pre_EE_PBC3_CONF_GAIN       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN;
    MINT32 pre_EE_PBC3_EDGE_THR       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR;
    MINT32 pre_EE_PBC3_EDGE_SLOPE       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE;
    MINT32 pre_EE_PBC3_LPF_GAIN       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN;
    MINT32 pre_EE_LUMA_MOD_EN       = rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN;
    MINT32 pre_EE_GLUT_LINK_EN       = rLowerEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN;
    MINT32 pre_EE_CE_SLMOD_EN       = rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN;
    MINT32 pre_EE_CBOOST_EN       = rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_EN;
    MINT32 pre_EE_PBC_EN       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EN;
    MINT32 pre_EE_PBC1_EN       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_EN;
    MINT32 pre_EE_PBC1_EDS_EN       = rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN;
    MINT32 pre_EE_PBC1_EDGE_EN       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN;
    MINT32 pre_EE_PBC1_LPF_EN       = rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN;
    MINT32 pre_EE_PBC2_EN       = rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_EN;
    MINT32 pre_EE_PBC2_EDS_EN       = rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN;
    MINT32 pre_EE_PBC2_EDGE_EN       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN;
    MINT32 pre_EE_PBC2_LPF_EN       = rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN;
    MINT32 pre_EE_PBC3_EN       = rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_EN;
    MINT32 pre_EE_PBC3_EDS_EN       = rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN;
    MINT32 pre_EE_PBC3_EDGE_EN       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN;
    MINT32 pre_EE_PBC3_LPF_EN       = rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN;
    MINT32 pos_EE_H1_DI_BLND_OFST       = rUpperEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST;
    MINT32 pos_EE_H2_DI_BLND_OFST       = rUpperEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST;
    MINT32 pos_EE_H3_DI_BLND_OFST       = rUpperEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST;
    MINT32 pos_EE_H1_DI_BLND_SL       = rUpperEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL;
    MINT32 pos_EE_H2_DI_BLND_SL       = rUpperEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL;
    MINT32 pos_EE_H3_DI_BLND_SL       = rUpperEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL;
    MINT32 pos_EE_HX_ISO_BLND_RAT       = rUpperEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT;
    MINT32 pos_EE_H1_GN       = rUpperEE.gn_ctrl_1.bits.EE_H1_GN;
    MINT32 pos_EE_H2_GN       = rUpperEE.gn_ctrl_1.bits.EE_H2_GN;
    MINT32 pos_EE_H3_GN       = rUpperEE.gn_ctrl_1.bits.EE_H3_GN;
    MINT32 pos_EE_FLT_CORE_TH       = rUpperEE.core_ctrl.bits.EE_FLT_CORE_TH;
    MINT32 pos_EE_H1_FLT_CORE_TH       = rUpperEE.core_ctrl.bits.EE_H1_FLT_CORE_TH;
    MINT32 pos_EE_H2_FLT_CORE_TH       = rUpperEE.core_ctrl.bits.EE_H2_FLT_CORE_TH;
    MINT32 pos_EE_H3_FLT_CORE_TH       = rUpperEE.core_ctrl.bits.EE_H3_FLT_CORE_TH;
    MINT32 pos_EE_LUMA_MOD_Y0       = rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0;
    MINT32 pos_EE_LUMA_MOD_Y1       = rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1;
    MINT32 pos_EE_LUMA_MOD_Y2       = rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2;
    MINT32 pos_EE_LUMA_MOD_Y3       = rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3;
    MINT32 pos_EE_LUMA_MOD_Y4       = rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4;
    MINT32 pos_EE_LUMA_MOD_Y5       = rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5;
    MINT32 pos_EE_LUMA_MOD_Y6       = rUpperEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6;
    MINT32 pos_EE_SLNK_GN_Y0       = rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0;
    MINT32 pos_EE_SLNK_GN_Y1       = rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1;
    MINT32 pos_EE_SLNK_GN_Y2       = rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2;
    MINT32 pos_EE_LUMA_MAXI       = rUpperEE.ce_ctrl.bits.EE_LUMA_MAXI;
    MINT32 pos_EE_LUMA_MINI       = rUpperEE.ce_ctrl.bits.EE_LUMA_MINI;
    MINT32 pos_EE_LUMA_CNTST_LV       = rUpperEE.ce_ctrl.bits.EE_LUMA_CNTST_LV;
    MINT32 pos_EE_LUMA_LMT_DIFF       = rUpperEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF;
    MINT32 pos_EE_CHR_MAXI       = rUpperEE.ce_ctrl.bits.EE_CHR_MAXI;
    MINT32 pos_EE_CHR_MINI       = rUpperEE.ce_ctrl.bits.EE_CHR_MINI;
    MINT32 pos_EE_CHR_CNTST_LV       = rUpperEE.ce_ctrl.bits.EE_CHR_CNTST_LV;
    MINT32 pos_EE_CE_SLMOD_Y1       = rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1;
    MINT32 pos_EE_CE_SLMOD_Y2       = rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2;
    MINT32 pos_EE_GLUT_X1       = rUpperEE.glut_ctrl_1.bits.EE_GLUT_X1;
    MINT32 pos_EE_GLUT_X2       = rUpperEE.glut_ctrl_2.bits.EE_GLUT_X2;
    MINT32 pos_EE_GLUT_X3       = rUpperEE.glut_ctrl_3.bits.EE_GLUT_X3;
    MINT32 pos_EE_GLUT_X4       = rUpperEE.glut_ctrl_4.bits.EE_GLUT_X4;
    MINT32 pos_EE_GLUT_Y1       = rUpperEE.glut_ctrl_1.bits.EE_GLUT_Y1;
    MINT32 pos_EE_GLUT_Y2       = rUpperEE.glut_ctrl_2.bits.EE_GLUT_Y2;
    MINT32 pos_EE_GLUT_Y3       = rUpperEE.glut_ctrl_3.bits.EE_GLUT_Y3;
    MINT32 pos_EE_GLUT_Y4       = rUpperEE.glut_ctrl_4.bits.EE_GLUT_Y4;
    MINT32 pos_EE_GLUT_TH_OVR       = rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR;
    MINT32 pos_EE_GLUT_TH_UND       = rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_UND;
    MINT32 pos_EE_GLUT_TH_MIN       = rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN;
    MINT32 pos_EE_GLUT_SL_DEC_Y       = rUpperEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y;
    MINT32 pos_EE_DOT_TH       = rUpperEE.artifact_ctrl.bits.EE_DOT_TH;
    MINT32 pos_EE_DOT_REDUC_AMNT       = rUpperEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT;
    MINT32 pos_EE_OVRSH_CLIP_STR       = rUpperEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR;
    MINT32 pos_EE_RESP_SMO_STR       = rUpperEE.artifact_ctrl.bits.EE_RESP_SMO_STR;
    MINT32 pos_EE_RESP_CLIP_LUMA_UPB       = rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB;
    MINT32 pos_EE_RESP_CLIP_LUMA_LWB       = rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB;
    MINT32 pos_EE_RESP_CLIP_LUMA_SPC_TH       = rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH;
    MINT32 pos_EE_RESP_CLIP       = rUpperEE.clip_ctrl.bits.EE_RESP_CLIP;
    MINT32 pos_EE_MASTER_GN_POS       = rUpperEE.gn_ctrl_2.bits.EE_MASTER_GN_POS;
    MINT32 pos_EE_MASTER_GN_NEG       = rUpperEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG;
    MINT32 pos_EE_ST_LB       = rUpperEE.st_ctrl_1.bits.EE_ST_LB;
    MINT32 pos_EE_ST_UB       = rUpperEE.st_ctrl_1.bits.EE_ST_UB;
    MINT32 pos_EE_ST_OFST_RESP       = rUpperEE.st_ctrl_2.bits.EE_ST_OFST_RESP;
    MINT32 pos_EE_ST_SL_RESP       = rUpperEE.st_ctrl_2.bits.EE_ST_SL_RESP;
    MINT32 pos_EE_ST_OFST_CE       = rUpperEE.st_ctrl_2.bits.EE_ST_OFST_CE;
    MINT32 pos_EE_ST_SL_CE       = rUpperEE.st_ctrl_2.bits.EE_ST_SL_CE;
    MINT32 pos_EE_CBOOST_GAIN       = rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN;
    MINT32 pos_EE_CBOOST_LMT_L       = rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L;
    MINT32 pos_EE_CBOOST_LMT_U       = rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U;
    MINT32 pos_EE_CBOOST_YOFFSET_SEL       = rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL;
    MINT32 pos_EE_CBOOST_YOFFSET       = rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET;
    MINT32 pos_EE_CBOOST_YCONST       = rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST;
    MINT32 pos_EE_PBC_EDS_TH       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH;
    MINT32 pos_EE_PBC_EDS_SL       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL;
    MINT32 pos_EE_PBC1_LUMA_THL       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL;
    MINT32 pos_EE_PBC1_LUMA_THH       = rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH;
    MINT32 pos_EE_PBC1_LUMA_SL       = rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL;
    MINT32 pos_EE_PBC1_HUE_THL       = rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL;
    MINT32 pos_EE_PBC1_HUE_THH       = rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH;
    MINT32 pos_EE_PBC1_HUE_SL       = rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL;
    MINT32 pos_EE_PBC1_SAT_THL       = rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL;
    MINT32 pos_EE_PBC1_SAT_THH       = rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH;
    MINT32 pos_EE_PBC1_SAT_SL       = rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL;
    MINT32 pos_EE_PBC1_GAIN       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN;
    MINT32 pos_EE_PBC1_CONF_GAIN       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN;
    MINT32 pos_EE_PBC1_EDGE_THR       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR;
    MINT32 pos_EE_PBC1_EDGE_SLOPE       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE;
    MINT32 pos_EE_PBC1_LPF_GAIN       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN;
    MINT32 pos_EE_PBC2_LUMA_THL       = rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL;
    MINT32 pos_EE_PBC2_LUMA_THH       = rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH;
    MINT32 pos_EE_PBC2_LUMA_SL       = rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL;
    MINT32 pos_EE_PBC2_HUE_THL       = rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL;
    MINT32 pos_EE_PBC2_HUE_THH       = rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH;
    MINT32 pos_EE_PBC2_HUE_SL       = rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL;
    MINT32 pos_EE_PBC2_SAT_THL       = rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL;
    MINT32 pos_EE_PBC2_SAT_THH       = rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH;
    MINT32 pos_EE_PBC2_SAT_SL       = rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL;
    MINT32 pos_EE_PBC2_GAIN       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN;
    MINT32 pos_EE_PBC2_CONF_GAIN       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN;
    MINT32 pos_EE_PBC2_EDGE_THR       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR;
    MINT32 pos_EE_PBC2_EDGE_SLOPE       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE;
    MINT32 pos_EE_PBC2_LPF_GAIN       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN;
    MINT32 pos_EE_PBC3_LUMA_THL       = rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL;
    MINT32 pos_EE_PBC3_LUMA_THH       = rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH;
    MINT32 pos_EE_PBC3_LUMA_SL       = rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL;
    MINT32 pos_EE_PBC3_HUE_THL       = rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL;
    MINT32 pos_EE_PBC3_HUE_THH       = rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH;
    MINT32 pos_EE_PBC3_HUE_SL       = rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL;
    MINT32 pos_EE_PBC3_SAT_THL       = rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL;
    MINT32 pos_EE_PBC3_SAT_THH       = rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH;
    MINT32 pos_EE_PBC3_SAT_SL       = rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL;
    MINT32 pos_EE_PBC3_GAIN       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN;
    MINT32 pos_EE_PBC3_CONF_GAIN       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN;
    MINT32 pos_EE_PBC3_EDGE_THR       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR;
    MINT32 pos_EE_PBC3_EDGE_SLOPE       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE;
    MINT32 pos_EE_PBC3_LPF_GAIN       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN;
    MINT32 pos_EE_LUMA_MOD_EN       = rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN;
    MINT32 pos_EE_GLUT_LINK_EN       = rUpperEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN;
    MINT32 pos_EE_CE_SLMOD_EN       = rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN;
    MINT32 pos_EE_CBOOST_EN       = rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_EN;
    MINT32 pos_EE_PBC_EN       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EN;
    MINT32 pos_EE_PBC1_EN       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_EN;
    MINT32 pos_EE_PBC1_EDS_EN       = rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN;
    MINT32 pos_EE_PBC1_EDGE_EN       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN;
    MINT32 pos_EE_PBC1_LPF_EN       = rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN;
    MINT32 pos_EE_PBC2_EN       = rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_EN;
    MINT32 pos_EE_PBC2_EDS_EN       = rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN;
    MINT32 pos_EE_PBC2_EDGE_EN       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN;
    MINT32 pos_EE_PBC2_LPF_EN       = rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN;
    MINT32 pos_EE_PBC3_EN       = rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_EN;
    MINT32 pos_EE_PBC3_EDS_EN       = rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN;
    MINT32 pos_EE_PBC3_EDGE_EN       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN;
    MINT32 pos_EE_PBC3_LPF_EN       = rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 EE_H1_DI_BLND_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H1_DI_BLND_OFST, pos_EE_H1_DI_BLND_OFST, 0);
    MINT32 EE_H2_DI_BLND_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H2_DI_BLND_OFST, pos_EE_H2_DI_BLND_OFST, 0);
    MINT32 EE_H3_DI_BLND_OFST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H3_DI_BLND_OFST, pos_EE_H3_DI_BLND_OFST, 0);
    MINT32 EE_H1_DI_BLND_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H1_DI_BLND_SL, pos_EE_H1_DI_BLND_SL, 0);
    MINT32 EE_H2_DI_BLND_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H2_DI_BLND_SL, pos_EE_H2_DI_BLND_SL, 0);
    MINT32 EE_H3_DI_BLND_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H3_DI_BLND_SL, pos_EE_H3_DI_BLND_SL, 0);
    MINT32 EE_HX_ISO_BLND_RAT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_HX_ISO_BLND_RAT, pos_EE_HX_ISO_BLND_RAT, 0);
    MINT32 EE_H1_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H1_GN, pos_EE_H1_GN, 0);
    MINT32 EE_H2_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H2_GN, pos_EE_H2_GN, 0);
    MINT32 EE_H3_GN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H3_GN, pos_EE_H3_GN, 0);
    MINT32 EE_FLT_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_FLT_CORE_TH, pos_EE_FLT_CORE_TH, 0);
    MINT32 EE_H1_FLT_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H1_FLT_CORE_TH, pos_EE_H1_FLT_CORE_TH, 0);
    MINT32 EE_H2_FLT_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H2_FLT_CORE_TH, pos_EE_H2_FLT_CORE_TH, 0);
    MINT32 EE_H3_FLT_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_H3_FLT_CORE_TH, pos_EE_H3_FLT_CORE_TH, 0);
    MINT32 EE_LUMA_MOD_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y0, pos_EE_LUMA_MOD_Y0, 0);
    MINT32 EE_LUMA_MOD_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y1, pos_EE_LUMA_MOD_Y1, 0);
    MINT32 EE_LUMA_MOD_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y2, pos_EE_LUMA_MOD_Y2, 0);
    MINT32 EE_LUMA_MOD_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y3, pos_EE_LUMA_MOD_Y3, 0);
    MINT32 EE_LUMA_MOD_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y4, pos_EE_LUMA_MOD_Y4, 0);
    MINT32 EE_LUMA_MOD_Y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y5, pos_EE_LUMA_MOD_Y5, 0);
    MINT32 EE_LUMA_MOD_Y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_Y6, pos_EE_LUMA_MOD_Y6, 0);
    MINT32 EE_SLNK_GN_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_SLNK_GN_Y0, pos_EE_SLNK_GN_Y0, 0);
    MINT32 EE_SLNK_GN_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_SLNK_GN_Y1, pos_EE_SLNK_GN_Y1, 0);
    MINT32 EE_SLNK_GN_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_SLNK_GN_Y2, pos_EE_SLNK_GN_Y2, 0);
    MINT32 EE_LUMA_MAXI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MAXI, pos_EE_LUMA_MAXI, 0);
    MINT32 EE_LUMA_MINI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MINI, pos_EE_LUMA_MINI, 0);
    MINT32 EE_LUMA_CNTST_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_CNTST_LV, pos_EE_LUMA_CNTST_LV, 0);
    MINT32 EE_LUMA_LMT_DIFF       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_LMT_DIFF, pos_EE_LUMA_LMT_DIFF, 0);
    MINT32 EE_CHR_MAXI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CHR_MAXI, pos_EE_CHR_MAXI, 0);
    MINT32 EE_CHR_MINI       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CHR_MINI, pos_EE_CHR_MINI, 0);
    MINT32 EE_CHR_CNTST_LV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CHR_CNTST_LV, pos_EE_CHR_CNTST_LV, 0);
    MINT32 EE_CE_SLMOD_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CE_SLMOD_Y1, pos_EE_CE_SLMOD_Y1, 0);
    MINT32 EE_CE_SLMOD_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CE_SLMOD_Y2, pos_EE_CE_SLMOD_Y2, 0);
    MINT32 EE_GLUT_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_X1, pos_EE_GLUT_X1, 0);
    MINT32 EE_GLUT_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_X2, pos_EE_GLUT_X2, 0);
    MINT32 EE_GLUT_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_X3, pos_EE_GLUT_X3, 0);
    MINT32 EE_GLUT_X4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_X4, pos_EE_GLUT_X4, 0);
    MINT32 EE_GLUT_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_Y1, pos_EE_GLUT_Y1, 0);
    MINT32 EE_GLUT_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_Y2, pos_EE_GLUT_Y2, 0);
    MINT32 EE_GLUT_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_Y3, pos_EE_GLUT_Y3, 0);
    MINT32 EE_GLUT_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_Y4, pos_EE_GLUT_Y4, 0);
    MINT32 EE_GLUT_TH_OVR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_TH_OVR, pos_EE_GLUT_TH_OVR, 0);
    MINT32 EE_GLUT_TH_UND       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_TH_UND, pos_EE_GLUT_TH_UND, 0);
    MINT32 EE_GLUT_TH_MIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_TH_MIN, pos_EE_GLUT_TH_MIN, 0);
    MINT32 EE_GLUT_SL_DEC_Y       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_SL_DEC_Y, pos_EE_GLUT_SL_DEC_Y, 0);
    MINT32 EE_DOT_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_DOT_TH, pos_EE_DOT_TH, 0);
    MINT32 EE_DOT_REDUC_AMNT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_DOT_REDUC_AMNT, pos_EE_DOT_REDUC_AMNT, 0);
    MINT32 EE_OVRSH_CLIP_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_OVRSH_CLIP_STR, pos_EE_OVRSH_CLIP_STR, 0);
    MINT32 EE_RESP_SMO_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_RESP_SMO_STR, pos_EE_RESP_SMO_STR, 0);
    MINT32 EE_RESP_CLIP_LUMA_UPB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_RESP_CLIP_LUMA_UPB, pos_EE_RESP_CLIP_LUMA_UPB, 0);
    MINT32 EE_RESP_CLIP_LUMA_LWB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_RESP_CLIP_LUMA_LWB, pos_EE_RESP_CLIP_LUMA_LWB, 0);
    MINT32 EE_RESP_CLIP_LUMA_SPC_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_RESP_CLIP_LUMA_SPC_TH, pos_EE_RESP_CLIP_LUMA_SPC_TH, 0);
    MINT32 EE_RESP_CLIP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_RESP_CLIP, pos_EE_RESP_CLIP, 0);
    MINT32 EE_MASTER_GN_POS       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_MASTER_GN_POS, pos_EE_MASTER_GN_POS, 0);
    MINT32 EE_MASTER_GN_NEG       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_MASTER_GN_NEG, pos_EE_MASTER_GN_NEG, 0);
    MINT32 EE_ST_LB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_LB, pos_EE_ST_LB, 0);
    MINT32 EE_ST_UB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_UB, pos_EE_ST_UB, 0);
    MINT32 EE_ST_OFST_RESP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_OFST_RESP, pos_EE_ST_OFST_RESP, 0);
    MINT32 EE_ST_SL_RESP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_SL_RESP, pos_EE_ST_SL_RESP, 0);
    MINT32 EE_ST_OFST_CE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_OFST_CE, pos_EE_ST_OFST_CE, 0);
    MINT32 EE_ST_SL_CE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_ST_SL_CE, pos_EE_ST_SL_CE, 0);
    MINT32 EE_CBOOST_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_GAIN, pos_EE_CBOOST_GAIN, 0);
    MINT32 EE_CBOOST_LMT_L       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_LMT_L, pos_EE_CBOOST_LMT_L, 0);
    MINT32 EE_CBOOST_LMT_U       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_LMT_U, pos_EE_CBOOST_LMT_U, 0);
    MINT32 EE_CBOOST_YOFFSET_SEL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_YOFFSET_SEL, pos_EE_CBOOST_YOFFSET_SEL, 0);
    MINT32 EE_CBOOST_YOFFSET       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_YOFFSET, pos_EE_CBOOST_YOFFSET, 0);
    MINT32 EE_CBOOST_YCONST       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_YCONST, pos_EE_CBOOST_YCONST, 0);
    MINT32 EE_PBC_EDS_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC_EDS_TH, pos_EE_PBC_EDS_TH, 0);
    MINT32 EE_PBC_EDS_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC_EDS_SL, pos_EE_PBC_EDS_SL, 0);
    MINT32 EE_PBC1_LUMA_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_LUMA_THL, pos_EE_PBC1_LUMA_THL, 0);
    MINT32 EE_PBC1_LUMA_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_LUMA_THH, pos_EE_PBC1_LUMA_THH, 0);
    MINT32 EE_PBC1_LUMA_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_LUMA_SL, pos_EE_PBC1_LUMA_SL, 0);
    MINT32 EE_PBC1_HUE_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_HUE_THL, pos_EE_PBC1_HUE_THL, 0);
    MINT32 EE_PBC1_HUE_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_HUE_THH, pos_EE_PBC1_HUE_THH, 0);
    MINT32 EE_PBC1_HUE_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_HUE_SL, pos_EE_PBC1_HUE_SL, 0);
    MINT32 EE_PBC1_SAT_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_SAT_THL, pos_EE_PBC1_SAT_THL, 0);
    MINT32 EE_PBC1_SAT_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_SAT_THH, pos_EE_PBC1_SAT_THH, 0);
    MINT32 EE_PBC1_SAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_SAT_SL, pos_EE_PBC1_SAT_SL, 0);
    MINT32 EE_PBC1_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_GAIN, pos_EE_PBC1_GAIN, 0);
    MINT32 EE_PBC1_CONF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_CONF_GAIN, pos_EE_PBC1_CONF_GAIN, 0);
    MINT32 EE_PBC1_EDGE_THR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_EDGE_THR, pos_EE_PBC1_EDGE_THR, 0);
    MINT32 EE_PBC1_EDGE_SLOPE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_EDGE_SLOPE, pos_EE_PBC1_EDGE_SLOPE, 0);
    MINT32 EE_PBC1_LPF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_LPF_GAIN, pos_EE_PBC1_LPF_GAIN, 0);
    MINT32 EE_PBC2_LUMA_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_LUMA_THL, pos_EE_PBC2_LUMA_THL, 0);
    MINT32 EE_PBC2_LUMA_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_LUMA_THH, pos_EE_PBC2_LUMA_THH, 0);
    MINT32 EE_PBC2_LUMA_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_LUMA_SL, pos_EE_PBC2_LUMA_SL, 0);
    MINT32 EE_PBC2_HUE_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_HUE_THL, pos_EE_PBC2_HUE_THL, 0);
    MINT32 EE_PBC2_HUE_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_HUE_THH, pos_EE_PBC2_HUE_THH, 0);
    MINT32 EE_PBC2_HUE_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_HUE_SL, pos_EE_PBC2_HUE_SL, 0);
    MINT32 EE_PBC2_SAT_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_SAT_THL, pos_EE_PBC2_SAT_THL, 0);
    MINT32 EE_PBC2_SAT_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_SAT_THH, pos_EE_PBC2_SAT_THH, 0);
    MINT32 EE_PBC2_SAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_SAT_SL, pos_EE_PBC2_SAT_SL, 0);
    MINT32 EE_PBC2_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_GAIN, pos_EE_PBC2_GAIN, 0);
    MINT32 EE_PBC2_CONF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_CONF_GAIN, pos_EE_PBC2_CONF_GAIN, 0);
    MINT32 EE_PBC2_EDGE_THR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_EDGE_THR, pos_EE_PBC2_EDGE_THR, 0);
    MINT32 EE_PBC2_EDGE_SLOPE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_EDGE_SLOPE, pos_EE_PBC2_EDGE_SLOPE, 0);
    MINT32 EE_PBC2_LPF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_LPF_GAIN, pos_EE_PBC2_LPF_GAIN, 0);
    MINT32 EE_PBC3_LUMA_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_LUMA_THL, pos_EE_PBC3_LUMA_THL, 0);
    MINT32 EE_PBC3_LUMA_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_LUMA_THH, pos_EE_PBC3_LUMA_THH, 0);
    MINT32 EE_PBC3_LUMA_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_LUMA_SL, pos_EE_PBC3_LUMA_SL, 0);
    MINT32 EE_PBC3_HUE_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_HUE_THL, pos_EE_PBC3_HUE_THL, 0);
    MINT32 EE_PBC3_HUE_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_HUE_THH, pos_EE_PBC3_HUE_THH, 0);
    MINT32 EE_PBC3_HUE_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_HUE_SL, pos_EE_PBC3_HUE_SL, 0);
    MINT32 EE_PBC3_SAT_THL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_SAT_THL, pos_EE_PBC3_SAT_THL, 0);
    MINT32 EE_PBC3_SAT_THH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_SAT_THH, pos_EE_PBC3_SAT_THH, 0);
    MINT32 EE_PBC3_SAT_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_SAT_SL, pos_EE_PBC3_SAT_SL, 0);
    MINT32 EE_PBC3_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_GAIN, pos_EE_PBC3_GAIN, 0);
    MINT32 EE_PBC3_CONF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_CONF_GAIN, pos_EE_PBC3_CONF_GAIN, 0);
    MINT32 EE_PBC3_EDGE_THR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_EDGE_THR, pos_EE_PBC3_EDGE_THR, 0);
    MINT32 EE_PBC3_EDGE_SLOPE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_EDGE_SLOPE, pos_EE_PBC3_EDGE_SLOPE, 0);
    MINT32 EE_PBC3_LPF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_LPF_GAIN, pos_EE_PBC3_LPF_GAIN, 0);
    MINT32 EE_LUMA_MOD_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_LUMA_MOD_EN, pos_EE_LUMA_MOD_EN, 1);
    MINT32 EE_GLUT_LINK_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_LINK_EN, pos_EE_GLUT_LINK_EN, 1);
    MINT32 EE_CE_SLMOD_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CE_SLMOD_EN, pos_EE_CE_SLMOD_EN, 1);
    MINT32 EE_CBOOST_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_CBOOST_EN, pos_EE_CBOOST_EN, 1);
    MINT32 EE_PBC_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC_EN, pos_EE_PBC_EN, 1);
    MINT32 EE_PBC1_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_EN, pos_EE_PBC1_EN, 1);
    MINT32 EE_PBC1_EDS_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_EDS_EN, pos_EE_PBC1_EDS_EN, 1);
    MINT32 EE_PBC1_EDGE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_EDGE_EN, pos_EE_PBC1_EDGE_EN, 1);
    MINT32 EE_PBC1_LPF_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC1_LPF_EN, pos_EE_PBC1_LPF_EN, 1);
    MINT32 EE_PBC2_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_EN, pos_EE_PBC2_EN, 1);
    MINT32 EE_PBC2_EDS_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_EDS_EN, pos_EE_PBC2_EDS_EN, 1);
    MINT32 EE_PBC2_EDGE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_EDGE_EN, pos_EE_PBC2_EDGE_EN, 1);
    MINT32 EE_PBC2_LPF_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC2_LPF_EN, pos_EE_PBC2_LPF_EN, 1);
    MINT32 EE_PBC3_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_EN, pos_EE_PBC3_EN, 1);
    MINT32 EE_PBC3_EDS_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_EDS_EN, pos_EE_PBC3_EDS_EN, 1);
    MINT32 EE_PBC3_EDGE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_EDGE_EN, pos_EE_PBC3_EDGE_EN, 1);
    MINT32 EE_PBC3_LPF_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_PBC3_LPF_EN, pos_EE_PBC3_LPF_EN, 1);

	// find pseudo Y5 by Y4 & S5
	MINT32 pre_EE_GLUT_S5       = rLowerEE.glut_ctrl_5.bits.EE_GLUT_S5;
	MINT32 pos_EE_GLUT_S5       = rUpperEE.glut_ctrl_5.bits.EE_GLUT_S5;

	pre_EE_GLUT_S5 = Convert2Neg(pre_EE_GLUT_S5,256);
	pos_EE_GLUT_S5 = Convert2Neg(pos_EE_GLUT_S5,256);

	MINT32 pre_S5_sign       = (pre_EE_GLUT_S5 >= 0) ? 1 : -1;
    MINT32 pre_EE_GLUT_Y5  = pre_EE_GLUT_Y4 + (pre_EE_GLUT_S5 * (255 - pre_EE_GLUT_X4) + 8 * pre_S5_sign) / 16;
	MINT32 pos_S5_sign       = (pos_EE_GLUT_S5 >= 0) ? 1 : -1;
    MINT32 pos_EE_GLUT_Y5  = pos_EE_GLUT_Y4 + (pos_EE_GLUT_S5 * (255 - pos_EE_GLUT_X4) + 8 * pos_S5_sign) / 16;
	MINT32 EE_GLUT_Y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_EE_GLUT_Y5, pos_EE_GLUT_Y5, 0);

    MINT32 EE_GLUT_S1;
    MINT32 EE_GLUT_S2;
    MINT32 EE_GLUT_S3;
    MINT32 EE_GLUT_S4;
    MINT32 EE_GLUT_S5;
    //  Due to slope can not be interpolated for most cases, they need to be re-calculated.
    if(EE_GLUT_X1 == 0){
        EE_GLUT_S1 = 0;
    }
    else{
        MINT32 S1 = (MINT32)((double)(EE_GLUT_Y1 << 4) / (double)EE_GLUT_X1 + 0.5);
        EE_GLUT_S1 = (S1 > 127) ? 127 : S1;
    }

    if((EE_GLUT_Y2 - EE_GLUT_Y1) > 0){
        MINT32 S2 = (MINT32)((double)((EE_GLUT_Y2 - EE_GLUT_Y1) << 4) / (double)(EE_GLUT_X2 - EE_GLUT_X1) + 0.5);
        EE_GLUT_S2 = (S2 > 127) ? 127 : S2;
    }
    else{
        MINT32 S2 = (MINT32)((double)((EE_GLUT_Y2 - EE_GLUT_Y1) << 4) / (double)(EE_GLUT_X2 - EE_GLUT_X1) - 0.5);
        EE_GLUT_S2 = (S2 < -128) ? -128 : S2;
    }

    if((EE_GLUT_Y3 - EE_GLUT_Y2) > 0){
        MINT32 S3 = (MINT32)((double)((EE_GLUT_Y3 - EE_GLUT_Y2) << 4) / (double)(EE_GLUT_X3 - EE_GLUT_X2) + 0.5);
        EE_GLUT_S3 = (S3 > 127) ? 127 : S3;
    }
    else{
        MINT32 S3 = (MINT32)((double)((EE_GLUT_Y3 - EE_GLUT_Y2) << 4) / (double)(EE_GLUT_X3 - EE_GLUT_X2) - 0.5);
        EE_GLUT_S3 = (S3 < -128) ? -128 : S3;
    }

    if((EE_GLUT_Y4 - EE_GLUT_Y3) > 0){
        MINT32 S4 = (MINT32)((double)((EE_GLUT_Y4 - EE_GLUT_Y3) << 4) / (double)(EE_GLUT_X4 - EE_GLUT_X3) + 0.5);
        EE_GLUT_S4 = (S4 > 127) ? 127 : S4;
    }
    else{
        MINT32 S4 = (MINT32)((double)((EE_GLUT_Y4 - EE_GLUT_Y3) << 4) / (double)(EE_GLUT_X4 - EE_GLUT_X3) - 0.5);
        EE_GLUT_S4 = (S4 < -128) ? -128 : S4;
    }

    if((EE_GLUT_Y5 - EE_GLUT_Y4) > 0){
        MINT32 S5 = (MINT32)((double)((EE_GLUT_Y5 - EE_GLUT_Y4) << 4) / (double)(255 - EE_GLUT_X4) + 0.5);
        EE_GLUT_S5 = (S5 > 127) ? 127 : S5;
    }
    else{
        MINT32 S5 = (MINT32)((double)((EE_GLUT_Y5 - EE_GLUT_Y4) << 4) / (double)(255 - EE_GLUT_X4) - 0.5);
        EE_GLUT_S5 = (S5 < -128) ? -128 : S5;
    }

	// negative conversion

	EE_GLUT_S1  = Convert2Pos(EE_GLUT_S1,256);
	EE_GLUT_S2  = Convert2Pos(EE_GLUT_S2,256);
	EE_GLUT_S3  = Convert2Pos(EE_GLUT_S3,256);
	EE_GLUT_S4  = Convert2Pos(EE_GLUT_S4,256);
	EE_GLUT_S5  = Convert2Pos(EE_GLUT_S5,256);


    // interpolation result assignment
    rSmoothEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST       = EE_H1_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST       = EE_H2_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST       = EE_H3_DI_BLND_OFST;
    rSmoothEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL       = EE_H1_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL       = EE_H2_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL       = EE_H3_DI_BLND_SL;
    rSmoothEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT       = EE_HX_ISO_BLND_RAT;
    rSmoothEE.gn_ctrl_1.bits.EE_H1_GN       = EE_H1_GN;
    rSmoothEE.gn_ctrl_1.bits.EE_H2_GN       = EE_H2_GN;
    rSmoothEE.gn_ctrl_1.bits.EE_H3_GN       = EE_H3_GN;
    rSmoothEE.core_ctrl.bits.EE_FLT_CORE_TH       = EE_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.EE_H1_FLT_CORE_TH       = EE_H1_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.EE_H2_FLT_CORE_TH       = EE_H2_FLT_CORE_TH;
    rSmoothEE.core_ctrl.bits.EE_H3_FLT_CORE_TH       = EE_H3_FLT_CORE_TH;
    rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0       = EE_LUMA_MOD_Y0;
    rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1       = EE_LUMA_MOD_Y1;
    rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2       = EE_LUMA_MOD_Y2;
    rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3       = EE_LUMA_MOD_Y3;
    rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4       = EE_LUMA_MOD_Y4;
    rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5       = EE_LUMA_MOD_Y5;
    rSmoothEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6       = EE_LUMA_MOD_Y6;
    rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0       = EE_SLNK_GN_Y0;
    rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1       = EE_SLNK_GN_Y1;
    rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2       = EE_SLNK_GN_Y2;
    rSmoothEE.ce_ctrl.bits.EE_LUMA_MAXI       = EE_LUMA_MAXI;
    rSmoothEE.ce_ctrl.bits.EE_LUMA_MINI       = EE_LUMA_MINI;
    rSmoothEE.ce_ctrl.bits.EE_LUMA_CNTST_LV       = EE_LUMA_CNTST_LV;
    rSmoothEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF       = EE_LUMA_LMT_DIFF;
    rSmoothEE.ce_ctrl.bits.EE_CHR_MAXI       = EE_CHR_MAXI;
    rSmoothEE.ce_ctrl.bits.EE_CHR_MINI       = EE_CHR_MINI;
    rSmoothEE.ce_ctrl.bits.EE_CHR_CNTST_LV       = EE_CHR_CNTST_LV;
    rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1       = EE_CE_SLMOD_Y1;
    rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2       = EE_CE_SLMOD_Y2;
    rSmoothEE.glut_ctrl_1.bits.EE_GLUT_X1       = EE_GLUT_X1;
    rSmoothEE.glut_ctrl_2.bits.EE_GLUT_X2       = EE_GLUT_X2;
    rSmoothEE.glut_ctrl_3.bits.EE_GLUT_X3       = EE_GLUT_X3;
    rSmoothEE.glut_ctrl_4.bits.EE_GLUT_X4       = EE_GLUT_X4;
    rSmoothEE.glut_ctrl_1.bits.EE_GLUT_Y1       = EE_GLUT_Y1;
    rSmoothEE.glut_ctrl_2.bits.EE_GLUT_Y2       = EE_GLUT_Y2;
    rSmoothEE.glut_ctrl_3.bits.EE_GLUT_Y3       = EE_GLUT_Y3;
    rSmoothEE.glut_ctrl_4.bits.EE_GLUT_Y4       = EE_GLUT_Y4;
    rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR       = EE_GLUT_TH_OVR;
    rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_UND       = EE_GLUT_TH_UND;
    rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN       = EE_GLUT_TH_MIN;
    rSmoothEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y       = EE_GLUT_SL_DEC_Y;
    rSmoothEE.artifact_ctrl.bits.EE_DOT_TH       = EE_DOT_TH;
    rSmoothEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT       = EE_DOT_REDUC_AMNT;
    rSmoothEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR       = EE_OVRSH_CLIP_STR;
    rSmoothEE.artifact_ctrl.bits.EE_RESP_SMO_STR       = EE_RESP_SMO_STR;
    rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB       = EE_RESP_CLIP_LUMA_UPB;
    rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB       = EE_RESP_CLIP_LUMA_LWB;
    rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH       = EE_RESP_CLIP_LUMA_SPC_TH;
    rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP       = EE_RESP_CLIP;
    rSmoothEE.gn_ctrl_2.bits.EE_MASTER_GN_POS       = EE_MASTER_GN_POS;
    rSmoothEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG       = EE_MASTER_GN_NEG;
    rSmoothEE.st_ctrl_1.bits.EE_ST_LB       = EE_ST_LB;
    rSmoothEE.st_ctrl_1.bits.EE_ST_UB       = EE_ST_UB;
    rSmoothEE.st_ctrl_2.bits.EE_ST_OFST_RESP       = EE_ST_OFST_RESP;
    rSmoothEE.st_ctrl_2.bits.EE_ST_SL_RESP       = EE_ST_SL_RESP;
    rSmoothEE.st_ctrl_2.bits.EE_ST_OFST_CE       = EE_ST_OFST_CE;
    rSmoothEE.st_ctrl_2.bits.EE_ST_SL_CE       = EE_ST_SL_CE;
    rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN       = EE_CBOOST_GAIN;
    rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L       = EE_CBOOST_LMT_L;
    rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U       = EE_CBOOST_LMT_U;
    rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL       = EE_CBOOST_YOFFSET_SEL;
    rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET       = EE_CBOOST_YOFFSET;
    rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST       = EE_CBOOST_YCONST;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH       = EE_PBC_EDS_TH;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL       = EE_PBC_EDS_SL;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL       = EE_PBC1_LUMA_THL;
    rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH       = EE_PBC1_LUMA_THH;
    rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL       = EE_PBC1_LUMA_SL;
    rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL       = EE_PBC1_HUE_THL;
    rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH       = EE_PBC1_HUE_THH;
    rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL       = EE_PBC1_HUE_SL;
    rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL       = EE_PBC1_SAT_THL;
    rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH       = EE_PBC1_SAT_THH;
    rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL       = EE_PBC1_SAT_SL;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN       = EE_PBC1_GAIN;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN       = EE_PBC1_CONF_GAIN;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR       = EE_PBC1_EDGE_THR;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE       = EE_PBC1_EDGE_SLOPE;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN       = EE_PBC1_LPF_GAIN;
    rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL       = EE_PBC2_LUMA_THL;
    rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH       = EE_PBC2_LUMA_THH;
    rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL       = EE_PBC2_LUMA_SL;
    rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL       = EE_PBC2_HUE_THL;
    rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH       = EE_PBC2_HUE_THH;
    rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL       = EE_PBC2_HUE_SL;
    rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL       = EE_PBC2_SAT_THL;
    rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH       = EE_PBC2_SAT_THH;
    rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL       = EE_PBC2_SAT_SL;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN       = EE_PBC2_GAIN;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN       = EE_PBC2_CONF_GAIN;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR       = EE_PBC2_EDGE_THR;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE       = EE_PBC2_EDGE_SLOPE;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN       = EE_PBC2_LPF_GAIN;
    rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL       = EE_PBC3_LUMA_THL;
    rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH       = EE_PBC3_LUMA_THH;
    rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL       = EE_PBC3_LUMA_SL;
    rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL       = EE_PBC3_HUE_THL;
    rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH       = EE_PBC3_HUE_THH;
    rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL       = EE_PBC3_HUE_SL;
    rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL       = EE_PBC3_SAT_THL;
    rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH       = EE_PBC3_SAT_THH;
    rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL       = EE_PBC3_SAT_SL;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN       = EE_PBC3_GAIN;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN       = EE_PBC3_CONF_GAIN;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR       = EE_PBC3_EDGE_THR;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE       = EE_PBC3_EDGE_SLOPE;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN       = EE_PBC3_LPF_GAIN;
    rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN       = EE_LUMA_MOD_EN;
    rSmoothEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN       = EE_GLUT_LINK_EN;
    rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN       = EE_CE_SLMOD_EN;
    rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_EN       = EE_CBOOST_EN;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EN       = EE_PBC_EN;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_EN       = EE_PBC1_EN;
    rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN       = EE_PBC1_EDS_EN;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN       = EE_PBC1_EDGE_EN;
    rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN       = EE_PBC1_LPF_EN;
    rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_EN       = EE_PBC2_EN;
    rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN       = EE_PBC2_EDS_EN;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN       = EE_PBC2_EDGE_EN;
    rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN       = EE_PBC2_LPF_EN;
    rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_EN       = EE_PBC3_EN;
    rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN       = EE_PBC3_EDS_EN;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN       = EE_PBC3_EDGE_EN;
    rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN       = EE_PBC3_LPF_EN;
    rSmoothEE.glut_ctrl_1.bits.EE_GLUT_S1       = EE_GLUT_S1;
    rSmoothEE.glut_ctrl_2.bits.EE_GLUT_S2       = EE_GLUT_S2;
    rSmoothEE.glut_ctrl_3.bits.EE_GLUT_S3       = EE_GLUT_S3;
    rSmoothEE.glut_ctrl_4.bits.EE_GLUT_S4       = EE_GLUT_S4;
    rSmoothEE.glut_ctrl_5.bits.EE_GLUT_S5       = EE_GLUT_S5;


    // logging
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H1_DI_BLND_OFST       = %d, %d, %d", rLowerEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST, rSmoothEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST, rUpperEE.blnd_ctrl_1.bits.EE_H1_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H2_DI_BLND_OFST       = %d, %d, %d", rLowerEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST, rSmoothEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST, rUpperEE.blnd_ctrl_1.bits.EE_H2_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H3_DI_BLND_OFST       = %d, %d, %d", rLowerEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST, rSmoothEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST, rUpperEE.blnd_ctrl_1.bits.EE_H3_DI_BLND_OFST);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H1_DI_BLND_SL       = %d, %d, %d", rLowerEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL, rSmoothEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL, rUpperEE.blnd_ctrl_2.bits.EE_H1_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H2_DI_BLND_SL       = %d, %d, %d", rLowerEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL, rSmoothEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL, rUpperEE.blnd_ctrl_2.bits.EE_H2_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H3_DI_BLND_SL       = %d, %d, %d", rLowerEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL, rSmoothEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL, rUpperEE.blnd_ctrl_2.bits.EE_H3_DI_BLND_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_HX_ISO_BLND_RAT       = %d, %d, %d", rLowerEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT, rSmoothEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT, rUpperEE.blnd_ctrl_2.bits.EE_HX_ISO_BLND_RAT);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H1_GN       = %d, %d, %d", rLowerEE.gn_ctrl_1.bits.EE_H1_GN, rSmoothEE.gn_ctrl_1.bits.EE_H1_GN, rUpperEE.gn_ctrl_1.bits.EE_H1_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H2_GN       = %d, %d, %d", rLowerEE.gn_ctrl_1.bits.EE_H2_GN, rSmoothEE.gn_ctrl_1.bits.EE_H2_GN, rUpperEE.gn_ctrl_1.bits.EE_H2_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H3_GN       = %d, %d, %d", rLowerEE.gn_ctrl_1.bits.EE_H3_GN, rSmoothEE.gn_ctrl_1.bits.EE_H3_GN, rUpperEE.gn_ctrl_1.bits.EE_H3_GN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_FLT_CORE_TH       = %d, %d, %d", rLowerEE.core_ctrl.bits.EE_FLT_CORE_TH, rSmoothEE.core_ctrl.bits.EE_FLT_CORE_TH, rUpperEE.core_ctrl.bits.EE_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H1_FLT_CORE_TH       = %d, %d, %d", rLowerEE.core_ctrl.bits.EE_H1_FLT_CORE_TH, rSmoothEE.core_ctrl.bits.EE_H1_FLT_CORE_TH, rUpperEE.core_ctrl.bits.EE_H1_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H2_FLT_CORE_TH       = %d, %d, %d", rLowerEE.core_ctrl.bits.EE_H2_FLT_CORE_TH, rSmoothEE.core_ctrl.bits.EE_H2_FLT_CORE_TH, rUpperEE.core_ctrl.bits.EE_H2_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_H3_FLT_CORE_TH       = %d, %d, %d", rLowerEE.core_ctrl.bits.EE_H3_FLT_CORE_TH, rSmoothEE.core_ctrl.bits.EE_H3_FLT_CORE_TH, rUpperEE.core_ctrl.bits.EE_H3_FLT_CORE_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y0       = %d, %d, %d", rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0, rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0, rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y0);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y1       = %d, %d, %d", rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1, rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1, rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y2       = %d, %d, %d", rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2, rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2, rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y3       = %d, %d, %d", rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3, rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3, rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y3);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y4       = %d, %d, %d", rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4, rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4, rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y4);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y5       = %d, %d, %d", rLowerEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5, rSmoothEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5, rUpperEE.luma_ctrl_2.bits.EE_LUMA_MOD_Y5);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_Y6       = %d, %d, %d", rLowerEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6, rSmoothEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6, rUpperEE.gn_ctrl_1.bits.EE_LUMA_MOD_Y6);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_SLNK_GN_Y0       = %d, %d, %d", rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0, rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0, rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y0);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_SLNK_GN_Y1       = %d, %d, %d", rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1, rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1, rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_SLNK_GN_Y2       = %d, %d, %d", rLowerEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2, rSmoothEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2, rUpperEE.luma_slnk_ctrl.bits.EE_SLNK_GN_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MAXI       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_LUMA_MAXI, rSmoothEE.ce_ctrl.bits.EE_LUMA_MAXI, rUpperEE.ce_ctrl.bits.EE_LUMA_MAXI);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MINI       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_LUMA_MINI, rSmoothEE.ce_ctrl.bits.EE_LUMA_MINI, rUpperEE.ce_ctrl.bits.EE_LUMA_MINI);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_CNTST_LV       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_LUMA_CNTST_LV, rSmoothEE.ce_ctrl.bits.EE_LUMA_CNTST_LV, rUpperEE.ce_ctrl.bits.EE_LUMA_CNTST_LV);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_LMT_DIFF       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF, rSmoothEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF, rUpperEE.ce_ctrl.bits.EE_LUMA_LMT_DIFF);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CHR_MAXI       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_CHR_MAXI, rSmoothEE.ce_ctrl.bits.EE_CHR_MAXI, rUpperEE.ce_ctrl.bits.EE_CHR_MAXI);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CHR_MINI       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_CHR_MINI, rSmoothEE.ce_ctrl.bits.EE_CHR_MINI, rUpperEE.ce_ctrl.bits.EE_CHR_MINI);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CHR_CNTST_LV       = %d, %d, %d", rLowerEE.ce_ctrl.bits.EE_CHR_CNTST_LV, rSmoothEE.ce_ctrl.bits.EE_CHR_CNTST_LV, rUpperEE.ce_ctrl.bits.EE_CHR_CNTST_LV);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CE_SLMOD_Y1       = %d, %d, %d", rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1, rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1, rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CE_SLMOD_Y2       = %d, %d, %d", rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2, rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2, rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_X1       = %d, %d, %d", rLowerEE.glut_ctrl_1.bits.EE_GLUT_X1, rSmoothEE.glut_ctrl_1.bits.EE_GLUT_X1, rUpperEE.glut_ctrl_1.bits.EE_GLUT_X1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_X2       = %d, %d, %d", rLowerEE.glut_ctrl_2.bits.EE_GLUT_X2, rSmoothEE.glut_ctrl_2.bits.EE_GLUT_X2, rUpperEE.glut_ctrl_2.bits.EE_GLUT_X2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_X3       = %d, %d, %d", rLowerEE.glut_ctrl_3.bits.EE_GLUT_X3, rSmoothEE.glut_ctrl_3.bits.EE_GLUT_X3, rUpperEE.glut_ctrl_3.bits.EE_GLUT_X3);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_X4       = %d, %d, %d", rLowerEE.glut_ctrl_4.bits.EE_GLUT_X4, rSmoothEE.glut_ctrl_4.bits.EE_GLUT_X4, rUpperEE.glut_ctrl_4.bits.EE_GLUT_X4);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_Y1       = %d, %d, %d", rLowerEE.glut_ctrl_1.bits.EE_GLUT_Y1, rSmoothEE.glut_ctrl_1.bits.EE_GLUT_Y1, rUpperEE.glut_ctrl_1.bits.EE_GLUT_Y1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_Y2       = %d, %d, %d", rLowerEE.glut_ctrl_2.bits.EE_GLUT_Y2, rSmoothEE.glut_ctrl_2.bits.EE_GLUT_Y2, rUpperEE.glut_ctrl_2.bits.EE_GLUT_Y2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_Y3       = %d, %d, %d", rLowerEE.glut_ctrl_3.bits.EE_GLUT_Y3, rSmoothEE.glut_ctrl_3.bits.EE_GLUT_Y3, rUpperEE.glut_ctrl_3.bits.EE_GLUT_Y3);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_Y4       = %d, %d, %d", rLowerEE.glut_ctrl_4.bits.EE_GLUT_Y4, rSmoothEE.glut_ctrl_4.bits.EE_GLUT_Y4, rUpperEE.glut_ctrl_4.bits.EE_GLUT_Y4);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_TH_OVR       = %d, %d, %d", rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR, rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR, rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_OVR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_TH_UND       = %d, %d, %d", rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_UND, rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_UND, rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_UND);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_TH_MIN       = %d, %d, %d", rLowerEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN, rSmoothEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN, rUpperEE.glut_ctrl_6.bits.EE_GLUT_TH_MIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_SL_DEC_Y       = %d, %d, %d", rLowerEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y, rSmoothEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y, rUpperEE.glut_ctrl_5.bits.EE_GLUT_SL_DEC_Y);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_DOT_TH       = %d, %d, %d", rLowerEE.artifact_ctrl.bits.EE_DOT_TH, rSmoothEE.artifact_ctrl.bits.EE_DOT_TH, rUpperEE.artifact_ctrl.bits.EE_DOT_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_DOT_REDUC_AMNT       = %d, %d, %d", rLowerEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT, rSmoothEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT, rUpperEE.artifact_ctrl.bits.EE_DOT_REDUC_AMNT);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_OVRSH_CLIP_STR       = %d, %d, %d", rLowerEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR, rSmoothEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR, rUpperEE.artifact_ctrl.bits.EE_OVRSH_CLIP_STR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_RESP_SMO_STR       = %d, %d, %d", rLowerEE.artifact_ctrl.bits.EE_RESP_SMO_STR, rSmoothEE.artifact_ctrl.bits.EE_RESP_SMO_STR, rUpperEE.artifact_ctrl.bits.EE_RESP_SMO_STR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_RESP_CLIP_LUMA_UPB       = %d, %d, %d", rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB, rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB, rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_UPB);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_RESP_CLIP_LUMA_LWB       = %d, %d, %d", rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB, rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB, rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_LWB);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_RESP_CLIP_LUMA_SPC_TH       = %d, %d, %d", rLowerEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH, rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH, rUpperEE.clip_ctrl.bits.EE_RESP_CLIP_LUMA_SPC_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_RESP_CLIP       = %d, %d, %d", rLowerEE.clip_ctrl.bits.EE_RESP_CLIP, rSmoothEE.clip_ctrl.bits.EE_RESP_CLIP, rUpperEE.clip_ctrl.bits.EE_RESP_CLIP);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_MASTER_GN_POS       = %d, %d, %d", rLowerEE.gn_ctrl_2.bits.EE_MASTER_GN_POS, rSmoothEE.gn_ctrl_2.bits.EE_MASTER_GN_POS, rUpperEE.gn_ctrl_2.bits.EE_MASTER_GN_POS);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_MASTER_GN_NEG       = %d, %d, %d", rLowerEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG, rSmoothEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG, rUpperEE.gn_ctrl_2.bits.EE_MASTER_GN_NEG);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_LB       = %d, %d, %d", rLowerEE.st_ctrl_1.bits.EE_ST_LB, rSmoothEE.st_ctrl_1.bits.EE_ST_LB, rUpperEE.st_ctrl_1.bits.EE_ST_LB);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_UB       = %d, %d, %d", rLowerEE.st_ctrl_1.bits.EE_ST_UB, rSmoothEE.st_ctrl_1.bits.EE_ST_UB, rUpperEE.st_ctrl_1.bits.EE_ST_UB);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_OFST_RESP       = %d, %d, %d", rLowerEE.st_ctrl_2.bits.EE_ST_OFST_RESP, rSmoothEE.st_ctrl_2.bits.EE_ST_OFST_RESP, rUpperEE.st_ctrl_2.bits.EE_ST_OFST_RESP);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_SL_RESP       = %d, %d, %d", rLowerEE.st_ctrl_2.bits.EE_ST_SL_RESP, rSmoothEE.st_ctrl_2.bits.EE_ST_SL_RESP, rUpperEE.st_ctrl_2.bits.EE_ST_SL_RESP);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_OFST_CE       = %d, %d, %d", rLowerEE.st_ctrl_2.bits.EE_ST_OFST_CE, rSmoothEE.st_ctrl_2.bits.EE_ST_OFST_CE, rUpperEE.st_ctrl_2.bits.EE_ST_OFST_CE);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_ST_SL_CE       = %d, %d, %d", rLowerEE.st_ctrl_2.bits.EE_ST_SL_CE, rSmoothEE.st_ctrl_2.bits.EE_ST_SL_CE, rUpperEE.st_ctrl_2.bits.EE_ST_SL_CE);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_GAIN       = %d, %d, %d", rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN, rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN, rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_LMT_L       = %d, %d, %d", rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L, rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L, rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_L);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_LMT_U       = %d, %d, %d", rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U, rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U, rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_LMT_U);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_YOFFSET_SEL       = %d, %d, %d", rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL, rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL, rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET_SEL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_YOFFSET       = %d, %d, %d", rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET, rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET, rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YOFFSET);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_YCONST       = %d, %d, %d", rLowerEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST, rSmoothEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST, rUpperEE.cboost_ctrl_2.bits.EE_CBOOST_YCONST);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC_EDS_TH       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH, rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EDS_TH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC_EDS_SL       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL, rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EDS_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_LUMA_THL       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL, rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_LUMA_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_LUMA_THH       = %d, %d, %d", rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH, rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH, rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_LUMA_SL       = %d, %d, %d", rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL, rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL, rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_LUMA_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_HUE_THL       = %d, %d, %d", rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL, rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL, rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_HUE_THH       = %d, %d, %d", rLowerEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH, rSmoothEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH, rUpperEE.pbc1_ctrl_1.bits.EE_PBC1_HUE_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_HUE_SL       = %d, %d, %d", rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL, rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL, rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_HUE_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_SAT_THL       = %d, %d, %d", rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL, rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL, rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_SAT_THH       = %d, %d, %d", rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH, rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH, rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_SAT_SL       = %d, %d, %d", rLowerEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL, rSmoothEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL, rUpperEE.pbc1_ctrl_2.bits.EE_PBC1_SAT_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_GAIN       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_CONF_GAIN       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_EDGE_THR       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_EDGE_SLOPE       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_LPF_GAIN       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_LUMA_THL       = %d, %d, %d", rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL, rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL, rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_LUMA_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_LUMA_THH       = %d, %d, %d", rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH, rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH, rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_LUMA_SL       = %d, %d, %d", rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL, rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL, rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_LUMA_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_HUE_THL       = %d, %d, %d", rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL, rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL, rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_HUE_THH       = %d, %d, %d", rLowerEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH, rSmoothEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH, rUpperEE.pbc2_ctrl_1.bits.EE_PBC2_HUE_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_HUE_SL       = %d, %d, %d", rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL, rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL, rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_HUE_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_SAT_THL       = %d, %d, %d", rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL, rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL, rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_SAT_THH       = %d, %d, %d", rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH, rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH, rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_SAT_SL       = %d, %d, %d", rLowerEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL, rSmoothEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL, rUpperEE.pbc2_ctrl_2.bits.EE_PBC2_SAT_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_GAIN       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_CONF_GAIN       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_EDGE_THR       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_EDGE_SLOPE       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_LPF_GAIN       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_LUMA_THL       = %d, %d, %d", rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL, rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL, rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_LUMA_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_LUMA_THH       = %d, %d, %d", rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH, rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH, rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_LUMA_SL       = %d, %d, %d", rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL, rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL, rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_LUMA_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_HUE_THL       = %d, %d, %d", rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL, rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL, rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_HUE_THH       = %d, %d, %d", rLowerEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH, rSmoothEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH, rUpperEE.pbc3_ctrl_1.bits.EE_PBC3_HUE_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_HUE_SL       = %d, %d, %d", rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL, rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL, rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_HUE_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_SAT_THL       = %d, %d, %d", rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL, rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL, rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_SAT_THH       = %d, %d, %d", rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH, rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH, rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_THH);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_SAT_SL       = %d, %d, %d", rLowerEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL, rSmoothEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL, rUpperEE.pbc3_ctrl_2.bits.EE_PBC3_SAT_SL);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_GAIN       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_CONF_GAIN       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_CONF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_EDGE_THR       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_THR);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_EDGE_SLOPE       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_SLOPE);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_LPF_GAIN       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_GAIN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_LUMA_MOD_EN       = %d, %d, %d", rLowerEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN, rSmoothEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN, rUpperEE.luma_ctrl_1.bits.EE_LUMA_MOD_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_LINK_EN       = %d, %d, %d", rLowerEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN, rSmoothEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN, rUpperEE.luma_slnk_ctrl.bits.EE_GLUT_LINK_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CE_SLMOD_EN       = %d, %d, %d", rLowerEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN, rSmoothEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN, rUpperEE.ce_sl_ctrl.bits.EE_CE_SLMOD_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_CBOOST_EN       = %d, %d, %d", rLowerEE.cboost_ctrl_1.bits.EE_CBOOST_EN, rSmoothEE.cboost_ctrl_1.bits.EE_CBOOST_EN, rUpperEE.cboost_ctrl_1.bits.EE_CBOOST_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC_EN       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC_EN, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC_EN, rUpperEE.pbc1_ctrl_0.bits.EE_PBC_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_EN       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_EN, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_EN, rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_EDS_EN       = %d, %d, %d", rLowerEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN, rSmoothEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN, rUpperEE.pbc1_ctrl_0.bits.EE_PBC1_EDS_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_EDGE_EN       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC1_LPF_EN       = %d, %d, %d", rLowerEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN, rSmoothEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN, rUpperEE.pbc1_ctrl_3.bits.EE_PBC1_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_EN       = %d, %d, %d", rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_EN, rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_EN, rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_EDS_EN       = %d, %d, %d", rLowerEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN, rSmoothEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN, rUpperEE.pbc2_ctrl_0.bits.EE_PBC2_EDS_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_EDGE_EN       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC2_LPF_EN       = %d, %d, %d", rLowerEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN, rSmoothEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN, rUpperEE.pbc2_ctrl_3.bits.EE_PBC2_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_EN       = %d, %d, %d", rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_EN, rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_EN, rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_EDS_EN       = %d, %d, %d", rLowerEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN, rSmoothEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN, rUpperEE.pbc3_ctrl_0.bits.EE_PBC3_EDS_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_EDGE_EN       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_EDGE_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_PBC3_LPF_EN       = %d, %d, %d", rLowerEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN, rSmoothEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN, rUpperEE.pbc3_ctrl_3.bits.EE_PBC3_LPF_EN);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_S1       = %d, %d, %d", rLowerEE.glut_ctrl_1.bits.EE_GLUT_S1, rSmoothEE.glut_ctrl_1.bits.EE_GLUT_S1, rUpperEE.glut_ctrl_1.bits.EE_GLUT_S1);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_S2       = %d, %d, %d", rLowerEE.glut_ctrl_2.bits.EE_GLUT_S2, rSmoothEE.glut_ctrl_2.bits.EE_GLUT_S2, rUpperEE.glut_ctrl_2.bits.EE_GLUT_S2);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_S3       = %d, %d, %d", rLowerEE.glut_ctrl_3.bits.EE_GLUT_S3, rSmoothEE.glut_ctrl_3.bits.EE_GLUT_S3, rUpperEE.glut_ctrl_3.bits.EE_GLUT_S3);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_S4       = %d, %d, %d", rLowerEE.glut_ctrl_4.bits.EE_GLUT_S4, rSmoothEE.glut_ctrl_4.bits.EE_GLUT_S4, rUpperEE.glut_ctrl_4.bits.EE_GLUT_S4);
    INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_S5       = %d, %d, %d", rLowerEE.glut_ctrl_5.bits.EE_GLUT_S5, rSmoothEE.glut_ctrl_5.bits.EE_GLUT_S5, rUpperEE.glut_ctrl_5.bits.EE_GLUT_S5);
	INTER_LOG_IF(bSmoothEEDebug, "[L,S,U]EE_GLUT_Y5       = %d, %d, %d", pre_EE_GLUT_Y5, EE_GLUT_Y5, pos_EE_GLUT_Y5);

}

MVOID Smooth_NR3D(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_NR3D_T const& rUpperNR3D,   // NR3D settings for upper ISO
                ISP_NVRAM_NR3D_T const& rLowerNR3D,   // NR3D settings for lower ISO
                ISP_NVRAM_NR3D_T& rSmoothNR3D)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_nr3d.enable", value, "0");
    MBOOL bSmoothNR3DDebug = atoi(value);

    INTER_LOG_IF(bSmoothNR3DDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_NR3D_flt_str_max       = rLowerNR3D.flt_config.bits.NR3D_flt_str_max;
    MINT32 pre_NR3D_q_nl       = rLowerNR3D.fb_info1.bits.NR3D_q_nl;
    MINT32 pre_NR3D_q_sp       = rLowerNR3D.fb_info1.bits.NR3D_q_sp;
    MINT32 pre_NR3D_blend_ratio_blky       = rLowerNR3D.flt_config.bits.NR3D_blend_ratio_blky;
    MINT32 pre_NR3D_blend_ratio_de       = rLowerNR3D.flt_config.bits.NR3D_blend_ratio_de;
    MINT32 pre_NR3D_blend_ratio_txtr       = rLowerNR3D.flt_config.bits.NR3D_blend_ratio_txtr;
    MINT32 pre_NR3D_blend_ratio_mv       = rLowerNR3D.flt_config.bits.NR3D_blend_ratio_mv;
    MINT32 pre_NR3D_bdi_thr       = rLowerNR3D.thr_1.bits.NR3D_bdi_thr;
    MINT32 pre_NR3D_mv_pen_w       = rLowerNR3D.thr_1.bits.NR3D_mv_pen_w;
    MINT32 pre_NR3D_mv_pen_thr       = rLowerNR3D.thr_1.bits.NR3D_mv_pen_thr;
    MINT32 pre_NR3D_small_sad_thr       = rLowerNR3D.thr_1.bits.NR3D_small_sad_thr;
    MINT32 pre_NR3D_q_blky_y0       = rLowerNR3D.curve_1.bits.NR3D_q_blky_y0;
    MINT32 pre_NR3D_q_blky_y1       = rLowerNR3D.curve_1.bits.NR3D_q_blky_y1;
    MINT32 pre_NR3D_q_blky_y2       = rLowerNR3D.curve_1.bits.NR3D_q_blky_y2;
    MINT32 pre_NR3D_q_blky_y3       = rLowerNR3D.curve_1.bits.NR3D_q_blky_y3;
    MINT32 pre_NR3D_q_blky_y4       = rLowerNR3D.curve_1.bits.NR3D_q_blky_y4;
    MINT32 pre_NR3D_q_blky_y5       = rLowerNR3D.curve_2.bits.NR3D_q_blky_y5;
    MINT32 pre_NR3D_q_blky_y6       = rLowerNR3D.curve_2.bits.NR3D_q_blky_y6;
    MINT32 pre_NR3D_q_blky_y7       = rLowerNR3D.curve_2.bits.NR3D_q_blky_y7;
    MINT32 pre_NR3D_q_blkc_y0       = rLowerNR3D.curve_2.bits.NR3D_q_blkc_y0;
    MINT32 pre_NR3D_q_blkc_y1       = rLowerNR3D.curve_2.bits.NR3D_q_blkc_y1;
    MINT32 pre_NR3D_q_blkc_y2       = rLowerNR3D.curve_3.bits.NR3D_q_blkc_y2;
    MINT32 pre_NR3D_q_blkc_y3       = rLowerNR3D.curve_3.bits.NR3D_q_blkc_y3;
    MINT32 pre_NR3D_q_blkc_y4       = rLowerNR3D.curve_3.bits.NR3D_q_blkc_y4;
    MINT32 pre_NR3D_q_blkc_y5       = rLowerNR3D.curve_3.bits.NR3D_q_blkc_y5;
    MINT32 pre_NR3D_q_blkc_y6       = rLowerNR3D.curve_3.bits.NR3D_q_blkc_y6;
    MINT32 pre_NR3D_q_blkc_y7       = rLowerNR3D.curve_4.bits.NR3D_q_blkc_y7;
    MINT32 pre_NR3D_q_detxtr_lvl_y0       = rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0;
    MINT32 pre_NR3D_q_detxtr_lvl_y1       = rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1;
    MINT32 pre_NR3D_q_detxtr_lvl_y2       = rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2;
    MINT32 pre_NR3D_q_detxtr_lvl_y3       = rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3;
    MINT32 pre_NR3D_q_detxtr_lvl_y4       = rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4;
    MINT32 pre_NR3D_q_detxtr_lvl_y5       = rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5;
    MINT32 pre_NR3D_q_detxtr_lvl_y6       = rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6;
    MINT32 pre_NR3D_q_detxtr_lvl_y7       = rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7;
    MINT32 pre_NR3D_q_de1_base_y0       = rLowerNR3D.curve_5.bits.NR3D_q_de1_base_y0;
    MINT32 pre_NR3D_q_de1_base_y1       = rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y1;
    MINT32 pre_NR3D_q_de1_base_y2       = rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y2;
    MINT32 pre_NR3D_q_de1_base_y3       = rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y3;
    MINT32 pre_NR3D_q_de1_base_y4       = rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y4;
    MINT32 pre_NR3D_q_de1_base_y5       = rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y5;
    MINT32 pre_NR3D_q_de1_base_y6       = rLowerNR3D.curve_7.bits.NR3D_q_de1_base_y6;
    MINT32 pre_NR3D_q_de1_base_y7       = rLowerNR3D.curve_7.bits.NR3D_q_de1_base_y7;
    MINT32 pre_NR3D_q_de2txtr_base_y0       = rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0;
    MINT32 pre_NR3D_q_de2txtr_base_y1       = rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1;
    MINT32 pre_NR3D_q_de2txtr_base_y2       = rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2;
    MINT32 pre_NR3D_q_de2txtr_base_y3       = rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3;
    MINT32 pre_NR3D_q_de2txtr_base_y4       = rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4;
    MINT32 pre_NR3D_q_de2txtr_base_y5       = rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5;
    MINT32 pre_NR3D_q_de2txtr_base_y6       = rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6;
    MINT32 pre_NR3D_q_de2txtr_base_y7       = rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7;
    MINT32 pre_NR3D_q_mv_y0       = rLowerNR3D.curve_9.bits.NR3D_q_mv_y0;
    MINT32 pre_NR3D_q_mv_y1       = rLowerNR3D.curve_9.bits.NR3D_q_mv_y1;
    MINT32 pre_NR3D_q_mv_y2       = rLowerNR3D.curve_9.bits.NR3D_q_mv_y2;
    MINT32 pre_NR3D_q_mv_y3       = rLowerNR3D.curve_9.bits.NR3D_q_mv_y3;
    MINT32 pre_NR3D_q_mv_y4       = rLowerNR3D.curve_9.bits.NR3D_q_mv_y4;
    MINT32 pre_NR3D_q_mv_y5       = rLowerNR3D.curve_10.bits.NR3D_q_mv_y5;
    MINT32 pre_NR3D_q_mv_y6       = rLowerNR3D.curve_10.bits.NR3D_q_mv_y6;
    MINT32 pre_NR3D_q_mv_y7       = rLowerNR3D.curve_10.bits.NR3D_q_mv_y7;
    MINT32 pre_NR3D_q_wvar_y0       = rLowerNR3D.curve_10.bits.NR3D_q_wvar_y0;
    MINT32 pre_NR3D_q_wvar_y1       = rLowerNR3D.curve_10.bits.NR3D_q_wvar_y1;
    MINT32 pre_NR3D_q_wvar_y2       = rLowerNR3D.curve_11.bits.NR3D_q_wvar_y2;
    MINT32 pre_NR3D_q_wvar_y3       = rLowerNR3D.curve_11.bits.NR3D_q_wvar_y3;
    MINT32 pre_NR3D_q_wvar_y4       = rLowerNR3D.curve_11.bits.NR3D_q_wvar_y4;
    MINT32 pre_NR3D_q_wvar_y5       = rLowerNR3D.curve_11.bits.NR3D_q_wvar_y5;
    MINT32 pre_NR3D_q_wvar_y6       = rLowerNR3D.curve_11.bits.NR3D_q_wvar_y6;
    MINT32 pre_NR3D_q_wvar_y7       = rLowerNR3D.curve_12.bits.NR3D_q_wvar_y7;
    MINT32 pre_NR3D_q_wsm_y0       = rLowerNR3D.curve_12.bits.NR3D_q_wsm_y0;
    MINT32 pre_NR3D_q_wsm_y1       = rLowerNR3D.curve_12.bits.NR3D_q_wsm_y1;
    MINT32 pre_NR3D_q_wsm_y2       = rLowerNR3D.curve_12.bits.NR3D_q_wsm_y2;
    MINT32 pre_NR3D_q_wsm_y3       = rLowerNR3D.curve_12.bits.NR3D_q_wsm_y3;
    MINT32 pre_NR3D_q_wsm_y4       = rLowerNR3D.curve_13.bits.NR3D_q_wsm_y4;
    MINT32 pre_NR3D_q_wsm_y5       = rLowerNR3D.curve_13.bits.NR3D_q_wsm_y5;
    MINT32 pre_NR3D_q_wsm_y6       = rLowerNR3D.curve_13.bits.NR3D_q_wsm_y6;
    MINT32 pre_NR3D_q_wsm_y7       = rLowerNR3D.curve_13.bits.NR3D_q_wsm_y7;
    MINT32 pre_NR3D_q_sdl_y0       = rLowerNR3D.curve_14.bits.NR3D_q_sdl_y0;
    MINT32 pre_NR3D_q_sdl_y1       = rLowerNR3D.curve_14.bits.NR3D_q_sdl_y1;
    MINT32 pre_NR3D_q_sdl_y2       = rLowerNR3D.curve_14.bits.NR3D_q_sdl_y2;
    MINT32 pre_NR3D_q_sdl_y3       = rLowerNR3D.curve_14.bits.NR3D_q_sdl_y3;
    MINT32 pre_NR3D_q_sdl_y4       = rLowerNR3D.curve_14.bits.NR3D_q_sdl_y4;
    MINT32 pre_NR3D_q_sdl_y5       = rLowerNR3D.curve_15.bits.NR3D_q_sdl_y5;
    MINT32 pre_NR3D_q_sdl_y6       = rLowerNR3D.curve_15.bits.NR3D_q_sdl_y6;
    MINT32 pre_NR3D_q_sdl_y7       = rLowerNR3D.curve_15.bits.NR3D_q_sdl_y7;
    MINT32 pre_NR3D_q_sdl_y8       = rLowerNR3D.curve_15.bits.NR3D_q_sdl_y8;
    MINT32 pre_NR3D_r2c_val1       = rLowerNR3D.r2c_1.bits.NR3D_r2c_val1;
    MINT32 pre_NR3D_r2c_val2       = rLowerNR3D.r2c_1.bits.NR3D_r2c_val2;
    MINT32 pre_NR3D_r2c_val3       = rLowerNR3D.r2c_1.bits.NR3D_r2c_val3;
    MINT32 pre_NR3D_r2c_val4       = rLowerNR3D.r2c_1.bits.NR3D_r2c_val4;
    MINT32 pre_NR3D_r2cenc       = rLowerNR3D.r2c_1.bits.NR3D_r2cenc;
    MINT32 pre_NR3D_r2c_txtr_thr1       = rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1;
    MINT32 pre_NR3D_r2c_txtr_thr2       = rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2;
    MINT32 pre_NR3D_r2c_txtr_thr3       = rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3;
    MINT32 pre_NR3D_r2c_txtr_thr4       = rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4;
    MINT32 pre_NR3D_r2c_txtr_throff       = rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_throff;
    MINT32 pre_NR3D_q_snr_tpre_y0       = rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0;
    MINT32 pre_NR3D_q_snr_tpre_y1       = rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1;
    MINT32 pre_NR3D_q_snr_tpre_y2       = rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2;
    MINT32 pre_NR3D_q_snr_tpre_y3       = rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3;
    MINT32 pre_NR3D_q_snr_tpre_y4       = rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4;
    MINT32 pre_NR3D_q_snr_tpre_y5       = rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5;
    MINT32 pre_NR3D_q_snr_tpre_y6       = rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6;
    MINT32 pre_NR3D_q_snr_tpre_y7       = rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7;
    MINT32 pre_NR3D_q_snr_tpre_y8       = rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8;
    MINT32 pre_NR3D_q_snr_txtr_y0       = rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0;
    MINT32 pre_NR3D_q_snr_txtr_y1       = rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1;
    MINT32 pre_NR3D_q_snr_txtr_y2       = rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2;
    MINT32 pre_NR3D_q_snr_txtr_y3       = rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3;
    MINT32 pre_NR3D_q_snr_txtr_y4       = rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4;
    MINT32 pre_NR3D_q_snr_txtr_y5       = rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5;
    MINT32 pre_NR3D_q_snr_txtr_y6       = rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6;
    MINT32 pre_NR3D_q_snr_txtr_y7       = rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7;
    MINT32 pre_NR3D_q_snr_luma_y0       = rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0;
    MINT32 pre_NR3D_q_snr_luma_y1       = rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1;
    MINT32 pre_NR3D_q_snr_luma_y2       = rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2;
    MINT32 pre_NR3D_q_snr_luma_y3       = rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3;
    MINT32 pre_NR3D_q_snr_luma_y4       = rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4;
    MINT32 pre_NR3D_q_snr_luma_y5       = rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5;
    MINT32 pre_NR3D_q_snr_luma_y6       = rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6;
    MINT32 pre_NR3D_q_snr_luma_y7       = rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7;
    MINT32 pre_NR3D_q_snr_luma_y8       = rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8;
    MINT32 pre_NR3D_q_snr_tpst_y0       = rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0;
    MINT32 pre_NR3D_q_snr_tpst_y1       = rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1;
    MINT32 pre_NR3D_q_snr_tpst_y2       = rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2;
    MINT32 pre_NR3D_q_snr_tpst_y3       = rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3;
    MINT32 pre_NR3D_q_snr_tpst_y4       = rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4;
    MINT32 pre_NR3D_q_snr_tpst_y5       = rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5;
    MINT32 pre_NR3D_q_snr_tpst_y6       = rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6;
    MINT32 pre_NR3D_q_snr_tpst_y7       = rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7;
    MINT32 pre_NR3D_q_snr_tpst_y8       = rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8;
    MINT32 pre_NR3D_snr_tpre_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_tpre_en;
    MINT32 pre_NR3D_snr_txtr_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_txtr_en;
    MINT32 pre_NR3D_snr_luma_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_luma_en;
    MINT32 pre_NR3D_snr_blend_maxmin       = rLowerNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin;
    MINT32 pre_NR3D_blkvar_tolerance       = rLowerNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance;
    MINT32 pre_NR3D_centvar_tolerance       = rLowerNR3D.snr_thr_2.bits.NR3D_centvar_tolerance;
    MINT32 pre_NR3D_tolerance_clip       = rLowerNR3D.snr_thr_2.bits.NR3D_tolerance_clip;
    MINT32 pre_NR3D_sad_invwei       = rLowerNR3D.snr_thr_3.bits.NR3D_sad_invwei;
    MINT32 pre_NR3D_cent_cand_wei       = rLowerNR3D.snr_thr_3.bits.NR3D_cent_cand_wei;
    MINT32 pre_NR3D_hfrr_hf_ratio       = rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio;
    MINT32 pre_NR3D_hfrr_mf_ratio       = rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio;
    MINT32 pre_NR3D_add_curr_ratio       = rLowerNR3D.snr_thr_4.bits.NR3D_add_curr_ratio;
    MINT32 pre_NR3D_hfrr_post2d_hf_ratio       = rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio;
    MINT32 pre_NR3D_hfrr_post2d_mf_ratio       = rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio;
    MINT32 pre_NR3D_nr3d_tile_edge       = rLowerNR3D.on_con.bits.NR3D_nr3d_tile_edge;
    MINT32 pre_NR3D_sl2_off       = rLowerNR3D.on_con.bits.NR3D_sl2_off;
    MINT32 pre_NR3D_on_en       = rLowerNR3D.on_con.bits.NR3D_on_en;
    MINT32 pre_NR3D_tnr_y_en       = rLowerNR3D.tnr_enable.bits.NR3D_tnr_y_en;
    MINT32 pre_NR3D_tnr_c_en       = rLowerNR3D.tnr_enable.bits.NR3D_tnr_c_en;
    MINT32 pre_NR3D_en_cycr       = rLowerNR3D.flt_config.bits.NR3D_en_cycr;
    MINT32 pre_NR3D_en_ccr       = rLowerNR3D.flt_config.bits.NR3D_en_ccr;
    MINT32 pre_NR3D_snr_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_en;
    MINT32 pre_NR3D_snr_pre2d_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_pre2d_en;
    MINT32 pre_NR3D_snr_post2d_en       = rLowerNR3D.snr_control_1.bits.NR3D_snr_post2d_en;
    MINT32 pos_NR3D_flt_str_max       = rUpperNR3D.flt_config.bits.NR3D_flt_str_max;
    MINT32 pos_NR3D_q_nl       = rUpperNR3D.fb_info1.bits.NR3D_q_nl;
    MINT32 pos_NR3D_q_sp       = rUpperNR3D.fb_info1.bits.NR3D_q_sp;
    MINT32 pos_NR3D_blend_ratio_blky       = rUpperNR3D.flt_config.bits.NR3D_blend_ratio_blky;
    MINT32 pos_NR3D_blend_ratio_de       = rUpperNR3D.flt_config.bits.NR3D_blend_ratio_de;
    MINT32 pos_NR3D_blend_ratio_txtr       = rUpperNR3D.flt_config.bits.NR3D_blend_ratio_txtr;
    MINT32 pos_NR3D_blend_ratio_mv       = rUpperNR3D.flt_config.bits.NR3D_blend_ratio_mv;
    MINT32 pos_NR3D_bdi_thr       = rUpperNR3D.thr_1.bits.NR3D_bdi_thr;
    MINT32 pos_NR3D_mv_pen_w       = rUpperNR3D.thr_1.bits.NR3D_mv_pen_w;
    MINT32 pos_NR3D_mv_pen_thr       = rUpperNR3D.thr_1.bits.NR3D_mv_pen_thr;
    MINT32 pos_NR3D_small_sad_thr       = rUpperNR3D.thr_1.bits.NR3D_small_sad_thr;
    MINT32 pos_NR3D_q_blky_y0       = rUpperNR3D.curve_1.bits.NR3D_q_blky_y0;
    MINT32 pos_NR3D_q_blky_y1       = rUpperNR3D.curve_1.bits.NR3D_q_blky_y1;
    MINT32 pos_NR3D_q_blky_y2       = rUpperNR3D.curve_1.bits.NR3D_q_blky_y2;
    MINT32 pos_NR3D_q_blky_y3       = rUpperNR3D.curve_1.bits.NR3D_q_blky_y3;
    MINT32 pos_NR3D_q_blky_y4       = rUpperNR3D.curve_1.bits.NR3D_q_blky_y4;
    MINT32 pos_NR3D_q_blky_y5       = rUpperNR3D.curve_2.bits.NR3D_q_blky_y5;
    MINT32 pos_NR3D_q_blky_y6       = rUpperNR3D.curve_2.bits.NR3D_q_blky_y6;
    MINT32 pos_NR3D_q_blky_y7       = rUpperNR3D.curve_2.bits.NR3D_q_blky_y7;
    MINT32 pos_NR3D_q_blkc_y0       = rUpperNR3D.curve_2.bits.NR3D_q_blkc_y0;
    MINT32 pos_NR3D_q_blkc_y1       = rUpperNR3D.curve_2.bits.NR3D_q_blkc_y1;
    MINT32 pos_NR3D_q_blkc_y2       = rUpperNR3D.curve_3.bits.NR3D_q_blkc_y2;
    MINT32 pos_NR3D_q_blkc_y3       = rUpperNR3D.curve_3.bits.NR3D_q_blkc_y3;
    MINT32 pos_NR3D_q_blkc_y4       = rUpperNR3D.curve_3.bits.NR3D_q_blkc_y4;
    MINT32 pos_NR3D_q_blkc_y5       = rUpperNR3D.curve_3.bits.NR3D_q_blkc_y5;
    MINT32 pos_NR3D_q_blkc_y6       = rUpperNR3D.curve_3.bits.NR3D_q_blkc_y6;
    MINT32 pos_NR3D_q_blkc_y7       = rUpperNR3D.curve_4.bits.NR3D_q_blkc_y7;
    MINT32 pos_NR3D_q_detxtr_lvl_y0       = rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0;
    MINT32 pos_NR3D_q_detxtr_lvl_y1       = rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1;
    MINT32 pos_NR3D_q_detxtr_lvl_y2       = rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2;
    MINT32 pos_NR3D_q_detxtr_lvl_y3       = rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3;
    MINT32 pos_NR3D_q_detxtr_lvl_y4       = rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4;
    MINT32 pos_NR3D_q_detxtr_lvl_y5       = rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5;
    MINT32 pos_NR3D_q_detxtr_lvl_y6       = rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6;
    MINT32 pos_NR3D_q_detxtr_lvl_y7       = rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7;
    MINT32 pos_NR3D_q_de1_base_y0       = rUpperNR3D.curve_5.bits.NR3D_q_de1_base_y0;
    MINT32 pos_NR3D_q_de1_base_y1       = rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y1;
    MINT32 pos_NR3D_q_de1_base_y2       = rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y2;
    MINT32 pos_NR3D_q_de1_base_y3       = rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y3;
    MINT32 pos_NR3D_q_de1_base_y4       = rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y4;
    MINT32 pos_NR3D_q_de1_base_y5       = rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y5;
    MINT32 pos_NR3D_q_de1_base_y6       = rUpperNR3D.curve_7.bits.NR3D_q_de1_base_y6;
    MINT32 pos_NR3D_q_de1_base_y7       = rUpperNR3D.curve_7.bits.NR3D_q_de1_base_y7;
    MINT32 pos_NR3D_q_de2txtr_base_y0       = rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0;
    MINT32 pos_NR3D_q_de2txtr_base_y1       = rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1;
    MINT32 pos_NR3D_q_de2txtr_base_y2       = rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2;
    MINT32 pos_NR3D_q_de2txtr_base_y3       = rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3;
    MINT32 pos_NR3D_q_de2txtr_base_y4       = rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4;
    MINT32 pos_NR3D_q_de2txtr_base_y5       = rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5;
    MINT32 pos_NR3D_q_de2txtr_base_y6       = rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6;
    MINT32 pos_NR3D_q_de2txtr_base_y7       = rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7;
    MINT32 pos_NR3D_q_mv_y0       = rUpperNR3D.curve_9.bits.NR3D_q_mv_y0;
    MINT32 pos_NR3D_q_mv_y1       = rUpperNR3D.curve_9.bits.NR3D_q_mv_y1;
    MINT32 pos_NR3D_q_mv_y2       = rUpperNR3D.curve_9.bits.NR3D_q_mv_y2;
    MINT32 pos_NR3D_q_mv_y3       = rUpperNR3D.curve_9.bits.NR3D_q_mv_y3;
    MINT32 pos_NR3D_q_mv_y4       = rUpperNR3D.curve_9.bits.NR3D_q_mv_y4;
    MINT32 pos_NR3D_q_mv_y5       = rUpperNR3D.curve_10.bits.NR3D_q_mv_y5;
    MINT32 pos_NR3D_q_mv_y6       = rUpperNR3D.curve_10.bits.NR3D_q_mv_y6;
    MINT32 pos_NR3D_q_mv_y7       = rUpperNR3D.curve_10.bits.NR3D_q_mv_y7;
    MINT32 pos_NR3D_q_wvar_y0       = rUpperNR3D.curve_10.bits.NR3D_q_wvar_y0;
    MINT32 pos_NR3D_q_wvar_y1       = rUpperNR3D.curve_10.bits.NR3D_q_wvar_y1;
    MINT32 pos_NR3D_q_wvar_y2       = rUpperNR3D.curve_11.bits.NR3D_q_wvar_y2;
    MINT32 pos_NR3D_q_wvar_y3       = rUpperNR3D.curve_11.bits.NR3D_q_wvar_y3;
    MINT32 pos_NR3D_q_wvar_y4       = rUpperNR3D.curve_11.bits.NR3D_q_wvar_y4;
    MINT32 pos_NR3D_q_wvar_y5       = rUpperNR3D.curve_11.bits.NR3D_q_wvar_y5;
    MINT32 pos_NR3D_q_wvar_y6       = rUpperNR3D.curve_11.bits.NR3D_q_wvar_y6;
    MINT32 pos_NR3D_q_wvar_y7       = rUpperNR3D.curve_12.bits.NR3D_q_wvar_y7;
    MINT32 pos_NR3D_q_wsm_y0       = rUpperNR3D.curve_12.bits.NR3D_q_wsm_y0;
    MINT32 pos_NR3D_q_wsm_y1       = rUpperNR3D.curve_12.bits.NR3D_q_wsm_y1;
    MINT32 pos_NR3D_q_wsm_y2       = rUpperNR3D.curve_12.bits.NR3D_q_wsm_y2;
    MINT32 pos_NR3D_q_wsm_y3       = rUpperNR3D.curve_12.bits.NR3D_q_wsm_y3;
    MINT32 pos_NR3D_q_wsm_y4       = rUpperNR3D.curve_13.bits.NR3D_q_wsm_y4;
    MINT32 pos_NR3D_q_wsm_y5       = rUpperNR3D.curve_13.bits.NR3D_q_wsm_y5;
    MINT32 pos_NR3D_q_wsm_y6       = rUpperNR3D.curve_13.bits.NR3D_q_wsm_y6;
    MINT32 pos_NR3D_q_wsm_y7       = rUpperNR3D.curve_13.bits.NR3D_q_wsm_y7;
    MINT32 pos_NR3D_q_sdl_y0       = rUpperNR3D.curve_14.bits.NR3D_q_sdl_y0;
    MINT32 pos_NR3D_q_sdl_y1       = rUpperNR3D.curve_14.bits.NR3D_q_sdl_y1;
    MINT32 pos_NR3D_q_sdl_y2       = rUpperNR3D.curve_14.bits.NR3D_q_sdl_y2;
    MINT32 pos_NR3D_q_sdl_y3       = rUpperNR3D.curve_14.bits.NR3D_q_sdl_y3;
    MINT32 pos_NR3D_q_sdl_y4       = rUpperNR3D.curve_14.bits.NR3D_q_sdl_y4;
    MINT32 pos_NR3D_q_sdl_y5       = rUpperNR3D.curve_15.bits.NR3D_q_sdl_y5;
    MINT32 pos_NR3D_q_sdl_y6       = rUpperNR3D.curve_15.bits.NR3D_q_sdl_y6;
    MINT32 pos_NR3D_q_sdl_y7       = rUpperNR3D.curve_15.bits.NR3D_q_sdl_y7;
    MINT32 pos_NR3D_q_sdl_y8       = rUpperNR3D.curve_15.bits.NR3D_q_sdl_y8;
    MINT32 pos_NR3D_r2c_val1       = rUpperNR3D.r2c_1.bits.NR3D_r2c_val1;
    MINT32 pos_NR3D_r2c_val2       = rUpperNR3D.r2c_1.bits.NR3D_r2c_val2;
    MINT32 pos_NR3D_r2c_val3       = rUpperNR3D.r2c_1.bits.NR3D_r2c_val3;
    MINT32 pos_NR3D_r2c_val4       = rUpperNR3D.r2c_1.bits.NR3D_r2c_val4;
    MINT32 pos_NR3D_r2cenc       = rUpperNR3D.r2c_1.bits.NR3D_r2cenc;
    MINT32 pos_NR3D_r2c_txtr_thr1       = rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1;
    MINT32 pos_NR3D_r2c_txtr_thr2       = rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2;
    MINT32 pos_NR3D_r2c_txtr_thr3       = rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3;
    MINT32 pos_NR3D_r2c_txtr_thr4       = rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4;
    MINT32 pos_NR3D_r2c_txtr_throff       = rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_throff;
    MINT32 pos_NR3D_q_snr_tpre_y0       = rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0;
    MINT32 pos_NR3D_q_snr_tpre_y1       = rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1;
    MINT32 pos_NR3D_q_snr_tpre_y2       = rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2;
    MINT32 pos_NR3D_q_snr_tpre_y3       = rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3;
    MINT32 pos_NR3D_q_snr_tpre_y4       = rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4;
    MINT32 pos_NR3D_q_snr_tpre_y5       = rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5;
    MINT32 pos_NR3D_q_snr_tpre_y6       = rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6;
    MINT32 pos_NR3D_q_snr_tpre_y7       = rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7;
    MINT32 pos_NR3D_q_snr_tpre_y8       = rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8;
    MINT32 pos_NR3D_q_snr_txtr_y0       = rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0;
    MINT32 pos_NR3D_q_snr_txtr_y1       = rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1;
    MINT32 pos_NR3D_q_snr_txtr_y2       = rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2;
    MINT32 pos_NR3D_q_snr_txtr_y3       = rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3;
    MINT32 pos_NR3D_q_snr_txtr_y4       = rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4;
    MINT32 pos_NR3D_q_snr_txtr_y5       = rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5;
    MINT32 pos_NR3D_q_snr_txtr_y6       = rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6;
    MINT32 pos_NR3D_q_snr_txtr_y7       = rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7;
    MINT32 pos_NR3D_q_snr_luma_y0       = rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0;
    MINT32 pos_NR3D_q_snr_luma_y1       = rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1;
    MINT32 pos_NR3D_q_snr_luma_y2       = rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2;
    MINT32 pos_NR3D_q_snr_luma_y3       = rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3;
    MINT32 pos_NR3D_q_snr_luma_y4       = rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4;
    MINT32 pos_NR3D_q_snr_luma_y5       = rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5;
    MINT32 pos_NR3D_q_snr_luma_y6       = rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6;
    MINT32 pos_NR3D_q_snr_luma_y7       = rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7;
    MINT32 pos_NR3D_q_snr_luma_y8       = rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8;
    MINT32 pos_NR3D_q_snr_tpst_y0       = rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0;
    MINT32 pos_NR3D_q_snr_tpst_y1       = rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1;
    MINT32 pos_NR3D_q_snr_tpst_y2       = rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2;
    MINT32 pos_NR3D_q_snr_tpst_y3       = rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3;
    MINT32 pos_NR3D_q_snr_tpst_y4       = rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4;
    MINT32 pos_NR3D_q_snr_tpst_y5       = rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5;
    MINT32 pos_NR3D_q_snr_tpst_y6       = rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6;
    MINT32 pos_NR3D_q_snr_tpst_y7       = rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7;
    MINT32 pos_NR3D_q_snr_tpst_y8       = rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8;
    MINT32 pos_NR3D_snr_tpre_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_tpre_en;
    MINT32 pos_NR3D_snr_txtr_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_txtr_en;
    MINT32 pos_NR3D_snr_luma_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_luma_en;
    MINT32 pos_NR3D_snr_blend_maxmin       = rUpperNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin;
    MINT32 pos_NR3D_blkvar_tolerance       = rUpperNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance;
    MINT32 pos_NR3D_centvar_tolerance       = rUpperNR3D.snr_thr_2.bits.NR3D_centvar_tolerance;
    MINT32 pos_NR3D_tolerance_clip       = rUpperNR3D.snr_thr_2.bits.NR3D_tolerance_clip;
    MINT32 pos_NR3D_sad_invwei       = rUpperNR3D.snr_thr_3.bits.NR3D_sad_invwei;
    MINT32 pos_NR3D_cent_cand_wei       = rUpperNR3D.snr_thr_3.bits.NR3D_cent_cand_wei;
    MINT32 pos_NR3D_hfrr_hf_ratio       = rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio;
    MINT32 pos_NR3D_hfrr_mf_ratio       = rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio;
    MINT32 pos_NR3D_add_curr_ratio       = rUpperNR3D.snr_thr_4.bits.NR3D_add_curr_ratio;
    MINT32 pos_NR3D_hfrr_post2d_hf_ratio       = rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio;
    MINT32 pos_NR3D_hfrr_post2d_mf_ratio       = rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio;
    MINT32 pos_NR3D_nr3d_tile_edge       = rUpperNR3D.on_con.bits.NR3D_nr3d_tile_edge;
    MINT32 pos_NR3D_sl2_off       = rUpperNR3D.on_con.bits.NR3D_sl2_off;
    MINT32 pos_NR3D_on_en       = rUpperNR3D.on_con.bits.NR3D_on_en;
    MINT32 pos_NR3D_tnr_y_en       = rUpperNR3D.tnr_enable.bits.NR3D_tnr_y_en;
    MINT32 pos_NR3D_tnr_c_en       = rUpperNR3D.tnr_enable.bits.NR3D_tnr_c_en;
    MINT32 pos_NR3D_en_cycr       = rUpperNR3D.flt_config.bits.NR3D_en_cycr;
    MINT32 pos_NR3D_en_ccr       = rUpperNR3D.flt_config.bits.NR3D_en_ccr;
    MINT32 pos_NR3D_snr_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_en;
    MINT32 pos_NR3D_snr_pre2d_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_pre2d_en;
    MINT32 pos_NR3D_snr_post2d_en       = rUpperNR3D.snr_control_1.bits.NR3D_snr_post2d_en;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 NR3D_flt_str_max       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_flt_str_max, pos_NR3D_flt_str_max, 0);
    MINT32 NR3D_q_nl       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_nl, pos_NR3D_q_nl, 0);
    MINT32 NR3D_q_sp       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sp, pos_NR3D_q_sp, 0);
    MINT32 NR3D_blend_ratio_blky       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_blend_ratio_blky, pos_NR3D_blend_ratio_blky, 0);
    MINT32 NR3D_blend_ratio_de       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_blend_ratio_de, pos_NR3D_blend_ratio_de, 0);
    MINT32 NR3D_blend_ratio_txtr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_blend_ratio_txtr, pos_NR3D_blend_ratio_txtr, 0);
    MINT32 NR3D_blend_ratio_mv       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_blend_ratio_mv, pos_NR3D_blend_ratio_mv, 0);
    MINT32 NR3D_bdi_thr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_bdi_thr, pos_NR3D_bdi_thr, 0);
    MINT32 NR3D_mv_pen_w       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_mv_pen_w, pos_NR3D_mv_pen_w, 0);
    MINT32 NR3D_mv_pen_thr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_mv_pen_thr, pos_NR3D_mv_pen_thr, 0);
    MINT32 NR3D_small_sad_thr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_small_sad_thr, pos_NR3D_small_sad_thr, 0);
    MINT32 NR3D_q_blky_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y0, pos_NR3D_q_blky_y0, 0);
    MINT32 NR3D_q_blky_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y1, pos_NR3D_q_blky_y1, 0);
    MINT32 NR3D_q_blky_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y2, pos_NR3D_q_blky_y2, 0);
    MINT32 NR3D_q_blky_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y3, pos_NR3D_q_blky_y3, 0);
    MINT32 NR3D_q_blky_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y4, pos_NR3D_q_blky_y4, 0);
    MINT32 NR3D_q_blky_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y5, pos_NR3D_q_blky_y5, 0);
    MINT32 NR3D_q_blky_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y6, pos_NR3D_q_blky_y6, 0);
    MINT32 NR3D_q_blky_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blky_y7, pos_NR3D_q_blky_y7, 0);
    MINT32 NR3D_q_blkc_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y0, pos_NR3D_q_blkc_y0, 0);
    MINT32 NR3D_q_blkc_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y1, pos_NR3D_q_blkc_y1, 0);
    MINT32 NR3D_q_blkc_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y2, pos_NR3D_q_blkc_y2, 0);
    MINT32 NR3D_q_blkc_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y3, pos_NR3D_q_blkc_y3, 0);
    MINT32 NR3D_q_blkc_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y4, pos_NR3D_q_blkc_y4, 0);
    MINT32 NR3D_q_blkc_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y5, pos_NR3D_q_blkc_y5, 0);
    MINT32 NR3D_q_blkc_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y6, pos_NR3D_q_blkc_y6, 0);
    MINT32 NR3D_q_blkc_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_blkc_y7, pos_NR3D_q_blkc_y7, 0);
    MINT32 NR3D_q_detxtr_lvl_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y0, pos_NR3D_q_detxtr_lvl_y0, 0);
    MINT32 NR3D_q_detxtr_lvl_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y1, pos_NR3D_q_detxtr_lvl_y1, 0);
    MINT32 NR3D_q_detxtr_lvl_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y2, pos_NR3D_q_detxtr_lvl_y2, 0);
    MINT32 NR3D_q_detxtr_lvl_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y3, pos_NR3D_q_detxtr_lvl_y3, 0);
    MINT32 NR3D_q_detxtr_lvl_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y4, pos_NR3D_q_detxtr_lvl_y4, 0);
    MINT32 NR3D_q_detxtr_lvl_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y5, pos_NR3D_q_detxtr_lvl_y5, 0);
    MINT32 NR3D_q_detxtr_lvl_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y6, pos_NR3D_q_detxtr_lvl_y6, 0);
    MINT32 NR3D_q_detxtr_lvl_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_detxtr_lvl_y7, pos_NR3D_q_detxtr_lvl_y7, 0);
    MINT32 NR3D_q_de1_base_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y0, pos_NR3D_q_de1_base_y0, 0);
    MINT32 NR3D_q_de1_base_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y1, pos_NR3D_q_de1_base_y1, 0);
    MINT32 NR3D_q_de1_base_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y2, pos_NR3D_q_de1_base_y2, 0);
    MINT32 NR3D_q_de1_base_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y3, pos_NR3D_q_de1_base_y3, 0);
    MINT32 NR3D_q_de1_base_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y4, pos_NR3D_q_de1_base_y4, 0);
    MINT32 NR3D_q_de1_base_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y5, pos_NR3D_q_de1_base_y5, 0);
    MINT32 NR3D_q_de1_base_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y6, pos_NR3D_q_de1_base_y6, 0);
    MINT32 NR3D_q_de1_base_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de1_base_y7, pos_NR3D_q_de1_base_y7, 0);
    MINT32 NR3D_q_de2txtr_base_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y0, pos_NR3D_q_de2txtr_base_y0, 0);
    MINT32 NR3D_q_de2txtr_base_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y1, pos_NR3D_q_de2txtr_base_y1, 0);
    MINT32 NR3D_q_de2txtr_base_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y2, pos_NR3D_q_de2txtr_base_y2, 0);
    MINT32 NR3D_q_de2txtr_base_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y3, pos_NR3D_q_de2txtr_base_y3, 0);
    MINT32 NR3D_q_de2txtr_base_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y4, pos_NR3D_q_de2txtr_base_y4, 0);
    MINT32 NR3D_q_de2txtr_base_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y5, pos_NR3D_q_de2txtr_base_y5, 0);
    MINT32 NR3D_q_de2txtr_base_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y6, pos_NR3D_q_de2txtr_base_y6, 0);
    MINT32 NR3D_q_de2txtr_base_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_de2txtr_base_y7, pos_NR3D_q_de2txtr_base_y7, 0);
    MINT32 NR3D_q_mv_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y0, pos_NR3D_q_mv_y0, 0);
    MINT32 NR3D_q_mv_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y1, pos_NR3D_q_mv_y1, 0);
    MINT32 NR3D_q_mv_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y2, pos_NR3D_q_mv_y2, 0);
    MINT32 NR3D_q_mv_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y3, pos_NR3D_q_mv_y3, 0);
    MINT32 NR3D_q_mv_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y4, pos_NR3D_q_mv_y4, 0);
    MINT32 NR3D_q_mv_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y5, pos_NR3D_q_mv_y5, 0);
    MINT32 NR3D_q_mv_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y6, pos_NR3D_q_mv_y6, 0);
    MINT32 NR3D_q_mv_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_mv_y7, pos_NR3D_q_mv_y7, 0);
    MINT32 NR3D_q_wvar_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y0, pos_NR3D_q_wvar_y0, 0);
    MINT32 NR3D_q_wvar_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y1, pos_NR3D_q_wvar_y1, 0);
    MINT32 NR3D_q_wvar_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y2, pos_NR3D_q_wvar_y2, 0);
    MINT32 NR3D_q_wvar_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y3, pos_NR3D_q_wvar_y3, 0);
    MINT32 NR3D_q_wvar_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y4, pos_NR3D_q_wvar_y4, 0);
    MINT32 NR3D_q_wvar_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y5, pos_NR3D_q_wvar_y5, 0);
    MINT32 NR3D_q_wvar_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y6, pos_NR3D_q_wvar_y6, 0);
    MINT32 NR3D_q_wvar_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wvar_y7, pos_NR3D_q_wvar_y7, 0);
    MINT32 NR3D_q_wsm_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y0, pos_NR3D_q_wsm_y0, 0);
    MINT32 NR3D_q_wsm_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y1, pos_NR3D_q_wsm_y1, 0);
    MINT32 NR3D_q_wsm_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y2, pos_NR3D_q_wsm_y2, 0);
    MINT32 NR3D_q_wsm_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y3, pos_NR3D_q_wsm_y3, 0);
    MINT32 NR3D_q_wsm_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y4, pos_NR3D_q_wsm_y4, 0);
    MINT32 NR3D_q_wsm_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y5, pos_NR3D_q_wsm_y5, 0);
    MINT32 NR3D_q_wsm_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y6, pos_NR3D_q_wsm_y6, 0);
    MINT32 NR3D_q_wsm_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_wsm_y7, pos_NR3D_q_wsm_y7, 0);
    MINT32 NR3D_q_sdl_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y0, pos_NR3D_q_sdl_y0, 0);
    MINT32 NR3D_q_sdl_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y1, pos_NR3D_q_sdl_y1, 0);
    MINT32 NR3D_q_sdl_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y2, pos_NR3D_q_sdl_y2, 0);
    MINT32 NR3D_q_sdl_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y3, pos_NR3D_q_sdl_y3, 0);
    MINT32 NR3D_q_sdl_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y4, pos_NR3D_q_sdl_y4, 0);
    MINT32 NR3D_q_sdl_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y5, pos_NR3D_q_sdl_y5, 0);
    MINT32 NR3D_q_sdl_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y6, pos_NR3D_q_sdl_y6, 0);
    MINT32 NR3D_q_sdl_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y7, pos_NR3D_q_sdl_y7, 0);
    MINT32 NR3D_q_sdl_y8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_sdl_y8, pos_NR3D_q_sdl_y8, 0);
    MINT32 NR3D_r2c_val1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_val1, pos_NR3D_r2c_val1, 0);
    MINT32 NR3D_r2c_val2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_val2, pos_NR3D_r2c_val2, 0);
    MINT32 NR3D_r2c_val3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_val3, pos_NR3D_r2c_val3, 0);
    MINT32 NR3D_r2c_val4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_val4, pos_NR3D_r2c_val4, 0);
    MINT32 NR3D_r2cenc       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2cenc, pos_NR3D_r2cenc, 0);
    MINT32 NR3D_r2c_txtr_thr1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_txtr_thr1, pos_NR3D_r2c_txtr_thr1, 0);
    MINT32 NR3D_r2c_txtr_thr2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_txtr_thr2, pos_NR3D_r2c_txtr_thr2, 0);
    MINT32 NR3D_r2c_txtr_thr3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_txtr_thr3, pos_NR3D_r2c_txtr_thr3, 0);
    MINT32 NR3D_r2c_txtr_thr4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_txtr_thr4, pos_NR3D_r2c_txtr_thr4, 0);
    MINT32 NR3D_r2c_txtr_throff       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_r2c_txtr_throff, pos_NR3D_r2c_txtr_throff, 0);
    MINT32 NR3D_q_snr_tpre_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y0, pos_NR3D_q_snr_tpre_y0, 0);
    MINT32 NR3D_q_snr_tpre_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y1, pos_NR3D_q_snr_tpre_y1, 0);
    MINT32 NR3D_q_snr_tpre_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y2, pos_NR3D_q_snr_tpre_y2, 0);
    MINT32 NR3D_q_snr_tpre_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y3, pos_NR3D_q_snr_tpre_y3, 0);
    MINT32 NR3D_q_snr_tpre_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y4, pos_NR3D_q_snr_tpre_y4, 0);
    MINT32 NR3D_q_snr_tpre_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y5, pos_NR3D_q_snr_tpre_y5, 0);
    MINT32 NR3D_q_snr_tpre_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y6, pos_NR3D_q_snr_tpre_y6, 0);
    MINT32 NR3D_q_snr_tpre_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y7, pos_NR3D_q_snr_tpre_y7, 0);
    MINT32 NR3D_q_snr_tpre_y8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpre_y8, pos_NR3D_q_snr_tpre_y8, 0);
    MINT32 NR3D_q_snr_txtr_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y0, pos_NR3D_q_snr_txtr_y0, 0);
    MINT32 NR3D_q_snr_txtr_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y1, pos_NR3D_q_snr_txtr_y1, 0);
    MINT32 NR3D_q_snr_txtr_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y2, pos_NR3D_q_snr_txtr_y2, 0);
    MINT32 NR3D_q_snr_txtr_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y3, pos_NR3D_q_snr_txtr_y3, 0);
    MINT32 NR3D_q_snr_txtr_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y4, pos_NR3D_q_snr_txtr_y4, 0);
    MINT32 NR3D_q_snr_txtr_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y5, pos_NR3D_q_snr_txtr_y5, 0);
    MINT32 NR3D_q_snr_txtr_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y6, pos_NR3D_q_snr_txtr_y6, 0);
    MINT32 NR3D_q_snr_txtr_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_txtr_y7, pos_NR3D_q_snr_txtr_y7, 0);
    MINT32 NR3D_q_snr_luma_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y0, pos_NR3D_q_snr_luma_y0, 0);
    MINT32 NR3D_q_snr_luma_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y1, pos_NR3D_q_snr_luma_y1, 0);
    MINT32 NR3D_q_snr_luma_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y2, pos_NR3D_q_snr_luma_y2, 0);
    MINT32 NR3D_q_snr_luma_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y3, pos_NR3D_q_snr_luma_y3, 0);
    MINT32 NR3D_q_snr_luma_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y4, pos_NR3D_q_snr_luma_y4, 0);
    MINT32 NR3D_q_snr_luma_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y5, pos_NR3D_q_snr_luma_y5, 0);
    MINT32 NR3D_q_snr_luma_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y6, pos_NR3D_q_snr_luma_y6, 0);
    MINT32 NR3D_q_snr_luma_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y7, pos_NR3D_q_snr_luma_y7, 0);
    MINT32 NR3D_q_snr_luma_y8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_luma_y8, pos_NR3D_q_snr_luma_y8, 0);
    MINT32 NR3D_q_snr_tpst_y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y0, pos_NR3D_q_snr_tpst_y0, 0);
    MINT32 NR3D_q_snr_tpst_y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y1, pos_NR3D_q_snr_tpst_y1, 0);
    MINT32 NR3D_q_snr_tpst_y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y2, pos_NR3D_q_snr_tpst_y2, 0);
    MINT32 NR3D_q_snr_tpst_y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y3, pos_NR3D_q_snr_tpst_y3, 0);
    MINT32 NR3D_q_snr_tpst_y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y4, pos_NR3D_q_snr_tpst_y4, 0);
    MINT32 NR3D_q_snr_tpst_y5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y5, pos_NR3D_q_snr_tpst_y5, 0);
    MINT32 NR3D_q_snr_tpst_y6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y6, pos_NR3D_q_snr_tpst_y6, 0);
    MINT32 NR3D_q_snr_tpst_y7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y7, pos_NR3D_q_snr_tpst_y7, 0);
    MINT32 NR3D_q_snr_tpst_y8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_q_snr_tpst_y8, pos_NR3D_q_snr_tpst_y8, 0);
    MINT32 NR3D_snr_tpre_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_tpre_en, pos_NR3D_snr_tpre_en, 0);
    MINT32 NR3D_snr_txtr_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_txtr_en, pos_NR3D_snr_txtr_en, 0);
    MINT32 NR3D_snr_luma_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_luma_en, pos_NR3D_snr_luma_en, 0);
    MINT32 NR3D_snr_blend_maxmin       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_blend_maxmin, pos_NR3D_snr_blend_maxmin, 0);
    MINT32 NR3D_blkvar_tolerance       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_blkvar_tolerance, pos_NR3D_blkvar_tolerance, 0);
    MINT32 NR3D_centvar_tolerance       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_centvar_tolerance, pos_NR3D_centvar_tolerance, 0);
    MINT32 NR3D_tolerance_clip       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_tolerance_clip, pos_NR3D_tolerance_clip, 0);
    MINT32 NR3D_sad_invwei       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_sad_invwei, pos_NR3D_sad_invwei, 0);
    MINT32 NR3D_cent_cand_wei       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_cent_cand_wei, pos_NR3D_cent_cand_wei, 0);
    MINT32 NR3D_hfrr_hf_ratio       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_hfrr_hf_ratio, pos_NR3D_hfrr_hf_ratio, 0);
    MINT32 NR3D_hfrr_mf_ratio       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_hfrr_mf_ratio, pos_NR3D_hfrr_mf_ratio, 0);
    MINT32 NR3D_add_curr_ratio       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_add_curr_ratio, pos_NR3D_add_curr_ratio, 0);
    MINT32 NR3D_hfrr_post2d_hf_ratio       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_hfrr_post2d_hf_ratio, pos_NR3D_hfrr_post2d_hf_ratio, 0);
    MINT32 NR3D_hfrr_post2d_mf_ratio       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_hfrr_post2d_mf_ratio, pos_NR3D_hfrr_post2d_mf_ratio, 0);
    MINT32 NR3D_nr3d_tile_edge       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_nr3d_tile_edge, pos_NR3D_nr3d_tile_edge, 1);
    MINT32 NR3D_sl2_off       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_sl2_off, pos_NR3D_sl2_off, 1);
    MINT32 NR3D_on_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_on_en, pos_NR3D_on_en, 1);
    MINT32 NR3D_tnr_y_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_tnr_y_en, pos_NR3D_tnr_y_en, 1);
    MINT32 NR3D_tnr_c_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_tnr_c_en, pos_NR3D_tnr_c_en, 1);
    MINT32 NR3D_en_cycr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_en_cycr, pos_NR3D_en_cycr, 1);
    MINT32 NR3D_en_ccr       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_en_ccr, pos_NR3D_en_ccr, 1);
    MINT32 NR3D_snr_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_en, pos_NR3D_snr_en, 1);
    MINT32 NR3D_snr_pre2d_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_pre2d_en, pos_NR3D_snr_pre2d_en, 1);
    MINT32 NR3D_snr_post2d_en       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_NR3D_snr_post2d_en, pos_NR3D_snr_post2d_en, 1);


    // interpolation result assignment
    rSmoothNR3D.flt_config.bits.NR3D_flt_str_max       = NR3D_flt_str_max;
    rSmoothNR3D.fb_info1.bits.NR3D_q_nl       = NR3D_q_nl;
    rSmoothNR3D.fb_info1.bits.NR3D_q_sp       = NR3D_q_sp;
    rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_blky       = NR3D_blend_ratio_blky;
    rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_de       = NR3D_blend_ratio_de;
    rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_txtr       = NR3D_blend_ratio_txtr;
    rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_mv       = NR3D_blend_ratio_mv;
    rSmoothNR3D.thr_1.bits.NR3D_bdi_thr       = NR3D_bdi_thr;
    rSmoothNR3D.thr_1.bits.NR3D_mv_pen_w       = NR3D_mv_pen_w;
    rSmoothNR3D.thr_1.bits.NR3D_mv_pen_thr       = NR3D_mv_pen_thr;
    rSmoothNR3D.thr_1.bits.NR3D_small_sad_thr       = NR3D_small_sad_thr;
    rSmoothNR3D.curve_1.bits.NR3D_q_blky_y0       = NR3D_q_blky_y0;
    rSmoothNR3D.curve_1.bits.NR3D_q_blky_y1       = NR3D_q_blky_y1;
    rSmoothNR3D.curve_1.bits.NR3D_q_blky_y2       = NR3D_q_blky_y2;
    rSmoothNR3D.curve_1.bits.NR3D_q_blky_y3       = NR3D_q_blky_y3;
    rSmoothNR3D.curve_1.bits.NR3D_q_blky_y4       = NR3D_q_blky_y4;
    rSmoothNR3D.curve_2.bits.NR3D_q_blky_y5       = NR3D_q_blky_y5;
    rSmoothNR3D.curve_2.bits.NR3D_q_blky_y6       = NR3D_q_blky_y6;
    rSmoothNR3D.curve_2.bits.NR3D_q_blky_y7       = NR3D_q_blky_y7;
    rSmoothNR3D.curve_2.bits.NR3D_q_blkc_y0       = NR3D_q_blkc_y0;
    rSmoothNR3D.curve_2.bits.NR3D_q_blkc_y1       = NR3D_q_blkc_y1;
    rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y2       = NR3D_q_blkc_y2;
    rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y3       = NR3D_q_blkc_y3;
    rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y4       = NR3D_q_blkc_y4;
    rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y5       = NR3D_q_blkc_y5;
    rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y6       = NR3D_q_blkc_y6;
    rSmoothNR3D.curve_4.bits.NR3D_q_blkc_y7       = NR3D_q_blkc_y7;
    rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0       = NR3D_q_detxtr_lvl_y0;
    rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1       = NR3D_q_detxtr_lvl_y1;
    rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2       = NR3D_q_detxtr_lvl_y2;
    rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3       = NR3D_q_detxtr_lvl_y3;
    rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4       = NR3D_q_detxtr_lvl_y4;
    rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5       = NR3D_q_detxtr_lvl_y5;
    rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6       = NR3D_q_detxtr_lvl_y6;
    rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7       = NR3D_q_detxtr_lvl_y7;
    rSmoothNR3D.curve_5.bits.NR3D_q_de1_base_y0       = NR3D_q_de1_base_y0;
    rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y1       = NR3D_q_de1_base_y1;
    rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y2       = NR3D_q_de1_base_y2;
    rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y3       = NR3D_q_de1_base_y3;
    rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y4       = NR3D_q_de1_base_y4;
    rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y5       = NR3D_q_de1_base_y5;
    rSmoothNR3D.curve_7.bits.NR3D_q_de1_base_y6       = NR3D_q_de1_base_y6;
    rSmoothNR3D.curve_7.bits.NR3D_q_de1_base_y7       = NR3D_q_de1_base_y7;
    rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0       = NR3D_q_de2txtr_base_y0;
    rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1       = NR3D_q_de2txtr_base_y1;
    rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2       = NR3D_q_de2txtr_base_y2;
    rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3       = NR3D_q_de2txtr_base_y3;
    rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4       = NR3D_q_de2txtr_base_y4;
    rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5       = NR3D_q_de2txtr_base_y5;
    rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6       = NR3D_q_de2txtr_base_y6;
    rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7       = NR3D_q_de2txtr_base_y7;
    rSmoothNR3D.curve_9.bits.NR3D_q_mv_y0       = NR3D_q_mv_y0;
    rSmoothNR3D.curve_9.bits.NR3D_q_mv_y1       = NR3D_q_mv_y1;
    rSmoothNR3D.curve_9.bits.NR3D_q_mv_y2       = NR3D_q_mv_y2;
    rSmoothNR3D.curve_9.bits.NR3D_q_mv_y3       = NR3D_q_mv_y3;
    rSmoothNR3D.curve_9.bits.NR3D_q_mv_y4       = NR3D_q_mv_y4;
    rSmoothNR3D.curve_10.bits.NR3D_q_mv_y5       = NR3D_q_mv_y5;
    rSmoothNR3D.curve_10.bits.NR3D_q_mv_y6       = NR3D_q_mv_y6;
    rSmoothNR3D.curve_10.bits.NR3D_q_mv_y7       = NR3D_q_mv_y7;
    rSmoothNR3D.curve_10.bits.NR3D_q_wvar_y0       = NR3D_q_wvar_y0;
    rSmoothNR3D.curve_10.bits.NR3D_q_wvar_y1       = NR3D_q_wvar_y1;
    rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y2       = NR3D_q_wvar_y2;
    rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y3       = NR3D_q_wvar_y3;
    rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y4       = NR3D_q_wvar_y4;
    rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y5       = NR3D_q_wvar_y5;
    rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y6       = NR3D_q_wvar_y6;
    rSmoothNR3D.curve_12.bits.NR3D_q_wvar_y7       = NR3D_q_wvar_y7;
    rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y0       = NR3D_q_wsm_y0;
    rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y1       = NR3D_q_wsm_y1;
    rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y2       = NR3D_q_wsm_y2;
    rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y3       = NR3D_q_wsm_y3;
    rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y4       = NR3D_q_wsm_y4;
    rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y5       = NR3D_q_wsm_y5;
    rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y6       = NR3D_q_wsm_y6;
    rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y7       = NR3D_q_wsm_y7;
    rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y0       = NR3D_q_sdl_y0;
    rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y1       = NR3D_q_sdl_y1;
    rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y2       = NR3D_q_sdl_y2;
    rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y3       = NR3D_q_sdl_y3;
    rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y4       = NR3D_q_sdl_y4;
    rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y5       = NR3D_q_sdl_y5;
    rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y6       = NR3D_q_sdl_y6;
    rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y7       = NR3D_q_sdl_y7;
    rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y8       = NR3D_q_sdl_y8;
    rSmoothNR3D.r2c_1.bits.NR3D_r2c_val1       = NR3D_r2c_val1;
    rSmoothNR3D.r2c_1.bits.NR3D_r2c_val2       = NR3D_r2c_val2;
    rSmoothNR3D.r2c_1.bits.NR3D_r2c_val3       = NR3D_r2c_val3;
    rSmoothNR3D.r2c_1.bits.NR3D_r2c_val4       = NR3D_r2c_val4;
    rSmoothNR3D.r2c_1.bits.NR3D_r2cenc       = NR3D_r2cenc;
    rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1       = NR3D_r2c_txtr_thr1;
    rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2       = NR3D_r2c_txtr_thr2;
    rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3       = NR3D_r2c_txtr_thr3;
    rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4       = NR3D_r2c_txtr_thr4;
    rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_throff       = NR3D_r2c_txtr_throff;
    rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0       = NR3D_q_snr_tpre_y0;
    rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1       = NR3D_q_snr_tpre_y1;
    rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2       = NR3D_q_snr_tpre_y2;
    rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3       = NR3D_q_snr_tpre_y3;
    rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4       = NR3D_q_snr_tpre_y4;
    rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5       = NR3D_q_snr_tpre_y5;
    rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6       = NR3D_q_snr_tpre_y6;
    rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7       = NR3D_q_snr_tpre_y7;
    rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8       = NR3D_q_snr_tpre_y8;
    rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0       = NR3D_q_snr_txtr_y0;
    rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1       = NR3D_q_snr_txtr_y1;
    rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2       = NR3D_q_snr_txtr_y2;
    rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3       = NR3D_q_snr_txtr_y3;
    rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4       = NR3D_q_snr_txtr_y4;
    rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5       = NR3D_q_snr_txtr_y5;
    rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6       = NR3D_q_snr_txtr_y6;
    rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7       = NR3D_q_snr_txtr_y7;
    rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0       = NR3D_q_snr_luma_y0;
    rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1       = NR3D_q_snr_luma_y1;
    rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2       = NR3D_q_snr_luma_y2;
    rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3       = NR3D_q_snr_luma_y3;
    rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4       = NR3D_q_snr_luma_y4;
    rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5       = NR3D_q_snr_luma_y5;
    rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6       = NR3D_q_snr_luma_y6;
    rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7       = NR3D_q_snr_luma_y7;
    rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8       = NR3D_q_snr_luma_y8;
    rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0       = NR3D_q_snr_tpst_y0;
    rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1       = NR3D_q_snr_tpst_y1;
    rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2       = NR3D_q_snr_tpst_y2;
    rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3       = NR3D_q_snr_tpst_y3;
    rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4       = NR3D_q_snr_tpst_y4;
    rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5       = NR3D_q_snr_tpst_y5;
    rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6       = NR3D_q_snr_tpst_y6;
    rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7       = NR3D_q_snr_tpst_y7;
    rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8       = NR3D_q_snr_tpst_y8;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_tpre_en       = NR3D_snr_tpre_en;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_txtr_en       = NR3D_snr_txtr_en;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_luma_en       = NR3D_snr_luma_en;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin       = NR3D_snr_blend_maxmin;
    rSmoothNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance       = NR3D_blkvar_tolerance;
    rSmoothNR3D.snr_thr_2.bits.NR3D_centvar_tolerance       = NR3D_centvar_tolerance;
    rSmoothNR3D.snr_thr_2.bits.NR3D_tolerance_clip       = NR3D_tolerance_clip;
    rSmoothNR3D.snr_thr_3.bits.NR3D_sad_invwei       = NR3D_sad_invwei;
    rSmoothNR3D.snr_thr_3.bits.NR3D_cent_cand_wei       = NR3D_cent_cand_wei;
    rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio       = NR3D_hfrr_hf_ratio;
    rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio       = NR3D_hfrr_mf_ratio;
    rSmoothNR3D.snr_thr_4.bits.NR3D_add_curr_ratio       = NR3D_add_curr_ratio;
    rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio       = NR3D_hfrr_post2d_hf_ratio;
    rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio       = NR3D_hfrr_post2d_mf_ratio;
    rSmoothNR3D.on_con.bits.NR3D_nr3d_tile_edge       = NR3D_nr3d_tile_edge;
    rSmoothNR3D.on_con.bits.NR3D_sl2_off       = NR3D_sl2_off;
    rSmoothNR3D.on_con.bits.NR3D_on_en       = NR3D_on_en;
    rSmoothNR3D.tnr_enable.bits.NR3D_tnr_y_en       = NR3D_tnr_y_en;
    rSmoothNR3D.tnr_enable.bits.NR3D_tnr_c_en       = NR3D_tnr_c_en;
    rSmoothNR3D.flt_config.bits.NR3D_en_cycr       = NR3D_en_cycr;
    rSmoothNR3D.flt_config.bits.NR3D_en_ccr       = NR3D_en_ccr;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_en       = NR3D_snr_en;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_pre2d_en       = NR3D_snr_pre2d_en;
    rSmoothNR3D.snr_control_1.bits.NR3D_snr_post2d_en       = NR3D_snr_post2d_en;


    // logging
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_flt_str_max       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_flt_str_max, rSmoothNR3D.flt_config.bits.NR3D_flt_str_max, rUpperNR3D.flt_config.bits.NR3D_flt_str_max);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_nl       = %d, %d, %d", rLowerNR3D.fb_info1.bits.NR3D_q_nl, rSmoothNR3D.fb_info1.bits.NR3D_q_nl, rUpperNR3D.fb_info1.bits.NR3D_q_nl);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sp       = %d, %d, %d", rLowerNR3D.fb_info1.bits.NR3D_q_sp, rSmoothNR3D.fb_info1.bits.NR3D_q_sp, rUpperNR3D.fb_info1.bits.NR3D_q_sp);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_blend_ratio_blky       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_blend_ratio_blky, rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_blky, rUpperNR3D.flt_config.bits.NR3D_blend_ratio_blky);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_blend_ratio_de       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_blend_ratio_de, rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_de, rUpperNR3D.flt_config.bits.NR3D_blend_ratio_de);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_blend_ratio_txtr       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_blend_ratio_txtr, rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_txtr, rUpperNR3D.flt_config.bits.NR3D_blend_ratio_txtr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_blend_ratio_mv       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_blend_ratio_mv, rSmoothNR3D.flt_config.bits.NR3D_blend_ratio_mv, rUpperNR3D.flt_config.bits.NR3D_blend_ratio_mv);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_bdi_thr       = %d, %d, %d", rLowerNR3D.thr_1.bits.NR3D_bdi_thr, rSmoothNR3D.thr_1.bits.NR3D_bdi_thr, rUpperNR3D.thr_1.bits.NR3D_bdi_thr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_mv_pen_w       = %d, %d, %d", rLowerNR3D.thr_1.bits.NR3D_mv_pen_w, rSmoothNR3D.thr_1.bits.NR3D_mv_pen_w, rUpperNR3D.thr_1.bits.NR3D_mv_pen_w);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_mv_pen_thr       = %d, %d, %d", rLowerNR3D.thr_1.bits.NR3D_mv_pen_thr, rSmoothNR3D.thr_1.bits.NR3D_mv_pen_thr, rUpperNR3D.thr_1.bits.NR3D_mv_pen_thr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_small_sad_thr       = %d, %d, %d", rLowerNR3D.thr_1.bits.NR3D_small_sad_thr, rSmoothNR3D.thr_1.bits.NR3D_small_sad_thr, rUpperNR3D.thr_1.bits.NR3D_small_sad_thr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y0       = %d, %d, %d", rLowerNR3D.curve_1.bits.NR3D_q_blky_y0, rSmoothNR3D.curve_1.bits.NR3D_q_blky_y0, rUpperNR3D.curve_1.bits.NR3D_q_blky_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y1       = %d, %d, %d", rLowerNR3D.curve_1.bits.NR3D_q_blky_y1, rSmoothNR3D.curve_1.bits.NR3D_q_blky_y1, rUpperNR3D.curve_1.bits.NR3D_q_blky_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y2       = %d, %d, %d", rLowerNR3D.curve_1.bits.NR3D_q_blky_y2, rSmoothNR3D.curve_1.bits.NR3D_q_blky_y2, rUpperNR3D.curve_1.bits.NR3D_q_blky_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y3       = %d, %d, %d", rLowerNR3D.curve_1.bits.NR3D_q_blky_y3, rSmoothNR3D.curve_1.bits.NR3D_q_blky_y3, rUpperNR3D.curve_1.bits.NR3D_q_blky_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y4       = %d, %d, %d", rLowerNR3D.curve_1.bits.NR3D_q_blky_y4, rSmoothNR3D.curve_1.bits.NR3D_q_blky_y4, rUpperNR3D.curve_1.bits.NR3D_q_blky_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y5       = %d, %d, %d", rLowerNR3D.curve_2.bits.NR3D_q_blky_y5, rSmoothNR3D.curve_2.bits.NR3D_q_blky_y5, rUpperNR3D.curve_2.bits.NR3D_q_blky_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y6       = %d, %d, %d", rLowerNR3D.curve_2.bits.NR3D_q_blky_y6, rSmoothNR3D.curve_2.bits.NR3D_q_blky_y6, rUpperNR3D.curve_2.bits.NR3D_q_blky_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blky_y7       = %d, %d, %d", rLowerNR3D.curve_2.bits.NR3D_q_blky_y7, rSmoothNR3D.curve_2.bits.NR3D_q_blky_y7, rUpperNR3D.curve_2.bits.NR3D_q_blky_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y0       = %d, %d, %d", rLowerNR3D.curve_2.bits.NR3D_q_blkc_y0, rSmoothNR3D.curve_2.bits.NR3D_q_blkc_y0, rUpperNR3D.curve_2.bits.NR3D_q_blkc_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y1       = %d, %d, %d", rLowerNR3D.curve_2.bits.NR3D_q_blkc_y1, rSmoothNR3D.curve_2.bits.NR3D_q_blkc_y1, rUpperNR3D.curve_2.bits.NR3D_q_blkc_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y2       = %d, %d, %d", rLowerNR3D.curve_3.bits.NR3D_q_blkc_y2, rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y2, rUpperNR3D.curve_3.bits.NR3D_q_blkc_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y3       = %d, %d, %d", rLowerNR3D.curve_3.bits.NR3D_q_blkc_y3, rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y3, rUpperNR3D.curve_3.bits.NR3D_q_blkc_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y4       = %d, %d, %d", rLowerNR3D.curve_3.bits.NR3D_q_blkc_y4, rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y4, rUpperNR3D.curve_3.bits.NR3D_q_blkc_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y5       = %d, %d, %d", rLowerNR3D.curve_3.bits.NR3D_q_blkc_y5, rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y5, rUpperNR3D.curve_3.bits.NR3D_q_blkc_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y6       = %d, %d, %d", rLowerNR3D.curve_3.bits.NR3D_q_blkc_y6, rSmoothNR3D.curve_3.bits.NR3D_q_blkc_y6, rUpperNR3D.curve_3.bits.NR3D_q_blkc_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_blkc_y7       = %d, %d, %d", rLowerNR3D.curve_4.bits.NR3D_q_blkc_y7, rSmoothNR3D.curve_4.bits.NR3D_q_blkc_y7, rUpperNR3D.curve_4.bits.NR3D_q_blkc_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y0       = %d, %d, %d", rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0, rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0, rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y1       = %d, %d, %d", rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1, rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1, rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y2       = %d, %d, %d", rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2, rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2, rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y3       = %d, %d, %d", rLowerNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3, rSmoothNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3, rUpperNR3D.curve_4.bits.NR3D_q_detxtr_lvl_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y4       = %d, %d, %d", rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4, rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4, rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y5       = %d, %d, %d", rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5, rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5, rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y6       = %d, %d, %d", rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6, rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6, rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_detxtr_lvl_y7       = %d, %d, %d", rLowerNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7, rSmoothNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7, rUpperNR3D.curve_5.bits.NR3D_q_detxtr_lvl_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y0       = %d, %d, %d", rLowerNR3D.curve_5.bits.NR3D_q_de1_base_y0, rSmoothNR3D.curve_5.bits.NR3D_q_de1_base_y0, rUpperNR3D.curve_5.bits.NR3D_q_de1_base_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y1       = %d, %d, %d", rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y1, rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y1, rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y2       = %d, %d, %d", rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y2, rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y2, rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y3       = %d, %d, %d", rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y3, rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y3, rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y4       = %d, %d, %d", rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y4, rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y4, rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y5       = %d, %d, %d", rLowerNR3D.curve_6.bits.NR3D_q_de1_base_y5, rSmoothNR3D.curve_6.bits.NR3D_q_de1_base_y5, rUpperNR3D.curve_6.bits.NR3D_q_de1_base_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y6       = %d, %d, %d", rLowerNR3D.curve_7.bits.NR3D_q_de1_base_y6, rSmoothNR3D.curve_7.bits.NR3D_q_de1_base_y6, rUpperNR3D.curve_7.bits.NR3D_q_de1_base_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de1_base_y7       = %d, %d, %d", rLowerNR3D.curve_7.bits.NR3D_q_de1_base_y7, rSmoothNR3D.curve_7.bits.NR3D_q_de1_base_y7, rUpperNR3D.curve_7.bits.NR3D_q_de1_base_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y0       = %d, %d, %d", rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0, rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0, rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y1       = %d, %d, %d", rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1, rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1, rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y2       = %d, %d, %d", rLowerNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2, rSmoothNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2, rUpperNR3D.curve_7.bits.NR3D_q_de2txtr_base_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y3       = %d, %d, %d", rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3, rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3, rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y4       = %d, %d, %d", rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4, rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4, rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y5       = %d, %d, %d", rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5, rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5, rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y6       = %d, %d, %d", rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6, rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6, rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_de2txtr_base_y7       = %d, %d, %d", rLowerNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7, rSmoothNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7, rUpperNR3D.curve_8.bits.NR3D_q_de2txtr_base_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y0       = %d, %d, %d", rLowerNR3D.curve_9.bits.NR3D_q_mv_y0, rSmoothNR3D.curve_9.bits.NR3D_q_mv_y0, rUpperNR3D.curve_9.bits.NR3D_q_mv_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y1       = %d, %d, %d", rLowerNR3D.curve_9.bits.NR3D_q_mv_y1, rSmoothNR3D.curve_9.bits.NR3D_q_mv_y1, rUpperNR3D.curve_9.bits.NR3D_q_mv_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y2       = %d, %d, %d", rLowerNR3D.curve_9.bits.NR3D_q_mv_y2, rSmoothNR3D.curve_9.bits.NR3D_q_mv_y2, rUpperNR3D.curve_9.bits.NR3D_q_mv_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y3       = %d, %d, %d", rLowerNR3D.curve_9.bits.NR3D_q_mv_y3, rSmoothNR3D.curve_9.bits.NR3D_q_mv_y3, rUpperNR3D.curve_9.bits.NR3D_q_mv_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y4       = %d, %d, %d", rLowerNR3D.curve_9.bits.NR3D_q_mv_y4, rSmoothNR3D.curve_9.bits.NR3D_q_mv_y4, rUpperNR3D.curve_9.bits.NR3D_q_mv_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y5       = %d, %d, %d", rLowerNR3D.curve_10.bits.NR3D_q_mv_y5, rSmoothNR3D.curve_10.bits.NR3D_q_mv_y5, rUpperNR3D.curve_10.bits.NR3D_q_mv_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y6       = %d, %d, %d", rLowerNR3D.curve_10.bits.NR3D_q_mv_y6, rSmoothNR3D.curve_10.bits.NR3D_q_mv_y6, rUpperNR3D.curve_10.bits.NR3D_q_mv_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_mv_y7       = %d, %d, %d", rLowerNR3D.curve_10.bits.NR3D_q_mv_y7, rSmoothNR3D.curve_10.bits.NR3D_q_mv_y7, rUpperNR3D.curve_10.bits.NR3D_q_mv_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y0       = %d, %d, %d", rLowerNR3D.curve_10.bits.NR3D_q_wvar_y0, rSmoothNR3D.curve_10.bits.NR3D_q_wvar_y0, rUpperNR3D.curve_10.bits.NR3D_q_wvar_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y1       = %d, %d, %d", rLowerNR3D.curve_10.bits.NR3D_q_wvar_y1, rSmoothNR3D.curve_10.bits.NR3D_q_wvar_y1, rUpperNR3D.curve_10.bits.NR3D_q_wvar_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y2       = %d, %d, %d", rLowerNR3D.curve_11.bits.NR3D_q_wvar_y2, rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y2, rUpperNR3D.curve_11.bits.NR3D_q_wvar_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y3       = %d, %d, %d", rLowerNR3D.curve_11.bits.NR3D_q_wvar_y3, rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y3, rUpperNR3D.curve_11.bits.NR3D_q_wvar_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y4       = %d, %d, %d", rLowerNR3D.curve_11.bits.NR3D_q_wvar_y4, rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y4, rUpperNR3D.curve_11.bits.NR3D_q_wvar_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y5       = %d, %d, %d", rLowerNR3D.curve_11.bits.NR3D_q_wvar_y5, rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y5, rUpperNR3D.curve_11.bits.NR3D_q_wvar_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y6       = %d, %d, %d", rLowerNR3D.curve_11.bits.NR3D_q_wvar_y6, rSmoothNR3D.curve_11.bits.NR3D_q_wvar_y6, rUpperNR3D.curve_11.bits.NR3D_q_wvar_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wvar_y7       = %d, %d, %d", rLowerNR3D.curve_12.bits.NR3D_q_wvar_y7, rSmoothNR3D.curve_12.bits.NR3D_q_wvar_y7, rUpperNR3D.curve_12.bits.NR3D_q_wvar_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y0       = %d, %d, %d", rLowerNR3D.curve_12.bits.NR3D_q_wsm_y0, rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y0, rUpperNR3D.curve_12.bits.NR3D_q_wsm_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y1       = %d, %d, %d", rLowerNR3D.curve_12.bits.NR3D_q_wsm_y1, rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y1, rUpperNR3D.curve_12.bits.NR3D_q_wsm_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y2       = %d, %d, %d", rLowerNR3D.curve_12.bits.NR3D_q_wsm_y2, rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y2, rUpperNR3D.curve_12.bits.NR3D_q_wsm_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y3       = %d, %d, %d", rLowerNR3D.curve_12.bits.NR3D_q_wsm_y3, rSmoothNR3D.curve_12.bits.NR3D_q_wsm_y3, rUpperNR3D.curve_12.bits.NR3D_q_wsm_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y4       = %d, %d, %d", rLowerNR3D.curve_13.bits.NR3D_q_wsm_y4, rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y4, rUpperNR3D.curve_13.bits.NR3D_q_wsm_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y5       = %d, %d, %d", rLowerNR3D.curve_13.bits.NR3D_q_wsm_y5, rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y5, rUpperNR3D.curve_13.bits.NR3D_q_wsm_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y6       = %d, %d, %d", rLowerNR3D.curve_13.bits.NR3D_q_wsm_y6, rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y6, rUpperNR3D.curve_13.bits.NR3D_q_wsm_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_wsm_y7       = %d, %d, %d", rLowerNR3D.curve_13.bits.NR3D_q_wsm_y7, rSmoothNR3D.curve_13.bits.NR3D_q_wsm_y7, rUpperNR3D.curve_13.bits.NR3D_q_wsm_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y0       = %d, %d, %d", rLowerNR3D.curve_14.bits.NR3D_q_sdl_y0, rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y0, rUpperNR3D.curve_14.bits.NR3D_q_sdl_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y1       = %d, %d, %d", rLowerNR3D.curve_14.bits.NR3D_q_sdl_y1, rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y1, rUpperNR3D.curve_14.bits.NR3D_q_sdl_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y2       = %d, %d, %d", rLowerNR3D.curve_14.bits.NR3D_q_sdl_y2, rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y2, rUpperNR3D.curve_14.bits.NR3D_q_sdl_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y3       = %d, %d, %d", rLowerNR3D.curve_14.bits.NR3D_q_sdl_y3, rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y3, rUpperNR3D.curve_14.bits.NR3D_q_sdl_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y4       = %d, %d, %d", rLowerNR3D.curve_14.bits.NR3D_q_sdl_y4, rSmoothNR3D.curve_14.bits.NR3D_q_sdl_y4, rUpperNR3D.curve_14.bits.NR3D_q_sdl_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y5       = %d, %d, %d", rLowerNR3D.curve_15.bits.NR3D_q_sdl_y5, rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y5, rUpperNR3D.curve_15.bits.NR3D_q_sdl_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y6       = %d, %d, %d", rLowerNR3D.curve_15.bits.NR3D_q_sdl_y6, rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y6, rUpperNR3D.curve_15.bits.NR3D_q_sdl_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y7       = %d, %d, %d", rLowerNR3D.curve_15.bits.NR3D_q_sdl_y7, rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y7, rUpperNR3D.curve_15.bits.NR3D_q_sdl_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_sdl_y8       = %d, %d, %d", rLowerNR3D.curve_15.bits.NR3D_q_sdl_y8, rSmoothNR3D.curve_15.bits.NR3D_q_sdl_y8, rUpperNR3D.curve_15.bits.NR3D_q_sdl_y8);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_val1       = %d, %d, %d", rLowerNR3D.r2c_1.bits.NR3D_r2c_val1, rSmoothNR3D.r2c_1.bits.NR3D_r2c_val1, rUpperNR3D.r2c_1.bits.NR3D_r2c_val1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_val2       = %d, %d, %d", rLowerNR3D.r2c_1.bits.NR3D_r2c_val2, rSmoothNR3D.r2c_1.bits.NR3D_r2c_val2, rUpperNR3D.r2c_1.bits.NR3D_r2c_val2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_val3       = %d, %d, %d", rLowerNR3D.r2c_1.bits.NR3D_r2c_val3, rSmoothNR3D.r2c_1.bits.NR3D_r2c_val3, rUpperNR3D.r2c_1.bits.NR3D_r2c_val3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_val4       = %d, %d, %d", rLowerNR3D.r2c_1.bits.NR3D_r2c_val4, rSmoothNR3D.r2c_1.bits.NR3D_r2c_val4, rUpperNR3D.r2c_1.bits.NR3D_r2c_val4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2cenc       = %d, %d, %d", rLowerNR3D.r2c_1.bits.NR3D_r2cenc, rSmoothNR3D.r2c_1.bits.NR3D_r2cenc, rUpperNR3D.r2c_1.bits.NR3D_r2cenc);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_txtr_thr1       = %d, %d, %d", rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1, rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1, rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_txtr_thr2       = %d, %d, %d", rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2, rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2, rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_txtr_thr3       = %d, %d, %d", rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3, rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3, rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_txtr_thr4       = %d, %d, %d", rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4, rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4, rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_thr4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_r2c_txtr_throff       = %d, %d, %d", rLowerNR3D.r2c_2.bits.NR3D_r2c_txtr_throff, rSmoothNR3D.r2c_2.bits.NR3D_r2c_txtr_throff, rUpperNR3D.r2c_2.bits.NR3D_r2c_txtr_throff);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y0       = %d, %d, %d", rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0, rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0, rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y1       = %d, %d, %d", rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1, rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1, rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y2       = %d, %d, %d", rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2, rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2, rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y3       = %d, %d, %d", rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3, rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3, rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y4       = %d, %d, %d", rLowerNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4, rSmoothNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4, rUpperNR3D.snr_curve_1.bits.NR3D_q_snr_tpre_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y5       = %d, %d, %d", rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5, rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5, rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y6       = %d, %d, %d", rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6, rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6, rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y7       = %d, %d, %d", rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7, rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7, rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpre_y8       = %d, %d, %d", rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8, rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8, rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_tpre_y8);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y0       = %d, %d, %d", rLowerNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0, rSmoothNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0, rUpperNR3D.snr_curve_2.bits.NR3D_q_snr_txtr_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y1       = %d, %d, %d", rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1, rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1, rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y2       = %d, %d, %d", rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2, rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2, rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y3       = %d, %d, %d", rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3, rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3, rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y4       = %d, %d, %d", rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4, rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4, rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y5       = %d, %d, %d", rLowerNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5, rSmoothNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5, rUpperNR3D.snr_curve_3.bits.NR3D_q_snr_txtr_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y6       = %d, %d, %d", rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6, rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6, rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_txtr_y7       = %d, %d, %d", rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7, rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7, rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_txtr_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y0       = %d, %d, %d", rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0, rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0, rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y1       = %d, %d, %d", rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1, rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1, rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y2       = %d, %d, %d", rLowerNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2, rSmoothNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2, rUpperNR3D.snr_curve_4.bits.NR3D_q_snr_luma_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y3       = %d, %d, %d", rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3, rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3, rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y4       = %d, %d, %d", rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4, rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4, rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y5       = %d, %d, %d", rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5, rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5, rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y6       = %d, %d, %d", rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6, rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6, rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y7       = %d, %d, %d", rLowerNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7, rSmoothNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7, rUpperNR3D.snr_curve_5.bits.NR3D_q_snr_luma_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_luma_y8       = %d, %d, %d", rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8, rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8, rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_luma_y8);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y0       = %d, %d, %d", rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0, rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0, rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y0);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y1       = %d, %d, %d", rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1, rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1, rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y1);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y2       = %d, %d, %d", rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2, rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2, rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y2);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y3       = %d, %d, %d", rLowerNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3, rSmoothNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3, rUpperNR3D.snr_curve_6.bits.NR3D_q_snr_tpst_y3);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y4       = %d, %d, %d", rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4, rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4, rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y4);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y5       = %d, %d, %d", rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5, rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5, rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y5);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y6       = %d, %d, %d", rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6, rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6, rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y6);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y7       = %d, %d, %d", rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7, rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7, rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y7);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_q_snr_tpst_y8       = %d, %d, %d", rLowerNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8, rSmoothNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8, rUpperNR3D.snr_curve_7.bits.NR3D_q_snr_tpst_y8);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_tpre_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_tpre_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_tpre_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_tpre_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_txtr_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_txtr_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_txtr_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_txtr_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_luma_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_luma_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_luma_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_luma_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_blend_maxmin       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin, rSmoothNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin, rUpperNR3D.snr_control_1.bits.NR3D_snr_blend_maxmin);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_blkvar_tolerance       = %d, %d, %d", rLowerNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance, rSmoothNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance, rUpperNR3D.snr_thr_2.bits.NR3D_blkvar_tolerance);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_centvar_tolerance       = %d, %d, %d", rLowerNR3D.snr_thr_2.bits.NR3D_centvar_tolerance, rSmoothNR3D.snr_thr_2.bits.NR3D_centvar_tolerance, rUpperNR3D.snr_thr_2.bits.NR3D_centvar_tolerance);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_tolerance_clip       = %d, %d, %d", rLowerNR3D.snr_thr_2.bits.NR3D_tolerance_clip, rSmoothNR3D.snr_thr_2.bits.NR3D_tolerance_clip, rUpperNR3D.snr_thr_2.bits.NR3D_tolerance_clip);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_sad_invwei       = %d, %d, %d", rLowerNR3D.snr_thr_3.bits.NR3D_sad_invwei, rSmoothNR3D.snr_thr_3.bits.NR3D_sad_invwei, rUpperNR3D.snr_thr_3.bits.NR3D_sad_invwei);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_cent_cand_wei       = %d, %d, %d", rLowerNR3D.snr_thr_3.bits.NR3D_cent_cand_wei, rSmoothNR3D.snr_thr_3.bits.NR3D_cent_cand_wei, rUpperNR3D.snr_thr_3.bits.NR3D_cent_cand_wei);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_hfrr_hf_ratio       = %d, %d, %d", rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio, rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio, rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_hf_ratio);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_hfrr_mf_ratio       = %d, %d, %d", rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio, rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio, rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_mf_ratio);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_add_curr_ratio       = %d, %d, %d", rLowerNR3D.snr_thr_4.bits.NR3D_add_curr_ratio, rSmoothNR3D.snr_thr_4.bits.NR3D_add_curr_ratio, rUpperNR3D.snr_thr_4.bits.NR3D_add_curr_ratio);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_hfrr_post2d_hf_ratio       = %d, %d, %d", rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio, rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio, rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_hf_ratio);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_hfrr_post2d_mf_ratio       = %d, %d, %d", rLowerNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio, rSmoothNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio, rUpperNR3D.snr_thr_4.bits.NR3D_hfrr_post2d_mf_ratio);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_nr3d_tile_edge       = %d, %d, %d", rLowerNR3D.on_con.bits.NR3D_nr3d_tile_edge, rSmoothNR3D.on_con.bits.NR3D_nr3d_tile_edge, rUpperNR3D.on_con.bits.NR3D_nr3d_tile_edge);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_sl2_off       = %d, %d, %d", rLowerNR3D.on_con.bits.NR3D_sl2_off, rSmoothNR3D.on_con.bits.NR3D_sl2_off, rUpperNR3D.on_con.bits.NR3D_sl2_off);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_on_en       = %d, %d, %d", rLowerNR3D.on_con.bits.NR3D_on_en, rSmoothNR3D.on_con.bits.NR3D_on_en, rUpperNR3D.on_con.bits.NR3D_on_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_tnr_y_en       = %d, %d, %d", rLowerNR3D.tnr_enable.bits.NR3D_tnr_y_en, rSmoothNR3D.tnr_enable.bits.NR3D_tnr_y_en, rUpperNR3D.tnr_enable.bits.NR3D_tnr_y_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_tnr_c_en       = %d, %d, %d", rLowerNR3D.tnr_enable.bits.NR3D_tnr_c_en, rSmoothNR3D.tnr_enable.bits.NR3D_tnr_c_en, rUpperNR3D.tnr_enable.bits.NR3D_tnr_c_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_en_cycr       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_en_cycr, rSmoothNR3D.flt_config.bits.NR3D_en_cycr, rUpperNR3D.flt_config.bits.NR3D_en_cycr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_en_ccr       = %d, %d, %d", rLowerNR3D.flt_config.bits.NR3D_en_ccr, rSmoothNR3D.flt_config.bits.NR3D_en_ccr, rUpperNR3D.flt_config.bits.NR3D_en_ccr);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_pre2d_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_pre2d_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_pre2d_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_pre2d_en);
    INTER_LOG_IF(bSmoothNR3DDebug, "[L,S,U]NR3D_snr_post2d_en       = %d, %d, %d", rLowerNR3D.snr_control_1.bits.NR3D_snr_post2d_en, rSmoothNR3D.snr_control_1.bits.NR3D_snr_post2d_en, rUpperNR3D.snr_control_1.bits.NR3D_snr_post2d_en);

}

MVOID Smooth_LPCNR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_LPCNR_T const& rUpperLPCNR,   // LPCNR settings for upper ISO
                ISP_NVRAM_LPCNR_T const& rLowerLPCNR,   // LPCNR settings for lower ISO
                ISP_NVRAM_LPCNR_T& rSmoothLPCNR)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_lpcnr.enable", value, "0");
    MBOOL bSmoothLPCNRDebug = atoi(value);

    INTER_LOG_IF(bSmoothLPCNRDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_LPCNR_NR_W00       = rLowerLPCNR.nr_w1.bits.LPCNR_NR_W00;
    MINT32 pre_LPCNR_NR_W01       = rLowerLPCNR.nr_w1.bits.LPCNR_NR_W01;
    MINT32 pre_LPCNR_NR_W02       = rLowerLPCNR.nr_w1.bits.LPCNR_NR_W02;
    MINT32 pre_LPCNR_NR_W03       = rLowerLPCNR.nr_w1.bits.LPCNR_NR_W03;
    MINT32 pre_LPCNR_NR_W04       = rLowerLPCNR.nr_w2.bits.LPCNR_NR_W04;
    MINT32 pre_LPCNR_NR_W05       = rLowerLPCNR.nr_w2.bits.LPCNR_NR_W05;
    MINT32 pre_LPCNR_NR_W06       = rLowerLPCNR.nr_w2.bits.LPCNR_NR_W06;
    MINT32 pre_LPCNR_NR_W07       = rLowerLPCNR.nr_w2.bits.LPCNR_NR_W07;
    MINT32 pre_LPCNR_NR_W08       = rLowerLPCNR.nr_w3.bits.LPCNR_NR_W08;
    MINT32 pre_LPCNR_NR_W09       = rLowerLPCNR.nr_w3.bits.LPCNR_NR_W09;
    MINT32 pre_LPCNR_NR_W10       = rLowerLPCNR.nr_w3.bits.LPCNR_NR_W10;
    MINT32 pre_LPCNR_NR_W11       = rLowerLPCNR.nr_w3.bits.LPCNR_NR_W11;
    MINT32 pre_LPCNR_NR_W12       = rLowerLPCNR.nr_w4.bits.LPCNR_NR_W12;
    MINT32 pre_LPCNR_NR_W13       = rLowerLPCNR.nr_w4.bits.LPCNR_NR_W13;
    MINT32 pre_LPCNR_NR_W14       = rLowerLPCNR.nr_w4.bits.LPCNR_NR_W14;
    MINT32 pre_LPCNR_NR_W15       = rLowerLPCNR.nr_w4.bits.LPCNR_NR_W15;
    MINT32 pre_LPCNR_NR_W16       = rLowerLPCNR.nr_w5.bits.LPCNR_NR_W16;
    MINT32 pre_LPCNR_NR_W17       = rLowerLPCNR.nr_w5.bits.LPCNR_NR_W17;
    MINT32 pre_LPCNR_NR_W18       = rLowerLPCNR.nr_w5.bits.LPCNR_NR_W18;
    MINT32 pre_LPCNR_NR_W19       = rLowerLPCNR.nr_w5.bits.LPCNR_NR_W19;
    MINT32 pre_LPCNR_NR_W20       = rLowerLPCNR.nr_w6.bits.LPCNR_NR_W20;
    MINT32 pre_LPCNR_NR_W21       = rLowerLPCNR.nr_w6.bits.LPCNR_NR_W21;
    MINT32 pre_LPCNR_NR_W22       = rLowerLPCNR.nr_w6.bits.LPCNR_NR_W22;
    MINT32 pre_LPCNR_NR_W23       = rLowerLPCNR.nr_w6.bits.LPCNR_NR_W23;
    MINT32 pre_LPCNR_NR_W24       = rLowerLPCNR.nr_w7.bits.LPCNR_NR_W24;
    MINT32 pre_LPCNR_NR_W25       = rLowerLPCNR.nr_w7.bits.LPCNR_NR_W25;
    MINT32 pre_LPCNR_NR_W26       = rLowerLPCNR.nr_w7.bits.LPCNR_NR_W26;
    MINT32 pre_LPCNR_NR_W27       = rLowerLPCNR.nr_w7.bits.LPCNR_NR_W27;
    MINT32 pre_LPCNR_NR_W28       = rLowerLPCNR.nr_w8.bits.LPCNR_NR_W28;
    MINT32 pre_LPCNR_NR_W29       = rLowerLPCNR.nr_w8.bits.LPCNR_NR_W29;
    MINT32 pre_LPCNR_NR_W30       = rLowerLPCNR.nr_w8.bits.LPCNR_NR_W30;
    MINT32 pre_LPCNR_NR_W31       = rLowerLPCNR.nr_w8.bits.LPCNR_NR_W31;
    MINT32 pre_LPCNR_NR_W32       = rLowerLPCNR.nr_w9.bits.LPCNR_NR_W32;
    MINT32 pre_LPCNR_NR_W33       = rLowerLPCNR.nr_w9.bits.LPCNR_NR_W33;
    MINT32 pre_LPCNR_NR_W34       = rLowerLPCNR.nr_w9.bits.LPCNR_NR_W34;
    MINT32 pre_LPCNR_NR_W35       = rLowerLPCNR.nr_w9.bits.LPCNR_NR_W35;
    MINT32 pre_LPCNR_NR_W36       = rLowerLPCNR.nr_w10.bits.LPCNR_NR_W36;
    MINT32 pre_LPCNR_NR_W37       = rLowerLPCNR.nr_w10.bits.LPCNR_NR_W37;
    MINT32 pre_LPCNR_NR_W38       = rLowerLPCNR.nr_w10.bits.LPCNR_NR_W38;
    MINT32 pre_LPCNR_NR_W39       = rLowerLPCNR.nr_w10.bits.LPCNR_NR_W39;
    MINT32 pre_LPCNR_NR_W40       = rLowerLPCNR.nr_w11.bits.LPCNR_NR_W40;
    MINT32 pre_LPCNR_NR_W41       = rLowerLPCNR.nr_w11.bits.LPCNR_NR_W41;
    MINT32 pre_LPCNR_NR_W42       = rLowerLPCNR.nr_w11.bits.LPCNR_NR_W42;
    MINT32 pre_LPCNR_NR_W43       = rLowerLPCNR.nr_w11.bits.LPCNR_NR_W43;
    MINT32 pre_LPCNR_NR_W44       = rLowerLPCNR.nr_w12.bits.LPCNR_NR_W44;
    MINT32 pre_LPCNR_NR_W45       = rLowerLPCNR.nr_w12.bits.LPCNR_NR_W45;
    MINT32 pre_LPCNR_NR_W46       = rLowerLPCNR.nr_w12.bits.LPCNR_NR_W46;
    MINT32 pre_LPCNR_NR_W47       = rLowerLPCNR.nr_w12.bits.LPCNR_NR_W47;
    MINT32 pre_LPCNR_NR_W48       = rLowerLPCNR.nr_w13.bits.LPCNR_NR_W48;
    MINT32 pre_LPCNR_NR_W49       = rLowerLPCNR.nr_w13.bits.LPCNR_NR_W49;
    MINT32 pre_LPCNR_NR_W50       = rLowerLPCNR.nr_w13.bits.LPCNR_NR_W50;
    MINT32 pre_LPCNR_NR_W51       = rLowerLPCNR.nr_w13.bits.LPCNR_NR_W51;
    MINT32 pre_LPCNR_NR_W52       = rLowerLPCNR.nr_w14.bits.LPCNR_NR_W52;
    MINT32 pre_LPCNR_NR_W53       = rLowerLPCNR.nr_w14.bits.LPCNR_NR_W53;
    MINT32 pre_LPCNR_SM_TH       = rLowerLPCNR.sm.bits.LPCNR_SM_TH;
    MINT32 pre_LPCNR_BLD_TH       = rLowerLPCNR.bld.bits.LPCNR_BLD_TH;
    MINT32 pre_LPCNR_BLD_SP       = rLowerLPCNR.bld.bits.LPCNR_BLD_SP;
    MINT32 pre_LPCNR_BLD_W0       = rLowerLPCNR.bld.bits.LPCNR_BLD_W0;
    MINT32 pre_LPCNR_BLD_W1       = rLowerLPCNR.bld.bits.LPCNR_BLD_W1;
    MINT32 pre_LPCNR_NTRL_Y_TH0       = rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0;
    MINT32 pre_LPCNR_NTRL_Y_TH1       = rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1;
    MINT32 pre_LPCNR_NTRL_Y_SP0       = rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0;
    MINT32 pre_LPCNR_NTRL_Y_SP1       = rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1;
    MINT32 pre_LPCNR_NTRL_C_TH       = rLowerLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH;
    MINT32 pre_LPCNR_NTRL_C_SP       = rLowerLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP;
    MINT32 pre_LPCNR_NR_SD       = rLowerLPCNR.sm.bits.LPCNR_NR_SD;
    MINT32 pos_LPCNR_NR_W00       = rUpperLPCNR.nr_w1.bits.LPCNR_NR_W00;
    MINT32 pos_LPCNR_NR_W01       = rUpperLPCNR.nr_w1.bits.LPCNR_NR_W01;
    MINT32 pos_LPCNR_NR_W02       = rUpperLPCNR.nr_w1.bits.LPCNR_NR_W02;
    MINT32 pos_LPCNR_NR_W03       = rUpperLPCNR.nr_w1.bits.LPCNR_NR_W03;
    MINT32 pos_LPCNR_NR_W04       = rUpperLPCNR.nr_w2.bits.LPCNR_NR_W04;
    MINT32 pos_LPCNR_NR_W05       = rUpperLPCNR.nr_w2.bits.LPCNR_NR_W05;
    MINT32 pos_LPCNR_NR_W06       = rUpperLPCNR.nr_w2.bits.LPCNR_NR_W06;
    MINT32 pos_LPCNR_NR_W07       = rUpperLPCNR.nr_w2.bits.LPCNR_NR_W07;
    MINT32 pos_LPCNR_NR_W08       = rUpperLPCNR.nr_w3.bits.LPCNR_NR_W08;
    MINT32 pos_LPCNR_NR_W09       = rUpperLPCNR.nr_w3.bits.LPCNR_NR_W09;
    MINT32 pos_LPCNR_NR_W10       = rUpperLPCNR.nr_w3.bits.LPCNR_NR_W10;
    MINT32 pos_LPCNR_NR_W11       = rUpperLPCNR.nr_w3.bits.LPCNR_NR_W11;
    MINT32 pos_LPCNR_NR_W12       = rUpperLPCNR.nr_w4.bits.LPCNR_NR_W12;
    MINT32 pos_LPCNR_NR_W13       = rUpperLPCNR.nr_w4.bits.LPCNR_NR_W13;
    MINT32 pos_LPCNR_NR_W14       = rUpperLPCNR.nr_w4.bits.LPCNR_NR_W14;
    MINT32 pos_LPCNR_NR_W15       = rUpperLPCNR.nr_w4.bits.LPCNR_NR_W15;
    MINT32 pos_LPCNR_NR_W16       = rUpperLPCNR.nr_w5.bits.LPCNR_NR_W16;
    MINT32 pos_LPCNR_NR_W17       = rUpperLPCNR.nr_w5.bits.LPCNR_NR_W17;
    MINT32 pos_LPCNR_NR_W18       = rUpperLPCNR.nr_w5.bits.LPCNR_NR_W18;
    MINT32 pos_LPCNR_NR_W19       = rUpperLPCNR.nr_w5.bits.LPCNR_NR_W19;
    MINT32 pos_LPCNR_NR_W20       = rUpperLPCNR.nr_w6.bits.LPCNR_NR_W20;
    MINT32 pos_LPCNR_NR_W21       = rUpperLPCNR.nr_w6.bits.LPCNR_NR_W21;
    MINT32 pos_LPCNR_NR_W22       = rUpperLPCNR.nr_w6.bits.LPCNR_NR_W22;
    MINT32 pos_LPCNR_NR_W23       = rUpperLPCNR.nr_w6.bits.LPCNR_NR_W23;
    MINT32 pos_LPCNR_NR_W24       = rUpperLPCNR.nr_w7.bits.LPCNR_NR_W24;
    MINT32 pos_LPCNR_NR_W25       = rUpperLPCNR.nr_w7.bits.LPCNR_NR_W25;
    MINT32 pos_LPCNR_NR_W26       = rUpperLPCNR.nr_w7.bits.LPCNR_NR_W26;
    MINT32 pos_LPCNR_NR_W27       = rUpperLPCNR.nr_w7.bits.LPCNR_NR_W27;
    MINT32 pos_LPCNR_NR_W28       = rUpperLPCNR.nr_w8.bits.LPCNR_NR_W28;
    MINT32 pos_LPCNR_NR_W29       = rUpperLPCNR.nr_w8.bits.LPCNR_NR_W29;
    MINT32 pos_LPCNR_NR_W30       = rUpperLPCNR.nr_w8.bits.LPCNR_NR_W30;
    MINT32 pos_LPCNR_NR_W31       = rUpperLPCNR.nr_w8.bits.LPCNR_NR_W31;
    MINT32 pos_LPCNR_NR_W32       = rUpperLPCNR.nr_w9.bits.LPCNR_NR_W32;
    MINT32 pos_LPCNR_NR_W33       = rUpperLPCNR.nr_w9.bits.LPCNR_NR_W33;
    MINT32 pos_LPCNR_NR_W34       = rUpperLPCNR.nr_w9.bits.LPCNR_NR_W34;
    MINT32 pos_LPCNR_NR_W35       = rUpperLPCNR.nr_w9.bits.LPCNR_NR_W35;
    MINT32 pos_LPCNR_NR_W36       = rUpperLPCNR.nr_w10.bits.LPCNR_NR_W36;
    MINT32 pos_LPCNR_NR_W37       = rUpperLPCNR.nr_w10.bits.LPCNR_NR_W37;
    MINT32 pos_LPCNR_NR_W38       = rUpperLPCNR.nr_w10.bits.LPCNR_NR_W38;
    MINT32 pos_LPCNR_NR_W39       = rUpperLPCNR.nr_w10.bits.LPCNR_NR_W39;
    MINT32 pos_LPCNR_NR_W40       = rUpperLPCNR.nr_w11.bits.LPCNR_NR_W40;
    MINT32 pos_LPCNR_NR_W41       = rUpperLPCNR.nr_w11.bits.LPCNR_NR_W41;
    MINT32 pos_LPCNR_NR_W42       = rUpperLPCNR.nr_w11.bits.LPCNR_NR_W42;
    MINT32 pos_LPCNR_NR_W43       = rUpperLPCNR.nr_w11.bits.LPCNR_NR_W43;
    MINT32 pos_LPCNR_NR_W44       = rUpperLPCNR.nr_w12.bits.LPCNR_NR_W44;
    MINT32 pos_LPCNR_NR_W45       = rUpperLPCNR.nr_w12.bits.LPCNR_NR_W45;
    MINT32 pos_LPCNR_NR_W46       = rUpperLPCNR.nr_w12.bits.LPCNR_NR_W46;
    MINT32 pos_LPCNR_NR_W47       = rUpperLPCNR.nr_w12.bits.LPCNR_NR_W47;
    MINT32 pos_LPCNR_NR_W48       = rUpperLPCNR.nr_w13.bits.LPCNR_NR_W48;
    MINT32 pos_LPCNR_NR_W49       = rUpperLPCNR.nr_w13.bits.LPCNR_NR_W49;
    MINT32 pos_LPCNR_NR_W50       = rUpperLPCNR.nr_w13.bits.LPCNR_NR_W50;
    MINT32 pos_LPCNR_NR_W51       = rUpperLPCNR.nr_w13.bits.LPCNR_NR_W51;
    MINT32 pos_LPCNR_NR_W52       = rUpperLPCNR.nr_w14.bits.LPCNR_NR_W52;
    MINT32 pos_LPCNR_NR_W53       = rUpperLPCNR.nr_w14.bits.LPCNR_NR_W53;
    MINT32 pos_LPCNR_SM_TH       = rUpperLPCNR.sm.bits.LPCNR_SM_TH;
    MINT32 pos_LPCNR_BLD_TH       = rUpperLPCNR.bld.bits.LPCNR_BLD_TH;
    MINT32 pos_LPCNR_BLD_SP       = rUpperLPCNR.bld.bits.LPCNR_BLD_SP;
    MINT32 pos_LPCNR_BLD_W0       = rUpperLPCNR.bld.bits.LPCNR_BLD_W0;
    MINT32 pos_LPCNR_BLD_W1       = rUpperLPCNR.bld.bits.LPCNR_BLD_W1;
    MINT32 pos_LPCNR_NTRL_Y_TH0       = rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0;
    MINT32 pos_LPCNR_NTRL_Y_TH1       = rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1;
    MINT32 pos_LPCNR_NTRL_Y_SP0       = rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0;
    MINT32 pos_LPCNR_NTRL_Y_SP1       = rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1;
    MINT32 pos_LPCNR_NTRL_C_TH       = rUpperLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH;
    MINT32 pos_LPCNR_NTRL_C_SP       = rUpperLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP;
    MINT32 pos_LPCNR_NR_SD       = rUpperLPCNR.sm.bits.LPCNR_NR_SD;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 LPCNR_NR_W00       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W00, pos_LPCNR_NR_W00, 0);
    MINT32 LPCNR_NR_W01       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W01, pos_LPCNR_NR_W01, 0);
    MINT32 LPCNR_NR_W02       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W02, pos_LPCNR_NR_W02, 0);
    MINT32 LPCNR_NR_W03       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W03, pos_LPCNR_NR_W03, 0);
    MINT32 LPCNR_NR_W04       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W04, pos_LPCNR_NR_W04, 0);
    MINT32 LPCNR_NR_W05       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W05, pos_LPCNR_NR_W05, 0);
    MINT32 LPCNR_NR_W06       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W06, pos_LPCNR_NR_W06, 0);
    MINT32 LPCNR_NR_W07       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W07, pos_LPCNR_NR_W07, 0);
    MINT32 LPCNR_NR_W08       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W08, pos_LPCNR_NR_W08, 0);
    MINT32 LPCNR_NR_W09       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W09, pos_LPCNR_NR_W09, 0);
    MINT32 LPCNR_NR_W10       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W10, pos_LPCNR_NR_W10, 0);
    MINT32 LPCNR_NR_W11       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W11, pos_LPCNR_NR_W11, 0);
    MINT32 LPCNR_NR_W12       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W12, pos_LPCNR_NR_W12, 0);
    MINT32 LPCNR_NR_W13       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W13, pos_LPCNR_NR_W13, 0);
    MINT32 LPCNR_NR_W14       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W14, pos_LPCNR_NR_W14, 0);
    MINT32 LPCNR_NR_W15       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W15, pos_LPCNR_NR_W15, 0);
    MINT32 LPCNR_NR_W16       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W16, pos_LPCNR_NR_W16, 0);
    MINT32 LPCNR_NR_W17       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W17, pos_LPCNR_NR_W17, 0);
    MINT32 LPCNR_NR_W18       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W18, pos_LPCNR_NR_W18, 0);
    MINT32 LPCNR_NR_W19       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W19, pos_LPCNR_NR_W19, 0);
    MINT32 LPCNR_NR_W20       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W20, pos_LPCNR_NR_W20, 0);
    MINT32 LPCNR_NR_W21       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W21, pos_LPCNR_NR_W21, 0);
    MINT32 LPCNR_NR_W22       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W22, pos_LPCNR_NR_W22, 0);
    MINT32 LPCNR_NR_W23       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W23, pos_LPCNR_NR_W23, 0);
    MINT32 LPCNR_NR_W24       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W24, pos_LPCNR_NR_W24, 0);
    MINT32 LPCNR_NR_W25       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W25, pos_LPCNR_NR_W25, 0);
    MINT32 LPCNR_NR_W26       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W26, pos_LPCNR_NR_W26, 0);
    MINT32 LPCNR_NR_W27       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W27, pos_LPCNR_NR_W27, 0);
    MINT32 LPCNR_NR_W28       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W28, pos_LPCNR_NR_W28, 0);
    MINT32 LPCNR_NR_W29       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W29, pos_LPCNR_NR_W29, 0);
    MINT32 LPCNR_NR_W30       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W30, pos_LPCNR_NR_W30, 0);
    MINT32 LPCNR_NR_W31       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W31, pos_LPCNR_NR_W31, 0);
    MINT32 LPCNR_NR_W32       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W32, pos_LPCNR_NR_W32, 0);
    MINT32 LPCNR_NR_W33       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W33, pos_LPCNR_NR_W33, 0);
    MINT32 LPCNR_NR_W34       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W34, pos_LPCNR_NR_W34, 0);
    MINT32 LPCNR_NR_W35       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W35, pos_LPCNR_NR_W35, 0);
    MINT32 LPCNR_NR_W36       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W36, pos_LPCNR_NR_W36, 0);
    MINT32 LPCNR_NR_W37       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W37, pos_LPCNR_NR_W37, 0);
    MINT32 LPCNR_NR_W38       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W38, pos_LPCNR_NR_W38, 0);
    MINT32 LPCNR_NR_W39       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W39, pos_LPCNR_NR_W39, 0);
    MINT32 LPCNR_NR_W40       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W40, pos_LPCNR_NR_W40, 0);
    MINT32 LPCNR_NR_W41       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W41, pos_LPCNR_NR_W41, 0);
    MINT32 LPCNR_NR_W42       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W42, pos_LPCNR_NR_W42, 0);
    MINT32 LPCNR_NR_W43       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W43, pos_LPCNR_NR_W43, 0);
    MINT32 LPCNR_NR_W44       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W44, pos_LPCNR_NR_W44, 0);
    MINT32 LPCNR_NR_W45       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W45, pos_LPCNR_NR_W45, 0);
    MINT32 LPCNR_NR_W46       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W46, pos_LPCNR_NR_W46, 0);
    MINT32 LPCNR_NR_W47       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W47, pos_LPCNR_NR_W47, 0);
    MINT32 LPCNR_NR_W48       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W48, pos_LPCNR_NR_W48, 0);
    MINT32 LPCNR_NR_W49       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W49, pos_LPCNR_NR_W49, 0);
    MINT32 LPCNR_NR_W50       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W50, pos_LPCNR_NR_W50, 0);
    MINT32 LPCNR_NR_W51       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W51, pos_LPCNR_NR_W51, 0);
    MINT32 LPCNR_NR_W52       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W52, pos_LPCNR_NR_W52, 0);
    MINT32 LPCNR_NR_W53       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_W53, pos_LPCNR_NR_W53, 0);
    MINT32 LPCNR_SM_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_SM_TH, pos_LPCNR_SM_TH, 0);
    MINT32 LPCNR_BLD_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_BLD_TH, pos_LPCNR_BLD_TH, 0);
    MINT32 LPCNR_BLD_SP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_BLD_SP, pos_LPCNR_BLD_SP, 0);
    MINT32 LPCNR_BLD_W0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_BLD_W0, pos_LPCNR_BLD_W0, 0);
    MINT32 LPCNR_BLD_W1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_BLD_W1, pos_LPCNR_BLD_W1, 0);
    MINT32 LPCNR_NTRL_Y_TH0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_Y_TH0, pos_LPCNR_NTRL_Y_TH0, 0);
    MINT32 LPCNR_NTRL_Y_TH1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_Y_TH1, pos_LPCNR_NTRL_Y_TH1, 0);
    MINT32 LPCNR_NTRL_Y_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_Y_SP0, pos_LPCNR_NTRL_Y_SP0, 0);
    MINT32 LPCNR_NTRL_Y_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_Y_SP1, pos_LPCNR_NTRL_Y_SP1, 0);
    MINT32 LPCNR_NTRL_C_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_C_TH, pos_LPCNR_NTRL_C_TH, 0);
    MINT32 LPCNR_NTRL_C_SP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NTRL_C_SP, pos_LPCNR_NTRL_C_SP, 0);
    MINT32 LPCNR_NR_SD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_LPCNR_NR_SD, pos_LPCNR_NR_SD, 1);


    // interpolation result assignment
    rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W00       = LPCNR_NR_W00;
    rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W01       = LPCNR_NR_W01;
    rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W02       = LPCNR_NR_W02;
    rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W03       = LPCNR_NR_W03;
    rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W04       = LPCNR_NR_W04;
    rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W05       = LPCNR_NR_W05;
    rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W06       = LPCNR_NR_W06;
    rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W07       = LPCNR_NR_W07;
    rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W08       = LPCNR_NR_W08;
    rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W09       = LPCNR_NR_W09;
    rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W10       = LPCNR_NR_W10;
    rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W11       = LPCNR_NR_W11;
    rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W12       = LPCNR_NR_W12;
    rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W13       = LPCNR_NR_W13;
    rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W14       = LPCNR_NR_W14;
    rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W15       = LPCNR_NR_W15;
    rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W16       = LPCNR_NR_W16;
    rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W17       = LPCNR_NR_W17;
    rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W18       = LPCNR_NR_W18;
    rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W19       = LPCNR_NR_W19;
    rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W20       = LPCNR_NR_W20;
    rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W21       = LPCNR_NR_W21;
    rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W22       = LPCNR_NR_W22;
    rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W23       = LPCNR_NR_W23;
    rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W24       = LPCNR_NR_W24;
    rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W25       = LPCNR_NR_W25;
    rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W26       = LPCNR_NR_W26;
    rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W27       = LPCNR_NR_W27;
    rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W28       = LPCNR_NR_W28;
    rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W29       = LPCNR_NR_W29;
    rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W30       = LPCNR_NR_W30;
    rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W31       = LPCNR_NR_W31;
    rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W32       = LPCNR_NR_W32;
    rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W33       = LPCNR_NR_W33;
    rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W34       = LPCNR_NR_W34;
    rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W35       = LPCNR_NR_W35;
    rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W36       = LPCNR_NR_W36;
    rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W37       = LPCNR_NR_W37;
    rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W38       = LPCNR_NR_W38;
    rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W39       = LPCNR_NR_W39;
    rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W40       = LPCNR_NR_W40;
    rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W41       = LPCNR_NR_W41;
    rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W42       = LPCNR_NR_W42;
    rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W43       = LPCNR_NR_W43;
    rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W44       = LPCNR_NR_W44;
    rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W45       = LPCNR_NR_W45;
    rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W46       = LPCNR_NR_W46;
    rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W47       = LPCNR_NR_W47;
    rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W48       = LPCNR_NR_W48;
    rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W49       = LPCNR_NR_W49;
    rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W50       = LPCNR_NR_W50;
    rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W51       = LPCNR_NR_W51;
    rSmoothLPCNR.nr_w14.bits.LPCNR_NR_W52       = LPCNR_NR_W52;
    rSmoothLPCNR.nr_w14.bits.LPCNR_NR_W53       = LPCNR_NR_W53;
    rSmoothLPCNR.sm.bits.LPCNR_SM_TH       = LPCNR_SM_TH;
    rSmoothLPCNR.bld.bits.LPCNR_BLD_TH       = LPCNR_BLD_TH;
    rSmoothLPCNR.bld.bits.LPCNR_BLD_SP       = LPCNR_BLD_SP;
    rSmoothLPCNR.bld.bits.LPCNR_BLD_W0       = LPCNR_BLD_W0;
    rSmoothLPCNR.bld.bits.LPCNR_BLD_W1       = LPCNR_BLD_W1;
    rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0       = LPCNR_NTRL_Y_TH0;
    rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1       = LPCNR_NTRL_Y_TH1;
    rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0       = LPCNR_NTRL_Y_SP0;
    rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1       = LPCNR_NTRL_Y_SP1;
    rSmoothLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH       = LPCNR_NTRL_C_TH;
    rSmoothLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP       = LPCNR_NTRL_C_SP;
    rSmoothLPCNR.sm.bits.LPCNR_NR_SD       = LPCNR_NR_SD;


    // logging
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W00       = %d, %d, %d", rLowerLPCNR.nr_w1.bits.LPCNR_NR_W00, rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W00, rUpperLPCNR.nr_w1.bits.LPCNR_NR_W00);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W01       = %d, %d, %d", rLowerLPCNR.nr_w1.bits.LPCNR_NR_W01, rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W01, rUpperLPCNR.nr_w1.bits.LPCNR_NR_W01);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W02       = %d, %d, %d", rLowerLPCNR.nr_w1.bits.LPCNR_NR_W02, rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W02, rUpperLPCNR.nr_w1.bits.LPCNR_NR_W02);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W03       = %d, %d, %d", rLowerLPCNR.nr_w1.bits.LPCNR_NR_W03, rSmoothLPCNR.nr_w1.bits.LPCNR_NR_W03, rUpperLPCNR.nr_w1.bits.LPCNR_NR_W03);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W04       = %d, %d, %d", rLowerLPCNR.nr_w2.bits.LPCNR_NR_W04, rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W04, rUpperLPCNR.nr_w2.bits.LPCNR_NR_W04);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W05       = %d, %d, %d", rLowerLPCNR.nr_w2.bits.LPCNR_NR_W05, rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W05, rUpperLPCNR.nr_w2.bits.LPCNR_NR_W05);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W06       = %d, %d, %d", rLowerLPCNR.nr_w2.bits.LPCNR_NR_W06, rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W06, rUpperLPCNR.nr_w2.bits.LPCNR_NR_W06);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W07       = %d, %d, %d", rLowerLPCNR.nr_w2.bits.LPCNR_NR_W07, rSmoothLPCNR.nr_w2.bits.LPCNR_NR_W07, rUpperLPCNR.nr_w2.bits.LPCNR_NR_W07);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W08       = %d, %d, %d", rLowerLPCNR.nr_w3.bits.LPCNR_NR_W08, rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W08, rUpperLPCNR.nr_w3.bits.LPCNR_NR_W08);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W09       = %d, %d, %d", rLowerLPCNR.nr_w3.bits.LPCNR_NR_W09, rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W09, rUpperLPCNR.nr_w3.bits.LPCNR_NR_W09);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W10       = %d, %d, %d", rLowerLPCNR.nr_w3.bits.LPCNR_NR_W10, rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W10, rUpperLPCNR.nr_w3.bits.LPCNR_NR_W10);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W11       = %d, %d, %d", rLowerLPCNR.nr_w3.bits.LPCNR_NR_W11, rSmoothLPCNR.nr_w3.bits.LPCNR_NR_W11, rUpperLPCNR.nr_w3.bits.LPCNR_NR_W11);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W12       = %d, %d, %d", rLowerLPCNR.nr_w4.bits.LPCNR_NR_W12, rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W12, rUpperLPCNR.nr_w4.bits.LPCNR_NR_W12);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W13       = %d, %d, %d", rLowerLPCNR.nr_w4.bits.LPCNR_NR_W13, rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W13, rUpperLPCNR.nr_w4.bits.LPCNR_NR_W13);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W14       = %d, %d, %d", rLowerLPCNR.nr_w4.bits.LPCNR_NR_W14, rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W14, rUpperLPCNR.nr_w4.bits.LPCNR_NR_W14);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W15       = %d, %d, %d", rLowerLPCNR.nr_w4.bits.LPCNR_NR_W15, rSmoothLPCNR.nr_w4.bits.LPCNR_NR_W15, rUpperLPCNR.nr_w4.bits.LPCNR_NR_W15);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W16       = %d, %d, %d", rLowerLPCNR.nr_w5.bits.LPCNR_NR_W16, rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W16, rUpperLPCNR.nr_w5.bits.LPCNR_NR_W16);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W17       = %d, %d, %d", rLowerLPCNR.nr_w5.bits.LPCNR_NR_W17, rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W17, rUpperLPCNR.nr_w5.bits.LPCNR_NR_W17);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W18       = %d, %d, %d", rLowerLPCNR.nr_w5.bits.LPCNR_NR_W18, rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W18, rUpperLPCNR.nr_w5.bits.LPCNR_NR_W18);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W19       = %d, %d, %d", rLowerLPCNR.nr_w5.bits.LPCNR_NR_W19, rSmoothLPCNR.nr_w5.bits.LPCNR_NR_W19, rUpperLPCNR.nr_w5.bits.LPCNR_NR_W19);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W20       = %d, %d, %d", rLowerLPCNR.nr_w6.bits.LPCNR_NR_W20, rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W20, rUpperLPCNR.nr_w6.bits.LPCNR_NR_W20);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W21       = %d, %d, %d", rLowerLPCNR.nr_w6.bits.LPCNR_NR_W21, rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W21, rUpperLPCNR.nr_w6.bits.LPCNR_NR_W21);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W22       = %d, %d, %d", rLowerLPCNR.nr_w6.bits.LPCNR_NR_W22, rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W22, rUpperLPCNR.nr_w6.bits.LPCNR_NR_W22);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W23       = %d, %d, %d", rLowerLPCNR.nr_w6.bits.LPCNR_NR_W23, rSmoothLPCNR.nr_w6.bits.LPCNR_NR_W23, rUpperLPCNR.nr_w6.bits.LPCNR_NR_W23);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W24       = %d, %d, %d", rLowerLPCNR.nr_w7.bits.LPCNR_NR_W24, rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W24, rUpperLPCNR.nr_w7.bits.LPCNR_NR_W24);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W25       = %d, %d, %d", rLowerLPCNR.nr_w7.bits.LPCNR_NR_W25, rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W25, rUpperLPCNR.nr_w7.bits.LPCNR_NR_W25);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W26       = %d, %d, %d", rLowerLPCNR.nr_w7.bits.LPCNR_NR_W26, rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W26, rUpperLPCNR.nr_w7.bits.LPCNR_NR_W26);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W27       = %d, %d, %d", rLowerLPCNR.nr_w7.bits.LPCNR_NR_W27, rSmoothLPCNR.nr_w7.bits.LPCNR_NR_W27, rUpperLPCNR.nr_w7.bits.LPCNR_NR_W27);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W28       = %d, %d, %d", rLowerLPCNR.nr_w8.bits.LPCNR_NR_W28, rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W28, rUpperLPCNR.nr_w8.bits.LPCNR_NR_W28);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W29       = %d, %d, %d", rLowerLPCNR.nr_w8.bits.LPCNR_NR_W29, rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W29, rUpperLPCNR.nr_w8.bits.LPCNR_NR_W29);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W30       = %d, %d, %d", rLowerLPCNR.nr_w8.bits.LPCNR_NR_W30, rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W30, rUpperLPCNR.nr_w8.bits.LPCNR_NR_W30);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W31       = %d, %d, %d", rLowerLPCNR.nr_w8.bits.LPCNR_NR_W31, rSmoothLPCNR.nr_w8.bits.LPCNR_NR_W31, rUpperLPCNR.nr_w8.bits.LPCNR_NR_W31);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W32       = %d, %d, %d", rLowerLPCNR.nr_w9.bits.LPCNR_NR_W32, rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W32, rUpperLPCNR.nr_w9.bits.LPCNR_NR_W32);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W33       = %d, %d, %d", rLowerLPCNR.nr_w9.bits.LPCNR_NR_W33, rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W33, rUpperLPCNR.nr_w9.bits.LPCNR_NR_W33);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W34       = %d, %d, %d", rLowerLPCNR.nr_w9.bits.LPCNR_NR_W34, rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W34, rUpperLPCNR.nr_w9.bits.LPCNR_NR_W34);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W35       = %d, %d, %d", rLowerLPCNR.nr_w9.bits.LPCNR_NR_W35, rSmoothLPCNR.nr_w9.bits.LPCNR_NR_W35, rUpperLPCNR.nr_w9.bits.LPCNR_NR_W35);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W36       = %d, %d, %d", rLowerLPCNR.nr_w10.bits.LPCNR_NR_W36, rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W36, rUpperLPCNR.nr_w10.bits.LPCNR_NR_W36);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W37       = %d, %d, %d", rLowerLPCNR.nr_w10.bits.LPCNR_NR_W37, rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W37, rUpperLPCNR.nr_w10.bits.LPCNR_NR_W37);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W38       = %d, %d, %d", rLowerLPCNR.nr_w10.bits.LPCNR_NR_W38, rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W38, rUpperLPCNR.nr_w10.bits.LPCNR_NR_W38);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W39       = %d, %d, %d", rLowerLPCNR.nr_w10.bits.LPCNR_NR_W39, rSmoothLPCNR.nr_w10.bits.LPCNR_NR_W39, rUpperLPCNR.nr_w10.bits.LPCNR_NR_W39);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W40       = %d, %d, %d", rLowerLPCNR.nr_w11.bits.LPCNR_NR_W40, rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W40, rUpperLPCNR.nr_w11.bits.LPCNR_NR_W40);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W41       = %d, %d, %d", rLowerLPCNR.nr_w11.bits.LPCNR_NR_W41, rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W41, rUpperLPCNR.nr_w11.bits.LPCNR_NR_W41);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W42       = %d, %d, %d", rLowerLPCNR.nr_w11.bits.LPCNR_NR_W42, rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W42, rUpperLPCNR.nr_w11.bits.LPCNR_NR_W42);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W43       = %d, %d, %d", rLowerLPCNR.nr_w11.bits.LPCNR_NR_W43, rSmoothLPCNR.nr_w11.bits.LPCNR_NR_W43, rUpperLPCNR.nr_w11.bits.LPCNR_NR_W43);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W44       = %d, %d, %d", rLowerLPCNR.nr_w12.bits.LPCNR_NR_W44, rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W44, rUpperLPCNR.nr_w12.bits.LPCNR_NR_W44);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W45       = %d, %d, %d", rLowerLPCNR.nr_w12.bits.LPCNR_NR_W45, rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W45, rUpperLPCNR.nr_w12.bits.LPCNR_NR_W45);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W46       = %d, %d, %d", rLowerLPCNR.nr_w12.bits.LPCNR_NR_W46, rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W46, rUpperLPCNR.nr_w12.bits.LPCNR_NR_W46);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W47       = %d, %d, %d", rLowerLPCNR.nr_w12.bits.LPCNR_NR_W47, rSmoothLPCNR.nr_w12.bits.LPCNR_NR_W47, rUpperLPCNR.nr_w12.bits.LPCNR_NR_W47);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W48       = %d, %d, %d", rLowerLPCNR.nr_w13.bits.LPCNR_NR_W48, rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W48, rUpperLPCNR.nr_w13.bits.LPCNR_NR_W48);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W49       = %d, %d, %d", rLowerLPCNR.nr_w13.bits.LPCNR_NR_W49, rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W49, rUpperLPCNR.nr_w13.bits.LPCNR_NR_W49);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W50       = %d, %d, %d", rLowerLPCNR.nr_w13.bits.LPCNR_NR_W50, rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W50, rUpperLPCNR.nr_w13.bits.LPCNR_NR_W50);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W51       = %d, %d, %d", rLowerLPCNR.nr_w13.bits.LPCNR_NR_W51, rSmoothLPCNR.nr_w13.bits.LPCNR_NR_W51, rUpperLPCNR.nr_w13.bits.LPCNR_NR_W51);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W52       = %d, %d, %d", rLowerLPCNR.nr_w14.bits.LPCNR_NR_W52, rSmoothLPCNR.nr_w14.bits.LPCNR_NR_W52, rUpperLPCNR.nr_w14.bits.LPCNR_NR_W52);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_W53       = %d, %d, %d", rLowerLPCNR.nr_w14.bits.LPCNR_NR_W53, rSmoothLPCNR.nr_w14.bits.LPCNR_NR_W53, rUpperLPCNR.nr_w14.bits.LPCNR_NR_W53);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_SM_TH       = %d, %d, %d", rLowerLPCNR.sm.bits.LPCNR_SM_TH, rSmoothLPCNR.sm.bits.LPCNR_SM_TH, rUpperLPCNR.sm.bits.LPCNR_SM_TH);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_BLD_TH       = %d, %d, %d", rLowerLPCNR.bld.bits.LPCNR_BLD_TH, rSmoothLPCNR.bld.bits.LPCNR_BLD_TH, rUpperLPCNR.bld.bits.LPCNR_BLD_TH);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_BLD_SP       = %d, %d, %d", rLowerLPCNR.bld.bits.LPCNR_BLD_SP, rSmoothLPCNR.bld.bits.LPCNR_BLD_SP, rUpperLPCNR.bld.bits.LPCNR_BLD_SP);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_BLD_W0       = %d, %d, %d", rLowerLPCNR.bld.bits.LPCNR_BLD_W0, rSmoothLPCNR.bld.bits.LPCNR_BLD_W0, rUpperLPCNR.bld.bits.LPCNR_BLD_W0);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_BLD_W1       = %d, %d, %d", rLowerLPCNR.bld.bits.LPCNR_BLD_W1, rSmoothLPCNR.bld.bits.LPCNR_BLD_W1, rUpperLPCNR.bld.bits.LPCNR_BLD_W1);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_Y_TH0       = %d, %d, %d", rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0, rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0, rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH0);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_Y_TH1       = %d, %d, %d", rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1, rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1, rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_TH1);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_Y_SP0       = %d, %d, %d", rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0, rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0, rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP0);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_Y_SP1       = %d, %d, %d", rLowerLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1, rSmoothLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1, rUpperLPCNR.ntrl_y.bits.LPCNR_NTRL_Y_SP1);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_C_TH       = %d, %d, %d", rLowerLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH, rSmoothLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH, rUpperLPCNR.ntrl_c.bits.LPCNR_NTRL_C_TH);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NTRL_C_SP       = %d, %d, %d", rLowerLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP, rSmoothLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP, rUpperLPCNR.ntrl_c.bits.LPCNR_NTRL_C_SP);
    INTER_LOG_IF(bSmoothLPCNRDebug, "[L,S,U]LPCNR_NR_SD       = %d, %d, %d", rLowerLPCNR.sm.bits.LPCNR_NR_SD, rSmoothLPCNR.sm.bits.LPCNR_NR_SD, rUpperLPCNR.sm.bits.LPCNR_NR_SD);

}

MVOID Smooth_MIX(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_MIX_T const& rUpperMIX,   // MIX settings for upper ISO
                ISP_NVRAM_MIX_T const& rLowerMIX,   // MIX settings for lower ISO
                ISP_NVRAM_MIX_T& rSmoothMIX)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_mix.enable", value, "0");
    MBOOL bSmoothMIXDebug = atoi(value);

    INTER_LOG_IF(bSmoothMIXDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_MIX_B1       = rLowerMIX.ctrl0.bits.MIX_B1;
    MINT32 pre_MIX_B0       = rLowerMIX.ctrl0.bits.MIX_B0;
    MINT32 pre_MIX_UV_DEFAULT       = rLowerMIX.ctrl0.bits.MIX_UV_DEFAULT;
    MINT32 pre_MIX_UV_EN       = rLowerMIX.ctrl0.bits.MIX_UV_EN;
    MINT32 pre_MIX_Y_DEFAULT       = rLowerMIX.ctrl0.bits.MIX_Y_DEFAULT;
    MINT32 pre_MIX_Y_EN       = rLowerMIX.ctrl0.bits.MIX_Y_EN;
    MINT32 pre_MIX_SLOPE_SEL       = rLowerMIX.ctrl0.bits.MIX_SLOPE_SEL;
    MINT32 pre_MIX_WT_SEL       = rLowerMIX.ctrl0.bits.MIX_WT_SEL;
    MINT32 pre_MIX_M0       = rLowerMIX.ctrl1.bits.MIX_M0;
    MINT32 pos_MIX_B1       = rUpperMIX.ctrl0.bits.MIX_B1;
    MINT32 pos_MIX_B0       = rUpperMIX.ctrl0.bits.MIX_B0;
    MINT32 pos_MIX_UV_DEFAULT       = rUpperMIX.ctrl0.bits.MIX_UV_DEFAULT;
    MINT32 pos_MIX_UV_EN       = rUpperMIX.ctrl0.bits.MIX_UV_EN;
    MINT32 pos_MIX_Y_DEFAULT       = rUpperMIX.ctrl0.bits.MIX_Y_DEFAULT;
    MINT32 pos_MIX_Y_EN       = rUpperMIX.ctrl0.bits.MIX_Y_EN;
    MINT32 pos_MIX_SLOPE_SEL       = rUpperMIX.ctrl0.bits.MIX_SLOPE_SEL;
    MINT32 pos_MIX_WT_SEL       = rUpperMIX.ctrl0.bits.MIX_WT_SEL;
    MINT32 pos_MIX_M0       = rUpperMIX.ctrl1.bits.MIX_M0;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 MIX_B1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_B1, pos_MIX_B1, 0);
    MINT32 MIX_B0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_B0, pos_MIX_B0, 0);
    MINT32 MIX_UV_DEFAULT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_UV_DEFAULT, pos_MIX_UV_DEFAULT, 1);
    MINT32 MIX_UV_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_UV_EN, pos_MIX_UV_EN, 1);
    MINT32 MIX_Y_DEFAULT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_Y_DEFAULT, pos_MIX_Y_DEFAULT, 1);
    MINT32 MIX_Y_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_Y_EN, pos_MIX_Y_EN, 1);
    MINT32 MIX_SLOPE_SEL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_SLOPE_SEL, pos_MIX_SLOPE_SEL, 1);
    MINT32 MIX_WT_SEL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_WT_SEL, pos_MIX_WT_SEL, 1);
    MINT32 MIX_M0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MIX_M0, pos_MIX_M0, 1);

	MINT32 MIX_DT =     rLowerMIX.ctrl0.bits.MIX_DT;//use low ISO
    MINT32 MIX_M1 =     rLowerMIX.ctrl1.bits.MIX_M1; //use low ISO

    // interpolation result assignment
    rSmoothMIX.ctrl0.bits.MIX_B1       = MIX_B1;
    rSmoothMIX.ctrl0.bits.MIX_B0       = MIX_B0;
    rSmoothMIX.ctrl0.bits.MIX_UV_DEFAULT       = MIX_UV_DEFAULT;
    rSmoothMIX.ctrl0.bits.MIX_UV_EN       = MIX_UV_EN;
    rSmoothMIX.ctrl0.bits.MIX_Y_DEFAULT       = MIX_Y_DEFAULT;
    rSmoothMIX.ctrl0.bits.MIX_Y_EN       = MIX_Y_EN;
    rSmoothMIX.ctrl0.bits.MIX_SLOPE_SEL       = MIX_SLOPE_SEL;
    rSmoothMIX.ctrl0.bits.MIX_WT_SEL       = MIX_WT_SEL;
    rSmoothMIX.ctrl1.bits.MIX_M0       = MIX_M0;
    rSmoothMIX.ctrl0.bits.MIX_DT       = MIX_DT;
    rSmoothMIX.ctrl1.bits.MIX_M1       = MIX_M1;


    // logging
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_B1       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_B1, rSmoothMIX.ctrl0.bits.MIX_B1, rUpperMIX.ctrl0.bits.MIX_B1);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_B0       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_B0, rSmoothMIX.ctrl0.bits.MIX_B0, rUpperMIX.ctrl0.bits.MIX_B0);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_UV_DEFAULT       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_UV_DEFAULT, rSmoothMIX.ctrl0.bits.MIX_UV_DEFAULT, rUpperMIX.ctrl0.bits.MIX_UV_DEFAULT);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_UV_EN       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_UV_EN, rSmoothMIX.ctrl0.bits.MIX_UV_EN, rUpperMIX.ctrl0.bits.MIX_UV_EN);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_Y_DEFAULT       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_Y_DEFAULT, rSmoothMIX.ctrl0.bits.MIX_Y_DEFAULT, rUpperMIX.ctrl0.bits.MIX_Y_DEFAULT);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_Y_EN       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_Y_EN, rSmoothMIX.ctrl0.bits.MIX_Y_EN, rUpperMIX.ctrl0.bits.MIX_Y_EN);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_SLOPE_SEL       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_SLOPE_SEL, rSmoothMIX.ctrl0.bits.MIX_SLOPE_SEL, rUpperMIX.ctrl0.bits.MIX_SLOPE_SEL);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_WT_SEL       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_WT_SEL, rSmoothMIX.ctrl0.bits.MIX_WT_SEL, rUpperMIX.ctrl0.bits.MIX_WT_SEL);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_M0       = %d, %d, %d", rLowerMIX.ctrl1.bits.MIX_M0, rSmoothMIX.ctrl1.bits.MIX_M0, rUpperMIX.ctrl1.bits.MIX_M0);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_DT       = %d, %d, %d", rLowerMIX.ctrl0.bits.MIX_DT, rSmoothMIX.ctrl0.bits.MIX_DT, rUpperMIX.ctrl0.bits.MIX_DT);
    INTER_LOG_IF(bSmoothMIXDebug, "[L,S,U]MIX_M1       = %d, %d, %d", rLowerMIX.ctrl1.bits.MIX_M1, rSmoothMIX.ctrl1.bits.MIX_M1, rUpperMIX.ctrl1.bits.MIX_M1);

}

MVOID Smooth_MFB(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_MFB_T const& rUpperMFB,   // MFB settings for upper ISO
                ISP_NVRAM_MFB_T const& rLowerMFB,   // MFB settings for lower ISO
                ISP_NVRAM_MFB_T& rSmoothMFB)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_mfb.enable", value, "0");
    MBOOL bSmoothMFBDebug = atoi(value);

    INTER_LOG_IF(bSmoothMFBDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_MFB_BLD_MBD_YL1_THL_0       = rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0;
    MINT32 pre_MFB_BLD_MBD_YL1_THL_1       = rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1;
    MINT32 pre_MFB_BLD_MBD_YL1_THL_2       = rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2;
    MINT32 pre_MFB_BLD_MBD_YL1_THL_3       = rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3;
    MINT32 pre_MFB_BLD_MBD_YL1_THL_4       = rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4;
    MINT32 pre_MFB_BLD_MBD_YL1_THH_0       = rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0;
    MINT32 pre_MFB_BLD_MBD_YL1_THH_1       = rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1;
    MINT32 pre_MFB_BLD_MBD_YL1_THH_2       = rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2;
    MINT32 pre_MFB_BLD_MBD_YL1_THH_3       = rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3;
    MINT32 pre_MFB_BLD_MBD_YL1_THH_4       = rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4;
    MINT32 pre_MFB_BLD_MBD_YL2_THL_0       = rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0;
    MINT32 pre_MFB_BLD_MBD_YL2_THL_1       = rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1;
    MINT32 pre_MFB_BLD_MBD_YL2_THL_2       = rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2;
    MINT32 pre_MFB_BLD_MBD_YL2_THL_3       = rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3;
    MINT32 pre_MFB_BLD_MBD_YL2_THL_4       = rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4;
    MINT32 pre_MFB_BLD_MBD_YL2_THH_0       = rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0;
    MINT32 pre_MFB_BLD_MBD_YL2_THH_1       = rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1;
    MINT32 pre_MFB_BLD_MBD_YL2_THH_2       = rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2;
    MINT32 pre_MFB_BLD_MBD_YL2_THH_3       = rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3;
    MINT32 pre_MFB_BLD_MBD_YL2_THH_4       = rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4;
    MINT32 pre_MFB_BLD_MBD_YL3_THL_0       = rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0;
    MINT32 pre_MFB_BLD_MBD_YL3_THL_1       = rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1;
    MINT32 pre_MFB_BLD_MBD_YL3_THL_2       = rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2;
    MINT32 pre_MFB_BLD_MBD_YL3_THL_3       = rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3;
    MINT32 pre_MFB_BLD_MBD_YL3_THL_4       = rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4;
    MINT32 pre_MFB_BLD_MBD_YL3_THH_0       = rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0;
    MINT32 pre_MFB_BLD_MBD_YL3_THH_1       = rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1;
    MINT32 pre_MFB_BLD_MBD_YL3_THH_2       = rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2;
    MINT32 pre_MFB_BLD_MBD_YL3_THH_3       = rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3;
    MINT32 pre_MFB_BLD_MBD_YL3_THH_4       = rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4;
    MINT32 pre_MFB_BLD_MBD_CL1_THL_0       = rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0;
    MINT32 pre_MFB_BLD_MBD_CL1_THL_1       = rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1;
    MINT32 pre_MFB_BLD_MBD_CL1_THL_2       = rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2;
    MINT32 pre_MFB_BLD_MBD_CL1_THL_3       = rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3;
    MINT32 pre_MFB_BLD_MBD_CL1_THL_4       = rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4;
    MINT32 pre_MFB_BLD_MBD_CL1_THH_0       = rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0;
    MINT32 pre_MFB_BLD_MBD_CL1_THH_1       = rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1;
    MINT32 pre_MFB_BLD_MBD_CL1_THH_2       = rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2;
    MINT32 pre_MFB_BLD_MBD_CL1_THH_3       = rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3;
    MINT32 pre_MFB_BLD_MBD_CL1_THH_4       = rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4;
    MINT32 pos_MFB_BLD_MBD_YL1_THL_0       = rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0;
    MINT32 pos_MFB_BLD_MBD_YL1_THL_1       = rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1;
    MINT32 pos_MFB_BLD_MBD_YL1_THL_2       = rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2;
    MINT32 pos_MFB_BLD_MBD_YL1_THL_3       = rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3;
    MINT32 pos_MFB_BLD_MBD_YL1_THL_4       = rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4;
    MINT32 pos_MFB_BLD_MBD_YL1_THH_0       = rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0;
    MINT32 pos_MFB_BLD_MBD_YL1_THH_1       = rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1;
    MINT32 pos_MFB_BLD_MBD_YL1_THH_2       = rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2;
    MINT32 pos_MFB_BLD_MBD_YL1_THH_3       = rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3;
    MINT32 pos_MFB_BLD_MBD_YL1_THH_4       = rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4;
    MINT32 pos_MFB_BLD_MBD_YL2_THL_0       = rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0;
    MINT32 pos_MFB_BLD_MBD_YL2_THL_1       = rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1;
    MINT32 pos_MFB_BLD_MBD_YL2_THL_2       = rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2;
    MINT32 pos_MFB_BLD_MBD_YL2_THL_3       = rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3;
    MINT32 pos_MFB_BLD_MBD_YL2_THL_4       = rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4;
    MINT32 pos_MFB_BLD_MBD_YL2_THH_0       = rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0;
    MINT32 pos_MFB_BLD_MBD_YL2_THH_1       = rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1;
    MINT32 pos_MFB_BLD_MBD_YL2_THH_2       = rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2;
    MINT32 pos_MFB_BLD_MBD_YL2_THH_3       = rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3;
    MINT32 pos_MFB_BLD_MBD_YL2_THH_4       = rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4;
    MINT32 pos_MFB_BLD_MBD_YL3_THL_0       = rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0;
    MINT32 pos_MFB_BLD_MBD_YL3_THL_1       = rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1;
    MINT32 pos_MFB_BLD_MBD_YL3_THL_2       = rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2;
    MINT32 pos_MFB_BLD_MBD_YL3_THL_3       = rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3;
    MINT32 pos_MFB_BLD_MBD_YL3_THL_4       = rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4;
    MINT32 pos_MFB_BLD_MBD_YL3_THH_0       = rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0;
    MINT32 pos_MFB_BLD_MBD_YL3_THH_1       = rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1;
    MINT32 pos_MFB_BLD_MBD_YL3_THH_2       = rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2;
    MINT32 pos_MFB_BLD_MBD_YL3_THH_3       = rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3;
    MINT32 pos_MFB_BLD_MBD_YL3_THH_4       = rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4;
    MINT32 pos_MFB_BLD_MBD_CL1_THL_0       = rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0;
    MINT32 pos_MFB_BLD_MBD_CL1_THL_1       = rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1;
    MINT32 pos_MFB_BLD_MBD_CL1_THL_2       = rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2;
    MINT32 pos_MFB_BLD_MBD_CL1_THL_3       = rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3;
    MINT32 pos_MFB_BLD_MBD_CL1_THL_4       = rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4;
    MINT32 pos_MFB_BLD_MBD_CL1_THH_0       = rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0;
    MINT32 pos_MFB_BLD_MBD_CL1_THH_1       = rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1;
    MINT32 pos_MFB_BLD_MBD_CL1_THH_2       = rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2;
    MINT32 pos_MFB_BLD_MBD_CL1_THH_3       = rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3;
    MINT32 pos_MFB_BLD_MBD_CL1_THH_4       = rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 MFB_BLD_MBD_YL1_THL_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THL_0, pos_MFB_BLD_MBD_YL1_THL_0, 0);
    MINT32 MFB_BLD_MBD_YL1_THL_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THL_1, pos_MFB_BLD_MBD_YL1_THL_1, 0);
    MINT32 MFB_BLD_MBD_YL1_THL_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THL_2, pos_MFB_BLD_MBD_YL1_THL_2, 0);
    MINT32 MFB_BLD_MBD_YL1_THL_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THL_3, pos_MFB_BLD_MBD_YL1_THL_3, 0);
    MINT32 MFB_BLD_MBD_YL1_THL_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THL_4, pos_MFB_BLD_MBD_YL1_THL_4, 0);
    MINT32 MFB_BLD_MBD_YL1_THH_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THH_0, pos_MFB_BLD_MBD_YL1_THH_0, 0);
    MINT32 MFB_BLD_MBD_YL1_THH_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THH_1, pos_MFB_BLD_MBD_YL1_THH_1, 0);
    MINT32 MFB_BLD_MBD_YL1_THH_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THH_2, pos_MFB_BLD_MBD_YL1_THH_2, 0);
    MINT32 MFB_BLD_MBD_YL1_THH_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THH_3, pos_MFB_BLD_MBD_YL1_THH_3, 0);
    MINT32 MFB_BLD_MBD_YL1_THH_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL1_THH_4, pos_MFB_BLD_MBD_YL1_THH_4, 0);
    MINT32 MFB_BLD_MBD_YL2_THL_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THL_0, pos_MFB_BLD_MBD_YL2_THL_0, 0);
    MINT32 MFB_BLD_MBD_YL2_THL_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THL_1, pos_MFB_BLD_MBD_YL2_THL_1, 0);
    MINT32 MFB_BLD_MBD_YL2_THL_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THL_2, pos_MFB_BLD_MBD_YL2_THL_2, 0);
    MINT32 MFB_BLD_MBD_YL2_THL_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THL_3, pos_MFB_BLD_MBD_YL2_THL_3, 0);
    MINT32 MFB_BLD_MBD_YL2_THL_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THL_4, pos_MFB_BLD_MBD_YL2_THL_4, 0);
    MINT32 MFB_BLD_MBD_YL2_THH_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THH_0, pos_MFB_BLD_MBD_YL2_THH_0, 0);
    MINT32 MFB_BLD_MBD_YL2_THH_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THH_1, pos_MFB_BLD_MBD_YL2_THH_1, 0);
    MINT32 MFB_BLD_MBD_YL2_THH_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THH_2, pos_MFB_BLD_MBD_YL2_THH_2, 0);
    MINT32 MFB_BLD_MBD_YL2_THH_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THH_3, pos_MFB_BLD_MBD_YL2_THH_3, 0);
    MINT32 MFB_BLD_MBD_YL2_THH_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL2_THH_4, pos_MFB_BLD_MBD_YL2_THH_4, 0);
    MINT32 MFB_BLD_MBD_YL3_THL_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THL_0, pos_MFB_BLD_MBD_YL3_THL_0, 0);
    MINT32 MFB_BLD_MBD_YL3_THL_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THL_1, pos_MFB_BLD_MBD_YL3_THL_1, 0);
    MINT32 MFB_BLD_MBD_YL3_THL_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THL_2, pos_MFB_BLD_MBD_YL3_THL_2, 0);
    MINT32 MFB_BLD_MBD_YL3_THL_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THL_3, pos_MFB_BLD_MBD_YL3_THL_3, 0);
    MINT32 MFB_BLD_MBD_YL3_THL_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THL_4, pos_MFB_BLD_MBD_YL3_THL_4, 0);
    MINT32 MFB_BLD_MBD_YL3_THH_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THH_0, pos_MFB_BLD_MBD_YL3_THH_0, 0);
    MINT32 MFB_BLD_MBD_YL3_THH_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THH_1, pos_MFB_BLD_MBD_YL3_THH_1, 0);
    MINT32 MFB_BLD_MBD_YL3_THH_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THH_2, pos_MFB_BLD_MBD_YL3_THH_2, 0);
    MINT32 MFB_BLD_MBD_YL3_THH_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THH_3, pos_MFB_BLD_MBD_YL3_THH_3, 0);
    MINT32 MFB_BLD_MBD_YL3_THH_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_YL3_THH_4, pos_MFB_BLD_MBD_YL3_THH_4, 0);
    MINT32 MFB_BLD_MBD_CL1_THL_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THL_0, pos_MFB_BLD_MBD_CL1_THL_0, 0);
    MINT32 MFB_BLD_MBD_CL1_THL_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THL_1, pos_MFB_BLD_MBD_CL1_THL_1, 0);
    MINT32 MFB_BLD_MBD_CL1_THL_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THL_2, pos_MFB_BLD_MBD_CL1_THL_2, 0);
    MINT32 MFB_BLD_MBD_CL1_THL_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THL_3, pos_MFB_BLD_MBD_CL1_THL_3, 0);
    MINT32 MFB_BLD_MBD_CL1_THL_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THL_4, pos_MFB_BLD_MBD_CL1_THL_4, 0);
    MINT32 MFB_BLD_MBD_CL1_THH_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THH_0, pos_MFB_BLD_MBD_CL1_THH_0, 0);
    MINT32 MFB_BLD_MBD_CL1_THH_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THH_1, pos_MFB_BLD_MBD_CL1_THH_1, 0);
    MINT32 MFB_BLD_MBD_CL1_THH_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THH_2, pos_MFB_BLD_MBD_CL1_THH_2, 0);
    MINT32 MFB_BLD_MBD_CL1_THH_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THH_3, pos_MFB_BLD_MBD_CL1_THH_3, 0);
    MINT32 MFB_BLD_MBD_CL1_THH_4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_MFB_BLD_MBD_CL1_THH_4, pos_MFB_BLD_MBD_CL1_THH_4, 0);


    // interpolation result assignment
    rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0       = MFB_BLD_MBD_YL1_THL_0;
    rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1       = MFB_BLD_MBD_YL1_THL_1;
    rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2       = MFB_BLD_MBD_YL1_THL_2;
    rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3       = MFB_BLD_MBD_YL1_THL_3;
    rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4       = MFB_BLD_MBD_YL1_THL_4;
    rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0       = MFB_BLD_MBD_YL1_THH_0;
    rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1       = MFB_BLD_MBD_YL1_THH_1;
    rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2       = MFB_BLD_MBD_YL1_THH_2;
    rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3       = MFB_BLD_MBD_YL1_THH_3;
    rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4       = MFB_BLD_MBD_YL1_THH_4;
    rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0       = MFB_BLD_MBD_YL2_THL_0;
    rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1       = MFB_BLD_MBD_YL2_THL_1;
    rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2       = MFB_BLD_MBD_YL2_THL_2;
    rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3       = MFB_BLD_MBD_YL2_THL_3;
    rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4       = MFB_BLD_MBD_YL2_THL_4;
    rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0       = MFB_BLD_MBD_YL2_THH_0;
    rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1       = MFB_BLD_MBD_YL2_THH_1;
    rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2       = MFB_BLD_MBD_YL2_THH_2;
    rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3       = MFB_BLD_MBD_YL2_THH_3;
    rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4       = MFB_BLD_MBD_YL2_THH_4;
    rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0       = MFB_BLD_MBD_YL3_THL_0;
    rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1       = MFB_BLD_MBD_YL3_THL_1;
    rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2       = MFB_BLD_MBD_YL3_THL_2;
    rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3       = MFB_BLD_MBD_YL3_THL_3;
    rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4       = MFB_BLD_MBD_YL3_THL_4;
    rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0       = MFB_BLD_MBD_YL3_THH_0;
    rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1       = MFB_BLD_MBD_YL3_THH_1;
    rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2       = MFB_BLD_MBD_YL3_THH_2;
    rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3       = MFB_BLD_MBD_YL3_THH_3;
    rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4       = MFB_BLD_MBD_YL3_THH_4;
    rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0       = MFB_BLD_MBD_CL1_THL_0;
    rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1       = MFB_BLD_MBD_CL1_THL_1;
    rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2       = MFB_BLD_MBD_CL1_THL_2;
    rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3       = MFB_BLD_MBD_CL1_THL_3;
    rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4       = MFB_BLD_MBD_CL1_THL_4;
    rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0       = MFB_BLD_MBD_CL1_THH_0;
    rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1       = MFB_BLD_MBD_CL1_THH_1;
    rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2       = MFB_BLD_MBD_CL1_THH_2;
    rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3       = MFB_BLD_MBD_CL1_THH_3;
    rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4       = MFB_BLD_MBD_CL1_THH_4;


    // logging
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THL_0       = %d, %d, %d", rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0, rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0, rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THL_1       = %d, %d, %d", rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1, rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1, rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THL_2       = %d, %d, %d", rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2, rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2, rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THL_3       = %d, %d, %d", rLowerMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3, rSmoothMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3, rUpperMFB.mbd_con1.bits.MFB_BLD_MBD_YL1_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THL_4       = %d, %d, %d", rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4, rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4, rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THH_0       = %d, %d, %d", rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0, rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0, rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THH_1       = %d, %d, %d", rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1, rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1, rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THH_2       = %d, %d, %d", rLowerMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2, rSmoothMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2, rUpperMFB.mbd_con2.bits.MFB_BLD_MBD_YL1_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THH_3       = %d, %d, %d", rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3, rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3, rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL1_THH_4       = %d, %d, %d", rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4, rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4, rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL1_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THL_0       = %d, %d, %d", rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0, rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0, rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THL_1       = %d, %d, %d", rLowerMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1, rSmoothMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1, rUpperMFB.mbd_con3.bits.MFB_BLD_MBD_YL2_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THL_2       = %d, %d, %d", rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2, rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2, rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THL_3       = %d, %d, %d", rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3, rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3, rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THL_4       = %d, %d, %d", rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4, rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4, rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THH_0       = %d, %d, %d", rLowerMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0, rSmoothMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0, rUpperMFB.mbd_con4.bits.MFB_BLD_MBD_YL2_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THH_1       = %d, %d, %d", rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1, rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1, rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THH_2       = %d, %d, %d", rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2, rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2, rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THH_3       = %d, %d, %d", rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3, rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3, rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL2_THH_4       = %d, %d, %d", rLowerMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4, rSmoothMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4, rUpperMFB.mbd_con5.bits.MFB_BLD_MBD_YL2_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THL_0       = %d, %d, %d", rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0, rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0, rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THL_1       = %d, %d, %d", rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1, rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1, rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THL_2       = %d, %d, %d", rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2, rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2, rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THL_3       = %d, %d, %d", rLowerMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3, rSmoothMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3, rUpperMFB.mbd_con6.bits.MFB_BLD_MBD_YL3_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THL_4       = %d, %d, %d", rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4, rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4, rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THH_0       = %d, %d, %d", rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0, rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0, rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THH_1       = %d, %d, %d", rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1, rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1, rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THH_2       = %d, %d, %d", rLowerMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2, rSmoothMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2, rUpperMFB.mbd_con7.bits.MFB_BLD_MBD_YL3_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THH_3       = %d, %d, %d", rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3, rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3, rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_YL3_THH_4       = %d, %d, %d", rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4, rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4, rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_YL3_THH_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THL_0       = %d, %d, %d", rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0, rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0, rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THL_1       = %d, %d, %d", rLowerMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1, rSmoothMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1, rUpperMFB.mbd_con8.bits.MFB_BLD_MBD_CL1_THL_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THL_2       = %d, %d, %d", rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2, rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2, rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THL_3       = %d, %d, %d", rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3, rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3, rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THL_4       = %d, %d, %d", rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4, rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4, rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THL_4);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THH_0       = %d, %d, %d", rLowerMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0, rSmoothMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0, rUpperMFB.mbd_con9.bits.MFB_BLD_MBD_CL1_THH_0);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THH_1       = %d, %d, %d", rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1, rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1, rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_1);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THH_2       = %d, %d, %d", rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2, rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2, rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_2);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THH_3       = %d, %d, %d", rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3, rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3, rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_3);
    INTER_LOG_IF(bSmoothMFBDebug, "[L,S,U]MFB_BLD_MBD_CL1_THH_4       = %d, %d, %d", rLowerMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4, rSmoothMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4, rUpperMFB.mbd_con10.bits.MFB_BLD_MBD_CL1_THH_4);

}

MVOID Smooth_FUS(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_FUS_T const& rUpperFUS,   // FUS settings for upper ISO
                ISP_NVRAM_FUS_T const& rLowerFUS,   // FUS settings for lower ISO
                ISP_NVRAM_FUS_T& rSmoothFUS)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_fus.enable", value, "0");
    MBOOL bSmoothFUSDebug = atoi(value);

    INTER_LOG_IF(bSmoothFUSDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_FUS_HDR_RATIO_0       = rLowerFUS.ratio1.bits.FUS_HDR_RATIO_0;
    MINT32 pre_FUS_HDR_RATIO_1       = rLowerFUS.ratio1.bits.FUS_HDR_RATIO_1;
    MINT32 pre_FUS_MOSE_RATIO_0       = rLowerFUS.ratio1.bits.FUS_MOSE_RATIO_0;
    MINT32 pre_FUS_MOSE_RATIO_1       = rLowerFUS.ratio1.bits.FUS_MOSE_RATIO_1;
    MINT32 pre_FUS_HDR_RATIO_2       = rLowerFUS.ratio2.bits.FUS_HDR_RATIO_2;
    MINT32 pre_FUS_MOSE_RATIO_2       = rLowerFUS.ratio2.bits.FUS_MOSE_RATIO_2;
    MINT32 pre_FUS_ALIGN_LP_TH_0       = rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_0;
    MINT32 pre_FUS_ALIGN_LP_TH_1       = rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_1;
    MINT32 pre_FUS_ALIGN_LP_TH_2       = rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_2;
    MINT32 pre_FUS_ALIGN_LP_TH_3       = rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_3;
    MINT32 pre_FUS_OSC_TH       = rLowerFUS.cfg.bits.FUS_OSC_TH;
    MINT32 pre_FUS_OSC_COUNT       = rLowerFUS.cfg.bits.FUS_OSC_COUNT;
    MINT32 pre_FUS_MO_EN       = rLowerFUS.cfg.bits.FUS_MO_EN;
    MINT32 pre_FUS_INPUT_MODE       = rLowerFUS.cfg.bits.FUS_INPUT_MODE;
    MINT32 pre_FUS_MO_TH       = rLowerFUS.cfg.bits.FUS_MO_TH;
    MINT32 pre_FUS_OSC_BLDWD       = rLowerFUS.cfg.bits.FUS_OSC_BLDWD;
    MINT32 pre_FUS_MO_BLDWD       = rLowerFUS.cfg.bits.FUS_MO_BLDWD;
    MINT32 pos_FUS_HDR_RATIO_0       = rUpperFUS.ratio1.bits.FUS_HDR_RATIO_0;
    MINT32 pos_FUS_HDR_RATIO_1       = rUpperFUS.ratio1.bits.FUS_HDR_RATIO_1;
    MINT32 pos_FUS_MOSE_RATIO_0       = rUpperFUS.ratio1.bits.FUS_MOSE_RATIO_0;
    MINT32 pos_FUS_MOSE_RATIO_1       = rUpperFUS.ratio1.bits.FUS_MOSE_RATIO_1;
    MINT32 pos_FUS_HDR_RATIO_2       = rUpperFUS.ratio2.bits.FUS_HDR_RATIO_2;
    MINT32 pos_FUS_MOSE_RATIO_2       = rUpperFUS.ratio2.bits.FUS_MOSE_RATIO_2;
    MINT32 pos_FUS_ALIGN_LP_TH_0       = rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_0;
    MINT32 pos_FUS_ALIGN_LP_TH_1       = rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_1;
    MINT32 pos_FUS_ALIGN_LP_TH_2       = rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_2;
    MINT32 pos_FUS_ALIGN_LP_TH_3       = rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_3;
    MINT32 pos_FUS_OSC_TH       = rUpperFUS.cfg.bits.FUS_OSC_TH;
    MINT32 pos_FUS_OSC_COUNT       = rUpperFUS.cfg.bits.FUS_OSC_COUNT;
    MINT32 pos_FUS_MO_EN       = rUpperFUS.cfg.bits.FUS_MO_EN;
    MINT32 pos_FUS_INPUT_MODE       = rUpperFUS.cfg.bits.FUS_INPUT_MODE;
    MINT32 pos_FUS_MO_TH       = rUpperFUS.cfg.bits.FUS_MO_TH;
    MINT32 pos_FUS_OSC_BLDWD       = rUpperFUS.cfg.bits.FUS_OSC_BLDWD;
    MINT32 pos_FUS_MO_BLDWD       = rUpperFUS.cfg.bits.FUS_MO_BLDWD;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 FUS_HDR_RATIO_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_HDR_RATIO_0, pos_FUS_HDR_RATIO_0, 0);
    MINT32 FUS_HDR_RATIO_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_HDR_RATIO_1, pos_FUS_HDR_RATIO_1, 0);
    MINT32 FUS_MOSE_RATIO_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MOSE_RATIO_0, pos_FUS_MOSE_RATIO_0, 0);
    MINT32 FUS_MOSE_RATIO_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MOSE_RATIO_1, pos_FUS_MOSE_RATIO_1, 0);
    MINT32 FUS_HDR_RATIO_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_HDR_RATIO_2, pos_FUS_HDR_RATIO_2, 0);
    MINT32 FUS_MOSE_RATIO_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MOSE_RATIO_2, pos_FUS_MOSE_RATIO_2, 0);
    MINT32 FUS_ALIGN_LP_TH_0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_ALIGN_LP_TH_0, pos_FUS_ALIGN_LP_TH_0, 0);
    MINT32 FUS_ALIGN_LP_TH_1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_ALIGN_LP_TH_1, pos_FUS_ALIGN_LP_TH_1, 0);
    MINT32 FUS_ALIGN_LP_TH_2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_ALIGN_LP_TH_2, pos_FUS_ALIGN_LP_TH_2, 0);
    MINT32 FUS_ALIGN_LP_TH_3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_ALIGN_LP_TH_3, pos_FUS_ALIGN_LP_TH_3, 0);
    MINT32 FUS_OSC_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_OSC_TH, pos_FUS_OSC_TH, 0);
    MINT32 FUS_OSC_COUNT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_OSC_COUNT, pos_FUS_OSC_COUNT, 0);
    MINT32 FUS_MO_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MO_EN, pos_FUS_MO_EN, 0);
    MINT32 FUS_INPUT_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_INPUT_MODE, pos_FUS_INPUT_MODE, 0);
    MINT32 FUS_MO_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MO_TH, pos_FUS_MO_TH, 0);
    MINT32 FUS_OSC_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_OSC_BLDWD, pos_FUS_OSC_BLDWD, 0);
    MINT32 FUS_MO_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_FUS_MO_BLDWD, pos_FUS_MO_BLDWD, 0);


    // interpolation result assignment
    rSmoothFUS.ratio1.bits.FUS_HDR_RATIO_0       = FUS_HDR_RATIO_0;
    rSmoothFUS.ratio1.bits.FUS_HDR_RATIO_1       = FUS_HDR_RATIO_1;
    rSmoothFUS.ratio1.bits.FUS_MOSE_RATIO_0       = FUS_MOSE_RATIO_0;
    rSmoothFUS.ratio1.bits.FUS_MOSE_RATIO_1       = FUS_MOSE_RATIO_1;
    rSmoothFUS.ratio2.bits.FUS_HDR_RATIO_2       = FUS_HDR_RATIO_2;
    rSmoothFUS.ratio2.bits.FUS_MOSE_RATIO_2       = FUS_MOSE_RATIO_2;
    rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_0       = FUS_ALIGN_LP_TH_0;
    rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_1       = FUS_ALIGN_LP_TH_1;
    rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_2       = FUS_ALIGN_LP_TH_2;
    rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_3       = FUS_ALIGN_LP_TH_3;
    rSmoothFUS.cfg.bits.FUS_OSC_TH       = FUS_OSC_TH;
    rSmoothFUS.cfg.bits.FUS_OSC_COUNT       = FUS_OSC_COUNT;
    rSmoothFUS.cfg.bits.FUS_MO_EN       = FUS_MO_EN;
    rSmoothFUS.cfg.bits.FUS_INPUT_MODE       = FUS_INPUT_MODE;
    rSmoothFUS.cfg.bits.FUS_MO_TH       = FUS_MO_TH;
    rSmoothFUS.cfg.bits.FUS_OSC_BLDWD       = FUS_OSC_BLDWD;
    rSmoothFUS.cfg.bits.FUS_MO_BLDWD       = FUS_MO_BLDWD;


    // logging
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_HDR_RATIO_0       = %d, %d, %d", rLowerFUS.ratio1.bits.FUS_HDR_RATIO_0, rSmoothFUS.ratio1.bits.FUS_HDR_RATIO_0, rUpperFUS.ratio1.bits.FUS_HDR_RATIO_0);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_HDR_RATIO_1       = %d, %d, %d", rLowerFUS.ratio1.bits.FUS_HDR_RATIO_1, rSmoothFUS.ratio1.bits.FUS_HDR_RATIO_1, rUpperFUS.ratio1.bits.FUS_HDR_RATIO_1);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MOSE_RATIO_0       = %d, %d, %d", rLowerFUS.ratio1.bits.FUS_MOSE_RATIO_0, rSmoothFUS.ratio1.bits.FUS_MOSE_RATIO_0, rUpperFUS.ratio1.bits.FUS_MOSE_RATIO_0);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MOSE_RATIO_1       = %d, %d, %d", rLowerFUS.ratio1.bits.FUS_MOSE_RATIO_1, rSmoothFUS.ratio1.bits.FUS_MOSE_RATIO_1, rUpperFUS.ratio1.bits.FUS_MOSE_RATIO_1);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_HDR_RATIO_2       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_HDR_RATIO_2, rSmoothFUS.ratio2.bits.FUS_HDR_RATIO_2, rUpperFUS.ratio2.bits.FUS_HDR_RATIO_2);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MOSE_RATIO_2       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_MOSE_RATIO_2, rSmoothFUS.ratio2.bits.FUS_MOSE_RATIO_2, rUpperFUS.ratio2.bits.FUS_MOSE_RATIO_2);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_ALIGN_LP_TH_0       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_0, rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_0, rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_0);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_ALIGN_LP_TH_1       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_1, rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_1, rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_1);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_ALIGN_LP_TH_2       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_2, rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_2, rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_2);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_ALIGN_LP_TH_3       = %d, %d, %d", rLowerFUS.ratio2.bits.FUS_ALIGN_LP_TH_3, rSmoothFUS.ratio2.bits.FUS_ALIGN_LP_TH_3, rUpperFUS.ratio2.bits.FUS_ALIGN_LP_TH_3);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_OSC_TH       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_OSC_TH, rSmoothFUS.cfg.bits.FUS_OSC_TH, rUpperFUS.cfg.bits.FUS_OSC_TH);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_OSC_COUNT       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_OSC_COUNT, rSmoothFUS.cfg.bits.FUS_OSC_COUNT, rUpperFUS.cfg.bits.FUS_OSC_COUNT);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MO_EN       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_MO_EN, rSmoothFUS.cfg.bits.FUS_MO_EN, rUpperFUS.cfg.bits.FUS_MO_EN);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_INPUT_MODE       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_INPUT_MODE, rSmoothFUS.cfg.bits.FUS_INPUT_MODE, rUpperFUS.cfg.bits.FUS_INPUT_MODE);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MO_TH       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_MO_TH, rSmoothFUS.cfg.bits.FUS_MO_TH, rUpperFUS.cfg.bits.FUS_MO_TH);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_OSC_BLDWD       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_OSC_BLDWD, rSmoothFUS.cfg.bits.FUS_OSC_BLDWD, rUpperFUS.cfg.bits.FUS_OSC_BLDWD);
    INTER_LOG_IF(bSmoothFUSDebug, "[L,S,U]FUS_MO_BLDWD       = %d, %d, %d", rLowerFUS.cfg.bits.FUS_MO_BLDWD, rSmoothFUS.cfg.bits.FUS_MO_BLDWD, rUpperFUS.cfg.bits.FUS_MO_BLDWD);

}

MVOID Smooth_ZFUS(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_ZFUS_T const& rUpperZFUS,   // ZFUS settings for upper ISO
                ISP_NVRAM_ZFUS_T const& rLowerZFUS,   // ZFUS settings for lower ISO
                ISP_NVRAM_ZFUS_T& rSmoothZFUS)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_zfus.enable", value, "0");
    MBOOL bSmoothZFUSDebug = atoi(value);

    INTER_LOG_IF(bSmoothZFUSDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_ZFUS_MASE_BLDWD       = rLowerZFUS.ma.bits.ZFUS_MASE_BLDWD;
    MINT32 pre_ZFUS_OSBLD_WD       = rLowerZFUS.ma.bits.ZFUS_OSBLD_WD;
    MINT32 pre_ZFUS_SEYOS_LEFAC       = rLowerZFUS.ma.bits.ZFUS_SEYOS_LEFAC;
    MINT32 pre_ZFUS_SENOS_LEFAC       = rLowerZFUS.ma.bits.ZFUS_SENOS_LEFAC;
    MINT32 pre_ZFUS_DIFF_LB       = rLowerZFUS.ma.bits.ZFUS_DIFF_LB;
    MINT32 pre_ZFUS_MOBLD_FT       = rLowerZFUS.mc.bits.ZFUS_MOBLD_FT;
    MINT32 pre_ZFUS_MOTH_RATIO       = rLowerZFUS.mc.bits.ZFUS_MOTH_RATIO;
    MINT32 pre_ZFUS_MOSE_TH       = rLowerZFUS.mc.bits.ZFUS_MOSE_TH;
    MINT32 pre_ZFUS_MOSE_BLDWD       = rLowerZFUS.mc.bits.ZFUS_MOSE_BLDWD;
    MINT32 pre_ZFUS_OSC_TH       = rLowerZFUS.osc.bits.ZFUS_OSC_TH;
    MINT32 pre_ZFUS_SEDIR_SL       = rLowerZFUS.osc.bits.ZFUS_SEDIR_SL;
    MINT32 pre_ZFUS_SEBLD_WD       = rLowerZFUS.osc.bits.ZFUS_SEBLD_WD;
    MINT32 pre_ZFUS_LEBLD_WD       = rLowerZFUS.osc.bits.ZFUS_LEBLD_WD;
    MINT32 pre_ZFUS_LE_INV_CTL       = rLowerZFUS.osc.bits.ZFUS_LE_INV_CTL;
    MINT32 pre_ZFUS_EDGE       = rLowerZFUS.osc.bits.ZFUS_EDGE;
    MINT32 pre_ZFUS_PS_TH       = rLowerZFUS.tune.bits.ZFUS_PS_TH;
    MINT32 pre_ZFUS_MO_EN       = rLowerZFUS.mc.bits.ZFUS_MO_EN;
    MINT32 pre_ZFUS_PS_BLUR       = rLowerZFUS.tune.bits.ZFUS_PS_BLUR;
    MINT32 pre_ZFUS_OSC_REPEN       = rLowerZFUS.tune.bits.ZFUS_OSC_REPEN;
    MINT32 pre_ZFUS_SOFT_TH_EN       = rLowerZFUS.tune.bits.ZFUS_SOFT_TH_EN;
    MINT32 pre_ZFUS_LE_LOWPA_EN       = rLowerZFUS.tune.bits.ZFUS_LE_LOWPA_EN;
    MINT32 pre_ZFUS_SE_LOWPA_EN       = rLowerZFUS.tune.bits.ZFUS_SE_LOWPA_EN;
    MINT32 pre_ZFUS_PSSEC_ONLY       = rLowerZFUS.tune.bits.ZFUS_PSSEC_ONLY;
    MINT32 pre_ZFUS_OSCLE_ONLY       = rLowerZFUS.tune.bits.ZFUS_OSCLE_ONLY;
    MINT32 pre_ZFUS_MOLE_DIREN       = rLowerZFUS.tune.bits.ZFUS_MOLE_DIREN;
    MINT32 pre_ZFUS_MOSE_DIREN       = rLowerZFUS.tune.bits.ZFUS_MOSE_DIREN;
    MINT32 pre_ZFUS_MO_2DBLD_EN       = rLowerZFUS.tune.bits.ZFUS_MO_2DBLD_EN;
    MINT32 pos_ZFUS_MASE_BLDWD       = rUpperZFUS.ma.bits.ZFUS_MASE_BLDWD;
    MINT32 pos_ZFUS_OSBLD_WD       = rUpperZFUS.ma.bits.ZFUS_OSBLD_WD;
    MINT32 pos_ZFUS_SEYOS_LEFAC       = rUpperZFUS.ma.bits.ZFUS_SEYOS_LEFAC;
    MINT32 pos_ZFUS_SENOS_LEFAC       = rUpperZFUS.ma.bits.ZFUS_SENOS_LEFAC;
    MINT32 pos_ZFUS_DIFF_LB       = rUpperZFUS.ma.bits.ZFUS_DIFF_LB;
    MINT32 pos_ZFUS_MOBLD_FT       = rUpperZFUS.mc.bits.ZFUS_MOBLD_FT;
    MINT32 pos_ZFUS_MOTH_RATIO       = rUpperZFUS.mc.bits.ZFUS_MOTH_RATIO;
    MINT32 pos_ZFUS_MOSE_TH       = rUpperZFUS.mc.bits.ZFUS_MOSE_TH;
    MINT32 pos_ZFUS_MOSE_BLDWD       = rUpperZFUS.mc.bits.ZFUS_MOSE_BLDWD;
    MINT32 pos_ZFUS_OSC_TH       = rUpperZFUS.osc.bits.ZFUS_OSC_TH;
    MINT32 pos_ZFUS_SEDIR_SL       = rUpperZFUS.osc.bits.ZFUS_SEDIR_SL;
    MINT32 pos_ZFUS_SEBLD_WD       = rUpperZFUS.osc.bits.ZFUS_SEBLD_WD;
    MINT32 pos_ZFUS_LEBLD_WD       = rUpperZFUS.osc.bits.ZFUS_LEBLD_WD;
    MINT32 pos_ZFUS_LE_INV_CTL       = rUpperZFUS.osc.bits.ZFUS_LE_INV_CTL;
    MINT32 pos_ZFUS_EDGE       = rUpperZFUS.osc.bits.ZFUS_EDGE;
    MINT32 pos_ZFUS_PS_TH       = rUpperZFUS.tune.bits.ZFUS_PS_TH;
    MINT32 pos_ZFUS_MO_EN       = rUpperZFUS.mc.bits.ZFUS_MO_EN;
    MINT32 pos_ZFUS_PS_BLUR       = rUpperZFUS.tune.bits.ZFUS_PS_BLUR;
    MINT32 pos_ZFUS_OSC_REPEN       = rUpperZFUS.tune.bits.ZFUS_OSC_REPEN;
    MINT32 pos_ZFUS_SOFT_TH_EN       = rUpperZFUS.tune.bits.ZFUS_SOFT_TH_EN;
    MINT32 pos_ZFUS_LE_LOWPA_EN       = rUpperZFUS.tune.bits.ZFUS_LE_LOWPA_EN;
    MINT32 pos_ZFUS_SE_LOWPA_EN       = rUpperZFUS.tune.bits.ZFUS_SE_LOWPA_EN;
    MINT32 pos_ZFUS_PSSEC_ONLY       = rUpperZFUS.tune.bits.ZFUS_PSSEC_ONLY;
    MINT32 pos_ZFUS_OSCLE_ONLY       = rUpperZFUS.tune.bits.ZFUS_OSCLE_ONLY;
    MINT32 pos_ZFUS_MOLE_DIREN       = rUpperZFUS.tune.bits.ZFUS_MOLE_DIREN;
    MINT32 pos_ZFUS_MOSE_DIREN       = rUpperZFUS.tune.bits.ZFUS_MOSE_DIREN;
    MINT32 pos_ZFUS_MO_2DBLD_EN       = rUpperZFUS.tune.bits.ZFUS_MO_2DBLD_EN;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 ZFUS_MASE_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MASE_BLDWD, pos_ZFUS_MASE_BLDWD, 0);
    MINT32 ZFUS_OSBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_OSBLD_WD, pos_ZFUS_OSBLD_WD, 0);
    MINT32 ZFUS_SEYOS_LEFAC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SEYOS_LEFAC, pos_ZFUS_SEYOS_LEFAC, 0);
    MINT32 ZFUS_SENOS_LEFAC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SENOS_LEFAC, pos_ZFUS_SENOS_LEFAC, 0);
    MINT32 ZFUS_DIFF_LB       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_DIFF_LB, pos_ZFUS_DIFF_LB, 0);
    MINT32 ZFUS_MOBLD_FT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOBLD_FT, pos_ZFUS_MOBLD_FT, 0);
    MINT32 ZFUS_MOTH_RATIO       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOTH_RATIO, pos_ZFUS_MOTH_RATIO, 0);
    MINT32 ZFUS_MOSE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOSE_TH, pos_ZFUS_MOSE_TH, 0);
    MINT32 ZFUS_MOSE_BLDWD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOSE_BLDWD, pos_ZFUS_MOSE_BLDWD, 0);
    MINT32 ZFUS_OSC_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_OSC_TH, pos_ZFUS_OSC_TH, 0);
    MINT32 ZFUS_SEDIR_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SEDIR_SL, pos_ZFUS_SEDIR_SL, 0);
    MINT32 ZFUS_SEBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SEBLD_WD, pos_ZFUS_SEBLD_WD, 0);
    MINT32 ZFUS_LEBLD_WD       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_LEBLD_WD, pos_ZFUS_LEBLD_WD, 0);
    MINT32 ZFUS_LE_INV_CTL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_LE_INV_CTL, pos_ZFUS_LE_INV_CTL, 0);
    MINT32 ZFUS_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_EDGE, pos_ZFUS_EDGE, 0);
    MINT32 ZFUS_PS_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_PS_TH, pos_ZFUS_PS_TH, 0);
    MINT32 ZFUS_MO_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MO_EN, pos_ZFUS_MO_EN, 1);
    MINT32 ZFUS_PS_BLUR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_PS_BLUR, pos_ZFUS_PS_BLUR, 1);
    MINT32 ZFUS_OSC_REPEN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_OSC_REPEN, pos_ZFUS_OSC_REPEN, 1);
    MINT32 ZFUS_SOFT_TH_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SOFT_TH_EN, pos_ZFUS_SOFT_TH_EN, 1);
    MINT32 ZFUS_LE_LOWPA_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_LE_LOWPA_EN, pos_ZFUS_LE_LOWPA_EN, 1);
    MINT32 ZFUS_SE_LOWPA_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_SE_LOWPA_EN, pos_ZFUS_SE_LOWPA_EN, 1);
    MINT32 ZFUS_PSSEC_ONLY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_PSSEC_ONLY, pos_ZFUS_PSSEC_ONLY, 1);
    MINT32 ZFUS_OSCLE_ONLY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_OSCLE_ONLY, pos_ZFUS_OSCLE_ONLY, 1);
    MINT32 ZFUS_MOLE_DIREN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOLE_DIREN, pos_ZFUS_MOLE_DIREN, 1);
    MINT32 ZFUS_MOSE_DIREN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MOSE_DIREN, pos_ZFUS_MOSE_DIREN, 1);
    MINT32 ZFUS_MO_2DBLD_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_ZFUS_MO_2DBLD_EN, pos_ZFUS_MO_2DBLD_EN, 1);


    // interpolation result assignment
    rSmoothZFUS.ma.bits.ZFUS_MASE_BLDWD       = ZFUS_MASE_BLDWD;
    rSmoothZFUS.ma.bits.ZFUS_OSBLD_WD       = ZFUS_OSBLD_WD;
    rSmoothZFUS.ma.bits.ZFUS_SEYOS_LEFAC       = ZFUS_SEYOS_LEFAC;
    rSmoothZFUS.ma.bits.ZFUS_SENOS_LEFAC       = ZFUS_SENOS_LEFAC;
    rSmoothZFUS.ma.bits.ZFUS_DIFF_LB       = ZFUS_DIFF_LB;
    rSmoothZFUS.mc.bits.ZFUS_MOBLD_FT       = ZFUS_MOBLD_FT;
    rSmoothZFUS.mc.bits.ZFUS_MOTH_RATIO       = ZFUS_MOTH_RATIO;
    rSmoothZFUS.mc.bits.ZFUS_MOSE_TH       = ZFUS_MOSE_TH;
    rSmoothZFUS.mc.bits.ZFUS_MOSE_BLDWD       = ZFUS_MOSE_BLDWD;
    rSmoothZFUS.osc.bits.ZFUS_OSC_TH       = ZFUS_OSC_TH;
    rSmoothZFUS.osc.bits.ZFUS_SEDIR_SL       = ZFUS_SEDIR_SL;
    rSmoothZFUS.osc.bits.ZFUS_SEBLD_WD       = ZFUS_SEBLD_WD;
    rSmoothZFUS.osc.bits.ZFUS_LEBLD_WD       = ZFUS_LEBLD_WD;
    rSmoothZFUS.osc.bits.ZFUS_LE_INV_CTL       = ZFUS_LE_INV_CTL;
    rSmoothZFUS.osc.bits.ZFUS_EDGE       = ZFUS_EDGE;
    rSmoothZFUS.tune.bits.ZFUS_PS_TH       = ZFUS_PS_TH;
    rSmoothZFUS.mc.bits.ZFUS_MO_EN       = ZFUS_MO_EN;
    rSmoothZFUS.tune.bits.ZFUS_PS_BLUR       = ZFUS_PS_BLUR;
    rSmoothZFUS.tune.bits.ZFUS_OSC_REPEN       = ZFUS_OSC_REPEN;
    rSmoothZFUS.tune.bits.ZFUS_SOFT_TH_EN       = ZFUS_SOFT_TH_EN;
    rSmoothZFUS.tune.bits.ZFUS_LE_LOWPA_EN       = ZFUS_LE_LOWPA_EN;
    rSmoothZFUS.tune.bits.ZFUS_SE_LOWPA_EN       = ZFUS_SE_LOWPA_EN;
    rSmoothZFUS.tune.bits.ZFUS_PSSEC_ONLY       = ZFUS_PSSEC_ONLY;
    rSmoothZFUS.tune.bits.ZFUS_OSCLE_ONLY       = ZFUS_OSCLE_ONLY;
    rSmoothZFUS.tune.bits.ZFUS_MOLE_DIREN       = ZFUS_MOLE_DIREN;
    rSmoothZFUS.tune.bits.ZFUS_MOSE_DIREN       = ZFUS_MOSE_DIREN;
    rSmoothZFUS.tune.bits.ZFUS_MO_2DBLD_EN       = ZFUS_MO_2DBLD_EN;


    // logging
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MASE_BLDWD       = %d, %d, %d", rLowerZFUS.ma.bits.ZFUS_MASE_BLDWD, rSmoothZFUS.ma.bits.ZFUS_MASE_BLDWD, rUpperZFUS.ma.bits.ZFUS_MASE_BLDWD);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_OSBLD_WD       = %d, %d, %d", rLowerZFUS.ma.bits.ZFUS_OSBLD_WD, rSmoothZFUS.ma.bits.ZFUS_OSBLD_WD, rUpperZFUS.ma.bits.ZFUS_OSBLD_WD);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SEYOS_LEFAC       = %d, %d, %d", rLowerZFUS.ma.bits.ZFUS_SEYOS_LEFAC, rSmoothZFUS.ma.bits.ZFUS_SEYOS_LEFAC, rUpperZFUS.ma.bits.ZFUS_SEYOS_LEFAC);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SENOS_LEFAC       = %d, %d, %d", rLowerZFUS.ma.bits.ZFUS_SENOS_LEFAC, rSmoothZFUS.ma.bits.ZFUS_SENOS_LEFAC, rUpperZFUS.ma.bits.ZFUS_SENOS_LEFAC);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_DIFF_LB       = %d, %d, %d", rLowerZFUS.ma.bits.ZFUS_DIFF_LB, rSmoothZFUS.ma.bits.ZFUS_DIFF_LB, rUpperZFUS.ma.bits.ZFUS_DIFF_LB);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOBLD_FT       = %d, %d, %d", rLowerZFUS.mc.bits.ZFUS_MOBLD_FT, rSmoothZFUS.mc.bits.ZFUS_MOBLD_FT, rUpperZFUS.mc.bits.ZFUS_MOBLD_FT);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOTH_RATIO       = %d, %d, %d", rLowerZFUS.mc.bits.ZFUS_MOTH_RATIO, rSmoothZFUS.mc.bits.ZFUS_MOTH_RATIO, rUpperZFUS.mc.bits.ZFUS_MOTH_RATIO);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOSE_TH       = %d, %d, %d", rLowerZFUS.mc.bits.ZFUS_MOSE_TH, rSmoothZFUS.mc.bits.ZFUS_MOSE_TH, rUpperZFUS.mc.bits.ZFUS_MOSE_TH);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOSE_BLDWD       = %d, %d, %d", rLowerZFUS.mc.bits.ZFUS_MOSE_BLDWD, rSmoothZFUS.mc.bits.ZFUS_MOSE_BLDWD, rUpperZFUS.mc.bits.ZFUS_MOSE_BLDWD);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_OSC_TH       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_OSC_TH, rSmoothZFUS.osc.bits.ZFUS_OSC_TH, rUpperZFUS.osc.bits.ZFUS_OSC_TH);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SEDIR_SL       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_SEDIR_SL, rSmoothZFUS.osc.bits.ZFUS_SEDIR_SL, rUpperZFUS.osc.bits.ZFUS_SEDIR_SL);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SEBLD_WD       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_SEBLD_WD, rSmoothZFUS.osc.bits.ZFUS_SEBLD_WD, rUpperZFUS.osc.bits.ZFUS_SEBLD_WD);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_LEBLD_WD       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_LEBLD_WD, rSmoothZFUS.osc.bits.ZFUS_LEBLD_WD, rUpperZFUS.osc.bits.ZFUS_LEBLD_WD);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_LE_INV_CTL       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_LE_INV_CTL, rSmoothZFUS.osc.bits.ZFUS_LE_INV_CTL, rUpperZFUS.osc.bits.ZFUS_LE_INV_CTL);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_EDGE       = %d, %d, %d", rLowerZFUS.osc.bits.ZFUS_EDGE, rSmoothZFUS.osc.bits.ZFUS_EDGE, rUpperZFUS.osc.bits.ZFUS_EDGE);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_PS_TH       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_PS_TH, rSmoothZFUS.tune.bits.ZFUS_PS_TH, rUpperZFUS.tune.bits.ZFUS_PS_TH);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MO_EN       = %d, %d, %d", rLowerZFUS.mc.bits.ZFUS_MO_EN, rSmoothZFUS.mc.bits.ZFUS_MO_EN, rUpperZFUS.mc.bits.ZFUS_MO_EN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_PS_BLUR       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_PS_BLUR, rSmoothZFUS.tune.bits.ZFUS_PS_BLUR, rUpperZFUS.tune.bits.ZFUS_PS_BLUR);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_OSC_REPEN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_OSC_REPEN, rSmoothZFUS.tune.bits.ZFUS_OSC_REPEN, rUpperZFUS.tune.bits.ZFUS_OSC_REPEN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SOFT_TH_EN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_SOFT_TH_EN, rSmoothZFUS.tune.bits.ZFUS_SOFT_TH_EN, rUpperZFUS.tune.bits.ZFUS_SOFT_TH_EN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_LE_LOWPA_EN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_LE_LOWPA_EN, rSmoothZFUS.tune.bits.ZFUS_LE_LOWPA_EN, rUpperZFUS.tune.bits.ZFUS_LE_LOWPA_EN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_SE_LOWPA_EN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_SE_LOWPA_EN, rSmoothZFUS.tune.bits.ZFUS_SE_LOWPA_EN, rUpperZFUS.tune.bits.ZFUS_SE_LOWPA_EN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_PSSEC_ONLY       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_PSSEC_ONLY, rSmoothZFUS.tune.bits.ZFUS_PSSEC_ONLY, rUpperZFUS.tune.bits.ZFUS_PSSEC_ONLY);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_OSCLE_ONLY       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_OSCLE_ONLY, rSmoothZFUS.tune.bits.ZFUS_OSCLE_ONLY, rUpperZFUS.tune.bits.ZFUS_OSCLE_ONLY);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOLE_DIREN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_MOLE_DIREN, rSmoothZFUS.tune.bits.ZFUS_MOLE_DIREN, rUpperZFUS.tune.bits.ZFUS_MOLE_DIREN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MOSE_DIREN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_MOSE_DIREN, rSmoothZFUS.tune.bits.ZFUS_MOSE_DIREN, rUpperZFUS.tune.bits.ZFUS_MOSE_DIREN);
    INTER_LOG_IF(bSmoothZFUSDebug, "[L,S,U]ZFUS_MO_2DBLD_EN       = %d, %d, %d", rLowerZFUS.tune.bits.ZFUS_MO_2DBLD_EN, rSmoothZFUS.tune.bits.ZFUS_MO_2DBLD_EN, rUpperZFUS.tune.bits.ZFUS_MO_2DBLD_EN);

}

MVOID Smooth_YNRS(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                ISP_NVRAM_YNRS_T const& rUpperYNRS,   // YNRS settings for upper ISO
                ISP_NVRAM_YNRS_T const& rLowerYNRS,   // YNRS settings for lower ISO
                ISP_NVRAM_YNRS_T& rSmoothYNRS)   // Output
{
    char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ynrs.enable", value, "0");
    MBOOL bSmoothYNRSDebug = atoi(value);

    INTER_LOG_IF(bSmoothYNRSDebug,"[%s()] u4RealISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4RealISO, u4UpperISO, u4LowerISO);

    // pre / post value assignment
    MINT32 pre_YNRS_SL2_LINK       = rLowerYNRS.con1.bits.YNRS_SL2_LINK;
    MINT32 pre_YNRS_Y_FLT0_IDX       = rLowerYNRS.con1.bits.YNRS_Y_FLT0_IDX;
    MINT32 pre_YNRS_C_SM_EDGE_TH       = rLowerYNRS.con2.bits.YNRS_C_SM_EDGE_TH;
    MINT32 pre_YNRS_C_SM_EDGE       = rLowerYNRS.con2.bits.YNRS_C_SM_EDGE;
    MINT32 pre_YNRS_PTY_GAIN_TH       = rLowerYNRS.yad2.bits.YNRS_PTY_GAIN_TH;
    MINT32 pre_YNRS_Y_CPX4       = rLowerYNRS.y4lut1.bits.YNRS_Y_CPX4;
    MINT32 pre_YNRS_Y_CPX3       = rLowerYNRS.y4lut1.bits.YNRS_Y_CPX3;
    MINT32 pre_YNRS_Y_CPX2       = rLowerYNRS.y4lut1.bits.YNRS_Y_CPX2;
    MINT32 pre_YNRS_Y_CPX1       = rLowerYNRS.y4lut1.bits.YNRS_Y_CPX1;
    MINT32 pre_YNRS_Y_SCALE_CPY3       = rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3;
    MINT32 pre_YNRS_Y_SCALE_CPY2       = rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2;
    MINT32 pre_YNRS_Y_SCALE_CPY1       = rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1;
    MINT32 pre_YNRS_Y_SCALE_CPY0       = rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0;
    MINT32 pre_YNRS_Y_SCALE_SP3       = rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3;
    MINT32 pre_YNRS_Y_SCALE_SP2       = rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2;
    MINT32 pre_YNRS_Y_SCALE_SP1       = rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1;
    MINT32 pre_YNRS_Y_SCALE_SP0       = rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0;
    MINT32 pre_YNRS_C_CPX3       = rLowerYNRS.c4lut1.bits.YNRS_C_CPX3;
    MINT32 pre_YNRS_C_CPX2       = rLowerYNRS.c4lut1.bits.YNRS_C_CPX2;
    MINT32 pre_YNRS_C_CPX1       = rLowerYNRS.c4lut1.bits.YNRS_C_CPX1;
    MINT32 pre_YNRS_C_SCALE_CPY3       = rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3;
    MINT32 pre_YNRS_C_SCALE_CPY2       = rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2;
    MINT32 pre_YNRS_C_SCALE_CPY1       = rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1;
    MINT32 pre_YNRS_C_SCALE_CPY0       = rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0;
    MINT32 pre_YNRS_C_SCALE_SP3       = rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP3;
    MINT32 pre_YNRS_C_SCALE_SP2       = rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP2;
    MINT32 pre_YNRS_C_SCALE_SP1       = rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP1;
    MINT32 pre_YNRS_C_SCALE_SP0       = rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP0;
    MINT32 pre_YNRS_Y_ACT_CPY3       = rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3;
    MINT32 pre_YNRS_Y_ACT_CPY2       = rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2;
    MINT32 pre_YNRS_Y_ACT_CPY1       = rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1;
    MINT32 pre_YNRS_Y_ACT_CPY0       = rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0;
    MINT32 pre_YNRS_Y_ACT_SP3       = rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP3;
    MINT32 pre_YNRS_Y_ACT_SP2       = rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP2;
    MINT32 pre_YNRS_Y_ACT_SP1       = rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP1;
    MINT32 pre_YNRS_Y_ACT_SP0       = rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP0;
    MINT32 pre_YNRS_SL2_X3       = rLowerYNRS.l4lut1.bits.YNRS_SL2_X3;
    MINT32 pre_YNRS_SL2_X2       = rLowerYNRS.l4lut1.bits.YNRS_SL2_X2;
    MINT32 pre_YNRS_SL2_X1       = rLowerYNRS.l4lut1.bits.YNRS_SL2_X1;
    MINT32 pre_YNRS_SL2_GAIN3       = rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN3;
    MINT32 pre_YNRS_SL2_GAIN2       = rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN2;
    MINT32 pre_YNRS_SL2_GAIN1       = rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN1;
    MINT32 pre_YNRS_SL2_GAIN0       = rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN0;
    MINT32 pre_YNRS_SL2_SP3       = rLowerYNRS.l4lut3.bits.YNRS_SL2_SP3;
    MINT32 pre_YNRS_SL2_SP2       = rLowerYNRS.l4lut3.bits.YNRS_SL2_SP2;
    MINT32 pre_YNRS_SL2_SP1       = rLowerYNRS.l4lut3.bits.YNRS_SL2_SP1;
    MINT32 pre_YNRS_SL2_SP0       = rLowerYNRS.l4lut3.bits.YNRS_SL2_SP0;
    MINT32 pre_YNRS_Y_L0_V_RNG4       = rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4;
    MINT32 pre_YNRS_Y_L0_V_RNG3       = rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3;
    MINT32 pre_YNRS_Y_L0_V_RNG2       = rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2;
    MINT32 pre_YNRS_Y_L0_V_RNG1       = rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1;
    MINT32 pre_YNRS_C_L_DIFF_TH       = rLowerYNRS.cad.bits.YNRS_C_L_DIFF_TH;
    MINT32 pre_YNRS_PTC_GAIN_TH       = rLowerYNRS.cad.bits.YNRS_PTC_GAIN_TH;
    MINT32 pre_YNRS_SL2_SCALE_GAIN       = rLowerYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN;
    MINT32 pre_YNRS_SL2_C_GAIN       = rLowerYNRS.sl2.bits.YNRS_SL2_C_GAIN;
    MINT32 pre_YNRS_Y_L0_H_RNG4       = rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4;
    MINT32 pre_YNRS_Y_L0_H_RNG3       = rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3;
    MINT32 pre_YNRS_Y_L0_H_RNG2       = rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2;
    MINT32 pre_YNRS_Y_L0_H_RNG1       = rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1;
    MINT32 pre_YNRS_TBL_CPX3       = rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX3;
    MINT32 pre_YNRS_TBL_CPX2       = rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX2;
    MINT32 pre_YNRS_TBL_CPX1       = rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX1;
    MINT32 pre_YNRS_TBL_GAIN_CPY3       = rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3;
    MINT32 pre_YNRS_TBL_GAIN_CPY2       = rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2;
    MINT32 pre_YNRS_TBL_GAIN_CPY1       = rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1;
    MINT32 pre_YNRS_TBL_GAIN_CPY0       = rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0;
    MINT32 pre_YNRS_TBL_GAIN_SP3       = rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3;
    MINT32 pre_YNRS_TBL_GAIN_SP2       = rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2;
    MINT32 pre_YNRS_TBL_GAIN_SP1       = rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1;
    MINT32 pre_YNRS_TBL_GAIN_SP0       = rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0;
    MINT32 pre_YNRS_ACT_DIF_LO_TH       = rLowerYNRS.act1.bits.YNRS_ACT_DIF_LO_TH;
    MINT32 pre_YNRS_ACT_DIF_GAIN       = rLowerYNRS.act1.bits.YNRS_ACT_DIF_GAIN;
    MINT32 pre_YNRS_ACT_DIF_HI_TH       = rLowerYNRS.act1.bits.YNRS_ACT_DIF_HI_TH;
    MINT32 pre_YNRS_ACT_SL2_GAIN       = rLowerYNRS.act1.bits.YNRS_ACT_SL2_GAIN;
    MINT32 pre_YNRS_C_V_RNG4       = rLowerYNRS.ptcv.bits.YNRS_C_V_RNG4;
    MINT32 pre_YNRS_C_V_RNG3       = rLowerYNRS.ptcv.bits.YNRS_C_V_RNG3;
    MINT32 pre_YNRS_C_V_RNG2       = rLowerYNRS.ptcv.bits.YNRS_C_V_RNG2;
    MINT32 pre_YNRS_C_V_RNG1       = rLowerYNRS.ptcv.bits.YNRS_C_V_RNG1;
    MINT32 pre_YNRS_Y_ACT_CEN_TH       = rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_TH;
    MINT32 pre_YNRS_Y_ACT_CEN_GAIN       = rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN;
    MINT32 pre_YNRS_Y_ACT_CEN_OFT       = rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT;
    MINT32 pre_YNRS_C_H_RNG4       = rLowerYNRS.ptch.bits.YNRS_C_H_RNG4;
    MINT32 pre_YNRS_C_H_RNG3       = rLowerYNRS.ptch.bits.YNRS_C_H_RNG3;
    MINT32 pre_YNRS_C_H_RNG2       = rLowerYNRS.ptch.bits.YNRS_C_H_RNG2;
    MINT32 pre_YNRS_C_H_RNG1       = rLowerYNRS.ptch.bits.YNRS_C_H_RNG1;
    MINT32 pre_YNRS_Y_HF_BAL_STR       = rLowerYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR;
    MINT32 pre_YNRS_Y_HF_CLIP       = rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CLIP;
    MINT32 pre_YNRS_Y_HF_CORE_SL       = rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL;
    MINT32 pre_YNRS_Y_HF_CORE_TH       = rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH;
    MINT32 pre_YNRS_Y_HF_ACT_X4       = rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4;
    MINT32 pre_YNRS_Y_HF_ACT_X3       = rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3;
    MINT32 pre_YNRS_Y_HF_ACT_X2       = rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2;
    MINT32 pre_YNRS_Y_HF_ACT_X1       = rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1;
    MINT32 pre_YNRS_Y_HF_ACT_Y3       = rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3;
    MINT32 pre_YNRS_Y_HF_ACT_Y2       = rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2;
    MINT32 pre_YNRS_Y_HF_ACT_Y1       = rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1;
    MINT32 pre_YNRS_Y_HF_ACT_Y0       = rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0;
    MINT32 pre_YNRS_ACT_BLD_BASE_C       = rLowerYNRS.actc.bits.YNRS_ACT_BLD_BASE_C;
    MINT32 pre_YNRS_RSV       = rLowerYNRS.actc.bits.YNRS_RSV;
    MINT32 pre_YNRS_CEN_GAIN_HI_TH_LPF       = rLowerYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF;
    MINT32 pre_YNRS_CEN_GAIN_LO_TH_LPF       = rLowerYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF;
    MINT32 pre_YNRS_Y_HF_ACT_SP4       = rLowerYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4;
    MINT32 pre_YNRS_Y_HF_ACT_Y4       = rLowerYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4;
    MINT32 pre_YNRS_Y_HF_ACT_SP3       = rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3;
    MINT32 pre_YNRS_Y_HF_ACT_SP2       = rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2;
    MINT32 pre_YNRS_Y_HF_ACT_SP1       = rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1;
    MINT32 pre_YNRS_Y_HF_ACT_SP0       = rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0;
    MINT32 pre_YNRS_Y_HF_LUMA_Y1       = rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1;
    MINT32 pre_YNRS_Y_HF_LUMA_Y0       = rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0;
    MINT32 pre_YNRS_Y_HF_LUMA_X2       = rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2;
    MINT32 pre_YNRS_Y_HF_LUMA_X1       = rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1;
    MINT32 pre_YNRS_Y_HF_LUMA_SP2       = rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2;
    MINT32 pre_YNRS_Y_HF_LUMA_SP1       = rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1;
    MINT32 pre_YNRS_Y_HF_LUMA_SP0       = rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0;
    MINT32 pre_YNRS_Y_HF_LUMA_Y2       = rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2;
    MINT32 pre_YNRS_Y_CPX8       = rLowerYNRS.y4lut4.bits.YNRS_Y_CPX8;
    MINT32 pre_YNRS_Y_CPX7       = rLowerYNRS.y4lut4.bits.YNRS_Y_CPX7;
    MINT32 pre_YNRS_Y_CPX6       = rLowerYNRS.y4lut4.bits.YNRS_Y_CPX6;
    MINT32 pre_YNRS_Y_CPX5       = rLowerYNRS.y4lut4.bits.YNRS_Y_CPX5;
    MINT32 pre_YNRS_Y_SCALE_CPY7       = rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7;
    MINT32 pre_YNRS_Y_SCALE_CPY6       = rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6;
    MINT32 pre_YNRS_Y_SCALE_CPY5       = rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5;
    MINT32 pre_YNRS_Y_SCALE_CPY4       = rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4;
    MINT32 pre_YNRS_Y_SCALE_SP7       = rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7;
    MINT32 pre_YNRS_Y_SCALE_SP6       = rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6;
    MINT32 pre_YNRS_Y_SCALE_SP5       = rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5;
    MINT32 pre_YNRS_Y_SCALE_SP4       = rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4;
    MINT32 pre_YNRS_Y_SCALE_SP8       = rLowerYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8;
    MINT32 pre_YNRS_Y_SCALE_CPY8       = rLowerYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8;
    MINT32 pre_YNRS_Y_ACT_CPX3       = rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3;
    MINT32 pre_YNRS_Y_ACT_CPX2       = rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2;
    MINT32 pre_YNRS_Y_ACT_CPX1       = rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1;
    MINT32 pre_YNRS_TBL_PRC       = rLowerYNRS.con1.bits.YNRS_TBL_PRC;
    MINT32 pre_YNRS_TABLE_EN       = rLowerYNRS.con1.bits.YNRS_TABLE_EN;
    MINT32 pre_YNRS_LBIT_MODE       = rLowerYNRS.con1.bits.YNRS_LBIT_MODE;
    MINT32 pre_YNRS_TILE_EDGE       = rLowerYNRS.con1.bits.YNRS_TILE_EDGE;
    MINT32 pre_YNRS_ENY       = rLowerYNRS.con1.bits.YNRS_ENY;
    MINT32 pre_YNRS_ENC       = rLowerYNRS.con1.bits.YNRS_ENC;
    MINT32 pre_YNRS_IMPL_MODE       = rLowerYNRS.con2.bits.YNRS_IMPL_MODE;
    MINT32 pre_YNRS_Y_HF_BAL_MODE       = rLowerYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE;
    MINT32 pos_YNRS_SL2_LINK       = rUpperYNRS.con1.bits.YNRS_SL2_LINK;
    MINT32 pos_YNRS_Y_FLT0_IDX       = rUpperYNRS.con1.bits.YNRS_Y_FLT0_IDX;
    MINT32 pos_YNRS_C_SM_EDGE_TH       = rUpperYNRS.con2.bits.YNRS_C_SM_EDGE_TH;
    MINT32 pos_YNRS_C_SM_EDGE       = rUpperYNRS.con2.bits.YNRS_C_SM_EDGE;
    MINT32 pos_YNRS_PTY_GAIN_TH       = rUpperYNRS.yad2.bits.YNRS_PTY_GAIN_TH;
    MINT32 pos_YNRS_Y_CPX4       = rUpperYNRS.y4lut1.bits.YNRS_Y_CPX4;
    MINT32 pos_YNRS_Y_CPX3       = rUpperYNRS.y4lut1.bits.YNRS_Y_CPX3;
    MINT32 pos_YNRS_Y_CPX2       = rUpperYNRS.y4lut1.bits.YNRS_Y_CPX2;
    MINT32 pos_YNRS_Y_CPX1       = rUpperYNRS.y4lut1.bits.YNRS_Y_CPX1;
    MINT32 pos_YNRS_Y_SCALE_CPY3       = rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3;
    MINT32 pos_YNRS_Y_SCALE_CPY2       = rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2;
    MINT32 pos_YNRS_Y_SCALE_CPY1       = rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1;
    MINT32 pos_YNRS_Y_SCALE_CPY0       = rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0;
    MINT32 pos_YNRS_Y_SCALE_SP3       = rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3;
    MINT32 pos_YNRS_Y_SCALE_SP2       = rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2;
    MINT32 pos_YNRS_Y_SCALE_SP1       = rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1;
    MINT32 pos_YNRS_Y_SCALE_SP0       = rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0;
    MINT32 pos_YNRS_C_CPX3       = rUpperYNRS.c4lut1.bits.YNRS_C_CPX3;
    MINT32 pos_YNRS_C_CPX2       = rUpperYNRS.c4lut1.bits.YNRS_C_CPX2;
    MINT32 pos_YNRS_C_CPX1       = rUpperYNRS.c4lut1.bits.YNRS_C_CPX1;
    MINT32 pos_YNRS_C_SCALE_CPY3       = rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3;
    MINT32 pos_YNRS_C_SCALE_CPY2       = rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2;
    MINT32 pos_YNRS_C_SCALE_CPY1       = rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1;
    MINT32 pos_YNRS_C_SCALE_CPY0       = rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0;
    MINT32 pos_YNRS_C_SCALE_SP3       = rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP3;
    MINT32 pos_YNRS_C_SCALE_SP2       = rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP2;
    MINT32 pos_YNRS_C_SCALE_SP1       = rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP1;
    MINT32 pos_YNRS_C_SCALE_SP0       = rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP0;
    MINT32 pos_YNRS_Y_ACT_CPY3       = rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3;
    MINT32 pos_YNRS_Y_ACT_CPY2       = rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2;
    MINT32 pos_YNRS_Y_ACT_CPY1       = rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1;
    MINT32 pos_YNRS_Y_ACT_CPY0       = rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0;
    MINT32 pos_YNRS_Y_ACT_SP3       = rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP3;
    MINT32 pos_YNRS_Y_ACT_SP2       = rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP2;
    MINT32 pos_YNRS_Y_ACT_SP1       = rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP1;
    MINT32 pos_YNRS_Y_ACT_SP0       = rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP0;
    MINT32 pos_YNRS_SL2_X3       = rUpperYNRS.l4lut1.bits.YNRS_SL2_X3;
    MINT32 pos_YNRS_SL2_X2       = rUpperYNRS.l4lut1.bits.YNRS_SL2_X2;
    MINT32 pos_YNRS_SL2_X1       = rUpperYNRS.l4lut1.bits.YNRS_SL2_X1;
    MINT32 pos_YNRS_SL2_GAIN3       = rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN3;
    MINT32 pos_YNRS_SL2_GAIN2       = rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN2;
    MINT32 pos_YNRS_SL2_GAIN1       = rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN1;
    MINT32 pos_YNRS_SL2_GAIN0       = rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN0;
    MINT32 pos_YNRS_SL2_SP3       = rUpperYNRS.l4lut3.bits.YNRS_SL2_SP3;
    MINT32 pos_YNRS_SL2_SP2       = rUpperYNRS.l4lut3.bits.YNRS_SL2_SP2;
    MINT32 pos_YNRS_SL2_SP1       = rUpperYNRS.l4lut3.bits.YNRS_SL2_SP1;
    MINT32 pos_YNRS_SL2_SP0       = rUpperYNRS.l4lut3.bits.YNRS_SL2_SP0;
    MINT32 pos_YNRS_Y_L0_V_RNG4       = rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4;
    MINT32 pos_YNRS_Y_L0_V_RNG3       = rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3;
    MINT32 pos_YNRS_Y_L0_V_RNG2       = rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2;
    MINT32 pos_YNRS_Y_L0_V_RNG1       = rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1;
    MINT32 pos_YNRS_C_L_DIFF_TH       = rUpperYNRS.cad.bits.YNRS_C_L_DIFF_TH;
    MINT32 pos_YNRS_PTC_GAIN_TH       = rUpperYNRS.cad.bits.YNRS_PTC_GAIN_TH;
    MINT32 pos_YNRS_SL2_SCALE_GAIN       = rUpperYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN;
    MINT32 pos_YNRS_SL2_C_GAIN       = rUpperYNRS.sl2.bits.YNRS_SL2_C_GAIN;
    MINT32 pos_YNRS_Y_L0_H_RNG4       = rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4;
    MINT32 pos_YNRS_Y_L0_H_RNG3       = rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3;
    MINT32 pos_YNRS_Y_L0_H_RNG2       = rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2;
    MINT32 pos_YNRS_Y_L0_H_RNG1       = rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1;
    MINT32 pos_YNRS_TBL_CPX3       = rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX3;
    MINT32 pos_YNRS_TBL_CPX2       = rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX2;
    MINT32 pos_YNRS_TBL_CPX1       = rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX1;
    MINT32 pos_YNRS_TBL_GAIN_CPY3       = rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3;
    MINT32 pos_YNRS_TBL_GAIN_CPY2       = rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2;
    MINT32 pos_YNRS_TBL_GAIN_CPY1       = rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1;
    MINT32 pos_YNRS_TBL_GAIN_CPY0       = rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0;
    MINT32 pos_YNRS_TBL_GAIN_SP3       = rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3;
    MINT32 pos_YNRS_TBL_GAIN_SP2       = rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2;
    MINT32 pos_YNRS_TBL_GAIN_SP1       = rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1;
    MINT32 pos_YNRS_TBL_GAIN_SP0       = rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0;
    MINT32 pos_YNRS_ACT_DIF_LO_TH       = rUpperYNRS.act1.bits.YNRS_ACT_DIF_LO_TH;
    MINT32 pos_YNRS_ACT_DIF_GAIN       = rUpperYNRS.act1.bits.YNRS_ACT_DIF_GAIN;
    MINT32 pos_YNRS_ACT_DIF_HI_TH       = rUpperYNRS.act1.bits.YNRS_ACT_DIF_HI_TH;
    MINT32 pos_YNRS_ACT_SL2_GAIN       = rUpperYNRS.act1.bits.YNRS_ACT_SL2_GAIN;
    MINT32 pos_YNRS_C_V_RNG4       = rUpperYNRS.ptcv.bits.YNRS_C_V_RNG4;
    MINT32 pos_YNRS_C_V_RNG3       = rUpperYNRS.ptcv.bits.YNRS_C_V_RNG3;
    MINT32 pos_YNRS_C_V_RNG2       = rUpperYNRS.ptcv.bits.YNRS_C_V_RNG2;
    MINT32 pos_YNRS_C_V_RNG1       = rUpperYNRS.ptcv.bits.YNRS_C_V_RNG1;
    MINT32 pos_YNRS_Y_ACT_CEN_TH       = rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_TH;
    MINT32 pos_YNRS_Y_ACT_CEN_GAIN       = rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN;
    MINT32 pos_YNRS_Y_ACT_CEN_OFT       = rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT;
    MINT32 pos_YNRS_C_H_RNG4       = rUpperYNRS.ptch.bits.YNRS_C_H_RNG4;
    MINT32 pos_YNRS_C_H_RNG3       = rUpperYNRS.ptch.bits.YNRS_C_H_RNG3;
    MINT32 pos_YNRS_C_H_RNG2       = rUpperYNRS.ptch.bits.YNRS_C_H_RNG2;
    MINT32 pos_YNRS_C_H_RNG1       = rUpperYNRS.ptch.bits.YNRS_C_H_RNG1;
    MINT32 pos_YNRS_Y_HF_BAL_STR       = rUpperYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR;
    MINT32 pos_YNRS_Y_HF_CLIP       = rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CLIP;
    MINT32 pos_YNRS_Y_HF_CORE_SL       = rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL;
    MINT32 pos_YNRS_Y_HF_CORE_TH       = rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH;
    MINT32 pos_YNRS_Y_HF_ACT_X4       = rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4;
    MINT32 pos_YNRS_Y_HF_ACT_X3       = rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3;
    MINT32 pos_YNRS_Y_HF_ACT_X2       = rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2;
    MINT32 pos_YNRS_Y_HF_ACT_X1       = rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1;
    MINT32 pos_YNRS_Y_HF_ACT_Y3       = rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3;
    MINT32 pos_YNRS_Y_HF_ACT_Y2       = rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2;
    MINT32 pos_YNRS_Y_HF_ACT_Y1       = rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1;
    MINT32 pos_YNRS_Y_HF_ACT_Y0       = rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0;
    MINT32 pos_YNRS_ACT_BLD_BASE_C       = rUpperYNRS.actc.bits.YNRS_ACT_BLD_BASE_C;
    MINT32 pos_YNRS_RSV       = rUpperYNRS.actc.bits.YNRS_RSV;
    MINT32 pos_YNRS_CEN_GAIN_HI_TH_LPF       = rUpperYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF;
    MINT32 pos_YNRS_CEN_GAIN_LO_TH_LPF       = rUpperYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF;
    MINT32 pos_YNRS_Y_HF_ACT_SP4       = rUpperYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4;
    MINT32 pos_YNRS_Y_HF_ACT_Y4       = rUpperYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4;
    MINT32 pos_YNRS_Y_HF_ACT_SP3       = rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3;
    MINT32 pos_YNRS_Y_HF_ACT_SP2       = rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2;
    MINT32 pos_YNRS_Y_HF_ACT_SP1       = rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1;
    MINT32 pos_YNRS_Y_HF_ACT_SP0       = rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0;
    MINT32 pos_YNRS_Y_HF_LUMA_Y1       = rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1;
    MINT32 pos_YNRS_Y_HF_LUMA_Y0       = rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0;
    MINT32 pos_YNRS_Y_HF_LUMA_X2       = rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2;
    MINT32 pos_YNRS_Y_HF_LUMA_X1       = rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1;
    MINT32 pos_YNRS_Y_HF_LUMA_SP2       = rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2;
    MINT32 pos_YNRS_Y_HF_LUMA_SP1       = rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1;
    MINT32 pos_YNRS_Y_HF_LUMA_SP0       = rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0;
    MINT32 pos_YNRS_Y_HF_LUMA_Y2       = rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2;
    MINT32 pos_YNRS_Y_CPX8       = rUpperYNRS.y4lut4.bits.YNRS_Y_CPX8;
    MINT32 pos_YNRS_Y_CPX7       = rUpperYNRS.y4lut4.bits.YNRS_Y_CPX7;
    MINT32 pos_YNRS_Y_CPX6       = rUpperYNRS.y4lut4.bits.YNRS_Y_CPX6;
    MINT32 pos_YNRS_Y_CPX5       = rUpperYNRS.y4lut4.bits.YNRS_Y_CPX5;
    MINT32 pos_YNRS_Y_SCALE_CPY7       = rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7;
    MINT32 pos_YNRS_Y_SCALE_CPY6       = rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6;
    MINT32 pos_YNRS_Y_SCALE_CPY5       = rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5;
    MINT32 pos_YNRS_Y_SCALE_CPY4       = rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4;
    MINT32 pos_YNRS_Y_SCALE_SP7       = rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7;
    MINT32 pos_YNRS_Y_SCALE_SP6       = rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6;
    MINT32 pos_YNRS_Y_SCALE_SP5       = rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5;
    MINT32 pos_YNRS_Y_SCALE_SP4       = rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4;
    MINT32 pos_YNRS_Y_SCALE_SP8       = rUpperYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8;
    MINT32 pos_YNRS_Y_SCALE_CPY8       = rUpperYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8;
    MINT32 pos_YNRS_Y_ACT_CPX3       = rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3;
    MINT32 pos_YNRS_Y_ACT_CPX2       = rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2;
    MINT32 pos_YNRS_Y_ACT_CPX1       = rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1;
    MINT32 pos_YNRS_TBL_PRC       = rUpperYNRS.con1.bits.YNRS_TBL_PRC;
    MINT32 pos_YNRS_TABLE_EN       = rUpperYNRS.con1.bits.YNRS_TABLE_EN;
    MINT32 pos_YNRS_LBIT_MODE       = rUpperYNRS.con1.bits.YNRS_LBIT_MODE;
    MINT32 pos_YNRS_TILE_EDGE       = rUpperYNRS.con1.bits.YNRS_TILE_EDGE;
    MINT32 pos_YNRS_ENY       = rUpperYNRS.con1.bits.YNRS_ENY;
    MINT32 pos_YNRS_ENC       = rUpperYNRS.con1.bits.YNRS_ENC;
    MINT32 pos_YNRS_IMPL_MODE       = rUpperYNRS.con2.bits.YNRS_IMPL_MODE;
    MINT32 pos_YNRS_Y_HF_BAL_MODE       = rUpperYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE;


    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4RealISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4RealISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4RealISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;

    // interpolation core
    MINT32 YNRS_SL2_LINK       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_LINK, pos_YNRS_SL2_LINK, 0);
    MINT32 YNRS_Y_FLT0_IDX       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_FLT0_IDX, pos_YNRS_Y_FLT0_IDX, 0);
    MINT32 YNRS_C_SM_EDGE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SM_EDGE_TH, pos_YNRS_C_SM_EDGE_TH, 0);
    MINT32 YNRS_C_SM_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SM_EDGE, pos_YNRS_C_SM_EDGE, 0);
    MINT32 YNRS_PTY_GAIN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_PTY_GAIN_TH, pos_YNRS_PTY_GAIN_TH, 0);
    MINT32 YNRS_Y_CPX4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX4, pos_YNRS_Y_CPX4, 0);
    MINT32 YNRS_Y_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX3, pos_YNRS_Y_CPX3, 0);
    MINT32 YNRS_Y_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX2, pos_YNRS_Y_CPX2, 0);
    MINT32 YNRS_Y_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX1, pos_YNRS_Y_CPX1, 0);
    MINT32 YNRS_Y_SCALE_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY3, pos_YNRS_Y_SCALE_CPY3, 0);
    MINT32 YNRS_Y_SCALE_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY2, pos_YNRS_Y_SCALE_CPY2, 0);
    MINT32 YNRS_Y_SCALE_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY1, pos_YNRS_Y_SCALE_CPY1, 0);
    MINT32 YNRS_Y_SCALE_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY0, pos_YNRS_Y_SCALE_CPY0, 0);
    MINT32 YNRS_Y_SCALE_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP3, pos_YNRS_Y_SCALE_SP3, 0);
    MINT32 YNRS_Y_SCALE_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP2, pos_YNRS_Y_SCALE_SP2, 0);
    MINT32 YNRS_Y_SCALE_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP1, pos_YNRS_Y_SCALE_SP1, 0);
    MINT32 YNRS_Y_SCALE_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP0, pos_YNRS_Y_SCALE_SP0, 0);
    MINT32 YNRS_C_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_CPX3, pos_YNRS_C_CPX3, 0);
    MINT32 YNRS_C_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_CPX2, pos_YNRS_C_CPX2, 0);
    MINT32 YNRS_C_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_CPX1, pos_YNRS_C_CPX1, 0);
    MINT32 YNRS_C_SCALE_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_CPY3, pos_YNRS_C_SCALE_CPY3, 0);
    MINT32 YNRS_C_SCALE_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_CPY2, pos_YNRS_C_SCALE_CPY2, 0);
    MINT32 YNRS_C_SCALE_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_CPY1, pos_YNRS_C_SCALE_CPY1, 0);
    MINT32 YNRS_C_SCALE_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_CPY0, pos_YNRS_C_SCALE_CPY0, 0);
    MINT32 YNRS_C_SCALE_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_SP3, pos_YNRS_C_SCALE_SP3, 0);
    MINT32 YNRS_C_SCALE_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_SP2, pos_YNRS_C_SCALE_SP2, 0);
    MINT32 YNRS_C_SCALE_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_SP1, pos_YNRS_C_SCALE_SP1, 0);
    MINT32 YNRS_C_SCALE_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_SCALE_SP0, pos_YNRS_C_SCALE_SP0, 0);
    MINT32 YNRS_Y_ACT_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPY3, pos_YNRS_Y_ACT_CPY3, 0);
    MINT32 YNRS_Y_ACT_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPY2, pos_YNRS_Y_ACT_CPY2, 0);
    MINT32 YNRS_Y_ACT_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPY1, pos_YNRS_Y_ACT_CPY1, 0);
    MINT32 YNRS_Y_ACT_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPY0, pos_YNRS_Y_ACT_CPY0, 0);
    MINT32 YNRS_Y_ACT_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_SP3, pos_YNRS_Y_ACT_SP3, 0);
    MINT32 YNRS_Y_ACT_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_SP2, pos_YNRS_Y_ACT_SP2, 0);
    MINT32 YNRS_Y_ACT_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_SP1, pos_YNRS_Y_ACT_SP1, 0);
    MINT32 YNRS_Y_ACT_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_SP0, pos_YNRS_Y_ACT_SP0, 0);
    MINT32 YNRS_SL2_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_X3, pos_YNRS_SL2_X3, 0);
    MINT32 YNRS_SL2_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_X2, pos_YNRS_SL2_X2, 0);
    MINT32 YNRS_SL2_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_X1, pos_YNRS_SL2_X1, 0);
    MINT32 YNRS_SL2_GAIN3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_GAIN3, pos_YNRS_SL2_GAIN3, 0);
    MINT32 YNRS_SL2_GAIN2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_GAIN2, pos_YNRS_SL2_GAIN2, 0);
    MINT32 YNRS_SL2_GAIN1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_GAIN1, pos_YNRS_SL2_GAIN1, 0);
    MINT32 YNRS_SL2_GAIN0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_GAIN0, pos_YNRS_SL2_GAIN0, 0);
    MINT32 YNRS_SL2_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_SP3, pos_YNRS_SL2_SP3, 0);
    MINT32 YNRS_SL2_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_SP2, pos_YNRS_SL2_SP2, 0);
    MINT32 YNRS_SL2_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_SP1, pos_YNRS_SL2_SP1, 0);
    MINT32 YNRS_SL2_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_SP0, pos_YNRS_SL2_SP0, 0);
    MINT32 YNRS_Y_L0_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_V_RNG4, pos_YNRS_Y_L0_V_RNG4, 0);
    MINT32 YNRS_Y_L0_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_V_RNG3, pos_YNRS_Y_L0_V_RNG3, 0);
    MINT32 YNRS_Y_L0_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_V_RNG2, pos_YNRS_Y_L0_V_RNG2, 0);
    MINT32 YNRS_Y_L0_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_V_RNG1, pos_YNRS_Y_L0_V_RNG1, 0);
    MINT32 YNRS_C_L_DIFF_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_L_DIFF_TH, pos_YNRS_C_L_DIFF_TH, 0);
    MINT32 YNRS_PTC_GAIN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_PTC_GAIN_TH, pos_YNRS_PTC_GAIN_TH, 0);
    MINT32 YNRS_SL2_SCALE_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_SCALE_GAIN, pos_YNRS_SL2_SCALE_GAIN, 0);
    MINT32 YNRS_SL2_C_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_SL2_C_GAIN, pos_YNRS_SL2_C_GAIN, 0);
    MINT32 YNRS_Y_L0_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_H_RNG4, pos_YNRS_Y_L0_H_RNG4, 0);
    MINT32 YNRS_Y_L0_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_H_RNG3, pos_YNRS_Y_L0_H_RNG3, 0);
    MINT32 YNRS_Y_L0_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_H_RNG2, pos_YNRS_Y_L0_H_RNG2, 0);
    MINT32 YNRS_Y_L0_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_L0_H_RNG1, pos_YNRS_Y_L0_H_RNG1, 0);
    MINT32 YNRS_TBL_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_CPX3, pos_YNRS_TBL_CPX3, 0);
    MINT32 YNRS_TBL_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_CPX2, pos_YNRS_TBL_CPX2, 0);
    MINT32 YNRS_TBL_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_CPX1, pos_YNRS_TBL_CPX1, 0);
    MINT32 YNRS_TBL_GAIN_CPY3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_CPY3, pos_YNRS_TBL_GAIN_CPY3, 0);
    MINT32 YNRS_TBL_GAIN_CPY2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_CPY2, pos_YNRS_TBL_GAIN_CPY2, 0);
    MINT32 YNRS_TBL_GAIN_CPY1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_CPY1, pos_YNRS_TBL_GAIN_CPY1, 0);
    MINT32 YNRS_TBL_GAIN_CPY0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_CPY0, pos_YNRS_TBL_GAIN_CPY0, 0);
    MINT32 YNRS_TBL_GAIN_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_SP3, pos_YNRS_TBL_GAIN_SP3, 0);
    MINT32 YNRS_TBL_GAIN_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_SP2, pos_YNRS_TBL_GAIN_SP2, 0);
    MINT32 YNRS_TBL_GAIN_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_SP1, pos_YNRS_TBL_GAIN_SP1, 0);
    MINT32 YNRS_TBL_GAIN_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_GAIN_SP0, pos_YNRS_TBL_GAIN_SP0, 0);
    MINT32 YNRS_ACT_DIF_LO_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ACT_DIF_LO_TH, pos_YNRS_ACT_DIF_LO_TH, 0);
    MINT32 YNRS_ACT_DIF_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ACT_DIF_GAIN, pos_YNRS_ACT_DIF_GAIN, 0);
    MINT32 YNRS_ACT_DIF_HI_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ACT_DIF_HI_TH, pos_YNRS_ACT_DIF_HI_TH, 0);
    MINT32 YNRS_ACT_SL2_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ACT_SL2_GAIN, pos_YNRS_ACT_SL2_GAIN, 0);
    MINT32 YNRS_C_V_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_V_RNG4, pos_YNRS_C_V_RNG4, 0);
    MINT32 YNRS_C_V_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_V_RNG3, pos_YNRS_C_V_RNG3, 0);
    MINT32 YNRS_C_V_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_V_RNG2, pos_YNRS_C_V_RNG2, 0);
    MINT32 YNRS_C_V_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_V_RNG1, pos_YNRS_C_V_RNG1, 0);
    MINT32 YNRS_Y_ACT_CEN_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CEN_TH, pos_YNRS_Y_ACT_CEN_TH, 0);
    MINT32 YNRS_Y_ACT_CEN_GAIN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CEN_GAIN, pos_YNRS_Y_ACT_CEN_GAIN, 0);
    MINT32 YNRS_Y_ACT_CEN_OFT       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CEN_OFT, pos_YNRS_Y_ACT_CEN_OFT, 0);
    MINT32 YNRS_C_H_RNG4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_H_RNG4, pos_YNRS_C_H_RNG4, 0);
    MINT32 YNRS_C_H_RNG3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_H_RNG3, pos_YNRS_C_H_RNG3, 0);
    MINT32 YNRS_C_H_RNG2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_H_RNG2, pos_YNRS_C_H_RNG2, 0);
    MINT32 YNRS_C_H_RNG1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_C_H_RNG1, pos_YNRS_C_H_RNG1, 0);
    MINT32 YNRS_Y_HF_BAL_STR       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_BAL_STR, pos_YNRS_Y_HF_BAL_STR, 0);
    MINT32 YNRS_Y_HF_CLIP       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_CLIP, pos_YNRS_Y_HF_CLIP, 0);
    MINT32 YNRS_Y_HF_CORE_SL       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_CORE_SL, pos_YNRS_Y_HF_CORE_SL, 0);
    MINT32 YNRS_Y_HF_CORE_TH       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_CORE_TH, pos_YNRS_Y_HF_CORE_TH, 0);
    MINT32 YNRS_Y_HF_ACT_X4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_X4, pos_YNRS_Y_HF_ACT_X4, 0);
    MINT32 YNRS_Y_HF_ACT_X3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_X3, pos_YNRS_Y_HF_ACT_X3, 0);
    MINT32 YNRS_Y_HF_ACT_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_X2, pos_YNRS_Y_HF_ACT_X2, 0);
    MINT32 YNRS_Y_HF_ACT_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_X1, pos_YNRS_Y_HF_ACT_X1, 0);
    MINT32 YNRS_Y_HF_ACT_Y3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_Y3, pos_YNRS_Y_HF_ACT_Y3, 0);
    MINT32 YNRS_Y_HF_ACT_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_Y2, pos_YNRS_Y_HF_ACT_Y2, 0);
    MINT32 YNRS_Y_HF_ACT_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_Y1, pos_YNRS_Y_HF_ACT_Y1, 0);
    MINT32 YNRS_Y_HF_ACT_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_Y0, pos_YNRS_Y_HF_ACT_Y0, 0);
    MINT32 YNRS_ACT_BLD_BASE_C       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ACT_BLD_BASE_C, pos_YNRS_ACT_BLD_BASE_C, 0);
    MINT32 YNRS_RSV       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_RSV, pos_YNRS_RSV, 0);
    MINT32 YNRS_CEN_GAIN_HI_TH_LPF       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_CEN_GAIN_HI_TH_LPF, pos_YNRS_CEN_GAIN_HI_TH_LPF, 0);
    MINT32 YNRS_CEN_GAIN_LO_TH_LPF       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_CEN_GAIN_LO_TH_LPF, pos_YNRS_CEN_GAIN_LO_TH_LPF, 0);
    MINT32 YNRS_Y_HF_ACT_SP4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_SP4, pos_YNRS_Y_HF_ACT_SP4, 0);
    MINT32 YNRS_Y_HF_ACT_Y4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_Y4, pos_YNRS_Y_HF_ACT_Y4, 0);
    MINT32 YNRS_Y_HF_ACT_SP3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_SP3, pos_YNRS_Y_HF_ACT_SP3, 0);
    MINT32 YNRS_Y_HF_ACT_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_SP2, pos_YNRS_Y_HF_ACT_SP2, 0);
    MINT32 YNRS_Y_HF_ACT_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_SP1, pos_YNRS_Y_HF_ACT_SP1, 0);
    MINT32 YNRS_Y_HF_ACT_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_ACT_SP0, pos_YNRS_Y_HF_ACT_SP0, 0);
    MINT32 YNRS_Y_HF_LUMA_Y1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_Y1, pos_YNRS_Y_HF_LUMA_Y1, 0);
    MINT32 YNRS_Y_HF_LUMA_Y0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_Y0, pos_YNRS_Y_HF_LUMA_Y0, 0);
    MINT32 YNRS_Y_HF_LUMA_X2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_X2, pos_YNRS_Y_HF_LUMA_X2, 0);
    MINT32 YNRS_Y_HF_LUMA_X1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_X1, pos_YNRS_Y_HF_LUMA_X1, 0);
    MINT32 YNRS_Y_HF_LUMA_SP2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_SP2, pos_YNRS_Y_HF_LUMA_SP2, 0);
    MINT32 YNRS_Y_HF_LUMA_SP1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_SP1, pos_YNRS_Y_HF_LUMA_SP1, 0);
    MINT32 YNRS_Y_HF_LUMA_SP0       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_SP0, pos_YNRS_Y_HF_LUMA_SP0, 0);
    MINT32 YNRS_Y_HF_LUMA_Y2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_LUMA_Y2, pos_YNRS_Y_HF_LUMA_Y2, 0);
    MINT32 YNRS_Y_CPX8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX8, pos_YNRS_Y_CPX8, 0);
    MINT32 YNRS_Y_CPX7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX7, pos_YNRS_Y_CPX7, 0);
    MINT32 YNRS_Y_CPX6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX6, pos_YNRS_Y_CPX6, 0);
    MINT32 YNRS_Y_CPX5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_CPX5, pos_YNRS_Y_CPX5, 0);
    MINT32 YNRS_Y_SCALE_CPY7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY7, pos_YNRS_Y_SCALE_CPY7, 0);
    MINT32 YNRS_Y_SCALE_CPY6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY6, pos_YNRS_Y_SCALE_CPY6, 0);
    MINT32 YNRS_Y_SCALE_CPY5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY5, pos_YNRS_Y_SCALE_CPY5, 0);
    MINT32 YNRS_Y_SCALE_CPY4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY4, pos_YNRS_Y_SCALE_CPY4, 0);
    MINT32 YNRS_Y_SCALE_SP7       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP7, pos_YNRS_Y_SCALE_SP7, 0);
    MINT32 YNRS_Y_SCALE_SP6       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP6, pos_YNRS_Y_SCALE_SP6, 0);
    MINT32 YNRS_Y_SCALE_SP5       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP5, pos_YNRS_Y_SCALE_SP5, 0);
    MINT32 YNRS_Y_SCALE_SP4       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP4, pos_YNRS_Y_SCALE_SP4, 0);
    MINT32 YNRS_Y_SCALE_SP8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_SP8, pos_YNRS_Y_SCALE_SP8, 0);
    MINT32 YNRS_Y_SCALE_CPY8       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_SCALE_CPY8, pos_YNRS_Y_SCALE_CPY8, 0);
    MINT32 YNRS_Y_ACT_CPX3       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPX3, pos_YNRS_Y_ACT_CPX3, 0);
    MINT32 YNRS_Y_ACT_CPX2       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPX2, pos_YNRS_Y_ACT_CPX2, 0);
    MINT32 YNRS_Y_ACT_CPX1       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_ACT_CPX1, pos_YNRS_Y_ACT_CPX1, 0);
    MINT32 YNRS_TBL_PRC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TBL_PRC, pos_YNRS_TBL_PRC, 1);
    MINT32 YNRS_TABLE_EN       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TABLE_EN, pos_YNRS_TABLE_EN, 1);
    MINT32 YNRS_LBIT_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_LBIT_MODE, pos_YNRS_LBIT_MODE, 1);
    MINT32 YNRS_TILE_EDGE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_TILE_EDGE, pos_YNRS_TILE_EDGE, 1);
    MINT32 YNRS_ENY       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ENY, pos_YNRS_ENY, 1);
    MINT32 YNRS_ENC       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_ENC, pos_YNRS_ENC, 1);
    MINT32 YNRS_IMPL_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_IMPL_MODE, pos_YNRS_IMPL_MODE, 1);
    MINT32 YNRS_Y_HF_BAL_MODE       = InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, pre_YNRS_Y_HF_BAL_MODE, pos_YNRS_Y_HF_BAL_MODE, 1);


    // interpolation result assignment
    rSmoothYNRS.con1.bits.YNRS_SL2_LINK       = YNRS_SL2_LINK;
    rSmoothYNRS.con1.bits.YNRS_Y_FLT0_IDX       = YNRS_Y_FLT0_IDX;
    rSmoothYNRS.con2.bits.YNRS_C_SM_EDGE_TH       = YNRS_C_SM_EDGE_TH;
    rSmoothYNRS.con2.bits.YNRS_C_SM_EDGE       = YNRS_C_SM_EDGE;
    rSmoothYNRS.yad2.bits.YNRS_PTY_GAIN_TH       = YNRS_PTY_GAIN_TH;
    rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX4       = YNRS_Y_CPX4;
    rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX3       = YNRS_Y_CPX3;
    rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX2       = YNRS_Y_CPX2;
    rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX1       = YNRS_Y_CPX1;
    rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3       = YNRS_Y_SCALE_CPY3;
    rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2       = YNRS_Y_SCALE_CPY2;
    rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1       = YNRS_Y_SCALE_CPY1;
    rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0       = YNRS_Y_SCALE_CPY0;
    rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3       = YNRS_Y_SCALE_SP3;
    rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2       = YNRS_Y_SCALE_SP2;
    rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1       = YNRS_Y_SCALE_SP1;
    rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0       = YNRS_Y_SCALE_SP0;
    rSmoothYNRS.c4lut1.bits.YNRS_C_CPX3       = YNRS_C_CPX3;
    rSmoothYNRS.c4lut1.bits.YNRS_C_CPX2       = YNRS_C_CPX2;
    rSmoothYNRS.c4lut1.bits.YNRS_C_CPX1       = YNRS_C_CPX1;
    rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3       = YNRS_C_SCALE_CPY3;
    rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2       = YNRS_C_SCALE_CPY2;
    rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1       = YNRS_C_SCALE_CPY1;
    rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0       = YNRS_C_SCALE_CPY0;
    rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP3       = YNRS_C_SCALE_SP3;
    rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP2       = YNRS_C_SCALE_SP2;
    rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP1       = YNRS_C_SCALE_SP1;
    rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP0       = YNRS_C_SCALE_SP0;
    rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3       = YNRS_Y_ACT_CPY3;
    rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2       = YNRS_Y_ACT_CPY2;
    rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1       = YNRS_Y_ACT_CPY1;
    rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0       = YNRS_Y_ACT_CPY0;
    rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP3       = YNRS_Y_ACT_SP3;
    rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP2       = YNRS_Y_ACT_SP2;
    rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP1       = YNRS_Y_ACT_SP1;
    rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP0       = YNRS_Y_ACT_SP0;
    rSmoothYNRS.l4lut1.bits.YNRS_SL2_X3       = YNRS_SL2_X3;
    rSmoothYNRS.l4lut1.bits.YNRS_SL2_X2       = YNRS_SL2_X2;
    rSmoothYNRS.l4lut1.bits.YNRS_SL2_X1       = YNRS_SL2_X1;
    rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN3       = YNRS_SL2_GAIN3;
    rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN2       = YNRS_SL2_GAIN2;
    rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN1       = YNRS_SL2_GAIN1;
    rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN0       = YNRS_SL2_GAIN0;
    rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP3       = YNRS_SL2_SP3;
    rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP2       = YNRS_SL2_SP2;
    rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP1       = YNRS_SL2_SP1;
    rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP0       = YNRS_SL2_SP0;
    rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4       = YNRS_Y_L0_V_RNG4;
    rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3       = YNRS_Y_L0_V_RNG3;
    rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2       = YNRS_Y_L0_V_RNG2;
    rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1       = YNRS_Y_L0_V_RNG1;
    rSmoothYNRS.cad.bits.YNRS_C_L_DIFF_TH       = YNRS_C_L_DIFF_TH;
    rSmoothYNRS.cad.bits.YNRS_PTC_GAIN_TH       = YNRS_PTC_GAIN_TH;
    rSmoothYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN       = YNRS_SL2_SCALE_GAIN;
    rSmoothYNRS.sl2.bits.YNRS_SL2_C_GAIN       = YNRS_SL2_C_GAIN;
    rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4       = YNRS_Y_L0_H_RNG4;
    rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3       = YNRS_Y_L0_H_RNG3;
    rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2       = YNRS_Y_L0_H_RNG2;
    rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1       = YNRS_Y_L0_H_RNG1;
    rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX3       = YNRS_TBL_CPX3;
    rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX2       = YNRS_TBL_CPX2;
    rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX1       = YNRS_TBL_CPX1;
    rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3       = YNRS_TBL_GAIN_CPY3;
    rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2       = YNRS_TBL_GAIN_CPY2;
    rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1       = YNRS_TBL_GAIN_CPY1;
    rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0       = YNRS_TBL_GAIN_CPY0;
    rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3       = YNRS_TBL_GAIN_SP3;
    rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2       = YNRS_TBL_GAIN_SP2;
    rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1       = YNRS_TBL_GAIN_SP1;
    rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0       = YNRS_TBL_GAIN_SP0;
    rSmoothYNRS.act1.bits.YNRS_ACT_DIF_LO_TH       = YNRS_ACT_DIF_LO_TH;
    rSmoothYNRS.act1.bits.YNRS_ACT_DIF_GAIN       = YNRS_ACT_DIF_GAIN;
    rSmoothYNRS.act1.bits.YNRS_ACT_DIF_HI_TH       = YNRS_ACT_DIF_HI_TH;
    rSmoothYNRS.act1.bits.YNRS_ACT_SL2_GAIN       = YNRS_ACT_SL2_GAIN;
    rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG4       = YNRS_C_V_RNG4;
    rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG3       = YNRS_C_V_RNG3;
    rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG2       = YNRS_C_V_RNG2;
    rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG1       = YNRS_C_V_RNG1;
    rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_TH       = YNRS_Y_ACT_CEN_TH;
    rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN       = YNRS_Y_ACT_CEN_GAIN;
    rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT       = YNRS_Y_ACT_CEN_OFT;
    rSmoothYNRS.ptch.bits.YNRS_C_H_RNG4       = YNRS_C_H_RNG4;
    rSmoothYNRS.ptch.bits.YNRS_C_H_RNG3       = YNRS_C_H_RNG3;
    rSmoothYNRS.ptch.bits.YNRS_C_H_RNG2       = YNRS_C_H_RNG2;
    rSmoothYNRS.ptch.bits.YNRS_C_H_RNG1       = YNRS_C_H_RNG1;
    rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR       = YNRS_Y_HF_BAL_STR;
    rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CLIP       = YNRS_Y_HF_CLIP;
    rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL       = YNRS_Y_HF_CORE_SL;
    rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH       = YNRS_Y_HF_CORE_TH;
    rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4       = YNRS_Y_HF_ACT_X4;
    rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3       = YNRS_Y_HF_ACT_X3;
    rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2       = YNRS_Y_HF_ACT_X2;
    rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1       = YNRS_Y_HF_ACT_X1;
    rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3       = YNRS_Y_HF_ACT_Y3;
    rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2       = YNRS_Y_HF_ACT_Y2;
    rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1       = YNRS_Y_HF_ACT_Y1;
    rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0       = YNRS_Y_HF_ACT_Y0;
    rSmoothYNRS.actc.bits.YNRS_ACT_BLD_BASE_C       = YNRS_ACT_BLD_BASE_C;
    rSmoothYNRS.actc.bits.YNRS_RSV       = YNRS_RSV;
    rSmoothYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF       = YNRS_CEN_GAIN_HI_TH_LPF;
    rSmoothYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF       = YNRS_CEN_GAIN_LO_TH_LPF;
    rSmoothYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4       = YNRS_Y_HF_ACT_SP4;
    rSmoothYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4       = YNRS_Y_HF_ACT_Y4;
    rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3       = YNRS_Y_HF_ACT_SP3;
    rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2       = YNRS_Y_HF_ACT_SP2;
    rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1       = YNRS_Y_HF_ACT_SP1;
    rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0       = YNRS_Y_HF_ACT_SP0;
    rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1       = YNRS_Y_HF_LUMA_Y1;
    rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0       = YNRS_Y_HF_LUMA_Y0;
    rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2       = YNRS_Y_HF_LUMA_X2;
    rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1       = YNRS_Y_HF_LUMA_X1;
    rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2       = YNRS_Y_HF_LUMA_SP2;
    rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1       = YNRS_Y_HF_LUMA_SP1;
    rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0       = YNRS_Y_HF_LUMA_SP0;
    rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2       = YNRS_Y_HF_LUMA_Y2;
    rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX8       = YNRS_Y_CPX8;
    rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX7       = YNRS_Y_CPX7;
    rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX6       = YNRS_Y_CPX6;
    rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX5       = YNRS_Y_CPX5;
    rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7       = YNRS_Y_SCALE_CPY7;
    rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6       = YNRS_Y_SCALE_CPY6;
    rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5       = YNRS_Y_SCALE_CPY5;
    rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4       = YNRS_Y_SCALE_CPY4;
    rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7       = YNRS_Y_SCALE_SP7;
    rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6       = YNRS_Y_SCALE_SP6;
    rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5       = YNRS_Y_SCALE_SP5;
    rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4       = YNRS_Y_SCALE_SP4;
    rSmoothYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8       = YNRS_Y_SCALE_SP8;
    rSmoothYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8       = YNRS_Y_SCALE_CPY8;
    rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3       = YNRS_Y_ACT_CPX3;
    rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2       = YNRS_Y_ACT_CPX2;
    rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1       = YNRS_Y_ACT_CPX1;
    rSmoothYNRS.con1.bits.YNRS_TBL_PRC       = YNRS_TBL_PRC;
    rSmoothYNRS.con1.bits.YNRS_TABLE_EN       = YNRS_TABLE_EN;
    rSmoothYNRS.con1.bits.YNRS_LBIT_MODE       = YNRS_LBIT_MODE;
    rSmoothYNRS.con1.bits.YNRS_TILE_EDGE       = YNRS_TILE_EDGE;
    rSmoothYNRS.con1.bits.YNRS_ENY       = YNRS_ENY;
    rSmoothYNRS.con1.bits.YNRS_ENC       = YNRS_ENC;
    rSmoothYNRS.con2.bits.YNRS_IMPL_MODE       = YNRS_IMPL_MODE;
    rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE       = YNRS_Y_HF_BAL_MODE;


    // logging
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_LINK       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_SL2_LINK, rSmoothYNRS.con1.bits.YNRS_SL2_LINK, rUpperYNRS.con1.bits.YNRS_SL2_LINK);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_FLT0_IDX       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_Y_FLT0_IDX, rSmoothYNRS.con1.bits.YNRS_Y_FLT0_IDX, rUpperYNRS.con1.bits.YNRS_Y_FLT0_IDX);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SM_EDGE_TH       = %d, %d, %d", rLowerYNRS.con2.bits.YNRS_C_SM_EDGE_TH, rSmoothYNRS.con2.bits.YNRS_C_SM_EDGE_TH, rUpperYNRS.con2.bits.YNRS_C_SM_EDGE_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SM_EDGE       = %d, %d, %d", rLowerYNRS.con2.bits.YNRS_C_SM_EDGE, rSmoothYNRS.con2.bits.YNRS_C_SM_EDGE, rUpperYNRS.con2.bits.YNRS_C_SM_EDGE);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_PTY_GAIN_TH       = %d, %d, %d", rLowerYNRS.yad2.bits.YNRS_PTY_GAIN_TH, rSmoothYNRS.yad2.bits.YNRS_PTY_GAIN_TH, rUpperYNRS.yad2.bits.YNRS_PTY_GAIN_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX4       = %d, %d, %d", rLowerYNRS.y4lut1.bits.YNRS_Y_CPX4, rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX4, rUpperYNRS.y4lut1.bits.YNRS_Y_CPX4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX3       = %d, %d, %d", rLowerYNRS.y4lut1.bits.YNRS_Y_CPX3, rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX3, rUpperYNRS.y4lut1.bits.YNRS_Y_CPX3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX2       = %d, %d, %d", rLowerYNRS.y4lut1.bits.YNRS_Y_CPX2, rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX2, rUpperYNRS.y4lut1.bits.YNRS_Y_CPX2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX1       = %d, %d, %d", rLowerYNRS.y4lut1.bits.YNRS_Y_CPX1, rSmoothYNRS.y4lut1.bits.YNRS_Y_CPX1, rUpperYNRS.y4lut1.bits.YNRS_Y_CPX1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY3       = %d, %d, %d", rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3, rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3, rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY2       = %d, %d, %d", rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2, rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2, rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY1       = %d, %d, %d", rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1, rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1, rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY0       = %d, %d, %d", rLowerYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0, rSmoothYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0, rUpperYNRS.y4lut2.bits.YNRS_Y_SCALE_CPY0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP3       = %d, %d, %d", rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3, rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3, rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP2       = %d, %d, %d", rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2, rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2, rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP1       = %d, %d, %d", rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1, rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1, rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP0       = %d, %d, %d", rLowerYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0, rSmoothYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0, rUpperYNRS.y4lut3.bits.YNRS_Y_SCALE_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_CPX3       = %d, %d, %d", rLowerYNRS.c4lut1.bits.YNRS_C_CPX3, rSmoothYNRS.c4lut1.bits.YNRS_C_CPX3, rUpperYNRS.c4lut1.bits.YNRS_C_CPX3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_CPX2       = %d, %d, %d", rLowerYNRS.c4lut1.bits.YNRS_C_CPX2, rSmoothYNRS.c4lut1.bits.YNRS_C_CPX2, rUpperYNRS.c4lut1.bits.YNRS_C_CPX2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_CPX1       = %d, %d, %d", rLowerYNRS.c4lut1.bits.YNRS_C_CPX1, rSmoothYNRS.c4lut1.bits.YNRS_C_CPX1, rUpperYNRS.c4lut1.bits.YNRS_C_CPX1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_CPY3       = %d, %d, %d", rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3, rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3, rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_CPY2       = %d, %d, %d", rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2, rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2, rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_CPY1       = %d, %d, %d", rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1, rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1, rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_CPY0       = %d, %d, %d", rLowerYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0, rSmoothYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0, rUpperYNRS.c4lut2.bits.YNRS_C_SCALE_CPY0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_SP3       = %d, %d, %d", rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP3, rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP3, rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_SP2       = %d, %d, %d", rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP2, rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP2, rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_SP1       = %d, %d, %d", rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP1, rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP1, rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_SCALE_SP0       = %d, %d, %d", rLowerYNRS.c4lut3.bits.YNRS_C_SCALE_SP0, rSmoothYNRS.c4lut3.bits.YNRS_C_SCALE_SP0, rUpperYNRS.c4lut3.bits.YNRS_C_SCALE_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPY3       = %d, %d, %d", rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3, rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3, rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPY2       = %d, %d, %d", rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2, rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2, rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPY1       = %d, %d, %d", rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1, rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1, rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPY0       = %d, %d, %d", rLowerYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0, rSmoothYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0, rUpperYNRS.a4lut2.bits.YNRS_Y_ACT_CPY0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_SP3       = %d, %d, %d", rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP3, rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP3, rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_SP2       = %d, %d, %d", rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP2, rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP2, rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_SP1       = %d, %d, %d", rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP1, rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP1, rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_SP0       = %d, %d, %d", rLowerYNRS.a4lut3.bits.YNRS_Y_ACT_SP0, rSmoothYNRS.a4lut3.bits.YNRS_Y_ACT_SP0, rUpperYNRS.a4lut3.bits.YNRS_Y_ACT_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_X3       = %d, %d, %d", rLowerYNRS.l4lut1.bits.YNRS_SL2_X3, rSmoothYNRS.l4lut1.bits.YNRS_SL2_X3, rUpperYNRS.l4lut1.bits.YNRS_SL2_X3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_X2       = %d, %d, %d", rLowerYNRS.l4lut1.bits.YNRS_SL2_X2, rSmoothYNRS.l4lut1.bits.YNRS_SL2_X2, rUpperYNRS.l4lut1.bits.YNRS_SL2_X2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_X1       = %d, %d, %d", rLowerYNRS.l4lut1.bits.YNRS_SL2_X1, rSmoothYNRS.l4lut1.bits.YNRS_SL2_X1, rUpperYNRS.l4lut1.bits.YNRS_SL2_X1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_GAIN3       = %d, %d, %d", rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN3, rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN3, rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_GAIN2       = %d, %d, %d", rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN2, rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN2, rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_GAIN1       = %d, %d, %d", rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN1, rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN1, rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_GAIN0       = %d, %d, %d", rLowerYNRS.l4lut2.bits.YNRS_SL2_GAIN0, rSmoothYNRS.l4lut2.bits.YNRS_SL2_GAIN0, rUpperYNRS.l4lut2.bits.YNRS_SL2_GAIN0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_SP3       = %d, %d, %d", rLowerYNRS.l4lut3.bits.YNRS_SL2_SP3, rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP3, rUpperYNRS.l4lut3.bits.YNRS_SL2_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_SP2       = %d, %d, %d", rLowerYNRS.l4lut3.bits.YNRS_SL2_SP2, rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP2, rUpperYNRS.l4lut3.bits.YNRS_SL2_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_SP1       = %d, %d, %d", rLowerYNRS.l4lut3.bits.YNRS_SL2_SP1, rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP1, rUpperYNRS.l4lut3.bits.YNRS_SL2_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_SP0       = %d, %d, %d", rLowerYNRS.l4lut3.bits.YNRS_SL2_SP0, rSmoothYNRS.l4lut3.bits.YNRS_SL2_SP0, rUpperYNRS.l4lut3.bits.YNRS_SL2_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_V_RNG4       = %d, %d, %d", rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4, rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4, rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_V_RNG3       = %d, %d, %d", rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3, rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3, rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_V_RNG2       = %d, %d, %d", rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2, rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2, rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_V_RNG1       = %d, %d, %d", rLowerYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1, rSmoothYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1, rUpperYNRS.pty0v.bits.YNRS_Y_L0_V_RNG1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_L_DIFF_TH       = %d, %d, %d", rLowerYNRS.cad.bits.YNRS_C_L_DIFF_TH, rSmoothYNRS.cad.bits.YNRS_C_L_DIFF_TH, rUpperYNRS.cad.bits.YNRS_C_L_DIFF_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_PTC_GAIN_TH       = %d, %d, %d", rLowerYNRS.cad.bits.YNRS_PTC_GAIN_TH, rSmoothYNRS.cad.bits.YNRS_PTC_GAIN_TH, rUpperYNRS.cad.bits.YNRS_PTC_GAIN_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_SCALE_GAIN       = %d, %d, %d", rLowerYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN, rSmoothYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN, rUpperYNRS.sl2.bits.YNRS_SL2_SCALE_GAIN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_SL2_C_GAIN       = %d, %d, %d", rLowerYNRS.sl2.bits.YNRS_SL2_C_GAIN, rSmoothYNRS.sl2.bits.YNRS_SL2_C_GAIN, rUpperYNRS.sl2.bits.YNRS_SL2_C_GAIN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_H_RNG4       = %d, %d, %d", rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4, rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4, rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_H_RNG3       = %d, %d, %d", rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3, rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3, rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_H_RNG2       = %d, %d, %d", rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2, rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2, rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_L0_H_RNG1       = %d, %d, %d", rLowerYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1, rSmoothYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1, rUpperYNRS.pty0h.bits.YNRS_Y_L0_H_RNG1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_CPX3       = %d, %d, %d", rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX3, rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX3, rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_CPX2       = %d, %d, %d", rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX2, rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX2, rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_CPX1       = %d, %d, %d", rLowerYNRS.t4lut1.bits.YNRS_TBL_CPX1, rSmoothYNRS.t4lut1.bits.YNRS_TBL_CPX1, rUpperYNRS.t4lut1.bits.YNRS_TBL_CPX1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_CPY3       = %d, %d, %d", rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3, rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3, rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_CPY2       = %d, %d, %d", rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2, rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2, rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_CPY1       = %d, %d, %d", rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1, rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1, rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_CPY0       = %d, %d, %d", rLowerYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0, rSmoothYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0, rUpperYNRS.t4lut2.bits.YNRS_TBL_GAIN_CPY0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_SP3       = %d, %d, %d", rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3, rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3, rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_SP2       = %d, %d, %d", rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2, rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2, rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_SP1       = %d, %d, %d", rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1, rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1, rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_GAIN_SP0       = %d, %d, %d", rLowerYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0, rSmoothYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0, rUpperYNRS.t4lut3.bits.YNRS_TBL_GAIN_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ACT_DIF_LO_TH       = %d, %d, %d", rLowerYNRS.act1.bits.YNRS_ACT_DIF_LO_TH, rSmoothYNRS.act1.bits.YNRS_ACT_DIF_LO_TH, rUpperYNRS.act1.bits.YNRS_ACT_DIF_LO_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ACT_DIF_GAIN       = %d, %d, %d", rLowerYNRS.act1.bits.YNRS_ACT_DIF_GAIN, rSmoothYNRS.act1.bits.YNRS_ACT_DIF_GAIN, rUpperYNRS.act1.bits.YNRS_ACT_DIF_GAIN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ACT_DIF_HI_TH       = %d, %d, %d", rLowerYNRS.act1.bits.YNRS_ACT_DIF_HI_TH, rSmoothYNRS.act1.bits.YNRS_ACT_DIF_HI_TH, rUpperYNRS.act1.bits.YNRS_ACT_DIF_HI_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ACT_SL2_GAIN       = %d, %d, %d", rLowerYNRS.act1.bits.YNRS_ACT_SL2_GAIN, rSmoothYNRS.act1.bits.YNRS_ACT_SL2_GAIN, rUpperYNRS.act1.bits.YNRS_ACT_SL2_GAIN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_V_RNG4       = %d, %d, %d", rLowerYNRS.ptcv.bits.YNRS_C_V_RNG4, rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG4, rUpperYNRS.ptcv.bits.YNRS_C_V_RNG4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_V_RNG3       = %d, %d, %d", rLowerYNRS.ptcv.bits.YNRS_C_V_RNG3, rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG3, rUpperYNRS.ptcv.bits.YNRS_C_V_RNG3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_V_RNG2       = %d, %d, %d", rLowerYNRS.ptcv.bits.YNRS_C_V_RNG2, rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG2, rUpperYNRS.ptcv.bits.YNRS_C_V_RNG2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_V_RNG1       = %d, %d, %d", rLowerYNRS.ptcv.bits.YNRS_C_V_RNG1, rSmoothYNRS.ptcv.bits.YNRS_C_V_RNG1, rUpperYNRS.ptcv.bits.YNRS_C_V_RNG1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CEN_TH       = %d, %d, %d", rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_TH, rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_TH, rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CEN_GAIN       = %d, %d, %d", rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN, rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN, rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_GAIN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CEN_OFT       = %d, %d, %d", rLowerYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT, rSmoothYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT, rUpperYNRS.act4.bits.YNRS_Y_ACT_CEN_OFT);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_H_RNG4       = %d, %d, %d", rLowerYNRS.ptch.bits.YNRS_C_H_RNG4, rSmoothYNRS.ptch.bits.YNRS_C_H_RNG4, rUpperYNRS.ptch.bits.YNRS_C_H_RNG4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_H_RNG3       = %d, %d, %d", rLowerYNRS.ptch.bits.YNRS_C_H_RNG3, rSmoothYNRS.ptch.bits.YNRS_C_H_RNG3, rUpperYNRS.ptch.bits.YNRS_C_H_RNG3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_H_RNG2       = %d, %d, %d", rLowerYNRS.ptch.bits.YNRS_C_H_RNG2, rSmoothYNRS.ptch.bits.YNRS_C_H_RNG2, rUpperYNRS.ptch.bits.YNRS_C_H_RNG2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_C_H_RNG1       = %d, %d, %d", rLowerYNRS.ptch.bits.YNRS_C_H_RNG1, rSmoothYNRS.ptch.bits.YNRS_C_H_RNG1, rUpperYNRS.ptch.bits.YNRS_C_H_RNG1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_BAL_STR       = %d, %d, %d", rLowerYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR, rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR, rUpperYNRS.hf_cor.bits.YNRS_Y_HF_BAL_STR);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_CLIP       = %d, %d, %d", rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CLIP, rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CLIP, rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CLIP);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_CORE_SL       = %d, %d, %d", rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL, rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL, rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CORE_SL);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_CORE_TH       = %d, %d, %d", rLowerYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH, rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH, rUpperYNRS.hf_cor.bits.YNRS_Y_HF_CORE_TH);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_X4       = %d, %d, %d", rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4, rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4, rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_X3       = %d, %d, %d", rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3, rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3, rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_X2       = %d, %d, %d", rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2, rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2, rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_X1       = %d, %d, %d", rLowerYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1, rSmoothYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1, rUpperYNRS.hf_act0.bits.YNRS_Y_HF_ACT_X1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_Y3       = %d, %d, %d", rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3, rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3, rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_Y2       = %d, %d, %d", rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2, rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2, rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_Y1       = %d, %d, %d", rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1, rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1, rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_Y0       = %d, %d, %d", rLowerYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0, rSmoothYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0, rUpperYNRS.hf_act1.bits.YNRS_Y_HF_ACT_Y0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ACT_BLD_BASE_C       = %d, %d, %d", rLowerYNRS.actc.bits.YNRS_ACT_BLD_BASE_C, rSmoothYNRS.actc.bits.YNRS_ACT_BLD_BASE_C, rUpperYNRS.actc.bits.YNRS_ACT_BLD_BASE_C);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_RSV       = %d, %d, %d", rLowerYNRS.actc.bits.YNRS_RSV, rSmoothYNRS.actc.bits.YNRS_RSV, rUpperYNRS.actc.bits.YNRS_RSV);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_CEN_GAIN_HI_TH_LPF       = %d, %d, %d", rLowerYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF, rSmoothYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF, rUpperYNRS.ylad.bits.YNRS_CEN_GAIN_HI_TH_LPF);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_CEN_GAIN_LO_TH_LPF       = %d, %d, %d", rLowerYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF, rSmoothYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF, rUpperYNRS.ylad.bits.YNRS_CEN_GAIN_LO_TH_LPF);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_SP4       = %d, %d, %d", rLowerYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4, rSmoothYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4, rUpperYNRS.hf_act2.bits.YNRS_Y_HF_ACT_SP4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_Y4       = %d, %d, %d", rLowerYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4, rSmoothYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4, rUpperYNRS.hf_act2.bits.YNRS_Y_HF_ACT_Y4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_SP3       = %d, %d, %d", rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3, rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3, rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_SP2       = %d, %d, %d", rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2, rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2, rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_SP1       = %d, %d, %d", rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1, rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1, rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_ACT_SP0       = %d, %d, %d", rLowerYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0, rSmoothYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0, rUpperYNRS.hf_act3.bits.YNRS_Y_HF_ACT_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_Y1       = %d, %d, %d", rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1, rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1, rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_Y0       = %d, %d, %d", rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0, rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0, rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_Y0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_X2       = %d, %d, %d", rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2, rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2, rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_X1       = %d, %d, %d", rLowerYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1, rSmoothYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1, rUpperYNRS.hf_luma0.bits.YNRS_Y_HF_LUMA_X1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_SP2       = %d, %d, %d", rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2, rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2, rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_SP1       = %d, %d, %d", rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1, rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1, rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_SP0       = %d, %d, %d", rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0, rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0, rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_SP0);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_LUMA_Y2       = %d, %d, %d", rLowerYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2, rSmoothYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2, rUpperYNRS.hf_luma1.bits.YNRS_Y_HF_LUMA_Y2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX8       = %d, %d, %d", rLowerYNRS.y4lut4.bits.YNRS_Y_CPX8, rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX8, rUpperYNRS.y4lut4.bits.YNRS_Y_CPX8);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX7       = %d, %d, %d", rLowerYNRS.y4lut4.bits.YNRS_Y_CPX7, rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX7, rUpperYNRS.y4lut4.bits.YNRS_Y_CPX7);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX6       = %d, %d, %d", rLowerYNRS.y4lut4.bits.YNRS_Y_CPX6, rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX6, rUpperYNRS.y4lut4.bits.YNRS_Y_CPX6);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_CPX5       = %d, %d, %d", rLowerYNRS.y4lut4.bits.YNRS_Y_CPX5, rSmoothYNRS.y4lut4.bits.YNRS_Y_CPX5, rUpperYNRS.y4lut4.bits.YNRS_Y_CPX5);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY7       = %d, %d, %d", rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7, rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7, rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY7);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY6       = %d, %d, %d", rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6, rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6, rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY6);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY5       = %d, %d, %d", rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5, rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5, rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY5);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY4       = %d, %d, %d", rLowerYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4, rSmoothYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4, rUpperYNRS.y4lut5.bits.YNRS_Y_SCALE_CPY4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP7       = %d, %d, %d", rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7, rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7, rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP7);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP6       = %d, %d, %d", rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6, rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6, rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP6);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP5       = %d, %d, %d", rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5, rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5, rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP5);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP4       = %d, %d, %d", rLowerYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4, rSmoothYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4, rUpperYNRS.y4lut6.bits.YNRS_Y_SCALE_SP4);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_SP8       = %d, %d, %d", rLowerYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8, rSmoothYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8, rUpperYNRS.y4lut7.bits.YNRS_Y_SCALE_SP8);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_SCALE_CPY8       = %d, %d, %d", rLowerYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8, rSmoothYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8, rUpperYNRS.y4lut7.bits.YNRS_Y_SCALE_CPY8);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPX3       = %d, %d, %d", rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3, rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3, rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX3);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPX2       = %d, %d, %d", rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2, rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2, rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX2);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_ACT_CPX1       = %d, %d, %d", rLowerYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1, rSmoothYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1, rUpperYNRS.a4lut1.bits.YNRS_Y_ACT_CPX1);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TBL_PRC       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_TBL_PRC, rSmoothYNRS.con1.bits.YNRS_TBL_PRC, rUpperYNRS.con1.bits.YNRS_TBL_PRC);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TABLE_EN       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_TABLE_EN, rSmoothYNRS.con1.bits.YNRS_TABLE_EN, rUpperYNRS.con1.bits.YNRS_TABLE_EN);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_LBIT_MODE       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_LBIT_MODE, rSmoothYNRS.con1.bits.YNRS_LBIT_MODE, rUpperYNRS.con1.bits.YNRS_LBIT_MODE);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_TILE_EDGE       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_TILE_EDGE, rSmoothYNRS.con1.bits.YNRS_TILE_EDGE, rUpperYNRS.con1.bits.YNRS_TILE_EDGE);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ENY       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_ENY, rSmoothYNRS.con1.bits.YNRS_ENY, rUpperYNRS.con1.bits.YNRS_ENY);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_ENC       = %d, %d, %d", rLowerYNRS.con1.bits.YNRS_ENC, rSmoothYNRS.con1.bits.YNRS_ENC, rUpperYNRS.con1.bits.YNRS_ENC);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_IMPL_MODE       = %d, %d, %d", rLowerYNRS.con2.bits.YNRS_IMPL_MODE, rSmoothYNRS.con2.bits.YNRS_IMPL_MODE, rUpperYNRS.con2.bits.YNRS_IMPL_MODE);
    INTER_LOG_IF(bSmoothYNRSDebug, "[L,S,U]YNRS_Y_HF_BAL_MODE       = %d, %d, %d", rLowerYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE, rSmoothYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE, rUpperYNRS.hf_cor.bits.YNRS_Y_HF_BAL_MODE);

}

MVOID Smooth_YNR_TBL(MINT32 u4ReaISO,  // Rea ISO
               MINT32 u4UpperISO, // Upper ISO
               MINT32 u4LowerISO, // Lower ISO
               ISP_NVRAM_YNR_LUT_T const& rUpperYNR_TBL, // YNR TBL for upper ISO
               ISP_NVRAM_YNR_LUT_T const& rLowerYNR_TBL,   // YNR TBL for lower ISO
               ISP_NVRAM_YNR_LUT_T& rSmoothYNR_TBL) //output
{

	char value[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_ynrtbl.enable", value, "0");
    MUINT32 u4SmoothANRTbldebug = atoi(value);

	INTER_LOG_IF(u4SmoothANRTbldebug,"[%s()] u4ReaISO: %d, u4UpperISO = %d, u4LowerISO = %d\n", __FUNCTION__, u4ReaISO, u4UpperISO, u4LowerISO);

	    // interpolation initial


    double RATIO_ISO_lo = 0;
    double RATIO_ISO_up = 0;

        //protection for out-of-bound

    if (u4ReaISO <= u4LowerISO)
    {
        RATIO_ISO_lo = 1;
    }
	else if(u4ReaISO >= u4UpperISO)
	{
		RATIO_ISO_lo = 0;
	}
	else
	{
		RATIO_ISO_lo = (double)(u4UpperISO - u4ReaISO) / (double)(u4UpperISO - u4LowerISO);
	}

	RATIO_ISO_up = 1.0 - RATIO_ISO_lo;


	for(int i = 0; i < YNR_TBL_NUM; ++i){

		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_Y0 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_Y0, rUpperYNR_TBL.lut[i].bits.YNR_TBL_Y0, 0);
		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_U0 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_U0, rUpperYNR_TBL.lut[i].bits.YNR_TBL_U0, 0);
		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_V0 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_V0, rUpperYNR_TBL.lut[i].bits.YNR_TBL_V0, 0);
		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_Y1 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_Y1, rUpperYNR_TBL.lut[i].bits.YNR_TBL_Y1, 0);
		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_U1 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_U1, rUpperYNR_TBL.lut[i].bits.YNR_TBL_U1, 0);
		rSmoothYNR_TBL.lut[i].bits.YNR_TBL_V1 =  InterParam_1D(RATIO_ISO_lo, RATIO_ISO_up, rLowerYNR_TBL.lut[i].bits.YNR_TBL_V1, rUpperYNR_TBL.lut[i].bits.YNR_TBL_V1, 0);

		rSmoothYNR_TBL.lut[i].bits.rsv_15 = 0;
		rSmoothYNR_TBL.lut[i].bits.rsv_31 = 0;

	}

}




//************************************************************
// SWNR interpolation
//************************************************************


MINT32 InterParam_SWNR(MINT32 ISO, MINT32 ISOpre, MINT32 ISOpos, MINT32 PARAMpre, MINT32 PARAMpos, MINT32 Method) {
    MINT32 InterPARAM = 0;

    if(ISOpre == ISOpos) {
        //    To prevent someone sets different PARAMpre and PARAMpos
        return (MINT32)((PARAMpre + PARAMpos + 1) / 2);
    }

    switch(Method) {
    case 1:
        if(abs(ISO - ISOpre) > abs(ISOpos - ISO)) {
            InterPARAM = PARAMpos;
        }
        else{
            InterPARAM = PARAMpre;
        }
        break;
    case 0:
    default:
        double RATIOpre = (double)(ISOpos - ISO) / (double)(ISOpos - ISOpre);
        double RATIOpos = 1.0 - (double)(RATIOpre);
        InterPARAM = (MINT32)(RATIOpre * PARAMpre + RATIOpos * PARAMpos + 0.5);
        break;
    }

    return InterPARAM;
}

MVOID SmoothNR2(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                NR_PARAM const& rUpper, // settings for upper ISO
                NR_PARAM const& rLower,   // settings for lower ISO
                NR_PARAM& rSmooth // Output
                )
{

#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    //
    Inter(NR_K      , 0);
    Inter(NR_S      , 0);
    Inter(NR_SD     , 0);
    Inter(NR_BLD_W  , 0);
    Inter(NR_BLD_TH , 0);
    Inter(NR_SMTH   , 0);
    Inter(NR_NTRL_TH_1_Y   , 0);
    Inter(NR_NTRL_TH_2_Y   , 0);
    Inter(NR_NTRL_TH_1_UV   , 0);
    Inter(NR_NTRL_TH_2_UV   , 0);
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(NR_K);
        DumpParam(NR_S);
        DumpParam(NR_SD);
        DumpParam(NR_BLD_W);
        DumpParam(NR_BLD_TH);
        DumpParam(NR_SMTH);
        DumpParam(NR_NTRL_TH_1_Y);
        DumpParam(NR_NTRL_TH_2_Y);
        DumpParam(NR_NTRL_TH_1_UV);
        DumpParam(NR_NTRL_TH_2_UV);
#undef DumpParam
    }

}

MVOID SmoothSWHFG(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                HFG_PARAM const& rUpper, // settings for upper ISO
                HFG_PARAM const& rLower,   // settings for lower ISO
                HFG_PARAM& rSmooth) // Output
{
#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    MINT32 HFG_inter_method = 0;
    if (rLower.HFG_ENABLE != rUpper.HFG_ENABLE) // HFG_ENABLE
        HFG_inter_method = 1;

    Inter(HFG_ENABLE      , HFG_inter_method);
    Inter(HFG_SD0         , HFG_inter_method);
    Inter(HFG_SD1         , HFG_inter_method);
    Inter(HFG_SD2         , HFG_inter_method);
    Inter(HFG_TX_S        , HFG_inter_method);
    Inter(HFG_LCE_LINK_EN , HFG_inter_method);
    Inter(HFG_LUMA_CPX1   , HFG_inter_method);
    Inter(HFG_LUMA_CPX2   , HFG_inter_method);
    Inter(HFG_LUMA_CPX3   , HFG_inter_method);
    Inter(HFG_LUMA_CPY0   , HFG_inter_method);
    Inter(HFG_LUMA_CPY1   , HFG_inter_method);
    Inter(HFG_LUMA_CPY2   , HFG_inter_method);
    Inter(HFG_LUMA_CPY3   , HFG_inter_method);
    Inter(HFG_LUMA_SP0    , HFG_inter_method);
    Inter(HFG_LUMA_SP1    , HFG_inter_method);
    Inter(HFG_LUMA_SP2    , HFG_inter_method);
    Inter(HFG_LUMA_SP3    , HFG_inter_method);
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(HFG_ENABLE);
        DumpParam(HFG_GSD);
        DumpParam(HFG_SD0);
        DumpParam(HFG_SD1);
        DumpParam(HFG_SD2);
        DumpParam(HFG_TX_S);
        DumpParam(HFG_LCE_LINK_EN);
        DumpParam(HFG_LUMA_CPX1);
        DumpParam(HFG_LUMA_CPX2);
        DumpParam(HFG_LUMA_CPX3);
        DumpParam(HFG_LUMA_CPY0);
        DumpParam(HFG_LUMA_CPY1);
        DumpParam(HFG_LUMA_CPY2);
        DumpParam(HFG_LUMA_CPY3);
        DumpParam(HFG_LUMA_SP0);
        DumpParam(HFG_LUMA_SP1);
        DumpParam(HFG_LUMA_SP2);
        DumpParam(HFG_LUMA_SP3);
#undef DumpParam
    }
}

MVOID SmoothSWCCR(MUINT32 u4RealISO,  // Real ISO
                MUINT32 u4UpperISO, // Upper ISO
                MUINT32 u4LowerISO, // Lower ISO
                CCR_PARAM const& rUpper, // settings for upper ISO
                CCR_PARAM const& rLower,   // settings for lower ISO
                CCR_PARAM& rSmooth) // Output
{
#define Inter(item, method)                                                           \
    do{                                                                               \
        rSmooth.item = InterParam_SWNR(                                                 \
                u4RealISO,                                                            \
                u4LowerISO,                                                           \
                u4UpperISO,                                                           \
                rLower.item,                                                          \
                rUpper.item,                                                          \
                method);                                                              \
    } while(0)
    //
    // SWCCR part
    MINT32 CCR_inter_method = 0;
    if (rLower.CCR_ENABLE != rUpper.CCR_ENABLE)
        CCR_inter_method = 1;

    Inter(CCR_ENABLE             , CCR_inter_method);
    Inter(CCR_CEN_U              , CCR_inter_method);
    Inter(CCR_CEN_V              , CCR_inter_method);
    Inter(CCR_Y_CPX1             , CCR_inter_method);
    Inter(CCR_Y_CPX2             , CCR_inter_method);
    Inter(CCR_Y_CPY1             , CCR_inter_method);
    Inter(CCR_UV_X1              , CCR_inter_method);
    Inter(CCR_UV_X2              , CCR_inter_method);
    Inter(CCR_UV_X3              , CCR_inter_method);
    Inter(CCR_UV_GAIN1           , CCR_inter_method);
    Inter(CCR_UV_GAIN2           , CCR_inter_method);
    Inter(CCR_Y_CPX3             , CCR_inter_method);
    Inter(CCR_Y_CPY0             , CCR_inter_method);
    Inter(CCR_Y_CPY2             , CCR_inter_method);
    Inter(CCR_UV_GAIN_MODE       , CCR_inter_method);
    Inter(CCR_MODE               , CCR_inter_method);
    Inter(CCR_OR_MODE            , CCR_inter_method);
    Inter(CCR_HUE_X1             , CCR_inter_method);
    Inter(CCR_HUE_X2             , CCR_inter_method);
    Inter(CCR_HUE_X3             , CCR_inter_method);
    Inter(CCR_HUE_X4             , CCR_inter_method);
    Inter(CCR_HUE_GAIN1          , CCR_inter_method);
    Inter(CCR_HUE_GAIN2          , CCR_inter_method);
    Inter(CCR_Y_SP2              , CCR_inter_method);
    Inter(CCR_UV_GAIN_SP2        , CCR_inter_method);

    //    Slope parameters update
    MINT32 CCR_Y_SP0;
    MINT32 CCR_Y_SP1;
    MINT32 CCR_UV_GAIN_SP1;
    MINT32 CCR_HUE_SP1;
    MINT32 CCR_HUE_SP2;

    //CCR_Y_SP0
    if(rSmooth.CCR_Y_CPX1 == 0)
        CCR_Y_SP0 = 0;
    else
    {
        MINT32 Y_SP0 = (MINT32)(32 * (double)(rSmooth.CCR_Y_CPY1-rSmooth.CCR_Y_CPY0)/(double)rSmooth.CCR_Y_CPX1+0.5);
        CCR_Y_SP0 = (Y_SP0>127)?127:Y_SP0;
    }

    //CCR_Y_SP1
    if(rSmooth.CCR_Y_CPX2 == 0)
        CCR_Y_SP1 = 0;
    else
    {
        MINT32 Y_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_Y_CPY2-rSmooth.CCR_Y_CPY1)/(double)(rSmooth.CCR_Y_CPX2 - rSmooth.CCR_Y_CPX1)+0.5);
        CCR_Y_SP1 = (Y_SP1>127)?127:Y_SP1;
    }

    //CCR_UV_GAIN_SP1
    if(rSmooth.CCR_UV_X2 == rSmooth.CCR_UV_X1)
        CCR_UV_GAIN_SP1 = 0;
    else
    {
        MINT32 UV_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_UV_GAIN1-rSmooth.CCR_UV_GAIN2)/(double)(rSmooth.CCR_UV_X2-rSmooth.CCR_UV_X1)+0.5);
        CCR_UV_GAIN_SP1 = (UV_SP1>1023)?1023:UV_SP1;
    }

    //CCR_HUE_SP1
    if(rSmooth.CCR_HUE_X1 == rSmooth.CCR_HUE_X2)
        CCR_HUE_SP1 = (rSmooth.CCR_HUE_GAIN1>rSmooth.CCR_HUE_GAIN2)?-128:127;
    else
    {
        MINT32 HUE_SP1 = (MINT32)(32 * (double)(rSmooth.CCR_HUE_GAIN2-rSmooth.CCR_HUE_GAIN1)/(double)(rSmooth.CCR_HUE_X2-rSmooth.CCR_HUE_X1));
        CCR_HUE_SP1 = (HUE_SP1>127)?127:(HUE_SP1<-128)?-128:HUE_SP1;
    }

    //CCR_HUE_SP2
    if(rSmooth.CCR_HUE_X3 == rSmooth.CCR_HUE_X4)
        CCR_HUE_SP2 = (rSmooth.CCR_HUE_GAIN1>rSmooth.CCR_HUE_GAIN2)?127:-128;
    else
    {
        MINT32 HUE_SP2 = (MINT32)(32 * (double)(rSmooth.CCR_HUE_GAIN1-rSmooth.CCR_HUE_GAIN2)/(double)(rSmooth.CCR_HUE_X4-rSmooth.CCR_HUE_X3));
        CCR_HUE_SP2 = (HUE_SP2>127)?127:(HUE_SP2<-128)?-128:HUE_SP2;
    }

    rSmooth.CCR_Y_SP0       = CCR_Y_SP0;
    rSmooth.CCR_Y_SP1       = CCR_Y_SP1;
    rSmooth.CCR_UV_GAIN_SP1 = CCR_UV_GAIN_SP1;
    rSmooth.CCR_HUE_SP1     = CCR_HUE_SP1;
    rSmooth.CCR_HUE_SP2     = CCR_HUE_SP2;
#undef Inter
    MBOOL bSmoothDebug = property_get_bool("vendor.debug.smooth_swnr.enable", false);
    if( bSmoothDebug )
    {
        MY_LOG("[%s()] u4LowerISO: %d, u4RealISO = %d, u4UpperISO = %d\n",
                __FUNCTION__, u4LowerISO, u4RealISO, u4UpperISO);
#define DumpParam(item)                                                               \
        do{                                                                           \
            MY_LOG("%s = %d, %d, %d", #item, rLower.item, rSmooth.item, rUpper.item); \
        }while(0)
        DumpParam(CCR_ENABLE);
        DumpParam(CCR_CEN_U);
        DumpParam(CCR_CEN_V);
        DumpParam(CCR_Y_CPX1);
        DumpParam(CCR_Y_CPX2);
        DumpParam(CCR_Y_CPY1);
        DumpParam(CCR_Y_SP1);
        DumpParam(CCR_UV_X1);
        DumpParam(CCR_UV_X2);
        DumpParam(CCR_UV_X3);
        DumpParam(CCR_UV_GAIN1);
        DumpParam(CCR_UV_GAIN2);
        DumpParam(CCR_UV_GAIN_SP1);
        DumpParam(CCR_UV_GAIN_SP2);
        DumpParam(CCR_Y_CPX3);
        DumpParam(CCR_Y_CPY0);
        DumpParam(CCR_Y_CPY2);
        DumpParam(CCR_Y_SP0);
        DumpParam(CCR_Y_SP2);
        DumpParam(CCR_UV_GAIN_MODE);
        DumpParam(CCR_MODE);
        DumpParam(CCR_OR_MODE);
        DumpParam(CCR_HUE_X1);
        DumpParam(CCR_HUE_X2);
        DumpParam(CCR_HUE_X3);
        DumpParam(CCR_HUE_X4);
        DumpParam(CCR_HUE_SP1);
        DumpParam(CCR_HUE_SP2);
        DumpParam(CCR_HUE_GAIN1);
        DumpParam(CCR_HUE_GAIN2);
#undef DumpParam
    }
}


MVOID SmoothFSWNR(MUINT32 u4RealISO, // Real ISO
               MUINT32 u4UpperISO, // Upper ISO
               MUINT32 u4LowerISO, // Lower ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT const& rUpper, // settings for upper ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT const& rLower,   // settings for lower ISO
               NVRAM_CAMERA_FEATURE_SWNR_STRUCT& rSmooth)  // Output
{

    SmoothNR2(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.NR, rLower.NR, rSmooth.NR);
    SmoothSWHFG(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.HFG, rLower.HFG, rSmooth.HFG);
    SmoothSWCCR(u4RealISO, u4UpperISO, u4LowerISO,
            rUpper.CCR, rLower.CCR, rSmooth.CCR);
}




#if 1
//************************************************************
// Smooth COLOR
//************************************************************
typedef struct
{
    MBOOL bIsInitial;
    MBOOL bIsCapture;
    MBOOL bEnableLSP;
    MUINT32 u4LVRatio;
    MUINT32 u4LVOfst;
    MUINT32 u4RealMired;
    MUINT32 u4UpperMired;
    MUINT32 u4LowerMired;
    MINT32 i4RealLV;
    MINT32 i4UpperLV;
    MINT32 i4LowerLV;
    MUINT32 u4LumStep;
    MUINT32 u4SatStep;
    MUINT32 u4HueStep;
    MUINT32 u4OutdoorBase;
    MUINT32 u4OutdoorRatio;
    MUINT32 u4OutdoorStep;
} ISP_SMOOTH_COLOR_PARAM_T;

MBOOL IsMiredBoundary(MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired)
{
    if (i4UpperMired == i4LowerMired || i4RealMired == 0 || i4UpperMired == 0 || i4LowerMired == 0) // Mired Boundary
        return MTRUE;
    else
        return MFALSE;

}

MBOOL IsLVBoundary(MINT32 i4RealLV, MINT32 i4UpperLV, MINT32 i4LowerLV)
{
    if (i4UpperLV == i4LowerLV) // LV Boundary
        return MTRUE;
    else
        return MFALSE;

}

MUINT32 IIR(MUINT32 current, MUINT32 target, MUINT32 step)
{
    MINT32 delta = current - target;
    if (abs(delta) > step)
    {
        if (current > target)
        {
            current = current - step;
        }
        else if (current < target)
        {
            current = current + step;
        }
    }
    else
    {
        current = target;
    }

    return current;
}

MINT32 InterParamByMired(MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired, MINT32 i4ParamUpperMired, MINT32 i4ParamLowerMired)
{
    MINT32 i4ParamRealMired = 0;
    MINT32 i4HalfMired = (i4LowerMired - i4UpperMired)>>1; // for rounding, Note : LowerCT < RealCT < UpperCT => LowerMired > RealMired > UpperMired

    if (IsMiredBoundary(i4RealMired, i4UpperMired, i4LowerMired))
    {
        i4ParamRealMired = i4ParamUpperMired;
    }
    else
    {
    	if (i4ParamLowerMired < i4ParamUpperMired)
			i4ParamRealMired = i4ParamUpperMired - ((i4ParamUpperMired - i4ParamLowerMired)*(i4RealMired - i4UpperMired) + i4HalfMired)/(i4LowerMired - i4UpperMired);
		else
        	i4ParamRealMired = i4ParamUpperMired + ((i4ParamLowerMired - i4ParamUpperMired)*(i4RealMired - i4UpperMired) + i4HalfMired)/(i4LowerMired - i4UpperMired);
    }

    return i4ParamRealMired;
}

MINT32 InterParamByLV(MINT32 i4RealLV, MINT32 i4UpperLV, MINT32 i4LowerLV, MINT32 i4ParamUpperLV, MINT32 i4ParamLowerLV)
{
    MINT32 i4ParamRealLV = 0;
    MINT32 i4HalfLV = (i4UpperLV - i4LowerLV)>>1; // for rounding

    if (IsLVBoundary(i4RealLV, i4UpperLV, i4LowerLV))
    {
        i4ParamRealLV = i4ParamLowerLV;
    }
    else
    {
    	if (i4ParamUpperLV < i4ParamLowerLV)
        	i4ParamRealLV = i4ParamLowerLV - ((i4ParamLowerLV - i4ParamUpperLV)*(i4RealLV - i4LowerLV) + i4HalfLV)/(i4UpperLV - i4LowerLV);
		else
        	i4ParamRealLV = i4ParamLowerLV + ((i4ParamUpperLV - i4ParamLowerLV)*(i4RealLV - i4LowerLV) + i4HalfLV)/(i4UpperLV - i4LowerLV);
    }

    return i4ParamRealLV;
}


MINT32 InterParam_Color(MINT32 i4RealLV   , MINT32 i4UpperLV   , MINT32 i4LowerLV   ,
                        MINT32 i4RealMired, MINT32 i4UpperMired, MINT32 i4LowerMired,
                        MINT32 i4ParamLvLoMiredLo, MINT32 i4ParamLvLoMiredUp,
                        MINT32 i4ParamLvUpMiredLo, MINT32 i4ParamLvUpMiredUp)
{
    MINT32 i4ParamRealMiredUpperLV = 0;
    MINT32 i4ParamRealMiredLowerLV = 0;
    MINT32 i4ParamRealMiredRealLV  = 0;

    i4ParamRealMiredLowerLV = InterParamByMired(i4RealMired, i4UpperMired, i4LowerMired, i4ParamLvLoMiredUp, i4ParamLvLoMiredLo);
    i4ParamRealMiredUpperLV = InterParamByMired(i4RealMired, i4UpperMired, i4LowerMired, i4ParamLvUpMiredUp, i4ParamLvUpMiredLo);

    i4ParamRealMiredRealLV  = InterParamByLV(i4RealLV, i4UpperLV, i4LowerLV, i4ParamRealMiredUpperLV, i4ParamRealMiredLowerLV);

    return i4ParamRealMiredRealLV;
}

MVOID InterParamGlobal( ISP_SMOOTH_COLOR_PARAM_T& rParam,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                        ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                        ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                        MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.global", cLogLevel, "0");
    MINT32 LVMiredDumpGlobal = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()]  u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 lum_speed    = rParam.u4LumStep;
    MUINT32 sat_speed    = rParam.u4SatStep;

    // Global Saturation/Brightness/Contrast
    MUINT32 Final_bri = rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_g_brightness;
    MUINT32 Final_con = rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_g_contrast;
    MUINT32 Final_sat = rSmoothCOLOR_TBL.g_pic_adj_main_2.bits.COLOR_g_saturation;

    MUINT32 u4SaturationLvLoMiredLo = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_2.bits.COLOR_g_saturation;
    MUINT32 u4SaturationLvLoMiredUp = rTBL_LV_Lo_CT_Up.g_pic_adj_main_2.bits.COLOR_g_saturation;
    MUINT32 u4SaturationLvUpMiredLo = rTBL_LV_Up_CT_Lo.g_pic_adj_main_2.bits.COLOR_g_saturation;
    MUINT32 u4SaturationLvUpMiredUp = rTBL_LV_Up_CT_Up.g_pic_adj_main_2.bits.COLOR_g_saturation;

    MUINT32 u4BrightnessLvLoMiredLo = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_1.bits.COLOR_g_brightness;
    MUINT32 u4BrightnessLvLoMiredUp = rTBL_LV_Lo_CT_Up.g_pic_adj_main_1.bits.COLOR_g_brightness;
    MUINT32 u4BrightnessLvUpMiredLo = rTBL_LV_Up_CT_Lo.g_pic_adj_main_1.bits.COLOR_g_brightness;
    MUINT32 u4BrightnessLvUpMiredUp = rTBL_LV_Up_CT_Up.g_pic_adj_main_1.bits.COLOR_g_brightness;

    MUINT32 u4ContrastLvLoMiredLo   = rTBL_LV_Lo_CT_Lo.g_pic_adj_main_1.bits.COLOR_g_contrast;
    MUINT32 u4ContrastLvLoMiredUp   = rTBL_LV_Lo_CT_Up.g_pic_adj_main_1.bits.COLOR_g_contrast;
    MUINT32 u4ContrastLvUpMiredLo   = rTBL_LV_Up_CT_Lo.g_pic_adj_main_1.bits.COLOR_g_contrast;
    MUINT32 u4ContrastLvUpMiredUp   = rTBL_LV_Up_CT_Up.g_pic_adj_main_1.bits.COLOR_g_contrast;

    UINT32 G_Saturation = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4SaturationLvLoMiredLo, u4SaturationLvLoMiredUp, u4SaturationLvUpMiredLo, u4SaturationLvUpMiredUp);
    UINT32 G_Brightness = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4BrightnessLvLoMiredLo, u4BrightnessLvLoMiredUp, u4BrightnessLvUpMiredLo, u4BrightnessLvUpMiredUp);
    UINT32 G_Contrast   = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, u4ContrastLvLoMiredLo  , u4ContrastLvLoMiredUp  , u4ContrastLvUpMiredLo  , u4ContrastLvUpMiredUp  );

    if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
    {
        Final_bri = G_Brightness;
        Final_con = G_Contrast;
        Final_sat = G_Saturation;
    }
    else
    {
        Final_bri = IIR(Final_bri, G_Brightness, lum_speed);
        Final_con = IIR(Final_con, G_Contrast  , lum_speed);
        Final_sat = IIR(Final_sat, G_Saturation, sat_speed);
    }

    rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_g_brightness = Final_bri;
    rSmoothCOLOR_TBL.g_pic_adj_main_1.bits.COLOR_g_contrast   = Final_con;
    rSmoothCOLOR_TBL.g_pic_adj_main_2.bits.COLOR_g_saturation = Final_sat;

    if (LVMiredDumpGlobal == 1)
    {
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Lower, Mired Lower)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvLoMiredLo, u4ContrastLvLoMiredLo, u4SaturationLvLoMiredLo);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Lower, Mired Upper)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvLoMiredUp, u4ContrastLvLoMiredUp, u4SaturationLvLoMiredUp);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Upper, Mired Lower) B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvUpMiredLo, u4ContrastLvUpMiredLo, u4SaturationLvUpMiredLo);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (LV Upper, Mired Upper) B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, u4BrightnessLvUpMiredUp, u4ContrastLvUpMiredUp, u4SaturationLvUpMiredUp);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (Target)  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, G_Brightness, G_Contrast, G_Saturation);
        COLOR_LOG_IF(LVMiredDumpGlobal, "[%s()] (Final )  B:%03d,C:%d,S:%03d\n",
                    __FUNCTION__, Final_bri, Final_con, Final_sat);
    }
}


MVOID InterParamPartialY(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.lum", cLogLevel, "0");
    MINT32 LVMiredDumpPartialY = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 y_slope_LvLoMiredLo[16] = {0};
    MUINT32 y_slope_LvLoMiredUp[16] = {0};
    MUINT32 y_slope_LvUpMiredLo[16] = {0};
    MUINT32 y_slope_LvUpMiredUp[16] = {0};
    MUINT32 y_slope[16] = {0};
    MUINT32 Final_y_slope[16] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4LumStep;

    Final_y_slope[0]  = rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_y_slope_0;
    Final_y_slope[1]  = rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_y_slope_1;
    Final_y_slope[2]  = rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_y_slope_2;
    Final_y_slope[3]  = rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_y_slope_3;
    Final_y_slope[4]  = rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_y_slope_4;
    Final_y_slope[5]  = rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_y_slope_5;
    Final_y_slope[6]  = rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_y_slope_6;
    Final_y_slope[7]  = rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_y_slope_7;
    Final_y_slope[8]  = rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_y_slope_8;
    Final_y_slope[9]  = rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_y_slope_9;
    Final_y_slope[10] = rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_y_slope_10;
    Final_y_slope[11] = rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_y_slope_11;
    Final_y_slope[12] = rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_y_slope_12;
    Final_y_slope[13] = rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_y_slope_13;
    Final_y_slope[14] = rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_y_slope_14;
    Final_y_slope[15] = rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_y_slope_15;

    y_slope_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.y_slope_1_0_main.bits.COLOR_y_slope_0;
    y_slope_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.y_slope_1_0_main.bits.COLOR_y_slope_1;
    y_slope_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.y_slope_3_2_main.bits.COLOR_y_slope_2;
    y_slope_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.y_slope_3_2_main.bits.COLOR_y_slope_3;
    y_slope_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.y_slope_5_4_main.bits.COLOR_y_slope_4;
    y_slope_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.y_slope_5_4_main.bits.COLOR_y_slope_5;
    y_slope_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.y_slope_7_6_main.bits.COLOR_y_slope_6;
    y_slope_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.y_slope_7_6_main.bits.COLOR_y_slope_7;
    y_slope_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.y_slope_9_8_main.bits.COLOR_y_slope_8;
    y_slope_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.y_slope_9_8_main.bits.COLOR_y_slope_9;
    y_slope_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.y_slope_11_10_main.bits.COLOR_y_slope_10;
    y_slope_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.y_slope_11_10_main.bits.COLOR_y_slope_11;
    y_slope_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.y_slope_13_12_main.bits.COLOR_y_slope_12;
    y_slope_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.y_slope_13_12_main.bits.COLOR_y_slope_13;
    y_slope_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.y_slope_15_14_main.bits.COLOR_y_slope_14;
    y_slope_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.y_slope_15_14_main.bits.COLOR_y_slope_15;

    y_slope_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.y_slope_1_0_main.bits.COLOR_y_slope_0;
    y_slope_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.y_slope_1_0_main.bits.COLOR_y_slope_1;
    y_slope_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.y_slope_3_2_main.bits.COLOR_y_slope_2;
    y_slope_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.y_slope_3_2_main.bits.COLOR_y_slope_3;
    y_slope_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.y_slope_5_4_main.bits.COLOR_y_slope_4;
    y_slope_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.y_slope_5_4_main.bits.COLOR_y_slope_5;
    y_slope_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.y_slope_7_6_main.bits.COLOR_y_slope_6;
    y_slope_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.y_slope_7_6_main.bits.COLOR_y_slope_7;
    y_slope_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.y_slope_9_8_main.bits.COLOR_y_slope_8;
    y_slope_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.y_slope_9_8_main.bits.COLOR_y_slope_9;
    y_slope_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.y_slope_11_10_main.bits.COLOR_y_slope_10;
    y_slope_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.y_slope_11_10_main.bits.COLOR_y_slope_11;
    y_slope_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.y_slope_13_12_main.bits.COLOR_y_slope_12;
    y_slope_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.y_slope_13_12_main.bits.COLOR_y_slope_13;
    y_slope_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.y_slope_15_14_main.bits.COLOR_y_slope_14;
    y_slope_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.y_slope_15_14_main.bits.COLOR_y_slope_15;

    y_slope_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.y_slope_1_0_main.bits.COLOR_y_slope_0;
    y_slope_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.y_slope_1_0_main.bits.COLOR_y_slope_1;
    y_slope_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.y_slope_3_2_main.bits.COLOR_y_slope_2;
    y_slope_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.y_slope_3_2_main.bits.COLOR_y_slope_3;
    y_slope_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.y_slope_5_4_main.bits.COLOR_y_slope_4;
    y_slope_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.y_slope_5_4_main.bits.COLOR_y_slope_5;
    y_slope_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.y_slope_7_6_main.bits.COLOR_y_slope_6;
    y_slope_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.y_slope_7_6_main.bits.COLOR_y_slope_7;
    y_slope_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.y_slope_9_8_main.bits.COLOR_y_slope_8;
    y_slope_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.y_slope_9_8_main.bits.COLOR_y_slope_9;
    y_slope_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.y_slope_11_10_main.bits.COLOR_y_slope_10;
    y_slope_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.y_slope_11_10_main.bits.COLOR_y_slope_11;
    y_slope_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.y_slope_13_12_main.bits.COLOR_y_slope_12;
    y_slope_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.y_slope_13_12_main.bits.COLOR_y_slope_13;
    y_slope_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.y_slope_15_14_main.bits.COLOR_y_slope_14;
    y_slope_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.y_slope_15_14_main.bits.COLOR_y_slope_15;

    y_slope_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.y_slope_1_0_main.bits.COLOR_y_slope_0;
    y_slope_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.y_slope_1_0_main.bits.COLOR_y_slope_1;
    y_slope_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.y_slope_3_2_main.bits.COLOR_y_slope_2;
    y_slope_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.y_slope_3_2_main.bits.COLOR_y_slope_3;
    y_slope_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.y_slope_5_4_main.bits.COLOR_y_slope_4;
    y_slope_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.y_slope_5_4_main.bits.COLOR_y_slope_5;
    y_slope_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.y_slope_7_6_main.bits.COLOR_y_slope_6;
    y_slope_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.y_slope_7_6_main.bits.COLOR_y_slope_7;
    y_slope_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.y_slope_9_8_main.bits.COLOR_y_slope_8;
    y_slope_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.y_slope_9_8_main.bits.COLOR_y_slope_9;
    y_slope_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.y_slope_11_10_main.bits.COLOR_y_slope_10;
    y_slope_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.y_slope_11_10_main.bits.COLOR_y_slope_11;
    y_slope_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.y_slope_13_12_main.bits.COLOR_y_slope_12;
    y_slope_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.y_slope_13_12_main.bits.COLOR_y_slope_13;
    y_slope_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.y_slope_15_14_main.bits.COLOR_y_slope_14;
    y_slope_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.y_slope_15_14_main.bits.COLOR_y_slope_15;

    for (i = 0; i < (sizeof(y_slope)/sizeof(MUINT32)); i++)
    {
        y_slope[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, y_slope_LvLoMiredLo[i], y_slope_LvLoMiredUp[i], y_slope_LvUpMiredLo[i], y_slope_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
            Final_y_slope[i] = y_slope[i];
        else
            Final_y_slope[i] = IIR(Final_y_slope[i], y_slope[i], u4Step);
    }

    rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_y_slope_0    = Final_y_slope[0];
    rSmoothCOLOR_TBL.y_slope_1_0_main.bits.COLOR_y_slope_1    = Final_y_slope[1];
    rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_y_slope_2    = Final_y_slope[2];
    rSmoothCOLOR_TBL.y_slope_3_2_main.bits.COLOR_y_slope_3    = Final_y_slope[3];
    rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_y_slope_4    = Final_y_slope[4];
    rSmoothCOLOR_TBL.y_slope_5_4_main.bits.COLOR_y_slope_5    = Final_y_slope[5];
    rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_y_slope_6    = Final_y_slope[6];
    rSmoothCOLOR_TBL.y_slope_7_6_main.bits.COLOR_y_slope_7    = Final_y_slope[7];
    rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_y_slope_8    = Final_y_slope[8];
    rSmoothCOLOR_TBL.y_slope_9_8_main.bits.COLOR_y_slope_9    = Final_y_slope[9];
    rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_y_slope_10 = Final_y_slope[10];
    rSmoothCOLOR_TBL.y_slope_11_10_main.bits.COLOR_y_slope_11 = Final_y_slope[11];
    rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_y_slope_12 = Final_y_slope[12];
    rSmoothCOLOR_TBL.y_slope_13_12_main.bits.COLOR_y_slope_13 = Final_y_slope[13];
    rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_y_slope_14 = Final_y_slope[14];
    rSmoothCOLOR_TBL.y_slope_15_14_main.bits.COLOR_y_slope_15 = Final_y_slope[15];

    if (LVMiredDumpPartialY == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvLoMiredLo[0] , y_slope_LvLoMiredLo[1] , y_slope_LvLoMiredLo[2] , y_slope_LvLoMiredLo[3] ,
                    y_slope_LvLoMiredLo[4] , y_slope_LvLoMiredLo[5] , y_slope_LvLoMiredLo[6] , y_slope_LvLoMiredLo[7] ,
                    y_slope_LvLoMiredLo[8] , y_slope_LvLoMiredLo[9] , y_slope_LvLoMiredLo[10], y_slope_LvLoMiredLo[11],
                    y_slope_LvLoMiredLo[12], y_slope_LvLoMiredLo[13], y_slope_LvLoMiredLo[14], y_slope_LvLoMiredLo[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Lower, Mired Upper: %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvLoMiredUp[0] , y_slope_LvLoMiredUp[1] , y_slope_LvLoMiredUp[2] , y_slope_LvLoMiredUp[3] ,
                    y_slope_LvLoMiredUp[4] , y_slope_LvLoMiredUp[5] , y_slope_LvLoMiredUp[6] , y_slope_LvLoMiredUp[7] ,
                    y_slope_LvLoMiredUp[8] , y_slope_LvLoMiredUp[9] , y_slope_LvLoMiredUp[10], y_slope_LvLoMiredUp[11],
                    y_slope_LvLoMiredUp[12], y_slope_LvLoMiredUp[13], y_slope_LvLoMiredUp[14], y_slope_LvLoMiredUp[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvUpMiredLo[0] , y_slope_LvUpMiredLo[1] , y_slope_LvUpMiredLo[2] , y_slope_LvUpMiredLo[3] ,
                    y_slope_LvUpMiredLo[4] , y_slope_LvUpMiredLo[5] , y_slope_LvUpMiredLo[6] , y_slope_LvUpMiredLo[7] ,
                    y_slope_LvUpMiredLo[8] , y_slope_LvUpMiredLo[9] , y_slope_LvUpMiredLo[10], y_slope_LvUpMiredLo[11],
                    y_slope_LvUpMiredLo[12], y_slope_LvUpMiredLo[13], y_slope_LvUpMiredLo[14], y_slope_LvUpMiredLo[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY LV Upper, Mired Upper: %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope_LvUpMiredUp[0] , y_slope_LvUpMiredUp[1] , y_slope_LvUpMiredUp[2] , y_slope_LvUpMiredUp[3] ,
                    y_slope_LvUpMiredUp[4] , y_slope_LvUpMiredUp[5] , y_slope_LvUpMiredUp[6] , y_slope_LvUpMiredUp[7] ,
                    y_slope_LvUpMiredUp[8] , y_slope_LvUpMiredUp[9] , y_slope_LvUpMiredUp[10], y_slope_LvUpMiredUp[11],
                    y_slope_LvUpMiredUp[12], y_slope_LvUpMiredUp[13], y_slope_LvUpMiredUp[14], y_slope_LvUpMiredUp[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    y_slope[0] , y_slope[1] , y_slope[2] , y_slope[3] ,
                    y_slope[4] , y_slope[5] , y_slope[6] , y_slope[7] ,
                    y_slope[8] , y_slope[9] , y_slope[10], y_slope[11],
                    y_slope[12], y_slope[13], y_slope[14], y_slope[15]);
        COLOR_LOG_IF(LVMiredDumpPartialY, "[%s()] PartialY Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,
                    Final_y_slope[0] , Final_y_slope[1] , Final_y_slope[2] , Final_y_slope[3] ,
                    Final_y_slope[4] , Final_y_slope[5] , Final_y_slope[6] , Final_y_slope[7] ,
                    Final_y_slope[8] , Final_y_slope[9] , Final_y_slope[10], Final_y_slope[11],
                    Final_y_slope[12], Final_y_slope[13], Final_y_slope[14], Final_y_slope[15]);
    }
}

MVOID InterParamPartialH(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.hue", cLogLevel, "0");
    MINT32 LVMiredDumpPartialH = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 hue2hue_LvLoMiredLo[20] = {0};
    MUINT32 hue2hue_LvLoMiredUp[20] = {0};
    MUINT32 hue2hue_LvUpMiredLo[20] = {0};
    MUINT32 hue2hue_LvUpMiredUp[20] = {0};
    MUINT32 hue2hue[20] = {0};
    MUINT32 Final_hue2hue[20] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4HueStep;

    Final_hue2hue[0]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_0;
    Final_hue2hue[1]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_1;
    Final_hue2hue[2]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_2;
    Final_hue2hue[3]  = rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_3;
    Final_hue2hue[4]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_4;
    Final_hue2hue[5]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_5;
    Final_hue2hue[6]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_6;
    Final_hue2hue[7]  = rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_7;
    Final_hue2hue[8]  = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_8;
    Final_hue2hue[9]  = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_9;
    Final_hue2hue[10] = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_10;
    Final_hue2hue[11] = rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_11;
    Final_hue2hue[12] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_12;
    Final_hue2hue[13] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_13;
    Final_hue2hue[14] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_14;
    Final_hue2hue[15] = rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_15;
    Final_hue2hue[16] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_16;
    Final_hue2hue[17] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_17;
    Final_hue2hue[18] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_18;
    Final_hue2hue[19] = rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_19;

    hue2hue_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_0;
    hue2hue_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_1;
    hue2hue_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_2;
    hue2hue_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_3;
    hue2hue_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_4;
    hue2hue_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_5;
    hue2hue_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_6;
    hue2hue_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_7;
    hue2hue_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_8;
    hue2hue_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_9;
    hue2hue_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_10;
    hue2hue_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_11;
    hue2hue_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_12;
    hue2hue_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_13;
    hue2hue_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_14;
    hue2hue_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_15;
    hue2hue_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_16;
    hue2hue_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_17;
    hue2hue_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_18;
    hue2hue_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_19;

    hue2hue_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_0;
    hue2hue_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_1;
    hue2hue_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_2;
    hue2hue_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_3;
    hue2hue_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_4;
    hue2hue_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_5;
    hue2hue_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_6;
    hue2hue_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_7;
    hue2hue_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_8;
    hue2hue_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_9;
    hue2hue_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_10;
    hue2hue_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_11;
    hue2hue_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_12;
    hue2hue_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_13;
    hue2hue_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_14;
    hue2hue_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_15;
    hue2hue_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_16;
    hue2hue_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_17;
    hue2hue_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_18;
    hue2hue_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_19;

    hue2hue_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_0;
    hue2hue_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_1;
    hue2hue_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_2;
    hue2hue_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.local_hue_cd_0.bits.COLOR_hue_to_hue_3;
    hue2hue_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_4;
    hue2hue_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_5;
    hue2hue_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_6;
    hue2hue_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.local_hue_cd_1.bits.COLOR_hue_to_hue_7;
    hue2hue_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_8;
    hue2hue_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_9;
    hue2hue_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_10;
    hue2hue_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.local_hue_cd_2.bits.COLOR_hue_to_hue_11;
    hue2hue_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_12;
    hue2hue_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_13;
    hue2hue_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_14;
    hue2hue_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.local_hue_cd_3.bits.COLOR_hue_to_hue_15;
    hue2hue_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_16;
    hue2hue_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_17;
    hue2hue_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_18;
    hue2hue_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.local_hue_cd_4.bits.COLOR_hue_to_hue_19;

    hue2hue_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_0;
    hue2hue_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_1;
    hue2hue_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_2;
    hue2hue_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.local_hue_cd_0.bits.COLOR_hue_to_hue_3;
    hue2hue_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_4;
    hue2hue_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_5;
    hue2hue_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_6;
    hue2hue_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.local_hue_cd_1.bits.COLOR_hue_to_hue_7;
    hue2hue_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_8;
    hue2hue_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_9;
    hue2hue_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_10;
    hue2hue_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.local_hue_cd_2.bits.COLOR_hue_to_hue_11;
    hue2hue_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_12;
    hue2hue_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_13;
    hue2hue_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_14;
    hue2hue_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.local_hue_cd_3.bits.COLOR_hue_to_hue_15;
    hue2hue_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_16;
    hue2hue_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_17;
    hue2hue_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_18;
    hue2hue_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.local_hue_cd_4.bits.COLOR_hue_to_hue_19;

    for (i = 0; i < (sizeof(hue2hue)/sizeof(MUINT32)); i++)
    {
        hue2hue[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, hue2hue_LvLoMiredLo[i], hue2hue_LvLoMiredUp[i], hue2hue_LvUpMiredLo[i], hue2hue_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_hue2hue[i] = hue2hue[i];
        else
            Final_hue2hue[i] = IIR(Final_hue2hue[i], hue2hue[i], u4Step);
    }

    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_0  = Final_hue2hue[0];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_1  = Final_hue2hue[1];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_2  = Final_hue2hue[2];
    rSmoothCOLOR_TBL.local_hue_cd_0.bits.COLOR_hue_to_hue_3  = Final_hue2hue[3];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_4  = Final_hue2hue[4];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_5  = Final_hue2hue[5];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_6  = Final_hue2hue[6];
    rSmoothCOLOR_TBL.local_hue_cd_1.bits.COLOR_hue_to_hue_7  = Final_hue2hue[7];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_8  = Final_hue2hue[8];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_9  = Final_hue2hue[9];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_10 = Final_hue2hue[10];
    rSmoothCOLOR_TBL.local_hue_cd_2.bits.COLOR_hue_to_hue_11 = Final_hue2hue[11];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_12 = Final_hue2hue[12];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_13 = Final_hue2hue[13];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_14 = Final_hue2hue[14];
    rSmoothCOLOR_TBL.local_hue_cd_3.bits.COLOR_hue_to_hue_15 = Final_hue2hue[15];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_16 = Final_hue2hue[16];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_17 = Final_hue2hue[17];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_18 = Final_hue2hue[18];
    rSmoothCOLOR_TBL.local_hue_cd_4.bits.COLOR_hue_to_hue_19 = Final_hue2hue[19];

    if (LVMiredDumpPartialH == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvLoMiredLo[0] , hue2hue_LvLoMiredLo[1] , hue2hue_LvLoMiredLo[2] , hue2hue_LvLoMiredLo[3] ,
                hue2hue_LvLoMiredLo[4] , hue2hue_LvLoMiredLo[5] , hue2hue_LvLoMiredLo[6] , hue2hue_LvLoMiredLo[7] ,
                hue2hue_LvLoMiredLo[8] , hue2hue_LvLoMiredLo[9] , hue2hue_LvLoMiredLo[10], hue2hue_LvLoMiredLo[11],
                hue2hue_LvLoMiredLo[12], hue2hue_LvLoMiredLo[13], hue2hue_LvLoMiredLo[14], hue2hue_LvLoMiredLo[15],
                hue2hue_LvLoMiredLo[16], hue2hue_LvLoMiredLo[17], hue2hue_LvLoMiredLo[18], hue2hue_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvLoMiredUp[0] , hue2hue_LvLoMiredUp[1] , hue2hue_LvLoMiredUp[2] , hue2hue_LvLoMiredUp[3] ,
                hue2hue_LvLoMiredUp[4] , hue2hue_LvLoMiredUp[5] , hue2hue_LvLoMiredUp[6] , hue2hue_LvLoMiredUp[7] ,
                hue2hue_LvLoMiredUp[8] , hue2hue_LvLoMiredUp[9] , hue2hue_LvLoMiredUp[10], hue2hue_LvLoMiredUp[11],
                hue2hue_LvLoMiredUp[12], hue2hue_LvLoMiredUp[13], hue2hue_LvLoMiredUp[14], hue2hue_LvLoMiredUp[15],
                hue2hue_LvLoMiredUp[16], hue2hue_LvLoMiredUp[17], hue2hue_LvLoMiredUp[18], hue2hue_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvUpMiredLo[0] , hue2hue_LvUpMiredLo[1] , hue2hue_LvUpMiredLo[2] , hue2hue_LvUpMiredLo[3] ,
                hue2hue_LvUpMiredLo[4] , hue2hue_LvUpMiredLo[5] , hue2hue_LvUpMiredLo[6] , hue2hue_LvUpMiredLo[7] ,
                hue2hue_LvUpMiredLo[8] , hue2hue_LvUpMiredLo[9] , hue2hue_LvUpMiredLo[10], hue2hue_LvUpMiredLo[11],
                hue2hue_LvUpMiredLo[12], hue2hue_LvUpMiredLo[13], hue2hue_LvUpMiredLo[14], hue2hue_LvUpMiredLo[15],
                hue2hue_LvUpMiredLo[16], hue2hue_LvUpMiredLo[17], hue2hue_LvUpMiredLo[18], hue2hue_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue_LvUpMiredUp[0] , hue2hue_LvUpMiredUp[1] , hue2hue_LvUpMiredUp[2] , hue2hue_LvUpMiredUp[3] ,
                hue2hue_LvUpMiredUp[4] , hue2hue_LvUpMiredUp[5] , hue2hue_LvUpMiredUp[6] , hue2hue_LvUpMiredUp[7] ,
                hue2hue_LvUpMiredUp[8] , hue2hue_LvUpMiredUp[9] , hue2hue_LvUpMiredUp[10], hue2hue_LvUpMiredUp[11],
                hue2hue_LvUpMiredUp[12], hue2hue_LvUpMiredUp[13], hue2hue_LvUpMiredUp[14], hue2hue_LvUpMiredUp[15],
                hue2hue_LvUpMiredUp[16], hue2hue_LvUpMiredUp[17], hue2hue_LvUpMiredUp[18], hue2hue_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                hue2hue[0] , hue2hue[1] , hue2hue[2] , hue2hue[3] ,
                hue2hue[4] , hue2hue[5] , hue2hue[6] , hue2hue[7] ,
                hue2hue[8] , hue2hue[9] , hue2hue[10], hue2hue[11],
                hue2hue[12], hue2hue[13], hue2hue[14], hue2hue[15],
                hue2hue[16], hue2hue[17], hue2hue[18], hue2hue[19]);
        COLOR_LOG_IF(LVMiredDumpPartialH, "[%s()] PartialH Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_hue2hue[0] , Final_hue2hue[1] , Final_hue2hue[2] , Final_hue2hue[3] ,
                Final_hue2hue[4] , Final_hue2hue[5] , Final_hue2hue[6] , Final_hue2hue[7] ,
                Final_hue2hue[8] , Final_hue2hue[9] , Final_hue2hue[10], Final_hue2hue[11],
                Final_hue2hue[12], Final_hue2hue[13], Final_hue2hue[14], Final_hue2hue[15],
                Final_hue2hue[16], Final_hue2hue[17], Final_hue2hue[18], Final_hue2hue[19]);
    }
}

MVOID InterParamPartialS( ISP_SMOOTH_COLOR_PARAM_T& rParam,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                          ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                          ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                          MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.sat", cLogLevel, "0");
    MINT32 LVMiredDumpPartialS = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;

    // Partial Saturation, point 1
    MUINT32 point1_LvLoMiredLo[20] = {0};
    MUINT32 point1_LvLoMiredUp[20] = {0};
    MUINT32 point1_LvUpMiredLo[20] = {0};
    MUINT32 point1_LvUpMiredUp[20] = {0};
    MUINT32 point1[20] = {0};
    MUINT32 Final_point1[20] = {0};

    // Partial Saturation, point 2
    MUINT32 point2_LvLoMiredLo[20] = {0};
    MUINT32 point2_LvLoMiredUp[20] = {0};
    MUINT32 point2_LvUpMiredLo[20] = {0};
    MUINT32 point2_LvUpMiredUp[20] = {0};
    MUINT32 point2[20] = {0};
    MUINT32 Final_point2[20] = {0};

    // Partial Saturation, point 3 is the MaxS of each Hue : 0 -> (gain1) -> point1 -> (gain2) -> point2 -> (gain3) -> point3
    MUINT32 point3[20] = {120, 114, 126, 121, 120, 126, 128, 118, 113, 112, 117, 126, 120, 114, 126, 121, 120, 128, 113, 117};

    // Partial Saturation, gain 1 : output1 = point1*gain1/128
    MUINT32 gain1_LvLoMiredLo[20] = {0};
    MUINT32 gain1_LvLoMiredUp[20] = {0};
    MUINT32 gain1_LvUpMiredLo[20] = {0};
    MUINT32 gain1_LvUpMiredUp[20] = {0};
    MUINT32 gain1[20] = {0};
    MUINT32 Final_gain1[20] ={0};

    // Partial Saturation, gain 2 : output2 = output1 + (point2 - point1)*gain2/128
    MUINT32 gain2_LvLoMiredLo[20] = {0};
    MUINT32 gain2_LvLoMiredUp[20] = {0};
    MUINT32 gain2_LvUpMiredLo[20] = {0};
    MUINT32 gain2_LvUpMiredUp[20] = {0};
    MUINT32 gain2[20] = {0};
    MUINT32 Final_gain2[20] ={0};

    // Partial Saturation, gain 3 : output3 = output2 + (point3 - point2)*gain3/128 = point3 (to avoid over-saturation)
    MUINT32 gain3_LvLoMiredLo[20] = {0};
    MUINT32 gain3_LvLoMiredUp[20] = {0};
    MUINT32 gain3_LvUpMiredLo[20] = {0};
    MUINT32 gain3_LvUpMiredUp[20] = {0};
    MUINT32 gain3[20] = {0};
    MUINT32 Final_gain3[20] ={0};

    // output1 = point1*gain1/128
    MUINT32 output1_LvLoMiredLo[20] = {0};
    MUINT32 output1_LvLoMiredUp[20] = {0};
    MUINT32 output1_LvUpMiredLo[20] = {0};
    MUINT32 output1_LvUpMiredUp[20] = {0};
    MUINT32 output1[20] = {0};

    // output2 = output1 + (point2 - point1)*gain2/128
    MUINT32 output2_LvLoMiredLo[20] = {0};
    MUINT32 output2_LvLoMiredUp[20] = {0};
    MUINT32 output2_LvUpMiredLo[20] = {0};
    MUINT32 output2_LvUpMiredUp[20] = {0};
    MUINT32 output2[20] = {0};

    // output3 = output2 + (point3 - point2)*gain3/128 = point3 (to avoid over-saturation)
    MUINT32 output3[20] = {0};


    Final_point1[0] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0;
    Final_point1[1] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1;
    Final_point1[2] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2;
    Final_point1[3] = rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3;
    Final_point1[4] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4;
    Final_point1[5] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5;
    Final_point1[6] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6;
    Final_point1[7] = rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7;
    Final_point1[8] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8;
    Final_point1[9] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9;
    Final_point1[10] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10;
    Final_point1[11] = rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11;
    Final_point1[12] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12;
    Final_point1[13] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13;
    Final_point1[14] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14;
    Final_point1[15] = rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15;
    Final_point1[16] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16;
    Final_point1[17] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17;
    Final_point1[18] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18;
    Final_point1[19] = rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19;

    point1_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0;
    point1_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1;
    point1_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2;
    point1_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3;
    point1_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4;
    point1_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5;
    point1_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6;
    point1_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7;
    point1_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8;
    point1_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9;
    point1_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10;
    point1_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11;
    point1_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12;
    point1_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13;
    point1_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14;
    point1_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15;
    point1_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16;
    point1_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17;
    point1_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18;
    point1_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19;

    point1_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0;
    point1_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1;
    point1_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2;
    point1_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3;
    point1_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4;
    point1_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5;
    point1_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6;
    point1_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7;
    point1_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8;
    point1_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9;
    point1_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10;
    point1_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11;
    point1_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12;
    point1_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13;
    point1_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14;
    point1_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15;
    point1_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16;
    point1_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17;
    point1_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18;
    point1_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19;

    point1_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0;
    point1_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1;
    point1_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2;
    point1_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3;
    point1_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4;
    point1_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5;
    point1_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6;
    point1_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7;
    point1_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8;
    point1_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9;
    point1_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10;
    point1_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11;
    point1_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12;
    point1_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13;
    point1_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14;
    point1_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15;
    point1_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16;
    point1_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17;
    point1_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18;
    point1_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19;

    point1_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0;
    point1_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1;
    point1_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2;
    point1_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3;
    point1_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4;
    point1_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5;
    point1_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6;
    point1_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7;
    point1_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8;
    point1_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9;
    point1_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10;
    point1_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11;
    point1_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12;
    point1_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13;
    point1_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14;
    point1_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15;
    point1_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16;
    point1_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17;
    point1_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18;
    point1_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19;


    Final_point2[0] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0;
    Final_point2[1] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1;
    Final_point2[2] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2;
    Final_point2[3] = rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3;
    Final_point2[4] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4;
    Final_point2[5] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5;
    Final_point2[6] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6;
    Final_point2[7] = rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7;
    Final_point2[8] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8;
    Final_point2[9] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9;
    Final_point2[10] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10;
    Final_point2[11] = rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11;
    Final_point2[12] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12;
    Final_point2[13] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13;
    Final_point2[14] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14;
    Final_point2[15] = rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15;
    Final_point2[16] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16;
    Final_point2[17] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17;
    Final_point2[18] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18;
    Final_point2[19] = rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19;

    point2_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0;
    point2_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1;
    point2_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2;
    point2_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3;
    point2_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4;
    point2_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5;
    point2_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6;
    point2_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7;
    point2_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8;
    point2_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9;
    point2_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10;
    point2_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11;
    point2_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12;
    point2_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13;
    point2_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14;
    point2_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15;
    point2_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16;
    point2_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17;
    point2_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18;
    point2_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19;

    point2_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0;
    point2_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1;
    point2_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2;
    point2_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3;
    point2_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4;
    point2_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5;
    point2_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6;
    point2_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7;
    point2_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8;
    point2_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9;
    point2_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10;
    point2_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11;
    point2_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12;
    point2_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13;
    point2_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14;
    point2_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15;
    point2_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16;
    point2_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17;
    point2_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18;
    point2_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19;

    point2_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0;
    point2_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1;
    point2_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2;
    point2_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3;
    point2_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4;
    point2_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5;
    point2_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6;
    point2_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7;
    point2_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8;
    point2_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9;
    point2_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10;
    point2_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11;
    point2_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12;
    point2_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13;
    point2_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14;
    point2_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15;
    point2_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16;
    point2_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17;
    point2_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18;
    point2_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19;

    point2_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0;
    point2_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1;
    point2_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2;
    point2_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3;
    point2_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4;
    point2_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5;
    point2_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6;
    point2_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7;
    point2_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8;
    point2_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9;
    point2_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10;
    point2_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11;
    point2_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12;
    point2_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13;
    point2_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14;
    point2_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15;
    point2_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16;
    point2_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17;
    point2_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18;
    point2_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19;


    Final_gain1[0]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0;
    Final_gain1[1]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1;
    Final_gain1[2]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2;
    Final_gain1[3]  = rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3;
    Final_gain1[4]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4;
    Final_gain1[5]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5;
    Final_gain1[6]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6;
    Final_gain1[7]  = rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7;
    Final_gain1[8]  = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8;
    Final_gain1[9]  = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9;
    Final_gain1[10] = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10;
    Final_gain1[11] = rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11;
    Final_gain1[12] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12;
    Final_gain1[13] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13;
    Final_gain1[14] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14;
    Final_gain1[15] = rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15;
    Final_gain1[16] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16;
    Final_gain1[17] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17;
    Final_gain1[18] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18;
    Final_gain1[19] = rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19;

    gain1_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0;
    gain1_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1;
    gain1_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2;
    gain1_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3;
    gain1_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4;
    gain1_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5;
    gain1_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6;
    gain1_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7;
    gain1_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8;
    gain1_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9;
    gain1_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10;
    gain1_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11;
    gain1_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12;
    gain1_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13;
    gain1_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14;
    gain1_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15;
    gain1_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16;
    gain1_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17;
    gain1_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18;
    gain1_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19;

    gain1_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0;
    gain1_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1;
    gain1_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2;
    gain1_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3;
    gain1_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4;
    gain1_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5;
    gain1_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6;
    gain1_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7;
    gain1_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8;
    gain1_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9;
    gain1_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10;
    gain1_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11;
    gain1_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12;
    gain1_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13;
    gain1_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14;
    gain1_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15;
    gain1_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16;
    gain1_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17;
    gain1_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18;
    gain1_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19;

    gain1_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0;
    gain1_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1;
    gain1_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2;
    gain1_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3;
    gain1_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4;
    gain1_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5;
    gain1_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6;
    gain1_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7;
    gain1_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8;
    gain1_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9;
    gain1_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10;
    gain1_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11;
    gain1_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12;
    gain1_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13;
    gain1_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14;
    gain1_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15;
    gain1_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16;
    gain1_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17;
    gain1_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18;
    gain1_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19;

    gain1_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0;
    gain1_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1;
    gain1_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2;
    gain1_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3;
    gain1_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4;
    gain1_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5;
    gain1_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6;
    gain1_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7;
    gain1_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8;
    gain1_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9;
    gain1_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10;
    gain1_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11;
    gain1_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12;
    gain1_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13;
    gain1_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14;
    gain1_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15;
    gain1_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16;
    gain1_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17;
    gain1_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18;
    gain1_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19;

    Final_gain2[0] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0;
    Final_gain2[1] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1;
    Final_gain2[2] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2;
    Final_gain2[3] = rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3;
    Final_gain2[4] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4;
    Final_gain2[5] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5;
    Final_gain2[6] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6;
    Final_gain2[7] = rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7;
    Final_gain2[8] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8;
    Final_gain2[9] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9;
    Final_gain2[10] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10;
    Final_gain2[11] = rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11;
    Final_gain2[12] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12;
    Final_gain2[13] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13;
    Final_gain2[14] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14;
    Final_gain2[15] = rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15;
    Final_gain2[16] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16;
    Final_gain2[17] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17;
    Final_gain2[18] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18;
    Final_gain2[19] = rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19;

    gain2_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0;
    gain2_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1;
    gain2_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2;
    gain2_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3;
    gain2_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4;
    gain2_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5;
    gain2_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6;
    gain2_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7;
    gain2_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8;
    gain2_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9;
    gain2_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10;
    gain2_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11;
    gain2_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12;
    gain2_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13;
    gain2_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14;
    gain2_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15;
    gain2_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16;
    gain2_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17;
    gain2_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18;
    gain2_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19;

    gain2_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0;
    gain2_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1;
    gain2_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2;
    gain2_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3;
    gain2_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4;
    gain2_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5;
    gain2_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6;
    gain2_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7;
    gain2_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8;
    gain2_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9;
    gain2_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10;
    gain2_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11;
    gain2_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12;
    gain2_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13;
    gain2_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14;
    gain2_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15;
    gain2_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16;
    gain2_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17;
    gain2_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18;
    gain2_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19;

    gain2_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0;
    gain2_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1;
    gain2_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2;
    gain2_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3;
    gain2_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4;
    gain2_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5;
    gain2_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6;
    gain2_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7;
    gain2_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8;
    gain2_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9;
    gain2_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10;
    gain2_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11;
    gain2_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12;
    gain2_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13;
    gain2_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14;
    gain2_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15;
    gain2_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16;
    gain2_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17;
    gain2_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18;
    gain2_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19;

    gain2_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0;
    gain2_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1;
    gain2_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2;
    gain2_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3;
    gain2_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4;
    gain2_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5;
    gain2_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6;
    gain2_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7;
    gain2_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8;
    gain2_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9;
    gain2_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10;
    gain2_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11;
    gain2_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12;
    gain2_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13;
    gain2_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14;
    gain2_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15;
    gain2_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16;
    gain2_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17;
    gain2_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18;
    gain2_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19;

    Final_gain3[0]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0;
    Final_gain3[1]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1;
    Final_gain3[2]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2;
    Final_gain3[3]  = rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3;
    Final_gain3[4]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4;
    Final_gain3[5]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5;
    Final_gain3[6]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6;
    Final_gain3[7]  = rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7;
    Final_gain3[8]  = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8;
    Final_gain3[9]  = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9;
    Final_gain3[10] = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10;
    Final_gain3[11] = rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11;
    Final_gain3[12] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12;
    Final_gain3[13] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13;
    Final_gain3[14] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14;
    Final_gain3[15] = rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15;
    Final_gain3[16] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16;
    Final_gain3[17] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17;
    Final_gain3[18] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18;
    Final_gain3[19] = rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19;

    gain3_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0;
    gain3_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1;
    gain3_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2;
    gain3_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3;
    gain3_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4;
    gain3_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5;
    gain3_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6;
    gain3_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7;
    gain3_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8;
    gain3_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9;
    gain3_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10;
    gain3_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11;
    gain3_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12;
    gain3_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13;
    gain3_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14;
    gain3_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15;
    gain3_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16;
    gain3_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17;
    gain3_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18;
    gain3_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19;

    gain3_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0;
    gain3_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1;
    gain3_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2;
    gain3_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3;
    gain3_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4;
    gain3_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5;
    gain3_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6;
    gain3_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7;
    gain3_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8;
    gain3_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9;
    gain3_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10;
    gain3_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11;
    gain3_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12;
    gain3_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13;
    gain3_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14;
    gain3_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15;
    gain3_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16;
    gain3_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17;
    gain3_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18;
    gain3_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19;

    gain3_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0;
    gain3_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1;
    gain3_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2;
    gain3_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3;
    gain3_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4;
    gain3_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5;
    gain3_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6;
    gain3_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7;
    gain3_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8;
    gain3_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9;
    gain3_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10;
    gain3_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11;
    gain3_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12;
    gain3_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13;
    gain3_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14;
    gain3_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15;
    gain3_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16;
    gain3_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17;
    gain3_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18;
    gain3_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19;

    gain3_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0;
    gain3_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1;
    gain3_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2;
    gain3_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3;
    gain3_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4;
    gain3_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5;
    gain3_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6;
    gain3_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7;
    gain3_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8;
    gain3_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9;
    gain3_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10;
    gain3_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11;
    gain3_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12;
    gain3_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13;
    gain3_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14;
    gain3_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15;
    gain3_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16;
    gain3_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17;
    gain3_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18;
    gain3_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19;

    for (i = 0; i < 20; i++)
    {
        point1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, point1_LvLoMiredLo[i], point1_LvLoMiredUp[i], point1_LvUpMiredLo[i], point1_LvUpMiredUp[i]);
        point2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, point2_LvLoMiredLo[i], point2_LvLoMiredUp[i], point2_LvUpMiredLo[i], point2_LvUpMiredUp[i]);
        // output1 = point1*gain1/128

        // step1 : get 4 table output1 = point1*gain1/128, then interpolate unique output1
        output1_LvLoMiredLo[i] = (point1_LvLoMiredLo[i]*gain1_LvLoMiredLo[i] + 64) >> 7;
        output1_LvLoMiredUp[i] = (point1_LvLoMiredUp[i]*gain1_LvLoMiredUp[i] + 64) >> 7;
        output1_LvUpMiredLo[i] = (point1_LvUpMiredLo[i]*gain1_LvUpMiredLo[i] + 64) >> 7;
        output1_LvUpMiredUp[i] = (point1_LvUpMiredUp[i]*gain1_LvUpMiredUp[i] + 64) >> 7;
        output1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, output1_LvLoMiredLo[i], output1_LvLoMiredUp[i], output1_LvUpMiredLo[i], output1_LvUpMiredUp[i]);

        // step2 : get 4 table output2 = output1 + (point2-point1)*gain2/128, then interpolate unique output2
        output2_LvLoMiredLo[i] = output1_LvLoMiredLo[i] + (((point2_LvLoMiredLo[i] - point1_LvLoMiredLo[i])*gain2_LvLoMiredLo[i] + 64) >> 7);
        output2_LvLoMiredUp[i] = output1_LvLoMiredUp[i] + (((point2_LvLoMiredUp[i] - point1_LvLoMiredUp[i])*gain2_LvLoMiredUp[i] + 64) >> 7);
        output2_LvUpMiredLo[i] = output1_LvUpMiredLo[i] + (((point2_LvUpMiredLo[i] - point1_LvUpMiredLo[i])*gain2_LvUpMiredLo[i] + 64) >> 7);
        output2_LvUpMiredUp[i] = output1_LvUpMiredUp[i] + (((point2_LvUpMiredUp[i] - point1_LvUpMiredUp[i])*gain2_LvUpMiredUp[i] + 64) >> 7);
        output2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, output2_LvLoMiredLo[i], output2_LvLoMiredUp[i], output2_LvUpMiredLo[i], output2_LvUpMiredUp[i]);

        // step3 : unique output3 = point3 (to avoid over-saturation)
        output3[i] = point3[i];

        // step4 : find gain1 from output1 = point1*gain1/128 => gain1 = output1*128/point1
        if (point1[i] == 0)
        {
            gain1[i] = 128;
        }
        else
        {
            gain1[i] = ((output1[i] << 7) + (point1[i] >> 1))/point1[i]; // (point1[i] >> 1) for rounding
        }

        // step5 : find gain2 from output2 = output1 + (point2-point1)*gain2/128 => gain2 = (output2-output1)*128/(point2-point1)
        if ((point2[i] - point1[i]) == 0)
        {
            gain2[i] = 128;
        }
        else if (output2[i] < output1[i])
        {
            gain2[i] = 0;
        }
        else
        {
            gain2[i] = (((output2[i]-output1[i]) << 7) + ((point2[i] - point1[i]) >> 1))/(point2[i] - point1[i]); // ((point2[i] - point1[i]) >> 1) for rounding
        }

        // step6 : find gain3 from output3 = output2 + (point3-point2)*gain3/128 => gain3 = (output3-output2)*128/(point3-point2)
        if ((point3[i] - point2[i]) == 0)
        {
            gain3[i] = 128;
        }
        else if (output3[i] < output2[i])
        {
            gain3[i] = 0;
        }
        else
        {
            gain3[i] = (((output3[i]-output2[i]) << 7) + ((point3[i] - point2[i]) >> 1))/(point3[i] - point2[i]); // ((point3[i] - point2[i]) >> 1) for rounding
        }

        gain1[i] = ClipInt32(gain1[i], 255, 0);
        gain2[i] = ClipInt32(gain2[i], 255, 0);
        gain3[i] = ClipInt32(gain3[i], 255, 0);

        if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
        {
            Final_point1[i] = point1[i];
            Final_point2[i] = point2[i];
            Final_gain1[i] = gain1[i];
            Final_gain2[i] = gain2[i];
            Final_gain3[i] = gain3[i];
        }
        else
        {
            Final_point1[i] = IIR(Final_point1[i], point1[i], u4Step);
            Final_point2[i] = IIR(Final_point2[i], point2[i], u4Step);
            Final_gain1[i] = IIR(Final_gain1[i], gain1[i], u4Step);
            Final_gain2[i] = IIR(Final_gain2[i], gain2[i], u4Step);
            Final_gain3[i] = IIR(Final_gain3[i], gain3[i], u4Step);
        }
    }

    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0  = Final_point1[0];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1  = Final_point1[1];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2  = Final_point1[2];
    rSmoothCOLOR_TBL.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3  = Final_point1[3];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4  = Final_point1[4];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5  = Final_point1[5];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6  = Final_point1[6];
    rSmoothCOLOR_TBL.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7  = Final_point1[7];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8  = Final_point1[8];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9  = Final_point1[9];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10 = Final_point1[10];
    rSmoothCOLOR_TBL.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11 = Final_point1[11];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12 = Final_point1[12];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13 = Final_point1[13];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14 = Final_point1[14];
    rSmoothCOLOR_TBL.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15 = Final_point1[15];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16 = Final_point1[16];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17 = Final_point1[17];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18 = Final_point1[18];
    rSmoothCOLOR_TBL.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19 = Final_point1[19];


    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0  = Final_point2[0];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1  = Final_point2[1];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2  = Final_point2[2];
    rSmoothCOLOR_TBL.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3  = Final_point2[3];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4  = Final_point2[4];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5  = Final_point2[5];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6  = Final_point2[6];
    rSmoothCOLOR_TBL.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7  = Final_point2[7];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8  = Final_point2[8];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9  = Final_point2[9];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10 = Final_point2[10];
    rSmoothCOLOR_TBL.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11 = Final_point2[11];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12 = Final_point2[12];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13 = Final_point2[13];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14 = Final_point2[14];
    rSmoothCOLOR_TBL.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15 = Final_point2[15];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16 = Final_point2[16];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17 = Final_point2[17];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18 = Final_point2[18];
    rSmoothCOLOR_TBL.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19 = Final_point2[19];

    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0  = Final_gain1[0];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1  = Final_gain1[1];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2  = Final_gain1[2];
    rSmoothCOLOR_TBL.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3  = Final_gain1[3];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4  = Final_gain1[4];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5  = Final_gain1[5];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6  = Final_gain1[6];
    rSmoothCOLOR_TBL.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7  = Final_gain1[7];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8  = Final_gain1[8];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9  = Final_gain1[9];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10 = Final_gain1[10];
    rSmoothCOLOR_TBL.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11 = Final_gain1[11];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12 = Final_gain1[12];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13 = Final_gain1[13];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14 = Final_gain1[14];
    rSmoothCOLOR_TBL.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15 = Final_gain1[15];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16 = Final_gain1[16];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17 = Final_gain1[17];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18 = Final_gain1[18];
    rSmoothCOLOR_TBL.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19 = Final_gain1[19];


    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0  = Final_gain2[0];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1  = Final_gain2[1];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2  = Final_gain2[2];
    rSmoothCOLOR_TBL.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3  = Final_gain2[3];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4  = Final_gain2[4];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5  = Final_gain2[5];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6  = Final_gain2[6];
    rSmoothCOLOR_TBL.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7  = Final_gain2[7];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8  = Final_gain2[8];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9  = Final_gain2[9];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10 = Final_gain2[10];
    rSmoothCOLOR_TBL.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11 = Final_gain2[11];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12 = Final_gain2[12];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13 = Final_gain2[13];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14 = Final_gain2[14];
    rSmoothCOLOR_TBL.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15 = Final_gain2[15];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16 = Final_gain2[16];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17 = Final_gain2[17];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18 = Final_gain2[18];
    rSmoothCOLOR_TBL.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19 = Final_gain2[19];

    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0  = Final_gain3[0];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1  = Final_gain3[1];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2  = Final_gain3[2];
    rSmoothCOLOR_TBL.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3  = Final_gain3[3];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4  = Final_gain3[4];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5  = Final_gain3[5];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6  = Final_gain3[6];
    rSmoothCOLOR_TBL.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7  = Final_gain3[7];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8  = Final_gain3[8];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9  = Final_gain3[9];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10 = Final_gain3[10];
    rSmoothCOLOR_TBL.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11 = Final_gain3[11];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12 = Final_gain3[12];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13 = Final_gain3[13];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14 = Final_gain3[14];
    rSmoothCOLOR_TBL.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15 = Final_gain3[15];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16 = Final_gain3[16];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17 = Final_gain3[17];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18 = Final_gain3[18];
    rSmoothCOLOR_TBL.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19 = Final_gain3[19];

    if (LVMiredDumpPartialS == 1)
    {
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvLoMiredLo[0] , point1_LvLoMiredLo[1] , point1_LvLoMiredLo[2] , point1_LvLoMiredLo[3] ,
                                     point1_LvLoMiredLo[4] , point1_LvLoMiredLo[5] , point1_LvLoMiredLo[6] , point1_LvLoMiredLo[7] ,
                                     point1_LvLoMiredLo[8] , point1_LvLoMiredLo[9] , point1_LvLoMiredLo[10], point1_LvLoMiredLo[11],
                                     point1_LvLoMiredLo[12], point1_LvLoMiredLo[13], point1_LvLoMiredLo[14], point1_LvLoMiredLo[15],
                                     point1_LvLoMiredLo[16], point1_LvLoMiredLo[17], point1_LvLoMiredLo[18], point1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvLoMiredUp[0] , point1_LvLoMiredUp[1] , point1_LvLoMiredUp[2] , point1_LvLoMiredUp[3] ,
                                     point1_LvLoMiredUp[4] , point1_LvLoMiredUp[5] , point1_LvLoMiredUp[6] , point1_LvLoMiredUp[7] ,
                                     point1_LvLoMiredUp[8] , point1_LvLoMiredUp[9] , point1_LvLoMiredUp[10], point1_LvLoMiredUp[11],
                                     point1_LvLoMiredUp[12], point1_LvLoMiredUp[13], point1_LvLoMiredUp[14], point1_LvLoMiredUp[15],
                                     point1_LvLoMiredUp[16], point1_LvLoMiredUp[17], point1_LvLoMiredUp[18], point1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvUpMiredLo[0] , point1_LvUpMiredLo[1] , point1_LvUpMiredLo[2] , point1_LvUpMiredLo[3] ,
                                     point1_LvUpMiredLo[4] , point1_LvUpMiredLo[5] , point1_LvUpMiredLo[6] , point1_LvUpMiredLo[7] ,
                                     point1_LvUpMiredLo[8] , point1_LvUpMiredLo[9] , point1_LvUpMiredLo[10], point1_LvUpMiredLo[11],
                                     point1_LvUpMiredLo[12], point1_LvUpMiredLo[13], point1_LvUpMiredLo[14], point1_LvUpMiredLo[15],
                                     point1_LvUpMiredLo[16], point1_LvUpMiredLo[17], point1_LvUpMiredLo[18], point1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1_LvUpMiredUp[0] , point1_LvUpMiredUp[1] , point1_LvUpMiredUp[2] , point1_LvUpMiredUp[3] ,
                                     point1_LvUpMiredUp[4] , point1_LvUpMiredUp[5] , point1_LvUpMiredUp[6] , point1_LvUpMiredUp[7] ,
                                     point1_LvUpMiredUp[8] , point1_LvUpMiredUp[9] , point1_LvUpMiredUp[10], point1_LvUpMiredUp[11],
                                     point1_LvUpMiredUp[12], point1_LvUpMiredUp[13], point1_LvUpMiredUp[14], point1_LvUpMiredUp[15],
                                     point1_LvUpMiredUp[16], point1_LvUpMiredUp[17], point1_LvUpMiredUp[18], point1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvLoMiredLo[0] , point2_LvLoMiredLo[1] , point2_LvLoMiredLo[2] , point2_LvLoMiredLo[3] ,
                                     point2_LvLoMiredLo[4] , point2_LvLoMiredLo[5] , point2_LvLoMiredLo[6] , point2_LvLoMiredLo[7] ,
                                     point2_LvLoMiredLo[8] , point2_LvLoMiredLo[9] , point2_LvLoMiredLo[10], point2_LvLoMiredLo[11],
                                     point2_LvLoMiredLo[12], point2_LvLoMiredLo[13], point2_LvLoMiredLo[14], point2_LvLoMiredLo[15],
                                     point2_LvLoMiredLo[16], point2_LvLoMiredLo[17], point2_LvLoMiredLo[18], point2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvLoMiredUp[0] , point2_LvLoMiredUp[1] , point2_LvLoMiredUp[2] , point2_LvLoMiredUp[3] ,
                                     point2_LvLoMiredUp[4] , point2_LvLoMiredUp[5] , point2_LvLoMiredUp[6] , point2_LvLoMiredUp[7] ,
                                     point2_LvLoMiredUp[8] , point2_LvLoMiredUp[9] , point2_LvLoMiredUp[10], point2_LvLoMiredUp[11],
                                     point2_LvLoMiredUp[12], point2_LvLoMiredUp[13], point2_LvLoMiredUp[14], point2_LvLoMiredUp[15],
                                     point2_LvLoMiredUp[16], point2_LvLoMiredUp[17], point2_LvLoMiredUp[18], point2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvUpMiredLo[0] , point2_LvUpMiredLo[1] , point2_LvUpMiredLo[2] , point2_LvUpMiredLo[3] ,
                                     point2_LvUpMiredLo[4] , point2_LvUpMiredLo[5] , point2_LvUpMiredLo[6] , point2_LvUpMiredLo[7] ,
                                     point2_LvUpMiredLo[8] , point2_LvUpMiredLo[9] , point2_LvUpMiredLo[10], point2_LvUpMiredLo[11],
                                     point2_LvUpMiredLo[12], point2_LvUpMiredLo[13], point2_LvUpMiredLo[14], point2_LvUpMiredLo[15],
                                     point2_LvUpMiredLo[16], point2_LvUpMiredLo[17], point2_LvUpMiredLo[18], point2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2_LvUpMiredUp[0] , point2_LvUpMiredUp[1] , point2_LvUpMiredUp[2] , point2_LvUpMiredUp[3] ,
                                     point2_LvUpMiredUp[4] , point2_LvUpMiredUp[5] , point2_LvUpMiredUp[6] , point2_LvUpMiredUp[7] ,
                                     point2_LvUpMiredUp[8] , point2_LvUpMiredUp[9] , point2_LvUpMiredUp[10], point2_LvUpMiredUp[11],
                                     point2_LvUpMiredUp[12], point2_LvUpMiredUp[13], point2_LvUpMiredUp[14], point2_LvUpMiredUp[15],
                                     point2_LvUpMiredUp[16], point2_LvUpMiredUp[17], point2_LvUpMiredUp[18], point2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvLoMiredLo[0] , gain1_LvLoMiredLo[1] , gain1_LvLoMiredLo[2] , gain1_LvLoMiredLo[3] ,
                                     gain1_LvLoMiredLo[4] , gain1_LvLoMiredLo[5] , gain1_LvLoMiredLo[6] , gain1_LvLoMiredLo[7] ,
                                     gain1_LvLoMiredLo[8] , gain1_LvLoMiredLo[9] , gain1_LvLoMiredLo[10], gain1_LvLoMiredLo[11],
                                     gain1_LvLoMiredLo[12], gain1_LvLoMiredLo[13], gain1_LvLoMiredLo[14], gain1_LvLoMiredLo[15],
                                     gain1_LvLoMiredLo[16], gain1_LvLoMiredLo[17], gain1_LvLoMiredLo[18], gain1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvLoMiredUp[0] , gain1_LvLoMiredUp[1] , gain1_LvLoMiredUp[2] , gain1_LvLoMiredUp[3] ,
                                     gain1_LvLoMiredUp[4] , gain1_LvLoMiredUp[5] , gain1_LvLoMiredUp[6] , gain1_LvLoMiredUp[7] ,
                                     gain1_LvLoMiredUp[8] , gain1_LvLoMiredUp[9] , gain1_LvLoMiredUp[10], gain1_LvLoMiredUp[11],
                                     gain1_LvLoMiredUp[12], gain1_LvLoMiredUp[13], gain1_LvLoMiredUp[14], gain1_LvLoMiredUp[15],
                                     gain1_LvLoMiredUp[16], gain1_LvLoMiredUp[17], gain1_LvLoMiredUp[18], gain1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvUpMiredLo[0] , gain1_LvUpMiredLo[1] , gain1_LvUpMiredLo[2] , gain1_LvUpMiredLo[3] ,
                                     gain1_LvUpMiredLo[4] , gain1_LvUpMiredLo[5] , gain1_LvUpMiredLo[6] , gain1_LvUpMiredLo[7] ,
                                     gain1_LvUpMiredLo[8] , gain1_LvUpMiredLo[9] , gain1_LvUpMiredLo[10], gain1_LvUpMiredLo[11],
                                     gain1_LvUpMiredLo[12], gain1_LvUpMiredLo[13], gain1_LvUpMiredLo[14], gain1_LvUpMiredLo[15],
                                     gain1_LvUpMiredLo[16], gain1_LvUpMiredLo[17], gain1_LvUpMiredLo[18], gain1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1_LvUpMiredUp[0] , gain1_LvUpMiredUp[1] , gain1_LvUpMiredUp[2] , gain1_LvUpMiredUp[3] ,
                                     gain1_LvUpMiredUp[4] , gain1_LvUpMiredUp[5] , gain1_LvUpMiredUp[6] , gain1_LvUpMiredUp[7] ,
                                     gain1_LvUpMiredUp[8] , gain1_LvUpMiredUp[9] , gain1_LvUpMiredUp[10], gain1_LvUpMiredUp[11],
                                     gain1_LvUpMiredUp[12], gain1_LvUpMiredUp[13], gain1_LvUpMiredUp[14], gain1_LvUpMiredUp[15],
                                     gain1_LvUpMiredUp[16], gain1_LvUpMiredUp[17], gain1_LvUpMiredUp[18], gain1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvLoMiredLo[0] , gain2_LvLoMiredLo[1] , gain2_LvLoMiredLo[2] , gain2_LvLoMiredLo[3] ,
                                     gain2_LvLoMiredLo[4] , gain2_LvLoMiredLo[5] , gain2_LvLoMiredLo[6] , gain2_LvLoMiredLo[7] ,
                                     gain2_LvLoMiredLo[8] , gain2_LvLoMiredLo[9] , gain2_LvLoMiredLo[10], gain2_LvLoMiredLo[11],
                                     gain2_LvLoMiredLo[12], gain2_LvLoMiredLo[13], gain2_LvLoMiredLo[14], gain2_LvLoMiredLo[15],
                                     gain2_LvLoMiredLo[16], gain2_LvLoMiredLo[17], gain2_LvLoMiredLo[18], gain2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvLoMiredUp[0] , gain2_LvLoMiredUp[1] , gain2_LvLoMiredUp[2] , gain2_LvLoMiredUp[3] ,
                                     gain2_LvLoMiredUp[4] , gain2_LvLoMiredUp[5] , gain2_LvLoMiredUp[6] , gain2_LvLoMiredUp[7] ,
                                     gain2_LvLoMiredUp[8] , gain2_LvLoMiredUp[9] , gain2_LvLoMiredUp[10], gain2_LvLoMiredUp[11],
                                     gain2_LvLoMiredUp[12], gain2_LvLoMiredUp[13], gain2_LvLoMiredUp[14], gain2_LvLoMiredUp[15],
                                     gain2_LvLoMiredUp[16], gain2_LvLoMiredUp[17], gain2_LvLoMiredUp[18], gain2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvUpMiredLo[0] , gain2_LvUpMiredLo[1] , gain2_LvUpMiredLo[2] , gain2_LvUpMiredLo[3] ,
                                     gain2_LvUpMiredLo[4] , gain2_LvUpMiredLo[5] , gain2_LvUpMiredLo[6] , gain2_LvUpMiredLo[7] ,
                                     gain2_LvUpMiredLo[8] , gain2_LvUpMiredLo[9] , gain2_LvUpMiredLo[10], gain2_LvUpMiredLo[11],
                                     gain2_LvUpMiredLo[12], gain2_LvUpMiredLo[13], gain2_LvUpMiredLo[14], gain2_LvUpMiredLo[15],
                                     gain2_LvUpMiredLo[16], gain2_LvUpMiredLo[17], gain2_LvUpMiredLo[18], gain2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2_LvUpMiredUp[0] , gain2_LvUpMiredUp[1] , gain2_LvUpMiredUp[2] , gain2_LvUpMiredUp[3] ,
                                     gain2_LvUpMiredUp[4] , gain2_LvUpMiredUp[5] , gain2_LvUpMiredUp[6] , gain2_LvUpMiredUp[7] ,
                                     gain2_LvUpMiredUp[8] , gain2_LvUpMiredUp[9] , gain2_LvUpMiredUp[10], gain2_LvUpMiredUp[11],
                                     gain2_LvUpMiredUp[12], gain2_LvUpMiredUp[13], gain2_LvUpMiredUp[14], gain2_LvUpMiredUp[15],
                                     gain2_LvUpMiredUp[16], gain2_LvUpMiredUp[17], gain2_LvUpMiredUp[18], gain2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvLoMiredLo[0] , gain3_LvLoMiredLo[1] , gain3_LvLoMiredLo[2] , gain3_LvLoMiredLo[3] ,
                                     gain3_LvLoMiredLo[4] , gain3_LvLoMiredLo[5] , gain3_LvLoMiredLo[6] , gain3_LvLoMiredLo[7] ,
                                     gain3_LvLoMiredLo[8] , gain3_LvLoMiredLo[9] , gain3_LvLoMiredLo[10], gain3_LvLoMiredLo[11],
                                     gain3_LvLoMiredLo[12], gain3_LvLoMiredLo[13], gain3_LvLoMiredLo[14], gain3_LvLoMiredLo[15],
                                     gain3_LvLoMiredLo[16], gain3_LvLoMiredLo[17], gain3_LvLoMiredLo[18], gain3_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvLoMiredUp[0] , gain3_LvLoMiredUp[1] , gain3_LvLoMiredUp[2] , gain3_LvLoMiredUp[3] ,
                                     gain3_LvLoMiredUp[4] , gain3_LvLoMiredUp[5] , gain3_LvLoMiredUp[6] , gain3_LvLoMiredUp[7] ,
                                     gain3_LvLoMiredUp[8] , gain3_LvLoMiredUp[9] , gain3_LvLoMiredUp[10], gain3_LvLoMiredUp[11],
                                     gain3_LvLoMiredUp[12], gain3_LvLoMiredUp[13], gain3_LvLoMiredUp[14], gain3_LvLoMiredUp[15],
                                     gain3_LvLoMiredUp[16], gain3_LvLoMiredUp[17], gain3_LvLoMiredUp[18], gain3_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvUpMiredLo[0] , gain3_LvUpMiredLo[1] , gain3_LvUpMiredLo[2] , gain3_LvUpMiredLo[3] ,
                                     gain3_LvUpMiredLo[4] , gain3_LvUpMiredLo[5] , gain3_LvUpMiredLo[6] , gain3_LvUpMiredLo[7] ,
                                     gain3_LvUpMiredLo[8] , gain3_LvUpMiredLo[9] , gain3_LvUpMiredLo[10], gain3_LvUpMiredLo[11],
                                     gain3_LvUpMiredLo[12], gain3_LvUpMiredLo[13], gain3_LvUpMiredLo[14], gain3_LvUpMiredLo[15],
                                     gain3_LvUpMiredLo[16], gain3_LvUpMiredLo[17], gain3_LvUpMiredLo[18], gain3_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3_LvUpMiredUp[0] , gain3_LvUpMiredUp[1] , gain3_LvUpMiredUp[2] , gain3_LvUpMiredUp[3] ,
                                     gain3_LvUpMiredUp[4] , gain3_LvUpMiredUp[5] , gain3_LvUpMiredUp[6] , gain3_LvUpMiredUp[7] ,
                                     gain3_LvUpMiredUp[8] , gain3_LvUpMiredUp[9] , gain3_LvUpMiredUp[10], gain3_LvUpMiredUp[11],
                                     gain3_LvUpMiredUp[12], gain3_LvUpMiredUp[13], gain3_LvUpMiredUp[14], gain3_LvUpMiredUp[15],
                                     gain3_LvUpMiredUp[16], gain3_LvUpMiredUp[17], gain3_LvUpMiredUp[18], gain3_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvLoMiredLo[0] , output1_LvLoMiredLo[1] , output1_LvLoMiredLo[2] , output1_LvLoMiredLo[3] ,
                                    output1_LvLoMiredLo[4] , output1_LvLoMiredLo[5] , output1_LvLoMiredLo[6] , output1_LvLoMiredLo[7] ,
                                    output1_LvLoMiredLo[8] , output1_LvLoMiredLo[9] , output1_LvLoMiredLo[10], output1_LvLoMiredLo[11],
                                    output1_LvLoMiredLo[12], output1_LvLoMiredLo[13], output1_LvLoMiredLo[14], output1_LvLoMiredLo[15],
                                    output1_LvLoMiredLo[16], output1_LvLoMiredLo[17], output1_LvLoMiredLo[18], output1_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvLoMiredUp[0] , output1_LvLoMiredUp[1] , output1_LvLoMiredUp[2] , output1_LvLoMiredUp[3] ,
                                    output1_LvLoMiredUp[4] , output1_LvLoMiredUp[5] , output1_LvLoMiredUp[6] , output1_LvLoMiredUp[7] ,
                                    output1_LvLoMiredUp[8] , output1_LvLoMiredUp[9] , output1_LvLoMiredUp[10], output1_LvLoMiredUp[11],
                                    output1_LvLoMiredUp[12], output1_LvLoMiredUp[13], output1_LvLoMiredUp[14], output1_LvLoMiredUp[15],
                                    output1_LvLoMiredUp[16], output1_LvLoMiredUp[17], output1_LvLoMiredUp[18], output1_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvUpMiredLo[0] , output1_LvUpMiredLo[1] , output1_LvUpMiredLo[2] , output1_LvUpMiredLo[3] ,
                                    output1_LvUpMiredLo[4] , output1_LvUpMiredLo[5] , output1_LvUpMiredLo[6] , output1_LvUpMiredLo[7] ,
                                    output1_LvUpMiredLo[8] , output1_LvUpMiredLo[9] , output1_LvUpMiredLo[10], output1_LvUpMiredLo[11],
                                    output1_LvUpMiredLo[12], output1_LvUpMiredLo[13], output1_LvUpMiredLo[14], output1_LvUpMiredLo[15],
                                    output1_LvUpMiredLo[16], output1_LvUpMiredLo[17], output1_LvUpMiredLo[18], output1_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1_LvUpMiredUp[0] , output1_LvUpMiredUp[1] , output1_LvUpMiredUp[2] , output1_LvUpMiredUp[3] ,
                                    output1_LvUpMiredUp[4] , output1_LvUpMiredUp[5] , output1_LvUpMiredUp[6] , output1_LvUpMiredUp[7] ,
                                    output1_LvUpMiredUp[8] , output1_LvUpMiredUp[9] , output1_LvUpMiredUp[10], output1_LvUpMiredUp[11],
                                    output1_LvUpMiredUp[12], output1_LvUpMiredUp[13], output1_LvUpMiredUp[14], output1_LvUpMiredUp[15],
                                    output1_LvUpMiredUp[16], output1_LvUpMiredUp[17], output1_LvUpMiredUp[18], output1_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvLoMiredLo[0] , output2_LvLoMiredLo[1] , output2_LvLoMiredLo[2] , output2_LvLoMiredLo[3] ,
                                    output2_LvLoMiredLo[4] , output2_LvLoMiredLo[5] , output2_LvLoMiredLo[6] , output2_LvLoMiredLo[7] ,
                                    output2_LvLoMiredLo[8] , output2_LvLoMiredLo[9] , output2_LvLoMiredLo[10], output2_LvLoMiredLo[11],
                                    output2_LvLoMiredLo[12], output2_LvLoMiredLo[13], output2_LvLoMiredLo[14], output2_LvLoMiredLo[15],
                                    output2_LvLoMiredLo[16], output2_LvLoMiredLo[17], output2_LvLoMiredLo[18], output2_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvLoMiredUp[0] , output2_LvLoMiredUp[1] , output2_LvLoMiredUp[2] , output2_LvLoMiredUp[3] ,
                                    output2_LvLoMiredUp[4] , output2_LvLoMiredUp[5] , output2_LvLoMiredUp[6] , output2_LvLoMiredUp[7] ,
                                    output2_LvLoMiredUp[8] , output2_LvLoMiredUp[9] , output2_LvLoMiredUp[10], output2_LvLoMiredUp[11],
                                    output2_LvLoMiredUp[12], output2_LvLoMiredUp[13], output2_LvLoMiredUp[14], output2_LvLoMiredUp[15],
                                    output2_LvLoMiredUp[16], output2_LvLoMiredUp[17], output2_LvLoMiredUp[18], output2_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvUpMiredLo[0] , output2_LvUpMiredLo[1] , output2_LvUpMiredLo[2] , output2_LvUpMiredLo[3] ,
                                    output2_LvUpMiredLo[4] , output2_LvUpMiredLo[5] , output2_LvUpMiredLo[6] , output2_LvUpMiredLo[7] ,
                                    output2_LvUpMiredLo[8] , output2_LvUpMiredLo[9] , output2_LvUpMiredLo[10], output2_LvUpMiredLo[11],
                                    output2_LvUpMiredLo[12], output2_LvUpMiredLo[13], output2_LvUpMiredLo[14], output2_LvUpMiredLo[15],
                                    output2_LvUpMiredLo[16], output2_LvUpMiredLo[17], output2_LvUpMiredLo[18], output2_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2_LvUpMiredUp[0] , output2_LvUpMiredUp[1] , output2_LvUpMiredUp[2] , output2_LvUpMiredUp[3] ,
                                    output2_LvUpMiredUp[4] , output2_LvUpMiredUp[5] , output2_LvUpMiredUp[6] , output2_LvUpMiredUp[7] ,
                                    output2_LvUpMiredUp[8] , output2_LvUpMiredUp[9] , output2_LvUpMiredUp[10], output2_LvUpMiredUp[11],
                                    output2_LvUpMiredUp[12], output2_LvUpMiredUp[13], output2_LvUpMiredUp[14], output2_LvUpMiredUp[15],
                                    output2_LvUpMiredUp[16], output2_LvUpMiredUp[17], output2_LvUpMiredUp[18], output2_LvUpMiredUp[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point1[0] , point1[1] , point1[2] , point1[3] ,
                                     point1[4] , point1[5] , point1[6] , point1[7] ,
                                     point1[8] , point1[9] , point1[10], point1[11],
                                     point1[12], point1[13], point1[14], point1[15],
                                     point1[16], point1[17], point1[18], point1[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point1 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_point1[0] , Final_point1[1] , Final_point1[2] , Final_point1[3] ,
                                     Final_point1[4] , Final_point1[5] , Final_point1[6] , Final_point1[7] ,
                                     Final_point1[8] , Final_point1[9] , Final_point1[10], Final_point1[11],
                                     Final_point1[12], Final_point1[13], Final_point1[14], Final_point1[15],
                                     Final_point1[16], Final_point1[17], Final_point1[18], Final_point1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     point2[0] , point2[1] , point2[2] , point2[3] ,
                                     point2[4] , point2[5] , point2[6] , point2[7] ,
                                     point2[8] , point2[9] , point2[10], point2[11],
                                     point2[12], point2[13], point2[14], point2[15],
                                     point2[16], point2[17], point2[18], point2[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS point2 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_point2[0] , Final_point2[1] , Final_point2[2] , Final_point2[3] ,
                                     Final_point2[4] , Final_point2[5] , Final_point2[6] , Final_point2[7] ,
                                     Final_point2[8] , Final_point2[9] , Final_point2[10], Final_point2[11],
                                     Final_point2[12], Final_point2[13], Final_point2[14], Final_point2[15],
                                     Final_point2[16], Final_point2[17], Final_point2[18], Final_point2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output1[0] , output1[1] , output1[2] , output1[3] ,
                                    output1[4] , output1[5] , output1[6] , output1[7] ,
                                    output1[8] , output1[9] , output1[10], output1[11],
                                    output1[12], output1[13], output1[14], output1[15],
                                    output1[16], output1[17], output1[18], output1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS output2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    output2[0] , output2[1] , output2[2] , output2[3] ,
                                    output2[4] , output2[5] , output2[6] , output2[7] ,
                                    output2[8] , output2[9] , output2[10], output2[11],
                                    output2[12], output2[13], output2[14], output2[15],
                                    output2[16], output2[17], output2[18], output2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain1[0] , gain1[1] , gain1[2] , gain1[3] ,
                                     gain1[4] , gain1[5] , gain1[6] , gain1[7] ,
                                     gain1[8] , gain1[9] , gain1[10], gain1[11],
                                     gain1[12], gain1[13], gain1[14], gain1[15],
                                     gain1[16], gain1[17], gain1[18], gain1[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain1 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain1[0] , Final_gain1[1] , Final_gain1[2] , Final_gain1[3] ,
                                     Final_gain1[4] , Final_gain1[5] , Final_gain1[6] , Final_gain1[7] ,
                                     Final_gain1[8] , Final_gain1[9] , Final_gain1[10], Final_gain1[11],
                                     Final_gain1[12], Final_gain1[13], Final_gain1[14], Final_gain1[15],
                                     Final_gain1[16], Final_gain1[17], Final_gain1[18], Final_gain1[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain2[0] , gain2[1] , gain2[2] , gain2[3] ,
                                     gain2[4] , gain2[5] , gain2[6] , gain2[7] ,
                                     gain2[8] , gain2[9] , gain2[10], gain2[11],
                                     gain2[12], gain2[13], gain2[14], gain2[15],
                                     gain2[16], gain2[17], gain2[18], gain2[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain2 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain2[0] , Final_gain2[1] , Final_gain2[2] , Final_gain2[3] ,
                                     Final_gain2[4] , Final_gain2[5] , Final_gain2[6] , Final_gain2[7] ,
                                     Final_gain2[8] , Final_gain2[9] , Final_gain2[10], Final_gain2[11],
                                     Final_gain2[12], Final_gain2[13], Final_gain2[14], Final_gain2[15],
                                     Final_gain2[16], Final_gain2[17], Final_gain2[18], Final_gain2[19]);

        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     gain3[0] , gain3[1] , gain3[2] , gain3[3] ,
                                     gain3[4] , gain3[5] , gain3[6] , gain3[7] ,
                                     gain3[8] , gain3[9] , gain3[10], gain3[11],
                                     gain3[12], gain3[13], gain3[14], gain3[15],
                                     gain3[16], gain3[17], gain3[18], gain3[19]);
        COLOR_LOG_IF(LVMiredDumpPartialS, "[%s()] PartialS gain3 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_gain3[0] , Final_gain3[1] , Final_gain3[2] , Final_gain3[3] ,
                                     Final_gain3[4] , Final_gain3[5] , Final_gain3[6] , Final_gain3[7] ,
                                     Final_gain3[8] , Final_gain3[9] , Final_gain3[10], Final_gain3[11],
                                     Final_gain3[12], Final_gain3[13], Final_gain3[14], Final_gain3[15],
                                     Final_gain3[16], Final_gain3[17], Final_gain3[18], Final_gain3[19]);

    }
}

MVOID InterParamSGainByY(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.sgy", cLogLevel, "0");
    MINT32 LVMiredDumpSGainByY = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 SGainByY000_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY000_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY000_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY000_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY000[20] = {0};
    MUINT32 Final_SGainByY000[20] = {0};

    MBOOL   IsCapture = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;


    Final_SGainByY000[0]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0;
    Final_SGainByY000[1]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1;
    Final_SGainByY000[2]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2;
    Final_SGainByY000[3]  = rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3;
    Final_SGainByY000[4]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4;
    Final_SGainByY000[5]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5;
    Final_SGainByY000[6]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6;
    Final_SGainByY000[7]  = rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7;
    Final_SGainByY000[8]  = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8;
    Final_SGainByY000[9]  = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9;
    Final_SGainByY000[10] = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10;
    Final_SGainByY000[11] = rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11;
    Final_SGainByY000[12] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12;
    Final_SGainByY000[13] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13;
    Final_SGainByY000[14] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14;
    Final_SGainByY000[15] = rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15;
    Final_SGainByY000[16] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16;
    Final_SGainByY000[17] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17;
    Final_SGainByY000[18] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18;
    Final_SGainByY000[19] = rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19;

    SGainByY000_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0;
    SGainByY000_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1;
    SGainByY000_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2;
    SGainByY000_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3;
    SGainByY000_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4;
    SGainByY000_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5;
    SGainByY000_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6;
    SGainByY000_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7;
    SGainByY000_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8;
    SGainByY000_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9;
    SGainByY000_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10;
    SGainByY000_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11;
    SGainByY000_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12;
    SGainByY000_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13;
    SGainByY000_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14;
    SGainByY000_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15;
    SGainByY000_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16;
    SGainByY000_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17;
    SGainByY000_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18;
    SGainByY000_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19;

    SGainByY000_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0;
    SGainByY000_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1;
    SGainByY000_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2;
    SGainByY000_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3;
    SGainByY000_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4;
    SGainByY000_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5;
    SGainByY000_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6;
    SGainByY000_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7;
    SGainByY000_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8;
    SGainByY000_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9;
    SGainByY000_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10;
    SGainByY000_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11;
    SGainByY000_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12;
    SGainByY000_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13;
    SGainByY000_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14;
    SGainByY000_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15;
    SGainByY000_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16;
    SGainByY000_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17;
    SGainByY000_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18;
    SGainByY000_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19;

    SGainByY000_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0;
    SGainByY000_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1;
    SGainByY000_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2;
    SGainByY000_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3;
    SGainByY000_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4;
    SGainByY000_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5;
    SGainByY000_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6;
    SGainByY000_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7;
    SGainByY000_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8;
    SGainByY000_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9;
    SGainByY000_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10;
    SGainByY000_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11;
    SGainByY000_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12;
    SGainByY000_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13;
    SGainByY000_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14;
    SGainByY000_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15;
    SGainByY000_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16;
    SGainByY000_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17;
    SGainByY000_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18;
    SGainByY000_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19;

    SGainByY000_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0;
    SGainByY000_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1;
    SGainByY000_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2;
    SGainByY000_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3;
    SGainByY000_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4;
    SGainByY000_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5;
    SGainByY000_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6;
    SGainByY000_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7;
    SGainByY000_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8;
    SGainByY000_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9;
    SGainByY000_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10;
    SGainByY000_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11;
    SGainByY000_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12;
    SGainByY000_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13;
    SGainByY000_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14;
    SGainByY000_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15;
    SGainByY000_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16;
    SGainByY000_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17;
    SGainByY000_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18;
    SGainByY000_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19;

    for (i = 0; i < (sizeof(SGainByY000)/sizeof(MUINT32)); i++)
    {
        SGainByY000[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY000_LvLoMiredLo[i], SGainByY000_LvLoMiredUp[i], SGainByY000_LvUpMiredLo[i], SGainByY000_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY000[i] = SGainByY000[i];
        else
            Final_SGainByY000[i] = IIR(Final_SGainByY000[i], SGainByY000[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0  = Final_SGainByY000[0];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1  = Final_SGainByY000[1];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2  = Final_SGainByY000[2];
    rSmoothCOLOR_TBL.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3  = Final_SGainByY000[3];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4  = Final_SGainByY000[4];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5  = Final_SGainByY000[5];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6  = Final_SGainByY000[6];
    rSmoothCOLOR_TBL.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7  = Final_SGainByY000[7];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8  = Final_SGainByY000[8];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9  = Final_SGainByY000[9];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10 = Final_SGainByY000[10];
    rSmoothCOLOR_TBL.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11 = Final_SGainByY000[11];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12 = Final_SGainByY000[12];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13 = Final_SGainByY000[13];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14 = Final_SGainByY000[14];
    rSmoothCOLOR_TBL.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15 = Final_SGainByY000[15];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16 = Final_SGainByY000[16];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17 = Final_SGainByY000[17];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18 = Final_SGainByY000[18];
    rSmoothCOLOR_TBL.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19 = Final_SGainByY000[19];

    // Saturation gain by Y64
    MUINT32 SGainByY064_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY064_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY064_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY064_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY064[20] = {0};
    MUINT32 Final_SGainByY064[20] = {0};

    Final_SGainByY064[0]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0;
    Final_SGainByY064[1]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1;
    Final_SGainByY064[2]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2;
    Final_SGainByY064[3]  = rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3;
    Final_SGainByY064[4]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4;
    Final_SGainByY064[5]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5;
    Final_SGainByY064[6]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6;
    Final_SGainByY064[7]  = rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7;
    Final_SGainByY064[8]  = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8;
    Final_SGainByY064[9]  = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9;
    Final_SGainByY064[10] = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10;
    Final_SGainByY064[11] = rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11;
    Final_SGainByY064[12] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12;
    Final_SGainByY064[13] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13;
    Final_SGainByY064[14] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14;
    Final_SGainByY064[15] = rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15;
    Final_SGainByY064[16] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16;
    Final_SGainByY064[17] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17;
    Final_SGainByY064[18] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18;
    Final_SGainByY064[19] = rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19;

    SGainByY064_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0;
    SGainByY064_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1;
    SGainByY064_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2;
    SGainByY064_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3;
    SGainByY064_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4;
    SGainByY064_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5;
    SGainByY064_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6;
    SGainByY064_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7;
    SGainByY064_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8;
    SGainByY064_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9;
    SGainByY064_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10;
    SGainByY064_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11;
    SGainByY064_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12;
    SGainByY064_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13;
    SGainByY064_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14;
    SGainByY064_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15;
    SGainByY064_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16;
    SGainByY064_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17;
    SGainByY064_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18;
    SGainByY064_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19;

    SGainByY064_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0;
    SGainByY064_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1;
    SGainByY064_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2;
    SGainByY064_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3;
    SGainByY064_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4;
    SGainByY064_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5;
    SGainByY064_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6;
    SGainByY064_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7;
    SGainByY064_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8;
    SGainByY064_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9;
    SGainByY064_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10;
    SGainByY064_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11;
    SGainByY064_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12;
    SGainByY064_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13;
    SGainByY064_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14;
    SGainByY064_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15;
    SGainByY064_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16;
    SGainByY064_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17;
    SGainByY064_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18;
    SGainByY064_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19;

    SGainByY064_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0;
    SGainByY064_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1;
    SGainByY064_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2;
    SGainByY064_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3;
    SGainByY064_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4;
    SGainByY064_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5;
    SGainByY064_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6;
    SGainByY064_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7;
    SGainByY064_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8;
    SGainByY064_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9;
    SGainByY064_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10;
    SGainByY064_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11;
    SGainByY064_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12;
    SGainByY064_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13;
    SGainByY064_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14;
    SGainByY064_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15;
    SGainByY064_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16;
    SGainByY064_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17;
    SGainByY064_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18;
    SGainByY064_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19;

    SGainByY064_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0;
    SGainByY064_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1;
    SGainByY064_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2;
    SGainByY064_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3;
    SGainByY064_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4;
    SGainByY064_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5;
    SGainByY064_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6;
    SGainByY064_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7;
    SGainByY064_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8;
    SGainByY064_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9;
    SGainByY064_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10;
    SGainByY064_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11;
    SGainByY064_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12;
    SGainByY064_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13;
    SGainByY064_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14;
    SGainByY064_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15;
    SGainByY064_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16;
    SGainByY064_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17;
    SGainByY064_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18;
    SGainByY064_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19;

    for (i = 0; i < (sizeof(SGainByY064)/sizeof(MUINT32)); i++)
    {
        SGainByY064[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY064_LvLoMiredLo[i], SGainByY064_LvLoMiredUp[i], SGainByY064_LvUpMiredLo[i], SGainByY064_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY064[i] = SGainByY064[i];
        else
            Final_SGainByY064[i] = IIR(Final_SGainByY064[i], SGainByY064[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0  = Final_SGainByY064[0];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1  = Final_SGainByY064[1];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2  = Final_SGainByY064[2];
    rSmoothCOLOR_TBL.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3  = Final_SGainByY064[3];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4  = Final_SGainByY064[4];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5  = Final_SGainByY064[5];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6  = Final_SGainByY064[6];
    rSmoothCOLOR_TBL.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7  = Final_SGainByY064[7];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8  = Final_SGainByY064[8];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9  = Final_SGainByY064[9];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10 = Final_SGainByY064[10];
    rSmoothCOLOR_TBL.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11 = Final_SGainByY064[11];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12 = Final_SGainByY064[12];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13 = Final_SGainByY064[13];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14 = Final_SGainByY064[14];
    rSmoothCOLOR_TBL.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15 = Final_SGainByY064[15];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16 = Final_SGainByY064[16];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17 = Final_SGainByY064[17];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18 = Final_SGainByY064[18];
    rSmoothCOLOR_TBL.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19 = Final_SGainByY064[19];

    // Saturation gain by Y128
    MUINT32 SGainByY128_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY128_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY128_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY128_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY128[20] = {0};
    MUINT32 Final_SGainByY128[20] = {0};

    Final_SGainByY128[0]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0;
    Final_SGainByY128[1]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1;
    Final_SGainByY128[2]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2;
    Final_SGainByY128[3]  = rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3;
    Final_SGainByY128[4]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4;
    Final_SGainByY128[5]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5;
    Final_SGainByY128[6]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6;
    Final_SGainByY128[7]  = rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7;
    Final_SGainByY128[8]  = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8;
    Final_SGainByY128[9]  = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9;
    Final_SGainByY128[10] = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10;
    Final_SGainByY128[11] = rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11;
    Final_SGainByY128[12] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12;
    Final_SGainByY128[13] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13;
    Final_SGainByY128[14] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14;
    Final_SGainByY128[15] = rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15;
    Final_SGainByY128[16] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16;
    Final_SGainByY128[17] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17;
    Final_SGainByY128[18] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18;
    Final_SGainByY128[19] = rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19;

    SGainByY128_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0;
    SGainByY128_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1;
    SGainByY128_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2;
    SGainByY128_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3;
    SGainByY128_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4;
    SGainByY128_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5;
    SGainByY128_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6;
    SGainByY128_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7;
    SGainByY128_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8;
    SGainByY128_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9;
    SGainByY128_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10;
    SGainByY128_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11;
    SGainByY128_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12;
    SGainByY128_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13;
    SGainByY128_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14;
    SGainByY128_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15;
    SGainByY128_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16;
    SGainByY128_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17;
    SGainByY128_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18;
    SGainByY128_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19;

    SGainByY128_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0;
    SGainByY128_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1;
    SGainByY128_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2;
    SGainByY128_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3;
    SGainByY128_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4;
    SGainByY128_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5;
    SGainByY128_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6;
    SGainByY128_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7;
    SGainByY128_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8;
    SGainByY128_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9;
    SGainByY128_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10;
    SGainByY128_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11;
    SGainByY128_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12;
    SGainByY128_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13;
    SGainByY128_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14;
    SGainByY128_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15;
    SGainByY128_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16;
    SGainByY128_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17;
    SGainByY128_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18;
    SGainByY128_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19;

    SGainByY128_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0;
    SGainByY128_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1;
    SGainByY128_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2;
    SGainByY128_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3;
    SGainByY128_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4;
    SGainByY128_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5;
    SGainByY128_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6;
    SGainByY128_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7;
    SGainByY128_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8;
    SGainByY128_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9;
    SGainByY128_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10;
    SGainByY128_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11;
    SGainByY128_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12;
    SGainByY128_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13;
    SGainByY128_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14;
    SGainByY128_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15;
    SGainByY128_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16;
    SGainByY128_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17;
    SGainByY128_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18;
    SGainByY128_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19;

    SGainByY128_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0;
    SGainByY128_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1;
    SGainByY128_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2;
    SGainByY128_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3;
    SGainByY128_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4;
    SGainByY128_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5;
    SGainByY128_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6;
    SGainByY128_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7;
    SGainByY128_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8;
    SGainByY128_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9;
    SGainByY128_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10;
    SGainByY128_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11;
    SGainByY128_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12;
    SGainByY128_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13;
    SGainByY128_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14;
    SGainByY128_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15;
    SGainByY128_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16;
    SGainByY128_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17;
    SGainByY128_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18;
    SGainByY128_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19;

    for (i = 0; i < (sizeof(SGainByY128)/sizeof(MUINT32)); i++)
    {
        SGainByY128[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY128_LvLoMiredLo[i], SGainByY128_LvLoMiredUp[i], SGainByY128_LvUpMiredLo[i], SGainByY128_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY128[i] = SGainByY128[i];
        else
            Final_SGainByY128[i] = IIR(Final_SGainByY128[i], SGainByY128[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0  = Final_SGainByY128[0];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1  = Final_SGainByY128[1];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2  = Final_SGainByY128[2];
    rSmoothCOLOR_TBL.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3  = Final_SGainByY128[3];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4  = Final_SGainByY128[4];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5  = Final_SGainByY128[5];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6  = Final_SGainByY128[6];
    rSmoothCOLOR_TBL.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7  = Final_SGainByY128[7];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8  = Final_SGainByY128[8];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9  = Final_SGainByY128[9];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10 = Final_SGainByY128[10];
    rSmoothCOLOR_TBL.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11 = Final_SGainByY128[11];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12 = Final_SGainByY128[12];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13 = Final_SGainByY128[13];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14 = Final_SGainByY128[14];
    rSmoothCOLOR_TBL.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15 = Final_SGainByY128[15];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16 = Final_SGainByY128[16];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17 = Final_SGainByY128[17];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18 = Final_SGainByY128[18];
    rSmoothCOLOR_TBL.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19 = Final_SGainByY128[19];

    // Saturation gain by Y192
    MUINT32 SGainByY192_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY192_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY192_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY192_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY192[20] = {0};
    MUINT32 Final_SGainByY192[20] = {0};

    Final_SGainByY192[0]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0;
    Final_SGainByY192[1]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1;
    Final_SGainByY192[2]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2;
    Final_SGainByY192[3]  = rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3;
    Final_SGainByY192[4]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4;
    Final_SGainByY192[5]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5;
    Final_SGainByY192[6]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6;
    Final_SGainByY192[7]  = rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7;
    Final_SGainByY192[8]  = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8;
    Final_SGainByY192[9]  = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9;
    Final_SGainByY192[10] = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10;
    Final_SGainByY192[11] = rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11;
    Final_SGainByY192[12] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12;
    Final_SGainByY192[13] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13;
    Final_SGainByY192[14] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14;
    Final_SGainByY192[15] = rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15;
    Final_SGainByY192[16] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16;
    Final_SGainByY192[17] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17;
    Final_SGainByY192[18] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18;
    Final_SGainByY192[19] = rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19;

    SGainByY192_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0;
    SGainByY192_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1;
    SGainByY192_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2;
    SGainByY192_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3;
    SGainByY192_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4;
    SGainByY192_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5;
    SGainByY192_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6;
    SGainByY192_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7;
    SGainByY192_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8;
    SGainByY192_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9;
    SGainByY192_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10;
    SGainByY192_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11;
    SGainByY192_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12;
    SGainByY192_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13;
    SGainByY192_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14;
    SGainByY192_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15;
    SGainByY192_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16;
    SGainByY192_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17;
    SGainByY192_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18;
    SGainByY192_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19;

    SGainByY192_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0;
    SGainByY192_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1;
    SGainByY192_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2;
    SGainByY192_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3;
    SGainByY192_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4;
    SGainByY192_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5;
    SGainByY192_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6;
    SGainByY192_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7;
    SGainByY192_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8;
    SGainByY192_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9;
    SGainByY192_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10;
    SGainByY192_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11;
    SGainByY192_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12;
    SGainByY192_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13;
    SGainByY192_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14;
    SGainByY192_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15;
    SGainByY192_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16;
    SGainByY192_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17;
    SGainByY192_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18;
    SGainByY192_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19;

    SGainByY192_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0;
    SGainByY192_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1;
    SGainByY192_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2;
    SGainByY192_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3;
    SGainByY192_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4;
    SGainByY192_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5;
    SGainByY192_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6;
    SGainByY192_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7;
    SGainByY192_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8;
    SGainByY192_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9;
    SGainByY192_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10;
    SGainByY192_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11;
    SGainByY192_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12;
    SGainByY192_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13;
    SGainByY192_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14;
    SGainByY192_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15;
    SGainByY192_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16;
    SGainByY192_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17;
    SGainByY192_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18;
    SGainByY192_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19;

    SGainByY192_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0;
    SGainByY192_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1;
    SGainByY192_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2;
    SGainByY192_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3;
    SGainByY192_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4;
    SGainByY192_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5;
    SGainByY192_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6;
    SGainByY192_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7;
    SGainByY192_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8;
    SGainByY192_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9;
    SGainByY192_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10;
    SGainByY192_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11;
    SGainByY192_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12;
    SGainByY192_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13;
    SGainByY192_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14;
    SGainByY192_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15;
    SGainByY192_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16;
    SGainByY192_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17;
    SGainByY192_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18;
    SGainByY192_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19;

    for (i = 0; i < (sizeof(SGainByY192)/sizeof(MUINT32)); i++)
    {
        SGainByY192[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY192_LvLoMiredLo[i], SGainByY192_LvLoMiredUp[i], SGainByY192_LvUpMiredLo[i], SGainByY192_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY192[i] = SGainByY192[i];
        else
            Final_SGainByY192[i] = IIR(Final_SGainByY192[i], SGainByY192[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0  = Final_SGainByY192[0];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1  = Final_SGainByY192[1];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2  = Final_SGainByY192[2];
    rSmoothCOLOR_TBL.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3  = Final_SGainByY192[3];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4  = Final_SGainByY192[4];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5  = Final_SGainByY192[5];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6  = Final_SGainByY192[6];
    rSmoothCOLOR_TBL.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7  = Final_SGainByY192[7];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8  = Final_SGainByY192[8];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9  = Final_SGainByY192[9];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10 = Final_SGainByY192[10];
    rSmoothCOLOR_TBL.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11 = Final_SGainByY192[11];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12 = Final_SGainByY192[12];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13 = Final_SGainByY192[13];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14 = Final_SGainByY192[14];
    rSmoothCOLOR_TBL.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15 = Final_SGainByY192[15];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16 = Final_SGainByY192[16];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17 = Final_SGainByY192[17];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18 = Final_SGainByY192[18];
    rSmoothCOLOR_TBL.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19 = Final_SGainByY192[19];

    // Saturation gain by Y256
    MUINT32 SGainByY256_LvLoMiredLo[20] = {0};
    MUINT32 SGainByY256_LvLoMiredUp[20] = {0};
    MUINT32 SGainByY256_LvUpMiredLo[20] = {0};
    MUINT32 SGainByY256_LvUpMiredUp[20] = {0};
    MUINT32 SGainByY256[20] = {0};
    MUINT32 Final_SGainByY256[20] = {0};

    Final_SGainByY256[0]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0;
    Final_SGainByY256[1]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1;
    Final_SGainByY256[2]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2;
    Final_SGainByY256[3]  = rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3;
    Final_SGainByY256[4]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4;
    Final_SGainByY256[5]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5;
    Final_SGainByY256[6]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6;
    Final_SGainByY256[7]  = rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7;
    Final_SGainByY256[8]  = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8;
    Final_SGainByY256[9]  = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9;
    Final_SGainByY256[10] = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10;
    Final_SGainByY256[11] = rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11;
    Final_SGainByY256[12] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12;
    Final_SGainByY256[13] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13;
    Final_SGainByY256[14] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14;
    Final_SGainByY256[15] = rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15;
    Final_SGainByY256[16] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16;
    Final_SGainByY256[17] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17;
    Final_SGainByY256[18] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18;
    Final_SGainByY256[19] = rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19;

    SGainByY256_LvLoMiredLo[0]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0;
    SGainByY256_LvLoMiredLo[1]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1;
    SGainByY256_LvLoMiredLo[2]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2;
    SGainByY256_LvLoMiredLo[3]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3;
    SGainByY256_LvLoMiredLo[4]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4;
    SGainByY256_LvLoMiredLo[5]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5;
    SGainByY256_LvLoMiredLo[6]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6;
    SGainByY256_LvLoMiredLo[7]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7;
    SGainByY256_LvLoMiredLo[8]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8;
    SGainByY256_LvLoMiredLo[9]  = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9;
    SGainByY256_LvLoMiredLo[10] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10;
    SGainByY256_LvLoMiredLo[11] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11;
    SGainByY256_LvLoMiredLo[12] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12;
    SGainByY256_LvLoMiredLo[13] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13;
    SGainByY256_LvLoMiredLo[14] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14;
    SGainByY256_LvLoMiredLo[15] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15;
    SGainByY256_LvLoMiredLo[16] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16;
    SGainByY256_LvLoMiredLo[17] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17;
    SGainByY256_LvLoMiredLo[18] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18;
    SGainByY256_LvLoMiredLo[19] = rTBL_LV_Lo_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19;

    SGainByY256_LvLoMiredUp[0]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0;
    SGainByY256_LvLoMiredUp[1]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1;
    SGainByY256_LvLoMiredUp[2]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2;
    SGainByY256_LvLoMiredUp[3]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3;
    SGainByY256_LvLoMiredUp[4]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4;
    SGainByY256_LvLoMiredUp[5]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5;
    SGainByY256_LvLoMiredUp[6]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6;
    SGainByY256_LvLoMiredUp[7]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7;
    SGainByY256_LvLoMiredUp[8]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8;
    SGainByY256_LvLoMiredUp[9]  = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9;
    SGainByY256_LvLoMiredUp[10] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10;
    SGainByY256_LvLoMiredUp[11] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11;
    SGainByY256_LvLoMiredUp[12] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12;
    SGainByY256_LvLoMiredUp[13] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13;
    SGainByY256_LvLoMiredUp[14] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14;
    SGainByY256_LvLoMiredUp[15] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15;
    SGainByY256_LvLoMiredUp[16] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16;
    SGainByY256_LvLoMiredUp[17] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17;
    SGainByY256_LvLoMiredUp[18] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18;
    SGainByY256_LvLoMiredUp[19] = rTBL_LV_Lo_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19;

    SGainByY256_LvUpMiredLo[0]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0;
    SGainByY256_LvUpMiredLo[1]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1;
    SGainByY256_LvUpMiredLo[2]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2;
    SGainByY256_LvUpMiredLo[3]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3;
    SGainByY256_LvUpMiredLo[4]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4;
    SGainByY256_LvUpMiredLo[5]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5;
    SGainByY256_LvUpMiredLo[6]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6;
    SGainByY256_LvUpMiredLo[7]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7;
    SGainByY256_LvUpMiredLo[8]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8;
    SGainByY256_LvUpMiredLo[9]  = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9;
    SGainByY256_LvUpMiredLo[10] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10;
    SGainByY256_LvUpMiredLo[11] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11;
    SGainByY256_LvUpMiredLo[12] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12;
    SGainByY256_LvUpMiredLo[13] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13;
    SGainByY256_LvUpMiredLo[14] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14;
    SGainByY256_LvUpMiredLo[15] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15;
    SGainByY256_LvUpMiredLo[16] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16;
    SGainByY256_LvUpMiredLo[17] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17;
    SGainByY256_LvUpMiredLo[18] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18;
    SGainByY256_LvUpMiredLo[19] = rTBL_LV_Up_CT_Lo.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19;

    SGainByY256_LvUpMiredUp[0]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0;
    SGainByY256_LvUpMiredUp[1]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1;
    SGainByY256_LvUpMiredUp[2]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2;
    SGainByY256_LvUpMiredUp[3]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3;
    SGainByY256_LvUpMiredUp[4]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4;
    SGainByY256_LvUpMiredUp[5]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5;
    SGainByY256_LvUpMiredUp[6]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6;
    SGainByY256_LvUpMiredUp[7]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7;
    SGainByY256_LvUpMiredUp[8]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8;
    SGainByY256_LvUpMiredUp[9]  = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9;
    SGainByY256_LvUpMiredUp[10] = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10;
    SGainByY256_LvUpMiredUp[11] = rTBL_LV_Up_CT_Up.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11;
    SGainByY256_LvUpMiredUp[12] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12;
    SGainByY256_LvUpMiredUp[13] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13;
    SGainByY256_LvUpMiredUp[14] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14;
    SGainByY256_LvUpMiredUp[15] = rTBL_LV_Up_CT_Up.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15;
    SGainByY256_LvUpMiredUp[16] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16;
    SGainByY256_LvUpMiredUp[17] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17;
    SGainByY256_LvUpMiredUp[18] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18;
    SGainByY256_LvUpMiredUp[19] = rTBL_LV_Up_CT_Up.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19;

    for (i = 0; i < (sizeof(SGainByY256)/sizeof(MUINT32)); i++)
    {
        SGainByY256[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, SGainByY256_LvLoMiredLo[i], SGainByY256_LvLoMiredUp[i], SGainByY256_LvUpMiredLo[i], SGainByY256_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_SGainByY256[i] = SGainByY256[i];
        else
            Final_SGainByY256[i] = IIR(Final_SGainByY256[i], SGainByY256[i], u4Step);
    }

    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0  = Final_SGainByY256[0];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1  = Final_SGainByY256[1];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2  = Final_SGainByY256[2];
    rSmoothCOLOR_TBL.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3  = Final_SGainByY256[3];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4  = Final_SGainByY256[4];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5  = Final_SGainByY256[5];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6  = Final_SGainByY256[6];
    rSmoothCOLOR_TBL.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7  = Final_SGainByY256[7];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8  = Final_SGainByY256[8];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9  = Final_SGainByY256[9];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10 = Final_SGainByY256[10];
    rSmoothCOLOR_TBL.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11 = Final_SGainByY256[11];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12 = Final_SGainByY256[12];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13 = Final_SGainByY256[13];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14 = Final_SGainByY256[14];
    rSmoothCOLOR_TBL.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15 = Final_SGainByY256[15];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16 = Final_SGainByY256[16];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17 = Final_SGainByY256[17];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18 = Final_SGainByY256[18];
    rSmoothCOLOR_TBL.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19 = Final_SGainByY256[19];

    if (LVMiredDumpSGainByY == 1)
    {
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvLoMiredLo[0] , SGainByY000_LvLoMiredLo[1] , SGainByY000_LvLoMiredLo[2] , SGainByY000_LvLoMiredLo[3] ,
                SGainByY000_LvLoMiredLo[4] , SGainByY000_LvLoMiredLo[5] , SGainByY000_LvLoMiredLo[6] , SGainByY000_LvLoMiredLo[7] ,
                SGainByY000_LvLoMiredLo[8] , SGainByY000_LvLoMiredLo[9] , SGainByY000_LvLoMiredLo[10], SGainByY000_LvLoMiredLo[11],
                SGainByY000_LvLoMiredLo[12], SGainByY000_LvLoMiredLo[13], SGainByY000_LvLoMiredLo[14], SGainByY000_LvLoMiredLo[15],
                SGainByY000_LvLoMiredLo[16], SGainByY000_LvLoMiredLo[17], SGainByY000_LvLoMiredLo[18], SGainByY000_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvLoMiredUp[0] , SGainByY000_LvLoMiredUp[1] , SGainByY000_LvLoMiredUp[2] , SGainByY000_LvLoMiredUp[3] ,
                SGainByY000_LvLoMiredUp[4] , SGainByY000_LvLoMiredUp[5] , SGainByY000_LvLoMiredUp[6] , SGainByY000_LvLoMiredUp[7] ,
                SGainByY000_LvLoMiredUp[8] , SGainByY000_LvLoMiredUp[9] , SGainByY000_LvLoMiredUp[10], SGainByY000_LvLoMiredUp[11],
                SGainByY000_LvLoMiredUp[12], SGainByY000_LvLoMiredUp[13], SGainByY000_LvLoMiredUp[14], SGainByY000_LvLoMiredUp[15],
                SGainByY000_LvLoMiredUp[16], SGainByY000_LvLoMiredUp[17], SGainByY000_LvLoMiredUp[18], SGainByY000_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvUpMiredLo[0] , SGainByY000_LvUpMiredLo[1] , SGainByY000_LvUpMiredLo[2] , SGainByY000_LvUpMiredLo[3] ,
                SGainByY000_LvUpMiredLo[4] , SGainByY000_LvUpMiredLo[5] , SGainByY000_LvUpMiredLo[6] , SGainByY000_LvUpMiredLo[7] ,
                SGainByY000_LvUpMiredLo[8] , SGainByY000_LvUpMiredLo[9] , SGainByY000_LvUpMiredLo[10], SGainByY000_LvUpMiredLo[11],
                SGainByY000_LvUpMiredLo[12], SGainByY000_LvUpMiredLo[13], SGainByY000_LvUpMiredLo[14], SGainByY000_LvUpMiredLo[15],
                SGainByY000_LvUpMiredLo[16], SGainByY000_LvUpMiredLo[17], SGainByY000_LvUpMiredLo[18], SGainByY000_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000_LvUpMiredUp[0] , SGainByY000_LvUpMiredUp[1] , SGainByY000_LvUpMiredUp[2] , SGainByY000_LvUpMiredUp[3] ,
                SGainByY000_LvUpMiredUp[4] , SGainByY000_LvUpMiredUp[5] , SGainByY000_LvUpMiredUp[6] , SGainByY000_LvUpMiredUp[7] ,
                SGainByY000_LvUpMiredUp[8] , SGainByY000_LvUpMiredUp[9] , SGainByY000_LvUpMiredUp[10], SGainByY000_LvUpMiredUp[11],
                SGainByY000_LvUpMiredUp[12], SGainByY000_LvUpMiredUp[13], SGainByY000_LvUpMiredUp[14], SGainByY000_LvUpMiredUp[15],
                SGainByY000_LvUpMiredUp[16], SGainByY000_LvUpMiredUp[17], SGainByY000_LvUpMiredUp[18], SGainByY000_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY000[0] , SGainByY000[1] , SGainByY000[2] , SGainByY000[3] ,
                SGainByY000[4] , SGainByY000[5] , SGainByY000[6] , SGainByY000[7] ,
                SGainByY000[8] , SGainByY000[9] , SGainByY000[10], SGainByY000[11],
                SGainByY000[12], SGainByY000[13], SGainByY000[14], SGainByY000[15],
                SGainByY000[16], SGainByY000[17], SGainByY000[18], SGainByY000[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY000 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY000[0] , Final_SGainByY000[1] , Final_SGainByY000[2] , Final_SGainByY000[3] ,
                Final_SGainByY000[4] , Final_SGainByY000[5] , Final_SGainByY000[6] , Final_SGainByY000[7] ,
                Final_SGainByY000[8] , Final_SGainByY000[9] , Final_SGainByY000[10], Final_SGainByY000[11],
                Final_SGainByY000[12], Final_SGainByY000[13], Final_SGainByY000[14], Final_SGainByY000[15],
                Final_SGainByY000[16], Final_SGainByY000[17], Final_SGainByY000[18], Final_SGainByY000[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvLoMiredLo[0] , SGainByY064_LvLoMiredLo[1] , SGainByY064_LvLoMiredLo[2] , SGainByY064_LvLoMiredLo[3] ,
                SGainByY064_LvLoMiredLo[4] , SGainByY064_LvLoMiredLo[5] , SGainByY064_LvLoMiredLo[6] , SGainByY064_LvLoMiredLo[7] ,
                SGainByY064_LvLoMiredLo[8] , SGainByY064_LvLoMiredLo[9] , SGainByY064_LvLoMiredLo[10], SGainByY064_LvLoMiredLo[11],
                SGainByY064_LvLoMiredLo[12], SGainByY064_LvLoMiredLo[13], SGainByY064_LvLoMiredLo[14], SGainByY064_LvLoMiredLo[15],
                SGainByY064_LvLoMiredLo[16], SGainByY064_LvLoMiredLo[17], SGainByY064_LvLoMiredLo[18], SGainByY064_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvLoMiredUp[0] , SGainByY064_LvLoMiredUp[1] , SGainByY064_LvLoMiredUp[2] , SGainByY064_LvLoMiredUp[3] ,
                SGainByY064_LvLoMiredUp[4] , SGainByY064_LvLoMiredUp[5] , SGainByY064_LvLoMiredUp[6] , SGainByY064_LvLoMiredUp[7] ,
                SGainByY064_LvLoMiredUp[8] , SGainByY064_LvLoMiredUp[9] , SGainByY064_LvLoMiredUp[10], SGainByY064_LvLoMiredUp[11],
                SGainByY064_LvLoMiredUp[12], SGainByY064_LvLoMiredUp[13], SGainByY064_LvLoMiredUp[14], SGainByY064_LvLoMiredUp[15],
                SGainByY064_LvLoMiredUp[16], SGainByY064_LvLoMiredUp[17], SGainByY064_LvLoMiredUp[18], SGainByY064_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvUpMiredLo[0] , SGainByY064_LvUpMiredLo[1] , SGainByY064_LvUpMiredLo[2] , SGainByY064_LvUpMiredLo[3] ,
                SGainByY064_LvUpMiredLo[4] , SGainByY064_LvUpMiredLo[5] , SGainByY064_LvUpMiredLo[6] , SGainByY064_LvUpMiredLo[7] ,
                SGainByY064_LvUpMiredLo[8] , SGainByY064_LvUpMiredLo[9] , SGainByY064_LvUpMiredLo[10], SGainByY064_LvUpMiredLo[11],
                SGainByY064_LvUpMiredLo[12], SGainByY064_LvUpMiredLo[13], SGainByY064_LvUpMiredLo[14], SGainByY064_LvUpMiredLo[15],
                SGainByY064_LvUpMiredLo[16], SGainByY064_LvUpMiredLo[17], SGainByY064_LvUpMiredLo[18], SGainByY064_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064_LvUpMiredUp[0] , SGainByY064_LvUpMiredUp[1] , SGainByY064_LvUpMiredUp[2] , SGainByY064_LvUpMiredUp[3] ,
                SGainByY064_LvUpMiredUp[4] , SGainByY064_LvUpMiredUp[5] , SGainByY064_LvUpMiredUp[6] , SGainByY064_LvUpMiredUp[7] ,
                SGainByY064_LvUpMiredUp[8] , SGainByY064_LvUpMiredUp[9] , SGainByY064_LvUpMiredUp[10], SGainByY064_LvUpMiredUp[11],
                SGainByY064_LvUpMiredUp[12], SGainByY064_LvUpMiredUp[13], SGainByY064_LvUpMiredUp[14], SGainByY064_LvUpMiredUp[15],
                SGainByY064_LvUpMiredUp[16], SGainByY064_LvUpMiredUp[17], SGainByY064_LvUpMiredUp[18], SGainByY064_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY064[0] , SGainByY064[1] , SGainByY064[2] , SGainByY064[3] ,
                SGainByY064[4] , SGainByY064[5] , SGainByY064[6] , SGainByY064[7] ,
                SGainByY064[8] , SGainByY064[9] , SGainByY064[10], SGainByY064[11],
                SGainByY064[12], SGainByY064[13], SGainByY064[14], SGainByY064[15],
                SGainByY064[16], SGainByY064[17], SGainByY064[18], SGainByY064[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY064 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY064[0] , Final_SGainByY064[1] , Final_SGainByY064[2] , Final_SGainByY064[3] ,
                Final_SGainByY064[4] , Final_SGainByY064[5] , Final_SGainByY064[6] , Final_SGainByY064[7] ,
                Final_SGainByY064[8] , Final_SGainByY064[9] , Final_SGainByY064[10], Final_SGainByY064[11],
                Final_SGainByY064[12], Final_SGainByY064[13], Final_SGainByY064[14], Final_SGainByY064[15],
                Final_SGainByY064[16], Final_SGainByY064[17], Final_SGainByY064[18], Final_SGainByY064[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvLoMiredLo[0] , SGainByY128_LvLoMiredLo[1] , SGainByY128_LvLoMiredLo[2] , SGainByY128_LvLoMiredLo[3] ,
                SGainByY128_LvLoMiredLo[4] , SGainByY128_LvLoMiredLo[5] , SGainByY128_LvLoMiredLo[6] , SGainByY128_LvLoMiredLo[7] ,
                SGainByY128_LvLoMiredLo[8] , SGainByY128_LvLoMiredLo[9] , SGainByY128_LvLoMiredLo[10], SGainByY128_LvLoMiredLo[11],
                SGainByY128_LvLoMiredLo[12], SGainByY128_LvLoMiredLo[13], SGainByY128_LvLoMiredLo[14], SGainByY128_LvLoMiredLo[15],
                SGainByY128_LvLoMiredLo[16], SGainByY128_LvLoMiredLo[17], SGainByY128_LvLoMiredLo[18], SGainByY128_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvLoMiredUp[0] , SGainByY128_LvLoMiredUp[1] , SGainByY128_LvLoMiredUp[2] , SGainByY128_LvLoMiredUp[3] ,
                SGainByY128_LvLoMiredUp[4] , SGainByY128_LvLoMiredUp[5] , SGainByY128_LvLoMiredUp[6] , SGainByY128_LvLoMiredUp[7] ,
                SGainByY128_LvLoMiredUp[8] , SGainByY128_LvLoMiredUp[9] , SGainByY128_LvLoMiredUp[10], SGainByY128_LvLoMiredUp[11],
                SGainByY128_LvLoMiredUp[12], SGainByY128_LvLoMiredUp[13], SGainByY128_LvLoMiredUp[14], SGainByY128_LvLoMiredUp[15],
                SGainByY128_LvLoMiredUp[16], SGainByY128_LvLoMiredUp[17], SGainByY128_LvLoMiredUp[18], SGainByY128_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvUpMiredLo[0] , SGainByY128_LvUpMiredLo[1] , SGainByY128_LvUpMiredLo[2] , SGainByY128_LvUpMiredLo[3] ,
                SGainByY128_LvUpMiredLo[4] , SGainByY128_LvUpMiredLo[5] , SGainByY128_LvUpMiredLo[6] , SGainByY128_LvUpMiredLo[7] ,
                SGainByY128_LvUpMiredLo[8] , SGainByY128_LvUpMiredLo[9] , SGainByY128_LvUpMiredLo[10], SGainByY128_LvUpMiredLo[11],
                SGainByY128_LvUpMiredLo[12], SGainByY128_LvUpMiredLo[13], SGainByY128_LvUpMiredLo[14], SGainByY128_LvUpMiredLo[15],
                SGainByY128_LvUpMiredLo[16], SGainByY128_LvUpMiredLo[17], SGainByY128_LvUpMiredLo[18], SGainByY128_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128_LvUpMiredUp[0] , SGainByY128_LvUpMiredUp[1] , SGainByY128_LvUpMiredUp[2] , SGainByY128_LvUpMiredUp[3] ,
                SGainByY128_LvUpMiredUp[4] , SGainByY128_LvUpMiredUp[5] , SGainByY128_LvUpMiredUp[6] , SGainByY128_LvUpMiredUp[7] ,
                SGainByY128_LvUpMiredUp[8] , SGainByY128_LvUpMiredUp[9] , SGainByY128_LvUpMiredUp[10], SGainByY128_LvUpMiredUp[11],
                SGainByY128_LvUpMiredUp[12], SGainByY128_LvUpMiredUp[13], SGainByY128_LvUpMiredUp[14], SGainByY128_LvUpMiredUp[15],
                SGainByY128_LvUpMiredUp[16], SGainByY128_LvUpMiredUp[17], SGainByY128_LvUpMiredUp[18], SGainByY128_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY128[0] , SGainByY128[1] , SGainByY128[2] , SGainByY128[3] ,
                SGainByY128[4] , SGainByY128[5] , SGainByY128[6] , SGainByY128[7] ,
                SGainByY128[8] , SGainByY128[9] , SGainByY128[10], SGainByY128[11],
                SGainByY128[12], SGainByY128[13], SGainByY128[14], SGainByY128[15],
                SGainByY128[16], SGainByY128[17], SGainByY128[18], SGainByY128[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY128 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY128[0] , Final_SGainByY128[1] , Final_SGainByY128[2] , Final_SGainByY128[3] ,
                Final_SGainByY128[4] , Final_SGainByY128[5] , Final_SGainByY128[6] , Final_SGainByY128[7] ,
                Final_SGainByY128[8] , Final_SGainByY128[9] , Final_SGainByY128[10], Final_SGainByY128[11],
                Final_SGainByY128[12], Final_SGainByY128[13], Final_SGainByY128[14], Final_SGainByY128[15],
                Final_SGainByY128[16], Final_SGainByY128[17], Final_SGainByY128[18], Final_SGainByY128[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvLoMiredLo[0] , SGainByY192_LvLoMiredLo[1] , SGainByY192_LvLoMiredLo[2] , SGainByY192_LvLoMiredLo[3] ,
                SGainByY192_LvLoMiredLo[4] , SGainByY192_LvLoMiredLo[5] , SGainByY192_LvLoMiredLo[6] , SGainByY192_LvLoMiredLo[7] ,
                SGainByY192_LvLoMiredLo[8] , SGainByY192_LvLoMiredLo[9] , SGainByY192_LvLoMiredLo[10], SGainByY192_LvLoMiredLo[11],
                SGainByY192_LvLoMiredLo[12], SGainByY192_LvLoMiredLo[13], SGainByY192_LvLoMiredLo[14], SGainByY192_LvLoMiredLo[15],
                SGainByY192_LvLoMiredLo[16], SGainByY192_LvLoMiredLo[17], SGainByY192_LvLoMiredLo[18], SGainByY192_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvLoMiredUp[0] , SGainByY192_LvLoMiredUp[1] , SGainByY192_LvLoMiredUp[2] , SGainByY192_LvLoMiredUp[3] ,
                SGainByY192_LvLoMiredUp[4] , SGainByY192_LvLoMiredUp[5] , SGainByY192_LvLoMiredUp[6] , SGainByY192_LvLoMiredUp[7] ,
                SGainByY192_LvLoMiredUp[8] , SGainByY192_LvLoMiredUp[9] , SGainByY192_LvLoMiredUp[10], SGainByY192_LvLoMiredUp[11],
                SGainByY192_LvLoMiredUp[12], SGainByY192_LvLoMiredUp[13], SGainByY192_LvLoMiredUp[14], SGainByY192_LvLoMiredUp[15],
                SGainByY192_LvLoMiredUp[16], SGainByY192_LvLoMiredUp[17], SGainByY192_LvLoMiredUp[18], SGainByY192_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvUpMiredLo[0] , SGainByY192_LvUpMiredLo[1] , SGainByY192_LvUpMiredLo[2] , SGainByY192_LvUpMiredLo[3] ,
                SGainByY192_LvUpMiredLo[4] , SGainByY192_LvUpMiredLo[5] , SGainByY192_LvUpMiredLo[6] , SGainByY192_LvUpMiredLo[7] ,
                SGainByY192_LvUpMiredLo[8] , SGainByY192_LvUpMiredLo[9] , SGainByY192_LvUpMiredLo[10], SGainByY192_LvUpMiredLo[11],
                SGainByY192_LvUpMiredLo[12], SGainByY192_LvUpMiredLo[13], SGainByY192_LvUpMiredLo[14], SGainByY192_LvUpMiredLo[15],
                SGainByY192_LvUpMiredLo[16], SGainByY192_LvUpMiredLo[17], SGainByY192_LvUpMiredLo[18], SGainByY192_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192_LvUpMiredUp[0] , SGainByY192_LvUpMiredUp[1] , SGainByY192_LvUpMiredUp[2] , SGainByY192_LvUpMiredUp[3] ,
                SGainByY192_LvUpMiredUp[4] , SGainByY192_LvUpMiredUp[5] , SGainByY192_LvUpMiredUp[6] , SGainByY192_LvUpMiredUp[7] ,
                SGainByY192_LvUpMiredUp[8] , SGainByY192_LvUpMiredUp[9] , SGainByY192_LvUpMiredUp[10], SGainByY192_LvUpMiredUp[11],
                SGainByY192_LvUpMiredUp[12], SGainByY192_LvUpMiredUp[13], SGainByY192_LvUpMiredUp[14], SGainByY192_LvUpMiredUp[15],
                SGainByY192_LvUpMiredUp[16], SGainByY192_LvUpMiredUp[17], SGainByY192_LvUpMiredUp[18], SGainByY192_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY192[0] , SGainByY192[1] , SGainByY192[2] , SGainByY192[3] ,
                SGainByY192[4] , SGainByY192[5] , SGainByY192[6] , SGainByY192[7] ,
                SGainByY192[8] , SGainByY192[9] , SGainByY192[10], SGainByY192[11],
                SGainByY192[12], SGainByY192[13], SGainByY192[14], SGainByY192[15],
                SGainByY192[16], SGainByY192[17], SGainByY192[18], SGainByY192[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY192 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY192[0] , Final_SGainByY192[1] , Final_SGainByY192[2] , Final_SGainByY192[3] ,
                Final_SGainByY192[4] , Final_SGainByY192[5] , Final_SGainByY192[6] , Final_SGainByY192[7] ,
                Final_SGainByY192[8] , Final_SGainByY192[9] , Final_SGainByY192[10], Final_SGainByY192[11],
                Final_SGainByY192[12], Final_SGainByY192[13], Final_SGainByY192[14], Final_SGainByY192[15],
                Final_SGainByY192[16], Final_SGainByY192[17], Final_SGainByY192[18], Final_SGainByY192[19]);

        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Lower, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvLoMiredLo[0] , SGainByY256_LvLoMiredLo[1] , SGainByY256_LvLoMiredLo[2] , SGainByY256_LvLoMiredLo[3] ,
                SGainByY256_LvLoMiredLo[4] , SGainByY256_LvLoMiredLo[5] , SGainByY256_LvLoMiredLo[6] , SGainByY256_LvLoMiredLo[7] ,
                SGainByY256_LvLoMiredLo[8] , SGainByY256_LvLoMiredLo[9] , SGainByY256_LvLoMiredLo[10], SGainByY256_LvLoMiredLo[11],
                SGainByY256_LvLoMiredLo[12], SGainByY256_LvLoMiredLo[13], SGainByY256_LvLoMiredLo[14], SGainByY256_LvLoMiredLo[15],
                SGainByY256_LvLoMiredLo[16], SGainByY256_LvLoMiredLo[17], SGainByY256_LvLoMiredLo[18], SGainByY256_LvLoMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Lower, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvLoMiredUp[0] , SGainByY256_LvLoMiredUp[1] , SGainByY256_LvLoMiredUp[2] , SGainByY256_LvLoMiredUp[3] ,
                SGainByY256_LvLoMiredUp[4] , SGainByY256_LvLoMiredUp[5] , SGainByY256_LvLoMiredUp[6] , SGainByY256_LvLoMiredUp[7] ,
                SGainByY256_LvLoMiredUp[8] , SGainByY256_LvLoMiredUp[9] , SGainByY256_LvLoMiredUp[10], SGainByY256_LvLoMiredUp[11],
                SGainByY256_LvLoMiredUp[12], SGainByY256_LvLoMiredUp[13], SGainByY256_LvLoMiredUp[14], SGainByY256_LvLoMiredUp[15],
                SGainByY256_LvLoMiredUp[16], SGainByY256_LvLoMiredUp[17], SGainByY256_LvLoMiredUp[18], SGainByY256_LvLoMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Upper, Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvUpMiredLo[0] , SGainByY256_LvUpMiredLo[1] , SGainByY256_LvUpMiredLo[2] , SGainByY256_LvUpMiredLo[3] ,
                SGainByY256_LvUpMiredLo[4] , SGainByY256_LvUpMiredLo[5] , SGainByY256_LvUpMiredLo[6] , SGainByY256_LvUpMiredLo[7] ,
                SGainByY256_LvUpMiredLo[8] , SGainByY256_LvUpMiredLo[9] , SGainByY256_LvUpMiredLo[10], SGainByY256_LvUpMiredLo[11],
                SGainByY256_LvUpMiredLo[12], SGainByY256_LvUpMiredLo[13], SGainByY256_LvUpMiredLo[14], SGainByY256_LvUpMiredLo[15],
                SGainByY256_LvUpMiredLo[16], SGainByY256_LvUpMiredLo[17], SGainByY256_LvUpMiredLo[18], SGainByY256_LvUpMiredLo[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 LV Upper, Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256_LvUpMiredUp[0] , SGainByY256_LvUpMiredUp[1] , SGainByY256_LvUpMiredUp[2] , SGainByY256_LvUpMiredUp[3] ,
                SGainByY256_LvUpMiredUp[4] , SGainByY256_LvUpMiredUp[5] , SGainByY256_LvUpMiredUp[6] , SGainByY256_LvUpMiredUp[7] ,
                SGainByY256_LvUpMiredUp[8] , SGainByY256_LvUpMiredUp[9] , SGainByY256_LvUpMiredUp[10], SGainByY256_LvUpMiredUp[11],
                SGainByY256_LvUpMiredUp[12], SGainByY256_LvUpMiredUp[13], SGainByY256_LvUpMiredUp[14], SGainByY256_LvUpMiredUp[15],
                SGainByY256_LvUpMiredUp[16], SGainByY256_LvUpMiredUp[17], SGainByY256_LvUpMiredUp[18], SGainByY256_LvUpMiredUp[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                SGainByY256[0] , SGainByY256[1] , SGainByY256[2] , SGainByY256[3] ,
                SGainByY256[4] , SGainByY256[5] , SGainByY256[6] , SGainByY256[7] ,
                SGainByY256[8] , SGainByY256[9] , SGainByY256[10], SGainByY256[11],
                SGainByY256[12], SGainByY256[13], SGainByY256[14], SGainByY256[15],
                SGainByY256[16], SGainByY256[17], SGainByY256[18], SGainByY256[19]);
        COLOR_LOG_IF(LVMiredDumpSGainByY, "[%s()] SGainByY256 Final : %03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_SGainByY256[0] , Final_SGainByY256[1] , Final_SGainByY256[2] , Final_SGainByY256[3] ,
                Final_SGainByY256[4] , Final_SGainByY256[5] , Final_SGainByY256[6] , Final_SGainByY256[7] ,
                Final_SGainByY256[8] , Final_SGainByY256[9] , Final_SGainByY256[10], Final_SGainByY256[11],
                Final_SGainByY256[12], Final_SGainByY256[13], Final_SGainByY256[14], Final_SGainByY256[15],
                Final_SGainByY256[16], Final_SGainByY256[17], Final_SGainByY256[18], Final_SGainByY256[19]);

    }
}

MVOID InterParamLSP(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                         ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                         ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                         MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.lvdump.lsp", cLogLevel, "0");
    MINT32 LVMiredDumpLSP = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpLSP, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);

    MUINT32 i;
    MUINT32 LSP1_LvLoMiredLo[4] = {0};
    MUINT32 LSP1_LvLoMiredUp[4] = {0};
    MUINT32 LSP1_LvUpMiredLo[4] = {0};
    MUINT32 LSP1_LvUpMiredUp[4] = {0};
    MUINT32 LSP1[4] = {0};
    MUINT32 Final_LSP1[4] = {0};

    MBOOL   IsCapture    = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32  i4RealLV     = rParam.i4RealLV;
    MINT32  i4UpperLV    = rParam.i4UpperLV;
    MINT32  i4LowerLV    = rParam.i4LowerLV;
    MUINT32 u4Step       = rParam.u4SatStep;


    Final_LSP1[0] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_sth;
    Final_LSP1[1] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_yth;
    Final_LSP1[2] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_sslope;
    Final_LSP1[3] = rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_yslope;

    LSP1_LvLoMiredLo[0] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_lsp_lire_sth;
    LSP1_LvLoMiredLo[1] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_lsp_lire_yth;
    LSP1_LvLoMiredLo[2] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_lsp_lire_sslope;
    LSP1_LvLoMiredLo[3] = rTBL_LV_Lo_CT_Lo.lsp_1.bits.COLOR_lsp_lire_yslope;

    LSP1_LvLoMiredUp[0] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_lsp_lire_sth;
    LSP1_LvLoMiredUp[1] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_lsp_lire_yth;
    LSP1_LvLoMiredUp[2] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_lsp_lire_sslope;
    LSP1_LvLoMiredUp[3] = rTBL_LV_Lo_CT_Up.lsp_1.bits.COLOR_lsp_lire_yslope;

    LSP1_LvUpMiredLo[0] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_lsp_lire_sth;
    LSP1_LvUpMiredLo[1] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_lsp_lire_yth;
    LSP1_LvUpMiredLo[2] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_lsp_lire_sslope;
    LSP1_LvUpMiredLo[3] = rTBL_LV_Up_CT_Lo.lsp_1.bits.COLOR_lsp_lire_yslope;

    LSP1_LvUpMiredUp[0] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_lsp_lire_sth;
    LSP1_LvUpMiredUp[1] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_lsp_lire_yth;
    LSP1_LvUpMiredUp[2] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_lsp_lire_sslope;
    LSP1_LvUpMiredUp[3] = rTBL_LV_Up_CT_Up.lsp_1.bits.COLOR_lsp_lire_yslope;

    for (i = 0; i < (sizeof(LSP1)/sizeof(MUINT32)); i++)
    {
        LSP1[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, LSP1_LvLoMiredLo[i], LSP1_LvLoMiredUp[i], LSP1_LvUpMiredLo[i], LSP1_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_LSP1[i] = LSP1[i];
        else
            Final_LSP1[i] = IIR(Final_LSP1[i], LSP1[i], u4Step);
    }

    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_sth    = Final_LSP1[0];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_yth    = Final_LSP1[1];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_sslope = Final_LSP1[2];
    rSmoothCOLOR_TBL.lsp_1.bits.COLOR_lsp_lire_yslope = Final_LSP1[3];

    // Low saturation protection, Group 2
    MUINT32 LSP2_LvLoMiredLo[4] = {0};
    MUINT32 LSP2_LvLoMiredUp[4] = {0};
    MUINT32 LSP2_LvUpMiredLo[4] = {0};
    MUINT32 LSP2_LvUpMiredUp[4] = {0};
    MUINT32 LSP2[4] = {0};
    MUINT32 Final_LSP2[4] = {0};

    Final_LSP2[0] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_sslope;
    Final_LSP2[1] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_sth;
    Final_LSP2[2] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_gain;
    Final_LSP2[3] = rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lire_gain;

    LSP2_LvLoMiredLo[0] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_sslope;
    LSP2_LvLoMiredLo[1] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_sth;
    LSP2_LvLoMiredLo[2] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_gain;
    LSP2_LvLoMiredLo[3] = rTBL_LV_Lo_CT_Lo.lsp_2.bits.COLOR_lsp_lire_gain;

    LSP2_LvLoMiredUp[0] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_lsp_lsat_sslope;
    LSP2_LvLoMiredUp[1] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_lsp_lsat_sth;
    LSP2_LvLoMiredUp[2] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_lsp_lsat_gain;
    LSP2_LvLoMiredUp[3] = rTBL_LV_Lo_CT_Up.lsp_2.bits.COLOR_lsp_lire_gain;

    LSP2_LvUpMiredLo[0] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_sslope;
    LSP2_LvUpMiredLo[1] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_sth;
    LSP2_LvUpMiredLo[2] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_lsp_lsat_gain;
    LSP2_LvUpMiredLo[3] = rTBL_LV_Up_CT_Lo.lsp_2.bits.COLOR_lsp_lire_gain;

    LSP2_LvUpMiredUp[0] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_lsp_lsat_sslope;
    LSP2_LvUpMiredUp[1] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_lsp_lsat_sth;
    LSP2_LvUpMiredUp[2] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_lsp_lsat_gain;
    LSP2_LvUpMiredUp[3] = rTBL_LV_Up_CT_Up.lsp_2.bits.COLOR_lsp_lire_gain;

    for (i = 0; i < (sizeof(LSP2)/sizeof(MUINT32)); i++)
    {
        LSP2[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, LSP2_LvLoMiredLo[i], LSP2_LvLoMiredUp[i], LSP2_LvUpMiredLo[i], LSP2_LvUpMiredUp[i]);

        if ((IsCapture == MTRUE) || (IIR_EN) == MFALSE)
            Final_LSP2[i] = LSP2[i];
        else
            Final_LSP2[i] = IIR(Final_LSP2[i], LSP2[i], u4Step);
    }

    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_sslope = Final_LSP2[0];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_sth    = Final_LSP2[1];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lsat_gain   = Final_LSP2[2];
    rSmoothCOLOR_TBL.lsp_2.bits.COLOR_lsp_lire_gain   = Final_LSP2[3];

    if (LVMiredDumpLSP == 1)
    {
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Lower, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvLoMiredLo[0] , LSP1_LvLoMiredLo[1] , LSP1_LvLoMiredLo[2] , LSP1_LvLoMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Lower, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvLoMiredUp[0] , LSP1_LvLoMiredUp[1] , LSP1_LvLoMiredUp[2] , LSP1_LvLoMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Upper, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvUpMiredLo[0] , LSP1_LvUpMiredLo[1] , LSP1_LvUpMiredLo[2] , LSP1_LvUpMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 LV Upper, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1_LvUpMiredUp[0] , LSP1_LvUpMiredUp[1] , LSP1_LvUpMiredUp[2] , LSP1_LvUpMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 Target : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP1[0] , LSP1[1] , LSP1[2] , LSP1[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP1 Final  : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_LSP1[0] , Final_LSP1[1] , Final_LSP1[2] , Final_LSP1[3] );


        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Lower, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvLoMiredLo[0] , LSP2_LvLoMiredLo[1] , LSP2_LvLoMiredLo[2] , LSP2_LvLoMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Lower, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvLoMiredUp[0] , LSP2_LvLoMiredUp[1] , LSP2_LvLoMiredUp[2] , LSP2_LvLoMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Upper, Mired Lower : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvUpMiredLo[0] , LSP2_LvUpMiredLo[1] , LSP2_LvUpMiredLo[2] , LSP2_LvUpMiredLo[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 LV Upper, Mired Upper : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2_LvUpMiredUp[0] , LSP2_LvUpMiredUp[1] , LSP2_LvUpMiredUp[2] , LSP2_LvUpMiredUp[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 Target : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                LSP2[0] , LSP2[1] , LSP2[2] , LSP2[3] );
        COLOR_LOG_IF(LVMiredDumpLSP, "[%s()] LSP2 Final  : %03d,%03d,%03d,%03d\n",
                __FUNCTION__,
                Final_LSP2[0] , Final_LSP2[1] , Final_LSP2[2] , Final_LSP2[3] );

    }
}


MVOID InterParam3DLUT(ISP_SMOOTH_COLOR_PARAM_T& rParam,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Lo,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Lo_CT_Up,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Lo,
                      ISP_NVRAM_COLOR_T const& rTBL_LV_Up_CT_Up,
                      ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,
                      MBOOL IIR_EN)
{
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.dump.cm", cLogLevel, "0");
    MINT32 LVMiredDumpCM = ::atoi(cLogLevel);

    COLOR_LOG_IF(LVMiredDumpCM, "[%s()]u4RealMired = %d,   u4UpperMired = %d,   u4LowerMired = %d,   i4RealLV = %d,   i4UpperLV = %d,   i4LowerLV = %d\n",
                        __FUNCTION__, rParam.u4RealMired, rParam.u4UpperMired, rParam.u4LowerMired, rParam.i4RealLV, rParam.i4UpperLV, rParam.i4LowerLV);
    MUINT32  i = 0;
    MBOOL    IsCapture     = (rParam.bIsCapture | rParam.bIsInitial);
    MUINT32 u4RealMired  = rParam.u4RealMired;
    MUINT32 u4UpperMired = rParam.u4UpperMired;
    MUINT32 u4LowerMired = rParam.u4LowerMired;
    MINT32    i4RealLV     = rParam.i4RealLV;
    MINT32    i4UpperLV     = rParam.i4UpperLV;
    MINT32    i4LowerLV     = rParam.i4LowerLV;
    MUINT32 u4HueStep    = rParam.u4HueStep;
    MUINT32 u4SatStep    = rParam.u4SatStep;
    MUINT32 u4LumStep    = rParam.u4LumStep;

    typedef struct _PIECEWISE_LINEAR_CURVE
    {
        MINT32 Input[7];    // Input[i] => HW register POINTi (i=1~5), Input[0]:L, Input[6]:U
        MINT32 Otput[7];    // Otput[i] => not HW register               Input[0]:L, Input[6]:U
        MINT32 Slope[6];    // Slope[i] => HW register SLOPEi (i=0~5)
        MINT32 WgtLS;     // WGT_LSLOPE
        MINT32 WgtUS;     // WGT_USLOPE

    } PIECEWISE_LINEAR_CURVE;

    typedef struct _WINDOW
    {
        PIECEWISE_LINEAR_CURVE H;
        PIECEWISE_LINEAR_CURVE Y;
        PIECEWISE_LINEAR_CURVE S;

    } WINDOW;

    WINDOW W1_LvLoMiredLo = {0};
    WINDOW W1_LvLoMiredUp = {0};
    WINDOW W1_LvUpMiredLo = {0};
    WINDOW W1_LvUpMiredUp = {0};
    WINDOW W1 = {0};
    WINDOW Final_W1 = {0};

    WINDOW W2_LvLoMiredLo = {0};
    WINDOW W2_LvLoMiredUp = {0};
    WINDOW W2_LvUpMiredLo = {0};
    WINDOW W2_LvUpMiredUp = {0};
    WINDOW W2 = {0};
    WINDOW Final_W2 = {0};

    WINDOW W3_LvLoMiredLo = {0};
    WINDOW W3_LvLoMiredUp = {0};
    WINDOW W3_LvUpMiredLo = {0};
    WINDOW W3_LvUpMiredUp = {0};
    WINDOW W3 = {0};
    WINDOW Final_W3 = {0};

    // ISP_NVRAM_COLOR_CM_CONTROL_T => move to InterParam3DLUT outside ?
    // 1. some control register need to force specific value
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w1_ink_en      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w2_ink_en      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w3_ink_en      = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_ink_delta_mode = 0;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_ink_ch         = 0;

    // 2. some control register need to align rTBL_LV_Lo_CT_Lo
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_bypass      = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_bypass;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w1_en       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w1_en;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w1_wgt_en   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w1_wgt_en;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w2_en       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w2_en;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w2_wgt_en   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w2_wgt_en;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w3_en       = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w3_en;
    rSmoothCOLOR_TBL.cm_control.bits.COLOR_cm_w3_wgt_en   = rTBL_LV_Lo_CT_Lo.cm_control.bits.COLOR_cm_w3_wgt_en;

    // Read previous table
    Final_W1.H.Input[0] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_l;
    Final_W1.H.Input[1] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0;
    Final_W1.H.Input[2] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1;
    Final_W1.H.Input[3] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2;
    Final_W1.H.Input[4] = rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3;
    Final_W1.H.Input[5] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4;
    Final_W1.H.Input[6] = rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_u;
    Final_W1.H.Slope[0] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0;
    Final_W1.H.Slope[1] = rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1;
    Final_W1.H.Slope[2] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2;
    Final_W1.H.Slope[3] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3;
    Final_W1.H.Slope[4] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4;
    Final_W1.H.Slope[5] = rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5;
    Final_W1.H.WgtLS    = rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope;
    Final_W1.H.WgtUS    = rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope;
    Final_W1.Y.Input[0] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_l;
    Final_W1.Y.Input[1] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0;
    Final_W1.Y.Input[2] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1;
    Final_W1.Y.Input[3] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2;
    Final_W1.Y.Input[4] = rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3;
    Final_W1.Y.Input[5] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4;
    Final_W1.Y.Input[6] = rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_u;
    Final_W1.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0;
    Final_W1.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1;
    Final_W1.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2;
    Final_W1.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3;
    Final_W1.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4;
    Final_W1.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5;
    Final_W1.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope;
    Final_W1.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope;
    Final_W1.S.Input[0] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_l;
    Final_W1.S.Input[1] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0;
    Final_W1.S.Input[2] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1;
    Final_W1.S.Input[3] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2;
    Final_W1.S.Input[4] = rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3;
    Final_W1.S.Input[5] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4;
    Final_W1.S.Input[6] = rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_u;
    Final_W1.S.Slope[0] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0;
    Final_W1.S.Slope[1] = rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1;
    Final_W1.S.Slope[2] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2;
    Final_W1.S.Slope[3] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3;
    Final_W1.S.Slope[4] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4;
    Final_W1.S.Slope[5] = rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5;
    Final_W1.S.WgtLS    = rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope;
    Final_W1.S.WgtUS    = rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope;
    Final_W2.H.Input[0] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_l;
    Final_W2.H.Input[1] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0;
    Final_W2.H.Input[2] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1;
    Final_W2.H.Input[3] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2;
    Final_W2.H.Input[4] = rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3;
    Final_W2.H.Input[5] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4;
    Final_W2.H.Input[6] = rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_u;
    Final_W2.H.Slope[0] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0;
    Final_W2.H.Slope[1] = rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1;
    Final_W2.H.Slope[2] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2;
    Final_W2.H.Slope[3] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3;
    Final_W2.H.Slope[4] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4;
    Final_W2.H.Slope[5] = rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5;
    Final_W2.H.WgtLS    = rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope;
    Final_W2.H.WgtUS    = rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope;
    Final_W2.Y.Input[0] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_l;
    Final_W2.Y.Input[1] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0;
    Final_W2.Y.Input[2] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1;
    Final_W2.Y.Input[3] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2;
    Final_W2.Y.Input[4] = rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3;
    Final_W2.Y.Input[5] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4;
    Final_W2.Y.Input[6] = rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_u;
    Final_W2.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0;
    Final_W2.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1;
    Final_W2.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2;
    Final_W2.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3;
    Final_W2.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4;
    Final_W2.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5;
    Final_W2.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope;
    Final_W2.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope;
    Final_W2.S.Input[0] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_l;
    Final_W2.S.Input[1] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0;
    Final_W2.S.Input[2] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1;
    Final_W2.S.Input[3] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2;
    Final_W2.S.Input[4] = rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3;
    Final_W2.S.Input[5] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4;
    Final_W2.S.Input[6] = rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_u;
    Final_W2.S.Slope[0] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0;
    Final_W2.S.Slope[1] = rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1;
    Final_W2.S.Slope[2] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2;
    Final_W2.S.Slope[3] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3;
    Final_W2.S.Slope[4] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4;
    Final_W2.S.Slope[5] = rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5;
    Final_W2.S.WgtLS    = rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope;
    Final_W2.S.WgtUS    = rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope;
    Final_W3.H.Input[0] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_l;
    Final_W3.H.Input[1] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0;
    Final_W3.H.Input[2] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1;
    Final_W3.H.Input[3] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2;
    Final_W3.H.Input[4] = rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3;
    Final_W3.H.Input[5] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4;
    Final_W3.H.Input[6] = rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_u;
    Final_W3.H.Slope[0] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0;
    Final_W3.H.Slope[1] = rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1;
    Final_W3.H.Slope[2] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2;
    Final_W3.H.Slope[3] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3;
    Final_W3.H.Slope[4] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4;
    Final_W3.H.Slope[5] = rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5;
    Final_W3.H.WgtLS    = rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope;
    Final_W3.H.WgtUS    = rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope;
    Final_W3.Y.Input[0] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_l;
    Final_W3.Y.Input[1] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0;
    Final_W3.Y.Input[2] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1;
    Final_W3.Y.Input[3] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2;
    Final_W3.Y.Input[4] = rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3;
    Final_W3.Y.Input[5] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4;
    Final_W3.Y.Input[6] = rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_u;
    Final_W3.Y.Slope[0] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0;
    Final_W3.Y.Slope[1] = rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1;
    Final_W3.Y.Slope[2] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2;
    Final_W3.Y.Slope[3] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3;
    Final_W3.Y.Slope[4] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4;
    Final_W3.Y.Slope[5] = rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5;
    Final_W3.Y.WgtLS    = rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope;
    Final_W3.Y.WgtUS    = rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope;
    Final_W3.S.Input[0] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_l;
    Final_W3.S.Input[1] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0;
    Final_W3.S.Input[2] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1;
    Final_W3.S.Input[3] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2;
    Final_W3.S.Input[4] = rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3;
    Final_W3.S.Input[5] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4;
    Final_W3.S.Input[6] = rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_u;
    Final_W3.S.Slope[0] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0;
    Final_W3.S.Slope[1] = rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1;
    Final_W3.S.Slope[2] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2;
    Final_W3.S.Slope[3] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3;
    Final_W3.S.Slope[4] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4;
    Final_W3.S.Slope[5] = rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5;
    Final_W3.S.WgtLS    = rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope;
    Final_W3.S.WgtUS    = rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope;

    // Read Table : LV Lower CT Lower
    W1_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_l;
    W1_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0;
    W1_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1;
    W1_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2;
    W1_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3;
    W1_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4;
    W1_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_u;
    W1_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0;
    W1_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1;
    W1_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2;
    W1_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3;
    W1_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4;
    W1_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5;
    W1_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope;
    W1_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope;
    W1_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_l;
    W1_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0;
    W1_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1;
    W1_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2;
    W1_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3;
    W1_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4;
    W1_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_u;
    W1_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0;
    W1_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1;
    W1_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2;
    W1_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3;
    W1_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4;
    W1_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5;
    W1_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope;
    W1_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope;
    W1_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_l;
    W1_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0;
    W1_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1;
    W1_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2;
    W1_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3;
    W1_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4;
    W1_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_u;
    W1_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0;
    W1_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1;
    W1_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2;
    W1_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3;
    W1_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4;
    W1_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5;
    W1_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope;
    W1_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope;
    W2_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_l;
    W2_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0;
    W2_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1;
    W2_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2;
    W2_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3;
    W2_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4;
    W2_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_u;
    W2_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0;
    W2_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1;
    W2_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2;
    W2_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3;
    W2_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4;
    W2_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5;
    W2_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope;
    W2_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope;
    W2_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_l;
    W2_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0;
    W2_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1;
    W2_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2;
    W2_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3;
    W2_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4;
    W2_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_u;
    W2_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0;
    W2_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1;
    W2_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2;
    W2_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3;
    W2_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4;
    W2_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5;
    W2_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope;
    W2_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope;
    W2_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_l;
    W2_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0;
    W2_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1;
    W2_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2;
    W2_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3;
    W2_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4;
    W2_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_u;
    W2_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0;
    W2_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1;
    W2_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2;
    W2_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3;
    W2_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4;
    W2_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5;
    W2_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope;
    W2_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope;
    W3_LvLoMiredLo.H.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_l;
    W3_LvLoMiredLo.H.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0;
    W3_LvLoMiredLo.H.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1;
    W3_LvLoMiredLo.H.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2;
    W3_LvLoMiredLo.H.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3;
    W3_LvLoMiredLo.H.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4;
    W3_LvLoMiredLo.H.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_u;
    W3_LvLoMiredLo.H.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0;
    W3_LvLoMiredLo.H.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1;
    W3_LvLoMiredLo.H.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2;
    W3_LvLoMiredLo.H.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3;
    W3_LvLoMiredLo.H.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4;
    W3_LvLoMiredLo.H.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5;
    W3_LvLoMiredLo.H.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope;
    W3_LvLoMiredLo.H.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope;
    W3_LvLoMiredLo.Y.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_l;
    W3_LvLoMiredLo.Y.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0;
    W3_LvLoMiredLo.Y.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1;
    W3_LvLoMiredLo.Y.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2;
    W3_LvLoMiredLo.Y.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3;
    W3_LvLoMiredLo.Y.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4;
    W3_LvLoMiredLo.Y.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_u;
    W3_LvLoMiredLo.Y.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0;
    W3_LvLoMiredLo.Y.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1;
    W3_LvLoMiredLo.Y.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2;
    W3_LvLoMiredLo.Y.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3;
    W3_LvLoMiredLo.Y.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4;
    W3_LvLoMiredLo.Y.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5;
    W3_LvLoMiredLo.Y.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope;
    W3_LvLoMiredLo.Y.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope;
    W3_LvLoMiredLo.S.Input[0] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_l;
    W3_LvLoMiredLo.S.Input[1] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0;
    W3_LvLoMiredLo.S.Input[2] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1;
    W3_LvLoMiredLo.S.Input[3] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2;
    W3_LvLoMiredLo.S.Input[4] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3;
    W3_LvLoMiredLo.S.Input[5] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4;
    W3_LvLoMiredLo.S.Input[6] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_u;
    W3_LvLoMiredLo.S.Slope[0] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0;
    W3_LvLoMiredLo.S.Slope[1] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1;
    W3_LvLoMiredLo.S.Slope[2] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2;
    W3_LvLoMiredLo.S.Slope[3] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3;
    W3_LvLoMiredLo.S.Slope[4] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4;
    W3_LvLoMiredLo.S.Slope[5] = rTBL_LV_Lo_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5;
    W3_LvLoMiredLo.S.WgtLS    = rTBL_LV_Lo_CT_Lo.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope;
    W3_LvLoMiredLo.S.WgtUS    = rTBL_LV_Lo_CT_Lo.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope;

    // Read Table : LV Lower CT Upper
    W1_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_l;
    W1_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0;
    W1_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1;
    W1_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2;
    W1_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3;
    W1_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4;
    W1_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_u;
    W1_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0;
    W1_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1;
    W1_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2;
    W1_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3;
    W1_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4;
    W1_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5;
    W1_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope;
    W1_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope;
    W1_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_l;
    W1_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0;
    W1_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1;
    W1_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2;
    W1_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3;
    W1_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4;
    W1_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_u;
    W1_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0;
    W1_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1;
    W1_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2;
    W1_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3;
    W1_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4;
    W1_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5;
    W1_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope;
    W1_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope;
    W1_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_l;
    W1_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0;
    W1_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1;
    W1_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2;
    W1_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3;
    W1_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4;
    W1_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_u;
    W1_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0;
    W1_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1;
    W1_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2;
    W1_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3;
    W1_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4;
    W1_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5;
    W1_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope;
    W1_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope;
    W2_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_l;
    W2_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0;
    W2_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1;
    W2_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2;
    W2_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3;
    W2_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4;
    W2_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_u;
    W2_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0;
    W2_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1;
    W2_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2;
    W2_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3;
    W2_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4;
    W2_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5;
    W2_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope;
    W2_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope;
    W2_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_l;
    W2_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0;
    W2_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1;
    W2_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2;
    W2_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3;
    W2_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4;
    W2_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_u;
    W2_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0;
    W2_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1;
    W2_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2;
    W2_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3;
    W2_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4;
    W2_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5;
    W2_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope;
    W2_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope;
    W2_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_l;
    W2_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0;
    W2_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1;
    W2_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2;
    W2_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3;
    W2_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4;
    W2_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_u;
    W2_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0;
    W2_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1;
    W2_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2;
    W2_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3;
    W2_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4;
    W2_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5;
    W2_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope;
    W2_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope;
    W3_LvLoMiredUp.H.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_l;
    W3_LvLoMiredUp.H.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0;
    W3_LvLoMiredUp.H.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1;
    W3_LvLoMiredUp.H.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2;
    W3_LvLoMiredUp.H.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3;
    W3_LvLoMiredUp.H.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4;
    W3_LvLoMiredUp.H.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_u;
    W3_LvLoMiredUp.H.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0;
    W3_LvLoMiredUp.H.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1;
    W3_LvLoMiredUp.H.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2;
    W3_LvLoMiredUp.H.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3;
    W3_LvLoMiredUp.H.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4;
    W3_LvLoMiredUp.H.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5;
    W3_LvLoMiredUp.H.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope;
    W3_LvLoMiredUp.H.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope;
    W3_LvLoMiredUp.Y.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_l;
    W3_LvLoMiredUp.Y.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0;
    W3_LvLoMiredUp.Y.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1;
    W3_LvLoMiredUp.Y.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2;
    W3_LvLoMiredUp.Y.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3;
    W3_LvLoMiredUp.Y.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4;
    W3_LvLoMiredUp.Y.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_u;
    W3_LvLoMiredUp.Y.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0;
    W3_LvLoMiredUp.Y.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1;
    W3_LvLoMiredUp.Y.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2;
    W3_LvLoMiredUp.Y.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3;
    W3_LvLoMiredUp.Y.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4;
    W3_LvLoMiredUp.Y.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5;
    W3_LvLoMiredUp.Y.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope;
    W3_LvLoMiredUp.Y.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope;
    W3_LvLoMiredUp.S.Input[0] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_l;
    W3_LvLoMiredUp.S.Input[1] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0;
    W3_LvLoMiredUp.S.Input[2] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1;
    W3_LvLoMiredUp.S.Input[3] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2;
    W3_LvLoMiredUp.S.Input[4] = rTBL_LV_Lo_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3;
    W3_LvLoMiredUp.S.Input[5] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4;
    W3_LvLoMiredUp.S.Input[6] = rTBL_LV_Lo_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_u;
    W3_LvLoMiredUp.S.Slope[0] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0;
    W3_LvLoMiredUp.S.Slope[1] = rTBL_LV_Lo_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1;
    W3_LvLoMiredUp.S.Slope[2] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2;
    W3_LvLoMiredUp.S.Slope[3] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3;
    W3_LvLoMiredUp.S.Slope[4] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4;
    W3_LvLoMiredUp.S.Slope[5] = rTBL_LV_Lo_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5;
    W3_LvLoMiredUp.S.WgtLS    = rTBL_LV_Lo_CT_Up.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope;
    W3_LvLoMiredUp.S.WgtUS    = rTBL_LV_Lo_CT_Up.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope;

    // Read Table : LV Upper CT Lower
    W1_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_l;
    W1_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0;
    W1_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1;
    W1_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2;
    W1_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3;
    W1_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4;
    W1_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_hue_0.bits.COLOR_cm_h_w1_u;
    W1_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0;
    W1_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1;
    W1_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2;
    W1_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3;
    W1_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4;
    W1_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5;
    W1_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope;
    W1_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope;
    W1_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_l;
    W1_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0;
    W1_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1;
    W1_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2;
    W1_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3;
    W1_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4;
    W1_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_luma_0.bits.COLOR_cm_y_w1_u;
    W1_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0;
    W1_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1;
    W1_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2;
    W1_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3;
    W1_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4;
    W1_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5;
    W1_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope;
    W1_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope;
    W1_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_l;
    W1_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0;
    W1_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1;
    W1_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2;
    W1_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3;
    W1_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4;
    W1_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w1_sat_0.bits.COLOR_cm_s_w1_u;
    W1_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0;
    W1_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1;
    W1_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2;
    W1_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3;
    W1_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4;
    W1_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5;
    W1_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope;
    W1_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope;
    W2_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_l;
    W2_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0;
    W2_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1;
    W2_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2;
    W2_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3;
    W2_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4;
    W2_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_hue_0.bits.COLOR_cm_h_w2_u;
    W2_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0;
    W2_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1;
    W2_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2;
    W2_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3;
    W2_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4;
    W2_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5;
    W2_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope;
    W2_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope;
    W2_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_l;
    W2_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0;
    W2_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1;
    W2_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2;
    W2_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3;
    W2_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4;
    W2_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_luma_0.bits.COLOR_cm_y_w2_u;
    W2_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0;
    W2_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1;
    W2_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2;
    W2_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3;
    W2_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4;
    W2_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5;
    W2_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope;
    W2_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope;
    W2_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_l;
    W2_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0;
    W2_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1;
    W2_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2;
    W2_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3;
    W2_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4;
    W2_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w2_sat_0.bits.COLOR_cm_s_w2_u;
    W2_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0;
    W2_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1;
    W2_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2;
    W2_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3;
    W2_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4;
    W2_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5;
    W2_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope;
    W2_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope;
    W3_LvUpMiredLo.H.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_l;
    W3_LvUpMiredLo.H.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0;
    W3_LvUpMiredLo.H.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1;
    W3_LvUpMiredLo.H.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2;
    W3_LvUpMiredLo.H.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3;
    W3_LvUpMiredLo.H.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4;
    W3_LvUpMiredLo.H.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_hue_0.bits.COLOR_cm_h_w3_u;
    W3_LvUpMiredLo.H.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0;
    W3_LvUpMiredLo.H.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1;
    W3_LvUpMiredLo.H.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2;
    W3_LvUpMiredLo.H.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3;
    W3_LvUpMiredLo.H.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4;
    W3_LvUpMiredLo.H.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5;
    W3_LvUpMiredLo.H.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope;
    W3_LvUpMiredLo.H.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope;
    W3_LvUpMiredLo.Y.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_l;
    W3_LvUpMiredLo.Y.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0;
    W3_LvUpMiredLo.Y.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1;
    W3_LvUpMiredLo.Y.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2;
    W3_LvUpMiredLo.Y.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3;
    W3_LvUpMiredLo.Y.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4;
    W3_LvUpMiredLo.Y.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_luma_0.bits.COLOR_cm_y_w3_u;
    W3_LvUpMiredLo.Y.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0;
    W3_LvUpMiredLo.Y.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1;
    W3_LvUpMiredLo.Y.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2;
    W3_LvUpMiredLo.Y.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3;
    W3_LvUpMiredLo.Y.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4;
    W3_LvUpMiredLo.Y.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5;
    W3_LvUpMiredLo.Y.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope;
    W3_LvUpMiredLo.Y.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope;
    W3_LvUpMiredLo.S.Input[0] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_l;
    W3_LvUpMiredLo.S.Input[1] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0;
    W3_LvUpMiredLo.S.Input[2] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1;
    W3_LvUpMiredLo.S.Input[3] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2;
    W3_LvUpMiredLo.S.Input[4] = rTBL_LV_Up_CT_Lo.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3;
    W3_LvUpMiredLo.S.Input[5] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4;
    W3_LvUpMiredLo.S.Input[6] = rTBL_LV_Up_CT_Lo.cm_w3_sat_0.bits.COLOR_cm_s_w3_u;
    W3_LvUpMiredLo.S.Slope[0] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0;
    W3_LvUpMiredLo.S.Slope[1] = rTBL_LV_Up_CT_Lo.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1;
    W3_LvUpMiredLo.S.Slope[2] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2;
    W3_LvUpMiredLo.S.Slope[3] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3;
    W3_LvUpMiredLo.S.Slope[4] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4;
    W3_LvUpMiredLo.S.Slope[5] = rTBL_LV_Up_CT_Lo.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5;
    W3_LvUpMiredLo.S.WgtLS    = rTBL_LV_Up_CT_Lo.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope;
    W3_LvUpMiredLo.S.WgtUS    = rTBL_LV_Up_CT_Lo.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope;

    // Read Table : LV Upper CT Upper
    W1_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_l;
    W1_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0;
    W1_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1;
    W1_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2;
    W1_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3;
    W1_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4;
    W1_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_hue_0.bits.COLOR_cm_h_w1_u;
    W1_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0;
    W1_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1;
    W1_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2;
    W1_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3;
    W1_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4;
    W1_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5;
    W1_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope;
    W1_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope;
    W1_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_l;
    W1_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0;
    W1_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1;
    W1_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2;
    W1_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3;
    W1_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4;
    W1_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_luma_0.bits.COLOR_cm_y_w1_u;
    W1_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0;
    W1_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1;
    W1_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2;
    W1_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3;
    W1_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4;
    W1_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5;
    W1_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope;
    W1_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope;
    W1_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_l;
    W1_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0;
    W1_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1;
    W1_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2;
    W1_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3;
    W1_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4;
    W1_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w1_sat_0.bits.COLOR_cm_s_w1_u;
    W1_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0;
    W1_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1;
    W1_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2;
    W1_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3;
    W1_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4;
    W1_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5;
    W1_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope;
    W1_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope;
    W2_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_l;
    W2_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0;
    W2_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1;
    W2_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2;
    W2_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3;
    W2_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4;
    W2_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_hue_0.bits.COLOR_cm_h_w2_u;
    W2_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0;
    W2_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1;
    W2_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2;
    W2_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3;
    W2_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4;
    W2_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5;
    W2_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope;
    W2_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope;
    W2_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_l;
    W2_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0;
    W2_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1;
    W2_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2;
    W2_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3;
    W2_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4;
    W2_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_luma_0.bits.COLOR_cm_y_w2_u;
    W2_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0;
    W2_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1;
    W2_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2;
    W2_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3;
    W2_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4;
    W2_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5;
    W2_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope;
    W2_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope;
    W2_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_l;
    W2_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0;
    W2_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1;
    W2_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2;
    W2_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3;
    W2_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4;
    W2_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w2_sat_0.bits.COLOR_cm_s_w2_u;
    W2_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0;
    W2_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1;
    W2_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2;
    W2_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3;
    W2_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4;
    W2_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5;
    W2_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope;
    W2_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope;
    W3_LvUpMiredUp.H.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_l;
    W3_LvUpMiredUp.H.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0;
    W3_LvUpMiredUp.H.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1;
    W3_LvUpMiredUp.H.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2;
    W3_LvUpMiredUp.H.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3;
    W3_LvUpMiredUp.H.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4;
    W3_LvUpMiredUp.H.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_hue_0.bits.COLOR_cm_h_w3_u;
    W3_LvUpMiredUp.H.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0;
    W3_LvUpMiredUp.H.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1;
    W3_LvUpMiredUp.H.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2;
    W3_LvUpMiredUp.H.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3;
    W3_LvUpMiredUp.H.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4;
    W3_LvUpMiredUp.H.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5;
    W3_LvUpMiredUp.H.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope;
    W3_LvUpMiredUp.H.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope;
    W3_LvUpMiredUp.Y.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_l;
    W3_LvUpMiredUp.Y.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0;
    W3_LvUpMiredUp.Y.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1;
    W3_LvUpMiredUp.Y.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2;
    W3_LvUpMiredUp.Y.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3;
    W3_LvUpMiredUp.Y.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4;
    W3_LvUpMiredUp.Y.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_luma_0.bits.COLOR_cm_y_w3_u;
    W3_LvUpMiredUp.Y.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0;
    W3_LvUpMiredUp.Y.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1;
    W3_LvUpMiredUp.Y.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2;
    W3_LvUpMiredUp.Y.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3;
    W3_LvUpMiredUp.Y.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4;
    W3_LvUpMiredUp.Y.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5;
    W3_LvUpMiredUp.Y.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope;
    W3_LvUpMiredUp.Y.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope;
    W3_LvUpMiredUp.S.Input[0] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_l;
    W3_LvUpMiredUp.S.Input[1] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0;
    W3_LvUpMiredUp.S.Input[2] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1;
    W3_LvUpMiredUp.S.Input[3] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2;
    W3_LvUpMiredUp.S.Input[4] = rTBL_LV_Up_CT_Up.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3;
    W3_LvUpMiredUp.S.Input[5] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4;
    W3_LvUpMiredUp.S.Input[6] = rTBL_LV_Up_CT_Up.cm_w3_sat_0.bits.COLOR_cm_s_w3_u;
    W3_LvUpMiredUp.S.Slope[0] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0;
    W3_LvUpMiredUp.S.Slope[1] = rTBL_LV_Up_CT_Up.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1;
    W3_LvUpMiredUp.S.Slope[2] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2;
    W3_LvUpMiredUp.S.Slope[3] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3;
    W3_LvUpMiredUp.S.Slope[4] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4;
    W3_LvUpMiredUp.S.Slope[5] = rTBL_LV_Up_CT_Up.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5;
    W3_LvUpMiredUp.S.WgtLS    = rTBL_LV_Up_CT_Up.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope;
    W3_LvUpMiredUp.S.WgtUS    = rTBL_LV_Up_CT_Up.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope;

    // W1/W2/W3 H/Y/S WgtLS Interpolation
    W1.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.WgtLS, W1_LvLoMiredUp.H.WgtLS, W1_LvUpMiredLo.H.WgtLS, W1_LvUpMiredUp.H.WgtLS);
    W1.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.WgtLS, W1_LvLoMiredUp.Y.WgtLS, W1_LvUpMiredLo.Y.WgtLS, W1_LvUpMiredUp.Y.WgtLS);
    W1.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.WgtLS, W1_LvLoMiredUp.S.WgtLS, W1_LvUpMiredLo.S.WgtLS, W1_LvUpMiredUp.S.WgtLS);
    W2.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.WgtLS, W2_LvLoMiredUp.H.WgtLS, W2_LvUpMiredLo.H.WgtLS, W2_LvUpMiredUp.H.WgtLS);
    W2.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.WgtLS, W2_LvLoMiredUp.Y.WgtLS, W2_LvUpMiredLo.Y.WgtLS, W2_LvUpMiredUp.Y.WgtLS);
    W2.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.WgtLS, W2_LvLoMiredUp.S.WgtLS, W2_LvUpMiredLo.S.WgtLS, W2_LvUpMiredUp.S.WgtLS);
    W3.H.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.WgtLS, W3_LvLoMiredUp.H.WgtLS, W3_LvUpMiredLo.H.WgtLS, W3_LvUpMiredUp.H.WgtLS);
    W3.Y.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.WgtLS, W3_LvLoMiredUp.Y.WgtLS, W3_LvUpMiredLo.Y.WgtLS, W3_LvUpMiredUp.Y.WgtLS);
    W3.S.WgtLS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.WgtLS, W3_LvLoMiredUp.S.WgtLS, W3_LvUpMiredLo.S.WgtLS, W3_LvUpMiredUp.S.WgtLS);

    // W1/W2/W3 H/Y/S WgtUS Interpolation
    W1.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.WgtUS, W1_LvLoMiredUp.H.WgtUS, W1_LvUpMiredLo.H.WgtUS, W1_LvUpMiredUp.H.WgtUS);
    W1.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.WgtUS, W1_LvLoMiredUp.Y.WgtUS, W1_LvUpMiredLo.Y.WgtUS, W1_LvUpMiredUp.Y.WgtUS);
    W1.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.WgtUS, W1_LvLoMiredUp.S.WgtUS, W1_LvUpMiredLo.S.WgtUS, W1_LvUpMiredUp.S.WgtUS);
    W2.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.WgtUS, W2_LvLoMiredUp.H.WgtUS, W2_LvUpMiredLo.H.WgtUS, W2_LvUpMiredUp.H.WgtUS);
    W2.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.WgtUS, W2_LvLoMiredUp.Y.WgtUS, W2_LvUpMiredLo.Y.WgtUS, W2_LvUpMiredUp.Y.WgtUS);
    W2.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.WgtUS, W2_LvLoMiredUp.S.WgtUS, W2_LvUpMiredLo.S.WgtUS, W2_LvUpMiredUp.S.WgtUS);
    W3.H.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.WgtUS, W3_LvLoMiredUp.H.WgtUS, W3_LvUpMiredLo.H.WgtUS, W3_LvUpMiredUp.H.WgtUS);
    W3.Y.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.WgtUS, W3_LvLoMiredUp.Y.WgtUS, W3_LvUpMiredLo.Y.WgtUS, W3_LvUpMiredUp.Y.WgtUS);
    W3.S.WgtUS = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.WgtUS, W3_LvLoMiredUp.S.WgtUS, W3_LvUpMiredLo.S.WgtUS, W3_LvUpMiredUp.S.WgtUS);

    // W1/W2/W3 H/Y/S Input[i] i=0~6 Interpolation
    for (i = 0; i < 7; i++)
    {
        W1.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.Input[i], W1_LvLoMiredUp.H.Input[i], W1_LvUpMiredLo.H.Input[i], W1_LvUpMiredUp.H.Input[i]);
        W1.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.Input[i], W1_LvLoMiredUp.Y.Input[i], W1_LvUpMiredLo.Y.Input[i], W1_LvUpMiredUp.Y.Input[i]);
        W1.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.Input[i], W1_LvLoMiredUp.S.Input[i], W1_LvUpMiredLo.S.Input[i], W1_LvUpMiredUp.S.Input[i]);
        W2.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.Input[i], W2_LvLoMiredUp.H.Input[i], W2_LvUpMiredLo.H.Input[i], W2_LvUpMiredUp.H.Input[i]);
        W2.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.Input[i], W2_LvLoMiredUp.Y.Input[i], W2_LvUpMiredLo.Y.Input[i], W2_LvUpMiredUp.Y.Input[i]);
        W2.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.Input[i], W2_LvLoMiredUp.S.Input[i], W2_LvUpMiredLo.S.Input[i], W2_LvUpMiredUp.S.Input[i]);
        W3.H.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.Input[i], W3_LvLoMiredUp.H.Input[i], W3_LvUpMiredLo.H.Input[i], W3_LvUpMiredUp.H.Input[i]);
        W3.Y.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.Input[i], W3_LvLoMiredUp.Y.Input[i], W3_LvUpMiredLo.Y.Input[i], W3_LvUpMiredUp.Y.Input[i]);
        W3.S.Input[i] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.Input[i], W3_LvLoMiredUp.S.Input[i], W3_LvUpMiredLo.S.Input[i], W3_LvUpMiredUp.S.Input[i]);
    }

    // fix start point
	W1_LvLoMiredLo.H.Otput[0] =  W1_LvLoMiredLo.H.Input[0];
	W1_LvLoMiredLo.Y.Otput[0] =  W1_LvLoMiredLo.Y.Input[0];
	W1_LvLoMiredLo.S.Otput[0] =  W1_LvLoMiredLo.S.Input[0];
	W2_LvLoMiredLo.H.Otput[0] =  W2_LvLoMiredLo.H.Input[0];
	W2_LvLoMiredLo.Y.Otput[0] =  W2_LvLoMiredLo.Y.Input[0];
	W2_LvLoMiredLo.S.Otput[0] =  W2_LvLoMiredLo.S.Input[0];
	W3_LvLoMiredLo.H.Otput[0] =  W3_LvLoMiredLo.H.Input[0];
	W3_LvLoMiredLo.Y.Otput[0] =  W3_LvLoMiredLo.Y.Input[0];
	W3_LvLoMiredLo.S.Otput[0] =  W3_LvLoMiredLo.S.Input[0];

	W1_LvLoMiredUp.H.Otput[0] =  W1_LvLoMiredUp.H.Input[0];
	W1_LvLoMiredUp.Y.Otput[0] =  W1_LvLoMiredUp.Y.Input[0];
	W1_LvLoMiredUp.S.Otput[0] =  W1_LvLoMiredUp.S.Input[0];
	W2_LvLoMiredUp.H.Otput[0] =  W2_LvLoMiredUp.H.Input[0];
	W2_LvLoMiredUp.Y.Otput[0] =  W2_LvLoMiredUp.Y.Input[0];
	W2_LvLoMiredUp.S.Otput[0] =  W2_LvLoMiredUp.S.Input[0];
	W3_LvLoMiredUp.H.Otput[0] =  W3_LvLoMiredUp.H.Input[0];
	W3_LvLoMiredUp.Y.Otput[0] =  W3_LvLoMiredUp.Y.Input[0];
	W3_LvLoMiredUp.S.Otput[0] =  W3_LvLoMiredUp.S.Input[0];

	W1_LvUpMiredLo.H.Otput[0] =  W1_LvUpMiredLo.H.Input[0];
	W1_LvUpMiredLo.Y.Otput[0] =  W1_LvUpMiredLo.Y.Input[0];
	W1_LvUpMiredLo.S.Otput[0] =  W1_LvUpMiredLo.S.Input[0];
	W2_LvUpMiredLo.H.Otput[0] =  W2_LvUpMiredLo.H.Input[0];
	W2_LvUpMiredLo.Y.Otput[0] =  W2_LvUpMiredLo.Y.Input[0];
	W2_LvUpMiredLo.S.Otput[0] =  W2_LvUpMiredLo.S.Input[0];
	W3_LvUpMiredLo.H.Otput[0] =  W3_LvUpMiredLo.H.Input[0];
	W3_LvUpMiredLo.Y.Otput[0] =  W3_LvUpMiredLo.Y.Input[0];
	W3_LvUpMiredLo.S.Otput[0] =  W3_LvUpMiredLo.S.Input[0];

	W1_LvUpMiredUp.H.Otput[0] =  W1_LvUpMiredUp.H.Input[0];
	W1_LvUpMiredUp.Y.Otput[0] =  W1_LvUpMiredUp.Y.Input[0];
	W1_LvUpMiredUp.S.Otput[0] =  W1_LvUpMiredUp.S.Input[0];
	W2_LvUpMiredUp.H.Otput[0] =  W2_LvUpMiredUp.H.Input[0];
	W2_LvUpMiredUp.Y.Otput[0] =  W2_LvUpMiredUp.Y.Input[0];
	W2_LvUpMiredUp.S.Otput[0] =  W2_LvUpMiredUp.S.Input[0];
	W3_LvUpMiredUp.H.Otput[0] =  W3_LvUpMiredUp.H.Input[0];
	W3_LvUpMiredUp.Y.Otput[0] =  W3_LvUpMiredUp.Y.Input[0];
	W3_LvUpMiredUp.S.Otput[0] =  W3_LvUpMiredUp.S.Input[0];

    W1.H.Otput[0] = W1.H.Input[0];
    W1.Y.Otput[0] = W1.Y.Input[0];
    W1.S.Otput[0] = W1.S.Input[0];
    W2.H.Otput[0] = W2.H.Input[0];
    W2.Y.Otput[0] = W2.Y.Input[0];
    W2.S.Otput[0] = W2.S.Input[0];
    W3.H.Otput[0] = W3.H.Input[0];
    W3.Y.Otput[0] = W3.Y.Input[0];
    W3.S.Otput[0] = W3.S.Input[0];

    // fix end point
	W1_LvLoMiredLo.H.Otput[6] =  W1_LvLoMiredLo.H.Input[6];
	W1_LvLoMiredLo.Y.Otput[6] =  W1_LvLoMiredLo.Y.Input[6];
	W1_LvLoMiredLo.S.Otput[6] =  W1_LvLoMiredLo.S.Input[6];
	W2_LvLoMiredLo.H.Otput[6] =  W2_LvLoMiredLo.H.Input[6];
	W2_LvLoMiredLo.Y.Otput[6] =  W2_LvLoMiredLo.Y.Input[6];
	W2_LvLoMiredLo.S.Otput[6] =  W2_LvLoMiredLo.S.Input[6];
	W3_LvLoMiredLo.H.Otput[6] =  W3_LvLoMiredLo.H.Input[6];
	W3_LvLoMiredLo.Y.Otput[6] =  W3_LvLoMiredLo.Y.Input[6];
	W3_LvLoMiredLo.S.Otput[6] =  W3_LvLoMiredLo.S.Input[6];

	W1_LvLoMiredUp.H.Otput[6] =  W1_LvLoMiredUp.H.Input[6];
	W1_LvLoMiredUp.Y.Otput[6] =  W1_LvLoMiredUp.Y.Input[6];
	W1_LvLoMiredUp.S.Otput[6] =  W1_LvLoMiredUp.S.Input[6];
	W2_LvLoMiredUp.H.Otput[6] =  W2_LvLoMiredUp.H.Input[6];
	W2_LvLoMiredUp.Y.Otput[6] =  W2_LvLoMiredUp.Y.Input[6];
	W2_LvLoMiredUp.S.Otput[6] =  W2_LvLoMiredUp.S.Input[6];
	W3_LvLoMiredUp.H.Otput[6] =  W3_LvLoMiredUp.H.Input[6];
	W3_LvLoMiredUp.Y.Otput[6] =  W3_LvLoMiredUp.Y.Input[6];
	W3_LvLoMiredUp.S.Otput[6] =  W3_LvLoMiredUp.S.Input[6];

	W1_LvUpMiredLo.H.Otput[6] =  W1_LvUpMiredLo.H.Input[6];
	W1_LvUpMiredLo.Y.Otput[6] =  W1_LvUpMiredLo.Y.Input[6];
	W1_LvUpMiredLo.S.Otput[6] =  W1_LvUpMiredLo.S.Input[6];
	W2_LvUpMiredLo.H.Otput[6] =  W2_LvUpMiredLo.H.Input[6];
	W2_LvUpMiredLo.Y.Otput[6] =  W2_LvUpMiredLo.Y.Input[6];
	W2_LvUpMiredLo.S.Otput[6] =  W2_LvUpMiredLo.S.Input[6];
	W3_LvUpMiredLo.H.Otput[6] =  W3_LvUpMiredLo.H.Input[6];
	W3_LvUpMiredLo.Y.Otput[6] =  W3_LvUpMiredLo.Y.Input[6];
	W3_LvUpMiredLo.S.Otput[6] =  W3_LvUpMiredLo.S.Input[6];

	W1_LvUpMiredUp.H.Otput[6] =  W1_LvUpMiredUp.H.Input[6];
	W1_LvUpMiredUp.Y.Otput[6] =  W1_LvUpMiredUp.Y.Input[6];
	W1_LvUpMiredUp.S.Otput[6] =  W1_LvUpMiredUp.S.Input[6];
	W2_LvUpMiredUp.H.Otput[6] =  W2_LvUpMiredUp.H.Input[6];
	W2_LvUpMiredUp.Y.Otput[6] =  W2_LvUpMiredUp.Y.Input[6];
	W2_LvUpMiredUp.S.Otput[6] =  W2_LvUpMiredUp.S.Input[6];
	W3_LvUpMiredUp.H.Otput[6] =  W3_LvUpMiredUp.H.Input[6];
	W3_LvUpMiredUp.Y.Otput[6] =  W3_LvUpMiredUp.Y.Input[6];
	W3_LvUpMiredUp.S.Otput[6] =  W3_LvUpMiredUp.S.Input[6];

    W1.H.Otput[6] = W1.H.Input[6];
    W1.Y.Otput[6] = W1.Y.Input[6];
    W1.S.Otput[6] = W1.S.Input[6];
    W2.H.Otput[6] = W2.H.Input[6];
    W2.Y.Otput[6] = W2.Y.Input[6];
    W2.S.Otput[6] = W2.S.Input[6];
    W3.H.Otput[6] = W3.H.Input[6];
    W3.Y.Otput[6] = W3.Y.Input[6];
    W3.S.Otput[6] = W3.S.Input[6];

    // Get W1/W2/W3 H/Y/S Otput[i] i=1~5
    for (i = 0; i < 5; i++)
    {
        // get 4 Otput[i] i=1~5 from Otput[i+1] = Otput[i] + (Input[i+1]-Input[i])*Slope[i]/128, then interpolate unique Otput[i] i=1~5
        W1_LvLoMiredLo.H.Otput[i+1] = W1_LvLoMiredLo.H.Otput[i] + (((W1_LvLoMiredLo.H.Input[i+1] - W1_LvLoMiredLo.H.Input[i])*W1_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W1_LvLoMiredLo.Y.Otput[i+1] = W1_LvLoMiredLo.Y.Otput[i] + (((W1_LvLoMiredLo.Y.Input[i+1] - W1_LvLoMiredLo.Y.Input[i])*W1_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W1_LvLoMiredLo.S.Otput[i+1] = W1_LvLoMiredLo.S.Otput[i] + (((W1_LvLoMiredLo.S.Input[i+1] - W1_LvLoMiredLo.S.Input[i])*W1_LvLoMiredLo.S.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.H.Otput[i+1] = W2_LvLoMiredLo.H.Otput[i] + (((W2_LvLoMiredLo.H.Input[i+1] - W2_LvLoMiredLo.H.Input[i])*W2_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.Y.Otput[i+1] = W2_LvLoMiredLo.Y.Otput[i] + (((W2_LvLoMiredLo.Y.Input[i+1] - W2_LvLoMiredLo.Y.Input[i])*W2_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W2_LvLoMiredLo.S.Otput[i+1] = W2_LvLoMiredLo.S.Otput[i] + (((W2_LvLoMiredLo.S.Input[i+1] - W2_LvLoMiredLo.S.Input[i])*W2_LvLoMiredLo.S.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.H.Otput[i+1] = W3_LvLoMiredLo.H.Otput[i] + (((W3_LvLoMiredLo.H.Input[i+1] - W3_LvLoMiredLo.H.Input[i])*W3_LvLoMiredLo.H.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.Y.Otput[i+1] = W3_LvLoMiredLo.Y.Otput[i] + (((W3_LvLoMiredLo.Y.Input[i+1] - W3_LvLoMiredLo.Y.Input[i])*W3_LvLoMiredLo.Y.Slope[i] + 64) >> 7);
        W3_LvLoMiredLo.S.Otput[i+1] = W3_LvLoMiredLo.S.Otput[i] + (((W3_LvLoMiredLo.S.Input[i+1] - W3_LvLoMiredLo.S.Input[i])*W3_LvLoMiredLo.S.Slope[i] + 64) >> 7);

        W1_LvLoMiredUp.H.Otput[i+1] = W1_LvLoMiredUp.H.Otput[i] + (((W1_LvLoMiredUp.H.Input[i+1] - W1_LvLoMiredUp.H.Input[i])*W1_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W1_LvLoMiredUp.Y.Otput[i+1] = W1_LvLoMiredUp.Y.Otput[i] + (((W1_LvLoMiredUp.Y.Input[i+1] - W1_LvLoMiredUp.Y.Input[i])*W1_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W1_LvLoMiredUp.S.Otput[i+1] = W1_LvLoMiredUp.S.Otput[i] + (((W1_LvLoMiredUp.S.Input[i+1] - W1_LvLoMiredUp.S.Input[i])*W1_LvLoMiredUp.S.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.H.Otput[i+1] = W2_LvLoMiredUp.H.Otput[i] + (((W2_LvLoMiredUp.H.Input[i+1] - W2_LvLoMiredUp.H.Input[i])*W2_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.Y.Otput[i+1] = W2_LvLoMiredUp.Y.Otput[i] + (((W2_LvLoMiredUp.Y.Input[i+1] - W2_LvLoMiredUp.Y.Input[i])*W2_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W2_LvLoMiredUp.S.Otput[i+1] = W2_LvLoMiredUp.S.Otput[i] + (((W2_LvLoMiredUp.S.Input[i+1] - W2_LvLoMiredUp.S.Input[i])*W2_LvLoMiredUp.S.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.H.Otput[i+1] = W3_LvLoMiredUp.H.Otput[i] + (((W3_LvLoMiredUp.H.Input[i+1] - W3_LvLoMiredUp.H.Input[i])*W3_LvLoMiredUp.H.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.Y.Otput[i+1] = W3_LvLoMiredUp.Y.Otput[i] + (((W3_LvLoMiredUp.Y.Input[i+1] - W3_LvLoMiredUp.Y.Input[i])*W3_LvLoMiredUp.Y.Slope[i] + 64) >> 7);
        W3_LvLoMiredUp.S.Otput[i+1] = W3_LvLoMiredUp.S.Otput[i] + (((W3_LvLoMiredUp.S.Input[i+1] - W3_LvLoMiredUp.S.Input[i])*W3_LvLoMiredUp.S.Slope[i] + 64) >> 7);

        W1_LvUpMiredLo.H.Otput[i+1] = W1_LvUpMiredLo.H.Otput[i] + (((W1_LvUpMiredLo.H.Input[i+1] - W1_LvUpMiredLo.H.Input[i])*W1_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W1_LvUpMiredLo.Y.Otput[i+1] = W1_LvUpMiredLo.Y.Otput[i] + (((W1_LvUpMiredLo.Y.Input[i+1] - W1_LvUpMiredLo.Y.Input[i])*W1_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W1_LvUpMiredLo.S.Otput[i+1] = W1_LvUpMiredLo.S.Otput[i] + (((W1_LvUpMiredLo.S.Input[i+1] - W1_LvUpMiredLo.S.Input[i])*W1_LvUpMiredLo.S.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.H.Otput[i+1] = W2_LvUpMiredLo.H.Otput[i] + (((W2_LvUpMiredLo.H.Input[i+1] - W2_LvUpMiredLo.H.Input[i])*W2_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.Y.Otput[i+1] = W2_LvUpMiredLo.Y.Otput[i] + (((W2_LvUpMiredLo.Y.Input[i+1] - W2_LvUpMiredLo.Y.Input[i])*W2_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W2_LvUpMiredLo.S.Otput[i+1] = W2_LvUpMiredLo.S.Otput[i] + (((W2_LvUpMiredLo.S.Input[i+1] - W2_LvUpMiredLo.S.Input[i])*W2_LvUpMiredLo.S.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.H.Otput[i+1] = W3_LvUpMiredLo.H.Otput[i] + (((W3_LvUpMiredLo.H.Input[i+1] - W3_LvUpMiredLo.H.Input[i])*W3_LvUpMiredLo.H.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.Y.Otput[i+1] = W3_LvUpMiredLo.Y.Otput[i] + (((W3_LvUpMiredLo.Y.Input[i+1] - W3_LvUpMiredLo.Y.Input[i])*W3_LvUpMiredLo.Y.Slope[i] + 64) >> 7);
        W3_LvUpMiredLo.S.Otput[i+1] = W3_LvUpMiredLo.S.Otput[i] + (((W3_LvUpMiredLo.S.Input[i+1] - W3_LvUpMiredLo.S.Input[i])*W3_LvUpMiredLo.S.Slope[i] + 64) >> 7);

        W1_LvUpMiredUp.H.Otput[i+1] = W1_LvUpMiredUp.H.Otput[i] + (((W1_LvUpMiredUp.H.Input[i+1] - W1_LvUpMiredUp.H.Input[i])*W1_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W1_LvUpMiredUp.Y.Otput[i+1] = W1_LvUpMiredUp.Y.Otput[i] + (((W1_LvUpMiredUp.Y.Input[i+1] - W1_LvUpMiredUp.Y.Input[i])*W1_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W1_LvUpMiredUp.S.Otput[i+1] = W1_LvUpMiredUp.S.Otput[i] + (((W1_LvUpMiredUp.S.Input[i+1] - W1_LvUpMiredUp.S.Input[i])*W1_LvUpMiredUp.S.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.H.Otput[i+1] = W2_LvUpMiredUp.H.Otput[i] + (((W2_LvUpMiredUp.H.Input[i+1] - W2_LvUpMiredUp.H.Input[i])*W2_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.Y.Otput[i+1] = W2_LvUpMiredUp.Y.Otput[i] + (((W2_LvUpMiredUp.Y.Input[i+1] - W2_LvUpMiredUp.Y.Input[i])*W2_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W2_LvUpMiredUp.S.Otput[i+1] = W2_LvUpMiredUp.S.Otput[i] + (((W2_LvUpMiredUp.S.Input[i+1] - W2_LvUpMiredUp.S.Input[i])*W2_LvUpMiredUp.S.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.H.Otput[i+1] = W3_LvUpMiredUp.H.Otput[i] + (((W3_LvUpMiredUp.H.Input[i+1] - W3_LvUpMiredUp.H.Input[i])*W3_LvUpMiredUp.H.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.Y.Otput[i+1] = W3_LvUpMiredUp.Y.Otput[i] + (((W3_LvUpMiredUp.Y.Input[i+1] - W3_LvUpMiredUp.Y.Input[i])*W3_LvUpMiredUp.Y.Slope[i] + 64) >> 7);
        W3_LvUpMiredUp.S.Otput[i+1] = W3_LvUpMiredUp.S.Otput[i] + (((W3_LvUpMiredUp.S.Input[i+1] - W3_LvUpMiredUp.S.Input[i])*W3_LvUpMiredUp.S.Slope[i] + 64) >> 7);

        W1.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.H.Otput[i+1], W1_LvLoMiredUp.H.Otput[i+1], W1_LvUpMiredLo.H.Otput[i+1], W1_LvUpMiredUp.H.Otput[i+1]);
        W1.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.Y.Otput[i+1], W1_LvLoMiredUp.Y.Otput[i+1], W1_LvUpMiredLo.Y.Otput[i+1], W1_LvUpMiredUp.Y.Otput[i+1]);
        W1.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W1_LvLoMiredLo.S.Otput[i+1], W1_LvLoMiredUp.S.Otput[i+1], W1_LvUpMiredLo.S.Otput[i+1], W1_LvUpMiredUp.S.Otput[i+1]);
        W2.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.H.Otput[i+1], W2_LvLoMiredUp.H.Otput[i+1], W2_LvUpMiredLo.H.Otput[i+1], W2_LvUpMiredUp.H.Otput[i+1]);
        W2.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.Y.Otput[i+1], W2_LvLoMiredUp.Y.Otput[i+1], W2_LvUpMiredLo.Y.Otput[i+1], W2_LvUpMiredUp.Y.Otput[i+1]);
        W2.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W2_LvLoMiredLo.S.Otput[i+1], W2_LvLoMiredUp.S.Otput[i+1], W2_LvUpMiredLo.S.Otput[i+1], W2_LvUpMiredUp.S.Otput[i+1]);
        W3.H.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.H.Otput[i+1], W3_LvLoMiredUp.H.Otput[i+1], W3_LvUpMiredLo.H.Otput[i+1], W3_LvUpMiredUp.H.Otput[i+1]);
        W3.Y.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.Y.Otput[i+1], W3_LvLoMiredUp.Y.Otput[i+1], W3_LvUpMiredLo.Y.Otput[i+1], W3_LvUpMiredUp.Y.Otput[i+1]);
        W3.S.Otput[i+1] = InterParam_Color(i4RealLV, i4UpperLV, i4LowerLV, u4RealMired, u4UpperMired, u4LowerMired, W3_LvLoMiredLo.S.Otput[i+1], W3_LvLoMiredUp.S.Otput[i+1], W3_LvUpMiredLo.S.Otput[i+1], W3_LvUpMiredUp.S.Otput[i+1]);
    }

    // Get W1/W2/W3 H/Y/S Slope[i] i=0~5
    // -------------------------------------------------------------------------------------------------------
    // We have    : Otput[i+1] = Otput[i] + (Input[i+1] - Input[i])*Slope[i]/128
    // This means : Slope[i] = (Otput[i+1] - Otput[i])*128/(Input[i+1] - Input[i])
    // -------------------------------------------------------------------------------------------------------
    for (i = 0; i < 6; i++)
    {
        if (W1.H.Input[i+1] == W1.H.Input[i]) // to avoid divide zero
        {
            W1.H.Slope[i] = 128;
        }
        else if (W1.H.Otput[i+1] == W1.H.Otput[i])
        {
            W1.H.Slope[i] = 0;
        }
        else
        {
            W1.H.Slope[i] = (((W1.H.Otput[i+1] - W1.H.Otput[i])<<7) + ((W1.H.Input[i+1] - W1.H.Input[i])>>1))/(W1.H.Input[i+1] - W1.H.Input[i]); // ((W1.H.Input[i+1] - W1.H.Input[i])>>1) for rounding
        }


        if (W1.Y.Input[i+1] == W1.Y.Input[i]) // to avoid divide zero
        {
            W1.Y.Slope[i] = 128;
        }
        else if (W1.Y.Otput[i+1] == W1.Y.Otput[i])
        {
            W1.Y.Slope[i] = 0;
        }
        else
        {
            W1.Y.Slope[i] = (((W1.Y.Otput[i+1] - W1.Y.Otput[i])<<7) + ((W1.Y.Input[i+1] - W1.Y.Input[i])>>1))/(W1.Y.Input[i+1] - W1.Y.Input[i]); // ((W1.Y.Input[i+1] - W1.Y.Input[i])>>1) for rounding
        }


        if (W1.S.Input[i+1] == W1.S.Input[i]) // to avoid divide zero
        {
            W1.S.Slope[i] = 128;
        }
        else if (W1.S.Otput[i+1] == W1.S.Otput[i])
        {
            W1.S.Slope[i] = 0;
        }
        else
        {
            W1.S.Slope[i] = (((W1.S.Otput[i+1] - W1.S.Otput[i])<<7) + ((W1.S.Input[i+1] - W1.S.Input[i])>>1))/(W1.S.Input[i+1] - W1.S.Input[i]); // ((W1.S.Input[i+1] - W1.S.Input[i])>>1) for rounding
        }




        if (W2.H.Input[i+1] == W2.H.Input[i]) // to avoid divide zero
        {
            W2.H.Slope[i] = 128;
        }
        else if (W2.H.Otput[i+1] == W2.H.Otput[i])
        {
            W2.H.Slope[i] = 0;
        }
        else
        {
            W2.H.Slope[i] = (((W2.H.Otput[i+1] - W2.H.Otput[i])<<7) + ((W2.H.Input[i+1] - W2.H.Input[i])>>1))/(W2.H.Input[i+1] - W2.H.Input[i]); // ((W2.H.Input[i+1] - W2.H.Input[i])>>1) for rounding
        }


        if (W2.Y.Input[i+1] == W2.Y.Input[i]) // to avoid divide zero
        {
            W2.Y.Slope[i] = 128;
        }
        else if (W2.Y.Otput[i+1] == W2.Y.Otput[i])
        {
            W2.Y.Slope[i] = 0;
        }
        else
        {
            W2.Y.Slope[i] = (((W2.Y.Otput[i+1] - W2.Y.Otput[i])<<7) + ((W2.Y.Input[i+1] - W2.Y.Input[i])>>1))/(W2.Y.Input[i+1] - W2.Y.Input[i]); // ((W2.Y.Input[i+1] - W2.Y.Input[i])>>1) for rounding
        }


        if (W2.S.Input[i+1] == W2.S.Input[i]) // to avoid divide zero
        {
            W2.S.Slope[i] = 128;
        }
        else if (W2.S.Otput[i+1] == W2.S.Otput[i])
        {
            W2.S.Slope[i] = 0;
        }
        else
        {
            W2.S.Slope[i] = (((W2.S.Otput[i+1] - W2.S.Otput[i])<<7) + ((W2.S.Input[i+1] - W2.S.Input[i])>>1))/(W2.S.Input[i+1] - W2.S.Input[i]); // ((W2.S.Input[i+1] - W2.S.Input[i])>>1) for rounding
        }



        if (W3.H.Input[i+1] == W3.H.Input[i]) // to avoid divide zero
        {
            W3.H.Slope[i] = 128;
        }
        else if (W3.H.Otput[i+1] == W3.H.Otput[i])
        {
            W3.H.Slope[i] = 0;
        }
        else
        {
            W3.H.Slope[i] = (((W3.H.Otput[i+1] - W3.H.Otput[i])<<7) + ((W3.H.Input[i+1] - W3.H.Input[i])>>1))/(W3.H.Input[i+1] - W3.H.Input[i]); // ((W3.H.Input[i+1] - W3.H.Input[i])>>1) for rounding
        }


        if (W3.Y.Input[i+1] == W3.Y.Input[i]) // to avoid divide zero
        {
            W3.Y.Slope[i] = 128;
        }
        else if (W3.Y.Otput[i+1] == W3.Y.Otput[i])
        {
            W3.Y.Slope[i] = 0;
        }
        else
        {
            W3.Y.Slope[i] = (((W3.Y.Otput[i+1] - W3.Y.Otput[i])<<7) + ((W3.Y.Input[i+1] - W3.Y.Input[i])>>1))/(W3.Y.Input[i+1] - W3.Y.Input[i]); // ((W3.Y.Input[i+1] - W3.Y.Input[i])>>1) for rounding
        }


        if (W3.S.Input[i+1] == W3.S.Input[i]) // to avoid divide zero
        {
            W3.S.Slope[i] = 128;
        }
        else if (W3.S.Otput[i+1] == W3.S.Otput[i])
        {
            W3.S.Slope[i] = 0;
        }
        else
        {
            W3.S.Slope[i] = (((W3.S.Otput[i+1] - W3.S.Otput[i])<<7) + ((W3.S.Input[i+1] - W3.S.Input[i])>>1))/(W3.S.Input[i+1] - W3.S.Input[i]); // ((W3.S.Input[i+1] - W3.S.Input[i])>>1) for rounding
        }


        W1.H.Slope[i] = ClipInt32(W1.H.Slope[i], 255, 0);
        W1.Y.Slope[i] = ClipInt32(W1.Y.Slope[i], 255, 0);
        W1.S.Slope[i] = ClipInt32(W1.S.Slope[i], 255, 0);
        W2.H.Slope[i] = ClipInt32(W2.H.Slope[i], 255, 0);
        W2.Y.Slope[i] = ClipInt32(W2.Y.Slope[i], 255, 0);
        W2.S.Slope[i] = ClipInt32(W2.S.Slope[i], 255, 0);
        W3.H.Slope[i] = ClipInt32(W3.H.Slope[i], 255, 0);
        W3.Y.Slope[i] = ClipInt32(W3.Y.Slope[i], 255, 0);
        W3.S.Slope[i] = ClipInt32(W3.S.Slope[i], 255, 0);
    }


    if ((IsCapture == MTRUE) || (IIR_EN == MFALSE))
    {
        for (i = 0; i < 7; i++)
        {
            Final_W1.H.Input[i] = W1.H.Input[i];
            Final_W1.Y.Input[i] = W1.Y.Input[i];
            Final_W1.S.Input[i] = W1.S.Input[i];
            Final_W2.H.Input[i] = W2.H.Input[i];
            Final_W2.Y.Input[i] = W2.Y.Input[i];
            Final_W2.S.Input[i] = W2.S.Input[i];
            Final_W3.H.Input[i] = W3.H.Input[i];
            Final_W3.Y.Input[i] = W3.Y.Input[i];
            Final_W3.S.Input[i] = W3.S.Input[i];
        }

        for (i = 0; i < 6; i++)
        {
            Final_W1.H.Slope[i] = W1.H.Slope[i];
            Final_W1.Y.Slope[i] = W1.Y.Slope[i];
            Final_W1.S.Slope[i] = W1.S.Slope[i];
            Final_W2.H.Slope[i] = W2.H.Slope[i];
            Final_W2.Y.Slope[i] = W2.Y.Slope[i];
            Final_W2.S.Slope[i] = W2.S.Slope[i];
            Final_W3.H.Slope[i] = W3.H.Slope[i];
            Final_W3.Y.Slope[i] = W3.Y.Slope[i];
            Final_W3.S.Slope[i] = W3.S.Slope[i];
        }

        Final_W1.H.WgtLS = W1.H.WgtLS;
        Final_W1.Y.WgtLS = W1.Y.WgtLS;
        Final_W1.S.WgtLS = W1.S.WgtLS;
        Final_W2.H.WgtLS = W2.H.WgtLS;
        Final_W2.Y.WgtLS = W2.Y.WgtLS;
        Final_W2.S.WgtLS = W2.S.WgtLS;
        Final_W3.H.WgtLS = W3.H.WgtLS;
        Final_W3.Y.WgtLS = W3.Y.WgtLS;
        Final_W3.S.WgtLS = W3.S.WgtLS;

        Final_W1.H.WgtUS = W1.H.WgtUS;
        Final_W1.Y.WgtUS = W1.Y.WgtUS;
        Final_W1.S.WgtUS = W1.S.WgtUS;
        Final_W2.H.WgtUS = W2.H.WgtUS;
        Final_W2.Y.WgtUS = W2.Y.WgtUS;
        Final_W2.S.WgtUS = W2.S.WgtUS;
        Final_W3.H.WgtUS = W3.H.WgtUS;
        Final_W3.Y.WgtUS = W3.Y.WgtUS;
        Final_W3.S.WgtUS = W3.S.WgtUS;

    }
    else
    {
        for (i = 0; i < 7; i++)
        {
            Final_W1.H.Input[i] = IIR(Final_W1.H.Input[i], W1.H.Input[i], u4HueStep);
            Final_W1.Y.Input[i] = IIR(Final_W1.Y.Input[i], W1.Y.Input[i], u4LumStep);
            Final_W1.S.Input[i] = IIR(Final_W1.S.Input[i], W1.S.Input[i], u4SatStep);
            Final_W2.H.Input[i] = IIR(Final_W2.H.Input[i], W2.H.Input[i], u4HueStep);
            Final_W2.Y.Input[i] = IIR(Final_W2.Y.Input[i], W2.Y.Input[i], u4LumStep);
            Final_W2.S.Input[i] = IIR(Final_W2.S.Input[i], W2.S.Input[i], u4SatStep);
            Final_W3.H.Input[i] = IIR(Final_W3.H.Input[i], W3.H.Input[i], u4HueStep);
            Final_W3.Y.Input[i] = IIR(Final_W3.Y.Input[i], W3.Y.Input[i], u4LumStep);
            Final_W3.S.Input[i] = IIR(Final_W3.S.Input[i], W3.S.Input[i], u4SatStep);
        }

        for (i = 0; i < 6; i++)
        {
            Final_W1.H.Slope[i] = IIR(Final_W1.H.Slope[i], W1.H.Slope[i], u4HueStep);
            Final_W1.Y.Slope[i] = IIR(Final_W1.Y.Slope[i], W1.Y.Slope[i], u4LumStep);
            Final_W1.S.Slope[i] = IIR(Final_W1.S.Slope[i], W1.S.Slope[i], u4SatStep);
            Final_W2.H.Slope[i] = IIR(Final_W2.H.Slope[i], W2.H.Slope[i], u4HueStep);
            Final_W2.Y.Slope[i] = IIR(Final_W2.Y.Slope[i], W2.Y.Slope[i], u4LumStep);
            Final_W2.S.Slope[i] = IIR(Final_W2.S.Slope[i], W2.S.Slope[i], u4SatStep);
            Final_W3.H.Slope[i] = IIR(Final_W3.H.Slope[i], W3.H.Slope[i], u4HueStep);
            Final_W3.Y.Slope[i] = IIR(Final_W3.Y.Slope[i], W3.Y.Slope[i], u4LumStep);
            Final_W3.S.Slope[i] = IIR(Final_W3.S.Slope[i], W3.S.Slope[i], u4SatStep);
        }

        Final_W1.H.WgtLS = IIR(Final_W1.H.WgtLS, W1.H.WgtLS, u4HueStep);
        Final_W1.Y.WgtLS = IIR(Final_W1.Y.WgtLS, W1.Y.WgtLS, u4LumStep);
        Final_W1.S.WgtLS = IIR(Final_W1.S.WgtLS, W1.S.WgtLS, u4SatStep);
        Final_W2.H.WgtLS = IIR(Final_W2.H.WgtLS, W2.H.WgtLS, u4HueStep);
        Final_W2.Y.WgtLS = IIR(Final_W2.Y.WgtLS, W2.Y.WgtLS, u4LumStep);
        Final_W2.S.WgtLS = IIR(Final_W2.S.WgtLS, W2.S.WgtLS, u4SatStep);
        Final_W3.H.WgtLS = IIR(Final_W3.H.WgtLS, W3.H.WgtLS, u4HueStep);
        Final_W3.Y.WgtLS = IIR(Final_W3.Y.WgtLS, W3.Y.WgtLS, u4LumStep);
        Final_W3.S.WgtLS = IIR(Final_W3.S.WgtLS, W3.S.WgtLS, u4SatStep);

        Final_W1.H.WgtUS = IIR(Final_W1.H.WgtUS, W1.H.WgtUS, u4HueStep);
        Final_W1.Y.WgtUS = IIR(Final_W1.Y.WgtUS, W1.Y.WgtUS, u4LumStep);
        Final_W1.S.WgtUS = IIR(Final_W1.S.WgtUS, W1.S.WgtUS, u4SatStep);
        Final_W2.H.WgtUS = IIR(Final_W2.H.WgtUS, W2.H.WgtUS, u4HueStep);
        Final_W2.Y.WgtUS = IIR(Final_W2.Y.WgtUS, W2.Y.WgtUS, u4LumStep);
        Final_W2.S.WgtUS = IIR(Final_W2.S.WgtUS, W2.S.WgtUS, u4SatStep);
        Final_W3.H.WgtUS = IIR(Final_W3.H.WgtUS, W3.H.WgtUS, u4HueStep);
        Final_W3.Y.WgtUS = IIR(Final_W3.Y.WgtUS, W3.Y.WgtUS, u4LumStep);
        Final_W3.S.WgtUS = IIR(Final_W3.S.WgtUS, W3.S.WgtUS, u4SatStep);

    }


    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_l             = Final_W1.H.Input[0];
    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0         = Final_W1.H.Input[1];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1       = Final_W1.H.Input[2];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2       = Final_W1.H.Input[3];
    rSmoothCOLOR_TBL.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3         = Final_W1.H.Input[4];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4       = Final_W1.H.Input[5];
    rSmoothCOLOR_TBL.cm_w1_hue_0.bits.COLOR_cm_h_w1_u             = Final_W1.H.Input[6];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0       = Final_W1.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1         = Final_W1.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2       = Final_W1.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3       = Final_W1.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4       = Final_W1.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5       = Final_W1.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope   = Final_W1.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope   = Final_W1.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_l             = Final_W1.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0         = Final_W1.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1      = Final_W1.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2      = Final_W1.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3         = Final_W1.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4      = Final_W1.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w1_luma_0.bits.COLOR_cm_y_w1_u             = Final_W1.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0      = Final_W1.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1         = Final_W1.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2      = Final_W1.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3      = Final_W1.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4      = Final_W1.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5      = Final_W1.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope  = Final_W1.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope  = Final_W1.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_l             = Final_W1.S.Input[0];
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0         = Final_W1.S.Input[1];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1       = Final_W1.S.Input[2];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2       = Final_W1.S.Input[3];
    rSmoothCOLOR_TBL.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3         = Final_W1.S.Input[4];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4       = Final_W1.S.Input[5];
    rSmoothCOLOR_TBL.cm_w1_sat_0.bits.COLOR_cm_s_w1_u             = Final_W1.S.Input[6];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0       = Final_W1.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1         = Final_W1.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2       = Final_W1.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3       = Final_W1.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4       = Final_W1.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5       = Final_W1.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope   = Final_W1.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope   = Final_W1.S.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_l             = Final_W2.H.Input[0];
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0         = Final_W2.H.Input[1];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1       = Final_W2.H.Input[2];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2       = Final_W2.H.Input[3];
    rSmoothCOLOR_TBL.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3         = Final_W2.H.Input[4];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4       = Final_W2.H.Input[5];
    rSmoothCOLOR_TBL.cm_w2_hue_0.bits.COLOR_cm_h_w2_u             = Final_W2.H.Input[6];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0       = Final_W2.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1         = Final_W2.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2       = Final_W2.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3       = Final_W2.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4       = Final_W2.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5       = Final_W2.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope   = Final_W2.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope   = Final_W2.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_l             = Final_W2.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0         = Final_W2.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1      = Final_W2.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2      = Final_W2.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3         = Final_W2.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4      = Final_W2.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w2_luma_0.bits.COLOR_cm_y_w2_u             = Final_W2.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0      = Final_W2.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1         = Final_W2.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2      = Final_W2.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3      = Final_W2.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4      = Final_W2.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5      = Final_W2.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope  = Final_W2.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope  = Final_W2.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_l             = Final_W2.S.Input[0];
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0         = Final_W2.S.Input[1];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1       = Final_W2.S.Input[2];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2       = Final_W2.S.Input[3];
    rSmoothCOLOR_TBL.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3         = Final_W2.S.Input[4];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4       = Final_W2.S.Input[5];
    rSmoothCOLOR_TBL.cm_w2_sat_0.bits.COLOR_cm_s_w2_u             = Final_W2.S.Input[6];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0       = Final_W2.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1         = Final_W2.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2       = Final_W2.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3       = Final_W2.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4       = Final_W2.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5       = Final_W2.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope   = Final_W2.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope   = Final_W2.S.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_l             = Final_W3.H.Input[0];
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0         = Final_W3.H.Input[1];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1       = Final_W3.H.Input[2];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2       = Final_W3.H.Input[3];
    rSmoothCOLOR_TBL.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3         = Final_W3.H.Input[4];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4       = Final_W3.H.Input[5];
    rSmoothCOLOR_TBL.cm_w3_hue_0.bits.COLOR_cm_h_w3_u             = Final_W3.H.Input[6];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0       = Final_W3.H.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1         = Final_W3.H.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2       = Final_W3.H.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3       = Final_W3.H.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4       = Final_W3.H.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5       = Final_W3.H.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope   = Final_W3.H.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope   = Final_W3.H.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_l             = Final_W3.Y.Input[0];
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0         = Final_W3.Y.Input[1];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1      = Final_W3.Y.Input[2];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2      = Final_W3.Y.Input[3];
    rSmoothCOLOR_TBL.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3         = Final_W3.Y.Input[4];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4      = Final_W3.Y.Input[5];
    rSmoothCOLOR_TBL.cm_w3_luma_0.bits.COLOR_cm_y_w3_u             = Final_W3.Y.Input[6];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0      = Final_W3.Y.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1         = Final_W3.Y.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2      = Final_W3.Y.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3      = Final_W3.Y.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4      = Final_W3.Y.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5      = Final_W3.Y.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope  = Final_W3.Y.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope  = Final_W3.Y.WgtUS;
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_l             = Final_W3.S.Input[0];
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0         = Final_W3.S.Input[1];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1       = Final_W3.S.Input[2];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2       = Final_W3.S.Input[3];
    rSmoothCOLOR_TBL.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3         = Final_W3.S.Input[4];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4       = Final_W3.S.Input[5];
    rSmoothCOLOR_TBL.cm_w3_sat_0.bits.COLOR_cm_s_w3_u             = Final_W3.S.Input[6];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0       = Final_W3.S.Slope[0];
    rSmoothCOLOR_TBL.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1         = Final_W3.S.Slope[1];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2       = Final_W3.S.Slope[2];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3       = Final_W3.S.Slope[3];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4       = Final_W3.S.Slope[4];
    rSmoothCOLOR_TBL.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5       = Final_W3.S.Slope[5];
    rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope   = Final_W3.S.WgtLS;
    rSmoothCOLOR_TBL.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope   = Final_W3.S.WgtUS;

    // dump CM W1/W2/W3 setting
    if (LVMiredDumpCM == 1)
    {
        // W1 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Input[0] , W1_LvLoMiredLo.H.Input[1] , W1_LvLoMiredLo.H.Input[2] , W1_LvLoMiredLo.H.Input[3] ,
                                     W1_LvLoMiredLo.H.Input[4] , W1_LvLoMiredLo.H.Input[5] , W1_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Input[0] , W1_LvLoMiredUp.H.Input[1] , W1_LvLoMiredUp.H.Input[2] , W1_LvLoMiredUp.H.Input[3] ,
                                     W1_LvLoMiredUp.H.Input[4] , W1_LvLoMiredUp.H.Input[5] , W1_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Input[0] , W1_LvUpMiredLo.H.Input[1] , W1_LvUpMiredLo.H.Input[2] , W1_LvUpMiredLo.H.Input[3] ,
                                     W1_LvUpMiredLo.H.Input[4] , W1_LvUpMiredLo.H.Input[5] , W1_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Input[0] , W1_LvUpMiredUp.H.Input[1] , W1_LvUpMiredUp.H.Input[2] , W1_LvUpMiredUp.H.Input[3] ,
                                     W1_LvUpMiredUp.H.Input[4] , W1_LvUpMiredUp.H.Input[5] , W1_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1.H.Input[0] , W1.H.Input[1] , W1.H.Input[2] , W1.H.Input[3] ,
                                     W1.H.Input[4] , W1.H.Input[5] , W1.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W1.H.Input[0] , Final_W1.H.Input[1] , Final_W1.H.Input[2] , Final_W1.H.Input[3] ,
                                     Final_W1.H.Input[4] , Final_W1.H.Input[5] , Final_W1.H.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Otput[0] , W1_LvLoMiredLo.H.Otput[1] , W1_LvLoMiredLo.H.Otput[2] , W1_LvLoMiredLo.H.Otput[3] ,
                                     W1_LvLoMiredLo.H.Otput[4] , W1_LvLoMiredLo.H.Otput[5] , W1_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Otput[0] , W1_LvLoMiredUp.H.Otput[1] , W1_LvLoMiredUp.H.Otput[2] , W1_LvLoMiredUp.H.Otput[3] ,
                                     W1_LvLoMiredUp.H.Otput[4] , W1_LvLoMiredUp.H.Otput[5] , W1_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Otput[0] , W1_LvUpMiredLo.H.Otput[1] , W1_LvUpMiredLo.H.Otput[2] , W1_LvUpMiredLo.H.Otput[3] ,
                                     W1_LvUpMiredLo.H.Otput[4] , W1_LvUpMiredLo.H.Otput[5] , W1_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Otput[0] , W1_LvUpMiredUp.H.Otput[1] , W1_LvUpMiredUp.H.Otput[2] , W1_LvUpMiredUp.H.Otput[3] ,
                                     W1_LvUpMiredUp.H.Otput[4] , W1_LvUpMiredUp.H.Otput[5] , W1_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W1.H.Otput[0] , W1.H.Otput[1] , W1.H.Otput[2] , W1.H.Otput[3] ,
                                     W1.H.Otput[4] , W1.H.Otput[5] , W1.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.Slope[0] , W1_LvLoMiredLo.H.Slope[1] , W1_LvLoMiredLo.H.Slope[2] , W1_LvLoMiredLo.H.Slope[3] ,
                                     W1_LvLoMiredLo.H.Slope[4] , W1_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.Slope[0] , W1_LvLoMiredUp.H.Slope[1] , W1_LvLoMiredUp.H.Slope[2] , W1_LvLoMiredUp.H.Slope[3] ,
                                     W1_LvLoMiredUp.H.Slope[4] , W1_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.Slope[0] , W1_LvUpMiredLo.H.Slope[1] , W1_LvUpMiredLo.H.Slope[2] , W1_LvUpMiredLo.H.Slope[3] ,
                                     W1_LvUpMiredLo.H.Slope[4] , W1_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.Slope[0] , W1_LvUpMiredUp.H.Slope[1] , W1_LvUpMiredUp.H.Slope[2] , W1_LvUpMiredUp.H.Slope[3] ,
                                     W1_LvUpMiredUp.H.Slope[4] , W1_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W1.H.Slope[0] , W1.H.Slope[1] , W1.H.Slope[2] , W1.H.Slope[3] ,
                                     W1.H.Slope[4] , W1.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W1.H.Slope[0] , Final_W1.H.Slope[1] , Final_W1.H.Slope[2] , Final_W1.H.Slope[3] ,
                                     Final_W1.H.Slope[4] , Final_W1.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvLoMiredLo.H.WgtLS, W1_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvLoMiredUp.H.WgtLS, W1_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvUpMiredLo.H.WgtLS, W1_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1_LvUpMiredUp.H.WgtLS, W1_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W1.H.WgtLS, W1.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W1.H.WgtLS, Final_W1.H.WgtUS);



        // W1 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Input[0] , W1_LvLoMiredLo.Y.Input[1] , W1_LvLoMiredLo.Y.Input[2] , W1_LvLoMiredLo.Y.Input[3] ,
                                    W1_LvLoMiredLo.Y.Input[4] , W1_LvLoMiredLo.Y.Input[5] , W1_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Input[0] , W1_LvLoMiredUp.Y.Input[1] , W1_LvLoMiredUp.Y.Input[2] , W1_LvLoMiredUp.Y.Input[3] ,
                                    W1_LvLoMiredUp.Y.Input[4] , W1_LvLoMiredUp.Y.Input[5] , W1_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Input[0] , W1_LvUpMiredLo.Y.Input[1] , W1_LvUpMiredLo.Y.Input[2] , W1_LvUpMiredLo.Y.Input[3] ,
                                    W1_LvUpMiredLo.Y.Input[4] , W1_LvUpMiredLo.Y.Input[5] , W1_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Input[0] , W1_LvUpMiredUp.Y.Input[1] , W1_LvUpMiredUp.Y.Input[2] , W1_LvUpMiredUp.Y.Input[3] ,
                                    W1_LvUpMiredUp.Y.Input[4] , W1_LvUpMiredUp.Y.Input[5] , W1_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1.Y.Input[0] , W1.Y.Input[1] , W1.Y.Input[2] , W1.Y.Input[3] ,
                                    W1.Y.Input[4] , W1.Y.Input[5] , W1.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W1.Y.Input[0] , Final_W1.Y.Input[1] , Final_W1.Y.Input[2] , Final_W1.Y.Input[3] ,
                                    Final_W1.Y.Input[4] , Final_W1.Y.Input[5] , Final_W1.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Otput[0] , W1_LvLoMiredLo.Y.Otput[1] , W1_LvLoMiredLo.Y.Otput[2] , W1_LvLoMiredLo.Y.Otput[3] ,
                                    W1_LvLoMiredLo.Y.Otput[4] , W1_LvLoMiredLo.Y.Otput[5] , W1_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Otput[0] , W1_LvLoMiredUp.Y.Otput[1] , W1_LvLoMiredUp.Y.Otput[2] , W1_LvLoMiredUp.Y.Otput[3] ,
                                    W1_LvLoMiredUp.Y.Otput[4] , W1_LvLoMiredUp.Y.Otput[5] , W1_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Otput[0] , W1_LvUpMiredLo.Y.Otput[1] , W1_LvUpMiredLo.Y.Otput[2] , W1_LvUpMiredLo.Y.Otput[3] ,
                                    W1_LvUpMiredLo.Y.Otput[4] , W1_LvUpMiredLo.Y.Otput[5] , W1_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Otput[0] , W1_LvUpMiredUp.Y.Otput[1] , W1_LvUpMiredUp.Y.Otput[2] , W1_LvUpMiredUp.Y.Otput[3] ,
                                    W1_LvUpMiredUp.Y.Otput[4] , W1_LvUpMiredUp.Y.Otput[5] , W1_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W1.Y.Otput[0] , W1.Y.Otput[1] , W1.Y.Otput[2] , W1.Y.Otput[3] ,
                                    W1.Y.Otput[4] , W1.Y.Otput[5] , W1.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.Slope[0] , W1_LvLoMiredLo.Y.Slope[1] , W1_LvLoMiredLo.Y.Slope[2] , W1_LvLoMiredLo.Y.Slope[3] ,
                                    W1_LvLoMiredLo.Y.Slope[4] , W1_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.Slope[0] , W1_LvLoMiredUp.Y.Slope[1] , W1_LvLoMiredUp.Y.Slope[2] , W1_LvLoMiredUp.Y.Slope[3] ,
                                    W1_LvLoMiredUp.Y.Slope[4] , W1_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.Slope[0] , W1_LvUpMiredLo.Y.Slope[1] , W1_LvUpMiredLo.Y.Slope[2] , W1_LvUpMiredLo.Y.Slope[3] ,
                                    W1_LvUpMiredLo.Y.Slope[4] , W1_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.Slope[0] , W1_LvUpMiredUp.Y.Slope[1] , W1_LvUpMiredUp.Y.Slope[2] , W1_LvUpMiredUp.Y.Slope[3] ,
                                    W1_LvUpMiredUp.Y.Slope[4] , W1_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.Y.Slope[0] , W1.Y.Slope[1] , W1.Y.Slope[2] , W1.Y.Slope[3] ,
                                    W1.Y.Slope[4] , W1.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.Y.Slope[0] , Final_W1.Y.Slope[1] , Final_W1.Y.Slope[2] , Final_W1.Y.Slope[3] ,
                                    Final_W1.Y.Slope[4] , Final_W1.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.Y.WgtLS, W1_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.Y.WgtLS, W1_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.Y.WgtLS, W1_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.Y.WgtLS, W1_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1.Y.WgtLS, W1.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W1.Y.WgtLS, Final_W1.Y.WgtUS);

        // W1 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Input[0] , W1_LvLoMiredLo.S.Input[1] , W1_LvLoMiredLo.S.Input[2] , W1_LvLoMiredLo.S.Input[3] ,
                                    W1_LvLoMiredLo.S.Input[4] , W1_LvLoMiredLo.S.Input[5] , W1_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Input[0] , W1_LvLoMiredUp.S.Input[1] , W1_LvLoMiredUp.S.Input[2] , W1_LvLoMiredUp.S.Input[3] ,
                                    W1_LvLoMiredUp.S.Input[4] , W1_LvLoMiredUp.S.Input[5] , W1_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Input[0] , W1_LvUpMiredLo.S.Input[1] , W1_LvUpMiredLo.S.Input[2] , W1_LvUpMiredLo.S.Input[3] ,
                                    W1_LvUpMiredLo.S.Input[4] , W1_LvUpMiredLo.S.Input[5] , W1_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Input[0] , W1_LvUpMiredUp.S.Input[1] , W1_LvUpMiredUp.S.Input[2] , W1_LvUpMiredUp.S.Input[3] ,
                                    W1_LvUpMiredUp.S.Input[4] , W1_LvUpMiredUp.S.Input[5] , W1_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Input[0] , W1.S.Input[1] , W1.S.Input[2] , W1.S.Input[3] ,
                                    W1.S.Input[4] , W1.S.Input[5] , W1.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.S.Input[0] , Final_W1.S.Input[1] , Final_W1.S.Input[2] , Final_W1.S.Input[3] ,
                                    Final_W1.S.Input[4] , Final_W1.S.Input[5] , Final_W1.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Otput[0] , W1_LvLoMiredLo.S.Otput[1] , W1_LvLoMiredLo.S.Otput[2] , W1_LvLoMiredLo.S.Otput[3] ,
                                    W1_LvLoMiredLo.S.Otput[4] , W1_LvLoMiredLo.S.Otput[5] , W1_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Otput[0] , W1_LvLoMiredUp.S.Otput[1] , W1_LvLoMiredUp.S.Otput[2] , W1_LvLoMiredUp.S.Otput[3] ,
                                    W1_LvLoMiredUp.S.Otput[4] , W1_LvLoMiredUp.S.Otput[5] , W1_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Otput[0] , W1_LvUpMiredLo.S.Otput[1] , W1_LvUpMiredLo.S.Otput[2] , W1_LvUpMiredLo.S.Otput[3] ,
                                    W1_LvUpMiredLo.S.Otput[4] , W1_LvUpMiredLo.S.Otput[5] , W1_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Otput[0] , W1_LvUpMiredUp.S.Otput[1] , W1_LvUpMiredUp.S.Otput[2] , W1_LvUpMiredUp.S.Otput[3] ,
                                    W1_LvUpMiredUp.S.Otput[4] , W1_LvUpMiredUp.S.Otput[5] , W1_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Otput[0] , W1.S.Otput[1] , W1.S.Otput[2] , W1.S.Otput[3] ,
                                    W1.S.Otput[4] , W1.S.Otput[5] , W1.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.Slope[0] , W1_LvLoMiredLo.S.Slope[1] , W1_LvLoMiredLo.S.Slope[2] , W1_LvLoMiredLo.S.Slope[3] ,
                                    W1_LvLoMiredLo.S.Slope[4] , W1_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.Slope[0] , W1_LvLoMiredUp.S.Slope[1] , W1_LvLoMiredUp.S.Slope[2] , W1_LvLoMiredUp.S.Slope[3] ,
                                    W1_LvLoMiredUp.S.Slope[4] , W1_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.Slope[0] , W1_LvUpMiredLo.S.Slope[1] , W1_LvUpMiredLo.S.Slope[2] , W1_LvUpMiredLo.S.Slope[3] ,
                                    W1_LvUpMiredLo.S.Slope[4] , W1_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.Slope[0] , W1_LvUpMiredUp.S.Slope[1] , W1_LvUpMiredUp.S.Slope[2] , W1_LvUpMiredUp.S.Slope[3] ,
                                    W1_LvUpMiredUp.S.Slope[4] , W1_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W1.S.Slope[0] , W1.S.Slope[1] , W1.S.Slope[2] , W1.S.Slope[3] ,
                                    W1.S.Slope[4] , W1.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W1.S.Slope[0] , Final_W1.S.Slope[1] , Final_W1.S.Slope[2] , Final_W1.S.Slope[3] ,
                                    Final_W1.S.Slope[4] , Final_W1.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredLo.S.WgtLS, W1_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvLoMiredUp.S.WgtLS, W1_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredLo.S.WgtLS, W1_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1_LvUpMiredUp.S.WgtLS, W1_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W1.S.WgtLS, W1.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W1 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W1.S.WgtLS, Final_W1.S.WgtUS);



        // W2 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Input[0] , W2_LvLoMiredLo.H.Input[1] , W2_LvLoMiredLo.H.Input[2] , W2_LvLoMiredLo.H.Input[3] ,
                                     W2_LvLoMiredLo.H.Input[4] , W2_LvLoMiredLo.H.Input[5] , W2_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Input[0] , W2_LvLoMiredUp.H.Input[1] , W2_LvLoMiredUp.H.Input[2] , W2_LvLoMiredUp.H.Input[3] ,
                                     W2_LvLoMiredUp.H.Input[4] , W2_LvLoMiredUp.H.Input[5] , W2_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Input[0] , W2_LvUpMiredLo.H.Input[1] , W2_LvUpMiredLo.H.Input[2] , W2_LvUpMiredLo.H.Input[3] ,
                                     W2_LvUpMiredLo.H.Input[4] , W2_LvUpMiredLo.H.Input[5] , W2_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Input[0] , W2_LvUpMiredUp.H.Input[1] , W2_LvUpMiredUp.H.Input[2] , W2_LvUpMiredUp.H.Input[3] ,
                                     W2_LvUpMiredUp.H.Input[4] , W2_LvUpMiredUp.H.Input[5] , W2_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2.H.Input[0] , W2.H.Input[1] , W2.H.Input[2] , W2.H.Input[3] ,
                                     W2.H.Input[4] , W2.H.Input[5] , W2.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W2.H.Input[0] , Final_W2.H.Input[1] , Final_W2.H.Input[2] , Final_W2.H.Input[3] ,
                                     Final_W2.H.Input[4] , Final_W2.H.Input[5] , Final_W2.H.Input[6]);



        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Otput[0] , W2_LvLoMiredLo.H.Otput[1] , W2_LvLoMiredLo.H.Otput[2] , W2_LvLoMiredLo.H.Otput[3] ,
                                     W2_LvLoMiredLo.H.Otput[4] , W2_LvLoMiredLo.H.Otput[5] , W2_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Otput[0] , W2_LvLoMiredUp.H.Otput[1] , W2_LvLoMiredUp.H.Otput[2] , W2_LvLoMiredUp.H.Otput[3] ,
                                     W2_LvLoMiredUp.H.Otput[4] , W2_LvLoMiredUp.H.Otput[5] , W2_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Otput[0] , W2_LvUpMiredLo.H.Otput[1] , W2_LvUpMiredLo.H.Otput[2] , W2_LvUpMiredLo.H.Otput[3] ,
                                     W2_LvUpMiredLo.H.Otput[4] , W2_LvUpMiredLo.H.Otput[5] , W2_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Otput[0] , W2_LvUpMiredUp.H.Otput[1] , W2_LvUpMiredUp.H.Otput[2] , W2_LvUpMiredUp.H.Otput[3] ,
                                     W2_LvUpMiredUp.H.Otput[4] , W2_LvUpMiredUp.H.Otput[5] , W2_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W2.H.Otput[0] , W2.H.Otput[1] , W2.H.Otput[2] , W2.H.Otput[3] ,
                                     W2.H.Otput[4] , W2.H.Otput[5] , W2.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.Slope[0] , W2_LvLoMiredLo.H.Slope[1] , W2_LvLoMiredLo.H.Slope[2] , W2_LvLoMiredLo.H.Slope[3] ,
                                     W2_LvLoMiredLo.H.Slope[4] , W2_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.Slope[0] , W2_LvLoMiredUp.H.Slope[1] , W2_LvLoMiredUp.H.Slope[2] , W2_LvLoMiredUp.H.Slope[3] ,
                                     W2_LvLoMiredUp.H.Slope[4] , W2_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.Slope[0] , W2_LvUpMiredLo.H.Slope[1] , W2_LvUpMiredLo.H.Slope[2] , W2_LvUpMiredLo.H.Slope[3] ,
                                     W2_LvUpMiredLo.H.Slope[4] , W2_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.Slope[0] , W2_LvUpMiredUp.H.Slope[1] , W2_LvUpMiredUp.H.Slope[2] , W2_LvUpMiredUp.H.Slope[3] ,
                                     W2_LvUpMiredUp.H.Slope[4] , W2_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W2.H.Slope[0] , W2.H.Slope[1] , W2.H.Slope[2] , W2.H.Slope[3] ,
                                     W2.H.Slope[4] , W2.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W2.H.Slope[0] , Final_W2.H.Slope[1] , Final_W2.H.Slope[2] , Final_W2.H.Slope[3] ,
                                     Final_W2.H.Slope[4] , Final_W2.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvLoMiredLo.H.WgtLS, W2_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvLoMiredUp.H.WgtLS, W2_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvUpMiredLo.H.WgtLS, W2_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2_LvUpMiredUp.H.WgtLS, W2_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W2.H.WgtLS, W2.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W2.H.WgtLS, Final_W2.H.WgtUS);



        // W2 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Input[0] , W2_LvLoMiredLo.Y.Input[1] , W2_LvLoMiredLo.Y.Input[2] , W2_LvLoMiredLo.Y.Input[3] ,
                                    W2_LvLoMiredLo.Y.Input[4] , W2_LvLoMiredLo.Y.Input[5] , W2_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Input[0] , W2_LvLoMiredUp.Y.Input[1] , W2_LvLoMiredUp.Y.Input[2] , W2_LvLoMiredUp.Y.Input[3] ,
                                    W2_LvLoMiredUp.Y.Input[4] , W2_LvLoMiredUp.Y.Input[5] , W2_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Input[0] , W2_LvUpMiredLo.Y.Input[1] , W2_LvUpMiredLo.Y.Input[2] , W2_LvUpMiredLo.Y.Input[3] ,
                                    W2_LvUpMiredLo.Y.Input[4] , W2_LvUpMiredLo.Y.Input[5] , W2_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Input[0] , W2_LvUpMiredUp.Y.Input[1] , W2_LvUpMiredUp.Y.Input[2] , W2_LvUpMiredUp.Y.Input[3] ,
                                    W2_LvUpMiredUp.Y.Input[4] , W2_LvUpMiredUp.Y.Input[5] , W2_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2.Y.Input[0] , W2.Y.Input[1] , W2.Y.Input[2] , W2.Y.Input[3] ,
                                    W2.Y.Input[4] , W2.Y.Input[5] , W2.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W2.Y.Input[0] , Final_W2.Y.Input[1] , Final_W2.Y.Input[2] , Final_W2.Y.Input[3] ,
                                    Final_W2.Y.Input[4] , Final_W2.Y.Input[5] , Final_W2.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Otput[0] , W2_LvLoMiredLo.Y.Otput[1] , W2_LvLoMiredLo.Y.Otput[2] , W2_LvLoMiredLo.Y.Otput[3] ,
                                    W2_LvLoMiredLo.Y.Otput[4] , W2_LvLoMiredLo.Y.Otput[5] , W2_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Otput[0] , W2_LvLoMiredUp.Y.Otput[1] , W2_LvLoMiredUp.Y.Otput[2] , W2_LvLoMiredUp.Y.Otput[3] ,
                                    W2_LvLoMiredUp.Y.Otput[4] , W2_LvLoMiredUp.Y.Otput[5] , W2_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Otput[0] , W2_LvUpMiredLo.Y.Otput[1] , W2_LvUpMiredLo.Y.Otput[2] , W2_LvUpMiredLo.Y.Otput[3] ,
                                    W2_LvUpMiredLo.Y.Otput[4] , W2_LvUpMiredLo.Y.Otput[5] , W2_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Otput[0] , W2_LvUpMiredUp.Y.Otput[1] , W2_LvUpMiredUp.Y.Otput[2] , W2_LvUpMiredUp.Y.Otput[3] ,
                                    W2_LvUpMiredUp.Y.Otput[4] , W2_LvUpMiredUp.Y.Otput[5] , W2_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W2.Y.Otput[0] , W2.Y.Otput[1] , W2.Y.Otput[2] , W2.Y.Otput[3] ,
                                    W2.Y.Otput[4] , W2.Y.Otput[5] , W2.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.Slope[0] , W2_LvLoMiredLo.Y.Slope[1] , W2_LvLoMiredLo.Y.Slope[2] , W2_LvLoMiredLo.Y.Slope[3] ,
                                    W2_LvLoMiredLo.Y.Slope[4] , W2_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.Slope[0] , W2_LvLoMiredUp.Y.Slope[1] , W2_LvLoMiredUp.Y.Slope[2] , W2_LvLoMiredUp.Y.Slope[3] ,
                                    W2_LvLoMiredUp.Y.Slope[4] , W2_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.Slope[0] , W2_LvUpMiredLo.Y.Slope[1] , W2_LvUpMiredLo.Y.Slope[2] , W2_LvUpMiredLo.Y.Slope[3] ,
                                    W2_LvUpMiredLo.Y.Slope[4] , W2_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.Slope[0] , W2_LvUpMiredUp.Y.Slope[1] , W2_LvUpMiredUp.Y.Slope[2] , W2_LvUpMiredUp.Y.Slope[3] ,
                                    W2_LvUpMiredUp.Y.Slope[4] , W2_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.Y.Slope[0] , W2.Y.Slope[1] , W2.Y.Slope[2] , W2.Y.Slope[3] ,
                                    W2.Y.Slope[4] , W2.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.Y.Slope[0] , Final_W2.Y.Slope[1] , Final_W2.Y.Slope[2] , Final_W2.Y.Slope[3] ,
                                    Final_W2.Y.Slope[4] , Final_W2.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.Y.WgtLS, W2_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.Y.WgtLS, W2_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.Y.WgtLS, W2_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.Y.WgtLS, W2_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2.Y.WgtLS, W2.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W2.Y.WgtLS, Final_W2.Y.WgtUS);

        // W2 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Input[0] , W2_LvLoMiredLo.S.Input[1] , W2_LvLoMiredLo.S.Input[2] , W2_LvLoMiredLo.S.Input[3] ,
                                    W2_LvLoMiredLo.S.Input[4] , W2_LvLoMiredLo.S.Input[5] , W2_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Input[0] , W2_LvLoMiredUp.S.Input[1] , W2_LvLoMiredUp.S.Input[2] , W2_LvLoMiredUp.S.Input[3] ,
                                    W2_LvLoMiredUp.S.Input[4] , W2_LvLoMiredUp.S.Input[5] , W2_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Input[0] , W2_LvUpMiredLo.S.Input[1] , W2_LvUpMiredLo.S.Input[2] , W2_LvUpMiredLo.S.Input[3] ,
                                    W2_LvUpMiredLo.S.Input[4] , W2_LvUpMiredLo.S.Input[5] , W2_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Input[0] , W2_LvUpMiredUp.S.Input[1] , W2_LvUpMiredUp.S.Input[2] , W2_LvUpMiredUp.S.Input[3] ,
                                    W2_LvUpMiredUp.S.Input[4] , W2_LvUpMiredUp.S.Input[5] , W2_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Input[0] , W2.S.Input[1] , W2.S.Input[2] , W2.S.Input[3] ,
                                    W2.S.Input[4] , W2.S.Input[5] , W2.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.S.Input[0] , Final_W2.S.Input[1] , Final_W2.S.Input[2] , Final_W2.S.Input[3] ,
                                    Final_W2.S.Input[4] , Final_W2.S.Input[5] , Final_W2.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Otput[0] , W2_LvLoMiredLo.S.Otput[1] , W2_LvLoMiredLo.S.Otput[2] , W2_LvLoMiredLo.S.Otput[3] ,
                                    W2_LvLoMiredLo.S.Otput[4] , W2_LvLoMiredLo.S.Otput[5] , W2_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Otput[0] , W2_LvLoMiredUp.S.Otput[1] , W2_LvLoMiredUp.S.Otput[2] , W2_LvLoMiredUp.S.Otput[3] ,
                                    W2_LvLoMiredUp.S.Otput[4] , W2_LvLoMiredUp.S.Otput[5] , W2_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Otput[0] , W2_LvUpMiredLo.S.Otput[1] , W2_LvUpMiredLo.S.Otput[2] , W2_LvUpMiredLo.S.Otput[3] ,
                                    W2_LvUpMiredLo.S.Otput[4] , W2_LvUpMiredLo.S.Otput[5] , W2_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Otput[0] , W2_LvUpMiredUp.S.Otput[1] , W2_LvUpMiredUp.S.Otput[2] , W2_LvUpMiredUp.S.Otput[3] ,
                                    W2_LvUpMiredUp.S.Otput[4] , W2_LvUpMiredUp.S.Otput[5] , W2_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Otput[0] , W2.S.Otput[1] , W2.S.Otput[2] , W2.S.Otput[3] ,
                                    W2.S.Otput[4] , W2.S.Otput[5] , W2.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.Slope[0] , W2_LvLoMiredLo.S.Slope[1] , W2_LvLoMiredLo.S.Slope[2] , W2_LvLoMiredLo.S.Slope[3] ,
                                    W2_LvLoMiredLo.S.Slope[4] , W2_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.Slope[0] , W2_LvLoMiredUp.S.Slope[1] , W2_LvLoMiredUp.S.Slope[2] , W2_LvLoMiredUp.S.Slope[3] ,
                                    W2_LvLoMiredUp.S.Slope[4] , W2_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.Slope[0] , W2_LvUpMiredLo.S.Slope[1] , W2_LvUpMiredLo.S.Slope[2] , W2_LvUpMiredLo.S.Slope[3] ,
                                    W2_LvUpMiredLo.S.Slope[4] , W2_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.Slope[0] , W2_LvUpMiredUp.S.Slope[1] , W2_LvUpMiredUp.S.Slope[2] , W2_LvUpMiredUp.S.Slope[3] ,
                                    W2_LvUpMiredUp.S.Slope[4] , W2_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W2.S.Slope[0] , W2.S.Slope[1] , W2.S.Slope[2] , W2.S.Slope[3] ,
                                    W2.S.Slope[4] , W2.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W2.S.Slope[0] , Final_W2.S.Slope[1] , Final_W2.S.Slope[2] , Final_W2.S.Slope[3] ,
                                    Final_W2.S.Slope[4] , Final_W2.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredLo.S.WgtLS, W2_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvLoMiredUp.S.WgtLS, W2_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredLo.S.WgtLS, W2_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2_LvUpMiredUp.S.WgtLS, W2_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W2.S.WgtLS, W2.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W2 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W2.S.WgtLS, Final_W2.S.WgtUS);



        // W3 Hue
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Input[0] , W3_LvLoMiredLo.H.Input[1] , W3_LvLoMiredLo.H.Input[2] , W3_LvLoMiredLo.H.Input[3] ,
                                     W3_LvLoMiredLo.H.Input[4] , W3_LvLoMiredLo.H.Input[5] , W3_LvLoMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Input[0] , W3_LvLoMiredUp.H.Input[1] , W3_LvLoMiredUp.H.Input[2] , W3_LvLoMiredUp.H.Input[3] ,
                                     W3_LvLoMiredUp.H.Input[4] , W3_LvLoMiredUp.H.Input[5] , W3_LvLoMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Input[0] , W3_LvUpMiredLo.H.Input[1] , W3_LvUpMiredLo.H.Input[2] , W3_LvUpMiredLo.H.Input[3] ,
                                     W3_LvUpMiredLo.H.Input[4] , W3_LvUpMiredLo.H.Input[5] , W3_LvUpMiredLo.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Input[0] , W3_LvUpMiredUp.H.Input[1] , W3_LvUpMiredUp.H.Input[2] , W3_LvUpMiredUp.H.Input[3] ,
                                     W3_LvUpMiredUp.H.Input[4] , W3_LvUpMiredUp.H.Input[5] , W3_LvUpMiredUp.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3.H.Input[0] , W3.H.Input[1] , W3.H.Input[2] , W3.H.Input[3] ,
                                     W3.H.Input[4] , W3.H.Input[5] , W3.H.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Input Final : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     Final_W3.H.Input[0] , Final_W3.H.Input[1] , Final_W3.H.Input[2] , Final_W3.H.Input[3] ,
                                     Final_W3.H.Input[4] , Final_W3.H.Input[5] , Final_W3.H.Input[6]);



        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Otput[0] , W3_LvLoMiredLo.H.Otput[1] , W3_LvLoMiredLo.H.Otput[2] , W3_LvLoMiredLo.H.Otput[3] ,
                                     W3_LvLoMiredLo.H.Otput[4] , W3_LvLoMiredLo.H.Otput[5] , W3_LvLoMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Otput[0] , W3_LvLoMiredUp.H.Otput[1] , W3_LvLoMiredUp.H.Otput[2] , W3_LvLoMiredUp.H.Otput[3] ,
                                     W3_LvLoMiredUp.H.Otput[4] , W3_LvLoMiredUp.H.Otput[5] , W3_LvLoMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Otput[0] , W3_LvUpMiredLo.H.Otput[1] , W3_LvUpMiredLo.H.Otput[2] , W3_LvUpMiredLo.H.Otput[3] ,
                                     W3_LvUpMiredLo.H.Otput[4] , W3_LvUpMiredLo.H.Otput[5] , W3_LvUpMiredLo.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Otput[0] , W3_LvUpMiredUp.H.Otput[1] , W3_LvUpMiredUp.H.Otput[2] , W3_LvUpMiredUp.H.Otput[3] ,
                                     W3_LvUpMiredUp.H.Otput[4] , W3_LvUpMiredUp.H.Otput[5] , W3_LvUpMiredUp.H.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,     W3.H.Otput[0] , W3.H.Otput[1] , W3.H.Otput[2] , W3.H.Otput[3] ,
                                     W3.H.Otput[4] , W3.H.Otput[5] , W3.H.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.Slope[0] , W3_LvLoMiredLo.H.Slope[1] , W3_LvLoMiredLo.H.Slope[2] , W3_LvLoMiredLo.H.Slope[3] ,
                                     W3_LvLoMiredLo.H.Slope[4] , W3_LvLoMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.Slope[0] , W3_LvLoMiredUp.H.Slope[1] , W3_LvLoMiredUp.H.Slope[2] , W3_LvLoMiredUp.H.Slope[3] ,
                                     W3_LvLoMiredUp.H.Slope[4] , W3_LvLoMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.Slope[0] , W3_LvUpMiredLo.H.Slope[1] , W3_LvUpMiredLo.H.Slope[2] , W3_LvUpMiredLo.H.Slope[3] ,
                                     W3_LvUpMiredLo.H.Slope[4] , W3_LvUpMiredLo.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.Slope[0] , W3_LvUpMiredUp.H.Slope[1] , W3_LvUpMiredUp.H.Slope[2] , W3_LvUpMiredUp.H.Slope[3] ,
                                     W3_LvUpMiredUp.H.Slope[4] , W3_LvUpMiredUp.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     W3.H.Slope[0] , W3.H.Slope[1] , W3.H.Slope[2] , W3.H.Slope[3] ,
                                     W3.H.Slope[4] , W3.H.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Slope Final : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,     Final_W3.H.Slope[0] , Final_W3.H.Slope[1] , Final_W3.H.Slope[2] , Final_W3.H.Slope[3] ,
                                     Final_W3.H.Slope[4] , Final_W3.H.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvLoMiredLo.H.WgtLS, W3_LvLoMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvLoMiredUp.H.WgtLS, W3_LvLoMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvUpMiredLo.H.WgtLS, W3_LvUpMiredLo.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3_LvUpMiredUp.H.WgtLS, W3_LvUpMiredUp.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     W3.H.WgtLS, W3.H.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Hue Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,     Final_W3.H.WgtLS, Final_W3.H.WgtUS);



        // W3 Lum
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Input[0] , W3_LvLoMiredLo.Y.Input[1] , W3_LvLoMiredLo.Y.Input[2] , W3_LvLoMiredLo.Y.Input[3] ,
                                    W3_LvLoMiredLo.Y.Input[4] , W3_LvLoMiredLo.Y.Input[5] , W3_LvLoMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Input[0] , W3_LvLoMiredUp.Y.Input[1] , W3_LvLoMiredUp.Y.Input[2] , W3_LvLoMiredUp.Y.Input[3] ,
                                    W3_LvLoMiredUp.Y.Input[4] , W3_LvLoMiredUp.Y.Input[5] , W3_LvLoMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Input[0] , W3_LvUpMiredLo.Y.Input[1] , W3_LvUpMiredLo.Y.Input[2] , W3_LvUpMiredLo.Y.Input[3] ,
                                    W3_LvUpMiredLo.Y.Input[4] , W3_LvUpMiredLo.Y.Input[5] , W3_LvUpMiredLo.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Input[0] , W3_LvUpMiredUp.Y.Input[1] , W3_LvUpMiredUp.Y.Input[2] , W3_LvUpMiredUp.Y.Input[3] ,
                                    W3_LvUpMiredUp.Y.Input[4] , W3_LvUpMiredUp.Y.Input[5] , W3_LvUpMiredUp.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3.Y.Input[0] , W3.Y.Input[1] , W3.Y.Input[2] , W3.Y.Input[3] ,
                                    W3.Y.Input[4] , W3.Y.Input[5] , W3.Y.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Input Final  : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    Final_W3.Y.Input[0] , Final_W3.Y.Input[1] , Final_W3.Y.Input[2] , Final_W3.Y.Input[3] ,
                                    Final_W3.Y.Input[4] , Final_W3.Y.Input[5] , Final_W3.Y.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Lower Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Otput[0] , W3_LvLoMiredLo.Y.Otput[1] , W3_LvLoMiredLo.Y.Otput[2] , W3_LvLoMiredLo.Y.Otput[3] ,
                                    W3_LvLoMiredLo.Y.Otput[4] , W3_LvLoMiredLo.Y.Otput[5] , W3_LvLoMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Lower Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Otput[0] , W3_LvLoMiredUp.Y.Otput[1] , W3_LvLoMiredUp.Y.Otput[2] , W3_LvLoMiredUp.Y.Otput[3] ,
                                    W3_LvLoMiredUp.Y.Otput[4] , W3_LvLoMiredUp.Y.Otput[5] , W3_LvLoMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Upper Mired Lower : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Otput[0] , W3_LvUpMiredLo.Y.Otput[1] , W3_LvUpMiredLo.Y.Otput[2] , W3_LvUpMiredLo.Y.Otput[3] ,
                                    W3_LvUpMiredLo.Y.Otput[4] , W3_LvUpMiredLo.Y.Otput[5] , W3_LvUpMiredLo.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Lv Upper Mired Upper : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Otput[0] , W3_LvUpMiredUp.Y.Otput[1] , W3_LvUpMiredUp.Y.Otput[2] , W3_LvUpMiredUp.Y.Otput[3] ,
                                    W3_LvUpMiredUp.Y.Otput[4] , W3_LvUpMiredUp.Y.Otput[5] , W3_LvUpMiredUp.Y.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Otput Target : %04d,%04d,%04d,%04d,%04d,%04d,%04d\n",
                    __FUNCTION__,    W3.Y.Otput[0] , W3.Y.Otput[1] , W3.Y.Otput[2] , W3.Y.Otput[3] ,
                                    W3.Y.Otput[4] , W3.Y.Otput[5] , W3.Y.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.Slope[0] , W3_LvLoMiredLo.Y.Slope[1] , W3_LvLoMiredLo.Y.Slope[2] , W3_LvLoMiredLo.Y.Slope[3] ,
                                    W3_LvLoMiredLo.Y.Slope[4] , W3_LvLoMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.Slope[0] , W3_LvLoMiredUp.Y.Slope[1] , W3_LvLoMiredUp.Y.Slope[2] , W3_LvLoMiredUp.Y.Slope[3] ,
                                    W3_LvLoMiredUp.Y.Slope[4] , W3_LvLoMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.Slope[0] , W3_LvUpMiredLo.Y.Slope[1] , W3_LvUpMiredLo.Y.Slope[2] , W3_LvUpMiredLo.Y.Slope[3] ,
                                    W3_LvUpMiredLo.Y.Slope[4] , W3_LvUpMiredLo.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.Slope[0] , W3_LvUpMiredUp.Y.Slope[1] , W3_LvUpMiredUp.Y.Slope[2] , W3_LvUpMiredUp.Y.Slope[3] ,
                                    W3_LvUpMiredUp.Y.Slope[4] , W3_LvUpMiredUp.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.Y.Slope[0] , W3.Y.Slope[1] , W3.Y.Slope[2] , W3.Y.Slope[3] ,
                                    W3.Y.Slope[4] , W3.Y.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.Y.Slope[0] , Final_W3.Y.Slope[1] , Final_W3.Y.Slope[2] , Final_W3.Y.Slope[3] ,
                                    Final_W3.Y.Slope[4] , Final_W3.Y.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.Y.WgtLS, W3_LvLoMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.Y.WgtLS, W3_LvLoMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.Y.WgtLS, W3_LvUpMiredLo.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.Y.WgtLS, W3_LvUpMiredUp.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3.Y.WgtLS, W3.Y.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Lum Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W3.Y.WgtLS, Final_W3.Y.WgtUS);

        // W3 Sat
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Input[0] , W3_LvLoMiredLo.S.Input[1] , W3_LvLoMiredLo.S.Input[2] , W3_LvLoMiredLo.S.Input[3] ,
                                    W3_LvLoMiredLo.S.Input[4] , W3_LvLoMiredLo.S.Input[5] , W3_LvLoMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Input[0] , W3_LvLoMiredUp.S.Input[1] , W3_LvLoMiredUp.S.Input[2] , W3_LvLoMiredUp.S.Input[3] ,
                                    W3_LvLoMiredUp.S.Input[4] , W3_LvLoMiredUp.S.Input[5] , W3_LvLoMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Input[0] , W3_LvUpMiredLo.S.Input[1] , W3_LvUpMiredLo.S.Input[2] , W3_LvUpMiredLo.S.Input[3] ,
                                    W3_LvUpMiredLo.S.Input[4] , W3_LvUpMiredLo.S.Input[5] , W3_LvUpMiredLo.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Input[0] , W3_LvUpMiredUp.S.Input[1] , W3_LvUpMiredUp.S.Input[2] , W3_LvUpMiredUp.S.Input[3] ,
                                    W3_LvUpMiredUp.S.Input[4] , W3_LvUpMiredUp.S.Input[5] , W3_LvUpMiredUp.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Input[0] , W3.S.Input[1] , W3.S.Input[2] , W3.S.Input[3] ,
                                    W3.S.Input[4] , W3.S.Input[5] , W3.S.Input[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Input Final  : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.S.Input[0] , Final_W3.S.Input[1] , Final_W3.S.Input[2] , Final_W3.S.Input[3] ,
                                    Final_W3.S.Input[4] , Final_W3.S.Input[5] , Final_W3.S.Input[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Otput[0] , W3_LvLoMiredLo.S.Otput[1] , W3_LvLoMiredLo.S.Otput[2] , W3_LvLoMiredLo.S.Otput[3] ,
                                    W3_LvLoMiredLo.S.Otput[4] , W3_LvLoMiredLo.S.Otput[5] , W3_LvLoMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Otput[0] , W3_LvLoMiredUp.S.Otput[1] , W3_LvLoMiredUp.S.Otput[2] , W3_LvLoMiredUp.S.Otput[3] ,
                                    W3_LvLoMiredUp.S.Otput[4] , W3_LvLoMiredUp.S.Otput[5] , W3_LvLoMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Otput[0] , W3_LvUpMiredLo.S.Otput[1] , W3_LvUpMiredLo.S.Otput[2] , W3_LvUpMiredLo.S.Otput[3] ,
                                    W3_LvUpMiredLo.S.Otput[4] , W3_LvUpMiredLo.S.Otput[5] , W3_LvUpMiredLo.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Otput[0] , W3_LvUpMiredUp.S.Otput[1] , W3_LvUpMiredUp.S.Otput[2] , W3_LvUpMiredUp.S.Otput[3] ,
                                    W3_LvUpMiredUp.S.Otput[4] , W3_LvUpMiredUp.S.Otput[5] , W3_LvUpMiredUp.S.Otput[6]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Otput Target : %03d,%03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Otput[0] , W3.S.Otput[1] , W3.S.Otput[2] , W3.S.Otput[3] ,
                                    W3.S.Otput[4] , W3.S.Otput[5] , W3.S.Otput[6]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Lower Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.Slope[0] , W3_LvLoMiredLo.S.Slope[1] , W3_LvLoMiredLo.S.Slope[2] , W3_LvLoMiredLo.S.Slope[3] ,
                                    W3_LvLoMiredLo.S.Slope[4] , W3_LvLoMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Lower Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.Slope[0] , W3_LvLoMiredUp.S.Slope[1] , W3_LvLoMiredUp.S.Slope[2] , W3_LvLoMiredUp.S.Slope[3] ,
                                    W3_LvLoMiredUp.S.Slope[4] , W3_LvLoMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Upper Mired Lower : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.Slope[0] , W3_LvUpMiredLo.S.Slope[1] , W3_LvUpMiredLo.S.Slope[2] , W3_LvUpMiredLo.S.Slope[3] ,
                                    W3_LvUpMiredLo.S.Slope[4] , W3_LvUpMiredLo.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Lv Upper Mired Upper : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.Slope[0] , W3_LvUpMiredUp.S.Slope[1] , W3_LvUpMiredUp.S.Slope[2] , W3_LvUpMiredUp.S.Slope[3] ,
                                    W3_LvUpMiredUp.S.Slope[4] , W3_LvUpMiredUp.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Target : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    W3.S.Slope[0] , W3.S.Slope[1] , W3.S.Slope[2] , W3.S.Slope[3] ,
                                    W3.S.Slope[4] , W3.S.Slope[5]);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Slope Final  : %03d,%03d,%03d,%03d,%03d,%03d\n",
                    __FUNCTION__,    Final_W3.S.Slope[0] , Final_W3.S.Slope[1] , Final_W3.S.Slope[2] , Final_W3.S.Slope[3] ,
                                    Final_W3.S.Slope[4] , Final_W3.S.Slope[5]);

        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Lower Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredLo.S.WgtLS, W3_LvLoMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Lower Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvLoMiredUp.S.WgtLS, W3_LvLoMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Upper Mired Lower : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredLo.S.WgtLS, W3_LvUpMiredLo.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Lv Upper Mired Upper : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3_LvUpMiredUp.S.WgtLS, W3_LvUpMiredUp.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Target : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    W3.S.WgtLS, W3.S.WgtUS);
        COLOR_LOG_IF(LVMiredDumpCM, "[%s()] 3DLUT W3 Sat Final  : WGT_LSLOPE = %03d, WGT_USLOPE = %03d\n",
                    __FUNCTION__,    Final_W3.S.WgtLS, Final_W3.S.WgtUS);

    }
}


MVOID SmoothCOLOR(  MBOOL IsCapture,
                    MUINT32 u4UpperCT, // Upper CT
                    MUINT32 u4LowerCT, // Lower CT
                    MINT32 i4UpperLV,
                    MINT32 i4LowerLV,
                    ColorInfo& rColorInfo, // New structure, including CCT, RealLV & AWB gain
                    CAMERA_TUNING_FD_INFO_T const& rFdInfo,
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Lo_CT_Lo),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Lo_CT_Up),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Up_CT_Lo),// NVRAM Color Table
                    ISP_NVRAM_SCOLOR_PARAM_T const (& rNVRAM_COLORS_LV_Up_CT_Up),// NVRAM Color Table
                    ISP_NVRAM_COLOR_PARAM_T const& Para_Color,// Color parameters
                    ISP_NVRAM_COLOR_T& rSmoothCOLOR_TBL,// SmoothCOLOR output
                    MUINT16& rVer,
                    MBOOL& rFirstTimeBoot,
                    ISP_NVRAM_COLOR_T& rSmoothColor_Prv
                    )
{
    //UTIL_TRACE_BEGIN(__FUNCTION__);
    char cLogLevel[PROPERTY_VALUE_MAX] = {'\0'};
    property_get("vendor.debug.smooth_color.dump", cLogLevel, "0");
    MINT32 debugDump = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.lock", cLogLevel, "0");
    MINT32 IsLock = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.enable", cLogLevel, "0");
    MINT32 debugEn = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.yeng", cLogLevel, "0");
    MINT32 PassY = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.heng", cLogLevel, "0");
    MINT32 PassH = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.seng", cLogLevel, "0");
    MINT32 PassS = ::atoi(cLogLevel);

    property_get("vendor.debug.smooth_color.bypass.cm", cLogLevel, "0");
    MINT32 PassCM = ::atoi(cLogLevel);

    // SmoothCOLOR Unit Test On/Off
    property_get("vendor.debug.smooth_color.ut", cLogLevel, "0");
    MINT32 SColorUnitTest = ::atoi(cLogLevel);

    MUINT32 u4RealCT = rColorInfo.NoPrefCCT;
    MINT32 i4RealLV = rColorInfo.RealLV; // LV is signed

    // version
    rVer = g_Smooth_Color_Ver;

    COLOR_LOG_IF(debugDump, "[%s()] u4RealCT = %d, u4LowerCT = %d, u4UpperCT = %d, i4RealLV = %d, i4LowerLV = %d, i4UpperLV = %d\n",
                        __FUNCTION__, u4RealCT, u4LowerCT, u4UpperCT, i4RealLV, i4LowerLV, i4UpperLV);

    // Initialize
    //static MBOOL FirstTimeBoot = MTRUE;
    //static ISP_NVRAM_COLOR_T FinalTbl;
    ISP_NVRAM_COLOR_T LV_Lo_CT_Lo_Tbl;
    ISP_NVRAM_COLOR_T LV_Lo_CT_Up_Tbl;
    ISP_NVRAM_COLOR_T LV_Up_CT_Lo_Tbl;
    ISP_NVRAM_COLOR_T LV_Up_CT_Up_Tbl;

    ISP_NVRAM_COLOR_PARAM_T ParamsInRam;

    ISP_SMOOTH_COLOR_PARAM_T Param;

    memcpy(&LV_Lo_CT_Lo_Tbl, &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Lo_CT_Up_Tbl, &rNVRAM_COLORS_LV_Lo_CT_Up.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Up_CT_Lo_Tbl, &rNVRAM_COLORS_LV_Up_CT_Lo.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));
    memcpy(&LV_Up_CT_Up_Tbl, &rNVRAM_COLORS_LV_Up_CT_Up.COLOR_TBL, sizeof(ISP_NVRAM_COLOR_T));

    memcpy(&ParamsInRam, &Para_Color, sizeof(ISP_NVRAM_COLOR_PARAM_T));

    // Below setting apply 1st table of each scene
    memcpy(&rSmoothColor_Prv.cfg_main      , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.cfg_main,       sizeof(ISP_NVRAM_COLOR_CFG_MAIN_T      ));
    memcpy(&rSmoothColor_Prv.c_boost_main  , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.c_boost_main,   sizeof(ISP_NVRAM_COLOR_C_BOOST_MAIN_T  ));
    memcpy(&rSmoothColor_Prv.c_boost_main_2, &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.c_boost_main_2, sizeof(ISP_NVRAM_COLOR_C_BOOST_MAIN_2_T));
    memcpy(&rSmoothColor_Prv.luma_adj      , &rNVRAM_COLORS_LV_Lo_CT_Lo.COLOR_TBL.luma_adj,       sizeof(ISP_NVRAM_COLOR_LUMA_ADJ_T      ));

    Param.u4LumStep = ParamsInRam.u4Lum_Speed;
    Param.u4SatStep = ParamsInRam.u4Sat_Speed;
    Param.u4HueStep = ParamsInRam.u4Hue_Speed;

    COLOR_LOG_IF(debugDump, "[%s()] IsCapture = %d, IsBoot = %d\n", __FUNCTION__, IsCapture, rFirstTimeBoot);
    COLOR_LOG_IF(debugDump, "[%s()] In Ram: %03d, %03d, %03d, %03d, %03d, %03d, %03d, %03d\n", __FUNCTION__,
                        ParamsInRam.u4DC_Offset, ParamsInRam.u4Lum_Speed, ParamsInRam.u4Hue_Speed, ParamsInRam.u4Sat_Speed,
                        ParamsInRam.u4LSP_LV_TH, ParamsInRam.u4Outdoor_EN, ParamsInRam.u4Outdoor_Speed, ParamsInRam.u4Outdoor_Ratio);

    if (debugEn == 1) // Enable adb command to bypass sub module
    {
        rSmoothColor_Prv.cfg_main.bits.COLOR_yeng_bypass = PassY;
        rSmoothColor_Prv.cfg_main.bits.COLOR_seng_bypass = PassS;
        rSmoothColor_Prv.cfg_main.bits.COLOR_heng_bypass = PassH;
        rSmoothColor_Prv.cm_control.bits.COLOR_cm_bypass = PassCM;
    }

    // If initialize
    Param.bIsInitial = rFirstTimeBoot;//FirstTimeBoot;

    if (SColorUnitTest == 1)
    {
        // ---- Menu LV/CT for UT ----//

        // Mired color temperature
        if (u4RealCT == 0) u4RealCT = 1;
        if (u4UpperCT == 0) u4UpperCT = 1;
        if (u4LowerCT == 0) u4LowerCT = 1;

        Param.u4RealMired  = 1000000/5000;
        Param.u4UpperMired = 1000000/5500;
        Param.u4LowerMired = 1000000/4000;

        //LV tuning
        Param.i4RealLV  = 60;
        Param.i4LowerLV = 50;
        Param.i4UpperLV = 100;

        // ---- Menu Parameters for UT ----//
        // LV_Lo_CT_Lo_Tbl for test InterParamGlobal
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_g_brightness = 128;
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_g_contrast   = 128;
        LV_Lo_CT_Lo_Tbl.g_pic_adj_main_2.bits.COLOR_g_saturation = 128;


        // LV_Lo_CT_Lo_Tbl for test InterParamPartialY
        LV_Lo_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_0    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_1    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_2    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_3    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_4    = 130;
        LV_Lo_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_5    = 131;
        LV_Lo_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_6    = 134;
        LV_Lo_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_7    = 144;
        LV_Lo_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_8    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_9    = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_10 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_11 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_12 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_13 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_14 = 128;
        LV_Lo_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_15 = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamPartialH
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_0  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_1  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_2  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_3  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_4  = 130;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_5  = 131;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_6  = 134;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_7  = 144;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_8  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_9  = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_10 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_11 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_12 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_13 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_14 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_15 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_16 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_17 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_18 = 128;
        LV_Lo_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_19 = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamPartialS
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5  = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9  = 10;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19 = 20;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9  = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19 = 60;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6    = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9    = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19   = 128;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3    = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7    = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8    = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9    = 132;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12   = 112;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14   = 144;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19   = 140;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1    = 119;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2    = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3    = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4    = 139;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5    = 138;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6    = 136;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7    = 114;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8    = 113;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9    = 124;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11   = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12   = 139;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13   = 134;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14   = 118;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16   = 120;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17   = 121;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18   = 119;
        LV_Lo_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19   = 120;

        // LV_Lo_CT_Lo_Tbl for test InterParamSGainByY
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9         = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19        = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9       = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19      = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9     = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18    = 128;
        LV_Lo_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19    = 128;

        // LV_Lo_CT_Lo_Tbl for test InterParamLSP
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_sth                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_yth                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_sslope                   = 127;
        LV_Lo_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_yslope                   = 0;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_sslope                   = 127;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_sth                      = 0;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_gain                     = 127;
        LV_Lo_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lire_gain                     = 127;

        // LV_Lo_CT_Lo_Tbl for test InterParam3DLUT
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_ink_en                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_ink_en                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_ink_en                    = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_ink_delta_mode           = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_ink_ch                       = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_bypass                        = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_en                         = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_wgt_en                 = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_en                         = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_wgt_en                 = 0;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_en                         = 1;
        LV_Lo_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_wgt_en                 = 1;

        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5            = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_l                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_u                  = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1              = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5             = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_l                  = 806;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0              = 829;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1             = 852;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2             = 875;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3              = 898;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4             = 921;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_u                  = 944;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_l                  = 421;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0              = 521;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1            = 621;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2            = 722;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3              = 822;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4            = 922;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_u                  = 1023;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5            = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope        = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_l                  = 5;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0              = 22;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1             = 39;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2             = 56;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3              = 73;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4             = 90;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_u                  = 107;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1              = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5             = 128;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope         = 0;
        LV_Lo_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope         = 0;



        // LV_Lo_CT_Up_Tbl for test InterParamGlobal
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_g_brightness = 128;
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_g_contrast   = 128;
        LV_Lo_CT_Up_Tbl.g_pic_adj_main_2.bits.COLOR_g_saturation = 128;


        // LV_Lo_CT_Up_Tbl for test InterParamPartialY
        LV_Lo_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_0    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_1    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_2    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_3    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_4    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_5    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_6    = 112;
        LV_Lo_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_7    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_8    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_9    = 128;
        LV_Lo_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_10 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_11 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_12 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_13 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_14 = 128;
        LV_Lo_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_15 = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamPartialH
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_0  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_1  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_2  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_3  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_4  = 130;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_5  = 131;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_6  = 134;
        LV_Lo_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_7  = 144;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_8  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_9  = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_10 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_11 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_12 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_13 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_14 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_15 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_16 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_17 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_18 = 128;
        LV_Lo_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_19 = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamPartialS
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5  = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9  = 10;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19 = 20;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9  = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19 = 60;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6    = 112;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9    = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0    = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6    = 120;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8    = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9    = 132;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17   = 144;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18   = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19   = 128;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0    = 123;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1    = 116;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2    = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3    = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4    = 139;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5    = 138;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6    = 136;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7    = 114;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8    = 113;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9    = 124;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13   = 116;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15   = 118;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16   = 117;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17   = 119;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18   = 122;
        LV_Lo_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19   = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamSGainByY
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0          = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9         = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19        = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0       = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1       = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2       = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3       = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4       = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5       = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6       = 119;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9       = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10      = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11      = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12      = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13      = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14      = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15      = 130;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16      = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17      = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18      = 117;
        LV_Lo_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19      = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3     = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4     = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6     = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12    = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13    = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16    = 131;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18    = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19    = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0     = 125;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1     = 121;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5     = 127;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7     = 122;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9     = 124;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10    = 123;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12    = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13    = 120;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14    = 140;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15    = 140;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16    = 138;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17    = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18    = 116;
        LV_Lo_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19    = 126;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9     = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18    = 128;
        LV_Lo_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19    = 128;

        // LV_Lo_CT_Up_Tbl for test InterParamLSP
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_sth                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_yth                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_sslope                   = 127;
        LV_Lo_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_yslope                   = 0;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_sslope                   = 127;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_sth                      = 0;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_gain                     = 127;
        LV_Lo_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lire_gain                     = 127;

        // LV_Lo_CT_Up_Tbl for test InterParam3DLUT
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_ink_en                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_ink_en                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_ink_en                    = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_ink_delta_mode           = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_ink_ch                       = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_bypass                        = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_en                         = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_wgt_en                 = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_en                         = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_wgt_en                 = 0;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_en                         = 1;
        LV_Lo_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_wgt_en                 = 1;

        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5            = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope        = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope        = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5            = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope        = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope        = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_l                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_u                  = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1              = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5             = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope         = 0;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_l                  = 806;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0              = 829;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1             = 852;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2             = 875;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3              = 898;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4             = 921;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_u                  = 944;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope         = 16;
        LV_Lo_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope         = 16;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_l                  = 421;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0              = 521;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1            = 621;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2            = 722;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3              = 822;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4            = 922;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_u                  = 1023;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5            = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope        = 28;
        LV_Lo_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope        = 28;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_l                  = 5;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0              = 22;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1             = 39;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2             = 56;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3              = 73;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4             = 90;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_u                  = 107;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1              = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5             = 128;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope         = 41;
        LV_Lo_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope         = 41;



        // LV_Up_CT_Lo_Tbl for test InterParamGlobal
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_g_brightness = 128;
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_1.bits.COLOR_g_contrast   = 128;
        LV_Up_CT_Lo_Tbl.g_pic_adj_main_2.bits.COLOR_g_saturation = 128;


        // LV_Up_CT_Lo_Tbl for test InterParamPartialY
        LV_Up_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_0    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_1    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_2    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_3    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_4    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_5    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_6    = 120;
        LV_Up_CT_Lo_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_7    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_8    = 160;
        LV_Up_CT_Lo_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_9    = 144;
        LV_Up_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_10 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_11 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_12 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_13 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_14 = 160;
        LV_Up_CT_Lo_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_15 = 160;

        // LV_Up_CT_Lo_Tbl for test InterParamPartialH
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_0  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_1  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_2  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_3  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_4  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_5  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_6  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_7  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_8  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_9  = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_10 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_11 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_12 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_13 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_14 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_15 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_16 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_17 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_18 = 128;
        LV_Up_CT_Lo_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_19 = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamPartialS
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9  = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19 = 20;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9  = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19 = 60;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9    = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18   = 128;
        LV_Up_CT_Lo_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19   = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamSGainByY
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0          = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9         = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19        = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0       = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1       = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2       = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3       = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4       = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5       = 130;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6       = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7       = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8       = 117;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9       = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10      = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11      = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12      = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13      = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14      = 119;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17      = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18      = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19      = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0     = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1     = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6     = 131;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7     = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8     = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9     = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11    = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12    = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14    = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15    = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17    = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0     = 125;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1     = 121;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2     = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3     = 120;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4     = 140;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5     = 140;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6     = 138;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7     = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8     = 116;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9     = 126;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13    = 127;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15    = 122;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17    = 124;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18    = 123;
        LV_Up_CT_Lo_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9     = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18    = 128;
        LV_Up_CT_Lo_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19    = 128;

        // LV_Up_CT_Lo_Tbl for test InterParamLSP
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_sth                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_yth                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_sslope                   = 127;
        LV_Up_CT_Lo_Tbl.lsp_1.bits.COLOR_lsp_lire_yslope                   = 0;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_sslope                   = 127;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_sth                      = 0;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lsat_gain                     = 127;
        LV_Up_CT_Lo_Tbl.lsp_2.bits.COLOR_lsp_lire_gain                     = 127;

        // LV_Up_CT_Lo_Tbl for test InterParam3DLUT
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_ink_en                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_ink_en                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_ink_en                    = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_ink_delta_mode           = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_ink_ch                       = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_bypass                        = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_en                         = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w1_wgt_en                 = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_en                         = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w2_wgt_en                 = 0;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_en                         = 1;
        LV_Up_CT_Lo_Tbl.cm_control.bits.COLOR_cm_w3_wgt_en                 = 1;

        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5            = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope        = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope        = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5            = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope        = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope        = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_l                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_u                  = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1              = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5             = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope         = 0;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_l                  = 806;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0              = 829;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1             = 852;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2             = 875;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3              = 898;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4             = 921;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_u                  = 944;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope         = 16;
        LV_Up_CT_Lo_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope         = 16;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_l                  = 421;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0              = 521;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1            = 621;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2            = 722;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3              = 822;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4            = 922;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_u                  = 1023;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5            = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope        = 28;
        LV_Up_CT_Lo_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope        = 28;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_l                  = 5;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0              = 22;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1             = 39;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2             = 56;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3              = 73;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4             = 90;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_u                  = 107;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1              = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5             = 128;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope         = 41;
        LV_Up_CT_Lo_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope         = 41;



        // LV_Up_CT_Up_Tbl for test InterParamGlobal
        LV_Up_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_g_brightness = 128;
        LV_Up_CT_Up_Tbl.g_pic_adj_main_1.bits.COLOR_g_contrast   = 128;
        LV_Up_CT_Up_Tbl.g_pic_adj_main_2.bits.COLOR_g_saturation = 128;


        // LV_Up_CT_Up_Tbl for test InterParamPartialY
        LV_Up_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_0    = 107;
        LV_Up_CT_Up_Tbl.y_slope_1_0_main.bits.COLOR_y_slope_1    = 104;
        LV_Up_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_2    = 109;
        LV_Up_CT_Up_Tbl.y_slope_3_2_main.bits.COLOR_y_slope_3    = 107;
        LV_Up_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_4    = 139;
        LV_Up_CT_Up_Tbl.y_slope_5_4_main.bits.COLOR_y_slope_5    = 138;
        LV_Up_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_6    = 137;
        LV_Up_CT_Up_Tbl.y_slope_7_6_main.bits.COLOR_y_slope_7    = 106;
        LV_Up_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_8    = 104;
        LV_Up_CT_Up_Tbl.y_slope_9_8_main.bits.COLOR_y_slope_9    = 116;
        LV_Up_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_10 = 106;
        LV_Up_CT_Up_Tbl.y_slope_11_10_main.bits.COLOR_y_slope_11 = 109;
        LV_Up_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_12 = 107;
        LV_Up_CT_Up_Tbl.y_slope_13_12_main.bits.COLOR_y_slope_13 = 104;
        LV_Up_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_14 = 109;
        LV_Up_CT_Up_Tbl.y_slope_15_14_main.bits.COLOR_y_slope_15 = 107;

        // LV_Up_CT_Up_Tbl for test InterParamPartialH
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_0  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_1  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_2  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_0.bits.COLOR_hue_to_hue_3  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_4  = 138;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_5  = 154;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_6  = 138;
        LV_Up_CT_Up_Tbl.local_hue_cd_1.bits.COLOR_hue_to_hue_7  = 140;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_8  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_9  = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_10 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_2.bits.COLOR_hue_to_hue_11 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_12 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_13 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_14 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_3.bits.COLOR_hue_to_hue_15 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_16 = 128;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_17 = 144;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_18 = 132;
        LV_Up_CT_Up_Tbl.local_hue_cd_4.bits.COLOR_hue_to_hue_19 = 128;

        // LV_Up_CT_Up_Tbl for test InterParamPartialS
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_0  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_1  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_2  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_0.bits.COLOR_sat_point1_hue_3  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_4  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_5  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_6  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_1.bits.COLOR_sat_point1_hue_7  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_8  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_9  = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_10 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_2.bits.COLOR_sat_point1_hue_11 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_12 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_13 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_14 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_3.bits.COLOR_sat_point1_hue_15 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_16 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_17 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_18 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point1_4.bits.COLOR_sat_point1_hue_19 = 20;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_0  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_1  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_2  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_0.bits.COLOR_sat_point2_hue_3  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_4  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_5  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_6  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_1.bits.COLOR_sat_point2_hue_7  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_8  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_9  = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_10 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_2.bits.COLOR_sat_point2_hue_11 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_12 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_13 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_14 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_3.bits.COLOR_sat_point2_hue_15 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_16 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_17 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_18 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_point2_4.bits.COLOR_sat_point2_hue_19 = 60;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_0    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_1    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_2    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_0.bits.COLOR_sat_gain1_hue_3    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_4    = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_5    = 112;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_6    = 116;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_1.bits.COLOR_sat_gain1_hue_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_10   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_2.bits.COLOR_sat_gain1_hue_11   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_12   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_13   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_14   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_3.bits.COLOR_sat_gain1_hue_15   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain1_4.bits.COLOR_sat_gain1_hue_19   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_0    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_1    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_2    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_0.bits.COLOR_sat_gain2_hue_3    = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_4    = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_5    = 112;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_6    = 116;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_1.bits.COLOR_sat_gain2_hue_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_10   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_2.bits.COLOR_sat_gain2_hue_11   = 142;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_12   = 148;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_13   = 142;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_14   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_3.bits.COLOR_sat_gain2_hue_15   = 138;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain2_4.bits.COLOR_sat_gain2_hue_19   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_0    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_1    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_2    = 122;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_0.bits.COLOR_sat_gain3_hue_3    = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_4    = 136;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_5    = 143;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_6    = 139;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_1.bits.COLOR_sat_gain3_hue_7    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_8    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_9    = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_10   = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_2.bits.COLOR_sat_gain3_hue_11   = 120;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_12   = 115;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_13   = 118;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_14   = 122;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_3.bits.COLOR_sat_gain3_hue_15   = 121;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_16   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_17   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_18   = 128;
        LV_Up_CT_Up_Tbl.partial_sat_gain3_4.bits.COLOR_sat_gain3_hue_19   = 128;

        // LV_Up_CT_Up_Tbl for test InterParamSGainByY
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_0          = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_1         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_2         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_0.bits.COLOR_s_gain_y0_hue_3         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_4         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_5         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_6         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_1.bits.COLOR_s_gain_y0_hue_7         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_8         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_9         = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_10        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_2.bits.COLOR_s_gain_y0_hue_11        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_12        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_13        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_14        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_3.bits.COLOR_s_gain_y0_hue_15        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_16        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_17        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_18        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y0_4.bits.COLOR_s_gain_y0_hue_19        = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_0       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_1       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_2       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_0.bits.COLOR_s_gain_y64_hue_3       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_4       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_5       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_6       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_1.bits.COLOR_s_gain_y64_hue_7       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_8       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_9       = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_10      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_2.bits.COLOR_s_gain_y64_hue_11      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_12      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_13      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_14      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_3.bits.COLOR_s_gain_y64_hue_15      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_16      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_17      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_18      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y64_4.bits.COLOR_s_gain_y64_hue_19      = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_0.bits.COLOR_s_gain_y128_hue_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_1.bits.COLOR_s_gain_y128_hue_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_2.bits.COLOR_s_gain_y128_hue_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_3.bits.COLOR_s_gain_y128_hue_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y128_4.bits.COLOR_s_gain_y128_hue_19    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_0.bits.COLOR_s_gain_y192_hue_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_1.bits.COLOR_s_gain_y192_hue_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_2.bits.COLOR_s_gain_y192_hue_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_3.bits.COLOR_s_gain_y192_hue_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y192_4.bits.COLOR_s_gain_y192_hue_19    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_0     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_1     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_2     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_0.bits.COLOR_s_gain_y256_hue_3     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_4     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_5     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_6     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_1.bits.COLOR_s_gain_y256_hue_7     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_8     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_9     = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_10    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_2.bits.COLOR_s_gain_y256_hue_11    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_12    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_13    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_14    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_3.bits.COLOR_s_gain_y256_hue_15    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_16    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_17    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_18    = 128;
        LV_Up_CT_Up_Tbl.s_gain_by_y256_4.bits.COLOR_s_gain_y256_hue_19    = 128;

        // LV_Up_CT_Up_Tbl for test InterParamLSP
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_sth                      = 0;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_yth                      = 0;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_sslope                   = 127;
        LV_Up_CT_Up_Tbl.lsp_1.bits.COLOR_lsp_lire_yslope                   = 0;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_sslope                   = 127;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_sth                      = 0;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lsat_gain                     = 127;
        LV_Up_CT_Up_Tbl.lsp_2.bits.COLOR_lsp_lire_gain                     = 127;

        // LV_Up_CT_Up_Tbl for test InterParam3DLUT
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_ink_en                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_ink_en                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_ink_en                    = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_ink_delta_mode           = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_ink_ch                       = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_bypass                        = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_en                         = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w1_wgt_en                 = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_en                         = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w2_wgt_en                 = 0;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_en                         = 1;
        LV_Up_CT_Up_Tbl.cm_control.bits.COLOR_cm_w3_wgt_en                 = 1;

        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point1             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_1.bits.COLOR_cm_h_w1_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_point4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_0.bits.COLOR_cm_h_w1_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope0             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_2.bits.COLOR_cm_h_w1_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope3             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_3.bits.COLOR_cm_h_w1_slope5             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_lslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_hue_4.bits.COLOR_cm_h_w1_wgt_uslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point1            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point2            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_1.bits.COLOR_cm_y_w1_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_point4            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_0.bits.COLOR_cm_y_w1_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope0            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_2.bits.COLOR_cm_y_w1_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope2            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope3            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope4            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_3.bits.COLOR_cm_y_w1_slope5            = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_lslope        = 0;
        LV_Up_CT_Up_Tbl.cm_w1_luma_4.bits.COLOR_cm_y_w1_wgt_uslope        = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point1             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_1.bits.COLOR_cm_s_w1_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_point4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_0.bits.COLOR_cm_s_w1_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope0             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_2.bits.COLOR_cm_s_w1_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope2             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope3             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope4             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_3.bits.COLOR_cm_s_w1_slope5             = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_lslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w1_sat_4.bits.COLOR_cm_s_w1_wgt_uslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point1             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_1.bits.COLOR_cm_h_w2_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_point4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_0.bits.COLOR_cm_h_w2_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope0             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_2.bits.COLOR_cm_h_w2_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope3             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_3.bits.COLOR_cm_h_w2_slope5             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_lslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_hue_4.bits.COLOR_cm_h_w2_wgt_uslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point1            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point2            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_1.bits.COLOR_cm_y_w2_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_point4            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_0.bits.COLOR_cm_y_w2_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope0            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_2.bits.COLOR_cm_y_w2_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope2            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope3            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope4            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_3.bits.COLOR_cm_y_w2_slope5            = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_lslope        = 0;
        LV_Up_CT_Up_Tbl.cm_w2_luma_4.bits.COLOR_cm_y_w2_wgt_uslope        = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_l                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_point0              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point1             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_1.bits.COLOR_cm_s_w2_point3              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_point4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_0.bits.COLOR_cm_s_w2_u                  = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope0             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_2.bits.COLOR_cm_s_w2_slope1              = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope2             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope3             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope4             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_3.bits.COLOR_cm_s_w2_slope5             = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_lslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w2_sat_4.bits.COLOR_cm_s_w2_wgt_uslope         = 0;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_l                  = 806;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_point0              = 829;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point1             = 852;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point2             = 875;
        LV_Up_CT_Up_Tbl.cm_w3_hue_1.bits.COLOR_cm_h_w3_point3              = 898;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_point4             = 921;
        LV_Up_CT_Up_Tbl.cm_w3_hue_0.bits.COLOR_cm_h_w3_u                  = 944;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope0             = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_2.bits.COLOR_cm_h_w3_slope1              = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope2             = 230;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope3             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope4             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_3.bits.COLOR_cm_h_w3_slope5             = 26;
        LV_Up_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_lslope         = 16;
        LV_Up_CT_Up_Tbl.cm_w3_hue_4.bits.COLOR_cm_h_w3_wgt_uslope         = 16;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_l                  = 421;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_point0              = 521;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point1            = 621;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point2            = 722;
        LV_Up_CT_Up_Tbl.cm_w3_luma_1.bits.COLOR_cm_y_w3_point3              = 822;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_point4            = 922;
        LV_Up_CT_Up_Tbl.cm_w3_luma_0.bits.COLOR_cm_y_w3_u                  = 1023;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope0            = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_2.bits.COLOR_cm_y_w3_slope1              = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope2            = 88;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope3            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope4            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_3.bits.COLOR_cm_y_w3_slope5            = 168;
        LV_Up_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_lslope        = 28;
        LV_Up_CT_Up_Tbl.cm_w3_luma_4.bits.COLOR_cm_y_w3_wgt_uslope        = 28;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_l                  = 5;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_point0              = 22;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point1             = 39;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point2             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_1.bits.COLOR_cm_s_w3_point3              = 73;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_point4             = 90;
        LV_Up_CT_Up_Tbl.cm_w3_sat_0.bits.COLOR_cm_s_w3_u                  = 107;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope0             = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_2.bits.COLOR_cm_s_w3_slope1              = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope2             = 200;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope3             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope4             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_3.bits.COLOR_cm_s_w3_slope5             = 56;
        LV_Up_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_lslope         = 41;
        LV_Up_CT_Up_Tbl.cm_w3_sat_4.bits.COLOR_cm_s_w3_wgt_uslope         = 41;
    }
    else // SColorUnitTest == 0
    {
        // Mired color temperature
        if (u4RealCT == 0) u4RealCT = 1;
        if (u4UpperCT == 0) u4UpperCT = 1;
        if (u4LowerCT == 0) u4LowerCT = 1;

        Param.u4RealMired  = 1000000/u4RealCT;
        Param.u4UpperMired = 1000000/u4UpperCT;
        Param.u4LowerMired = 1000000/u4LowerCT;

        //LV tuning
        Param.i4RealLV  = i4RealLV;
        Param.i4LowerLV = i4LowerLV;
        Param.i4UpperLV = i4UpperLV;
    }

    //MUINT8 Offset = ParamsInRam.u4DC_Offset;
    Param.u4LVOfst = ParamsInRam.u4DC_Offset;

    // LSP
    MUINT32 lsp_th = ParamsInRam.u4LSP_LV_TH;
    Param.bEnableLSP = MFALSE;

    COLOR_LOG_IF(debugDump, "[%s()] LSP = (%d, %d)\n", __FUNCTION__, (i4RealLV <= lsp_th), rSmoothColor_Prv.cfg_main.bits.COLOR_lsp_en);

    if (i4RealLV <= lsp_th && rSmoothColor_Prv.cfg_main.bits.COLOR_lsp_en == 1)
    {
        Param.bEnableLSP = MTRUE;
    }

    // Capture mode
    Param.bIsCapture = IsCapture;
    if (Param.bIsCapture == MTRUE)
    {
        COLOR_LOG_IF(debugDump, "[%s()] Capture mode!!\n", __FUNCTION__);
    }

    // Interpolation start
    if (IsLock == 1)
    {
        COLOR_LOG_IF(IsLock, "[%s()] Force Lock!!\n", __FUNCTION__);
    }
    else // Interpolated mode
    {
        COLOR_LOG_IF(debugDump, "[%s()] Interpolated mode !!\n", __FUNCTION__);

        if (SColorUnitTest == 1)
        {
            // Global Saturation/Brightness/Contrast
            InterParamGlobal(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Y
            InterParamPartialY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Hue
            InterParamPartialH(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // Partial Sat
            InterParamPartialS(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // S gain by Y
            InterParamSGainByY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // LSP
            InterParamLSP(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);

            // CM W1/W2/W3
            InterParam3DLUT(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 0);
        }
        else // bSmoothColorUnitTest == 0
        {
            // Global Saturation/Brightness/Contrast
            InterParamGlobal(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Y
            InterParamPartialY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Hue
            InterParamPartialH(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // Partial Sat
            InterParamPartialS(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // S gain by Y
            InterParamSGainByY(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // LSP
            InterParamLSP(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);

            // CM W1/W2/W3
            InterParam3DLUT(Param, LV_Lo_CT_Lo_Tbl, LV_Lo_CT_Up_Tbl, LV_Up_CT_Lo_Tbl, LV_Up_CT_Up_Tbl, rSmoothColor_Prv, 1);
        }
    }
/*
    if if (Param.bIsCapture == MTRUE)
    {
        FD_Color( u4RealCT,
                  i4RealLV,
                  rNVRAM_COLORS_LV_Lo_CT_Lo.FD_COLOR,
                  rNVRAM_COLORS_LV_Lo_CT_Up.FD_COLOR,
                  rNVRAM_COLORS_LV_Up_CT_Lo.FD_COLOR,
                  rNVRAM_COLORS_LV_Up_CT_Up.FD_COLOR,
                  rFdInfo,
                  rSmoothColor_Prv);
    }
*/
    memcpy(&rSmoothCOLOR_TBL, &rSmoothColor_Prv, sizeof(ISP_NVRAM_COLOR_T));

    // Clear initialize flag
    rFirstTimeBoot = MFALSE;
    //UTIL_TRACE_END();
}

#endif

