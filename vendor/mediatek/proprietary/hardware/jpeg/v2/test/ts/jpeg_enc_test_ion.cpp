/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#include <stdio.h>
#include <cutils/log.h>
#include <cutils/pmem.h>
//#include <cutils/memutil.h>

#include <linux/fs.h>
#include <linux/delay.h>
#include <linux/mm.h>
#include <linux/slab.h>


#include <sys/mman.h>
#include <sys/ioctl.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <sched.h>
#include <fcntl.h>
#include <asm/io.h>


#include <linux/ion.h>
#include <ion_drv.h>

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>


#include "jpeg_hal.h"
 
#define xlog(...) \
        do { \
            LOGD(__VA_ARGS__); \
        } while (0)

#undef LOG_TAG
#define LOG_TAG "jpeg_test"

extern unsigned char rgb565_48_64_file[];

//#define BUFFER_SIZE 6144
//#define BUFFER_SIZE (720*480*4)
//#define BUFFER_SIZE (800*600*4)
#define BUFFER_SIZE (1664*600)
#define HW_ALIGN (64)


#define SRC_HEX

#undef xlog
#define xlog(...) printf(__VA_ARGS__)

typedef enum
{
    YUYV = 0,
    YVYU,
    NV12,
    NV21
} JpegDrvEncYUVFormat;


#define MY_FGETC(pFile)  ( ( (t = fgetc(pFile)) >= 'a') ? t -'a' + 10 : t - '0' )

#define TO_CEIL(x,a) ( (((unsigned int)x) + (((unsigned int)a)-1)) & ~(((unsigned int)a)-1) )

int main()
{
    enum MEM_TYPE{
      MEM_TYPE_PMEM, 
      MEM_TYPE_M4U, 
      MEM_TYPE_ION,       
    };
    
    int src_fd, dst_fd, dst_size;
    unsigned int src_pa = 0, dst_pa = 0; 
    unsigned int enc_size;
    unsigned char *src_va;
    unsigned char *dst_va;
    unsigned int dst_offset =0;

    unsigned int w, h;
    unsigned int srcFormat = YUYV ;  //NV12 ;//
    unsigned int test_type = MEM_TYPE_M4U ;//MEM_TYPE_ION;//



    w = 800;//720;//48;
    h = 600;//480;//64;
    
    printf("otis hell world %d %d !!\n", w, h);     
//    return 0;
    
  
   
 
//
    FILE *srcImageFile;
    unsigned long index;

    unsigned int raw_data_u, raw_data_v, raw_data_u1, raw_data_v1;
    unsigned int raw_data_y0, raw_data_y1, raw_data_y2,raw_data_y3;
    unsigned int write_data ;
    unsigned int d0 , d1, d2, d3, d4, d5, d6, d7, d8;
    unsigned int t ;
    unsigned char* srcAddrVA ;
    const char* srcImagePath = "/data/otis/yuv_src.hex";

    unsigned int height = h;
    unsigned int imgStride = 0 ;
    unsigned int memStride = 0 ;
    unsigned int heightStride = TO_CEIL((h), (srcFormat == YUYV)? 8 : 16);
    int chromaFD ;
    unsigned int     srcBufferSize , chromaBufferSize ;
    unsigned int    chromaAddrPA = 0;
    unsigned char* chromaAddrVA = NULL; 
    unsigned int width = w;
    unsigned int width2;
    int ionFD ;
    ion_allocation_data  src_ion_alloc_data ;
    ion_allocation_data  dst_ion_alloc_data ;
    ion_fd_data src_fd_data;    
    ion_fd_data dst_fd_data;    
    ion_handle_data handle_data;
    


    JpgEncHal* jpgEncoder = new JpgEncHal();

    if(!jpgEncoder->lock())
    {
        xlog("can't lock resource");
        return -1;
    }


    if(srcFormat == YUYV || srcFormat == YVYU)
    {
      jpgEncoder->setEncSize(w,h, JpgEncHal::kENC_YUY2_Format) ;
      //jpgEncoder->setEncFormat(JpgEncHal::kENC_YUY2_Format);        //jpgEncoder->setEncFormat(JpgEncHal::kYUV_420_Format);
      //jpgEncoder->setSrcFormat(JpgEncHal::kYUY2_Pack_Format);       //jpgEncoder->setSrcFormat(JpgEncHal::kNV21_Format);  
      jpgEncoder->setQuality(50);  //jpgEncoder->setQuality(95);
    }else
    {
      jpgEncoder->setEncSize(w,h, JpgEncHal::kENC_NV12_Format) ;
      //jpgEncoder->setEncFormat(JpgEncHal::kENC_NV12_Format);        //jpgEncoder->setEncFormat(JpgEncHal::kYUV_420_Format);
      //jpgEncoder->setSrcFormat(JpgEncHal::kYUY2_Pack_Format);       //jpgEncoder->setSrcFormat(JpgEncHal::kNV21_Format);  
      jpgEncoder->setQuality(70);  
    }

#if 1

    width2 = ((width+1)>>1) << 1;

    if (srcFormat == YUYV || srcFormat == YVYU)
    {
        imgStride = TO_CEIL((width2 << 1), 32) ; 
        heightStride = TO_CEIL((height), 8) ;  


    }
    else if (srcFormat == NV12 || srcFormat == NV21)
    {        
        imgStride = TO_CEIL((width2), 16) ; 
        heightStride = TO_CEIL((height), 16) ;         
    }
    memStride        = jpgEncoder->getSrcBufMinStride();
    srcBufferSize    = jpgEncoder->getSrcBufMinSize() + HW_ALIGN;
    chromaBufferSize = jpgEncoder->getSrcCbCrBufMinSize() + HW_ALIGN;

#else
    width2 = ((width+1)>>1) << 1;

    if (srcFormat == YUYV || srcFormat == YVYU)
    {
        imgStride = TO_CEIL((width2 << 1), 32) ; //(((width2 << 1)+31)&~31); // multiple of 32
        memStride = TO_CEIL((width2 << 1), 128) ; //(((width << 1)+127)&~127); // multiple of 128  
       
        
        heightStride = TO_CEIL((height), 8) ; //((height+7)&~7); // multiple of 8        

        srcBufferSize = memStride * heightStride;
    }
    else if (srcFormat == NV12 || srcFormat == NV21)
    {        
        imgStride = TO_CEIL((width2), 16) ; //((width2+15)&~15); // multiple of 16
        
        memStride = TO_CEIL((width2), 128) ; //((width2+127)&~127); // multiple of 128                
        
        heightStride = TO_CEIL((height), 16) ; //((height+15)&~15); // multiple of 16 
        
        srcBufferSize = memStride * heightStride;        
        chromaBufferSize = memStride * heightStride / 2;
    }
#endif

 

    if(test_type == MEM_TYPE_PMEM){
      // allocate PMEM
      src_va = (unsigned char *)pmem_alloc_sync(srcBufferSize /*BUFFER_SIZE + 16*/, &src_fd);
    }else if(test_type == MEM_TYPE_M4U){
      
      src_va = (unsigned char *)malloc(srcBufferSize );
      src_va = (unsigned char*)TO_CEIL(src_va, 16) ;
    }else if(test_type == MEM_TYPE_ION){
#ifdef TEST_ION
      ionFD = open("/dev/ion", O_RDONLY);
      if( ionFD < 0)
      {
        printf("IMG_ION: open fd fail!!\n");
        return false;
      }

      src_ion_alloc_data.len = srcBufferSize ;
      src_ion_alloc_data.align =  256 ;
      src_ion_alloc_data.flags =  1 << ION_HEAP_ID_MULTIMEDIA ;

        
      if(ioctl(ionFD, ION_IOC_ALLOC, &src_ion_alloc_data))
      {
        printf("IMG_ION: CONFIG module fail!!\n");
        return false;
      }
        

      src_fd_data.handle = src_ion_alloc_data.handle ;

      if(ioctl(ionFD, ION_IOC_MAP, &src_fd_data))
      {
        printf("IMG_ION: MAP FD fail!!\n");
        return false;
      }

      xlog("src fd %d , handle: 0x%x, L:%d!!\n", src_fd_data.fd , src_ion_alloc_data.handle, __LINE__);
      jpgEncoder->setIonMode(1);
      jpgEncoder->setSrcFD(src_fd_data.fd, -1);


      // get virtual address
      src_va = (unsigned char *)mmap(0, srcBufferSize, PROT_READ|PROT_WRITE, MAP_SHARED, src_fd_data.fd, 0);
      if((src_va == NULL) || (src_va == (void*)(-1)))
      {
        xlog("IMG_ION: MMAP fail, fd %d, va %x, size %x!!\n", src_fd_data.fd, src_va, srcBufferSize);
        src_va = NULL;
        return false ;
      }



#endif
    }


    
    printf("go %d %x!!\n", __LINE__, src_va);     
    
    if(src_va == NULL)
    {
        xlog("Can not allocate memory\n");
        return -1;
    }

    if(test_type == MEM_TYPE_PMEM){    
      src_pa = (UINT32)pmem_get_phys(src_fd);
      //memcpy(src_va, rgb565_48_64_file, BUFFER_SIZE);
      //memcpy(src_va, rgb565_48_64_file, 6144);
    }
    printf("go %d !!\n", __LINE__);  



    

#ifdef SRC_HEX

    srcAddrVA = src_va ;

    memset(srcAddrVA, 0, sizeof(char)*(srcBufferSize /*BUFFER_SIZE + 16*/));

    printf("go %d !!\n", __LINE__);  


    srcImageFile = fopen(srcImagePath, "rt");
    for (;srcImageFile == NULL;)
    {
        printf("No src image binary file.\n");
        for( unsigned int cnt=0; cnt<100000 ;cnt++ );
        srcImageFile = fopen(srcImagePath, "rt");
        return 0;
    }
    
    if (srcFormat == YUYV || srcFormat == YVYU)
    {

        for (unsigned int i=0; i<height; i++)
        {

            for(unsigned int xi =0;xi < (imgStride);xi+=4){
               d0 =  MY_FGETC(srcImageFile) ; 
               d1 =  MY_FGETC(srcImageFile) ; 
               d2 =  MY_FGETC(srcImageFile) ; 
               d3 =  MY_FGETC(srcImageFile) ; 
               d4 =  MY_FGETC(srcImageFile) ; 
               d5 =  MY_FGETC(srcImageFile) ; 
               d6 =  MY_FGETC(srcImageFile) ; 
               d7 =  MY_FGETC(srcImageFile) ;  
               d8 =  fgetc(srcImageFile) ;
               
              raw_data_v = (d0<<4) + d1 ;
              raw_data_y1 = (d2<<4) + d3 ;
              raw_data_u = (d4<<4) + d5 ;
              raw_data_y0 = (d6<<4) + d7 ;
              *(unsigned char *)(srcAddrVA+ i * memStride + xi    ) = raw_data_y0 ;
              *(unsigned char *)(srcAddrVA+ i * memStride + xi + 1) = (srcFormat == YUYV)? raw_data_u : raw_data_v ;
              *(unsigned char *)(srcAddrVA+ i * memStride + xi + 2) = raw_data_y1 ;
              *(unsigned char *)(srcAddrVA+ i * memStride + xi + 3) = (srcFormat == YUYV)? raw_data_v : raw_data_u;
            }

        }
    } else if(srcFormat == NV12 || srcFormat == NV21)
    {
    printf("go %d !!\n", __LINE__);  

      
        for (int i=0; i<heightStride; i++)
        {         

           for(int xi =0;xi < (imgStride);xi+=4)
           {
              d0 =  MY_FGETC(srcImageFile) ; 
              d1 =  MY_FGETC(srcImageFile) ; 
              d2 =  MY_FGETC(srcImageFile) ; 
              d3 =  MY_FGETC(srcImageFile) ; 
              d4 =  MY_FGETC(srcImageFile) ; 
              d5 =  MY_FGETC(srcImageFile) ; 
              d6 =  MY_FGETC(srcImageFile) ; 
              d7 =  MY_FGETC(srcImageFile) ; 
              d8 =  fgetc(srcImageFile) ;
              
             raw_data_y3 = (d0<<4) + d1 ;
             raw_data_y2 = (d2<<4) + d3 ;
             raw_data_y1 = (d4<<4) + d5 ;
             raw_data_y0 = (d6<<4) + d7 ;
             
             *(unsigned char *)(srcAddrVA+ i * memStride + xi    ) = raw_data_y0 ;
             *(unsigned char *)(srcAddrVA+ i * memStride + xi + 1) = raw_data_y1 ;
             *(unsigned char *)(srcAddrVA+ i * memStride + xi + 2) = raw_data_y2 ;
             *(unsigned char *)(srcAddrVA+ i * memStride + xi + 3) = raw_data_y3 ;
           }
              
        }    
    printf("go %d !!\n", __LINE__);  


        /* Chroma Buffer*/
        
        
        chromaBufferSize = memStride * heightStride / 2;
        if(test_type == MEM_TYPE_PMEM){            
          chromaAddrVA = (unsigned char*)pmem_alloc_sync(chromaBufferSize, &chromaFD);
        }else if(test_type == MEM_TYPE_M4U){
          chromaAddrVA = (unsigned char*)malloc(chromaBufferSize);
          chromaAddrVA = (unsigned char*)TO_CEIL(chromaAddrVA, 16) ;
        }
            
        if(chromaAddrVA == NULL)
        {
            printf("Can not allocate src chroma buffer!!\n");
            //pmem_free(srcAddrVA, srcBufferSize, srcFD);
            return 0;
        }         
        if(test_type == MEM_TYPE_PMEM){        
          chromaAddrPA = (unsigned int)pmem_get_phys(chromaFD);
        }
            
        memset(chromaAddrVA, 0, sizeof(char) * chromaBufferSize);
        
        for (int i=0; i<(heightStride>>1); i++)
        {        
            for(int xi =0;xi < (imgStride);xi+=4)
            {
               d0 =  MY_FGETC(srcImageFile) ; 
               d1 =  MY_FGETC(srcImageFile) ; 
               d2 =  MY_FGETC(srcImageFile) ; 
               d3 =  MY_FGETC(srcImageFile) ; 
               d4 =  MY_FGETC(srcImageFile) ; 
               d5 =  MY_FGETC(srcImageFile) ; 
               d6 =  MY_FGETC(srcImageFile) ; 
               d7 =  MY_FGETC(srcImageFile) ;  
               d8 =  fgetc(srcImageFile) ;
               
               raw_data_v1 = (d0<<4) + d1 ;
               raw_data_u1 = (d2<<4) + d3 ;
               raw_data_v = (d4<<4) + d5 ;
               raw_data_u = (d6<<4) + d7 ;
               
               *(unsigned char *)(chromaAddrVA + i * memStride + xi    ) = (srcFormat == NV12)?  raw_data_u : raw_data_v  ;
               *(unsigned char *)(chromaAddrVA + i * memStride + xi + 1) = (srcFormat == NV12)?  raw_data_v : raw_data_u  ;
               *(unsigned char *)(chromaAddrVA + i * memStride + xi + 2) = (srcFormat == NV12)? raw_data_u1 : raw_data_v1 ;
               *(unsigned char *)(chromaAddrVA + i * memStride + xi + 3) = (srcFormat == NV12)? raw_data_v1 : raw_data_u1 ;
            }  
        } 
    }
    printf("go %d !!\n", __LINE__);  



#else
    srcImageFile = fopen("/data/otis/Before.raw", "r");
    fread(src_va , 1 , BUFFER_SIZE , srcImageFile);
    fclose(srcImageFile);
#endif 
    printf("go %d !!\n", __LINE__);     
    
    
    

//    fp = fopen("/data/otis/ttt.raw", "w");
//    fwrite(src_va , 1 , 6144 , fp);
//    fclose(fp);
//

#if 1
    dst_size = BUFFER_SIZE;

    if(test_type == MEM_TYPE_ION){
#ifdef TEST_ION
      dst_ion_alloc_data.len = dst_size ;
      dst_ion_alloc_data.align =  256 ;
      dst_ion_alloc_data.flags =  1 << ION_HEAP_ID_MULTIMEDIA ;

        
      if(ioctl(ionFD, ION_IOC_ALLOC, &dst_ion_alloc_data))
      {
        printf("IMG_ION: CONFIG module fail!!\n");
        return false;
      }
        

      dst_fd_data.handle = dst_ion_alloc_data.handle ;

      if(ioctl(ionFD, ION_IOC_MAP, &dst_fd_data))
      {
        printf("IMG_ION: MAP FD fail!!\n");
        return false;
      }

      xlog("dst fd %d , handle: 0x%x, L:%d!!\n", dst_fd_data.fd , dst_ion_alloc_data.handle, __LINE__);
      jpgEncoder->setDstFD(dst_fd_data.fd);


      // get virtual address
      dst_va = (unsigned char *)mmap(0, dst_size, PROT_READ|PROT_WRITE, MAP_SHARED, dst_fd_data.fd, 0);
      if((dst_va == NULL) || (dst_va == (void*)(-1)))
      {
        xlog("IMG_ION: MMAP fail, fd %d, va %x, size %x!!\n", dst_fd_data.fd, dst_va, dst_size);
        dst_va = NULL;
        return false ;
      }


#endif
    }else{
        if(test_type == MEM_TYPE_PMEM){
          dst_va = (unsigned char *)pmem_alloc_sync(dst_size, &dst_fd);
        }else if(test_type == MEM_TYPE_M4U){
          dst_va = (unsigned char *)malloc(dst_size);
        }
        
        memset(dst_va, 0, sizeof(char) * dst_size);
        if(dst_va == NULL)
        {
            xlog("Can not allocate memory\n");
            return -1;
        }
        if(test_type == MEM_TYPE_PMEM){
          dst_pa = (unsigned int)pmem_get_phys(dst_fd);
        }
        
        xlog("src va:0x%x, pa:0x%x dst va:0x%x, pa:0x%x\n", (unsigned long)src_va , src_pa, (unsigned long)dst_va , dst_pa);
    }
#else
    dst_size = BUFFER_SIZE;
    dst_va = (unsigned char *)malloc(dst_size);
    memset(dst_va, 0xFF, dst_size);

    xlog("src va:0x%x, pa:0x%x dst va:0x%x", (unsigned int)src_va , src_pa, (unsigned int)dst_va);
    dst_pa = (unsigned int)dst_va;
#endif



    

#if 0
    jpgEncoder->setSrcAddr((void *)src_pa, srcBufferSize,(void *)chromaAddrPA,chromaBufferSize );
    jpgEncoder->setDstAddr((void *)dst_pa);
#else
    dst_offset = 0 ;
    if(test_type != MEM_TYPE_ION){
      jpgEncoder->setSrcAddr((void *)src_va, (void *)chromaAddrVA);
      jpgEncoder->setDstAddr((void *)dst_va + dst_offset);
    }
    jpgEncoder->setSrcBufSize(jpgEncoder->getSrcBufMinStride() ,srcBufferSize, chromaBufferSize);
#endif    
    jpgEncoder->setDstSize(dst_size);
    
    jpgEncoder->enableSOI(1);

    if(jpgEncoder->start(&enc_size)) 
    {
        FILE *fp;
        xlog("encode SUCCESS, size %x~~~\n", enc_size);        
        fp = fopen("/data/otis/ttt.jpg", "w");
        int index;
        for(index = 0 ; index < enc_size ; index++)
        {
            fprintf(fp, "%c", dst_va[index]);
        }
        fclose(fp);
    }
    else
    {
        xlog("encode FAIL, size %x~~~\n", enc_size);
        FILE *fp;
        fp = fopen("/data/otis/ttt.jpg", "w");
        int index;
        for(index = 0 ; (index + dst_offset)< enc_size ; index++)
        {
            fprintf(fp, "%c", dst_va[index+ dst_offset]);
        }
        fclose(fp);        
    }
    
    jpgEncoder->unlock();
    if(test_type == MEM_TYPE_PMEM){
      pmem_free(src_va , srcBufferSize /*BUFFER_SIZE + 16*/ , src_fd);
      if(chromaAddrVA )
        pmem_free(chromaAddrVA , chromaBufferSize  , chromaFD);
      pmem_free(dst_va , dst_size , dst_fd);
    }else if(test_type == MEM_TYPE_ION){      
#ifdef TEST_ION
      if(src_va != NULL)
          munmap(src_va, srcBufferSize);
      src_va = NULL; 
      if(dst_va != NULL)
          munmap(dst_va, dst_size);
      dst_va = NULL;       
      
      
      if(src_fd_data.fd > 0)close(src_fd_data.fd);
      if(dst_fd_data.fd > 0)close(dst_fd_data.fd);

      handle_data.handle = src_ion_alloc_data.handle ;
      if(ioctl(ionFD, ION_IOC_FREE, &handle_data))
      {
        printf("IMG_ION: FREE handle fail, L:%d!!\n", __LINE__);
        return false;
      }

      handle_data.handle = dst_ion_alloc_data.handle ;
      if(ioctl(ionFD, ION_IOC_FREE, &handle_data))
      {
        printf("IMG_ION: FREE handle fail, L:%d!!\n", __LINE__);
        return false;
      }

         
      if(ionFD > 0)close(ionFD);        
#endif         
    }

//    free(src_va);
//    if(chromaAddrVA )
//      free(chromaAddrVA );
//    free(dst_va);


    
    delete jpgEncoder;
    return 0;
}

unsigned char rgb565_48_64_file[6144]=
{0x67, 0x09, 0x27, 0x01, 0xE8, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0x08, 0x01, 
 0x06, 0x01, 0x06, 0x01, 0x08, 0x01, 0x07, 0x01, 0xE8, 0x00, 0x08, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0x07, 0x01, 0xE9, 0x00, 0xE9, 0x00, 
 0xE7, 0x00, 0xE7, 0x00, 0xE8, 0x00, 0x08, 0x01, 0x50, 0x00, 0x0E, 0x00, 
 0x08, 0x00, 0x28, 0x00, 0x08, 0x00, 0x09, 0x00, 0x29, 0x00, 0x08, 0x00, 
 0x70, 0x08, 0x0E, 0x00, 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x0B, 0x00, 0x4C, 0x00, 0x6C, 0x08, 0x0A, 0x00, 0x40, 0x00, 0x40, 0x00, 
 0x60, 0x00, 0x40, 0x00, 0x06, 0x00, 0xA9, 0x08, 0xAC, 0x00, 0x2A, 0x00, 
 0x46, 0x01, 0x25, 0x01, 0xE7, 0x00, 0xE8, 0x00, 0x08, 0x01, 0x08, 0x01, 
 0x06, 0x01, 0x06, 0x01, 0x08, 0x01, 0x08, 0x01, 0xE8, 0x00, 0xE8, 0x00, 
 0x07, 0x01, 0x07, 0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x01, 0x08, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 0x30, 0x00, 0x0F, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x46, 0x00, 0x46, 0x00, 
 0x70, 0x00, 0x0E, 0x00, 0x47, 0x00, 0x47, 0x00, 0x28, 0x00, 0x48, 0x00, 
 0x2B, 0x00, 0x6C, 0x00, 0x8C, 0x08, 0x0A, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x27, 0x00, 0xA9, 0x08, 0xAD, 0x00, 0x2B, 0x00, 
 0x24, 0x01, 0x23, 0x01, 0xE7, 0x00, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0xE8, 0x00, 0xE8, 0x00, 0xE9, 0x00, 0xE8, 0x00, 
 0x08, 0x01, 0x08, 0x01, 0x08, 0x01, 0xE8, 0x00, 0x06, 0x01, 0xE6, 0x00, 
 0x06, 0x01, 0x27, 0x01, 0xE9, 0x00, 0xE9, 0x00, 0x50, 0x00, 0x0E, 0x00, 
 0x29, 0x00, 0x29, 0x00, 0x09, 0x00, 0x09, 0x00, 0x2A, 0x00, 0x09, 0x00, 
 0x50, 0x00, 0x0F, 0x00, 0x29, 0x00, 0x49, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x2A, 0x00, 0x8C, 0x00, 0x8D, 0x08, 0x0B, 0x00, 0x61, 0x00, 0x20, 0x00, 
 0x41, 0x00, 0x41, 0x00, 0x27, 0x00, 0xA9, 0x00, 0xAD, 0x00, 0x2B, 0x00, 
 0x23, 0x01, 0x23, 0x01, 0x07, 0x01, 0x07, 0x01, 0x08, 0x01, 0x08, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0xE8, 0x00, 0x08, 0x01, 0xE8, 0x00, 0xE8, 0x00, 
 0x07, 0x01, 0x08, 0x01, 0x08, 0x01, 0xE7, 0x00, 0x08, 0x01, 0xE7, 0x00, 
 0x06, 0x01, 0x26, 0x01, 0xE6, 0x00, 0x06, 0x01, 0x52, 0x00, 0x10, 0x00, 
 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x09, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x50, 0x00, 0x0F, 0x00, 0x45, 0x00, 0x46, 0x00, 0x65, 0x00, 0x45, 0x00, 
 0x0C, 0x00, 0x6D, 0x00, 0x8D, 0x08, 0x0A, 0x00, 0x61, 0x00, 0x20, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x05, 0x00, 0xA8, 0x08, 0xCC, 0x08, 0x29, 0x00, 
 0x23, 0x01, 0x23, 0x01, 0x08, 0x01, 0x08, 0x01, 0xE8, 0x00, 0xE8, 0x00, 
 0xE7, 0x00, 0x07, 0x01, 0xE8, 0x00, 0x08, 0x01, 0x08, 0x01, 0xE8, 0x00, 
 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0x09, 0x01, 0x09, 0x01, 
 0x08, 0x01, 0xE8, 0x00, 0xA9, 0x00, 0xEA, 0x00, 0x51, 0x08, 0x0E, 0x00, 
 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x07, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x4F, 0x08, 0x0E, 0x00, 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x2B, 0x00, 0x6C, 0x00, 0x8C, 0x08, 0x09, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x62, 0x00, 0x21, 0x00, 0x07, 0x00, 0xAA, 0x08, 0xCB, 0x08, 0x09, 0x00, 
 0x44, 0x01, 0x24, 0x01, 0xE8, 0x00, 0xE8, 0x00, 0xE9, 0x00, 0xE8, 0x00, 
 0x07, 0x01, 0x07, 0x01, 0x08, 0x01, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0xE8, 0x00, 0x08, 0x01, 0x06, 0x01, 0x06, 0x01, 
 0x06, 0x01, 0xE6, 0x00, 0xC8, 0x00, 0xE9, 0x00, 0x30, 0x00, 0x0E, 0x00, 
 0x26, 0x00, 0x06, 0x00, 0x26, 0x00, 0x06, 0x00, 0x07, 0x00, 0x28, 0x00, 
 0x31, 0x00, 0x10, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x49, 0x00, 0x6A, 0x00, 0x6D, 0x08, 0x0B, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x41, 0x00, 0x20, 0x00, 0x06, 0x00, 0xA8, 0x08, 0x8E, 0x08, 0x0C, 0x00, 
 0x24, 0x01, 0x23, 0x01, 0xE7, 0x00, 0x07, 0x01, 0x08, 0x01, 0xE8, 0x00, 
 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0x08, 0x01, 
 0x08, 0x01, 0xE7, 0x00, 0xC9, 0x00, 0xE9, 0x00, 0xEA, 0x00, 0x2B, 0x01, 
 0x07, 0x01, 0x07, 0x01, 0x46, 0x01, 0x05, 0x01, 0x10, 0x00, 0x10, 0x00, 
 0x47, 0x00, 0x27, 0x00, 0x49, 0x00, 0x08, 0x00, 0x47, 0x00, 0x67, 0x00, 
 0x31, 0x00, 0x10, 0x00, 0x48, 0x00, 0x48, 0x00, 0x47, 0x00, 0x68, 0x00, 
 0x2D, 0x00, 0x4E, 0x00, 0x8D, 0x00, 0x0B, 0x00, 0x41, 0x00, 0x61, 0x00, 
 0x80, 0x00, 0x60, 0x00, 0x67, 0x00, 0xA9, 0x00, 0x8B, 0x00, 0x4B, 0x00, 
 0x43, 0x01, 0x23, 0x01, 0x07, 0x01, 0x07, 0x01, 0x08, 0x01, 0xE8, 0x00, 
 0x06, 0x01, 0x06, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE8, 0x00, 0x08, 0x01, 
 0xE9, 0x00, 0xC8, 0x00, 0xAA, 0x00, 0xEB, 0x00, 0xD8, 0x00, 0x18, 0x09, 
 0xF5, 0x00, 0xF5, 0x00, 0xD8, 0x08, 0x35, 0x00, 0x0A, 0x00, 0x4B, 0x00, 
 0x11, 0x00, 0x11, 0x00, 0x30, 0x08, 0x0F, 0x00, 0x14, 0x00, 0x14, 0x00, 
 0x8B, 0x00, 0x4A, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x4D, 0x00, 0x6D, 0x00, 
 0x15, 0x00, 0x15, 0x00, 0xAB, 0x00, 0x6A, 0x00, 0x4F, 0x00, 0x6F, 0x08, 
 0x4E, 0x00, 0x2E, 0x00, 0x34, 0x00, 0x34, 0x00, 0xC3, 0x00, 0xC3, 0x00, 
 0x6D, 0x01, 0xCB, 0x00, 0x06, 0x01, 0x06, 0x01, 0x27, 0x01, 0x07, 0x01, 
 0x08, 0x01, 0x08, 0x01, 0xE8, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0xE8, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x48, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x8F, 0x09, 0xEC, 0x00, 0x06, 0x01, 0x06, 0x01, 0x07, 0x01, 0xE7, 0x00, 
 0x08, 0x01, 0x08, 0x01, 0xE7, 0x00, 0xE7, 0x00, 0xE8, 0x00, 0xE8, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x48, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xB1, 0x09, 0xEE, 0x00, 0x07, 0x01, 0xE7, 0x00, 0x07, 0x01, 0xE7, 0x00, 
 0x08, 0x01, 0x08, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x49, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xB1, 0x09, 0xEE, 0x00, 0xE8, 0x00, 0xE7, 0x00, 0x07, 0x01, 0x07, 0x01, 
 0x08, 0x01, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x49, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x92, 0x09, 0xCF, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0x08, 0x01, 0x07, 0x01, 
 0x28, 0x01, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x49, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x91, 0x09, 0xCE, 0x00, 0xE8, 0x00, 0xE8, 0x00, 0x08, 0x01, 0x07, 0x01, 
 0x08, 0x01, 0x07, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 
 0x08, 0x01, 0xE8, 0x00, 0x49, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xB1, 0x09, 0xEE, 0x00, 0xE7, 0x00, 0xE7, 0x00, 0x08, 0x01, 0xE7, 0x00, 
 0x08, 0x01, 0x08, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 0xE7, 0x00, 
 0x08, 0x01, 0xE7, 0x00, 0x48, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xB0, 0x09, 0xED, 0x00, 0x07, 0x01, 0xE7, 0x00, 0x08, 0x01, 0xE7, 0x00, 
 0x08, 0x01, 0x08, 0x01, 0xE7, 0x00, 0xE7, 0x00, 0xE8, 0x00, 0xE8, 0x00, 
 0x08, 0x01, 0xE7, 0x00, 0x48, 0x00, 0x06, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x27, 0x00, 0x28, 0x00, 0x6D, 0x08, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 
 0x8D, 0x08, 0x0A, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x44, 0x00, 0x64, 0x00, 0xCD, 0x00, 0x2A, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x43, 0x00, 0x84, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xB0, 0x01, 0xED, 0x00, 0x09, 0x01, 0xE8, 0x00, 0x29, 0x01, 0xE8, 0x00, 
 0x07, 0x01, 0x47, 0x01, 0x05, 0x01, 0x06, 0x01, 0x08, 0x01, 0x08, 0x01, 
 0x09, 0x01, 0xC8, 0x00, 0x69, 0x00, 0x07, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x47, 0x00, 0x26, 0x00, 0x28, 0x00, 0x28, 0x00, 0x4D, 0x00, 0x0C, 0x00, 
 0x46, 0x00, 0x46, 0x00, 0x65, 0x00, 0x45, 0x00, 0x4A, 0x00, 0x4A, 0x00, 
 0x4D, 0x00, 0x0C, 0x00, 0x40, 0x00, 0x61, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x42, 0x00, 0x83, 0x08, 0x4D, 0x00, 0x0C, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x63, 0x00, 0xC4, 0x08, 0x54, 0x00, 0x54, 0x00, 
 0xB1, 0x09, 0xEE, 0x00, 0x28, 0x01, 0xC6, 0x00, 0x08, 0x01, 0x08, 0x01, 
 0x0C, 0x01, 0xEC, 0x00, 0xCE, 0x08, 0xCE, 0x08, 0xD0, 0x08, 0xAF, 0x00, 
 0xAF, 0x00, 0x6E, 0x00, 0x2F, 0x08, 0x0D, 0x00, 0x10, 0x00, 0x10, 0x00, 
 0x11, 0x00, 0x11, 0x00, 0x10, 0x00, 0x10, 0x00, 0x51, 0x08, 0x0F, 0x00, 
 0x2F, 0x08, 0x2F, 0x08, 0x31, 0x08, 0x11, 0x00, 0x4C, 0x00, 0x2B, 0x00, 
 0xA6, 0x00, 0x85, 0x00, 0x67, 0x00, 0x68, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0C, 0x00, 0x2C, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x61, 0x00, 0x61, 0x00, 0x27, 0x00, 0x48, 0x00, 0xC3, 0x00, 0xC3, 0x00, 
 0x68, 0x01, 0xE6, 0x00, 0x26, 0x01, 0xE5, 0x00, 0xE9, 0x00, 0xE9, 0x00, 
 0xE9, 0x00, 0x26, 0x00, 0x26, 0x00, 0x26, 0x00, 0x29, 0x00, 0x09, 0x00, 
 0x49, 0x00, 0x29, 0x00, 0x29, 0x08, 0x08, 0x00, 0x29, 0x00, 0x09, 0x00, 
 0x66, 0x00, 0x45, 0x00, 0x46, 0x00, 0x46, 0x00, 0x69, 0x00, 0x07, 0x00, 
 0x41, 0x00, 0x41, 0x00, 0x80, 0x00, 0x60, 0x00, 0x61, 0x00, 0x61, 0x00, 
 0x33, 0x00, 0x53, 0x08, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x64, 0x00, 0xA5, 0x00, 0x54, 0x00, 0x74, 0x00, 0x95, 0x00, 0x95, 0x00, 
 0x59, 0x08, 0x59, 0x08, 0xB1, 0x08, 0x91, 0x00, 0x92, 0x00, 0xB2, 0x00, 
 0x90, 0x09, 0xCC, 0x00, 0x07, 0x01, 0xE7, 0x00, 0xC8, 0x00, 0xE8, 0x00, 
 0x0B, 0x09, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x00, 0x08, 0x00, 
 0x47, 0x00, 0x26, 0x00, 0x47, 0x08, 0x05, 0x00, 0x46, 0x00, 0x25, 0x00, 
 0x46, 0x00, 0x45, 0x00, 0x28, 0x00, 0x28, 0x00, 0x68, 0x00, 0x06, 0x00, 
 0x21, 0x00, 0x21, 0x00, 0x42, 0x00, 0x42, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x53, 0x00, 0x74, 0x08, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x64, 0x00, 0xA5, 0x00, 0x73, 0x00, 0xB4, 0x00, 0xB6, 0x00, 0x96, 0x00, 
 0x78, 0x00, 0x58, 0x00, 0x91, 0x00, 0x50, 0x00, 0x73, 0x00, 0xB4, 0x00, 
 0xF1, 0x11, 0xED, 0x00, 0x27, 0x01, 0x07, 0x01, 0x06, 0x01, 0x07, 0x01, 
 0x29, 0x09, 0x25, 0x00, 0x27, 0x00, 0x07, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x27, 0x00, 0x06, 0x00, 0x27, 0x00, 0x06, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x48, 0x00, 0x48, 0x00, 0x2A, 0x00, 0x29, 0x00, 0x88, 0x08, 0x07, 0x00, 
 0x60, 0x00, 0x40, 0x00, 0x60, 0x00, 0x60, 0x00, 0xA0, 0x00, 0x80, 0x00, 
 0x34, 0x00, 0x75, 0x08, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x64, 0x00, 0x65, 0x00, 0x54, 0x00, 0x95, 0x00, 0xB7, 0x00, 0x96, 0x00, 
 0x78, 0x00, 0x58, 0x00, 0xB0, 0x00, 0x4E, 0x00, 0x93, 0x00, 0xD4, 0x00, 
 0xD0, 0x09, 0xCC, 0x00, 0xE9, 0x00, 0x09, 0x01, 0x0A, 0x01, 0xE9, 0x00, 
 0x08, 0x09, 0x05, 0x00, 0x26, 0x00, 0x26, 0x00, 0x09, 0x00, 0x09, 0x00, 
 0x2A, 0x00, 0x29, 0x00, 0x4A, 0x08, 0x09, 0x00, 0x28, 0x00, 0x27, 0x00, 
 0x47, 0x00, 0x46, 0x00, 0x46, 0x00, 0x46, 0x00, 0x87, 0x00, 0x25, 0x00, 
 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 0x21, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x54, 0x00, 0x74, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x63, 0x00, 0x84, 0x00, 0x92, 0x00, 0xD3, 0x00, 0x98, 0x00, 0x57, 0x00, 
 0x78, 0x08, 0x78, 0x00, 0xD0, 0x08, 0x4E, 0x00, 0x73, 0x00, 0xB4, 0x00, 
 0xB4, 0x11, 0xD0, 0x00, 0x07, 0x01, 0xE7, 0x00, 0x26, 0x01, 0x05, 0x01, 
 0x49, 0x09, 0x46, 0x00, 0x08, 0x00, 0x08, 0x00, 0x09, 0x00, 0x09, 0x00, 
 0x47, 0x00, 0x27, 0x00, 0x47, 0x00, 0x06, 0x00, 0x29, 0x00, 0x29, 0x00, 
 0x48, 0x00, 0x48, 0x00, 0x67, 0x00, 0x67, 0x00, 0x89, 0x08, 0x27, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 0x40, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x54, 0x00, 0x74, 0x00, 0x81, 0x00, 0x81, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x62, 0x00, 0xA3, 0x00, 0x55, 0x00, 0x76, 0x00, 0x79, 0x00, 0x58, 0x00, 
 0x78, 0x08, 0x58, 0x00, 0xEF, 0x08, 0x6D, 0x00, 0x74, 0x00, 0x95, 0x00, 
 0x8F, 0x09, 0xEC, 0x00, 0x07, 0x01, 0x07, 0x01, 0x08, 0x01, 0xE8, 0x00, 
 0x09, 0x09, 0x05, 0x00, 0x07, 0x08, 0x07, 0x08, 0x09, 0x08, 0x09, 0x00, 
 0x48, 0x00, 0x28, 0x00, 0x67, 0x00, 0x06, 0x00, 0x45, 0x00, 0x45, 0x00, 
 0x47, 0x00, 0x27, 0x00, 0x48, 0x00, 0x48, 0x00, 0x6A, 0x00, 0x08, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x22, 0x00, 0x21, 0x00, 0x61, 0x00, 0x61, 0x00, 
 0x73, 0x00, 0x94, 0x00, 0xA0, 0x00, 0xA0, 0x00, 0x61, 0x00, 0x61, 0x00, 
 0x64, 0x00, 0xA5, 0x00, 0x54, 0x00, 0x74, 0x00, 0xB5, 0x00, 0x74, 0x00, 
 0x79, 0x08, 0x38, 0x00, 0xF0, 0x00, 0x6E, 0x00, 0x95, 0x00, 0xB6, 0x00, 
 0xD0, 0x09, 0xED, 0x00, 0x27, 0x01, 0x07, 0x01, 0x07, 0x01, 0xE7, 0x00, 
 0x0C, 0x09, 0x08, 0x00, 0x26, 0x00, 0x06, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x27, 0x00, 0x27, 0x00, 0x48, 0x08, 0x06, 0x00, 0x27, 0x00, 0x47, 0x00, 
 0x46, 0x00, 0x46, 0x00, 0x27, 0x00, 0x27, 0x00, 0xA7, 0x00, 0x66, 0x00, 
 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x60, 0x00, 0x41, 0x00, 0x41, 0x00, 
 0x14, 0x00, 0x55, 0x00, 0xA0, 0x00, 0x80, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x82, 0x00, 0xA3, 0x00, 0x54, 0x00, 0x95, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x78, 0x00, 0x78, 0x00, 0xB0, 0x00, 0x4E, 0x00, 0x92, 0x00, 0xB2, 0x00, 
 0xD0, 0x09, 0xED, 0x00, 0x09, 0x01, 0x09, 0x01, 0x28, 0x01, 0xE7, 0x00, 
 0x27, 0x09, 0x23, 0x00, 0x08, 0x00, 0x07, 0x00, 0x09, 0x00, 0x0A, 0x00, 
 0x28, 0x00, 0x28, 0x00, 0x49, 0x08, 0x08, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x48, 0x00, 0x47, 0x00, 0x2A, 0x00, 0x09, 0x00, 0x89, 0x00, 0x27, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x41, 0x00, 0x41, 0x00, 0x40, 0x00, 0x41, 0x00, 
 0x32, 0x00, 0x94, 0x08, 0x80, 0x00, 0x80, 0x00, 0x41, 0x00, 0x41, 0x00, 
 0x44, 0x00, 0xA5, 0x08, 0x56, 0x00, 0x96, 0x00, 0x98, 0x00, 0x98, 0x00, 
 0x78, 0x00, 0x78, 0x00, 0xB1, 0x00, 0x50, 0x00, 0x95, 0x00, 0xB5, 0x00, 
 0x94, 0x09, 0xB1, 0x00, 0xE6, 0x00, 0xE6, 0x00, 0xC8, 0x00, 0xC7, 0x00, 
 0x08, 0x09, 0x25, 0x00, 0x26, 0x00, 0x06, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x29, 0x00, 0x28, 0x00, 0x67, 0x08, 0x05, 0x00, 0x49, 0x00, 0x28, 0x00, 
 0x47, 0x00, 0x47, 0x00, 0x47, 0x00, 0x26, 0x00, 0x89, 0x00, 0x28, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 0x81, 0x00, 
 0x52, 0x00, 0x93, 0x00, 0x60, 0x00, 0x80, 0x00, 0x41, 0x00, 0x21, 0x00, 
 0x43, 0x00, 0x84, 0x00, 0x54, 0x00, 0x74, 0x00, 0x95, 0x00, 0x75, 0x00, 
 0x95, 0x00, 0x95, 0x00, 0xCF, 0x00, 0x6D, 0x00, 0x94, 0x00, 0xB5, 0x00, 
 0x90, 0x09, 0xCD, 0x00, 0xE5, 0x00, 0x05, 0x09, 0xE9, 0x08, 0xA8, 0x00, 
 0x8C, 0x00, 0x0A, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x09, 0x00, 0x08, 0x00, 0x49, 0x00, 0x08, 0x00, 0x64, 0x00, 0x44, 0x00, 
 0x2A, 0x00, 0x09, 0x00, 0x47, 0x00, 0x26, 0x00, 0x88, 0x00, 0x68, 0x00, 
 0x41, 0x00, 0x41, 0x00, 0x60, 0x00, 0x60, 0x00, 0x44, 0x00, 0x64, 0x00, 
 0x87, 0x00, 0x67, 0x00, 0x61, 0x00, 0x81, 0x00, 0x81, 0x00, 0x81, 0x00, 
 0xA2, 0x00, 0xA2, 0x00, 0x76, 0x00, 0x97, 0x08, 0x7A, 0x00, 0x7A, 0x00, 
 0x97, 0x00, 0x97, 0x00, 0xEF, 0x00, 0x8E, 0x00, 0x77, 0x00, 0x97, 0x00, 
 0x58, 0x11, 0x54, 0x00, 0x60, 0x00, 0x40, 0x00, 0x20, 0x00, 0x20, 0x00, 
 0x2E, 0x00, 0x4F, 0x00, 0x20, 0x00, 0x41, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x43, 0x00, 0x23, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x42, 0x00, 0x42, 0x00, 
 0x81, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x8D, 0x00, 0x8D, 0x00, 
 0x19, 0x10, 0x19, 0x10, 0x17, 0x10, 0x17, 0x08, 0x16, 0x10, 0x36, 0x10, 
 0xCD, 0x00, 0xAD, 0x00, 0xB6, 0x00, 0x96, 0x00, 0x56, 0x08, 0x56, 0x08, 
 0xCB, 0x00, 0x29, 0x00, 0x8D, 0x00, 0xAD, 0x00, 0xCE, 0x00, 0xCE, 0x00, 
 0x72, 0x00, 0x72, 0x00, 0xC9, 0x00, 0x67, 0x00, 0xC8, 0x00, 0xC8, 0x00, 
 0x51, 0x09, 0x8E, 0x00, 0x29, 0x00, 0x29, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x51, 0x00, 0x07, 0x00, 0x28, 0x00, 0x07, 0x08, 0x07, 0x00, 
 0x46, 0x00, 0x26, 0x00, 0x14, 0x00, 0x54, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x61, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x53, 0x00, 0x73, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x61, 0x00, 0x61, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x34, 0x00, 0x54, 0x00, 0x99, 0x00, 0x79, 0x00, 0x57, 0x00, 0x77, 0x00, 
 0x0E, 0x09, 0x4B, 0x00, 0xB3, 0x00, 0xD4, 0x00, 0xB7, 0x00, 0x96, 0x00, 
 0x78, 0x00, 0x78, 0x00, 0xCD, 0x08, 0x6C, 0x00, 0xAE, 0x00, 0xAE, 0x00, 
 0x34, 0x09, 0x71, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x0A, 0x00, 
 0x0F, 0x00, 0x71, 0x00, 0x48, 0x00, 0x68, 0x00, 0x28, 0x08, 0x08, 0x00, 
 0x49, 0x00, 0x28, 0x00, 0x32, 0x00, 0x73, 0x00, 0x40, 0x00, 0x40, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x42, 0x00, 0x42, 0x00, 0x72, 0x00, 0x93, 0x00, 
 0x41, 0x00, 0x61, 0x00, 0x80, 0x00, 0xA0, 0x00, 0x80, 0x00, 0xA0, 0x00, 
 0x73, 0x00, 0xD5, 0x08, 0x99, 0x00, 0x99, 0x00, 0x77, 0x00, 0x77, 0x00, 
 0xEE, 0x08, 0x2B, 0x00, 0x93, 0x00, 0xB3, 0x00, 0xB7, 0x00, 0xB7, 0x00, 
 0x98, 0x00, 0x78, 0x00, 0xED, 0x00, 0x6B, 0x00, 0xAF, 0x00, 0xCF, 0x00, 
 0x55, 0x09, 0x92, 0x00, 0x07, 0x00, 0x07, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x0C, 0x00, 0xAF, 0x00, 0x28, 0x00, 0x48, 0x00, 0x26, 0x00, 0x06, 0x00, 
 0x49, 0x00, 0x28, 0x00, 0x33, 0x00, 0x74, 0x00, 0x41, 0x00, 0x40, 0x00, 
 0x60, 0x00, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 0x54, 0x00, 0x75, 0x00, 
 0x81, 0x00, 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x34, 0x00, 0x75, 0x00, 0x77, 0x00, 0x97, 0x00, 0x77, 0x00, 0x56, 0x00, 
 0xEE, 0x08, 0x4B, 0x00, 0xB4, 0x00, 0xB4, 0x00, 0xB7, 0x00, 0xB7, 0x00, 
 0x97, 0x00, 0x97, 0x00, 0xED, 0x00, 0x8B, 0x00, 0xB0, 0x00, 0xD1, 0x00, 
 0x55, 0x09, 0x72, 0x00, 0x08, 0x00, 0x28, 0x00, 0x26, 0x00, 0x26, 0x00, 
 0x10, 0x00, 0x31, 0x00, 0x45, 0x00, 0x45, 0x00, 0x29, 0x00, 0x29, 0x00, 
 0x69, 0x00, 0x49, 0x00, 0x31, 0x00, 0x72, 0x00, 0x40, 0x00, 0x40, 0x00, 
 0x41, 0x00, 0x41, 0x00, 0x40, 0x00, 0x60, 0x00, 0x33, 0x00, 0x95, 0x08, 
 0x80, 0x00, 0x80, 0x00, 0x41, 0x00, 0x82, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x74, 0x00, 0x95, 0x00, 0x78, 0x00, 0x79, 0x00, 0x57, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x92, 0x00, 0xD3, 0x00, 0x7A, 0x00, 0x9A, 0x00, 
 0xD6, 0x00, 0x96, 0x00, 0x0C, 0x01, 0x6A, 0x00, 0xD0, 0x00, 0xB0, 0x00, 
 0x34, 0x09, 0x71, 0x00, 0x28, 0x00, 0x28, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x10, 0x00, 0x31, 0x00, 0x48, 0x00, 0x48, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x28, 0x00, 0x29, 0x00, 0x13, 0x00, 0x34, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x61, 0x00, 0x61, 0x00, 0x60, 0x00, 0x60, 0x00, 0x33, 0x00, 0x74, 0x00, 
 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x72, 0x00, 0x93, 0x00, 0x58, 0x00, 0x99, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0xED, 0x00, 0x2A, 0x00, 0x72, 0x00, 0xD4, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x98, 0x00, 0x78, 0x00, 0x2B, 0x01, 0x89, 0x00, 0xB1, 0x00, 0xB1, 0x00, 
 0x75, 0x11, 0x91, 0x00, 0x27, 0x00, 0x27, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x0F, 0x00, 0x70, 0x08, 0x09, 0x00, 0x0A, 0x00, 0x28, 0x00, 0x28, 0x00, 
 0x87, 0x00, 0x87, 0x00, 0x13, 0x00, 0x54, 0x08, 0x41, 0x00, 0x21, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 0x51, 0x00, 0xB3, 0x08, 
 0x41, 0x00, 0x41, 0x00, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x74, 0x00, 0xB5, 0x00, 0x78, 0x00, 0x98, 0x00, 0x77, 0x00, 0x77, 0x00, 
 0xED, 0x00, 0x6B, 0x00, 0x73, 0x00, 0xB4, 0x00, 0xB8, 0x00, 0xB7, 0x00, 
 0xB8, 0x00, 0x98, 0x00, 0x2D, 0x01, 0x8B, 0x00, 0x91, 0x00, 0x91, 0x00, 
 0x36, 0x09, 0x52, 0x00, 0x0B, 0x00, 0x2B, 0x00, 0x27, 0x00, 0x27, 0x00, 
 0x10, 0x00, 0x32, 0x00, 0x46, 0x00, 0x47, 0x00, 0x44, 0x00, 0x44, 0x00, 
 0x48, 0x00, 0x48, 0x00, 0x13, 0x00, 0x34, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x62, 0x00, 0x62, 0x00, 0x60, 0x00, 0x80, 0x00, 0x33, 0x00, 0x74, 0x00, 
 0xA0, 0x00, 0xA0, 0x00, 0x81, 0x00, 0x81, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x33, 0x00, 0x94, 0x00, 0x79, 0x00, 0x79, 0x00, 0x56, 0x00, 0x76, 0x00, 
 0xCD, 0x00, 0x6B, 0x00, 0x72, 0x00, 0xB3, 0x00, 0x97, 0x00, 0x76, 0x00, 
 0x78, 0x00, 0x98, 0x00, 0x2B, 0x01, 0xA9, 0x00, 0xAD, 0x00, 0xCE, 0x00, 
 0x56, 0x09, 0x52, 0x00, 0x29, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 
 0x0D, 0x00, 0x6F, 0x00, 0x48, 0x00, 0x48, 0x00, 0x28, 0x00, 0x08, 0x00, 
 0x47, 0x00, 0x68, 0x00, 0x12, 0x00, 0x73, 0x08, 0x60, 0x00, 0x40, 0x00, 
 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x14, 0x00, 0x76, 0x08, 
 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x32, 0x00, 0x94, 0x08, 0x96, 0x00, 0xB6, 0x00, 0x98, 0x00, 0x97, 0x00, 
 0xCD, 0x00, 0x4B, 0x00, 0x53, 0x00, 0xB5, 0x08, 0x98, 0x00, 0x98, 0x00, 
 0xB6, 0x00, 0xB6, 0x00, 0xEF, 0x00, 0x8D, 0x00, 0xAE, 0x00, 0xCF, 0x00, 
 0x56, 0x11, 0x52, 0x00, 0x46, 0x00, 0x46, 0x00, 0x47, 0x00, 0x48, 0x00, 
 0x0F, 0x00, 0x71, 0x00, 0x26, 0x00, 0x47, 0x00, 0x29, 0x00, 0x49, 0x00, 
 0x68, 0x00, 0x67, 0x00, 0x15, 0x00, 0x15, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x41, 0x00, 0x41, 0x00, 0x40, 0x00, 0x60, 0x00, 0x32, 0x00, 0x93, 0x08, 
 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x81, 0x00, 0xA1, 0x00, 
 0x14, 0x00, 0x76, 0x08, 0x77, 0x00, 0x77, 0x00, 0x78, 0x00, 0x58, 0x00, 
 0xCD, 0x00, 0x6B, 0x00, 0x54, 0x00, 0x95, 0x08, 0xB4, 0x00, 0xB4, 0x00, 
 0x98, 0x00, 0x98, 0x00, 0xCE, 0x00, 0xAD, 0x00, 0x90, 0x00, 0xD1, 0x00, 
 0x8D, 0x09, 0x89, 0x00, 0x19, 0x00, 0x1A, 0x08, 0x17, 0x08, 0x17, 0x08, 
 0x45, 0x00, 0xA6, 0x00, 0x16, 0x08, 0x16, 0x08, 0x18, 0x08, 0x18, 0x08, 
 0x36, 0x00, 0x15, 0x00, 0x87, 0x00, 0xA7, 0x00, 0x2E, 0x00, 0x4F, 0x00, 
 0x4F, 0x08, 0x70, 0x08, 0x31, 0x08, 0x10, 0x08, 0xC4, 0x00, 0xC4, 0x00, 
 0x8E, 0x00, 0x8D, 0x00, 0x71, 0x00, 0x50, 0x00, 0x32, 0x00, 0x32, 0x00, 
 0xC1, 0x00, 0x02, 0x01, 0xE9, 0x00, 0xA8, 0x00, 0xC7, 0x00, 0xC6, 0x00, 
 0x90, 0x00, 0x4F, 0x00, 0xC4, 0x00, 0xE5, 0x00, 0xAA, 0x00, 0xAA, 0x00, 
 0xC9, 0x00, 0xCA, 0x00, 0xCC, 0x00, 0xED, 0x00, 0x98, 0x00, 0xB8, 0x00, 
 0x95, 0x11, 0x50, 0x00, 0x47, 0x00, 0x26, 0x00, 0x29, 0x00, 0x49, 0x00, 
 0x10, 0x00, 0x72, 0x00, 0x62, 0x00, 0x62, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x80, 0x00, 0xA0, 0x00, 0x0F, 0x00, 0x71, 0x08, 0xA1, 0x00, 0xA1, 0x00, 
 0xA0, 0x00, 0xA0, 0x00, 0x62, 0x00, 0x62, 0x00, 0x8E, 0x00, 0xD0, 0x00, 
 0x58, 0x00, 0x58, 0x00, 0x79, 0x00, 0x59, 0x00, 0x96, 0x08, 0x75, 0x08, 
 0x8F, 0x00, 0xD0, 0x00, 0x98, 0x00, 0x78, 0x00, 0x98, 0x08, 0x77, 0x00, 
 0xEC, 0x08, 0x8A, 0x00, 0x8B, 0x00, 0xCC, 0x00, 0xEF, 0x00, 0xCE, 0x00, 
 0xCF, 0x00, 0xCF, 0x00, 0x93, 0x00, 0xD4, 0x00, 0xB6, 0x00, 0xD6, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x96, 0x11, 0x51, 0x00, 0x48, 0x00, 0x28, 0x00, 0x47, 0x00, 0x27, 0x00, 
 0x0F, 0x00, 0x90, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x40, 0x00, 0x40, 0x00, 0x2F, 0x00, 0x90, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x60, 0x00, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0xB0, 0x08, 
 0x78, 0x00, 0x78, 0x00, 0x97, 0x00, 0x98, 0x00, 0x79, 0x00, 0x79, 0x00, 
 0x6E, 0x00, 0xF0, 0x00, 0x98, 0x00, 0x98, 0x00, 0x97, 0x00, 0x97, 0x00, 
 0x0D, 0x01, 0x6B, 0x00, 0x8B, 0x00, 0xEC, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0xCF, 0x00, 0xAF, 0x00, 0xB4, 0x00, 0xF5, 0x00, 0xB7, 0x00, 0xB8, 0x00, 
 0x59, 0x11, 0x55, 0x00, 0x34, 0x00, 0x34, 0x00, 0x39, 0x08, 0x39, 0x08, 
 0x8B, 0x00, 0x4A, 0x00, 0x90, 0x00, 0x4F, 0x00, 0x6F, 0x08, 0x4E, 0x00, 
 0x6D, 0x00, 0x6D, 0x00, 0x72, 0x00, 0x51, 0x00, 0x87, 0x00, 0xA7, 0x00, 
 0x6A, 0x00, 0x6A, 0x00, 0x87, 0x00, 0xA7, 0x00, 0x8C, 0x00, 0x4B, 0x00, 
 0xA7, 0x00, 0xA7, 0x00, 0xA8, 0x00, 0xA8, 0x00, 0xC5, 0x00, 0xE6, 0x00, 
 0x8C, 0x00, 0x4B, 0x00, 0xC0, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xC0, 0x00, 
 0xC5, 0x00, 0xE5, 0x00, 0x96, 0x00, 0xB7, 0x00, 0xF6, 0x00, 0xF6, 0x00, 
 0xD6, 0x00, 0xD6, 0x00, 0xBB, 0x08, 0x39, 0x00, 0x00, 0x01, 0xE0, 0x00, 
 0x82, 0x01, 0x80, 0x00, 0xA0, 0x00, 0xA0, 0x00, 0x62, 0x00, 0x62, 0x00, 
 0x69, 0x00, 0x89, 0x00, 0x8F, 0x00, 0x0D, 0x00, 0x81, 0x00, 0x81, 0x00, 
 0x80, 0x00, 0x80, 0x00, 0x6C, 0x00, 0x8C, 0x00, 0x76, 0x00, 0x96, 0x00, 
 0x77, 0x00, 0x77, 0x00, 0x57, 0x00, 0x57, 0x00, 0xEC, 0x00, 0xAB, 0x00, 
 0x77, 0x00, 0x97, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 
 0xED, 0x08, 0xAD, 0x00, 0xAF, 0x00, 0xAF, 0x00, 0xCE, 0x00, 0xAE, 0x00, 
 0xB2, 0x00, 0xD3, 0x00, 0xD9, 0x00, 0xD9, 0x00, 0xB9, 0x00, 0xD9, 0x00, 
 0xB8, 0x00, 0xB7, 0x00, 0x0F, 0x09, 0x8D, 0x00, 0x20, 0x01, 0x00, 0x01, 
 0x80, 0x09, 0xA0, 0x00, 0x80, 0x00, 0x60, 0x00, 0x40, 0x00, 0x60, 0x00, 
 0x4B, 0x00, 0x8C, 0x08, 0xAF, 0x08, 0x0B, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x61, 0x00, 0x40, 0x00, 0x68, 0x00, 0xCA, 0x00, 0x78, 0x00, 0x78, 0x00, 
 0x78, 0x00, 0x98, 0x00, 0x78, 0x00, 0x57, 0x00, 0xCA, 0x00, 0xCA, 0x00, 
 0x98, 0x00, 0x98, 0x00, 0x98, 0x00, 0x98, 0x00, 0x98, 0x00, 0x77, 0x00, 
 0xEA, 0x00, 0xEA, 0x00, 0x91, 0x00, 0xB1, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0x95, 0x00, 0xB6, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xB9, 0x00, 0xBA, 0x00, 
 0xBA, 0x00, 0x99, 0x00, 0x2B, 0x09, 0x89, 0x00, 0xE0, 0x00, 0xC0, 0x00, 
 0x82, 0x11, 0x80, 0x00, 0x41, 0x00, 0x41, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x2B, 0x00, 0x6B, 0x00, 0xCC, 0x10, 0x09, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x82, 0x00, 0x61, 0x00, 0x6A, 0x00, 0xAB, 0x00, 0x98, 0x00, 0x78, 0x00, 
 0x78, 0x00, 0x79, 0x00, 0x98, 0x00, 0x77, 0x00, 0x8E, 0x00, 0xAE, 0x00, 
 0x97, 0x00, 0x96, 0x00, 0x97, 0x00, 0xB7, 0x00, 0xB6, 0x00, 0x95, 0x00, 
 0xAD, 0x00, 0xCD, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xCE, 0x00, 0xCE, 0x00, 
 0xD3, 0x00, 0xF3, 0x00, 0xF6, 0x00, 0xD5, 0x00, 0xD7, 0x00, 0xF8, 0x00, 
 0xD8, 0x00, 0xD7, 0x00, 0x0D, 0x09, 0x6B, 0x00, 0xE0, 0x00, 0xE0, 0x00, 
 0x61, 0x11, 0x60, 0x00, 0x40, 0x00, 0x60, 0x00, 0x60, 0x00, 0x80, 0x00, 
 0x0D, 0x00, 0x4E, 0x00, 0xAD, 0x08, 0x0B, 0x00, 0x81, 0x00, 0x81, 0x00, 
 0x80, 0x00, 0x80, 0x00, 0x4C, 0x00, 0x8D, 0x00, 0x98, 0x00, 0x77, 0x00, 
 0x77, 0x00, 0x98, 0x00, 0x97, 0x00, 0x77, 0x00, 0xAB, 0x00, 0xEC, 0x00, 
 0x98, 0x00, 0x77, 0x00, 0x98, 0x00, 0x98, 0x00, 0xB8, 0x00, 0x97, 0x00, 
 0xAB, 0x00, 0xEC, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xCF, 0x00, 0xAF, 0x00, 
 0xB3, 0x00, 0xF4, 0x00, 0xD8, 0x00, 0xD7, 0x00, 0xD7, 0x00, 0xD7, 0x00, 
 0xD7, 0x00, 0xD7, 0x00, 0x0F, 0x09, 0x6D, 0x00, 0xE0, 0x00, 0xC0, 0x00, 
 0x81, 0x11, 0x80, 0x00, 0x80, 0x00, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x4B, 0x00, 0x8D, 0x00, 0xCB, 0x08, 0x29, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x80, 0x00, 0xA0, 0x00, 0x89, 0x00, 0xAA, 0x00, 0x98, 0x00, 0x77, 0x00, 
 0x77, 0x00, 0x57, 0x00, 0x77, 0x00, 0x77, 0x00, 0x8A, 0x00, 0xEB, 0x00, 
 0x98, 0x00, 0x78, 0x00, 0x99, 0x00, 0x78, 0x00, 0x98, 0x00, 0x78, 0x00, 
 0x8B, 0x00, 0xEC, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xAF, 0x00, 0xAF, 0x00, 
 0xB4, 0x00, 0xD5, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xD8, 0x00, 0xD8, 0x00, 
 0x97, 0x00, 0xB8, 0x00, 0x0E, 0x09, 0x6C, 0x00, 0xC1, 0x00, 0xC1, 0x00, 
 0x63, 0x11, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 0x40, 0x00, 
 0x2B, 0x00, 0x8D, 0x00, 0xCD, 0x08, 0x2B, 0x00, 0xA0, 0x00, 0x80, 0x00, 
 0x80, 0x00, 0x80, 0x00, 0x4E, 0x00, 0x6F, 0x08, 0x97, 0x00, 0x97, 0x00, 
 0xB7, 0x00, 0x76, 0x00, 0x96, 0x00, 0x96, 0x00, 0x8C, 0x00, 0xCD, 0x00, 
 0xB7, 0x00, 0x97, 0x00, 0xB7, 0x00, 0x97, 0x00, 0xB6, 0x00, 0xB6, 0x00, 
 0x8B, 0x00, 0xED, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 0xB0, 0x00, 
 0xB5, 0x00, 0xD6, 0x00, 0xF6, 0x00, 0xD6, 0x00, 0xD7, 0x00, 0xD7, 0x00, 
 0xB6, 0x00, 0xB6, 0x00, 0x2B, 0x09, 0x89, 0x00, 0xE0, 0x00, 0xE0, 0x00, 
 0x62, 0x11, 0x60, 0x00, 0x40, 0x00, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x2C, 0x00, 0x6D, 0x00, 0xAE, 0x08, 0x0B, 0x00, 0x80, 0x00, 0x80, 0x00, 
 0x80, 0x00, 0x60, 0x00, 0x2C, 0x00, 0x6D, 0x08, 0x79, 0x00, 0x79, 0x00, 
 0x99, 0x00, 0x58, 0x00, 0x78, 0x00, 0x98, 0x00, 0x8B, 0x00, 0xCC, 0x00, 
 0x98, 0x00, 0x98, 0x00, 0x99, 0x00, 0x58, 0x00, 0x98, 0x00, 0xB8, 0x00, 
 0xAB, 0x00, 0xEC, 0x00, 0xAE, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xCF, 0x00, 
 0xB4, 0x00, 0xD5, 0x00, 0xD8, 0x00, 0xD8, 0x00, 0xD8, 0x00, 0xD8, 0x00, 
 0xD7, 0x00, 0xD7, 0x00, 0x0E, 0x09, 0x6C, 0x00, 0xC0, 0x00, 0xE0, 0x00, 
 0x82, 0x09, 0x80, 0x00, 0x21, 0x00, 0x41, 0x00, 0x20, 0x00, 0x20, 0x00, 
 0x4A, 0x00, 0x8B, 0x00, 0xCC, 0x00, 0x09, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x42, 0x00, 0x42, 0x00, 0x8D, 0x00, 0x8D, 0x00, 0x5A, 0x00, 0x7A, 0x00, 
 0x57, 0x00, 0x78, 0x00, 0x77, 0x00, 0x77, 0x00, 0x8B, 0x00, 0xAC, 0x00, 
 0x79, 0x00, 0x59, 0x00, 0x98, 0x00, 0x78, 0x00, 0xB5, 0x00, 0x95, 0x00, 
 0xAB, 0x00, 0xEC, 0x00, 0xCE, 0x00, 0xCE, 0x00, 0xEF, 0x00, 0xAE, 0x00, 
 0x95, 0x00, 0xF6, 0x00, 0xB8, 0x00, 0xD8, 0x00, 0xD7, 0x00, 0xD7, 0x00, 
 0x98, 0x00, 0xD9, 0x08, 0xEE, 0x08, 0x6C, 0x00, 0xE0, 0x00, 0xE0, 0x00, 
 0x80, 0x01, 0xA0, 0x00, 0x60, 0x00, 0x80, 0x00, 0x60, 0x00, 0x60, 0x00, 
 0x6B, 0x00, 0xAC, 0x00, 0xCE, 0x00, 0x2C, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x80, 0x00, 0x60, 0x00, 0x8A, 0x00, 0xAB, 0x00, 0x97, 0x00, 0xB7, 0x00, 
 0x78, 0x00, 0x99, 0x00, 0x98, 0x00, 0x98, 0x00, 0xAA, 0x00, 0xEB, 0x00, 
 0xB6, 0x00, 0xB6, 0x00, 0xB9, 0x00, 0x98, 0x00, 0xB7, 0x00, 0x96, 0x00, 
 0xCD, 0x00, 0x0E, 0x01, 0xB0, 0x00, 0xB0, 0x00, 0xD0, 0x00, 0xD0, 0x00, 
 0xD3, 0x00, 0x14, 0x01, 0xB6, 0x00, 0xB7, 0x00, 0xD6, 0x00, 0xD6, 0x00, 
 0x97, 0x00, 0xB7, 0x08, 0xEC, 0x08, 0x8A, 0x00, 0xE1, 0x00, 0xE1, 0x00, 
 0x63, 0x01, 0xA1, 0x00, 0x4A, 0x00, 0x0A, 0x00, 0x27, 0x00, 0x28, 0x00, 
 0x31, 0x00, 0x72, 0x00, 0x82, 0x00, 0x61, 0x00, 0x61, 0x00, 0x61, 0x00, 
 0xA0, 0x00, 0xA0, 0x00, 0x31, 0x00, 0xB3, 0x00, 0xA0, 0x00, 0xA0, 0x00, 
 0xC0, 0x00, 0xC0, 0x00, 0xA0, 0x00, 0xE1, 0x00, 0x14, 0x00, 0x77, 0x10, 
 0xA0, 0x00, 0xA0, 0x00, 0xA1, 0x00, 0xA1, 0x00, 0xE0, 0x00, 0xE0, 0x00, 
 0x4F, 0x00, 0xB0, 0x08, 0xF7, 0x00, 0xD6, 0x00, 0x9A, 0x00, 0x99, 0x00, 
 0xB7, 0x00, 0x76, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x20, 0x01, 
 0xE0, 0x00, 0xE0, 0x00, 0xC2, 0x00, 0xA1, 0x00, 0xE0, 0x00, 0xE0, 0x00, 
 0x67, 0x09, 0xC4, 0x00, 0x8C, 0x08, 0x2A, 0x00, 0x81, 0x00, 0x81, 0x00, 
 0x86, 0x00, 0xC7, 0x00, 0x99, 0x08, 0x79, 0x00, 0x78, 0x08, 0x58, 0x08, 
 0x59, 0x08, 0x18, 0x00, 0xA5, 0x00, 0x06, 0x01, 0xB7, 0x00, 0xB7, 0x00, 
 0x9A, 0x00, 0x9A, 0x00, 0x77, 0x00, 0x77, 0x00, 0xA8, 0x00, 0x09, 0x01, 
 0xCF, 0x00, 0xCF, 0x00, 0xEF, 0x00, 0xCF, 0x00, 0xB0, 0x00, 0xD0, 0x00, 
 0x98, 0x00, 0xD9, 0x00, 0xD9, 0x00, 0xB8, 0x00, 0xD6, 0x00, 0xB6, 0x00, 
 0x2D, 0x09, 0xAC, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xA0, 0x00, 0xE1, 0x00, 
 0xC2, 0x00, 0xC2, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0x06, 0x01, 0x06, 0x01, 
 0x4E, 0x09, 0xAB, 0x00, 0xCB, 0x08, 0x28, 0x00, 0x80, 0x00, 0x60, 0x00, 
 0x65, 0x00, 0xA7, 0x00, 0x58, 0x00, 0x58, 0x00, 0x78, 0x00, 0x58, 0x00, 
 0x97, 0x08, 0x76, 0x08, 0x69, 0x00, 0xEB, 0x00, 0x78, 0x00, 0x78, 0x00, 
 0x97, 0x00, 0x97, 0x00, 0x97, 0x08, 0x97, 0x08, 0xA6, 0x00, 0x07, 0x01, 
 0xAF, 0x00, 0xAF, 0x00, 0xCF, 0x00, 0xCF, 0x00, 0xB0, 0x00, 0xB0, 0x00, 
 0x97, 0x00, 0xB7, 0x00, 0xD6, 0x00, 0xB6, 0x00, 0xB8, 0x00, 0xB8, 0x00, 
 0x2D, 0x09, 0x8B, 0x00, 0xC0, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0xE0, 0x00, 
 0xA1, 0x00, 0xA1, 0x00, 0xC0, 0x00, 0xE0, 0x00, 0xC8, 0x00, 0xC8, 0x00, 
 0x4D, 0x09, 0xAA, 0x00, 0xCD, 0x08, 0x0A, 0x00, 0xA0, 0x00, 0x80, 0x00, 
 0x45, 0x00, 0xC7, 0x00, 0x98, 0x00, 0x78, 0x00, 0x99, 0x00, 0x79, 0x00, 
 0x77, 0x00, 0x97, 0x00, 0x67, 0x00, 0xE9, 0x00, 0xDA, 0x00, 0x99, 0x00, 
 0x98, 0x00, 0x77, 0x00, 0x77, 0x00, 0x98, 0x00, 0xA7, 0x00, 0x08, 0x01, 
 0xAE, 0x00, 0xAE, 0x00, 0x90, 0x00, 0xD1, 0x00, 0xD0, 0x00, 0xD1, 0x00, 
 0xD8, 0x00, 0xB7, 0x00, 0xD9, 0x00, 0xD9, 0x00, 0xD8, 0x00, 0xB7, 0x00, 
 0x2D, 0x09, 0x6A, 0x00, 0xC0, 0x00, 0xC0, 0x00, 0xA2, 0x00, 0xC2, 0x00, 
 0xC1, 0x00, 0xC1, 0x00, 0xE0, 0x00, 0xE0, 0x00, 0xC7, 0x00, 0xC7, 0x00, 
 0x4E, 0x09, 0x8B, 0x00, 0xEC, 0x08, 0x08, 0x00, 0xA2, 0x00, 0x61, 0x00, 
 0x47, 0x00, 0xC9, 0x08, 0x79, 0x00, 0x58, 0x00, 0x99, 0x00, 0x79, 0x00, 
 0x75, 0x00, 0xB6, 0x00, 0x68, 0x00, 0xCA, 0x00, 0xB8, 0x00, 0x97, 0x00, 
 0xD5, 0x00, 0xF5, 0x00, 0x9A, 0x00, 0x9A, 0x00, 0xA6, 0x00, 0x08, 0x01, 
 0xD1, 0x00, 0xD1, 0x00, 0xED, 0x00, 0x0D, 0x01, 0xCF, 0x00, 0xCF, 0x00, 
 0xD8, 0x00, 0x97, 0x00, 0xB9, 0x00, 0xB9, 0x00, 0xB8, 0x00, 0x98, 0x00, 
 0x4C, 0x09, 0x69, 0x00, 0xE1, 0x00, 0xE0, 0x00, 0xC0, 0x00, 0xE0, 0x00, 
 0xA0, 0x00, 0xC0, 0x00, 0x00, 0x01, 0x00, 0x01, 0xC7, 0x00, 0xC7, 0x00, 
 0x6C, 0x09, 0x89, 0x00, 0xCE, 0x08, 0x0A, 0x00, 0xC0, 0x00, 0x80, 0x00, 
 0x26, 0x00, 0xA8, 0x08, 0x78, 0x00, 0x57, 0x00, 0xD5, 0x00, 0xD5, 0x00, 
 0x76, 0x00, 0x97, 0x00, 0x47, 0x00, 0xC9, 0x00, 0xB8, 0x00, 0x77, 0x00, 
 0xB6, 0x00, 0xB6, 0x00, 0x77, 0x00, 0x97, 0x00, 0x67, 0x00, 0x0A, 0x01, 
 0x90, 0x00, 0xB0, 0x00, 0x91, 0x00, 0xB1, 0x00, 0xAF, 0x00, 0xAF, 0x00, 
 0xF7, 0x08, 0xB7, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xD6, 0x00, 0xB6, 0x00, 
 0x10, 0x09, 0x4D, 0x00, 0x00, 0x01, 0xE0, 0x00, 0xC0, 0x00, 0xE0, 0x00, 
 0xC0, 0x00, 0xE0, 0x00, 0xC1, 0x00, 0xC1, 0x00, 0xC8, 0x00, 0xE9, 0x00};
