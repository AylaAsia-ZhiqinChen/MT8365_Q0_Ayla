package mtkLibdpFramework

import (
	"path/filepath"
	"strings"

	"android/soong/android"
	"android/soong/cc"
	"android/soong/android/mediatek"

	"github.com/google/blueprint/proptools"
)

func init() {
	android.RegisterModuleType("mtk_libdpframework_defaults", mtkLibdpFrameworkDefaultsFactory)
}

func mtkLibdpFrameworkDefaultsFactory() android.Module {
	module := cc.DefaultsFactory()
	android.AddLoadHook(module, func(ctx android.LoadHookContext) { mtkLibdpFrameworkLoadHook(ctx, true) })
	return module
}

func mtkLibdpFrameworkLoadHook(ctx android.LoadHookContext, vendor bool) {
	type props struct {
		Enabled *bool
		Srcs []string
		Cflags []string
		Local_include_dirs []string
		Include_dirs []string
		Header_libs []string
		Shared_libs []string
		Whole_static_libs []string
	}
	p := &props{}
	vars := ctx.Config().VendorConfig("mtkPlugin")
	targetBoardPlatform := vars.String("TARGET_BOARD_PLATFORM")
	if targetBoardPlatform == "" {
		p.Enabled = proptools.BoolPtr(false)
		ctx.AppendProperties(p)
		return
	}
	var mdpPlatformFolder, mdpPathSwitch string
	switch targetBoardPlatform {
	case "mt6799":
		p.Cflags = append(p.Cflags, "-DMDP_VERSION2")
		mdpPlatformFolder = "mt6799p"
	case "mt6735", "mt6753", "mt6737t":
		mdpPlatformFolder = "mt6735"
		mdpPathSwitch = "D1"
	case "mt6735m", "mt6737m":
		mdpPlatformFolder = "mt6735"
		mdpPathSwitch = "D2"
	case "mt6755", "mt6750":
		mdpPlatformFolder = "mt6755"
	case "mt6765", "mt6761":
		mdpPlatformFolder = "mt6765"
	default:
		mdpPlatformFolder = targetBoardPlatform
	}
	if vars.Bool("BUILD_MTK_LDVT") {
		p.Cflags = append(p.Cflags, "-DUSING_MTK_LDVT")
	}
	if vars.Bool("MTK_M4U_SUPPORT") {
		p.Cflags = append(p.Cflags, "-DMTK_M4U_SUPPORT")
	}
	if vars.Bool("MTK_IN_HOUSE_TEE_SUPPORT") {
		p.Cflags = append(p.Cflags, "-DMTK_IN_HOUSE_TEE")
	}
	p.Cflags = append(p.Cflags, "-DMDP_VERSION_2_0")
	switch targetBoardPlatform {
	case "mt8163":
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_USE_TABLET_M4U")
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_TABLET")
	case "mt8167", "mt8168":
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_USE_TABLET_M4U")
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_TABLET")
	case "mt8173":
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_8173")
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_TABLET")
    case "mt6885":
		p.Cflags = append(p.Cflags, "-DMDP_VERSION_6885")
	}
	// for HW code generated by R2, SW reset at each tile
	switch targetBoardPlatform {
	case "mt6755", "mt6750", "mt6797", "mt6739":
		p.Cflags = append(p.Cflags, "-DMDP_HW_TILE_SW_RESET")
	}
	switch targetBoardPlatform {
	case "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt6739", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885":
		p.Cflags = append(p.Cflags, "-DLIBPQ_VERSION_1_1")
	}
	// Platform independent part
	switch targetBoardPlatform {
	case "mt6735m", "mt6737m":
		p.Cflags = append(p.Cflags, "-DCMDQ_D2_EVENT")
	case "mt6753":
		p.Cflags = append(p.Cflags, "-DCMDQ_D3_EVENT")
	case "mt6735", "mt6737t":
		p.Cflags = append(p.Cflags, "-DCMDQ_D1_EVENT")
	case "mt6797", "mt6757":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
	case "mt6799", "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt3967", "mt6779":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_V3")
	case "mt6785":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_K414")
	case "mt6765", "mt6761":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_6765_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_V3")
	case "mt6768":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_6765_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_K414")
	case "mt6885":
		p.Cflags = append(p.Cflags, "-DCMDQ_6797_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_6765_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_6885_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_K414")
	case "mt6739":
		p.Cflags = append(p.Cflags, "-DCMDQ_6739_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_K414")
	case "mt8168":
		p.Cflags = append(p.Cflags, "-DCMDQ_6765_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_6739_EVENT")
		p.Cflags = append(p.Cflags, "-DCMDQ_V3")
	}
	switch targetBoardPlatform {
	case "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6758", "mt6763", "mt6759", "mt6739", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DMDP_RSZ_DISABLE_DCM_SMALL_TILE")
	}
	// Top level common code
	p.Srcs = append(p.Srcs, "common/buffer/DpBufferPool.cpp")
	p.Srcs = append(p.Srcs, "common/composer/DpPathComposer.cpp")
	p.Srcs = append(p.Srcs, "common/core/DpPathControl.cpp")
	p.Srcs = append(p.Srcs, "common/engine/DpEngine_CAMIN.cpp")
	p.Srcs = append(p.Srcs, "common/engine/DpTileUtil.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpAsyncBlitStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpAsyncBlitStream2.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpBlitStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpChannel.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpFragStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpIspStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpPortAdapt.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpVEncStream.cpp")
	p.Srcs = append(p.Srcs, "common/stream/DpNotifier.cpp")
	p.Srcs = append(p.Srcs, "common/util/DpProfiler.cpp")
	p.Srcs = append(p.Srcs, "common/util/DpWriteBMP.cpp")
	p.Srcs = append(p.Srcs, "common/util/DpWriteBin.cpp")
	// MDP2.0 Common code
	p.Srcs = append(p.Srcs, "MDP2.0/core/DpCommandQueue.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/core/DpCommandRecorder.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/core/DpPathConnection.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/core/DpTilePath.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngineBase.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_IMG2O.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_IMGI.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_RDMA.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_VENC.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_WDMA.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_WROT.cpp")
	p.Srcs = append(p.Srcs, "MDP2.0/engine/DpTileEngine.cpp")
	switch targetBoardPlatform {
	case "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_MDPSOUT.cpp")
	}
	switch targetBoardPlatform {
	case "mt6775", "mt6771", "mt3967", "mt8168":
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_CCORR.cpp")
	}
	switch targetBoardPlatform {
	case "mt6775", "mt6771", "mt3967", "mt6779", "mt6785", "mt6885":
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_AAL.cpp")
	}
	switch targetBoardPlatform {
	case "mt3967", "mt6779", "mt6785", "mt6885":
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_HDR.cpp")
	}
	switch targetBoardPlatform {
	case "mt6799", "mt6775", "mt6771", "mt3967", "mt6779", "mt6785":
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_WPEO.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_WPEI.cpp")
	}
    switch targetBoardPlatform {
    case "mt6885":
        p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_FG.cpp")
        p.Srcs = append(p.Srcs, "MDP2.0/engine/DpEngine_TCC.cpp")
    }
	// OSAL: memory proxy layer
	p.Srcs = append(p.Srcs, "common/osal/android/memory/DpMemory_Android.cpp")
	// OSAL: Special memory handler
	p.Srcs = append(p.Srcs, "common/osal/android/memory/DpIonHandler.cpp")
	p.Srcs = append(p.Srcs, "common/osal/android/memory/DpMmuHandler.cpp")
	p.Srcs = append(p.Srcs, "common/osal/android/memory/DpPmemHandler.cpp")
	// OSAL: Priority manager
	p.Srcs = append(p.Srcs, "MDP2.0/osal/android/driver/DpDriver_Android.cpp")
	// OSAL: Get/set property
	p.Srcs = append(p.Srcs, "common/osal/android/property/DpProperty_Android.cpp")
	// OSAL: Thread abstraction
	p.Srcs = append(p.Srcs, "common/osal/android/thread/DpThread_Android.cpp")
	// OSAL: Sync abstraction
	p.Srcs = append(p.Srcs, "common/osal/android/sync/DpSync_Android.cpp")
	// IP dependent part: RSZ
	var ipRszFolder string
	switch targetBoardPlatform {
	case "mt6580", "mt6570", "mt8167":
		ipRszFolder = "rsz6582"
	case "mt6797":
		ipRszFolder = "rsz6797"
		p.Cflags = append(p.Cflags, "-DRSZ_2_0")
	case "mt6799", "mt6763", "mt6758", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		ipRszFolder = "rsz6799"
		p.Cflags = append(p.Cflags, "-DRSZ_2_0")
		p.Cflags = append(p.Cflags, "-DRSZ_MT6799")
	case "mt6759", "mt6739":
		ipRszFolder = "rsz6759"
		p.Cflags = append(p.Cflags, "-DRSZ_2_0")
		p.Cflags = append(p.Cflags, "-DRSZ_MT6759")
	case "mt8173":
		ipRszFolder = "rsz8173"
	default:
		ipRszFolder = "rsz6752"
	}
	p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/engine/rsz", ipRszFolder, "DpEngine_RSZ.cpp"))
	switch targetBoardPlatform {
	case "mt6757", "mt6799", "mt6758", "mt6763", "mt6739", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DSUPPORT_CLEARZOOM")
	}
	// IP dependent part: Tile/ISP
	var ipTileIspFolder string
	switch targetBoardPlatform {
	case "mt6799":
		ipTileIspFolder = "isp6799p"
	case "mt6735m", "mt6737m", "mt6570", "mt6580":
		ipTileIspFolder = "isp6582"
	case "mt6755", "mt6750", "mt6761":
		ipTileIspFolder = "isp6755"
	case "mt6765":
		ipTileIspFolder = "isp6765"
	case "mt6739", "mt6797", "mt6757", "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt3967", "mt6779", "mt8163", "mt8167", "mt8173", "mt6768", "mt6785", "mt6885", "mt8168":
		ipTileIspFolder = strings.Replace(targetBoardPlatform, "mt", "isp", 1)
	default:
		ipTileIspFolder = "isp6752"
	}
	p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/engine/isp", ipTileIspFolder, "DpWrapper_ISP.cpp"))
	switch targetBoardPlatform {
	case "mt6799", "mt6775", "mt6771", "mt3967", "mt6779", "mt6785":
		p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/engine/isp", ipTileIspFolder, "DpWrapper_WPE.cpp"))
	}
	// IP dependent part: hdr
	supportHdr := false
	// IP dependent part: dre
	supportDre := false
	// IP dependent part: hfg
	supportHfg := false
	// IP dependent part: PqWhiteList
	supportPqWhiteList := false
	// IP dependent part: tdshp
	switch targetBoardPlatform {
	case "mt6739", "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DTDSHP_1_1")
	}
	switch targetBoardPlatform {
	case "mt6797", "mt6799", "mt6763", "mt6758", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DTDSHP_2_0")
	}
	switch targetBoardPlatform {
	case "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DTDSHP_3_0")
	}
	switch targetBoardPlatform {
	case "mt6797":
		p.Cflags = append(p.Cflags, "-DDYN_SHARP_VERSION=1")
		p.Cflags = append(p.Cflags, "-DDYN_CONTRAST_VERSION=1")
	case "mt6799", "mt6763", "mt6758":
		p.Cflags = append(p.Cflags, "-DDYN_SHARP_VERSION=1")
		p.Cflags = append(p.Cflags, "-DDYN_CONTRAST_VERSION=2")
	case "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Cflags = append(p.Cflags, "-DDYN_SHARP_VERSION=2")
		p.Cflags = append(p.Cflags, "-DDYN_CONTRAST_VERSION=2")
	default:
		p.Cflags = append(p.Cflags, "-DDYN_SHARP_VERSION=0")
		p.Cflags = append(p.Cflags, "-DDYN_CONTRAST_VERSION=0")
	}
	switch targetBoardPlatform {
	case "mt6771", "mt6775", "mt3967", "mt6779", "mt6785", "mt6885":
		p.Cflags = append(p.Cflags, "-DMDP_VSS_ASYNC_ENABLE")
		p.Cflags = append(p.Cflags, "-DISP_SMART_TILE_ENABLE")
		p.Cflags = append(p.Cflags, "-DMDP_REDUCE_CONFIG")
	}
	switch targetBoardPlatform {
	case "mt6765", "mt6768", "mt8168":
		p.Cflags = append(p.Cflags, "-DMDP_VSS_ASYNC_ENABLE")
	}
	switch targetBoardPlatform {
    case "mt8167", "mt8168":
        p.Cflags = append(p.Cflags, "-DMDP_REDUCE_CONFIG")
    }
	switch targetBoardPlatform {
	case "mt6797", "mt6799", "mt6779", "mt6768", "mt6785":
		p.Cflags = append(p.Cflags, "-DSUPPORT_VIDEO_UR")
	}
	var mdpOpenPqConfig bool
	if targetBoardPlatform == "mt8173" {
		mdpOpenPqConfig = false
	} else if vars.Bool("MTK_BASIC_PACKAGE") {
		mdpOpenPqConfig = true
		p.Cflags = append(p.Cflags, "-DBASIC_PACKAGE")
	} else {
		mdpOpenPqConfig = true
	}
	if mdpOpenPqConfig == false {
		p.Cflags = append(p.Cflags, "-DBASIC_PACKAGE")
	}
	ipTdshpFolder := "tdshp6752"
	// PQ support
	if mdpOpenPqConfig {
		switch targetBoardPlatform{
		case "mt3967", "mt6779", "mt6785":
			supportHdr = true
			p.Cflags = append(p.Cflags, "-DHDR_MT6779")
			p.Cflags = append(p.Cflags, "-DSUPPORT_HDR")
		case "mt6799":
			supportHdr = true
			p.Cflags = append(p.Cflags, "-DHDR_MT6799")
			p.Cflags = append(p.Cflags, "-DSUPPORT_HDR")
		}
		switch targetBoardPlatform{
		case "mt6775", "mt6771", "mt6779", "mt6785":
			supportDre = true
			p.Cflags = append(p.Cflags, "-DSUPPORT_DRE")
		}
		switch targetBoardPlatform{
		case "mt6779":
			p.Cflags = append(p.Cflags, "-DSUPPORT_VIDEO_DRE")
		case "mt6785":
			p.Cflags = append(p.Cflags, "-DSUPPORT_VIDEO_DRE")
			p.Cflags = append(p.Cflags, "-DSUPPORT_GAME_DRE")
		}
                if vars.Bool("MTK_SCLTM_SUPPORT") {
                        p.Cflags = append(p.Cflags, "-DSUPPORT_SCLTM")
                }
		switch targetBoardPlatform{
                case "mt6779":
                        supportHfg = true
                        p.Cflags = append(p.Cflags, "-DSUPPORT_HFG")
                }
		switch targetBoardPlatform {
		case "mt6771":
			p.Cflags = append(p.Cflags, "-DCALTM_VERSION_6771")
		case "mt6779", "mt6785":
			p.Cflags = append(p.Cflags, "-DCALTM_VERSION_6779")
		}
		switch targetBoardPlatform{
		case "mt6779", "mt6785":
			p.Cflags = append(p.Cflags, "-DSUPPORT_CCORR")
		}
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQSession.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQSessionManager.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQConfig.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDCConfig.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDSConfig.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDSAdaptor.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDCAdaptor.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQAlgorithmAdaptor.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQAlgorithmFactory.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQTuningBuffer.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQAshmem.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQReadBackFactory.cpp")
		p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQIspTuning.cpp")
		// add rsz for some platforms
		switch targetBoardPlatform {
		case "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt6739", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQRSZAdaptor.cpp")
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQRSZConfig.cpp")
		}
		// add color for some platforms
		switch targetBoardPlatform {
		case "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQColorConfig.cpp")
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQColorAdaptor.cpp")
		}
		// add hdr for some platforms
		if supportHdr {
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQHDRAdaptor.cpp")
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQHDRConfig.cpp")
		}
		// add dre for some platforms
		if supportDre {
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDREAdaptor.cpp")
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDREConfig.cpp")
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQDREHistogramAdaptor.cpp")
		}
		p.Cflags = append(p.Cflags, "-DDRE_ANDROID_PLATFORM")
		// add hfg for some platforms
                if supportHfg {
                        p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQHFGAdaptor.cpp")
                        p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQHFGConfig.cpp")
                }
		if supportPqWhiteList {
			p.Srcs = append(p.Srcs, "MDP2.0/engine/pq/PQWhiteList.cpp")
		}
		p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/engine/tdshp", ipTdshpFolder, "DpEngine_TDSHP.cpp"))
		// add color for some platforms
		switch targetBoardPlatform {
		case "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
			// IP dependent part: color
			ipColorFolder := "color6755"
			p.Cflags = append(p.Cflags, "-DMDP_COLOR_ENABLE")
			switch targetBoardPlatform {
			case "mt6797", "mt6757", "mt6799", "mt6763", "mt6758", "mt6775", "mt6771", "mt3967", "mt6779", "mt6785", "mt6885":
				p.Cflags = append(p.Cflags, "-DCOLOR_2_1")
			}
			switch targetBoardPlatform {
			case "mt6757", "mt6799", "mt6763", "mt6758", "mt6775", "mt6771", "mt3967", "mt6779", "mt6785", "mt6885":
				p.Cflags = append(p.Cflags, "-DCOLOR_3_0")
			}
			switch targetBoardPlatform {
			case "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
				p.Cflags = append(p.Cflags, "-DCOLOR_HW_SHARE")
			}
			p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/engine/color", ipColorFolder, "DpEngine_COLOR.cpp"))
		}
		switch targetBoardPlatform {
		case "mt6771", "mt6779", "mt6785":
			p.Cflags = append(p.Cflags, "-DSUPPORT_NVRAM_TUNING")
		}
		switch targetBoardPlatform {
		case "mt6779", "mt6785":
			p.Cflags = append(p.Cflags, "-DSUPPORT_DUMP_IN_FW")
		}
	}
	// Platform dependent part
	p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "composer/DpPathTopology.cpp"))
	p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "engine/DpEngineMutex.cpp"))
	p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "engine/DpPathConnectionPlatform.cpp"))
	switch targetBoardPlatform {
	case "mt6759", "mt6758", "mt6763", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "engine/DpESLControl.cpp"))
	case "mt8173":
		p.Srcs = append(p.Srcs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "engine/DpEngine_MDPMOUT.cpp"))
	}
	p.Local_include_dirs = append(p.Local_include_dirs, "MDP2.0/core")
	p.Local_include_dirs = append(p.Local_include_dirs, "MDP2.0/engine")
	p.Local_include_dirs = append(p.Local_include_dirs, "MDP2.0/hardware")
	p.Local_include_dirs = append(p.Local_include_dirs, "MDP2.0/osal")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/buffer")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/composer")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/core")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/engine")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/osal")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/stream")
	p.Local_include_dirs = append(p.Local_include_dirs, "common/util")
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/libomx/video/MtkWLParser/include"))
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/libomx/video/MtkWLParser/service/parserservice/include"))
	//p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "external/perfservicenative"))
	// Venc Modify +
	//switch targetBoardPlatform {
	//case "mt6797", "mt6799":
	//	p.Cflags = append(p.Cflags, "-DMTK_SLOW_MOTION_HEVC_SUPPORT")
	//	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/libvcodec/common/hardware/hevc_enc"))
	//	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/libvcodec/include"))
	//default:
	//	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/libvcodec/common/hardware/h264_enc"))
	//}
	// Venc Modify -
	mtkPlatformDir := strings.ToLower(vars.String("MTK_PLATFORM"))
	switch targetBoardPlatform {
	case "mt6735", "mt6737t", "mt6735m", "mt6737m", "mt6753", "mt6570", "mt6580", "mt6752", "mt6755", "mt6757", "mt6750", "mt6797", "mt6799", "mt6759", "mt6758", "mt6763", "mt8163", "mt8167", "mt8173", "mt6775", "mt6771", "mt6765", "mt6768", "mt6761", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		if !isLegacy(targetBoardPlatform) {
			switch targetBoardPlatform {
			case "mt6775", "mt6771", "mt3967", "mt6785":
				p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/drv/include/dip/isp_50"))
			case "mt6799":
				p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/drv/include/mt6799p/drv"))
			case "mt6779", "mt6885":
				p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/drv/include/dip", targetBoardPlatform))
			default:
				p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/drv/include", targetBoardPlatform, "drv"))
			}
		} else {
			var mtkCamPlatform string
			switch targetBoardPlatform {
			case "mt6753":
				mtkCamPlatform = "mt6735"
			case "mt6735m", "mt6737m":
				mtkCamPlatform = "mt6735m"
			case "mt8173":
				mtkCamPlatform = "mt8173"
			default:
				mtkCamPlatform = mtkPlatformDir
			}
			p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/legacy/platform", mtkCamPlatform, "include"))
			p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/mtkcam/legacy/platform", mtkCamPlatform, "include/mtkcam/drv"))
		}
	}
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "engine"))
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch, "hardware"))
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/platform", mdpPlatformFolder, mdpPathSwitch))
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/engine/rsz", ipRszFolder))
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/engine/isp", ipTileIspFolder))
	p.Local_include_dirs = append(p.Local_include_dirs, filepath.Join("MDP2.0/engine/tdshp", ipTdshpFolder))
	p.Local_include_dirs = append(p.Local_include_dirs, "MDP2.0/engine/pq")
	//p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/jpeg", mtkPlatformDir, "hal"))
	p.Local_include_dirs = append(p.Local_include_dirs, "include")
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/pq/v2.0/include"))
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/m4u", mtkPlatformDir))
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "external/libion_mtk/include"))
	p.Include_dirs = append(p.Include_dirs, "system/core/include/utils")
	p.Include_dirs = append(p.Include_dirs, "system/core/libsync/include/sync")
	p.Include_dirs = append(p.Include_dirs, "system/core/libsync")
	p.Include_dirs = append(p.Include_dirs, "system/core/include")
	p.Include_dirs = append(p.Include_dirs, "frameworks/native/libs/nativewindow/include")
	p.Include_dirs = append(p.Include_dirs, filepath.Join(mediatek.MtkPathSource, "hardware/gralloc_extra/include"))
	if vars.Bool("MTK_MIRAVISION_SUPPORT") {
		p.Cflags = append(p.Cflags, "-DCONFIG_FOR_SOURCE_PQ")
	}
	if mdpOpenPqConfig {
		p.Shared_libs = append(p.Shared_libs, "libhidlbase")
		p.Shared_libs = append(p.Shared_libs, "libhidlmemory")
	}
	//switch targetBoardPlatform {
	//case "mt6797", "mt6799":
	//	p.Shared_libs = append(p.Shared_libs, "libvcodecdrv")
	//}
	if vendor {
		if targetBoardPlatform == "mt6799" {
			p.Whole_static_libs = append(p.Whole_static_libs, "libdpframework_prot2")
		} else {
			p.Whole_static_libs = append(p.Whole_static_libs, "libdpframework_prot")
		}
		p.Shared_libs = append(p.Shared_libs, "libion_mtk")
		p.Shared_libs = append(p.Shared_libs, "libgralloc_extra")
		if vars.Bool("MTK_M4U_SUPPORT") {
			p.Shared_libs = append(p.Shared_libs, "libm4u")
		}
		if mdpOpenPqConfig {
			p.Shared_libs = append(p.Shared_libs, "vendor.mediatek.hardware.pq@2.0")
			p.Shared_libs = append(p.Shared_libs, "libpq_prot")
		}
	} else {
		if targetBoardPlatform == "mt6799" {
			p.Whole_static_libs = append(p.Whole_static_libs, "libdpframework_prot2_mtk")
		} else {
			p.Whole_static_libs = append(p.Whole_static_libs, "libdpframework_prot_mtk")
		}
		p.Shared_libs = append(p.Shared_libs, "libion_mtk_sys")
		p.Shared_libs = append(p.Shared_libs, "libgralloc_extra_sys")
		if vars.Bool("MTK_M4U_SUPPORT") {
			p.Shared_libs = append(p.Shared_libs, "libm4u_sys")
		}
		if mdpOpenPqConfig {
			p.Shared_libs = append(p.Shared_libs, "vendor.mediatek.hardware.pq@2.0")
			p.Shared_libs = append(p.Shared_libs, "libpq_prot_mtk")
		}
	}
	ctx.AppendProperties(p)
}

func isLegacy(targetBoardPlatform string) bool {
	switch targetBoardPlatform {
	case "mt6757", "mt6797", "mt6799", "mt6759", "mt6763", "mt6758", "mt3886", "elbrus", "mt6775", "mt6771", "mt6765", "mt6768", "mt3967", "mt6779", "mt6785", "mt6885", "mt8168":
		return false
	default:
		return true
	}
}
