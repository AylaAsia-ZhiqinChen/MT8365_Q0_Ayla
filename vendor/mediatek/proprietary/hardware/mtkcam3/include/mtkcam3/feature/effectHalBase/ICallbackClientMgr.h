/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein is
 * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
 * the prior written permission of MediaTek inc. and/or its licensors, any
 * reproduction, modification, use or disclosure of MediaTek Software, and
 * information contained herein, in whole or in part, shall be strictly
 * prohibited.
 *
 * MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
 * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
 * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
 * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
 * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
 * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
 * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
 * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
 * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
 * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
 * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
 * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
 * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
 * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
 * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek
 * Software") have been modified by MediaTek Inc. All revisions are subject to
 * any receiver's applicable license agreements with MediaTek Inc.
 */

#ifndef _MTK_PLATFORM_HARDWARE_INCLUDE_MTKCAM_SDK_HAL_ICALLBACKMGR_H_
#define _MTK_PLATFORM_HARDWARE_INCLUDE_MTKCAM_SDK_HAL_ICALLBACKMGR_H_

#include <utils/RefBase.h>
#include <utils/Errors.h>
#include <system/camera.h>
#include <mtkcam/def/common.h>
#include <mtkcam/utils/fwk/MtkCamera.h>
#include <mtkcam/utils/imgbuf/IImageBuffer.h>
namespace NSCam
{
using namespace android;
using NSCam::IImageBuffer;


enum {
    MTK_CAMERA_CALLBACK_CLIENT_ID_SINGLE   = 0x00000000,
    MTK_CAMERA_CALLBACK_CLIENT_ID_DUAL     = 0x00000001,
};


typedef bool (*BufferCBFunc) (int64_t const   i8Timestamp,
                              uint32_t const  u4BitstreamSize,
                              uint8_t const*  puBitstreamBuf,
                              uint32_t const  u4CallbackIndex,
                              bool            fgIsFinalImage,
                              uint32_t const  msgType,
                              uint32_t const  u4BufferOffsetForTimeStamp,
                              uint32_t const  u4CbId
                              );

typedef bool (*BufferPostviewCBFunc) (int64_t const  i8Timestamp,
                                      uint32_t const planeCount,
                                      uint32_t const width,
                                      uint32_t const height,
                                      uint32_t const fmt,
                                      uint8_t* const u4Bitstream[],
                                      uint32_t const widthInBytes[],
                                      uint32_t const strideInBytes[],
                                      uint32_t const scanlines[],
                                      uint32_t const u4BufferOffsetForTimeStamp,
                                      uint32_t const u4CbId
                                      );


typedef void (*CallbackFunc) ();

class ICallbackClientMgr
    : public android::RefBase
{
public:
    static ICallbackClientMgr*         getInstance();
    // Generate a timestamp for usage of ICallbackClientMgr. While caller invoking
    // ICallbackClientMgr::onCB_CompressedImage_packed, caller has to give a timestamp,
    // the timestamp is supposed to be generated by this method. See also
    // ICallbackClientMgr::onCB_CompressedImage_packed.
    //  @return                        A timestamp generated from ICallbackClientMgr.
    static int64_t                     generateTimestamp();

    // To get the offset size (in byte) of the bitstreams, bitstream may be Post-View image
    // buffer, or JPEG image buffer.
    //  @param msgType                 Get suggested (or says requested) offset size of the given message.
    //  @return                        Offset in bytes.
    static size_t                      getCustomizedBufOffset(uint32_t const msgType);

	// Get formatted image format data. Some image format may not be formatted and this method
	// returns 0.
	// 	@param f                       Image format to be formatted.
	//  @return                        Formatted image buffer value.
	static uint32_t                    getFormatedImageFormat(EImageFormat const f);

    virtual                            ~ICallbackClientMgr() {}
    virtual MINT32                     size() = 0;
    virtual MVOID                      createCallbackClient(MINT64 timestamp) = 0;
    virtual MVOID                      removeCallbackClient(MINT64 timestamp, MBOOL bCB, uint32_t const u4CbId) = 0;
    virtual MBOOL                      canSupportBGService() = 0;
    virtual MBOOL                      registerCB(CallbackFunc func, uint32_t const u4CbId = MTK_CAMERA_CALLBACK_CLIENT_ID_DUAL) = 0;
    virtual MBOOL                      registerBufferCB(BufferCBFunc func) = 0;
    virtual MBOOL                      registerBufferCB(BufferPostviewCBFunc func) = 0;


    // Calback API
    //  @param i8Timestamp              Timestamp for
    //                                  1. Query CallbackClient instance.
    //                                  2. Can be compressed into bitstream in the leading
    //                                     N bytes if argument u4BufOffset4Ts > 0, where N = u4BitstreamSize.
    //  @param u4BitstreamSize          The size of bitstream in byte.
    //  @param puBitstreamBuf           The bitstream data.
    //  @param u4CallbackIndex
    //  @param fgIsFinalImage
    //  @param msgType
    //  @param u4CbId                      Determine callbackclient id (0: single cam, 1: dual cam)
    //  @param u4BufOffset4Ts           The offset size of final data. If this argument > 0, the timestamp
    //                                  will be stored in the leading u4BufOffset4Ts bytes.
    virtual bool  onCB_CompressedImage_packed(
                          int64_t const   i8Timestamp                   __attribute__((unused)),
                          uint32_t const  u4BitstreamSize               __attribute__((unused)),
                          uint8_t const*  puBitstreamBuf                __attribute__((unused)),
                          uint32_t const  u4CallbackIndex = 0,
                          bool            fgIsFinalImage = true,
                          uint32_t const  msgType = MTK_CAMERA_MSG_EXT_DATA_COMPRESSED_IMAGE,
                          uint32_t const  u4CbId  = MTK_CAMERA_CALLBACK_CLIENT_ID_SINGLE
                      ) = 0;

    // Callback API: callback postview image buffer
    virtual bool  onCB_PostviewClient(
                          int64_t const      i8Timestamp,
                          IImageBuffer const *pPostviewBuf,
                          uint32_t const     u4CbId = MTK_CAMERA_CALLBACK_CLIENT_ID_SINGLE
                      ) = 0;

    // Callback API: callback postview image buffer with raw pointers
    virtual bool  onCB_PostviewClient(
                          int64_t  const i8Timestamp,
                          uint32_t const planeCount,
                          uint32_t const width,
                          uint32_t const height,
                          uint32_t const fmt,
                          uint8_t* const u4Bitstream[],
                          uint32_t const widthInBytes[],
                          uint32_t const strideInBytes[],
                          uint32_t const scanlines[],
                          uint32_t const u4CbId = MTK_CAMERA_CALLBACK_CLIENT_ID_SINGLE
                      ) = 0;

};
} //end NSCam

#endif  //_MTK_PLATFORM_HARDWARE_INCLUDE_MTKCAM_SDK_HAL_ICALLBACKMGR_H_
