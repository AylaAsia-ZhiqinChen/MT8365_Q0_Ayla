/*
 * Copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package vendor.mediatek.hardware.engineermode@1.0;
import IEmCallback;
interface IEmd {
    //sample code
    setCallback(IEmCallback callback);
    sendToServer(string data) generates (bool success);
    sendToServerWithCallBack(string data, IEmCallback callback) generates (bool success);

    //EM telephony property set
    setSmsFormat(string data) generates (bool success);
    setCtIREngMode(string data) generates (bool success);
    setTestSimCardType(string data) generates (bool success);
    setPreferGprsMode(string data) generates (bool success);
    setRadioCapabilitySwitchEnable(string data) generates (bool success);
    setDisableC2kCap(string data) generates (bool success);
    setImsTestMode(string data) generates (bool success);
    setDsbpSupport(string data) generates (bool success);
    setVolteMalPctid(string data) generates (bool success);

    //EM BT
    btStartRelayer(int32_t port, int32_t speed) generates (int32_t result);
    btStopRelayer() generates (int32_t result);
    btIsBLESupport() generates (int32_t result);
    btIsBLEEnhancedSupport() generates (bool success);
    btInit() generates (int32_t result);
    btUninit() generates (int32_t result);
    btDoTest(int32_t kind, int32_t pattern, int32_t channel, int32_t pocketType,
            int32_t pocketTypeLen, int32_t freq, int32_t power) generates (int32_t result);
    btHciCommandRun(vec<uint8_t> input) generates (vec<uint8_t> result);
    btStartNoSigRxTest(int32_t pattern, int32_t pockettype,
        int32_t freq, int32_t address) generates (bool success);
    btEndNoSigRxTest() generates (vec<int32_t> result);
    btIsComboSupport() generates (int32_t result);
    btPollingStart() generates (int32_t result);
    btPollingStop() generates (int32_t result);

    //EM log and debug property set
    setMdResetDelay(string data) generates (bool success);
    setWcnCoreDump(string data) generates (bool success);
    setOmxVencLogEnable(string data) generates (bool success);
    setOmxVdecLogEnable(string data) generates (bool success);
    setVdecDriverLogEnable(string data) generates (bool success);
    setSvpLogEnable(string data) generates (bool success);
    setOmxCoreLogEnable(string data) generates (bool success);
    setVencDriverLogEnable(string data) generates (bool success);
    setModemWarningEnable(string data) generates (bool success);

    //EM MD log filter
    genMdLogFilter(string keyword, string filepath) generates (bool success);

    //Hardware-testing UartUsb switch
    setUsbPort(string data) generates (bool success);

    //Hardware-testing usb
    setUsbOtgSwitch(string data) generates (bool success);
    setEmUsbValue(string data) generates (bool success);
    setEmUsbType(string data) generates (bool success);

    //USB bypass mode
    setBypassEn(string data) generates (bool success);
    setBypassDis(string data) generates (bool success);
    setBypassService(string data) generates (bool success);

    //EM others property set
    setMoms(string data) generates (bool success);

    //EM RSC
    clearItemsforRsc() generates (bool success);

    //EM get otafiles from nvdata directory
    getFilePathListWithCallBack(string data, IEmCallback callback) generates (bool success);

};