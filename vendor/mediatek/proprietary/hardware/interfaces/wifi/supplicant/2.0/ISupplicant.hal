/*
 * Copyright 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.wifi.supplicant@2.0;

import android.hardware.wifi.supplicant@1.0::SupplicantStatus;
import android.hardware.wifi.supplicant@1.0::ISupplicant;
import ISupplicantIface;
import ISupplicantCallback;

/**
 * Interface exposed by the wpa_supplicant HIDL service registered
 * with the hardware service manager.
 * This is the root level object for any the wpa_supplicant interactions.
 */
interface ISupplicant {
  /**
   * Register for callbacks from the supplicant service.
   *
   * These callbacks are invoked for global events that are not specific
   * to any interface or network. Registration of multiple callback
   * objects is supported. These objects must be deleted when the corresponding
   * client process is dead.
   *
   * @param callback An instance of the |ISupplicantCallback| HIDL interface
   *        object.
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_UNKNOWN|
   */
  registerCallback(ISupplicantCallback callback)
      generates (SupplicantStatus status);

  /**
   * Gets a HIDL interface object for the interface corresponding to iface
   * name which the supplicant already controls.
   *
   * @param ifaceInfo Combination of the iface type and name retrieved
   *        using |listInterfaces|.
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_UNKNOWN|,
   *         |SupplicantStatusCode.FAILURE_IFACE_UNKOWN|
   * @return iface HIDL interface object representing the interface if
   *         successful, null otherwise.
   */

  getInterface(IfaceInfo ifaceInfo)
      generates (SupplicantStatus status, ISupplicantIface iface);
};
