/*
 * Copyright 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.wifi.supplicant@2.0;

import android.hardware.wifi.supplicant@1.0::SupplicantStatus;
import ISupplicantIface;
import ISupplicantStaIfaceCallback;
/**
 * Interface exposed by the supplicant for each station mode network
 * interface (e.g wlan0) it controls.
 */
interface ISupplicantStaIface extends ISupplicantIface {
  /**
  * Feature Mask of supplicant Sta interface
  * Users of ISupplicantStaIface can query which features are supported in wpa_supplicant
  */
  enum FeatureMask : uint32_t {
    WAPI = 1 << 0
  };

  /**
   * Register for callbacks from this interface.
   *
   * These callbacks are invoked for events that are specific to this interface.
   * Registration of multiple callback objects is supported. These objects must
   * be automatically deleted when the corresponding client process is dead or
   * if this interface is removed.
   *
   * @param callback An instance of the |ISupplicantStaIfaceCallback| HIDL
   *        interface object.
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_UNKNOWN|,
   *         |SupplicantStatusCode.FAILURE_IFACE_INVALID|
   */
  registerCallback(ISupplicantStaIfaceCallback callback)
      generates (SupplicantStatus status);

  /**
   * Set WAPI certificate alias list
   * Each alias should map to three files(CA cert, client cert and client key) in keystore
   * Each alias should be seperated by ';'
   * @param aliasList contains a alias string.
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|,
   *         |SupplicantStatusCode.FAILURE_ARGS_INVALID|
   */
  setWapiCertAliasList(string aliasList) generates (SupplicantStatus status);

  /**
   * Get MTK feature mask in wpa_supplicant
   * @return status Status of the operation.
   *         Possible status codes:
   *         |SupplicantStatusCode.SUCCESS|
   * @return feature_mask
   *         Possible feature mask are listed in MtkFeatureMask
   */
  getFeatureMask() generates (SupplicantStatus status, uint32_t feature_mask);
};
