/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2018. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */
/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.mtkradioex@1.0;

import android.hardware.radio@1.1::RadioAccessNetworks;
import android.hardware.radio@1.0::CdmaSmsAck;
import android.hardware.radio@1.0::DataProfileInfo;
import android.hardware.radio@1.0::RadioTechnology;
import android.hardware.radio@1.0::Dial;
import android.hardware.radio@1.0::ImsSmsMessage;
import android.hardware.radio@1.0::SmsAcknowledgeFailCause;

import IMtkRadioExResponse;
import IMtkRadioExIndication;
import IImsRadioResponse;
import IImsRadioIndication;
import IAtciResponse;
import IAtciIndication;
import IMwiRadioResponse;
import IMwiRadioIndication;
import IRcsRadioIndication;
import IRcsRadioResponse;
import ISERadioResponse;
import ISERadioIndication;
import ISubsidyLockResponse;
import ISubsidyLockIndication;
import IEmRadioResponse;
import IEmRadioIndication;
import IAssistRadioResponse;
import ICapRadioResponse;

/**
 * This interface is used by telephony and telecom to talk to cellular radio.
 * All the functions have minimum one parameter:
 * serial: which corresponds to serial no. of request. Serial numbers must only be memorized for the
 * duration of a method call. If clients provide colliding serials (including passing the same
 * serial to different methods), multiple responses (one for each method call) must still be served.
 */
interface IMtkRadioEx {
    /**
     * When response type received from a radio indication or radio response is
     * RadioIndicationType:UNSOLICITED_ACK_EXP or RadioResponseType:SOLICITED_ACK_EXP respectively,
     * acknowledge the receipt of those messages by sending responseAcknowledgement().
     *
     */
    oneway responseAcknowledgementMtk();

    /**
     * Set response functions for mtk radio requests & radio indications.
     *
     * @param radioResponse Object containing response functions
     * @param radioIndication Object containing radio indications
     */
    setResponseFunctionsMtk(IMtkRadioExResponse radioResponse,
            IMtkRadioExIndication radioIndication);

   /**
     * Set response functions for IMS radio requests & radio indications.
     *
     * @param radioResponse Object containing response functions
     * @param radioIndication Object containing radio indications
     */
    setResponseFunctionsIms(IImsRadioResponse radioResponse,
            IImsRadioIndication radioIndication);

   /**
     * Set response functions for MWI radio requests & radio indications.
     *
     * @param radioResponse Object containing response functions
     * @param radioIndication Object containing radio indications
     */
    setResponseFunctionsMwi(IMwiRadioResponse radioResponse,
            IMwiRadioIndication radioIndication);

   /**
     * Set response functions for ISecureElement radio requests & radio indications.
     *
     * @param radioResponse Object containing response functions
     * @param radioIndication Object containing radio indications
     */
    setResponseFunctionsSE(ISERadioResponse radioResponse,
            ISERadioIndication radioIndication);

    /**
      * Set response functions for EM radio requests & radio indications.
      *
      * @param radioResponse Object containing response functions
      * @param radioIndication Object containing radio indications
      */
     setResponseFunctionsEm(IEmRadioResponse radioResponse,
             IEmRadioIndication radioIndication);

     /**
      * Set response functions for telephony assist radio requests & radio indications.
      *
      * @param radioResponse Object containing response functions
      * @param radioIndication Object containing radio indications
      */
     setResponseFunctionsAssist(IAssistRadioResponse radioResponse);

     /**
      * Set response functions for telephony assist radio requests & radio indications.
      *
      * @param radioResponse Object containing response functions
      * @param radioIndication Object containing radio indications
      */
     setResponseFunctionsCap(ICapRadioResponse radioResponse);

    /*
     * Accept a video call
     *
     * @param serial Serail Number
     * @param videoMode Video Mode
     * @param callId Call ID
     */
    oneway videoCallAccept(int32_t serial, int32_t videoMode,
            int32_t callId);

    /*
     * IMS ECT Command
     *
     * @param serial Serail Number
     * @param number Number
     * @param type Type
     */
    oneway imsEctCommand(int32_t serial, string number, int32_t type);

    /*
     * Control a call
     *
     * @param serial Serail Number
     * @param controlType 0: Hold call, 1: Resume call
     * @param callId Call ID
     */
    oneway controlCall(int32_t serial, int32_t controlType, int32_t callId);

    /*
     * Deregister IMS with cause
     *
     * @param serial Serail Number
     * @param cause Cause
     */
    oneway imsDeregNotification(int32_t serial, int32_t cause);

    /*
     * Turn On IMS
     *
     * @param serial Serail Number
     * @param isOn Is IMS turn ON
     */
    oneway setImsEnable(int32_t serial, bool isOn);

    /*
     * Turn On IMS Video
     *
     * @param serial Serail Number
     * @param isOn Is IMS Video turn ON
     */
    oneway setImsVideoEnable(int32_t serial, bool isOn);

    /*
     * Turn On/Off IMS Features
     *
     * @param serial Serail Number
     * @param volteEnable Is VoLTE turn ON/OFF
     * @param vilteEnable Is ViLTE turn ON/OFF
     * @param vowifiEnable Is VoWifi turn ON/OFF
     * @param viwifiEnable ViWifi VoLTE turn ON/OFF
     * @param smsEnable Is SMS turn ON/OFF
     * @param eimsEnable Is EIMS turn ON/OFF
     */
    oneway setImscfg(int32_t serial,
                     bool volteEnable,
                     bool vilteEnable,
                     bool vowifiEnable,
                     bool viwifiEnable,
                     bool smsEnable,
                     bool eimsEnable);

    /*
     * Get provision value
     *
     * @param serial Serail Number
     * @param provisionstring Key of the provision data
     */
    oneway getProvisionValue(int32_t serial,string provisionstring);

    /*
     * Set provision value
     *
     * @param serial Serail Number
     * @param provisionstring Key of the provision data
     * @param provisionValue Value of the provision data
     */
    oneway setProvisionValue(int32_t serial, string provisionstring,
            string provisionValue);

    /*
     * Control Conference Member
     *
     * @param serial Serail Number
     * @param controlType 0: Remove, 1: Add
     * @param confCallId Conference call ID
     * @param address Address
     * @param callToAdd Call ID to be controlled
     */
    oneway controlImsConferenceCallMember(int32_t serial, int32_t controlType,
            int32_t confCallId, string address, int32_t callId);

    /*
     * Set WFC Profile Information
     * RIL_REQUEST_SET_WFC_PROFILE
     *
     * @param serial Serail Number
     * @param wfcPreference WFC Perference
     */
    oneway setWfcProfile(int32_t serial, int32_t wfcPreference);

    /*
     * Conference Dial
     *
     * @param serial Serail Number
     * @param dailInfo Conference Dial Information
     */
    oneway conferenceDial(int32_t serial, ConferenceDial dailInfo);

    /**
     * To set multiple IMS configurations to modem in a RIL request
     * RIL Request: RIL_REQUEST_SET_MD_IMSCFG
     *
     * @param serial Serail Number
     * @param keys Defined in ImsConfig.ConfigConstants, entries divided by ",".
     * @param values The values for each keys, divided by ",".
     * @param type The type of the config, maps to AT+ECFGSET, AT+EWOCFGSET and AT+EIWLCFGSET AT commands.
     *
     * Response callback is IMtkRadioExResponse.setModemImsCfgResponse()
     */
    oneway setModemImsCfg(int32_t serial, string keys, string values, int32_t type);

    /*
     * Dial with SIP URI
     *
     * @param serial Serail Number
     * @param address Address
     */
    oneway dialWithSipUri(int32_t serial, string address);

    /*
     * VT Dial with SIP URI
     *
     * @param serial Serail Number
     * @param address Address
     */
    oneway vtDialWithSipUri(int32_t serial, string address);

    /**
     * VT Dial
     * RIL Request: RIL_REQUEST_VT_DIAL
     *
     * @param serial Serail Number
     * @param dialInfo DialInfo
     */
    oneway vtDial(int32_t serial, Dial dialInfo);

    /*
     *
     * @param serial Serail Number
     * @param callId Call ID
     */
    oneway forceReleaseCall(int32_t serial, int32_t callId);

    /*
     * Response message of 'Bearer Activiation Done' - Void
     *
     * @param serial Serail Number
     * @param action Action
     * @param ussiString USSI String
     */
    oneway imsBearerStateConfirm(int32_t serial, int32_t aid,
             int32_t action, int32_t status);

    /*
     * Request Report for IMS RTP
     *
     * @param serial Serail Number
     * @param pdnId PDN Id
     * @param networkId Network Id
     * @param timer Timer
     */
    oneway setImsRtpReport(int32_t serial, int32_t pdnId, int32_t networkId,
             int32_t timer);

    /*
     * Request Pull Call
     *
     * @param serial Serail Number
     * @param target Target
     * @param isVideoCall isVideoCall
     */
    oneway pullCall(int32_t serial, string target, bool isVideoCall);

     /*
     * Set IMS Registration Report
     *
     * @param serial Serail Number
     */
    oneway setImsRegistrationReport(int32_t serial);

    /// M: eMBMS feature
    /**
     * Send eMBMS Command String
     *
     * @param serial Serial number of request.
     * @param data command string
     *
     * Response function is IMtkRadioExResponse.sendEmbmsAtCommandResponse
     */
    oneway sendEmbmsAtCommand(int32_t serial, string data);
    /// M: eMBMS end

    /// M: [Network][C2K] Sprint roaming control @{
    /**
     * Set the roaming enabling.
     *
     * @param serial Serial number of request.
     * @param config the configuration.
     *  config[0]: phone id
     *  config[1]: international_voice_text_roaming (0,1)
     *  config[2]: international_data_roaming (0,1)
     *  config[3]: domestic_voice_text_roaming (0,1)
     *  config[4]: domestic_data_roaming (0,1)
     *  config[5]: domestic_LTE_data_roaming (1)
     *
     * Response function is IMtkRadioExResponse.setRoamingEnableResponse
     */
    oneway setRoamingEnable(int32_t serial, vec<int32_t> config);

    /**
     * Get the roaming enabling.
     *
     * @param serial Serial number of request.
     * @param phoneId the id of the phone.
     *
     * Response function is IMtkRadioExResponse.getRoamingEnableResponse
     */
    oneway getRoamingEnable(int32_t serial, int32_t phoneId);
    /// @}

    // MTK SS Feature : Start
    /**
     * Change call barring facility password (Checked By Network)
     *
     * @param serial Serial number of request.
     * @param facility facility string code from TS 27.007 7.4 (eg "AO" for BAOC)
     * @param oldPassword old password
     * @param newPassword new password
     * @param cfmPassword confirm password
     *
     * Response function is IMtkRadioExResponse.setBarringPasswordResponse()
     */
    oneway setBarringPasswordCheckedByNW(int32_t serial, string facility,
            string oldPassword, string newPassword, string cfmPassword);

    /**
     * Set CLIP (Calling Line Identification Presentation), for MMI code *30# and #30#
     *
     * @param serial Serial number of request.
     * @param clipEnable CLIP mode to set.
     *
     * Response function is IMtkRadioExResponse.setCLIPResponse
     */
    oneway setClip(int32_t serial, int32_t clipEnable);

    /**
     * Query COLP (Connected Line Identification Presentation), for MMI code *#76*
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getColpResponse
     */
    oneway getColp(int32_t serial);

    /**
     * Query COLR (Connected Line Identification Restriction), for MMI code *#77#
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getColrResponse
     */
    oneway getColr(int32_t serial);

    /**
     * Query CNAP (Calling Name Presentation), for MMI code *#300#
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.sendCnapResponse
     */
    oneway sendCnap(int32_t serial, string cnapssMessage);

    /**
     * Set COLP
     *
     * @param serial Serial number of request.
     * @param colpEnable COLP mode to set.
     *
     * Response function is IMtkRadioExResponse.setCOLPResponse
     */
    oneway setColp(int32_t serial, int32_t colpEnable);

    /**
     * Set COLR
     *
     * @param serial Serial number of request.
     * @param colrEnable COLR mode to set.
     *
     * Response function is IMtkRadioExResponse.setCOLRResponse
     */
    oneway setColr(int32_t serial, int32_t colrEnable);

    /**
     * Request call forward in time slot status.
     *
     * @param serial Serial number of request.
     * @param callInfoEx CallForwardInfoEx
     *
     * Response function is IMtkRadioExResponse.queryCallForwardInTimeSlotStatusResponse()
     */
    oneway queryCallForwardInTimeSlotStatus(int32_t serial,
            CallForwardInfoEx callInfoEx);

    /**
     * Configure call forward rule in time slot
     *
     * @param serial Serial number of request.
     * @param callInfoEx CallForwardInfoEx
     *
     * Response function is IMtkRadioExResponse.setCallForwardInTimeSlotResponse()
     */
    oneway setCallForwardInTimeSlot(int32_t serial, CallForwardInfoEx callInfoEx);

    /**
     * Run Gba Authentication
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.runGbaAuthenticationResponse()
     */
    oneway runGbaAuthentication(int32_t serial, string nafFqdn, string nafSecureProtocolId,
            bool forceRun, int32_t netId);

    /**
     * Send USSI
     *
     * @param serial Serail Number
     * @param ussiString USSI String
     */
    oneway sendUssi(int32_t serial, string ussiString);

    /**
     * Cancel Pending USSI
     *
     * @param serial Serail Number
     */
    oneway cancelUssi(int32_t serial);

    /**
     * Get xcap status
     *
     * @param serial Serail Number
     */
    oneway getXcapStatus(int32_t serial);
    /**
     * Reset supplementary service parameter.
     *
     * @param serial Serail Number
     */
    oneway resetSuppServ(int32_t serial);


    /**
     * Setup customized XCAP user agent string
     *
     * @param serial Serail Number
     * @param serial Customized XCAP user agent string
     */
    oneway setupXcapUserAgentString(int32_t serial, string userAgent);
    // MTK SS Feature : End

    /// M: CC @{
    /**
     * Hang up all
     * After this HANGUP request returns, Radio must show the connection is NOT
     * active anymore in next getCurrentCalls() query.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.hangupAllResponse()
     *
     */
    oneway hangupAll(int32_t serial);

    /**
     * Proprietary incoming call handling.
     * RIL Request: "RIL_REQUEST_SET_CALL_INDICATION"
     *
     * @param serial Serial number of request.
     * @param mode allow/disallow for the call
     * @param callId id of the call
     * @param seqNumber sequence number of the call
     * @cause reason to set the mode
     *
     * Response function is IMtkRadioExResponse.setCallIndicationResponse()
     */
    oneway setCallIndication(int32_t serial, int32_t mode, int32_t callId, int32_t seqNumber,
            int32_t cause);

    /**
     * E911 Request current status
     * RIL Request: RIL_REQUEST_CURRENT_STATUS
     *
     * @param serial Serail Number
     * @param number Emergency number
     * @param enable enable/disable
     * @param airplaneMode airplane mode (0: off, 1: on)
     * @param imsReg IMS registration state
     */
    oneway setEccMode(int32_t serial, string number, int32_t enable, int32_t airplaneMode,
            int32_t imsReg);

    /**
     * E911 Set ECC preferred Rat
     * RIL Request: RIL_REQUEST_ECC_PREFERRED_RAT
     *
     * @param serial Serail Number
     * @param phoneType (1: gsm, 2: cdma)
     */
    oneway eccPreferredRat(int32_t serial, int32_t phoneType);

    /**
     * Set voice prefer status.
     *
     * @param serial Serial number of request
     * @param status Voice prefer status
     *
     * Response function is IMtkRadioExResponse.setVoicePreferStatusResponse()
     *
     */
    oneway setVoicePreferStatus(int32_t serial, int32_t status);

    /**
     * Set ECC numbers.
     *
     * @param serial Serial number of request
     * @param ecc_list_with_card ECC numbers when card inserted
     * @param ecc_list_no_card ECC numbers when card not inserted
     *
     * Response function is IMtkRadioExResponse.setEccNumResponse()
     *
     */
    oneway setEccNum(int32_t serial, string ecc_list_with_card, string ecc_list_no_card);

    /**
     * Get ECC numbers.
     *
     * @param serial Serial number of request
     *
     * Response function is IMtkRadioExResponse.getEccNumResponse()
     *
     */
    oneway getEccNum(int32_t serial);
    /// @}

    // PHB START
    /**
     * Request the information of the given storage type.
     *
     * @param serial Serial number of request.
     * @param type The type of the storage, refer to PHB_XDN defined in the RilConstants
     *
     * Response function is IMtkRadioExResponse.queryPhbStorageInfoResponse()
     */
    oneway queryPhbStorageInfo(int32_t serial, int32_t type);

    /**
     * Request update a PHB entry using the given PhbEntry.
     *
     * @param serial Serial number of request.
     * @param phbEntry A PHB entry strucutre, PhbEntryStructure as defined in types.hal
     *          when one of the following occurs, it means delete the entry.
     *          1. phbEntry.number is NULL
     *          2. phbEntry.number is empty and phbEntry.ton = 0x91
     *          3. phbEntry.alphaId is NULL
     *          4. both phbEntry.number and phbEntry.alphaId are empty.
     *
     * Response function is IMtkRadioExResponse.writePhbEntryResponse()
     */
    oneway writePhbEntry(int32_t serial, PhbEntryStructure phbEntry);

    /**
     * Request read PHB entries from the given storage.
     *
     * @param serial Serial number of request.
     * @param type The type of the storage, refer to PHB_* defined in the RilConstants
     * @param bIndex The begin index of the entries to be read
     * @param eIndex The end index of the entries to be read, note that the (eIndex - bIndex +1)
     *               should not exceed the value RilConstants.PHB_MAX_ENTRY
     *
     * Response function is IMtkRadioExResponse.readPhbEntryResponse()
     */
    oneway readPhbEntry(int32_t serial, int32_t type, int32_t bIndex, int32_t eIndex);

    /**
     * Query capability of USIM PHB.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.queryUPBCapabilityResponse()
     */
    oneway queryUPBCapability(int32_t serial);

    /**
     * Update a USIM PHB field's entry.
     *
     * @param serial Serial number of request.
     * @param data may be int[4] or int[6](only when entryType is 0),
     *        which contains:
     *        entryType must be 0(ANR), 1(EMAIL), 2(SNE), 3(AAS), or 4(GAS)
     *        adnIndex ADN index
     *        entryIndex the i-th EF_(EMAIL/ANR/SNE)
     *        strVal is the value string to be updated
     *        tonForNum TON for ANR
     *        aasAnrIndex AAS index of the ANR
     *
     * Response function is IMtkRadioExResponse.editUPBEntryResponse()
     */
    oneway editUPBEntry(int32_t serial, vec<string> data);

    /**
     * Delete a USIM PHB field's entry.
     *
     * @param serial Serial number of request.
     * @param entryType must be 0(ANR), 1(EMAIL), 2(SNE), 3(AAS), or 4(GAS)
     * @param adnIndex ADN index
     * @param entryIndex The i-th EF_(EMAIL/ANR/SNE)
     *
     * Response function is IMtkRadioExResponse.deleteUPBEntryResponse()
     */
    oneway deleteUPBEntry(int32_t serial, int32_t entryType, int32_t adnIndex, int32_t entryIndex);

    /**
     * Read GAS entry by giving range.
     *
     * @param serial Serial number of request.
     * @param startIndex GAS index start to read
     * @param endIndex GAS index end to read
     *
     * Response function is IMtkRadioExResponse.readUPBGasListResponse()
     */
    oneway readUPBGasList(int32_t serial, int32_t startIndex, int32_t endIndex);

    /**
     * Read a GRP entry by ADN index.
     *
     * @param serial Serial number of request.
     * @param adnIndex ADN index
     *
     * Response function is IMtkRadioExResponse.readUPBGrpEntryResponse()
     */
    oneway readUPBGrpEntry(int32_t serial, int32_t adnIndex);

    /**
     * Update a GRP entry by ADN index.
     *
     * @param serial Serial number of request.
     * @param adnIndex ADN index
     * @param grpIds Group id list to be updated
     *
     * Response function is IMtkRadioExResponse.writeUPBGrpEntryResponse()
     */
    oneway writeUPBGrpEntry(int32_t serial, int32_t adnIndex, vec<int32_t> grpIds);

    /**
     * Get maximum length of some phonebook fields.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getPhoneBookStringsLengthResponse()
     */
    oneway getPhoneBookStringsLength(int32_t serial);

    /**
     * Get phonebook storage info.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getPhoneBookMemStorageResponse()
     */
    oneway getPhoneBookMemStorage(int32_t serial);

    /**
     * Set phonebook storage to given type.
     *
     * @param serial Serial number of request.
     * @param storage The type of the storage
     * @param password PIN2 for FDN
     *
     * Response function is IMtkRadioExResponse.setPhoneBookMemStorageResponse()
     */
    oneway setPhoneBookMemStorage(int32_t serial, string storage, string password);

    /**
     * Request read PHB entries with some UPB fields value.
     *
     * @param serial Serial number of request.
     * @param index1 The begin index of the entries to be read
     * @param index2 The end index of the entries to be read, note that the (index2 - index1 +1)
     *               should not exceed the value RilConstants.PHB_MAX_ENTRY
     *
     * Response function is IMtkRadioExResponse.readPhoneBookEntryExtResponse()
     */
    oneway readPhoneBookEntryExt(int32_t serial, int32_t index1, int32_t index2);

    /**
     * Request update a PHB entry using the given PhbEntryExt.
     *
     * @param serial Serial number of request.
     * @param phbEntryExt A extended PHB entry strucutre, PhbEntryExt as defined in types.hal
     *
     * Response function is IMtkRadioExResponse.writePhoneBookEntryExtResponse()
     */
    oneway writePhoneBookEntryExt(int32_t serial, PhbEntryExt phbEntryExt);

    /**
     * Query info of the EF_EMAIL/EF_ANR/EF_Sne.
     *
     * @param serial Serial number of request.
     * @param eftype 0:EF_ANR, 1:EF_EMAIL, 2: EF_SNE
     * @param fileIndex the i-th EF_EMAIL/EF_ANR/EF_SNE (1-based)
     *
     * Response function is IMtkRadioExResponse.queryUPBAvailableResponse()
     */
    oneway queryUPBAvailable(int32_t serial, int32_t eftype, int32_t fileIndex);

    /**
     * Read a Email entry by ADN index.
     *
     * @param serial Serial number of request.
     * @param adnIndex ADN index
     * @param fileIndex the i-th EF_EMAIL (1-based)
     *
     * Response function is IMtkRadioExResponse.readUPBEmailEntryResponse()
     */
    oneway readUPBEmailEntry(int32_t serial, int32_t adnIndex, int32_t fileIndex);

    /**
     * Read a SNE entry by ADN index.
     *
     * @param serial Serial number of request.
     * @param adnIndex ADN index
     * @param fileIndex the i-th EF_SNE (1-based)
     *
     * Response function is IMtkRadioExResponse.readUPBSneEntryResponse()
     */
    oneway readUPBSneEntry(int32_t serial, int32_t adnIndex, int32_t fileIndex);

    /**
     * Read a ANR entry by ADN index.
     *
     * @param serial Serial number of request.
     * @param adnIndex ADN index
     * @param fileIndex the i-th EF_ANR (1-based)
     *
     * Response function is IMtkRadioExResponse.readUPBAnrEntryResponse()
     */
    oneway readUPBAnrEntry(int32_t serial, int32_t adnIndex, int32_t fileIndex);

    /**
     * Read AAS entry by giving range.
     *
     * @param serial Serial number of request.
     * @param startIndex AAS index start to read
     * @param endIndex AAS index end to read
     *
     * Response function is IMtkRadioExResponse.readUPBAasListResponse()
     */
    oneway readUPBAasList(int32_t serial, int32_t startIndex, int32_t endIndex);

    /**
     * Set phonebook ready state.
     *
     * @param serial Serial number of request.
     * @param ready which SIM phonebook ready state.
     */
    oneway setPhonebookReady(int32_t serial, int32_t ready);
    // PHB END

     /**
     * Set Modem power
     *
     * @param serial Serial number of request.
     * @param isOn desired modem power.
     *
     * Response function is IMtkRadioExResponse.setsetModemPower
     */
    oneway setModemPower(int32_t serial, bool isOn);

    /**
     * Trigger mode switch by Ecc
     *
     * @param serial Serial number of request.
     * @param mode the target mode.
     *
     * Response function is IMtkRadioExResponse.triggerModeSwitchByEccResponse
     */
    oneway triggerModeSwitchByEcc(int32_t serial, int32_t mode);

    // MTK-START: SIM COMMON
    /**
     * Get ATR
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getATRResponse
     */
    oneway getATR(int32_t serial);

    /**
     * Get Iccid
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getIccidResponse
     */
    oneway getIccid(int32_t serial);

    /**
     * Set SIM Power
     *
     * @param serial Serial number of request.
     * @param mode Set SIM power mode.
     *
     * Response function is IMtkRadioExResponse.setSimPowerResponse
     */
    oneway setSimPower(int32_t serial, int32_t mode);

    /**
     * Activate uicc card
     *
     * @param serial Serial number of request.
     *
     * Response function is IRadioResponse.activateUiccCardRsp()
     */
    oneway activateUiccCard(int32_t serial);

    /**
     * Deactivate uicc card
     *
     * @param serial Serial number of request.
     *
     * Response function is IRadioResponse.deactivateUiccCardRsp()
     */
    oneway deactivateUiccCard(int32_t serial);

    /**
     * Get current uicc card provisioning status
     *
     * @param serial Serial number of request.
     *
     * Response function is IRadioResponse.getCurrentUiccCardProvisioningStatusRsp()
     */
    oneway getCurrentUiccCardProvisioningStatus(int32_t serial);
    // MTK-END

    // MTK-START: SIM GBA
    /**
     * Request to do general sim authentication using the given parameters.
     *
     * @param serial Serial number of request.
     * @param simAuth A SIM Auth strucutre, SimAuthStructure as defined in types.hal
     *
     * Response function is IMtkRadioExResponse.writePhoneBookEntryExtResponse()
     */
    oneway doGeneralSimAuthentication(int32_t serial, SimAuthStructure simAuth);
     // MTK-END

    // MTK-START: SIM ME LOCK
    /**
     * Request to query NetworkLock using the given category.
     *
     * @param serial Serial number of request.
     * @param category the lock category
     *
     * Response function is IMtkRadioExResponse.queryNetworkLockResponse()
     */
    oneway queryNetworkLock(int32_t serial, int32_t category);

    /**
     * Request to query NetworkLock using the given category.
     *
     * @param serial Serial number of request.
     * @param category the lock category
     *
     * Response function is IMtkRadioExResponse.setNetworkLockResponse()
     */
    oneway setNetworkLock(int32_t serial, int32_t category, int32_t lockop, string password,
            string data_imsi, string gid1, string gid2);

    /**
     * Request the given type of network personalization be deactivated
     *
     * @param serial Serial number of request.
     * @param netPin Network depersonlization code
     * @param type the given depersonlization type
     *
     * Response function is IMtkRadioExResponse.supplyDepersonalizationResponse()
     *
     */
    oneway supplyDepersonalization(int32_t serial, string netPin, int32_t type);
    // MTK-END

    // External SIM [Start]
    /**
     * Request to send vsim notification to modem.
     *
     * @param serial Serial number of request.
     * @param transactionId Serial number of request
     * @param eventId event id to indicated the notification
     * @param simType sim type according to event id
     *
     * Response function is IVsimResponse.vsimNotificationResponse()
     */
    oneway sendVsimNotification(int32_t serial, uint32_t transactionId, uint32_t eventId, uint32_t simType);

    /**
     * Request to send vsim operation to modem.
     *
     * @param serial Serial number of request.
     * @param transactionId Serial number of request
     * @param eventId event id to indicated the deital operation
     * @param result the apdu execute result
     * @param dataLength apdu raw data length
     * @param data apdu raw data
     *
     * Response function is IVsimResponse.vsimOperationResponse()
     */
    oneway sendVsimOperation(int32_t serial, uint32_t transactionId, uint32_t eventId, int32_t result, int32_t dataLength, vec<uint8_t> data);
    // External SIM [End]

    // SMS-START
    /**
     * Get SMS parameters
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getSmsParametersResponse
     */
    oneway getSmsParameters(int32_t serial);

    /**
     * Set SMS parameters
     *
     * @param serial Serial number of request.
     * @param message Sms parameters(pid, vp, format, dcs) refer to the structure SmsParams
     *                 defined in type.hal
     *
     * Response function is IMtkRadioExResponse.setSmsParametersResponse
     */
    oneway setSmsParameters(int32_t serial, SmsParams message);

    /**
     * Get SMS memory status
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getSmsMemStatusResponse
     */
    oneway getSmsMemStatus(int32_t serial);

    /**
     * Set Earthquake and Tsunami Warning System on/off
     *
     * @param serial Serial number of request.
     * @param mode identifies to turn on or off
     *
     * Response function is IMtkRadioExResponse.setEtwsResponse
     */
    oneway setEtws(int32_t serial, int32_t mode);

    /**
     * Remove cell broadcast message id
     *
     * @param serial Serial number of request.
     * @param channelId removed channel id
     * @param serialId removed serial id
     *
     * Response function is IMtkRadioExResponse.removeCbMsgResponse
     */
    oneway removeCbMsg(int32_t serial, int32_t channelId, int32_t serialId);

    /**
     * Set GSM cell broadcast language
     *
     * @param serial Serial number of request.
     * @param langs language setting string
     *
     * Response function is IMtkRadioExResponse.setGsmBroadcastLangsResponse
     */
    oneway setGsmBroadcastLangs(int32_t serial, string langs);

    /**
     * Get GSM cell broadcast language
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getGsmBroadcastLangsResponse
     */
    oneway getGsmBroadcastLangs(int32_t serial);

    /**
     * Get GSM cell broadcast activation
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getGsmBroadcastActivationRsp
     */
    oneway getGsmBroadcastActivation(int32_t serial);

    /**
     * Send a SMS message over IMS.
     * Based on the return error, caller decides to resend if sending sms
     * fails. SMS_SEND_FAIL_RETRY means retry, and other errors means no retry.
     * In case of retry, data is encoded based on Voice Technology available.
     *
     * @param serial Serial number of request.
     * @param message ImsSmsMessage as defined in types.hal to be sent
     *
     * Response callback is IMtkRadioExResponse.sendImsSmsExResponse()
     */
    oneway sendImsSmsEx(int32_t serial, ImsSmsMessage message);

    /**
     * Acknowledge successful or failed receipt of SMS previously indicated
     * via unsolResponseNewSms
     *
     * @param serial Serial number of request.
     * @param success is true on successful receipt
     *        (basically, AT+CNMA=1 from TS 27.005 is 0 on failed receipt
     *        (basically, AT+CNMA=2 from TS 27.005)
     * @param cause: if success is false, this contains the failure cause as defined
     *        in TS 23.040, 9.2.3.22.
     *
     * Response function is IMtkRadioExResponse.acknowledgeLastIncomingGsmSmsExResponse()
     */
    oneway acknowledgeLastIncomingGsmSmsEx(int32_t serial, bool success,
            SmsAcknowledgeFailCause cause);

    /**
     * Acknowledge the success or failure in the receipt of SMS
     * previously indicated via cdmaNewSmsEx()
     *
     * @param serial Serial number of request.
     * @param smsAck Cdma Sms ack to be sent described by CdmaSmsAck in types.hal
     *
     * Response callback is IImsRadioResponse.acknowledgeLastIncomingCdmaSmsResponseEx()
     */
    oneway acknowledgeLastIncomingCdmaSmsEx(int32_t serial, CdmaSmsAck smsAck);
    // SMS-END

    /**
     * This request passes raw byte arrays between framework and vendor code.
     * It's used to send AT command to modem for internal testing.
     *
     * @param serial Serial number of request.
     * @param data data passed as raw bytes
     *
     * Response function is IMtkRadioExResponse.sendRequestRawResponse()
     */
    oneway sendRequestRaw(int32_t serial, vec<uint8_t> data);

    /**
     * This request passes strings between framework and vendor code.
     * It's used to send AT command to modem for internal testing.
     *
     * @param serial Serial number of request.
     * @param data data passed as strings
     *
     * Response function is IMtkRadioExResponse.sendRequestStringsResponse()
     */
    oneway sendRequestStrings(int32_t serial, vec<string> data);

    /**
     * set resume registration.
     *
     * @param serial Serial number of request.
     * @param sessionId
     */
    oneway setResumeRegistration(int32_t serial, int32_t sessionId);

    /**
     * modify modem.
     *
     * @param serial Serial number of request.
     * @param applyType store/reload type
     * @param modemType which world mode is modified when reboot.
     */
    oneway modifyModemType(int32_t serial, int32_t applyType, int32_t modemType);

    /**
     * Get the memory status of the SMS in RUIM.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getSmsRuimMemoryStatusResponse()
     */
    oneway getSmsRuimMemoryStatus(int32_t serial);

    // MTK NW Feature : Start
    /**
     * Manually select a specified network with Act.
     * This request must not respond until the new operator is selected and registered.
     *
     * @param serial Serial number of request.
     * @param operatorNumeric string specifying MCCMNC of network to select (eg "310170")
     * @param act string specifying act of network to select (eg "7" is LTE)
     * @param mode string specifying semi auto mode or not
     *
     * Response function is IMtkRadioExResponse.setNetworkSelectionModeManualWithActResponse()
     */
    oneway setNetworkSelectionModeManualWithAct(int32_t serial, string operatorNumeric, string act, string mode);

    /**
     * Scans for available networks with ACT
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getAvailableNetworksWithActResponse()
     */
    oneway getAvailableNetworksWithAct(int32_t serial);

    /**
     * get signal strength with wcdma ecio
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getSignalStrengthWithWcdmaEcioResponse()
     */
    oneway getSignalStrengthWithWcdmaEcio(int32_t serial);

    /**
     * cancel scan available networks
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.cancelAvailableNetworksResponse()
     */
    oneway cancelAvailableNetworks(int32_t serial);

    /**
     * Get Femtocell List
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getFemtocellListResponse
     */
    oneway getFemtocellList(int32_t serial);

    /**
     * Abort Femtocell List
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.abortFemtocellListResponse
     */
    oneway abortFemtocellList(int32_t serial);

    /**
     * Select femtocell
     *
     * @param serial Serial number of request.
     * @param operatorNumeric of femtocell
     * @param act preferred radio access type
     * @param csgId femtocell id
     *
     * Response function is IMtkRadioExResponse.selectFemtocellResponse
     */
    oneway selectFemtocell(int32_t serial, string operatorNumeric, string act ,string csgId);

    /**
     * Query femtoCell system selection mode
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.queryFemtoCellSystemSelectionModeResponse
     */
    oneway queryFemtoCellSystemSelectionMode(int32_t serial);

    /**
     * Set femto Cell system selection mode
     *
     * @param serial Serial number of request.
     * @param mode of femtocell selection
     *
     * Response function is IMtkRadioExResponse.setFemtoCellSystemSelectionModeResponse
     */
    oneway setFemtoCellSystemSelectionMode(int32_t serial, int32_t mode);

    /**
     * Notify SST registration infromation to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param voiceRegState Voice registration state
     * @param dataRegState Data registration state
     * @param voiceRoamingType Voice roaming type
     * @param dataRoamingType Data romaing type
     * @param rilVoiceRegState RIL voice registration state
     * @param rilDataRegState RIL data registration state
     */
    oneway setServiceStateToModem(int32_t serial, int32_t voiceRegState,
            int32_t dataRegState, int32_t voiceRoamingType, int32_t dataRoamingType,
            int32_t rilVoiceRegState, int32_t rilDataRegState);

    /**
     * Set A2 config offset to MD.
     *
     * @param serial Serial number of socket command
     * @param offset
     * @param threshBound
     */
    oneway cfgA2offset(int32_t serial, int32_t offset, int32_t threshBound);

    /**
     * Set B2 config offset to MD.
     *
     * @param serial Serial number of socket command
     * @param offset
     * @param threshBound
     */
    oneway cfgB1offset(int32_t serial, int32_t offset, int32_t threshBound);

    /**
     * enable T1/T2/T3 time to MD to disable NR capability if SCG faiure.
     *
     * @param serial Serial number of socket command
     * @param T1
     * @param T2
     * @param T3
     */
    oneway enableSCGfailure(int32_t serial, bool enable, int32_t T1, int32_t P1, int32_t T2);

    /**
     * enable NR capability.
     *
     * @param serial Serial number of socket command
     * @param eNable
     */
    oneway disableNR(int32_t serial, bool enable);

    /**
     * Set power limitation.
     *
     * @param serial Serial number of socket command
     * @param limitpower
     */
    oneway setTxPower(int32_t serial, int32_t limitpower);

    /**
     * Set search stored frenquency information.
     *
     * @param serial Serial number of socket command
     * @param operation
     * @param plmn_id
     * @param rat
     * @param freq_num
     * @param freq
     */
    oneway setSearchStoredFreqInfo(int32_t serial, int32_t operation, int32_t plmn_id, int32_t rat, vec<int32_t> freq);

    /**
     * Set search rat.
     *
     * @param serial Serial number of socket command
     * @param rat_array
     * @param size for rat array
     */
    oneway setSearchRat(int32_t serial, vec<int32_t> rat);

    /**
     * Set backbround search sleep timer.
     *
     * @param serial Serial number of socket command
     * @param sleep_delta_duration
     */
    oneway setBgsrchDeltaSleepTimer(int32_t serial, int32_t sleepDuration);

    /**
     * Set Rx Test Config
     *
     * @param serial Serial number of request.
     * @param antType antType of the test
     *
     * Response function is IMtkRadioExResponse.setRxTestConfigResponse
     */
    oneway setRxTestConfig(int32_t serial, int32_t antType);

    /**
     * Get Rx Test result
     *
     * @param serial Serial number of request.
     * @param mode test mode
     *
     * Response function is IMtkRadioExResponse.getRxTestResultResponse
     */
    oneway getRxTestResult(int32_t serial, int32_t mode);

    /**
     * Get Preferred Operator List Capability
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getPOLCapabilityResponse
     */
    oneway getPOLCapability(int32_t serial);

    /**
     * Get Preferred Operator List
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getCurrentPOLListResponse
     */
    oneway getCurrentPOLList(int32_t serial);

    /**
     * Set Preferred Operator List
     *
     * @param serial Serial number of request.
     * @param index index of POL
     * @param numeric operator's mccmnc
     * @param nAct preferred radio access type
     *
     * Response function is IMtkRadioExResponse.setPOLEntryResponse
     */
    oneway setPOLEntry(int32_t serial, int32_t index, string numeric, int32_t nAct);
    // MTK NW Feature : End

    /**
     * Set Fast dormancy configuration.
     *
     * @param serial ril-request serial
     * @param mode fastdormancy mode
     * @param param1 screen status
     * @param param2 timer value
     */
    oneway setFdMode(int32_t serial, int32_t mode, int32_t param1, int32_t param2);

    /**
     * Reset modem.
     *
     * @param serial Serial number of request
     * @param mode 1: framework just want an exception from modem;
     *             2: framework want reset modem.
     */
    oneway setTrm(int32_t serial, int32_t mode);

    /**
     * When STK application gets stkCallSetup(), the call actually has
     * been initialized by mobile device already. (We could see the call has been in the 'call
     * list') So, STK application needs to accept/reject the call according to user
     * operations.
     *
     * @param serial Serial number of request.
     * @param resultCode 1:accept the call setup,0:reject the call setup,
     *         0x20:TERMINAL_CRNTLY_UNABLE_TO_PROCESS
     *         0x21:NETWORK_CRNTLY_UNABLE_TO_PROCESS
     *
     * Response callback is IMtkRadioExResponse.handleStkCallSetupRequestFromSimWithResCodeResponse()
     */
    oneway handleStkCallSetupRequestFromSimWithResCode(int32_t serial, int32_t resultCode);

    /**
     * Set response functions for ATCI requests & ATCI indications.
     *
     * @param atciResponse Object containing response functions
     * @param atciIndication Object containing indications
     */
    oneway setResponseFunctionsForAtci(IAtciResponse atciResponse, IAtciIndication atciIndication);

    /**
     * This request passes raw byte arrays from ATCI.
     * Response function is IAtciResponse.sendAtciResponse()
     */
    oneway sendAtciRequest(int32_t serial, vec<uint8_t> data);

    /**
     * Requests to restart rild and modem
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.restartRILDResponse()
     *
     */
    oneway restartRILD(int32_t serial);

    /**
     * M: Data Framework - common part enhancement
     * Sync data settings to modem
     *
     * @param serial Serial number of request.
     * @param settings contain the status of data setting, the status of data roaming setting,
     *        and the selection of the default data SIM consecutively.
     *
     *  Response function is IMtkRadioExResponse.syncDataSettingsToMdResponse
     */
    oneway syncDataSettingsToMd(int32_t serial, vec<int32_t> settings);

    /**
     * M: Data Framework - Data Retry enhancement
     * Reset the modem's maintained retry count for the apn name
     *
     * @param serial Serial number of request.
     * @param apn the associated apn name.
     *
     *  Response function is IMtkRadioExResponse.resetMdDataRetryCountResponse
     */
    oneway resetMdDataRetryCount(int32_t serial, string apn);

    /**
     * M: Data Framework - CC 33
     *
     * @param serial Serial number of request.
     * @param type Enable/Disable(1/0) the CC33 support mode.
     *
     *  Response function is IMtkRadioExResponse.setRemoveRestrictEutranModeResponse
     */
    oneway setRemoveRestrictEutranMode(int32_t serial, int32_t type);

    /**
     * Set LTE access stratum report on/off
     *
     * @param serial Serial number of request.
     * @param enable switch report on or off.
     *
     *  Response function is IMtkRadioExResponse.setLteAccessStratumReportResponse
     */
    oneway setLteAccessStratumReport(int32_t serial, int32_t enable);

    /**
     * Set LTE uplink data transfer state by interface ID
     *
     * @param serial Serial number of request.
     * @param state Start/Stop uplink data transfer with the Tclose timer.
     * @param interfaceId the interface ID the state used to apply for.
     *
     *  Response function is IMtkRadioExResponse.setLteUplinkDataTransferResponse
     */
    oneway setLteUplinkDataTransfer(int32_t serial, int32_t state, int32_t interfaceId);

    /**
     * Request set voice domain preference to modem.
     *
     * @param vdp Voice domain preference
     *
     */
    oneway setVoiceDomainPreference(int32_t serial, int32_t vdp);

    // MTK-START: WFO Service
    /**
     * Notify Wi-Fi and flight mode enable/disable status to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param ifName Wi-Fi interface name
     * @param isEnabled Wi-Fi enable/disable status
     * @param isFlightModeOn Flight mode enable/disable status
     */
    oneway setWifiEnabled(int32_t serial, string ifName,
            int32_t isWifiEnabled, int32_t isFlightModeOn);

    /**
     * Notify Wi-Fi association information to MD.
     *
     * @param serial Serial number of socket command
     * @param ifName Wi-Fi interface name
     * @param associated Wi-Fi association status
     * @param ssid Wi-Fi AP SSID
     * @param apMac Wi-Fi AP MAC address
     * @param mtuSize mtu size
     */
    oneway setWifiAssociated(int32_t serial, string ifName, int32_t associated,
            string ssid, string apMac, int32_t mtuSize, string ueMac);

    /**
     * Notify Wi-Fi signal infromation to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param rssi Wi-Fi RSSI strength
     * @param snr Wi-Fi SNR value
     */
    oneway setWifiSignalLevel(int32_t serial, int32_t rssi, int32_t snr);

    /**
     * Notify Wi-Fi IP address information to MD.
     *
     * @param serial Serial number of socket command
     * @param ifName Wi-Fi interface name
     * @param ipv4Addr IPV4 address
     * @param ipv6Addr IPV6 address
     * @param ipv4PrefixLen IPV4 prefix length
     * @param ipv6PrefixLen IPV6 prefix length
     * @param ipv4Gateway IPV4 gateway address
     * @param ipv6Gateway IPV6 gateway address
     * @param dnsCount DNS server count
     * @param dnsServers DNS server addresses string
     */
    oneway setWifiIpAddress(int32_t serial, string ifName, string ipv4Addr, string ipv6Addr,
            int32_t ipv4PrefixLen, int32_t ipv6PrefixLen, string ipv4Gateway, string ipv6Gateway,
            int32_t dnsCount, string dnsServers);

    /**
     * Notify WFC related config setting to MD.
     *
     * @param serial Serial number of socket command
     * @param setting index for WFC setting
     * @param ifName Wi-Fi interface name
     * @param value for WFC setting
     */

    oneway setWfcConfig(int32_t serial, int32_t setting, string ifName, string value);

    /**
     * Query SSAC status from MD.
     *
     * @param serial Serial number of socket command
     */

    oneway querySsacStatus(int32_t serial);

    /**
     * Notify location information and UE Wi-FI interface MAC to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param accountId Account ID
     * @param broadcastFlag Broadcast Flag
     * @param latitude Latitude value
     * @param longitude Longitude value
     * @param accuracy Accuracy
     * @param method Positioning method
     * @param city City
     * @param state State
     * @param zip Zip code
     * @param countryCode Two-letter country code defined by ISO 3166-1
     * @param ueWlanMac UE Wi-FI interface MAC
     */
    oneway setLocationInfo(int32_t serial, string accountId, string broadcastFlag,
            string latitude, string longitude, string accuracy, string method, string city,
            string state, string zip, string countryCode, string ueWlanMac);

    /**
     * Notify Emergency address ID to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param aid Address ID for emergency
     */
    oneway setEmergencyAddressId(int32_t serial, string aid);

    /**
     * Notify Wi-Fi Keepalive Status to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param ifName Wi-Fi interface name
     * @param enable enabled or not
     * @param srcIp source IP
     * @param srcPort source port
     * @param dstIp destination IP
     * @param dstPort destination port
     */
    oneway setNattKeepAliveStatus(int32_t serial, string ifName, bool enable,
            string srcIp, int32_t srcPort, string dstIp, int32_t dstPort);

    /**
     * Notify DNS ping-on-wifi result to MD.
     *
     * @param serial Serial number of socket command
     * @param phoneId SIM index
     * @param rat radio bearer ie. cellular/wifi
     * @param latency ping packet latency
     * @param pktloss ping packet loss
     */
    oneway setWifiPingResult(int32_t serial, int32_t rat, int32_t latency,
            int32_t pktloss);

    /**
     * Set APC mode
     *
     * @param serial Serial number of request.
     * @param mode APC mode.
     * @param reportMode URC report on or off.
     * @param interVal URC report interval.
     *
     * Response function is IMtkRadioExResponse.setApcModeResponse
     */
    oneway setApcMode(int32_t serial, int32_t mode, int32_t reportMode, int32_t interval);

     /**
     * Get detected pseudo cell
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.getApcInfoResponse
     */
    oneway getApcInfo(int32_t serial);
    // MTK-END

    /**
     * config bearer notification.
     *
     * @param serial Serail Number
     * @param enable
     */
    oneway setImsBearerNotification(int32_t serial, int32_t enable);

    /**
     * Set IMS feature value for enabling or disabling feature
     *
     * @param serial Serial number of socket command
     * @param featureId Feature ID
     * @param network Network type
     * @param value Enable(1) or disable(0)
     * @param isLast is last command of set multiple feature values,
     *        ISLAST_NULL(-1), ISLAST_FALSE(0) or ISLAST_TRUE(1) that defined in ImsConfigAdapter
     *
     * Response function is IMtkRadioExResponse.setImsCfgFeatureValueResponse
     */
    oneway setImsCfgFeatureValue(int32_t serial, int32_t featureId, int32_t network, int32_t value,
            int32_t isLast);

    /**
     * Get IMS feature value for enabling or disabling feature
     *
     * @param serial Serial number of socket command
     * @param featureId Feature ID
     * @param network Network type
     */
    oneway getImsCfgFeatureValue(int32_t serial, int32_t featureId, int32_t network);

    /**
     * Set IMS Config provision value
     *
     * @param serial Serial number of socket command
     * @param configId Provision Id
     * @param value Provision Value
     */
    oneway setImsCfgProvisionValue(int32_t serial, int32_t configId, string value);

    /**
     * Get IMS Config provision value
     *
     * @param serial Serial number of socket command
     * @param configId Provision Id
     */
    oneway getImsCfgProvisionValue(int32_t serial, int32_t configId);

    /**
     * Get IMS Config Resource Value
     *
     * @param serial Serial number of socket command
     * @param featureId Feature Id
     */
    oneway getImsCfgResourceCapValue(int32_t serial, int32_t featureId);

    /**
     * Do ps/cs attach.
     *
     * @param serial ril-request serial
     * @param type ps attach or ps&cs attach
     */
    oneway dataConnectionAttach(int32_t serial, int32_t type);

    /**
     * Do ps/cs detach.
     *
     * @param serial ril-request serial
     * @param type ps detach or ps&cs detach
     */
    oneway dataConnectionDetach(int32_t serial, int32_t type);

    /**
     * Cleanup all connections.
     *
     * @param serial ril-request serial
     */
    oneway resetAllConnections(int32_t serial);

    /**
     * Requests to set lte release version.
     *
     * @param serial Serial number of request.
     * @param mode setting mode of lte release version.
     *
     * Response callback is IMtkRadioExResponse.setLteReleaseVersionResponse()
     */
    oneway setLteReleaseVersion(int32_t serial, int32_t mode);

    /**
     * Query lte release version.
     *
     * @param serial Serial number of request.
     *
     * Response callback is IMtkRadioExResponse.getLteReleaseVersionResponse()
     */
    oneway getLteReleaseVersion(int32_t serial);

    /**
     * Disable/enable report TXPWRSTUS URC
     *
     * @param serial Serial number of request.
     * @param 0 disable; 1 enable.
     *
     * Response function is IMtkRadioExResponse.setTxPowerStatusResponse
     */
    oneway setTxPowerStatus(int32_t serial, int32_t mode);

    /**
     * Set Supplementary Service Property
     *
     * @param serial Serail Number
     * @param name Property Name
     * @param value Property Value
     */
    oneway setSuppServProperty(int32_t serial, string name, string value);

    /**
     * Requests that unlock device
     *
     * @param serial Serial number of request.
     * @param pwd the password to unlock device
     *
     * Response function is IMtkRadioExResponse.supplyDeviceNetworkDepersonalizationResponse()
     *
     */
    oneway supplyDeviceNetworkDepersonalization(int32_t serial, string pwd);

    /**
     * Notify ePDG the screen state
     * @param serial Serial number of socket command
     * @param state Screen state.
     */
    oneway notifyEPDGScreenState(int32_t serial, int32_t state);

    /**
     * Hang up with specific reason to the network
     * After this hangupWithReason request returns, Radio must show the connection is NOT
     * active anymore in next getCurrentCalls() query.
     *
     * @param serial Serial number of request.
     *
     * Response function is IMtkRadioExResponse.hangupWithReasonResponse()
     *
     */
    oneway hangupWithReason(int32_t serial, int32_t callId, int32_t reason);

    /**
     * Set response functions for SubsidyLock Requests & Indications.
     *
     * @param sublockResp Object containing response functions
     * @param sublockInd Object containing indications
     */
    oneway setResponseFunctionsSubsidyLock(ISubsidyLockResponse sublockResp, ISubsidyLockIndication sublockInd);

    /*
     * Set response functions for Rcs radio requests & radio indications.
     *
     * @param radioResponse Object containing response functions
     * @param radioIndication Object containing radio indications
     */
    oneway setResponseFunctionsRcs(IRcsRadioResponse radioResponse,
            IRcsRadioIndication radioIndication);

    /**
     * This request passes request type from subsidylock module.
     *
     * @param serial Serial number of request.
     * @param reqType request type passed as integer
     * @param data data passed as raw bytes
     *
     * Response function is ISubsidyLockResponse.sendSubsidyLockResponse()
     */
    oneway sendSubsidyLockRequest(int32_t serial, int32_t reqType, vec<uint8_t> data);

    /**
     * This request is used to set vendor setting
     *
     * @param serial Serial number of request.
     * @param setting setting name
     * @param value setting value
     *
     * Response function is IMtkRadioExResponse.setVendorSettingResponse()
     */
    oneway setVendorSetting(int32_t serial, int32_t setting, string value);

    /**
     * Set RTT Mode, Indicate RTT Call type
     * RIL_REQUEST_SET_RTT_MODE
     *
     * @param serial Serial number of request
     * @param mode 0: Not a RTT Call (RTT OFF)
     *             1: RTT Call (RTT Auto)
     *             2: Enable IMS RTT Capability with upon Request RTT Operation Mode
     */
    oneway setRttMode(int32_t serial, int32_t mode);

    /**
     * Send RTT Modify Request, IMS RTT Call Upgrade/Downgrade
     * RIL_REQUEST_SEND_RTT_MODIFY_REQUEST
     *
     * @param serial Serial number of request
     * @param callid Call Id
     * @param newMode 0: Downgrade, 1: Upgrade
     */
    oneway sendRttModifyRequest(int32_t serial, int32_t callId, int32_t newMode);

    /**
     * Send RTT Text, Send or Receive RTT String
     * RIL_REQUEST_SEND_RTT_TEXT
     *
     * @param serial Serial number of request
     * @param callId Call Id
     * @param lenOfString Length of RTT text String
     * @param text RTT Text String
     */
    oneway sendRttText(int32_t serial, int32_t callId, int32_t lenOfString, string text);

    /**
     * Request RTT Modify Response
     * RIL_REQUEST_RTT_MODIFY_REQUEST_RESPONSE
     *
     * @param serial Serial number of request
     * @param callId Call Id
     * @param result 0: Accept the request, 1:Reject the request
     */
    oneway rttModifyRequestResponse(int32_t serial, int32_t callId, int32_t result);

    /**
     * Request Toggle RTT Audio Indication
     * RIL_REQUEST_TOGGLE_RTT_AUDIO_INDICATION
     *
     * @param serial Serial number of request
     * @param callId Call Id
     * @param audio 0: Audio off, 1:Audio on
     */
    oneway toggleRttAudioIndication(int32_t serial, int32_t callId, int32_t audio);

    /**
     * Query Voice over PS status
     *
     * @param serial Serial number of request.
     *
     * Response function is IImsRadioResponse.queryVopsStatusResponse
     */
    oneway queryVopsStatus(int32_t serial);

    /**
     * Notify ImsService is ready to receive pending indication
     */
    oneway notifyImsServiceReady();

    /**
     * Return string value indicating the operator name of MCCMNC
     *
     * @param serial Serial number of request
     *
     * Response function is IRadioResponse.getPlmnNameFromSE13TableResponse()
     */
    oneway getPlmnNameFromSE13Table (int32_t serial, int32_t mcc, int32_t mnc);

    /**
     * Return true on success; false on any failure.
     *
     * @param enable: enable/disable CA+ bandwidth filter
     *
     * Response function is IRadioResponse.enableCAPlusBandWidthFilterResponse()
     */
    oneway enableCAPlusBandWidthFilter(int32_t serial, bool enable);

    /**
     * Request get voice domain preference from modem.
     *
     * @param serial Serial number of request.
     *
     * Response function is IImsRadioResponse.setVoiceDomainPreferenceResponse()
     *
     */
    oneway getVoiceDomainPreference(int32_t serial);

    /**
     * Set Sip Header
     *
     * @param serial Serail Number
     * @param data data pass as strings
     */
    oneway setSipHeader(int32_t serial, vec<string> data);

    /**
     * Set Sip Header report
     *
     * @param serial Serail Number
     * @param data data pass as strings
     */
    oneway setSipHeaderReport(int32_t serial, vec<string> data);

    /**
     * Set IMS call mode
     *
     * @param serial Serail Number
     * @param mode 1: original mode, 2: client API mode
     */
    oneway setImsCallMode(int32_t serial, int32_t mode);

    /**
     * Set GWSD Mode
     *
     * @param serial Serial number of request
     * @param data String[3]
     *        which contains:
     *        mode 1: User selection, 2: Auto reject
     *        keepAliveMode 301: control pdu, 307: ip data
     *        keepAliveCycle 16bit: druation, 4bits: period
     *
     * Response function is IMtkRadioExRadioResponse.setGwsdModeResponse
     */
    oneway setGwsdMode(int32_t serial, vec<string> data);

    /**
     * Set timer for call valid
     *
     * @param serial Serial number of request
     * @param timer 1 ~ 255sec(default 7sec)
     *
     * Response function is IMtkRadioExRadioResponse.setCallValidTimerResponse
     */
    oneway setCallValidTimer(int32_t serial, int32_t timer);

    /**
     * Set interval for ignore same phone number
     *
     * @param serial Serial number of request
     * @param interval 1 ~ 255sec(default 3sec)
     *
     * Response function is IMtkRadioExRadioResponse.setUserResponseTimerResponse
     */
    oneway setIgnoreSameNumberInterval(int32_t serial, int32_t interval);

    /**
     * Set keep alive by PDCD control PDU
     *
     * @param serial Serial number of request
     * @param config duration XXXX
     *               peroid   XX
     *
     * Response function is IMtkRadioExRadioResponse.setKeepAliveByPDCPCtrlPDUResponse
     */
    oneway setKeepAliveByPDCPCtrlPDU(int32_t serial, string config);

    /**
     * Set keep alive by ip data
     *
     * @param serial Serial number of request
     * @param config duration XXXX
     *               peroid   XX
     *
     * Response function is IMtkRadioExRadioResponse.setKeepAlivesByIpDataResponse
     */
    oneway setKeepAliveByIpData(int32_t serial, string config);

    /**
     * Enable the indication event of DSDA mode changed
     *
     * @param serial Serial number of request
     * @param enable Enable or disable
     *
     * Response function is IMtkRadioExRadioResponse.enableDsdaIndicationResponse
     */
    oneway enableDsdaIndication(int32_t serial, bool enable);

    /**
     * Get the current DSDA status
     *
     * @param serial Serial number of request
     *
     * Response function is IMtkRadioExRadioResponse.getDsdaStatusResponse
     */
    oneway getDsdaStatus(int32_t serial);

    /**
     * Register Cellular Quality Report.
     *
     * @param serial Serial number of socket command
     * @param registerQuality enable/disable
     * @param type cellular quality type
     * @param thresholdValues Threshold values
     * @param time trigger peroid
     */
    oneway registerCellQltyReport(int32_t serial, string registerQuality, string type,
            string thresholdValues, string triggerTime);

    /**
     * Get suggested PLMN list for VSIM
     *
     * @param rat 0: GSM, 1: UMTS, 3: LTE
     * @param num maximum number of plmn in a result
     * @param timer maximum search time
     *
     * Response function is IMtkRadioExRadioResponse.getSuggestedPlmnListResponse
     */
    oneway getSuggestedPlmnList(int32_t serial, int32_t rat, int32_t num, int32_t timer);

    /**
      * Route certificate information to modem
      *
      * @param uid Caller process id
      * @param cert Certificate
      * @param msg encrypted message
      */
    oneway routeCertificate(int32_t serial, int32_t uid, vec<uint8_t> cert, vec<uint8_t> msg);

    /**
     * Route authentication information to modem
     *
     * @param uid Caller process id
     * @param msg Authentication message
     */
    oneway routeAuthMessage(int32_t serial, int32_t uid, vec<uint8_t> msg);

    /**
     * Enable feature capability
     *
     * @param id Capability name
     * @param uid Caller process id
     * @param toActive Enable or disable
     */
    oneway enableCapabaility(int32_t serial, string id, int32_t uid, int32_t toActive);

    /**
     * Cancel certificate
     *
     * @param uid Caller process id
     */
    oneway abortCertificate(int32_t serial, int32_t uid);

    /*
     * Approve ECC redial or not
     *
     * @param serial Serial number of request
     * @param approve 0: disapprove, 1: approve
     * @param callId Call ID
     */
    oneway eccRedialApprove(int32_t serial, int32_t approve, int32_t callId);
};
