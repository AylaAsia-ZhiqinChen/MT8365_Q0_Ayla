/*copyright (C) 2016 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package vendor.mediatek.hardware.imsa@1.0;

import IImsaIndication;
/*
 * The Host Controller Interface (HCI) is the layer defined by the Bluetooth
 * specification between the software that runs on the host and the Bluetooth
 * controller chip. This boundary is the natural choice for a Hardware
 * Abstraction Layer (HAL). Dealing only in HCI packets and events simplifies
 * the stack and abstracts away power management, initialization, and other
 * implementation-specific details related to the hardware.
 */

interface IImsa {
    /*
     * Set response functions for imsa requests & imsa indications.
     *
     * @param imsaResponse Object containing response functions
     * @param imsaIndication Object containing imsa indications
     */
    setResponseFunctions(IImsaIndication imsaIndication);

    /*
     * Send data to imsm.
     *
     * @param request_id, the id for IMSM
     * @param length, the length of data
     * @param value, the data that sent to IMSM
     */
    oneway writeEvent(int32_t request_id, int32_t length, vec<int8_t> value);

    /*
     * Send data to imsm.
     *
     * @param value, the data that sent to IMSM
     */
    oneway writeBytes(vec<int8_t> value);

    /*
     * Send data to imsm.
     *
     * @param value, the data that sent to IMSM
     */
    oneway writeInt(int32_t value);
};
