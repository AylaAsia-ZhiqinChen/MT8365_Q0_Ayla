/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#pragma once

/******************************************************************************
 *
 ******************************************************************************/
#include "../dbg_exif_def.h"

namespace dbg_cam_n3d_param_2 {
/******************************************************************************
 *
 ******************************************************************************/
enum
{
    N3D_AE_TAG_DEBUG_VERSION = 0,
    N3D_AE_SYNCNUM,
    N3D_AE_SYNCMODE,
    N3D_AE_SYNCPOLICY,
    N3D_AE_LOWER_BV,
    N3D_AE_UPPER_BV,
    N3D_AE_MASTER_IDX,

    N3D_AE_CAL_GAIN_R,
    N3D_AE_CAL_GAIN_G,
    N3D_AE_CAL_GAIN_B,
    N3D_AE_CAL_YGAIN,
    N3D_AE_CAL_OFFSET,
    N3D_AE_REG_OFFSET,

    N3D_AE_0_AEIDX,
    N3D_AE_0_AFEGAIN,
    N3D_AE_0_SHUTTER,
    N3D_AE_0_ISPGAIN,
    N3D_AE_0_CWY,
    N3D_AE_0_SYNCGAIN,

    N3D_AE_1_AEIDX,
    N3D_AE_1_AFEGAIN,
    N3D_AE_1_SHUTTER,
    N3D_AE_1_ISPGAIN,
    N3D_AE_1_CWY,
    N3D_AE_1_SYNCGAIN,

    N3D_AE_TAG_MAX
};


//N3D AE debug info
enum { N3D_AE_DEBUG_VERSION = 2 };
enum { N3D_AE_DEBUG_TAG_SIZE = (N3D_AE_TAG_MAX+10) };

typedef struct
{
    debug_exif_field Tag[N3D_AE_DEBUG_TAG_SIZE];
} N3D_AE_DEBUG_INFO_T;


/******************************************************************************
 *
 ******************************************************************************/
enum
{
    N3D_AWB_TAG_DEBUG_VERSION = N3D_AE_TAG_MAX,

    //Intermedium Data
    N3D_AWB_ADV_PP_LU_X,
    N3D_AWB_ADV_PP_LU_Y,
    N3D_AWB_ADV_PP_RD_X,
    N3D_AWB_ADV_PP_RD_Y,

    N3D_AWB_ADV_PP_APPLY_WB_R,
    N3D_AWB_ADV_PP_APPLY_WB_G,
    N3D_AWB_ADV_PP_APPLY_WB_B,

    N3D_AWB_ADV_PP_INVCCM_SUCCESS,

    N3D_AWB_ADV_PP_MAIN_CCM0,
    N3D_AWB_ADV_PP_MAIN_CCM1,
    N3D_AWB_ADV_PP_MAIN_CCM2,

    N3D_AWB_ADV_PP_MAIN_CCM3,
    N3D_AWB_ADV_PP_MAIN_CCM4,
    N3D_AWB_ADV_PP_MAIN_CCM5, 

    N3D_AWB_ADV_PP_MAIN_CCM6,
    N3D_AWB_ADV_PP_MAIN_CCM7,
    N3D_AWB_ADV_PP_MAIN_CCM8,

    N3D_AWB_ADV_PP_SUB_CCM0,
    N3D_AWB_ADV_PP_SUB_CCM1,
    N3D_AWB_ADV_PP_SUB_CCM2,

    N3D_AWB_ADV_PP_SUB_CCM3,
    N3D_AWB_ADV_PP_SUB_CCM4,
    N3D_AWB_ADV_PP_SUB_CCM5,

    N3D_AWB_ADV_PP_SUB_CCM6,
    N3D_AWB_ADV_PP_SUB_CCM7,
    N3D_AWB_ADV_PP_SUB_CCM8,

    N3D_AWB_ADV_PP_MAIN_INV_CCM0 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM1 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM2 ,

    N3D_AWB_ADV_PP_MAIN_INV_CCM3 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM4 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM5 ,

    N3D_AWB_ADV_PP_MAIN_INV_CCM6 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM7 ,
    N3D_AWB_ADV_PP_MAIN_INV_CCM8 ,

    N3D_AWB_ADV_PP_MAIN_CCM_R,
    N3D_AWB_ADV_PP_MAIN_CCM_G,
    N3D_AWB_ADV_PP_MAIN_CCM_B,

    N3D_AWB_ADV_PP_SUB_CCM_TARGET_R,
    N3D_AWB_ADV_PP_SUB_CCM_TARGET_G, 
    N3D_AWB_ADV_PP_SUB_CCM_TARGET_B, 

    N3D_AWB_ADV_PP_SUB_WB_TARGET_R,
    N3D_AWB_ADV_PP_SUB_WB_TARGET_G,
    N3D_AWB_ADV_PP_SUB_WB_TARGET_B,
        
    N3D_AWB_ADV_PP_SUB_BEFORE_REFINE_R,
    N3D_AWB_ADV_PP_SUB_BEFORE_REFINE_G,
    N3D_AWB_ADV_PP_SUB_BEFORE_REFINE_B,

    N3D_AWB_ADV_PP_SUB_RESULT_RGAIN,
    N3D_AWB_ADV_PP_SUB_RESULT_GGAIN,
    N3D_AWB_ADV_PP_SUB_RESULT_BGAIN,

    N3D_AWB_ADV_PP_MAIN_VALID_BLK_COUNT,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_R,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_G,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_B,

    N3D_AWB_ADV_PP_SUB_VALID_BLK_COUNT,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_R,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_G,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_B,

    N3D_AWB_BLEND_MAIN_STAT_AVG_R,
    N3D_AWB_BLEND_MAIN_STAT_AVG_G,
    N3D_AWB_BLEND_MAIN_STAT_AVG_B,
    N3D_AWB_BLEND_MAIN_COUNT,
    N3D_AWB_BLEND_MAIN_LIGHTMODE,

    N3D_AWB_BLEND_SUB_STAT_AVG_R,
    N3D_AWB_BLEND_SUB_STAT_AVG_G,
    N3D_AWB_BLEND_SUB_STAT_AVG_B,
    N3D_AWB_BLEND_SUB_COUNT,
    N3D_AWB_BLEND_SUB_LIGHTMODE,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_0,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_0,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_0,
    N3D_AWB_WP_SUB_R_0,
    N3D_AWB_WP_SUB_G_0,
    N3D_AWB_WP_SUB_B_0,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_1,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_1,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_1,
    N3D_AWB_WP_SUB_R_1,
    N3D_AWB_WP_SUB_G_1,
    N3D_AWB_WP_SUB_B_1,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_2,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_2,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_2,
    N3D_AWB_WP_SUB_R_2,
    N3D_AWB_WP_SUB_G_2,
    N3D_AWB_WP_SUB_B_2,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_3,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_3,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_3,
    N3D_AWB_WP_SUB_R_3,
    N3D_AWB_WP_SUB_G_3,
    N3D_AWB_WP_SUB_B_3,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_4,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_4,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_4,
    N3D_AWB_WP_SUB_R_4,
    N3D_AWB_WP_SUB_G_4,
    N3D_AWB_WP_SUB_B_4,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_5,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_5,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_5,
    N3D_AWB_WP_SUB_R_5,
    N3D_AWB_WP_SUB_G_5,
    N3D_AWB_WP_SUB_B_5,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_6,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_6,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_6,
    N3D_AWB_WP_SUB_R_6,
    N3D_AWB_WP_SUB_G_6,
    N3D_AWB_WP_SUB_B_6,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_7,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_7,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_7,
    N3D_AWB_WP_SUB_R_7,
    N3D_AWB_WP_SUB_G_7,
    N3D_AWB_WP_SUB_B_7,

    N3D_AWB_WP_MAIN_APPLY_WBGAIN_R_8,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_G_8,
    N3D_AWB_WP_MAIN_APPLY_WBGAIN_B_8,
    N3D_AWB_WP_SUB_R_8,
    N3D_AWB_WP_SUB_G_8,
    N3D_AWB_WP_SUB_B_8,

    N3D_AWB_MAIN_CURR_GAIN_R,
    N3D_AWB_MAIN_CURR_GAIN_G,
    N3D_AWB_MAIN_CURR_GAIN_B,
    N3D_AWB_MAIN_CURR_CCT,


    N3D_AWB_MAIN_CURR_LIGHT_MODE,
    N3D_AWB_MAIN_CURR_LV,
    N3D_AWB_MAIN_CURR_TUNGSTEN_P,
    N3D_AWB_MAIN_CURR_WARM_FLUORESCENT_P,
    N3D_AWB_MAIN_CURR_FLUORESCENT_P,
    N3D_AWB_MAIN_CURR_CWF_P,
    N3D_AWB_MAIN_CURR_DAYLIGHT_P,
    N3D_AWB_MAIN_CURR_SHADE_P,
    N3D_AWB_MAIN_CURR_DAYLIGHT_FLUORESCENT_P,

    N3D_AWB_SUB_CURR_GAIN_R,
    N3D_AWB_SUB_CURR_GAIN_G,
    N3D_AWB_SUB_CURR_GAIN_B,
    N3D_AWB_SUB_CURR_CCT,


    N3D_AWB_SUB_CURR_LIGHT_MODE,
    N3D_AWB_SUB_CURR_LV,
    N3D_AWB_SUB_CURR_TUNGSTEN_P,
    N3D_AWB_SUB_CURR_WARM_FLUORESCENT_P,
    N3D_AWB_SUB_CURR_FLUORESCENT_P,
    N3D_AWB_SUB_CURR_CWF_P,
    N3D_AWB_SUB_CURR_DAYLIGHT_P,
    N3D_AWB_SUB_CURR_SHADE_P,
    N3D_AWB_SUB_CURR_DAYLIGHT_FLUORESCENT_P,


    //*** Output Variables***//
    N3D_AWB_SYNC_ADV_PP_ISFREERUN,
    N3D_AWB_SYNC_ADV_PP_GAIN_R,
    N3D_AWB_SYNC_ADV_PP_GAIN_G,
    N3D_AWB_SYNC_ADV_PP_GAIN_B,

    N3D_AWB_SYNC_BLENDING_ISFREERUN,
    N3D_AWB_SYNC_BLENDING_GAIN_R,
    N3D_AWB_SYNC_BLENDING_GAIN_G,
    N3D_AWB_SYNC_BLENDING_GAIN_B,

    N3D_AWB_SYNC_WP_GAIN_R,
    N3D_AWB_SYNC_WP_GAIN_G,
    N3D_AWB_SYNC_WP_GAIN_B,

    N3D_AWB_SYNC_FINAL_ISFREERUN,
    N3D_AWB_SYNC_FINAL_GAIN_R,
    N3D_AWB_SYNC_FINAL_GAIN_G,
    N3D_AWB_SYNC_FINAL_GAIN_B,

    N3D_AWB_MAIN_OUTPUT_GAIN_R,
    N3D_AWB_MAIN_OUTPUT_GAIN_G,
    N3D_AWB_MAIN_OUTPUT_GAIN_B,
    N3D_AWB_MAIN_OUTPUT_CCT,

    N3D_AWB_SUB_OUTPUT_GAIN_R,
    N3D_AWB_SUB_OUTPUT_GAIN_G,
    N3D_AWB_SUB_OUTPUT_GAIN_B,
    N3D_AWB_SUB_OUTPUT_CCT,


    //*** Tuning Parameters ***//
    N3D_AWB_TUNING_AWBSYNC_METHOD,

    N3D_AWB_TUNING_PP_CONSIDER_CCM,
    N3D_AWB_TUNING_PP_VALID_BLK_NUM_RATIO,
    N3D_AWB_TUNING_PP_AWBSTA_Y_TH_LOW,
    N3D_AWB_TUNING_PP_AWBSTA_Y_TH_HIGH,

    N3D_AWB_TUNING_BLEND_TH0,
    N3D_AWB_TUNING_BLEND_TH1,
    N3D_AWB_TUNING_BLEND_TH2,
    N3D_AWB_TUNING_BLEND_TH3,

    N3D_AWB_TUNING_WP_AREA_HIT_RATIO,
    N3D_AWB_TUNING_WP_GB_RATIO_LOW_TH_MAIN, 
    N3D_AWB_TUNING_WP_GB_RATIO_HIGH_TH_MAIN,
    N3D_AWB_TUNING_WP_GB_RATIO_LOW_TH_SUB,
    N3D_AWB_TUNING_WP_GB_RATIO_HIGH_TH_SUB,

    N3D_AWB_TUNING_WP_GR_RATIO_LOW_TH_MAIN, 
    N3D_AWB_TUNING_WP_GR_RATIO_HIGH_TH_MAIN,
    N3D_AWB_TUNING_WP_GR_RATIO_LOW_TH_SUB,
    N3D_AWB_TUNING_WP_GR_RATIO_HIGH_TH_SUB,


    N3D_AWB_TUNING_ADV_PP_GAIN_RATIO_TBL_X0,
    N3D_AWB_TUNING_ADV_PP_GAIN_RATIO_TBL_X1,

    N3D_AWB_TUNING_WP_Y_LOW_TH,
    N3D_AWB_TUNING_WP_Y_HIGH_TH,


    N3D_AWB_TAG_MAX

};


//N3D AWB debug info
enum { N3D_AWB_DEBUG_VERSION = 2 };
enum { N3D_AWB_DEBUG_TAG_SIZE = (N3D_AWB_TAG_MAX+10) };

typedef struct
{
    debug_exif_field Tag[N3D_AWB_DEBUG_TAG_SIZE];
} N3D_AWB_DEBUG_INFO_T;


/******************************************************************************
 *
 ******************************************************************************/
//Common Parameter Structure
typedef enum
{
    N3D_TAG_VERSION = 0,

}DEBUG_N3D_TAG_T;


// Native3D debug info
enum { N3D_DEBUG_TAG_SIZE = (N3D_AE_DEBUG_TAG_SIZE+N3D_AWB_DEBUG_TAG_SIZE) };
enum { N3D_DEBUG_TAG_VERSION = 1 };
enum { DEBUG_N3D_AE_MODULE_ID   = 0x0001 };
enum { DEBUG_N3D_AWB_MODULE_ID  = 0x0002 };


typedef struct DEBUG_N3D_INFO_S
{
    debug_exif_field Tag[N3D_DEBUG_TAG_SIZE];
} DEBUG_N3D_INFO_T;


typedef struct
{
    N3D_AE_DEBUG_INFO_T  rAEDebugInfo;
    N3D_AWB_DEBUG_INFO_T rAWBDebugInfo;
} N3D_DEBUG_INFO_T;



/******************************************************************************
 *
 ******************************************************************************/
};  //namespace

