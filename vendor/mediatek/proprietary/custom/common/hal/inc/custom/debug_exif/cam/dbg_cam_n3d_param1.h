/* Copyright Statement:
 *
 * This software/firmware and related documentation ("MediaTek Software") are
 * protected under relevant copyright laws. The information contained herein
 * is confidential and proprietary to MediaTek Inc. and/or its licensors.
 * Without the prior written permission of MediaTek inc. and/or its licensors,
 * any reproduction, modification, use or disclosure of MediaTek Software,
 * and information contained herein, in whole or in part, shall be strictly prohibited.
 */
/* MediaTek Inc. (C) 2010. All rights reserved.
 *
 * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
 * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
 * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
 * AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
 * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
 * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
 * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
 * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
 * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
 * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
 * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
 * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
 * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
 * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
 * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
 * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
 *
 * The following software/firmware and/or related documentation ("MediaTek Software")
 * have been modified by MediaTek Inc. All revisions are subject to any receiver's
 * applicable license agreements with MediaTek Inc.
 */

#pragma once

/******************************************************************************
 *
 ******************************************************************************/
#include "../dbg_exif_def.h"

namespace dbg_cam_n3d_param_1 {
/******************************************************************************
 *
 ******************************************************************************/
enum
{
    N3D_AE_TAG_DEBUG_VERSION = 0,
    N3D_AE_SYNCNUM,
    N3D_AE_SYNCMODE,
    N3D_AE_SYNCPOLICY,
    N3D_AE_LOWER_BV,
    N3D_AE_UPPER_BV,
    N3D_AE_MASTER_IDX,

    N3D_AE_CAL_GAIN_R,
    N3D_AE_CAL_GAIN_G,
    N3D_AE_CAL_GAIN_B,
    N3D_AE_CAL_YGAIN,
    N3D_AE_CAL_OFFSET,
    N3D_AE_REG_OFFSET,

    N3D_AE_0_AEIDX,
    N3D_AE_0_AFEGAIN,
    N3D_AE_0_SHUTTER,
    N3D_AE_0_ISPGAIN,
    N3D_AE_0_CWY,
    N3D_AE_0_SYNCGAIN,

    N3D_AE_1_AEIDX,
    N3D_AE_1_AFEGAIN,
    N3D_AE_1_SHUTTER,
    N3D_AE_1_ISPGAIN,
    N3D_AE_1_CWY,
    N3D_AE_1_SYNCGAIN,

    N3D_AE_TAG_MAX
};


//N3D AE debug info
enum { N3D_AE_DEBUG_VERSION = 2 };
enum { N3D_AE_DEBUG_TAG_SIZE = (N3D_AE_TAG_MAX+10) };

typedef struct
{
    debug_exif_field Tag[N3D_AE_DEBUG_TAG_SIZE];
} N3D_AE_DEBUG_INFO_T;


/******************************************************************************
 *
 ******************************************************************************/
enum
{
    //Intermedium Data
    N3D_AWB_TAG_DEBUG_VERSION = N3D_AE_TAG_MAX,
    N3D_AWB_AWBSYNC_METHOD,

    N3D_AWB_GAIN_INT_SLOPE,
    N3D_AWB_GAIN_INT_NORM,
    N3D_AWB_GAIN_INT_OFFSET,
    N3D_AWB_GAIN_INT_FREERUN_RATIO_RG,
    N3D_AWB_GAIN_INT_FREERUN_RATIO_BG,

    N3D_AWB_ADV_PP_TUNING_VALID_BLK_NUM_RATIO,
    N3D_AWB_ADV_PP_TUNING_AWBSTA_Y_TH,
    N3D_AWB_ADV_PP_MAIN_VALID_BLK_COUNT,
    N3D_AWB_ADV_PP_SUB_VALID_BLK_COUNT,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_R,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_G,
    N3D_AWB_ADV_PP_MAIN_STAT_AVG_B,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_R,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_G,
    N3D_AWB_ADV_PP_SUB_STAT_AVG_B,

    N3D_AWB_SYNC_CCT_ISFREERUN,
    N3D_AWB_SYNC_CCT_GAIN_R,
    N3D_AWB_SYNC_CCT_GAIN_G,
    N3D_AWB_SYNC_CCT_GAIN_B,
    N3D_AWB_SYNC_GAIN_INT_ISFREERUN,
    N3D_AWB_SYNC_GAIN_INT_GAIN_R,
    N3D_AWB_SYNC_GAIN_INT_GAIN_G,
    N3D_AWB_SYNC_GAIN_INT_GAIN_B,
    N3D_AWB_SYNC_ADV_PP_ISFREERUN,
    N3D_AWB_SYNC_ADV_PP_GAIN_R,
    N3D_AWB_SYNC_ADV_PP_GAIN_G,
    N3D_AWB_SYNC_ADV_PP_GAIN_B,
    N3D_AWB_SYNC_BLENDING_ISFREERUN,
    N3D_AWB_SYNC_BLENDING_GAIN_R,
    N3D_AWB_SYNC_BLENDING_GAIN_G,
    N3D_AWB_SYNC_BLENDING_GAIN_B,
    N3D_AWB_SYNC_FINAL_ISFREERUN,
    N3D_AWB_SYNC_FINAL_GAIN_R,
    N3D_AWB_SYNC_FINAL_GAIN_G,
    N3D_AWB_SYNC_FINAL_GAIN_B,

    //Input Data - Main
    N3D_AWB_MAIN_NORMAL_WB_HORIZON_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_HORIZON_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_HORIZON_GAIN_B,
    N3D_AWB_MAIN_HORIZON_CCT,
    N3D_AWB_MAIN_NORMAL_WB_A_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_A_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_A_GAIN_B,
    N3D_AWB_MAIN_A_CCT,
    N3D_AWB_MAIN_NORMAL_WB_TL84_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_TL84_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_TL84_GAIN_B,
    N3D_AWB_MAIN_NORMAL_WB_CWF_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_CWF_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_CWF_GAIN_B,
    N3D_AWB_MAIN_TL84_CCT,
    N3D_AWB_MAIN_NORMAL_WB_DNP_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_DNP_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_DNP_GAIN_B,
    N3D_AWB_MAIN_DNP_CCT,
    N3D_AWB_MAIN_NORMAL_WB_D65_GAIN_R,
    N3D_AWB_MAIN_NORMAL_WB_D65_GAIN_G,
    N3D_AWB_MAIN_NORMAL_WB_D65_GAIN_B,
    N3D_AWB_MAIN_D65_CCT,
    N3D_AWB_MAIN_UNIT_GAIN_R,
    N3D_AWB_MAIN_UNIT_GAIN_G,
    N3D_AWB_MAIN_UNIT_GAIN_B,
    N3D_AWB_MAIN_GOLDEN_GAIN_R,
    N3D_AWB_MAIN_GOLDEN_GAIN_G,
    N3D_AWB_MAIN_GOLDEN_GAIN_B,
    N3D_AWB_MAIN_CURR_GAIN_R,
    N3D_AWB_MAIN_CURR_GAIN_G,
    N3D_AWB_MAIN_CURR_GAIN_B,

    N3D_AWB_MAIN_CURR_ALG_GAIN_R,
    N3D_AWB_MAIN_CURR_ALG_GAIN_G,
    N3D_AWB_MAIN_CURR_ALG_GAIN_B,
    N3D_AWB_MAIN_CURR_TARGET_GAIN_R,
    N3D_AWB_MAIN_CURR_TARGET_GAIN_G,
    N3D_AWB_MAIN_CURR_TARGET_GAIN_B,

    N3D_AWB_MAIN_CURR_CCT,
    N3D_AWB_MAIN_CURR_LIGHT_MODE,
    N3D_AWB_MAIN_CURR_LV,
    N3D_AWB_MAIN_CURR_TUNGSTEN_P,
    N3D_AWB_MAIN_CURR_WARM_FLUORESCENT_P,
    N3D_AWB_MAIN_CURR_FLUORESCENT_P,
    N3D_AWB_MAIN_CURR_CWF_P,
    N3D_AWB_MAIN_CURR_DAYLIGHT_P,
    N3D_AWB_MAIN_CURR_SHADE_P,
    N3D_AWB_MAIN_CURR_DAYLIGHT_FLUORESCENT_P,

    //Input Data - Sub
    N3D_AWB_SUB_NORMAL_WB_HORIZON_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_HORIZON_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_HORIZON_GAIN_B,
    N3D_AWB_SUB_HORIZON_CCT,
    N3D_AWB_SUB_NORMAL_WB_A_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_A_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_A_GAIN_B,
    N3D_AWB_SUB_A_CCT,
    N3D_AWB_SUB_NORMAL_WB_TL84_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_TL84_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_TL84_GAIN_B,
    N3D_AWB_SUB_NORMAL_WB_CWF_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_CWF_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_CWF_GAIN_B,
    N3D_AWB_SUB_TL84_CCT,
    N3D_AWB_SUB_NORMAL_WB_DNP_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_DNP_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_DNP_GAIN_B,
    N3D_AWB_SUB_DNP_CCT,
    N3D_AWB_SUB_NORMAL_WB_D65_GAIN_R,
    N3D_AWB_SUB_NORMAL_WB_D65_GAIN_G,
    N3D_AWB_SUB_NORMAL_WB_D65_GAIN_B,
    N3D_AWB_SUB_D65_CCT,
    N3D_AWB_SUB_UNIT_GAIN_R,
    N3D_AWB_SUB_UNIT_GAIN_G,
    N3D_AWB_SUB_UNIT_GAIN_B,
    N3D_AWB_SUB_GOLDEN_GAIN_R,
    N3D_AWB_SUB_GOLDEN_GAIN_G,
    N3D_AWB_SUB_GOLDEN_GAIN_B,
    N3D_AWB_SUB_CURR_GAIN_R,
    N3D_AWB_SUB_CURR_GAIN_G,
    N3D_AWB_SUB_CURR_GAIN_B,
    N3D_AWB_SUB_CURR_ALG_GAIN_R,
    N3D_AWB_SUB_CURR_ALG_GAIN_G,
    N3D_AWB_SUB_CURR_ALG_GAIN_B,
    N3D_AWB_SUB_CURR_TARGET_GAIN_R,
    N3D_AWB_SUB_CURR_TARGET_GAIN_G,
    N3D_AWB_SUB_CURR_TARGET_GAIN_B,
    N3D_AWB_SUB_CURR_CCT,
    N3D_AWB_SUB_CURR_LIGHT_MODE,
    N3D_AWB_SUB_CURR_LV,
    N3D_AWB_SUB_CURR_TUNGSTEN_P,
    N3D_AWB_SUB_CURR_WARM_FLUORESCENT_P,
    N3D_AWB_SUB_CURR_FLUORESCENT_P,
    N3D_AWB_SUB_CURR_CWF_P,
    N3D_AWB_SUB_CURR_DAYLIGHT_P,
    N3D_AWB_SUB_CURR_SHADE_P,
    N3D_AWB_SUB_CURR_DAYLIGHT_FLUORESCENT_P,

    N3D_AWB_GAIN_INT_GAINRATIO_TH0,
    N3D_AWB_GAIN_INT_GAINRATIO_TH1,
    N3D_AWB_GAIN_INT_GAINRATIO_TH2,
    N3D_AWB_GAIN_INT_GAINRATIO_TH3,
    N3D_AWB_GAIN_INT_CCT_DIFF_TH0,
    N3D_AWB_GAIN_INT_CCT_DIFF_TH1,
    N3D_AWB_GAIN_INT_CCT_DIFF_TH2,
    N3D_AWB_GAIN_INT_CCT_DIFF_TH3,
    N3D_AWB_GAIN_BLENDING_TH0,
    N3D_AWB_GAIN_BLENDING_TH1,
    N3D_AWB_GAIN_BLENDING_TH2,
    N3D_AWB_GAIN_BLENDING_TH3,

    N3D_AWB_GAIN_INT_MASTER_GAIN_H_R,
    N3D_AWB_GAIN_INT_MASTER_GAIN_H_B,
    N3D_AWB_GAIN_INT_MASTER_GAIN_A_R,
    N3D_AWB_GAIN_INT_MASTER_GAIN_A_B,
    N3D_AWB_GAIN_INT_MASTER_GAIN_TL84_R,
    N3D_AWB_GAIN_INT_MASTER_GAIN_TL84_B,
    N3D_AWB_GAIN_INT_MASTER_GAIN_DNP_R,
    N3D_AWB_GAIN_INT_MASTER_GAIN_DNP_B,
    N3D_AWB_GAIN_INT_MASTER_GAIN_D65_R,
    N3D_AWB_GAIN_INT_MASTER_GAIN_D65_B,

    N3D_AWB_GAIN_INT_SLAVE_GAIN_H_R,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_H_B,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_A_R,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_A_B,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_TL84_R,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_TL84_B,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_DNP_R,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_DNP_B,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_D65_R,
    N3D_AWB_GAIN_INT_SLAVE_GAIN_D65_B,

    //Output Data - Main
    N3D_AWB_MAIN_OUTPUT_GAIN_R,
    N3D_AWB_MAIN_OUTPUT_GAIN_G,
    N3D_AWB_MAIN_OUTPUT_GAIN_B,
    N3D_AWB_MAIN_OUTPUT_CCT,

    //Output Data - Sub
    N3D_AWB_SUB_OUTPUT_GAIN_R,
    N3D_AWB_SUB_OUTPUT_GAIN_G,
    N3D_AWB_SUB_OUTPUT_GAIN_B,
    N3D_AWB_SUB_OUTPUT_CCT,

    N3D_AWB_TAG_MAX
};


//N3D AWB debug info
enum { N3D_AWB_DEBUG_VERSION = 2 };
enum { N3D_AWB_DEBUG_TAG_SIZE = (N3D_AWB_TAG_MAX+10) };

typedef struct
{
    debug_exif_field Tag[N3D_AWB_DEBUG_TAG_SIZE];
} N3D_AWB_DEBUG_INFO_T;


/******************************************************************************
 *
 ******************************************************************************/
//Common Parameter Structure
typedef enum
{
    N3D_TAG_VERSION = 0,

}DEBUG_N3D_TAG_T;


// Native3D debug info
enum { N3D_DEBUG_TAG_SIZE = (N3D_AE_DEBUG_TAG_SIZE+N3D_AWB_DEBUG_TAG_SIZE) };
enum { N3D_DEBUG_TAG_VERSION = 1 };
enum { DEBUG_N3D_AE_MODULE_ID   = 0x0001 };
enum { DEBUG_N3D_AWB_MODULE_ID  = 0x0002 };


typedef struct DEBUG_N3D_INFO_S
{
    debug_exif_field Tag[N3D_DEBUG_TAG_SIZE];
} DEBUG_N3D_INFO_T;


typedef struct
{
    N3D_AE_DEBUG_INFO_T  rAEDebugInfo;
    N3D_AWB_DEBUG_INFO_T rAWBDebugInfo;
} N3D_DEBUG_INFO_T;



/******************************************************************************
 *
 ******************************************************************************/
};  //namespace

