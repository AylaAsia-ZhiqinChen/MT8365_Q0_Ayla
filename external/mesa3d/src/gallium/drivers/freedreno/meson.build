# Copyright Â© 2017 Rob Clark

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

ir3_nir_trig_c = custom_target(
  'ir3_nir_trig.c',
  input : 'ir3/ir3_nir_trig.py',
  output : 'ir3_nir_trig.c',
  command : [
    prog_python2, '@INPUT@',
    '-p', join_paths(meson.source_root(), 'src/compiler/nir/'),
  ],
  capture : true,
  depend_files : nir_algebraic_py,
)

files_libfreedreno = files(
  'adreno_common.xml.h',
  'adreno_pm4.xml.h',
  'disasm.h',
  'freedreno_batch.c',
  'freedreno_batch.h',
  'freedreno_batch_cache.c',
  'freedreno_batch_cache.h',
  'freedreno_blitter.c',
  'freedreno_blitter.h',
  'freedreno_context.c',
  'freedreno_context.h',
  'freedreno_draw.c',
  'freedreno_draw.h',
  'freedreno_fence.c',
  'freedreno_fence.h',
  'freedreno_gmem.c',
  'freedreno_gmem.h',
  'freedreno_program.c',
  'freedreno_program.h',
  'freedreno_query.c',
  'freedreno_query.h',
  'freedreno_query_acc.c',
  'freedreno_query_acc.h',
  'freedreno_query_hw.c',
  'freedreno_query_hw.h',
  'freedreno_query_sw.c',
  'freedreno_query_sw.h',
  'freedreno_resource.c',
  'freedreno_resource.h',
  'freedreno_screen.c',
  'freedreno_screen.h',
  'freedreno_state.c',
  'freedreno_state.h',
  'freedreno_surface.c',
  'freedreno_surface.h',
  'freedreno_texture.c',
  'freedreno_texture.h',
  'freedreno_util.c',
  'freedreno_util.h',
  'a2xx/a2xx.xml.h',
  'a2xx/disasm-a2xx.c',
  'a2xx/fd2_blend.c',
  'a2xx/fd2_blend.h',
  'a2xx/fd2_compiler.c',
  'a2xx/fd2_compiler.h',
  'a2xx/fd2_context.c',
  'a2xx/fd2_context.h',
  'a2xx/fd2_draw.c',
  'a2xx/fd2_draw.h',
  'a2xx/fd2_emit.c',
  'a2xx/fd2_emit.h',
  'a2xx/fd2_gmem.c',
  'a2xx/fd2_gmem.h',
  'a2xx/fd2_program.c',
  'a2xx/fd2_program.h',
  'a2xx/fd2_rasterizer.c',
  'a2xx/fd2_rasterizer.h',
  'a2xx/fd2_screen.c',
  'a2xx/fd2_screen.h',
  'a2xx/fd2_texture.c',
  'a2xx/fd2_texture.h',
  'a2xx/fd2_util.c',
  'a2xx/fd2_util.h',
  'a2xx/fd2_zsa.c',
  'a2xx/fd2_zsa.h',
  'a2xx/instr-a2xx.h',
  'a2xx/ir-a2xx.c',
  'a2xx/ir-a2xx.h',
  'a3xx/a3xx.xml.h',
  'a3xx/fd3_blend.c',
  'a3xx/fd3_blend.h',
  'a3xx/fd3_context.c',
  'a3xx/fd3_context.h',
  'a3xx/fd3_draw.c',
  'a3xx/fd3_draw.h',
  'a3xx/fd3_emit.c',
  'a3xx/fd3_emit.h',
  'a3xx/fd3_format.c',
  'a3xx/fd3_format.h',
  'a3xx/fd3_gmem.c',
  'a3xx/fd3_gmem.h',
  'a3xx/fd3_program.c',
  'a3xx/fd3_program.h',
  'a3xx/fd3_query.c',
  'a3xx/fd3_query.h',
  'a3xx/fd3_rasterizer.c',
  'a3xx/fd3_rasterizer.h',
  'a3xx/fd3_screen.c',
  'a3xx/fd3_screen.h',
  'a3xx/fd3_texture.c',
  'a3xx/fd3_texture.h',
  'a3xx/fd3_zsa.c',
  'a3xx/fd3_zsa.h',
  'a4xx/a4xx.xml.h',
  'a4xx/fd4_blend.c',
  'a4xx/fd4_blend.h',
  'a4xx/fd4_context.c',
  'a4xx/fd4_context.h',
  'a4xx/fd4_draw.c',
  'a4xx/fd4_draw.h',
  'a4xx/fd4_emit.c',
  'a4xx/fd4_emit.h',
  'a4xx/fd4_format.c',
  'a4xx/fd4_format.h',
  'a4xx/fd4_gmem.c',
  'a4xx/fd4_gmem.h',
  'a4xx/fd4_program.c',
  'a4xx/fd4_program.h',
  'a4xx/fd4_query.c',
  'a4xx/fd4_query.h',
  'a4xx/fd4_rasterizer.c',
  'a4xx/fd4_rasterizer.h',
  'a4xx/fd4_screen.c',
  'a4xx/fd4_screen.h',
  'a4xx/fd4_texture.c',
  'a4xx/fd4_texture.h',
  'a4xx/fd4_zsa.c',
  'a4xx/fd4_zsa.h',
  'a5xx/a5xx.xml.h',
  'a5xx/fd5_blend.c',
  'a5xx/fd5_blend.h',
  'a5xx/fd5_blitter.c',
  'a5xx/fd5_blitter.h',
  'a5xx/fd5_compute.c',
  'a5xx/fd5_compute.h',
  'a5xx/fd5_context.c',
  'a5xx/fd5_context.h',
  'a5xx/fd5_draw.c',
  'a5xx/fd5_draw.h',
  'a5xx/fd5_emit.c',
  'a5xx/fd5_emit.h',
  'a5xx/fd5_format.c',
  'a5xx/fd5_format.h',
  'a5xx/fd5_gmem.c',
  'a5xx/fd5_gmem.h',
  'a5xx/fd5_image.c',
  'a5xx/fd5_image.h',
  'a5xx/fd5_program.c',
  'a5xx/fd5_program.h',
  'a5xx/fd5_query.c',
  'a5xx/fd5_query.h',
  'a5xx/fd5_rasterizer.c',
  'a5xx/fd5_rasterizer.h',
  'a5xx/fd5_resource.c',
  'a5xx/fd5_resource.h',
  'a5xx/fd5_screen.c',
  'a5xx/fd5_screen.h',
  'a5xx/fd5_texture.c',
  'a5xx/fd5_texture.h',
  'a5xx/fd5_zsa.c',
  'a5xx/fd5_zsa.h',
  'ir3/disasm-a3xx.c',
  'ir3/instr-a3xx.h',
  'ir3/ir3.c',
  'ir3/ir3_compiler_nir.c',
  'ir3/ir3_compiler.c',
  'ir3/ir3_compiler.h',
  'ir3/ir3_cp.c',
  'ir3/ir3_depth.c',
  'ir3/ir3_group.c',
  'ir3/ir3.h',
  'ir3/ir3_legalize.c',
  'ir3/ir3_nir.c',
  'ir3/ir3_nir.h',
  'ir3/ir3_nir_lower_if_else.c',
  'ir3/ir3_nir_lower_tg4_to_tex.c',
  'ir3/ir3_print.c',
  'ir3/ir3_ra.c',
  'ir3/ir3_sched.c',
  'ir3/ir3_shader.c',
  'ir3/ir3_shader.h',
)

freedreno_includes = [
  inc_src, inc_include, inc_gallium, inc_gallium_aux,
  include_directories('ir3')
]

freedreno_c_args = []
if cc.has_argument('-Wpacked-bitfield-compat')
  freedreno_c_args += '-Wno-packed-bitfield-compat'
endif

freedreno_cpp_args = []
if cpp.has_argument('-Wpacked-bitfield-compat')
  freedreno_cpp_args += '-Wno-packed-bitfield-compat'
endif

libfreedreno = static_library(
  'freedreno',
  [files_libfreedreno, ir3_nir_trig_c],
  include_directories : freedreno_includes,
  c_args : [freedreno_c_args, c_vis_args],
  cpp_args : [freedreno_cpp_args, cpp_vis_args],
  dependencies : [dep_libdrm, dep_libdrm_freedreno, idep_nir_headers],
)

driver_freedreno = declare_dependency(
  compile_args : '-DGALLIUM_FREEDRENO',
  link_with : [libfreedrenowinsys, libfreedreno],
  dependencies : idep_nir,
)

ir3_compiler = executable(
  'ir3_compiler',
  'ir3/ir3_cmdline.c',
  include_directories : freedreno_includes,
  dependencies : [
    dep_libdrm,
    dep_libdrm_freedreno,
    dep_thread,
    idep_nir,
  ],
  link_with : [
    libfreedreno,
    libgallium,
    libglsl_standalone,
    libmesa_util,
  ],
  build_by_default : true,
)
