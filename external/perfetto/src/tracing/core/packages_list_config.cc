/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*******************************************************************************
 * AUTOGENERATED - DO NOT EDIT
 *******************************************************************************
 * This file has been generated from the protobuf message
 * perfetto/config/android/packages_list_config.proto
 * by
 * ../../tools/proto_to_cpp/proto_to_cpp.cc.
 * If you need to make changes here, change the .proto file and then run
 * ./tools/gen_tracing_cpp_headers_from_protos
 */

#include "perfetto/tracing/core/packages_list_config.h"

#include "perfetto/config/android/packages_list_config.pb.h"

namespace perfetto {

PackagesListConfig::PackagesListConfig() = default;
PackagesListConfig::~PackagesListConfig() = default;
PackagesListConfig::PackagesListConfig(const PackagesListConfig&) = default;
PackagesListConfig& PackagesListConfig::operator=(const PackagesListConfig&) =
    default;
PackagesListConfig::PackagesListConfig(PackagesListConfig&&) noexcept = default;
PackagesListConfig& PackagesListConfig::operator=(PackagesListConfig&&) =
    default;

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wfloat-equal"
bool PackagesListConfig::operator==(const PackagesListConfig& other) const {
  return (package_name_filter_ == other.package_name_filter_);
}
#pragma GCC diagnostic pop

void PackagesListConfig::FromProto(
    const perfetto::protos::PackagesListConfig& proto) {
  package_name_filter_.clear();
  for (const auto& field : proto.package_name_filter()) {
    package_name_filter_.emplace_back();
    static_assert(sizeof(package_name_filter_.back()) ==
                      sizeof(proto.package_name_filter(0)),
                  "size mismatch");
    package_name_filter_.back() =
        static_cast<decltype(package_name_filter_)::value_type>(field);
  }
  unknown_fields_ = proto.unknown_fields();
}

void PackagesListConfig::ToProto(
    perfetto::protos::PackagesListConfig* proto) const {
  proto->Clear();

  for (const auto& it : package_name_filter_) {
    proto->add_package_name_filter(
        static_cast<decltype(proto->package_name_filter(0))>(it));
    static_assert(sizeof(it) == sizeof(proto->package_name_filter(0)),
                  "size mismatch");
  }
  *(proto->mutable_unknown_fields()) = unknown_fields_;
}

}  // namespace perfetto
